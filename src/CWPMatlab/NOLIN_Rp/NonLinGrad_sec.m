% AUTHOR: Petr Jilek, Colorado School of Mines, Center for Wave
% Phenomena, January 2002.  

function NonLinGrad_sec;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% NonLinGrad_sec is the secondary subphase of PHASE2, the nonlinear
% least-square gradient-type inversion (for detailed description of the
% inversion algorythm, see the "lsqnonlin" function on:
% http://www.mathworks.com/access/helpdesk/help/toolbox/optim/optim.shtml).
% This routine can be used in two ways: 1) to select wanted
% recovered models, and 2) to complete the inversion of chosen models by
% aplying "higher resolution" stopping criterion.  
% add 1):  
% The routine selects "good" inversion results (stored in RESULT.out- and
% EVOLUTION.out-type files), disregarding all results exceeding a prescribed
% value of the objective function, i.e., disregardin unwanted models that do
% not fit the data with required accuracy. These selected results are stored
% in new RESULT.out- and EVOLUTION.out-type files.
% add 2):
% The routine performs the step 1), followed by further refinement of the
% selected models choosing "higher resolution" stopping criterion.
%
% WARNING! The refinement does not necessarly mean a recovery of models
% closer to the true model since it may result in fitting noise rather then
% actual physics contained in the data, if the stopping criterion is chosen
% too small (too high resolution). The decission (the choice of the stopping
% criterion) is left for the user.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%   You should be familiar with the meanings of basic variables, 
%   as described in README.MAIN file.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% INPUT:
% I) Data file ("Data.in" usually) containing the input ERROR-CONTAMINATED
%    data in the matrix form whose lines are in the following format: 
%    [inc_angle azimuth Rpp Rps1 Rps2].
% II) RESULT.out file generated by NonLinGrad_pri in the primary subphase.
% III) EVOLUTION.out file generated by NonLinGrad_pri in the primary suphase.
%
% OUTPUT: I) RESULT_S.out ... analogy to RESULT.out (generated by
%            NonLinGrad_pri.m); results of the inversion after applying
%            NonLinGrad_sec.m program. The file has the same format as
%            RESULT.out.
%         II) EVOLUTION_S.out analogy to EVOLUTION.out file (generated by
%             NonLinGrad_pri.m); information about the inversion progress
%             after applying NonLinGrad_sec.m program. The file contains the
%             evolution during BOTH primary and secondary subphases. The
%             file has the same format as EVOLUTION.out.
%        III) INFO_S.out ... analogy to INFO.out (generated by NonLinGrad_pri.m);
%              informative file about the inversion of the secondary
%              subphase ONLY. This implies that this file is generated only
%              if the additional model refinement is requested. The file has
%              the same format as INFO.out.
%         IV) Problems.out ... analogy to Problems.out (generated by NonLinGrad_pri.m);.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%-------
% Unmark this if the routine is to be run under Matlab,
% mark this if the routine is to be compiled into an executable.
% If used, adjust the path of the libraries accordingly.
%
%clear all;
%close all;
%path(path,'/Net/dobrin/home1/pjilek/src/Matlab/NOLIN_Rp/LIB');      %Obj_Rcf library M routines
% this library should be installed - Matlab Optimization Toolbox
%path(path,'.../Optim');                                              %Optim library M routines
%---------

global Pdata
global Sdata
global S1data
global S2data
global RECORD

% ==========================
% START OF INITIAL SETTINGS:
% ==========================

model_ID=4;        % (0=ISO)  (3=HTI aligned) (4=HTIxHTI) (5=ORT aligned) (6=ORTxORT)
F_obj=[0.0 0.55];   % The range of accepted values of the objective
                    % function; all models with Fobj ouside this range
                    % will be disregarded. This can be used to study
                    % convergence of model parameters for different local
                    % minima of Fobj found. The upper boundary can be
                    % also used to eliminate models generated in the primary subphase
                    % that do not fit the data well, so the secondary
                    % subphase (slower) is performed on a smaller number
                    % of models. The upper boundary can be
                    % established using the routine ModelMisfit.m. 

% Some other selection criteria: this allows to put additional constraints
% on individula medium parameters, i.e. only those models can be
% processed that attain only certain values of c\selected medium
% parameters - see the two following examples.
Gm=[-1.10 1.15];     % see line 197 (second index) for the meaning of Gm
Gm2=[-1.30 1.40];    % see line 198 (second index) for the meaning of Gm2
% End of the selection
		   
purify=1;          % 1...enforce the further model refinement defined
                   % bellow; 
		   % <>1 ... no further refinement of the models.
		   
FtolParam = 1e-4; % Resolution stopping criterion active only in the case
                   % when purify=1. Tolerance of the misfit function; the
                   % inversion terminates if the misfit function changes by
                   % less than FtolParam. If FtolParam is too small, you
                   % will be fitting noise. The range of values
                   % FtolParam=(1e-4,1e-3) seems to be optimal for the
                   % purpose of the secondary subphase.

% =======================
% END OF INITIAL SETTINGS
% =======================

% -------------
% DATA READING:
% -------------

Dname=input('Enter input Data-file name: \n','s');
fid=fopen(Dname);
D=fscanf(fid,'%f',[5 Inf]);
fclose(fid);
model=D';

Rname=input('Enter input RESULT-file name: \n','s');
Ename=input('Enter input EVOLUTION-file name: \n','s');
fid0=fopen(Rname);
fid1=fopen(Ename);
if model_ID==0
  R=fscanf(fid0,'%f',[5 Inf]); 
  E=fscanf(fid1,'%f',[7 Inf]);
end;
if model_ID==3
  R=fscanf(fid0,'%f',[11 Inf]);  
  E=fscanf(fid1,'%f',[13 Inf]);
end;
if model_ID==4
  R=fscanf(fid0,'%f',[12 Inf]);  
  E=fscanf(fid1,'%f',[14 Inf]);
end;
if model_ID==5
  R=fscanf(fid0,'%f',[19 Inf]);  
  E=fscanf(fid1,'%f',[21 Inf]);
end;
if model_ID==6
  R=fscanf(fid0,'%f',[20 Inf]);  
  E=fscanf(fid1,'%f',[22 Inf]);
end;
fclose(fid0);
fclose(fid1);
RES=R';
EVOL=E';

% THE OLD WAY TO READ IN DATA
% ---------------------------
%load Data.in;
%load EVOLUTION.out;
%load RESULT.out;
%model=Data;
%EVOL=EVOLUTION;
%RES=RESULT;

% -------------------
% DATA PREPROCESSING:
% -------------------

LB=RES(1,:);
LB(1)=[];
UB=RES(2,:);
UB(1)=[];
RES(1:2,:)=[];
[x y]=size(RES);
[xx yy]=size(EVOL);
%if max(EVOL(:,1))~=x
%  fprintf('*** ERROR: detected inconsistency between RESULT and EVOLUTION files; EVOLUTION probably containes an unfinished inversion ***\n');
%  fprintf('*** program terminated ***\n');
%  break;
%end;


% -------------
% FILE SORTING:
% -------------

J=0;
for I=1:x
  J=J+1;
  JJ=J;

  while EVOL(J,:)~=[-100]
    evolution(J,:)=EVOL(J,:);
    J=J+1;
  end;
  evolution(J,:)=[-100];
%  if (evolution(J-1,3) >= min(F_obj) & evolution(J-1,3) <= max(F_obj))
  if (evolution(J-1,3) >= min(F_obj) & evolution(J-1,3) <= max(F_obj)) & ...
(evolution(J-1,10) >= min(Gm) & evolution(J-1,10) <= max(Gm)) & ...
(evolution(J-1,7) >= min(Gm2) & evolution(J-1,7) <= max(Gm2))
    EVOL_final(JJ:J,:)=evolution(JJ:J,:);
    RES_final(I,:)=RES(I,:);
  else 
    EVOL_final(JJ:J,1:yy)=[0];
    RES_final(I,1:y)=[0];
  end;
end;
T1=find(EVOL_final(:,1)==0);
T2=find(RES_final(:,1)==0);

EVOL_final(T1,:)=[];
RES_final(T2,:)=[];

%
% storing the results if no purification required:
%

if purify ~=1
  RES_final=[0 LB;
	     0 UB;
	     RES_final];
  fid1=fopen('RESULT_S.out','w');
  fid2=fopen('EVOLUTION_S.out','w');
  if model_ID==0
    fprintf(fid1,'%i \t %f \t %f \t %f \t %f \n',RES_final');
    fprintf(fid2,'%i \t %i \t %f \t %f \t %f \t %f \t %f \n',EVOL_final');
  elseif model_ID==3
    fprintf(fid1,'%i \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \n',RES_final');
    fprintf(fid2,'%i \t %i \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \n',EVOL_final');
  elseif model_ID==4
    fprintf(fid1,'%i \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \n',RES_final');
    fprintf(fid2,'%i \t %i \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \n',EVOL_final');
  elseif model_ID==5
    fprintf(fid1,'%i \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \n',RES_final');
    fprintf(fid2,'%i \t %i \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \n',EVOL_final');
  elseif model_ID==6
    fprintf(fid1,'%i \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \n',RES_final');
    fprintf(fid2,'%i \t %i \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \n',EVOL_final');
  end;
  fclose(fid1);
  fclose(fid2);
end;

% -------------------
% MODEL PURIFICATION:
% -------------------

if purify==1

  inc_deg=model(:,1);
  azim_deg=model(:,2);
  Pdata=model(:,3);
  S1data=model(:,4);
  S2data=model(:,5);
  inc=inc_deg*pi/180;
  azim=azim_deg*pi/180;


  [x y]=size(EVOL_final);
  evolution=[];
  KA=1;
  
  for I=1:x
    
    evolution=EVOL_final(I,:);
    if evolution~=[-100]
      if I==1
	fid0=fopen('EVOLUTION_S.out','w');
      else
	fid0=fopen('EVOLUTION_S.out','a');
      end;
      if model_ID==0
        Sdata=sqrt(S1data.^2+S2data.^2);  % for ISO models, this operation
                                      % unifies the S1 and S2 waves
                                      % formally computed by the exact code.
	fprintf(fid0,'%i \t %i \t %f \t %f \t %f \t %f \t %f \n',evolution);
      elseif model_ID==3
	fprintf(fid0,'%i \t %i \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \n',evolution);
      elseif model_ID==4
	fprintf(fid0,'%i \t %i \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \n',evolution);
      elseif model_ID==5
	fprintf(fid0,'%i \t %i \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \n',evolution);
      elseif model_ID==6
	fprintf(fid0,'%i \t %i \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \n',evolution);
      end;
      fclose(fid0);
    end;
    
    if evolution==[-100]
    
      INITIAL=EVOL_final(I-1,:);
      INITIAL(1:3)=[];
      
      fprintf('*** Model refinement is running ***\n');

      %
      % Model optimization:
      % 
      
      XtolParam = 1e-7;
      f_eval_ISO = 500;
      f_eval_HTI = 700;
      f_eval_ORT = 700;
      II=EVOL_final(I-1,1);
      
      if model_ID==0  % ISO:
	RECORD=(EVOL_final(I-1,2)-1)*5+1;
	OPTIONS = optimset('DerivativeCheck','off','Diagnostics','off',  'LargeScale', 'on', 'Display', 'on', ...
			   'LevenbergMarquardt','off','Jacobian', 'off','MaxFunEvals',f_eval_ISO,'MaxIter', 100, ...
			   'TolX', XtolParam,   'TolFun', FtolParam);
	[medium,L2norm,residual,flag,out_struc,lambda,jac] = ...
	    lsqnonlin('ISO_objective',INITIAL,LB,UB,OPTIONS,inc,azim,-II,1);
	result=medium;
	info=[flag out_struc.iterations out_struc.funcCount out_struc.cgiterations];
	FF=ISO_objective(result,inc,azim,I,1);
	F_obj_final=sum(FF.^2);
	
      elseif model_ID==3  % HTI aligned:
	RECORD=(EVOL_final(I-1,2)-1)*11+1;
	OPTIONS = optimset('DerivativeCheck','off','Diagnostics','off',  'LargeScale', 'on', 'Display', 'on', ...
			   'LevenbergMarquardt','off','Jacobian', 'off','MaxFunEvals',f_eval_HTI,'MaxIter', 100, ...
			   'TolX', XtolParam,   'TolFun', FtolParam);
	[medium,L2norm,residual,flag,out_struc,lambda,jac] = ...
	    lsqnonlin('HTI_align_objective',INITIAL,LB,UB,OPTIONS,inc,azim,-II,1);
	result=medium;
	info=[flag out_struc.iterations out_struc.funcCount out_struc.cgiterations];
	FF=HTI_align_objective(result,inc,azim,I,1);
	F_obj_final=sum(FF.^2);
	
      elseif model_ID==4  % HTIxHTI:
	RECORD=(EVOL_final(I-1,2)-1)*12+1;
	OPTIONS = optimset('DerivativeCheck','off','Diagnostics','off',  'LargeScale', 'on', 'Display', 'on', ...
			   'LevenbergMarquardt','off','Jacobian', 'off','MaxFunEvals',f_eval_HTI,'MaxIter', 100, ...
			   'TolX', XtolParam,   'TolFun', FtolParam);
	[medium,L2norm,residual,flag,out_struc,lambda,jac] = ...
	    lsqnonlin('HTI_objective',INITIAL,LB,UB,OPTIONS,inc,azim,-II,1);
	result=medium;
	info=[flag out_struc.iterations out_struc.funcCount out_struc.cgiterations];
	FF=HTI_objective(result,inc,azim,I,1);
	F_obj_final=sum(FF.^2);
	
      elseif model_ID==5  % ORT aligned:
	RECORD=(EVOL_final(I-1,2)-1)*19+1;
	OPTIONS = optimset('DerivativeCheck','off','Diagnostics','off',  'LargeScale', 'on', 'Display', 'on', ...
			   'LevenbergMarquardt','off','Jacobian', 'off','MaxFunEvals',f_eval_ORT,'MaxIter', 150, ...
			   'TolX', XtolParam,   'TolFun', FtolParam);
	[medium,L2norm,residual,flag,out_struc,lambda,jac] = ...
	    lsqnonlin('ORT_align_objective',INITIAL,LB,UB,OPTIONS,inc,azim,-II,1);
	result=medium;
	info=[flag out_struc.iterations out_struc.funcCount out_struc.cgiterations];
	FF=ORT_align_objective(result,inc,azim,I,1);
	F_obj_final=sum(FF.^2);
	
      elseif model_ID==6  % ORTxORT:
	RECORD=(EVOL_final(I-1,2)-1)*20+1;
	OPTIONS = optimset('DerivativeCheck','off','Diagnostics','off',  'LargeScale', 'on', 'Display', 'on', ...
			   'LevenbergMarquardt','off','Jacobian', 'off','MaxFunEvals',f_eval_ORT,'MaxIter', 150, ...
			   'TolX', XtolParam,   'TolFun', FtolParam);
	[medium,L2norm,residual,flag,out_struc,lambda,jac] = ...
	    lsqnonlin('ORT_objective',INITIAL,LB,UB,OPTIONS,inc,azim,-II,1);
	result=medium;
	info=[flag out_struc.iterations out_struc.funcCount out_struc.cgiterations];
	FF=ORT_objective(result,inc,azim,I,1);
	F_obj_final=sum(FF.^2);
	
      end;
      
      % 
      % Storing the purified results:
      % 
      
      fid0=fopen('EVOLUTION_S.out','a');
      if KA == 1
	fid1=fopen('RESULT_S.out','w');         % estimated models
	fid2=fopen('INFO_S.out','w');           % info about the inversion
						% result (convergence, e.t.c.)
      else
	fid1=fopen('RESULT_S.out','a');
	fid2=fopen('INFO_S.out','a');   
      end;
      
      if model_ID==0
	fprintf(fid0,'%i %i %i %i %i %i %i\n',[-100 -100 -100 -100 -100 -100 -100]);
	if KA==1
	  fprintf(fid1,'%i \t %f \t %f \t %f \t %f \n',0, LB);
	  fprintf(fid1,'%i \t %f \t %f \t %f \t %f \n',0, UB);
	end;      
	fprintf(fid1,'%i \t %f \t %f \t %f \t %f \n',II, result);
	fprintf(fid2,'\n initial conditions: Drho=%f Dv33=%f Dv55=%f b_a=%f \n',INITIAL);
      elseif model_ID==3
	% this marks the end of the model #I in EVOLUTION file:
	fprintf(fid0,'%i %i %i %i %i %i %i %i %i %i %i %i %i\n',[-100 -100 -100 -100 -100 -100 -100 -100 -100 -100 -100 -100 -100]);
	if KA==1
	  fprintf(fid1,'%i \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \n',0,LB);
	  fprintf(fid1,'%i \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \n',0,UB);
	end;      
	fprintf(fid1,'%i \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \n',II,result);
	fprintf(fid2,'\n initial conditions: Drho=%f Dv33=%f Dv55=%f b_a=%f \nev1=%f dv1=%f g1=%f ev2=%f dv2=%f g2=%f \n',INITIAL);
      elseif model_ID==4
	% this marks the end of the model #I in EVOLUTION file:
	fprintf(fid0,'%i %i %i %i %i %i %i %i %i %i %i %i %i %i\n',[-100 -100 -100 -100 -100 -100 -100 -100 -100 -100 -100 -100 -100 -100]);
	if KA==1
	  fprintf(fid1,'%i \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \n',0,LB);
	  fprintf(fid1,'%i \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \n',0,UB);
	end;      
	fprintf(fid1,'%i \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \n',II,result);
	fprintf(fid2,'\n initial conditions: Drho=%f Dv33=%f Dv55=%f b_a=%f \nev1=%f dv1=%f g1=%f ev2=%f dv2=%f g2=%f kappa=%f\n',INITIAL);
      elseif model_ID==5
	% this marks the end of the model #I in EVOLUTION file:
	fprintf(fid0,'%i %i %i %i %i %i %i %i %i %i %i %i %i %i %i %i %i %i %i %i %i\n',[-100 -100 -100 -100 -100 -100 -100 -100 -100 -100 -100 -100 -100 -100 -100 -100 -100 -100 -100 -100 -100]);
	if KA==1
	  fprintf(fid1,'%i \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t \n',0,LB);
	  fprintf(fid1,'%i \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t \n',0,UB);
	end;      
	fprintf(fid1,'%i \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t \n',II,result);
	fprintf(fid2,'\n initial conditions: Drho=%f Dv33=%f Dv55=%f b_a=%f \ne1_1=%f e2_1=%f d1_1=%f d2_1=%f g1_1=%f g2_1=%f d3_1=%f \ne1_2=%f e2_2=%f d1_2=%f d2_2=%f g1_2=%f g2_2=%f d3_2=%f \n',INITIAL);
      elseif model_ID==6
	% this marks the end of the model #I in EVOLUTION file:
	fprintf(fid0,'%i %i %i %i %i %i %i %i %i %i %i %i %i %i %i %i %i %i %i %i %i %i\n',[-100 -100 -100 -100 -100 -100 -100 -100 -100 -100 -100 -100 -100 -100 -100 -100 -100 -100 -100 -100 -100 -100]);
	if KA==1
	  fprintf(fid1,'%i \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \n',0,LB);
	  fprintf(fid1,'%i \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \n',0,UB);
	end;
	fprintf(fid1,'%i \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \t %f \n',II,result);
	fprintf(fid2,'\ninitial conditions: Drho=%f Dv33=%f Dv55=%f b_a=%f \ne1_1=%f e2_1=%f d1_1=%f d2_1=%f g1_1=%f g2_1=%f d3_1=%f \ne1_2=%f e2_2=%f d1_2=%f d2_2=%f g1_2=%f g2_2=%f d3_2=%f kappa=%f\n',INITIAL);
      end;
      fprintf(fid2,'n_err=%i \t F_obj=%f \t convergence=%i \t n_Itter=%i \t n_FunEval=%i \t n_CGitter=%i \n',I,F_obj_final,info);
      fclose(fid1);
      fclose(fid2);
      fclose(fid0);
      
      fprintf('*** refinement of the model # %i (out of %i possible) finished \n',II,max(EVOL_final(:,1)));
      KA=KA+1;
      
    end;  % end of the if evolution=[-100] condition (purification of a
          % specific model)
    
  end;  % end of the loop over EVOL_final models 
  
end;   % end of if purify==1 condition

%%%%%%%% END OF FILE %%%%%%%%%%%%%%%%%%%%%%%%%%%


