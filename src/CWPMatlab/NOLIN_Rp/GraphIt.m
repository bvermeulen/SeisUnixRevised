% AUTHOR: Petr Jilek, Colorado School of Mines, Center for Wave
% Phenomena, January 2002.  

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% GraphIt is the main plotting routine to view and analyse the results. It
% creates a system of plots of Fobj and chosen medium parameters and their
% combinations as functions of iteration number. From the plots, it is
% possible to study such characteristics as path and rate of convergence
% (i.e., an info about the topology of the minimum), stability (dependence
% on initial conditions), resolution (dispersion of the results), possible
% existence of other local minima of a similar depth e.t.c..  Similarly to
% NonLinGrad_sec, this routine also allows to view models corresponding only
% to selected local minima, or to view models complying with prescribed a
% priori information.
%
% This routine is not fully automated. The user has to make his/her own
% choice of parameters being plotted and the final graph appearance (axis
% description, axis length, e.t.c.), so some knowledge of basic Matlab
% graphic routines is required. All necessary changes can be made by user in
% the last few lines of this routine (denoted as "USER CHANGES:") and in the
% appropriate subroutines ISO_GraphIt, HTI_GraphIt, and ORT_GraphIt
% (accordingly to the model symmetry). Many examples inside these subroutines
% show how to make appropriate adjustments. The soubroutines must be in the
% current directory, or on the path defined below.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% INPUT:
% I) RESULT.out-type file generated by NonLinGrad routines in PHASE2.
% II) EVOLUTION.out-type file generated by NonLinGrad routines in PHASE2.
%
% OUTPUT: graphs on screen
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

clear all;
close all; 
% Make sure the path is correct! 
% This sets the path for the
% subroutines ISO_GraphIt, HTI_GraphIt, and ORT_GraphIt.
path(path,'/Net/dobrin/home1/pjilek/src/Matlab/NOLIN_Rp/LIB');      %Graph library M routines

% ==========================
% START OF INITIAL SETTINGS:
% ==========================


model_ID=0;        % (0=ISO)  (3=HTI aligned) (4=HTIxHTI) (5=ORT aligned) (6=ORTxORT)
F_obj=[0.0 2.0];   % Only those models corresponding to Fobj within this range of
                   % values will be plotted.
% Some other selection criteria: only those models will be
% plotted that attain only certain values of c\selected medium
% parameters - see the three following examples.
Gm=[-10.07 10.12];     % see line 161 for the meaning of Gm
Gm2=[-10.50 10.60];    % see line 162 for the meaning of Gm2
Gm3=[-10.44 10.49];    % see line 160 for the meaning of Gm3
% End of additional model selection

F_set=2;           % sets the maximum value of F_obj being captured in the Fobj
                   % plot. If exceeded, the value is smoothed out (=
                   % previous value). This option is used to avoid abrupt
                   % artificial jumps for higher iteration numbers in the
                   % F_obj plots due to existance of "forbidden zones" (where
                   % F_obj is highly penalized). In not supressed, the
                   % scaling of the plot is inadequate.
		   % WARNING!!! F_set should be sufficiently large,
                   % larger than any value of F_obj at the beginning of
                   % each itterations in the EVOLUTION file.
		   
SW=1;              % =1 only medium parameters are plotted, =2 only
                   % selected combinations of the medium parameters are
                   % plotted, and =3 both are plotted (this option just
                   % may save some time).

		   % Color settings (requires some knowledge of making
                   % pretty colors):
CR=[0.6 0.6 0.6];  % CR sets the color of resulting models
CE=[0 0 1];        % CE sets the color of the "exact-value line"
                   % Some basic colors:
		   % [0 0 0] ... black
		   % [1 1 1] ... white
		   % [0.6 0.6 0.6] ... light gray
		   % [1 0 0] ... red
		   % [0 1 0] ... bright green
		   % [0 0 1] ... blue

% =======================
% END OF INITIAL SETTINGS
% =======================

% -------------------
% DATA PREPROCESSING:
% -------------------

Rname=input('Enter input RESULT-file name: \n','s');
Ename=input('Enter input EVOLUTION-file name: \n','s');
% this is the same as above, but faster if you know the file names in
% advance: 
%Rname='RESULT_all.out';
%Ename='EVOLUTION_all.out';
fid0=fopen(Rname);
fid1=fopen(Ename);
if model_ID==0
  R=fscanf(fid0,'%f',[5 Inf]); 
  E=fscanf(fid1,'%f',[7 Inf]);
end;
if model_ID==3
  R=fscanf(fid0,'%f',[11 Inf]);  
  E=fscanf(fid1,'%f',[13 Inf]);
end;
if model_ID==4
  R=fscanf(fid0,'%f',[12 Inf]);  
  E=fscanf(fid1,'%f',[14 Inf]);
end;
if model_ID==5
  R=fscanf(fid0,'%f',[19 Inf]);  
  E=fscanf(fid1,'%f',[21 Inf]);
end;
if model_ID==6
  R=fscanf(fid0,'%f',[20 Inf]);  
  E=fscanf(fid1,'%f',[22 Inf]);
end;
fclose(fid0);
fclose(fid1);
RES=R';
EVOL=E';

LB=RES(1,:);
LB(1)=[];
UB=RES(2,:);
UB(1)=[];
RES(1:2,:)=[];
[x y]=size(RES);
[xx yy]=size(EVOL);
%if max(EVOL(:,1))~=x
%  fprintf('*** ERROR: detected inconsistency between RESULT and EVOLUTION files; EVOLUTION probably containes an unfinished inversion ***\n');
%  fprintf('*** program terminated ***\n');
%  break;
%end;


% -------------
% FILE SORTING:
% -------------

J=0;
for I=1:x
  J=J+1;
  JJ=J;

  while EVOL(J,:)~=[-100]
    evolution(J,:)=EVOL(J,:);
    J=J+1;
  end;
  evolution(J,:)=[-100];
  if model_ID==0
   if (evolution(J-1,3) >= min(F_obj) & evolution(J-1,3) <= max(F_obj))
     EVOL_final(JJ:J,:)=evolution(JJ:J,:);
     RES_final(I,:)=RES(I,:);
   else
     EVOL_final(JJ:J,1:yy)=[0];
     RES_final(I,1:y)=[0];
   end;
  end;
  if model_ID==3 | model_ID==4 | model_ID==5 | model_ID==6
   if (evolution(J-1,3) >= min(F_obj) & evolution(J-1,3) <= max(F_obj)) & ...
(evolution(J-1,6) >= min(Gm3) & evolution(J-1,6) <= max(Gm3)) & ...                     
(evolution(J-1,10) >= min(Gm) & evolution(J-1,10) <= max(Gm)) & ...
(evolution(J-1,7) >= min(Gm2) & evolution(J-1,7) <= max(Gm2)) 
     EVOL_final(JJ:J,:)=evolution(JJ:J,:);
     RES_final(I,:)=RES(I,:);
   else 
     EVOL_final(JJ:J,1:yy)=[0];
     RES_final(I,1:y)=[0];
   end;
  end;
end;
T1=find(EVOL_final(:,1)==0);
T2=find(RES_final(:,1)==0);

EVOL_final(T1,:)=[];
RES_final(T2,:)=[];
EVOLUTION=EVOL_final;
RESULT=RES_final;

%
% omiting multiplications in the results and re-numbering the iteration
% column in EVOLUTION file (column 2) accordingly:
%

% omiting:
[x y]=size(EVOLUTION);
for I=1:x-1
  if EVOLUTION(I,3:y)==EVOLUTION(I+1,3:y)
    EVOLUTION(I,:)=[0];
  end;
end;

T1=find(EVOLUTION(:,1)==0);
EVOLUTION(T1,:)=[];
[x y]=size(EVOLUTION);

% renumbering:
T1=find(EVOLUTION(:,2)==1); % vector of first iterations
T1(length(T1)+1)=x+1;
for I=1:length(T1)-1
  T2=T1(I+1)-T1(I)-1;
  T3=[1:T2];
  EVOLUTION(T1(I):T1(I)+T2-1,2)=T3';
end;

[x y]=size(EVOLUTION);

%-------------------
% GRAPH THE RESULTS:
%-------------------

for I=1:x
  if (EVOLUTION(I,2)~=1 & EVOLUTION(I,3)>F_set)
    EVOLUTION(I,3)=EVOLUTION(I-1,3);
  end;
end;

if model_ID==0
  [F1,AF1]=ISO_GraphIt(EVOLUTION,CR,CE);
  F2=[0];
  AF2=[0];
end;

if model_ID==3 | model_ID==4
  [F1,AF1,F2,AF2]=HTI_GraphIt(model_ID,EVOLUTION,CR,CE,SW);
end;

if model_ID==5 | model_ID==6
  [F1,AF1,F2,AF2]=ORT_GraphIt(model_ID,EVOLUTION,CR,CE,SW);
end;

% USER CHANGES: Here you can additionally change the position and size of the figures
% as well as redefine common x-axis of all the plots
% (AF1..figure(1), AF2..figure(2)).  

if SW==1 | SW==3
  set(F1,'Position',[200    10   700   650]);
  set(AF1,'XLim',[1 30]);
end;
if SW==2 | SW==3  
  set(F2,'Position',[220    76   700   700]);
  set(AF2,'XLim',[1 30]);
end;

%%%%%%%% END OF FILE %%%%%%%%%%%%%%%%%%%%%%%%%%%


