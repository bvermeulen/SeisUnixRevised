
MULTICOMPONENT STACKING VELOCITY TOMOGRAPHY package


This package is designed to perform a joint tomographic
inversion of the NMO ellipses, reflection slopes, and
zero-offset traveltimes of PP- and SS-waves. 
For a given set of trial interval anisotropic parameters,
the zero-offset traveltimes and the reflection time slopes are
used to compute the one-way zero-offset rays for all
reflection events. Then the interfaces for the trial model
are reconstructed by fitting polynomials to the termination
points of the zero-offset rays. Finally, the interval parameters
are obtained by minimizing the objective function. The 
elements of the objective function are the measured and computed
NMO ellipses.  

Note that a critical part of the package includes 3-D ray-tracing in 
block-homogeneous anisotropic media with irregular interfaces. Current 
version designed for isotropic, VTI, HTI, TTI, Orthorhombic, and 
Monoclinic media.   



References:

Grechka, V., Pech, A., and Tsvankin, I., 2001,
 Multicomponent stacking-velocity tomography for transversely isotropic media:
CWP Project Review (CWP-365).

Grechka, V., Pech, A., and Tsvankin, I., 2002,
P-wave stacking-velocity tomography for VTI media: Geophys. Prosp., 50,
 151--168.


Credits:

Vladimir Grechka and Andres Pech




Main codes:

  
artData.m  3-D ray-tracing in block-homogeneous anisotropic media with irregular
           interfaces. Current version designed for isotropic, VTI, HTI, TTI, 
           Orthorhombic, and Monoclinic media.   

artInv.m   Joint non-linear inversion of NMO velocities,
           reflection time slopes, and zero offset traveltimes of PP- and SS-waves.
           Current version designed for
           isotropic, VTI, HTI, TTI, Orthorhombic, and Monoclinic media.          



1) Programs:


Contents of this directory are Matlab packages to perform the following
tasks.


artConGN.m -------> 3-D ray-tracing in block-homogeneous anisotropic
                    media with irregular interfaces and parameter
                    estimation.

artConGNinv.m ----> Anisotropic reflection tomography: Gauss-Newton
                    optimization.

artData.m --------> Anisotropic Ray Tracing -- modeling data for 
                    inversion.

artInv.m ---------> Anisotropic Ray Tracing -- stacking-velocity 
                    tomography.

bondTransf.m -----> Rotate the 6*6 elastic stiffness matrix using 
                    Bond transformation.

checkRec.m -------> Check whether or not receivers sit on model 
                    interface.

christoffel.m ----> Solve the Christoffel equation for vertical 
                    slowness.

compVnmo.m -------> Compute Vnmo at a number of azimuths using the 
                    NMO ellipse W = [W11, W12, W22].

constants.m ------> Define constants needed for anisotropic ray
                    tracing.

curvInt.m --------> Compute the 2x2 matrix of the second-order 
                    derivatives d^2 x3/(d xi d xj) of the interface
                    at [x1, x2].

cyl2ell.m --------> Reconstruct the NMO ellipse W as a cross-section
                    of the NMO cylinder U. 

effCyl.m ---------> Compute the effective NMO cylinder through the
                    Dix-type averaging.

ell2cyl.m --------> Reconstruct the NMO cylinder U from its cross-section
                    W1.

fminsRT.m --------> Minimize function of several variables.

funInt.m  --------> Compute the depth x3 of the Iinterface-th
                    at [x1, x2].

funSnell.m -------> Calculate the slowness of reflected/transmitted ray
                    that satisfies Snell's law: [p x n] = const.

fzero.m ----------> Find zero of function of one variable.

global2refl.m ----> Compute the transformation matrix R from global to local
                    coordinate system, where the reflection-transmission 
                    problem is solved.

grechka2Cij.m ----> Compute Cij's from Grechka's MNC parameters.

groupVel.m -------> Compute the group velocity.

hitInt.m ---------> Compute the length of the ray segment that hits
                    interface. 

initGuess.m ------> Initial guess for tracing zero-offset rays.

inputCij.m -------> Input of Cij's (VTI, HTI, TTI, ORT, Monoclinic).

inputInt.m -------> Input of model interfaces. Each interface is modeled as 
                    a 2-D polynomial. For convenience, the plane parts of the
                    interfaces are specified separately.

inputRayCode.m ---> Input of ray codes.

                    [1,:] -- types of rays:
                           = 1 for P,
                           = 2 for fast S (S1),
                           = 3 for slow S (S2);
                    [2,:] -- number of layer where the segment is located;
                    [3,:] -- number of interface where the next 
                            reflection/transmission occurs.

inputSouRec.m ----> Input of sources and receivers.

inputVelCon.m ----> Shoot the ray specified by slowness p = [p1,p2] 
                    through the model.

intCyl.m ---------> Compute the interval NMO cylinder.

Interfaces.m -----> Select model interfaces.

inverCij.m -------> Assign values of Cij's during optimization.

inverInt.m -------> Find polynomial representation of model interface.

inverRayCode.m ---> Input of ray codes during optimization.

inverVelCon.m ----> Velocity constraint -- group velocity in a given 
                    direction.

invershot.m ------> Shoot the ray specified by slowness p = [p1,p2] 
                    through the model.

local2global.m  --> Compute the matrix R that rotates Cij from local
                    coordinate frame (x', y', z') to the global (x, y, z).
                    The rotation is specified by three angles:

                    azim -- azimuth of the local z'-axis with respect 
                            to the global x-axis.
                    tilt -- tilt of the local z'-axis with respect to 
                            the global z-axis.
                    azx1 -- azimuth of the local x'-axis with respect to
                            the global x-axis.

normInt.m --------> Compute the unit vector normal to the interface 
                    at [x1, x2].

pderInt.m --------> Compute polynomial representations of the first- and 
                    second-order derivatives of the model interfaces.

plotInvErrBar.m --> Plot error bars.

plotInvRes.m -----> Plot inversion results. 

plotModel.m ------> Plot model interfaces, positions of sources and
                    receivers.

plotRay.m --------> Plot rays.

qNewton.m --------> 2-point raytracing based on ``shooting'' solved with
                    quasi-Newton method.

shooting.m -------> Shoot the ray specified by slowness p = [p1,p2] 
                    through the model.

shooting2.m ------> 2-point raytracing based on ``shooting''.

thomsen2Cij.m ----> Compute Cij's from Thomsen's parameters.

tsvankin2Cij.m ---> Compute Cij's from Tsvankin's ORT parameters.
 


2) Getting started


 The main programs are artData.m and artInv.m

 To run the demo, you need to type artData; as described above this
 subroutine generates the data (zero-offset traveltimes, reflection
 slopes, and NMO velocities) required to run the inversion scheme.
 The data is saved in the file datanmo.03

 Once the data have been generated, you can extract the model
 parameters from the data using artInv.m. 
 The inversion scheme consists of two steps. For a given set
 of anisotropic parameters (trial set of parameters), the zero-offset
 traveltimes and reflection slopes are used to compute the one-way
 zero offset rays. The termination points of these rays are needed 
 to reconstruct the model interfaces. This is achieved by fitting
 polynomials to the termination points of the zero-offset rays. Then,
 the anisotropic parameters are obtained by minimizing the objective
 function. The elements of this function are the measured and computed
 NMO velocities. The inverted parameters are saved in Result.PSVtti2
 

3) How to change the model


 To modify the model you need to change the subroutines: inputCij.m,
 inputInt.m, inputRayCode.m, inverRayCode.m, artData.m, artInv.m,
 and artConGNinv.m.




--------------- inputCij.m and inverCij.m -----------------



  In these subroutines, you can chose the following categories

%==============================================================================
%   VTI (transverse isotropy, not necessarily vertical),
%   ORT (orthorhombic with the symmetry planes coinciding with the
%        global coordinate planes),
%   MNC (monoclinic with the horizontal symmetry plane), and
%   ARB (arbitrary).
% Each category has its set of input anisotropic parameters:
%   Vp and Vs for ISO,
%   Thomsen's for VTI,
%   Tsvankin's for ORT,
%   Grechka's for MNC, and
%==============================================================================

 For instance, if the model contains only one VTI layer, set

 TypeAnis = ['VTI'];.

 If the model contains three VTI layers, set

 TypeAnis = ['VTI', 'VTI', 'VTI'];


 The anisotropic parameters used to generate the data (demo) can be seen 
 in subroutine inputCij.m (lines 58-61).


     58         Vp0 = 1.5;   Vs0 = 0.6;
     59         epsilon = 0.150;   delta =  0.050;   gamma = -0.3;
     60         tiltAngle(layer) = 90*pi/180;
     61         azimAngle(layer) = 40*pi/180;


 On the other hand, the unknown parameters can be seen in subroutine
 inverCij.m (lines 60-65).


     60         Vp0 = param(1);       Vs0 = param(2);
     61         epsilon = param(3);   delta = param(4);   gamma = -0.3;
     64         tiltAngle(layer) = 90*pi/180;
     65         azimAngle(layer) = param(5)*pi/180;


 
---------------- inputInt.m -------------------------- 



 In this subroutine, you can change the number of interfaces (lines 41-43).
  
 For example, if the model contains only one layer, set

  41  depthPlane = [0.,   0.5];
  42  dipPlane   = [0.,  30.0];
  43  azmPlane   = [0.,   0.0];

 In this case, the depth of the reflector is 0.5 km, the dip of the
 reflector is 25 degrees, and the azimuth of the reflector is 30 
 degrees.

 If the model has three layers, set

 depthPlane = [0.,   1.0,   2.0,   3.0];
 dipPlane   = [0.,  12.0,   5.0,  10.0];
 azmPlane   = [0.,  20.0, 170.0,  20.0];

 In the examples shown above, the reflectors are plane dipping interfaces.
 To include irregular interfaces, you need to 
 add the polynomial component to the plane component.
 This can be done by assigning non-zero elements
 to the matrix IntPol(i,j). The components of this matrix are the 
 coefficients of the polynomials used to describe the model interfaces.
 IntPol(i,j) can be defined as follows  


%                      x^0      |    x^1      |    x^2      ...
%                 +-------------+-------------+----------------
%             y^0 | IntPol(1,1) | IntPol(1,2) | IntPol(1,3) ...
%                 +-------------+-------------+----------------
%             y^1 | IntPol(2,1) | IntPol(2,2) | IntPol(2,3) ...
%                 +-------------+-------------+----------------
%             y^2 | IntPol(3,1) | IntPol(3,2) | IntPol(3,3) ...
%                 +-------------+-------------+----------------
%             ... |    ...      |     ...     |     ...        






---------------- artData.m ---------------------



 Depending on the number of layers, you need to change the number of 
 trajectories.  
   
  Change in line 42 
  
  Ntrajectory; 




---------------- artInv.m --------------------- 



 Depending on the number of layers, you need to change the initial guess. 
 In this subroutine, you can also change the level of Gaussian noise added to 
 NMO velocities, reflection slopes, and zero-offset traveltimes.


 Change lines 79-81

 79   paramp0 = [1.60,  0.70,  0.01,  0.01,    0.0];
 80   paraMIN = [1.00,  0.40, -0.20, -0.20, -180.0];
 81   paraMAX = [2.00,  1.00,  0.60,  0.60,  180.0];


 paramp0 is the vector that defines the initial guess.
 paramMIN and paramMAX correspond to the lower and upper limits, respectively,
 used during the inversion.
 

 If you want to change the level of Gaussian noise, change the following line

 72  errt = 0.010;   errp = 0.010;   erru = 0.020;  

 errt -> error in traveltimes.
 errp -> error in slownesses.
 erru -> error in NMO velocities. 


 The last lines that you need to change are 


    115   fprintf(fout, ...
    116           ['%6.3f %6.3f %6.3f %6.3f %6.2f %9.2e  %2g \n'], ...
    117           [param], sqrt(resnorm), exitflag);
 

 Line 116 prints the inverted parameters.



------------------ artConGNinv.m ----------------------



 Depending on the number of anisotropic parameters (unknowns), the following
 line needs to be updated

 
 183   fprintf(['>>> %6.3f %6.3f %6.3f %6.3f %6.2f -- %8.2e \r'], [param, FF]);


 Line 183 prints the anisotropic parameters for each iteration 
 (during the inversion).  



------------------ inputRayCode.m and inverRayCode.m ----------------------



 To facilitate the forward modeling and inversion, a code is set in subroutine
 inputRayCode.m  
   

 If the model contains only one layer, the following code can be set 

    RayCode(1,:) = [1, 1];     %% ray type
    RayCode(2,:) = [1, 1];     %% layers
    RayCode(3,:) = [2, 1];     %% interfaces


 This code can be explained using the following sketch 

     S      R
   ------------- interface 1
      \    /                                         \    /
       \  /    layer 1                     downgoing  \  /  upgoing
        \/                                 ray         \/   ray
   -------------  interface 2


 S and R correspond to source and receiver locations, respectively.   

 RayCode(1,:) = [1, 1] indicates that the downgoing and the upgoing rays
 correspond to P-waves.
 If you want to model converted waves, then set RayCode(1,:) = [1, 2].
 This indicates that the upgoing ray corresponds to S1-waves. You can 
 model P-, S1-, and, S2- waves.

 RayCode(2,:) = [1, 1] shows that the downgoing and upgoing rays are 
 contained in layer 1.

 RayCode(3,:) = [2, 1] indicates that the downgoing ray "hits" the second 
 interface, and that the upgoing ray "hits" the first interface.
 The first interface (interface 1) represents the surface of
 the earth. 


 If the model contains three layers, the code can be set as follows

 
    RayCode(1,:) = [1, 1, 1, 1, 1, 1];     %% ray type
    RayCode(2,:) = [1, 2, 3, 3, 2, 1];     %% layers
    RayCode(3,:) = [2, 3, 4, 3, 2, 1];     %% interfaces
 

 The number of elements of RayCode(1,:) ( 6 elements ) corresponds to the number
 of segments in which the ray is divided.


       S               R
 ---------------------------------     interface 1                
       \              /                                                
      1 \            /6   layer 1                                       
 ---------------------------------     interface 2
          \        /       
         2 \      /5      layer 2
 ---------------------------------     interface 3
             \  /
            3 \/4         layer 3
 ---------------------------------     interface 4


 As indicated by RayCode(2,:), segments 1 and 6 are contained in layer 1,
 segments 2 and 5 are contained in layer 2, and segments 3 and 4 are contained
 in layer 3. 

 RayCode(3,:) shows that segment 1 "hits" interface 2, segment 2 "hits"
 interface 3, segment 3 "hits" interface 4, segment 4 "hits" interface 3,
 segment 5 "hits interface 2, and segment 6 "hits" interface 1. 


