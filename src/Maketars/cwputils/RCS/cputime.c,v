head     1.10;
branch   ;
access   john cartley jkc;
symbols  ;
locks    ; strict;
comment  @ * @;


1.10
date     94.09.23.11.18.16;  author john;  state Exp;
branches ;
next     1.9;

1.9
date     94.06.14.11.48.24;  author john;  state Exp;
branches ;
next     1.8;

1.8
date     94.03.14.08.40.57;  author john;  state Exp;
branches ;
next     1.7;

1.7
date     92.12.04.11.40.09;  author john;  state Exp;
branches ;
next     1.6;

1.6
date     91.09.18.07.44.13;  author jkcohen;  state Exp;
branches ;
next     1.5;

1.5
date     91.09.17.15.56.26;  author jkcohen;  state Exp;
branches ;
next     1.4;

1.4
date     91.06.01.20.25.43;  author jkcohen;  state Exp;
branches ;
next     1.3;

1.3
date     90.07.29.07.41.07;  author jkc;  state Exp;
branches ;
next     1.2;

1.2
date     90.07.27.23.22.59;  author jkc;  state Exp;
branches ;
next     1.1;

1.1
date     90.07.27.23.18.28;  author jkc;  state Exp;
branches ;
next     ;


desc
@Give cpu time
@


1.10
log
@fixed comments with regard to SOLARIS
@
text
@/*********************** self documentation **********************/
/*****************************************************************************
CPUTIME - return cpu time (UNIX user time) in seconds using ANSI C built-ins

cputime return cpu time (UNIX user time) in seconds using ANSI C built-ins

******************************************************************************
Input:

Returned:	cpu time in seconds

******************************************************************************
Function Prototype:
float cputime (void);

******************************************************************************
NOTES:
Relies on CLK_TCK being defined in time.h per ANSI C.
See also: cpusec() in this library.  There is some variability in
the definition that should be used for CLOCK_UNIT.

On Solaris, use the folowing #ifdef ... #endif block:
#if (_IBMR2||__hp9000s800)
#define CLOCK_UNIT	1000000
#else
#define CLOCK_UNIT	CLK_TCK
#endif

******************************************************************************
Author:		Jack K. Cohen, Colorado School of Mines, 07/27/90
******************************************************************************/
/**************** end self doc ********************************/

#include <time.h>

#ifndef CLK_TCK
#define CLK_TCK	64
#endif

/* ANSI C book says clock() units are CLK_TCK, but IBM docs say millisecs */
/* under solaris change CLK_TCK to _SC_CLK_TCK */
#if (_IBMR2||__hp9000s800)
#define CLOCK_UNIT	1000000
#else
#define CLOCK_UNIT	CLK_TCK
#endif

float
cputime()
/*****************************************************************************
return cpu time (UNIX user time) in seconds using ANSI C built-ins
******************************************************************************
Input:

Returned:	cpu time in seconds
******************************************************************************
NOTES:
	Relies on CLK_TCK being defined in time.h per ANSI C.
	See also: cpusec() in this library.
******************************************************************************
Author:		Jack K. Cohen, Colorado School of Mines, 07/27/90
*****************************************************************************/
{
	return clock() / (float) CLOCK_UNIT;
}



#ifdef TEST

main()
{
	int i, n = 1000000;
	float cpu_used, a = 0.0, b = 1.0;

	cpu_used = cputime();
	for (i = 0; i < n; ++i)  a += b;
	cpu_used = cputime() - cpu_used;
	printf("a = %f  cpu time = %f\n", a, cpu_used);
}
#endif
@


1.9
log
@added Hp support
@
text
@d23 1
a23 1
#ifdef _IBMR2
d26 1
a26 1
#define CLOCK_UNIT	_SC_CLK_TCK
@


1.8
log
@added dummy selfdoc 
@
text
@d42 1
a42 1
#ifdef _IBMR2
@


1.7
log
@added an ifndef for CLK_TCK
@
text
@d1 33
d41 1
@


1.6
log
@Reformatted per new standard.
@
text
@d3 4
@


1.5
log
@Added comment.
@
text
@d14 2
d17 2
d21 1
@


1.4
log
@Change so IBM compiler (non-ansi in this respect) doesn't warn.
Unfortunately, when they get their act together on this, the
source code will have to be changed (back) when the ifdef is
removed.
@
text
@d14 3
@


1.3
log
@Use #ifdef to compensate for ANSI C lacuna on RS6000.
@
text
@d3 1
d5 3
a7 1
#define CLK_TCK	CLOCKS_PER_SEC
d18 1
a18 1
	return clock() / (float) CLK_TCK;
@


1.2
log
@Added -DTEST driver
@
text
@d3 4
d15 1
a15 1
	return clock() / (float) CLOCKS_PER_SEC;
a20 1
#include "cwp.h"
@


1.1
log
@Initial revision
@
text
@d13 17
@
