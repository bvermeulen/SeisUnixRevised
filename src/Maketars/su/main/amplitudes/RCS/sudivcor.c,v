head	1.16;
access;
symbols;
locks; strict;
comment	@ * @;


1.16
date	2012.11.29.18.05.28;	author john;	state Exp;
branches;
next	1.15;

1.15
date	2011.11.16.17.23.05;	author john;	state Exp;
branches;
next	1.14;

1.14
date	2011.11.11.23.58.23;	author john;	state Exp;
branches;
next	1.13;

1.13
date	2003.06.09.16.17.07;	author john;	state Exp;
branches;
next	1.12;

1.12
date	96.09.06.20.47.10;	author jkc;	state Exp;
branches;
next	1.11;

1.11
date	96.01.24.18.35.52;	author jkc;	state Exp;
branches;
next	1.10;

1.10
date	95.08.03.16.34.12;	author jkc;	state Exp;
branches;
next	1.9;

1.9
date	95.08.02.19.16.01;	author jkc;	state Exp;
branches;
next	1.8;

1.8
date	94.08.25.14.59.04;	author jkc;	state Exp;
branches;
next	1.7;

1.7
date	93.11.24.11.33.26;	author john;	state Exp;
branches;
next	1.6;

1.6
date	93.08.09.15.19.24;	author john;	state Exp;
branches;
next	1.5;

1.5
date	92.10.23.15.41.19;	author john;	state Exp;
branches;
next	1.4;

1.4
date	92.01.12.08.53.04;	author jkc;	state Exp;
branches;
next	1.3;

1.3
date	91.09.05.08.49.41;	author jkcohen;	state Exp;
branches;
next	1.2;

1.2
date	91.04.25.16.35.25;	author jkc;	state Exp;
branches;
next	1.1;

1.1
date	91.04.23.16.08.44;	author jkc;	state Exp;
branches;
next	;


desc
@Divergence (spreading) correction
@


1.16
log
@changed "interval" velocities to "rms" velociies
@
text
@/* Copyright (c) Colorado School of Mines, 2011.*/
/* All rights reserved.                       */

/* SUDIVCOR: $Revision: 1.15 $ ; $Date: 2011/11/16 17:23:05 $		*/

#include "su.h"
#include "segy.h"

/*********************** self documentation ******************************/
char *sdoc[] = {
" 									",
" SUDIVCOR - Divergence (spreading) correction				",
" 									",
" sudivcor <stdin >stdout  [optional parms]				",
" 									",
" Required Parameters:							",
" none									",
" 									",
" Optional Parameters:							",
" trms=0.0	times corresponding to rms velocities in vrms		",
" vrms=1500.0	rms velocities corresponding to times in trms	",
" vfile=	binary (non-ascii) file containing velocities vrms(t)	",
" 									",
" Notes:								",
" The trms, vrms arrays specify an rms velocity function of time.	",
" Linear interpolation and constant extrapolation is used to determine	",
" rms velocities at times not specified.  Values specified in trms	",
" must increase monotonically.						",
" 									",
" Alternatively, rms velocities may be stored in a binary file		",
" containing one velocity for every time sample.  If vfile is specified,",
" then the trms and vrms arrays are ignored.				",
" 									",
" The time of the first sample is assumed to be constant, and is taken	",
" as the value of the first trace header field delrt. 			",
NULL};

/* Credits:
 *	CWP: Jack K. Cohen, Francesca Fazarri
 *
 * Trace header fields accessed:  ns, dt, delrt
 */
/**************** end self doc *******************************************/


segy tr;

int
main(int argc, char **argv)
{
	int nt;			/* number of points on input trace	*/
	float dt;		/* sample spacing			*/
	float tmin;		/* time of first sample			*/
	float *vt;		/* velocity function			*/
	float *vrms;		/* rms velocity picks			*/
	float *trms;		/* times corresponding to vrms picks	*/
	cwp_String vfile="";	/* binary file giving vrms(t)		*/
	float *divcor;		/* divergence correction function	*/
	float denom=1.0; 	/* vrms to divide by 			*/

	/* Hook up getpar */
	initargs(argc, argv);
	requestdoc(1);


	/* Get information from the first header */
	if (!gettr(&tr)) err("can't get first trace");
	nt = tr.ns;
	dt = ((double) tr.dt)/1000000.0;
	tmin = tr.delrt/1000.0;


	/* Determine velocity function v(t) */
	vt = ealloc1float(nt);
	if (!getparstring("vfile", &vfile)) {
		int ntrms = countparval("trms");
		int nvrms = countparval("vrms");
		int npar;
		register int it, itrms;

		if (nvrms != ntrms)
			err("number of trms and vrms must be equal");

		if (!ntrms)  ntrms = 2;  /* default case */
		trms = ealloc1float(ntrms);
		if (!(npar = getparfloat("trms", trms))) {
			trms[0] = 0.0;
			trms[1] = dt;
		}
		if (npar == 1) trms[1] = trms[0] + dt; /* const vel case */
		
		if (!nvrms)  nvrms = 2;  /* default case */
		vrms = ealloc1float(nvrms);
		if (!(npar = getparfloat("vrms", vrms))) {
			vrms[0] = 1500.0;
			vrms[1] = 1500.0;
		}
		if (npar == 1) vrms[1] = vrms[0];  /* const vel case */

		for (itrms = 1; itrms < ntrms; ++itrms)
			if (trms[itrms] <= trms[itrms-1])
				err("trms must increase monotonically");

		for (it = 0; it < nt; ++it) {
			float t = tmin + it*dt;
			intlin(ntrms,trms,vrms,vrms[0],vrms[ntrms-1],
				1,&t,&vt[it]);
		}
		denom = trms[1]*vrms[1]*vrms[1];
		
	} else {  /* user gave a vfile */
		FILE *fp = efopen(vfile, "r");
		
		if (nt != efread(vt, FSIZE, nt, fp)) {
			err("cannot read %d velocities from file %s",
				nt, vfile);
		} else denom = (tmin + dt)*vt[1]*vt[1];
	}
        checkpars();

	/* Form divergence correction vector */
	{ register int it;
	  
	  divcor = ealloc1float(nt);
	  for (it = 0; it < nt; ++it) {
	  	float t = tmin + it*dt;
		divcor[it] = t*vt[it]*vt[it] / denom;
	  }
	}
   
	  
	/* Main loop over traces */
	do {
		register int it;

	  	for (it = 0; it < nt; ++it)  tr.data[it] *=  divcor[it];
		puttr(&tr);
	} while (gettr(&tr));

	return(CWP_Exit());
}
@


1.15
log
@added Reg Beardsley's checkpar
@
text
@d4 1
a4 1
/* SUDIVCOR: $Revision: 1.13 $ ; $Date: 2003/06/09 16:17:07 $		*/
d21 1
a21 1
" vrms=1500.0	interval velocities corresponding to times in trms	",
d27 1
a27 1
" interval velocities at times not specified.  Values specified in trms	",
@


1.14
log
@copyright
@
text
@d119 1
@


1.13
log
@9 June 2003
@
text
@d1 4
a4 1
/* SUDIVCOR: $Revision: 1.12 $ ; $Date: 1996/09/06 20:47:10 $		*/
@


1.12
log
@Fixed -Wall complaints.
@
text
@d1 1
a1 1
/* SUDIVCOR: $Revision: 1.11 $ ; $Date: 1996/01/24 18:35:52 $		*/
d36 1
a36 1
 *	CWP: Jack, Francesca
d136 1
a136 1
	return EXIT_SUCCESS;
@


1.11
log
@Handle header fields accessed/modified for sudoc.
@
text
@d1 1
a1 1
/* SUDIVCOR: $Revision: 1.10 $ ; $Date: 1995/08/03 16:34:12 $		*/
d45 1
d56 1
a56 1
	float denom; 		/* vrms to divide by 			*/
@


1.10
log
@Zapped unneeded cast of tr.delrt (sigh).
@
text
@d1 1
a1 1
/* SUDIVCOR: $Revision: 1.9 $ ; $Date: 1995/08/02 19:16:01 $		*/
a32 2
" 									",
" Trace header fields accessed:  ns, dt, delrt				",
d37 2
@


1.9
log
@Cast the integers tr.dt and/or tr.delrt double before division with floating
constant (which is implicitly double precision).  Casting is
needed to make some compilers happy and if we cast to float then
there will be an extra conversion to double because of the floating
constant (casting to float and writing 1000000.0F would save a
conversion, but most people find that F yucky and efficiency is
not an issue here).  Motivated by examples from Stew Levin.
@
text
@d1 1
a1 1
/* SUDIVCOR: $Revision: 1.8 $ ; $Date: 1994/08/25 14:59:04 $		*/
d66 1
a66 1
	tmin = ((double) tr.delrt)/1000.0;
@


1.8
log
@Removed copyright statement from codes that had it.
Moved self-doc line for sudoc.
@
text
@d1 1
a1 1
/* SUDIVCOR: $Revision: 1.7 $ ; $Date: 93/11/24 11:33:26 $		*/
d65 2
a66 2
	dt = (float) tr.dt/1000000.0;
	tmin = tr.delrt/1000.0;
@


1.7
log
@explicit cast added
@
text
@d1 1
a1 1
/* SUDIVCOR: $Revision: 1.6 $ ; $Date: 93/08/09 15:19:24 $		*/
a2 13
/*----------------------------------------------------------------------
 * Copyright (c) Colorado School of Mines, 1990.
 * All rights reserved.
 *
 * This code is part of SU.  SU stands for Seismic Unix, a processing line
 * developed at the Colorado School of Mines, partially based on Stanford
 * Exploration Project (SEP) software.  Inquiries should be addressed to:
 *
 *  Jack K. Cohen, Center for Wave Phenomena, Colorado School of Mines,
 *  Golden, CO 80401  (jkc@@dix.mines.colorado.edu)
 *----------------------------------------------------------------------
 */

a35 1
/**************** end self doc *******************************************/
d40 1
@


1.6
log
@changed String to cwp_String
@
text
@d1 1
a1 1
/* SUDIVCOR: $Revision: 1.5 $ ; $Date: 92/10/23 15:41:19 $		*/
d78 1
a78 1
	dt = tr.dt/1000000.0;
@


1.5
log
@new selfdoc installed
@
text
@d1 1
a1 1
/* SUDIVCOR: $Revision: 1.4 $ ; $Date: 92/01/12 08:53:04 $		*/
d66 1
a66 1
	String vfile="";	/* binary file giving vrms(t)		*/
@


1.4
log
@Bug fix by ff.  "If the user inputs a vfile, then vrms and trms are
not assigned values, so denom in line 129 is not defined.  Redefine
denom as global variable to fix.
@
text
@d1 1
a1 1
/* SUDIVCOR: $Revision: 1.3 $ ; $Date: 91/09/05 08:49:41 $		*/
d20 29
a48 29
String sdoc =
" 									\n"
" SUDIVCOR - Divergence (spreading) correction				\n"
" 									\n"
" sudivcor <stdin >stdout  [optional parms]				\n"
" 									\n"
" Required Parameters:							\n"
" none									\n"
" 									\n"
" Optional Parameters:							\n"
" trms=0.0	times corresponding to rms velocities in vrms		\n"
" vrms=1500.0	interval velocities corresponding to times in trms	\n"
" vfile=	binary (non-ascii) file containing velocities vrms(t)	\n"
" 									\n"
" Notes:								\n"
" The trms, vrms arrays specify an rms velocity function of time.	\n"
" Linear interpolation and constant extrapolation is used to determine	\n"
" interval velocities at times not specified.  Values specified in trms	\n"
" must increase monotonically.						\n"
" 									\n"
" Alternatively, rms velocities may be stored in a binary file		\n"
" containing one velocity for every time sample.  If vfile is specified,\n"
" then the trms and vrms arrays are ignored.				\n"
" 									\n"
" The time of the first sample is assumed to be constant, and is taken	\n"
" as the value of the first trace header field delrt. 			\n"
" 									\n"
" Trace header fields accessed:  ns, dt, delrt				\n"
;
d72 1
a72 1
	askdoc(1);
@


1.3
log
@string -> String and so forth
@
text
@d1 1
a1 1
/* SUDIVCOR: $Revision: 1.2 $ ; $Date: 91/04/25 16:35:25 $		*/
d52 1
a52 1
 *	CWP: Jack
d68 1
a69 1

d118 2
d126 1
a126 1
		}
d128 1
a128 2
	
	
d130 1
a130 2
	{ float denom = trms[1]*vrms[1]*vrms[1];
	  register int it;
@


1.2
log
@Tweaks
@
text
@d1 1
a1 1
/* SUDIVCOR: $Revision: 1.1 $ ; $Date: 91/04/23 16:08:44 $		*/
d20 1
a20 1
string sdoc =
d66 1
a66 1
	char *vfile="";		/* binary file giving vrms(t)		*/
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/* SUDIVCOR: $Revision: 1.6 $ ; $Date: 90/06/14 14:38:34 $		*/
d93 1
a93 1
		if (!ntrms)  ntrms = 2;
d99 1
a99 1
		if (npar == 1) trms[1] = trms[0] + dt;
d101 1
a101 1
		if (!nvrms)  nvrms = 2;
d107 1
a107 1
		if (npar == 1) vrms[1] = vrms[0];
d112 1
d118 1
a118 1
	} else {  /* User gave a vfile */
d143 1
a143 1
		
a145 1

@
