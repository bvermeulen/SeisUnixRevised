head	1.21;
access;
symbols;
locks; strict;
comment	@ * @;


1.21
date	2011.11.16.23.35.04;	author john;	state Exp;
branches;
next	1.20;

1.20
date	2011.11.12.00.42.19;	author john;	state Exp;
branches;
next	1.19;

1.19
date	2003.06.09.16.17.07;	author john;	state Exp;
branches;
next	1.18;

1.18
date	97.07.28.22.36.46;	author john;	state Exp;
branches;
next	1.17;

1.17
date	96.09.18.19.39.07;	author jkc;	state Exp;
branches;
next	1.16;

1.16
date	96.08.20.21.13.26;	author jkc;	state Exp;
branches;
next	1.15;

1.15
date	96.02.05.21.15.39;	author jkc;	state Exp;
branches;
next	1.14;

1.14
date	95.09.27.20.24.24;	author john;	state Exp;
branches;
next	1.13;

1.13
date	95.08.04.15.29.36;	author jkc;	state Exp;
branches;
next	1.12;

1.12
date	94.08.25.15.00.54;	author jkc;	state Exp;
branches;
next	1.11;

1.11
date	94.06.23.14.55.46;	author jkc;	state Exp;
branches;
next	1.10;

1.10
date	94.06.15.11.45.07;	author john;	state Exp;
branches;
next	1.9;

1.9
date	92.10.26.10.26.22;	author john;	state Exp;
branches;
next	1.8;

1.8
date	91.10.09.14.27.18;	author jkc;	state Exp;
branches;
next	1.7;

1.7
date	91.06.21.12.28.58;	author jkcohen;	state Exp;
branches;
next	1.6;

1.6
date	91.02.27.10.51.47;	author jkcohen;	state Exp;
branches;
next	1.5;

1.5
date	91.02.26.13.27.14;	author jkcohen;	state Exp;
branches;
next	1.4;

1.4
date	91.02.14.10.20.22;	author jkcohen;	state Exp;
branches;
next	1.3;

1.3
date	91.02.09.20.25.41;	author jkcohen;	state Exp;
branches;
next	1.2;

1.2
date	90.12.18.20.01.08;	author jkc;	state Exp;
branches;
next	1.1;

1.1
date	90.12.18.19.58.26;	author jkc;	state Exp;
branches;
next	;


desc
@2-d FFT in t, x
@


1.21
log
@added Reg Beardsley's checkpar()
@
text
@/* Copyright (c) Colorado School of Mines, 2011.*/
/* All rights reserved.                       */

/* SUSPECFK: $Revision: 1.19 $ ; $Date: 2003/06/09 16:17:07 $		*/

#include "su.h"
#include "segy.h"
#include <signal.h>

/*********************** self documentation **********************/
char *sdoc[] = {
" 								",
" SUSPECFK - F-K Fourier SPECtrum of data set			",
" 								",
" suspecfk <infile >outfile [optional parameters]		",
"								",
" Optional parameters:						",
"								",
" dt=from header		time sampling interval		",
" dx=from header(d2) or 1.0	spatial sampling interval	",
"								",
" verbose=0	verbose = 1 echoes information			",
"								",
" tmpdir= 	 if non-empty, use the value as a directory path",
"		 prefix for storing temporary files; else if the",
"	         the CWP_TMPDIR environment variable is set use	",
"	         its value for the path; else use tmpfile()	",
" 								",
" Note: To facilitate further processing, the sampling intervals",
"       in frequency and wavenumber as well as the first	",
"	frequency (0) and the first wavenumber are set in the	",
"	output header (as respectively d1, d2, f1, f2).		",
" 								",
" Note: The relation: w = 2 pi F is well known, but there	",
"	doesn't	seem to be a commonly used letter corresponding	",
"	to F for the spatial conjugate transform variable.  We	",
"	use K for this.  More specifically we assume a phase:	",
"		i(w t - k x) = 2 pi i(F t - K x).		",
"	and F, K define our notion of frequency, wavenumber.	",
" 								",
NULL};

/* Credits:
 *
 *	CWP: Dave (algorithm), Jack (reformatting for SU)
 *
 * Trace header fields accessed: ns, dt, d2
 * Trace header fields modified: tracl, ns, dt, trid, d1, f1, d2, f2
 */
/**************** end self doc ***********************************/


#define PFA_MAX	720720	/* Largest allowed nfft	          */

/* Prototype */
static void closefiles(void);

/* Globals (so can trap signal) defining temporary disk files */
char tracefile[BUFSIZ];	/* filename for the file of traces	*/
FILE *tracefp;		/* fp for trace storage file		*/

segy intrace, outtrace;

int
main(int argc, char **argv)
{
	int nt,nx;		/* numbers of samples			*/
	float dt,dx;		/* sampling intervals			*/
	float d1,d2;		/* output intervals in F, K		*/
	float f1,f2;		/* output first samples in F, K		*/
	int it,ix;		/* sample indices			*/
	int ntfft,nxfft;	/* dimensions after padding for FFT	*/
	int nF,nK;		/* transform (output) dimensions	*/
	int iF,iK;		/* transform sample indices		*/
	register complex **ct;	/* complex FFT workspace		*/
	register float **rt;	/* float FFT workspace			*/
	int verbose;		/* flag for echoing information		*/
	char *tmpdir;		/* directory path for tmp files		*/
	cwp_Bool istmpdir=cwp_false;/* true for user-given path		*/


	/* Hook up getpar to handle the parameters */
	initargs(argc,argv);
	requestdoc(1);


	/* Get info from first trace */ 
	if (!gettr(&intrace))  err("can't get first trace");
	nt = intrace.ns;


	/* dt is used only to set output header value d1 */
	if (!getparfloat("dt", &dt)) {
		if (intrace.dt) { /* is dt field set? */
			dt = ((double) intrace.dt)/ 1000000.0;
		} else { /* dt not set, assume 4 ms */
			dt = 0.004;
			warn("tr.dt not set, assuming dt=0.004");
		}
	}
	if (!getparfloat("dx",&dx)) {
		if (intrace.d2) { /* is d2 field set? */
			dx = intrace.d2;
		} else {
			dx = 1.0;
			warn("tr.d2 not set, assuming d2=1.0");
		}
	}

	if (!getparint("verbose", &verbose))	verbose = 0;

	/* Look for user-supplied tmpdir */
	if (!getparstring("tmpdir",&tmpdir) &&
	    !(tmpdir = getenv("CWP_TMPDIR"))) tmpdir="";
	if (!STREQ(tmpdir, "") && access(tmpdir, WRITE_OK))
		err("you can't write in %s (or it doesn't exist)", tmpdir);


        checkpars();

	/* Store traces in tmpfile while getting a count */
	if (STREQ(tmpdir,"")) {
		tracefp = etmpfile();
		if (verbose) warn("using tmpfile() call");
	} else { /* user-supplied tmpdir */
		char directory[BUFSIZ];
		strcpy(directory, tmpdir);
		strcpy(tracefile, temporary_filename(directory));
		/* Trap signals so can remove temp files */
		signal(SIGINT,  (void (*) (int)) closefiles);
		signal(SIGQUIT, (void (*) (int)) closefiles);
		signal(SIGHUP,  (void (*) (int)) closefiles);
		signal(SIGTERM, (void (*) (int)) closefiles);
		tracefp = efopen(tracefile, "w+");
      		istmpdir=cwp_true;		
		if (verbose) warn("putting temporary files in %s", directory);
	}

	nx = 0;
	do { 
		++nx;
		efwrite(intrace.data, FSIZE, nt, tracefp);
	} while (gettr(&intrace));


	/* Determine lengths for prime-factor FFTs */
	ntfft = npfar(nt);
	nxfft = npfa(nx);
	if (ntfft >= SU_NFLTS || ntfft >= PFA_MAX)
			err("Padded nt=%d--too big",ntfft);
	if (nxfft >= SU_NFLTS || nxfft >= PFA_MAX)
			err("Padded nx=%d--too big",nxfft);

	/* Determine output header values */
	d1 = 1.0/(ntfft*dt);
	d2 = 1.0/(nxfft*dx);
	f1 = 0.0;
	f2 = -1.0/(2*dx);


	/* Determine complex transform sizes */
	nF = ntfft/2+1;
	nK = nxfft;


	/* Allocate space */
	ct = alloc2complex(nF, nK);
	rt = alloc2float(ntfft, nxfft);


	/* Load traces into fft arrays and close tmpfile */
	erewind(tracefp);
	for (ix=0; ix<nx; ++ix) {

		efread(rt[ix], FSIZE, nt, tracefp);

                /* if ix odd, negate to center transform of dimension 2 */
                if (ISODD(ix))
			for (it=0; it<nt; ++it)  rt[ix][it] = -rt[ix][it];

		/* pad dimension 1 with zeros */
		for (it=nt; it<ntfft; ++it)  rt[ix][it] = 0.0;
	}
	efclose(tracefp);


	/* Pad dimension 2 with zeros */
	for (ix=nx; ix<nxfft; ++ix)
		for (it=0; it<ntfft; ++it)  rt[ix][it] = 0.0;

	
	/* Fourier transform dimension 1 */
	pfa2rc(1,1,ntfft,nx,rt[0],ct[0]);
	

	/* Fourier transform dimension 2 */
	pfa2cc(-1,2,nF,nxfft,ct[0]);
	

	/* Compute and output amplitude spectrum */
	for (iK=0; iK<nK; ++iK) {
		for (iF=0; iF<nF; ++iF)  outtrace.data[iF] = rcabs(ct[iK][iF]);

		/* set header values */
		outtrace.tracl = iK + 1;
		outtrace.ns = nF;
		outtrace.dt = 0;  /* d1 is now the relevant step size */
		outtrace.trid = KOMEGA;
		outtrace.d1 = d1;
		outtrace.f1 = f1;
		outtrace.d2 = d2;
		outtrace.f2 = f2;

		puttr(&outtrace);
	}
	
	/* Clean up */
	if (istmpdir) eremove(tracefile);
	return(CWP_Exit());
}

/* for graceful interrupt termination */
static void closefiles(void)
{
	efclose(tracefp);
	eremove(tracefile);
	exit(EXIT_FAILURE);
}
@


1.20
log
@copyright
@
text
@d118 3
@


1.19
log
@9 June 2003
@
text
@d1 4
a4 1
/* SUSPECFK: $Revision: 1.18 $ ; $Date: 1997/07/28 22:36:46 $		*/
@


1.18
log
@changes suggested by Stew Levin to silence SGI compiler warnings, etc
@
text
@d1 1
a1 1
/* SUSPECFK: $Revision: 1.17 $ ; $Date: 1996/09/18 19:39:07 $		*/
d213 1
a213 1
	return EXIT_SUCCESS;
@


1.17
log
@Did tmpfile stuff.
@
text
@d1 1
a1 1
/* SUSPECFK: $Revision: 1.16 $ ; $Date: 1996/08/20 21:13:26 $		*/
d76 1
a76 1
	cwp_Bool istmpdir=false;/* true for user-given path		*/
d129 1
a129 1
      		istmpdir=true;		
d143 4
a146 3
	if (ntfft >= MIN(SU_NFLTS,PFA_MAX)) err("Padded nt=%d--too big",ntfft);
	if (nxfft >= MIN(SU_NFLTS,PFA_MAX)) err("Padded nx=%d--too big",nxfft);

@


1.16
log
@Make -Wall happy.
@
text
@d1 1
a1 1
/* SUSPECFK: $Revision: 1.15 $ ; $Date: 1996/02/05 21:15:39 $		*/
d5 1
d19 7
d52 7
d74 3
a76 1
	FILE *tracefp;		/* temp file to hold traces		*/
d107 7
d116 17
a132 1
	tracefp = etmpfile();
d165 1
a165 1
	rewind(tracefp);
d210 2
d213 8
@


1.15
log
@Deal with header words accessed/modified down to sudoc.
@
text
@d1 1
a1 1
/* SUSPECFK: $Revision: 1.14 $ ; $Date: 1995/09/27 20:24:24 $		*/
d46 1
@


1.14
log
@added return EXIT_SUCCESS at the end of main
@
text
@d1 1
a1 1
/* SUSPECFK: $Revision: 1.13 $ ; $Date: 1995/08/04 15:29:36 $		*/
d35 3
d102 2
a103 2
	if (ntfft >= MIN(SU_NFLTS, PFA_MAX)) err("Padded nt=%d--too big",ntfft);
	if (nxfft >= MIN(SU_NFLTS, PFA_MAX)) err("Padded nx=%d--too big",nxfft);
@


1.13
log
@Changed cast of intrace.dt to double for consistency.
@
text
@d1 1
a1 1
/* SUSPECFK: $Revision: 1.12 $ ; $Date: 1994/08/25 15:00:54 $		*/
d165 2
@


1.12
log
@Removed copyright statement from codes that had it.
Moved self-doc line for sudoc.
@
text
@d1 1
a1 1
/* SUSPECFK: $Revision: 1.11 $ ; $Date: 94/06/23 14:55:46 $		*/
d71 1
a71 1
			dt = (float) intrace.dt / 1000000.0;
@


1.11
log
@fccabs -> rcabs
@
text
@d1 1
a1 1
/* SUSPECFK: $Revision: 1.10 $ ; $Date: 94/06/15 11:45:07 $		*/
a2 13
/*----------------------------------------------------------------------
 * Copyright (c) Colorado School of Mines, 1990.
 * All rights reserved.
 *
 * This code is part of SU.  SU stands for Seismic Unix, a processing line
 * developed at the Colorado School of Mines, partially based on Stanford
 * Exploration Project (SEP) software.  Inquiries should be addressed to:
 *
 *  Jack K. Cohen, Center for Wave Phenomena, Colorado School of Mines,
 *  Golden, CO 80401  (jkc@@dix.mines.colorado.edu)
 *----------------------------------------------------------------------
 */

a30 1
/**************** end self doc ***********************************/
d36 1
@


1.10
log
@fcabs -> fccabs
@
text
@d1 1
a1 1
/* SUSPECFK: $Revision: 1.9 $ ; $Date: 92/10/26 10:26:22 $		*/
d164 1
a164 1
		for (iF=0; iF<nF; ++iF)  outtrace.data[iF] = fccabs(ct[iK][iF]);
@


1.9
log
@new selfdoc installed
@
text
@d1 1
a1 1
/* SUSPECFK: $Revision: 1.8 $ ; $Date: 91/10/09 14:27:18 $		*/
d164 1
a164 1
		for (iF=0; iF<nF; ++iF)  outtrace.data[iF] = fcabs(ct[iK][iF]);
@


1.8
log
@string -> String
@
text
@d1 1
a1 1
/* SUSPECFK: $Revision: 1.7 $ ; $Date: 91/06/21 12:28:58 $		*/
d20 24
a43 24
String sdoc =
" 								\n"
" SUSPECFK - F-K Fourier SPECtrum of data set			\n"
" 								\n"
" suspecfk <infile >outfile [optional parameters]		\n"
"								\n"
" Optional parameters:						\n"
"								\n"
" dt=from header		time sampling interval		\n"
" dx=from header(d2) or 1.0	spatial sampling interval	\n"
"								\n"
" Note: To facilitate further processing, the sampling intervals\n"
"       in frequency and wavenumber as well as the first	\n"
"	frequency (0) and the first wavenumber are set in the	\n"
"	output header (as respectively d1, d2, f1, f2).		\n"
" 								\n"
" Note: The relation: w = 2 pi F is well known, but there	\n"
"	doesn't	seem to be a commonly used letter corresponding	\n"
"	to F for the spatial conjugate transform variable.  We	\n"
"	use K for this.  More specifically we assume a phase:	\n"
"		i(w t - k x) = 2 pi i(F t - K x).		\n"
"	and F, K define our notion of frequency, wavenumber.	\n"
" 								\n"
;
d73 1
a73 1
	askdoc(1);
@


1.7
log
@Change of program name from suspec2.
@
text
@d1 1
a1 1
/* SUSPECFK: $Revision: 1.6 $ ; $Date: 91/02/27 10:51:47 $		*/
d20 1
a20 1
string sdoc =
@


1.6
log
@Make it look at header for d2 if not getparred
@
text
@d1 1
a1 1
/* SUSPEC2: $Revision: 1.5 $ ; $Date: 91/02/26 13:27:14 $		*/
d22 1
a22 1
" SUSPEC2 - 2-d Fourier SPECtrum of data set			\n"
d24 1
a24 1
" suspec2 <infile >outfile [optional parameters]		\n"
@


1.5
log
@Fixed bug in d2 computation
@
text
@d1 1
a1 1
/* SUSPEC2: $Revision: 1.4 $ ; $Date: 91/02/14 10:20:22 $		*/
d28 2
a29 2
" dt=from header	time sampling interval			\n"
" dx=1.0		spatial sampling interval		\n"
d90 8
a97 1
	if (!getparfloat("dx",&dx))  dx = 1.0;
@


1.4
log
@Set output d1,d2,f1,f2 for plotting programs.
@
text
@d1 1
a1 1
/* SUSPEC2: $Revision: 1.3 $ ; $Date: 91/02/09 20:25:41 $		*/
d111 1
a111 1
	d2 = 1.0/(nxfft*dt);
@


1.3
log
@Corrected transform spacing info
@
text
@d1 1
a1 1
/* SUSPEC2: $Revision: 1.2 $ ; $Date: 90/12/18 20:01:08 $		*/
d26 1
a26 2
" Required Parameters:						\n"
" none								\n"
d28 7
a34 3
" Optional parameter:						\n"
" 	dt=from header		time sampling interval		\n"
"	dx=1.0			spatial sampling interval	\n"
d36 1
a36 9
" Notes: 							\n"
"	The optional sampling intervals are not needed for	\n"
"	this program, however they may well be needed for	\n"
"	subsequent processing (eg. plotting with correct	\n"
"	scales).						\n"
" 								\n"
"	To facilitate further processing, if dt is set then the	\n"
"	sampling intervals in f-K are echoed to stderr.		\n"
"	Note: the relation: w = 2 pi F is well known, but there	\n"
d41 1
a41 1
"	and echo F (Hz) and K (cycles per trace) to stderr.	\n"
d60 2
d81 10
a90 4
	/* Used only for par file */
	dt = (float) intrace.dt/1000000.0;
	if (!dt) getparfloat("dt", &dt);
	if (!getparfloat("dx",&dx)) dx = 1.0;
d109 7
a125 5
	/* Echo transform dimensions */
	if (dt) warn("d1=%f f1=0.0 d2=%f f2=%f",
			1.0/(ntfft*dt), 1.0/(nxfft*dx), -1.0/(2*dx));


d162 1
a162 1
		outtrace.dt = 0;	  /* df is now the relevant step size */
d164 5
@


1.2
log
@Changed description line
@
text
@d1 1
a1 1
/* SUSPEC2: $Revision: 1.1 $ ; $Date: 90/12/18 19:58:26 $		*/
d118 1
a118 1
			1.0/(ntfft*dt), 1.0/(nxfft*dx), -0.5*dx);
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/* SUSPEC2: $Revision: 1.9 $ ; $Date: 90/11/17 07:59:25 $		*/
d22 1
a22 1
" SUSPEC2 - Fourier SPECtrum of a 2-dimensional function	\n"
@
