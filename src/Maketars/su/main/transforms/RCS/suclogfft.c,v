head	1.12;
access;
symbols;
locks; strict;
comment	@ * @;


1.12
date	2015.11.17.22.34.47;	author john;	state Exp;
branches;
next	1.11;

1.11
date	2013.05.31.18.31.19;	author john;	state Exp;
branches;
next	1.10;

1.10
date	2011.11.23.22.32.01;	author john;	state Exp;
branches;
next	1.9;

1.9
date	2011.11.16.23.35.04;	author john;	state Exp;
branches;
next	1.8;

1.8
date	2011.11.12.00.42.19;	author john;	state Exp;
branches;
next	1.7;

1.7
date	2011.09.09.22.34.45;	author john;	state Exp;
branches;
next	1.6;

1.6
date	2011.02.15.23.52.54;	author john;	state Exp;
branches;
next	1.5;

1.5
date	2011.02.15.23.36.43;	author john;	state Exp;
branches;
next	1.4;

1.4
date	2011.02.12.00.06.55;	author john;	state Exp;
branches;
next	1.3;

1.3
date	2011.02.09.22.16.36;	author john;	state Exp;
branches;
next	1.2;

1.2
date	2010.12.08.17.34.12;	author john;	state Exp;
branches;
next	1.1;

1.1
date	2010.12.06.23.01.56;	author john;	state Exp;
branches;
next	;


desc
@real to complex log fourier transform
@


1.12
log
@added homomorphic wavelet estimation
@
text
@/* Copyright (c) Colorado School of Mines, 2011.*/
/* All rights reserved.                       */

/* SUCLOGFFT: $Revision: 1.11 $ ; $Date: 2013/05/31 18:31:19 $		*/

#include "su.h"
#include "segy.h"

/*********************** self documentation **********************/
char *sdoc[] = {
" 									",
" SUCLOGFFT - fft real time traces to complex log frequency domain traces",
" 									",
" suclogftt <stdin >sdout sign=1 					",
" 									",
" Required parameters:							",
" none									",
" 									",
" Optional parameters:							",
" sign=1			sign in exponent of fft			",
" dt=from header		sampling interval			",
" verbose=1		=0 to stop advisory messages			",
" 									",
" .... phase unwrapping options .....				   	",
" mode=suphase	simple jump detecting phase unwrapping			",
" 		=ouphase  Oppenheim's phase unwrapping			",
" unwrap=1       |dphase| > pi/unwrap constitutes a phase wrapping	",
" 	 	=0 no phase unwrapping	(in mode=suphase  only)		",
" trend=1	remove linear trend from the unwrapped phase	   	",
" zeromean=0     assume phase(0)=0.0, else assume phase is zero mean	",
" 									",
" Notes:								",
" clogfft(F(t)) = log(FFT(F(t)) = log|F(omega)| + iphi(omega)		",
" where phi(omega) is the unwrapped phase. Note that 0< unwrap<= 1.0 	",
" allows phase unwrapping to be tuned, if desired. 			",
" 									",
" To facilitate further processing, the sampling interval		",
" in frequency and first frequency (0) are set in the			",
" output header.							",
" 									",
" suclogfft unwrap=0 | suiclogfft is not quite a no-op since the trace	",
" length will usually be longer due to fft padding.			",
" 									",
" Caveats: 								",
" No check is made that the data ARE real time traces!			",
" 									",
" Output is type complex. To view amplitude, phase or real, imaginary	",
" parts, use    suamp 							",
" PI/unwrap = minimum dphase is assumed to constitute a wrap in phase	",
" for suphase unwrapping only 					",
" 									",
" Examples: 								",
" suclogfft < stdin | suamp mode=real | .... 				",
" suclogfft < stdin | suamp mode=imag | .... 				",
" 									",
" The real and imaginary parts of the complex log spectrum are the	",
" respective amplitude and phase (unwrapped) phase spectra of the input	",
" signal. 								",
"  									",
" Example:  Homomorphic wavelet estimation 				",
" suclogfft < shotgather | suamp mode=real | sustack key=dt > real.su	",
" suclogfft < shotgather | suamp mode=imag | sustack key=dt > imag.su	",
" suop2 real.su imag.su op=zipper | suiclogfft | suminphase > wavelet.su",
"  									",
"  									",
"  									",
NULL};

/* Credits:
 *      CWP: John Stockwell, Dec 2010 based on
 *	sufft by:
 *	CWP: Shuki Ronen, Chris Liner, Jack K. Cohen
 *	CENPET: Werner M. Heigl - added well log support
 *	U Montana: Bob Lankston - added m_unwrap_phase feature
 *
 * Note: leave dt set for later inversion
 *
 * Trace header fields accessed: ns, dt, d1, f1
 * Trace header fields modified: ns, d1, f1, trid
 */
/**************** end self doc ***********************************/


#define LOOKFAC	2	/* Look ahead factor for npfaro	  */
#define PFA_MAX	720720	/* Largest allowed nfft		   */

#define SIMPLE 0
#define OPPENHEIM 1

segy tr;

int
main(int argc, char **argv)
{
	register float *rt;	/* real trace				*/
	register complex *ct;	/* complex transformed trace		*/
	int nt;			/* number of points on input trace	*/
	int nfft;		/* transform length			*/
	int nf;			/* number of frequencies		*/
	int sign;		/* sign in exponent of transform	*/
	int verbose;		/* flag to get advisory messages	*/
	float dt;		/* sampling interval in secs		*/
	float d1;		/* output sample interval in Hz		*/
	cwp_Bool seismic;	/* is this seismic data? 		*/
	float unwrap;		/* PI/unwrap = min dphase assumed to wrap */
	float *phase;		/* phase of signal			*/
	float nfby2;		/* nf/2.0				*/
	
	int trend;		/* trend=1 remove linear treand in */
				/*        unwrapped phase */
	int zeromean;		/* =0 assume phase(0)=0.0, else zeromean */

	cwp_String mode="ouphase"; /* mode =suphase or =ouphase for phase unwrap */
	int imode=OPPENHEIM;	/* integer mode flag			*/

	float *real=NULL; 	/* real  part */
	float *imag=NULL;	/* imag part */

	/* Initialize */
	initargs(argc, argv);
	requestdoc(1);
	if (!getparint("verbose", &verbose))	verbose=1;
	if (!getparint("trend", &trend))	trend=1;
	if (!getparint("zeromean", &zeromean))	zeromean=0;


	/* note mode is intialized to "ouphase" and */
	/* imode is intialized to OPPENHEIM */
	getparstring("mode",&mode);
	if (STREQ(mode, "suphase")) imode = SIMPLE;
	else if (!STREQ(mode, "ouphase"))
			err("unknown mode=\"%s\", see self-doc", mode);


	if (verbose) warn("mode = %s",mode);

	/* Get info from first trace */ 
	if (!gettr(&tr))  err("can't get first trace");
	nt = tr.ns;

	/* check for seismic or well log data */
	seismic = ISSEISMIC(tr.trid);		
	if (seismic) {
		if (verbose)	warn("input is seismic data, trid=%d",tr.trid);
		dt = ((double) tr.dt)/1000000.0;
	}
	else {
		if (verbose)	warn("input is not seismic data, trid=%d",tr.trid);
		dt = tr.d1;
	 }
	if (!dt) {
		dt = .004;
		if (verbose) warn("dt or d1 not set, assumed to be .004");
	}

	/* Set up pfa fft */
	nfft = npfaro(nt, LOOKFAC * nt);
	if (nfft >= SU_NFLTS || nfft >= PFA_MAX)  err("Padded nt=%d--too big", nfft);
	nf = nfft/2 + 1;
	d1 = 1.0/(nfft*dt);
	nfby2 = nf/2.0;

	if (!getparint("sign", &sign)) sign = 1;
	if (!getparfloat("unwrap", &unwrap))	unwrap = 1.0;
	if (sign != 1 && sign != -1)   err("sign = %d must be 1 or -1", sign);


        checkpars();

	rt = ealloc1float(nfft);
	ct = ealloc1complex(nf);
	phase = ealloc1float(nf);
	real = ealloc1float(nf);
	imag = ealloc1float(nf);


	/* If dt not set, issue advisory on frequency step d1 */
	if (dt && verbose)  warn("d1=%f", 1.0/(nfft*dt));



	/* Main loop over traces */
	do {
		register int i;
	
		/* zero out arrays */
		memset((void *) phase, 0,nf*FSIZE);
		memset((void *) real, 0,nf*FSIZE);
		memset((void *) imag, 0,nf*FSIZE);
		

		/* Load trace into rt (zero-padded) */
		memcpy((void *) rt, (const void *) tr.data, nt*FSIZE);
		memset((void *) (rt + nt), 0, (nfft-nt)*FSIZE);


		/* FFT */
		pfarc(sign, nfft, rt, ct);


		/* calculate the amplitude and phase 		*/
		for (i = 0; i < nf; ++i) {
			float re=ct[i].r;
			float im=ct[i].i;
			float ampsqrd = re*re + im*im;
			
			/* calculate amplitude and phase */
			if (!CLOSETO(ampsqrd,0.0)) {
					tr.data[2*i] = (float) 0.5*log(ampsqrd);
					phase[i] = atan2(im, re);
				} else {
					phase[i] = 0.0;
					tr.data[2*i] = 0.0;
					
				}
				real[i] = ct[i].r;
				imag[i] = ct[i].i;
	
		}
		/* unwrap phase */
		if (unwrap) {

			switch(imode) {
			case SIMPLE:
				simple_unwrap_phase(nf, trend, zeromean, unwrap, phase);
			break;
			case OPPENHEIM:

				memset((void *) phase, 0,nf*FSIZE);
				oppenheim_unwrap_phase(nf, trend, zeromean, d1, real, imag, phase);
			break;
			default:
				err("mysterious mode=\"%s\"", mode);

			}

		}

		/* write unwrapped phase into imaginary part of output data */
		for (i = 0; i < nf; ++i) {
			tr.data[2*i+1] = phase[i];
		}


		/* Set header values--npfaro makes nfft even */
		tr.ns = 2*nf;
		tr.trid = FUNPACKNYQ;
		tr.d1 = d1;
		tr.f1 = 0.0;

		puttr(&tr);

	} while (gettr(&tr));


	return(CWP_Exit());
}
@


1.11
log
@largely cosmetic changes made to bring this program in alignment with suamp
@
text
@d4 1
a4 1
/* SUCLOGFFT: $Revision: 1.10 $ ; $Date: 2011/11/23 22:32:01 $		*/
d59 8
@


1.10
log
@removed m_unwrapphase function, because this doesn't work
@
text
@d4 1
a4 1
/* SUCLOGFFT: $Revision: 1.9 $ ; $Date: 2011/11/16 23:35:04 $		*/
d14 1
a14 1
" suftt <stdin >sdout sign=1 						",
d25 2
a26 2
" mode=simple	simple jump detecting phase unwrapping			",
" 		=oppen  Oppenheim's phase unwrapping			",
d28 1
a28 1
" 	 	=0 no phase unwrapping	(in simple phase unwrap only)	",
d49 2
a50 2
" PI/unwrap = min dphase is assumed to constitute a wrap in phase	",
" for simple and m phase unwrapping 					",
d80 1
a80 1
#define OPPEN 1
d105 2
a106 2
	cwp_String mode="oppen"; /* mode =simple or =oppen for phase unwrap */
	int imode=OPPEN;	/* integer mode flag			*/
d119 2
a120 2
	/* note mode is intialized to "oppen" and */
	/* imode is intialized to OPPEN */
d122 2
a123 2
	if (STREQ(mode, "simple")) imode = SIMPLE;
	else if (!STREQ(mode, "oppen"))
d197 1
d200 2
a201 2
			if (re*re+im*im) {
					tr.data[2*i] = (float) 0.5 * log(re * re + im * im);
d217 1
a217 1
				simple_unwrap_phase(nf, trend, zeromean , unwrap, phase);
d219 3
a221 1
			case OPPEN:
@


1.9
log
@added Reg Beardsley's checkpar()
@
text
@d4 1
a4 1
/* SUCLOGFFT: $Revision: 1.7 $ ; $Date: 2011/09/09 22:34:45 $		*/
d26 1
a26 2
" 		=oppen  Oppenheimer's phase unwrapping			",
"		=m  jump detection in phase followed by +-2PI 		",
d28 1
a28 1
" 	 	=0 no phase unwrapping					",
a80 1
#define M 2
a122 1
	else if (STREQ(mode, "m")) imode = M;
a220 3
			case M:
				m_unwrap_phase(nf, unwrap, trend, zeromean ,  d1,  phase);
			break;
@


1.8
log
@copyright
@
text
@d162 3
@


1.7
log
@*** empty log message ***
@
text
@d1 4
a4 1
/* SUCLOGFFT: $Revision: 1.6 $ ; $Date: 2011/02/15 23:52:54 $		*/
@


1.6
log
@put in Oppenheim phase unwrapper
@
text
@d1 1
a1 1
/* SUCLOGFFT: $Revision: 1.5 $ ; $Date: 2011/02/15 23:36:43 $		*/
d24 1
d48 1
d64 1
d79 1
d104 2
a105 2
	cwp_String mode;	/* mode	=simple or =oppen for phase unwrap */
	int imode;		/* integer mode flag			*/
a116 1
	if (!getparstring("mode",&mode)) 	mode="simple";
d118 6
a123 2
	if      (STREQ(mode, "oppen")) imode = OPPEN;
	else if (!STREQ(mode, "simple"))
d127 2
d170 1
d174 6
d216 4
a219 1
				oppenheim_unwrap_phase(nfby2, trend, zeromean, d1, real, imag, phase);
@


1.5
log
@updated to include new definitions of unwrapping
@
text
@d1 1
a1 1
/* SUCLOGFFT: $Revision: 1.4 $ ; $Date: 2011/02/12 00:06:55 $		*/
d22 2
d74 3
d100 6
d113 7
d153 2
d176 2
a177 2
		float re=ct[i].r;
		float im=ct[i].i;
d179 7
a185 7
		/* calculate amplitude and phase */
		if (re*re+im*im) {
				tr.data[2*i] = (float) 0.5 * log(re * re + im * im);
				phase[i] = atan2(im, re);
			} else {
				phase[i] = 0.0;
				tr.data[2*i] = 0.0;
d187 3
a189 1
			}
d193 15
a207 2
		if (unwrap) simple_unwrap_phase(nf, trend, zeromean , unwrap, phase);
		
@


1.4
log
@added trend removal
@
text
@d1 1
a1 1
/* SUCLOGFFT: $Revision: 1.3 $ ; $Date: 2011/02/09 22:16:36 $		*/
a67 2
/* prototype of subroutine used internally */
void unwrap_phase(int n, float w, float *phase);
d181 1
a181 1
		tr.ns = 2 * nf;
a192 61


void unwrap_phase(int n, float w, float *phase)
/************************************************************************
unwrap_phase - unwrap the phase
*************************************************************************
Input:
n		number of samples
w		unwrapping parameter; returns an error if w=0
phase		array[n] of input phase values

Output:
phase		array[n] of output phase values
*************************************************************************
Notes:
The strategy is to look at the change in phase (dphase) with each 
time step. If |dphase| >  PI/w, then use the previous value of 
dphase. No attempt is made at smoothing the dphase curve.
*************************************************************************
Author: John Stockwell, CWP, 2010
************************************************************************/
{
	int i;
	float pibyw=0.0;
	float *dphase=NULL;
	float *temp=NULL;

	/* prevent division by zero in PI/w */
	if (w==0)  err("wrapping parameter is zero");
	else	pibyw = PI/w;

	/* allocate space */
	dphase = ealloc1float(n);
	temp = ealloc1float(n);

	/* initialize */
	temp[0]=phase[0];
	dphase[0]=0.0;

	/* compute unwrapped phase at each frequency step */
	for (i = 1; i < n; ++i) {

		/* compute jump in phase */
		dphase[i] = phase[i] - phase[i-1];

		/* if jump in dphase >= PI/w, use previous dphase value */
		if (ABS(dphase[i] - dphase[i-1]) >= pibyw )
			dphase[i] = dphase[i-1];

		/* sum up values in temporary vector */
		temp[i] = temp[i-1] + dphase[i];
	}

	/* assign values of temporary vector to phase[i] */
	for (i=0; i<n; ++i) phase[i] = temp[i];

	/* free space */
	free1float(temp);
	free1float(dphase);

}
@


1.3
log
@updated
@
text
@d1 1
a1 1
/* SUCLOGFFT: $Revision: 1.2 $ ; $Date: 2010/12/08 17:34:12 $		*/
d20 6
a25 1
" unwrap=1.0	dphase >= PI/unwrap constitutes a wrapping of the phase ",
d36 1
a36 1
" suclogfft | suifft is not quite a no-op since the trace		",
d92 4
d101 2
a102 1

a122 1

d151 1
d155 1
d158 2
a159 2
			float re=ct[i].r;
			float im=ct[i].i;
d161 8
a168 6
			/* calculate amplitude and phase */
			if (re*re+im*im) {
					tr.data[2*i] = (float) 0.5 * log(re * re + im * im);
					phase[i] = atan2(im, re);
				} else {
					phase[i] = 0.0;
d170 1
a170 1

d173 2
a174 1
		if (unwrap) unwrap_phase(nf, unwrap, phase);
d181 1
@


1.2
log
@additions to selfdoc
@
text
@d1 1
a1 1
/* SUCLOGFFT: $Revision: 1.1 $ ; $Date: 2010/12/06 23:01:56 $		*/
a148 3

			/* calculate amplitude */
			tr.data[2*i] = (float) sqrt (re * re + im * im);
d150 1
a150 1
			/* calculate phase */
d152 1
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/* SUCLOGFFT: $Revision: 1.28 $ ; $Date: 2006/11/07 22:58:42 $		*/
d20 1
a20 1
" unwrap=1.0								",
d24 2
a25 1
" where phi(omega) is the unwrapped phase 				",
@
