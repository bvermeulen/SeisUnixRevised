head	1.15;
access;
symbols;
locks; strict;
comment	@ * @;


1.15
date	2011.11.16.23.35.04;	author john;	state Exp;
branches;
next	1.14;

1.14
date	2011.11.12.00.42.19;	author john;	state Exp;
branches;
next	1.13;

1.13
date	2006.03.29.23.04.28;	author john;	state Exp;
branches;
next	1.12;

1.12
date	2003.06.09.16.17.07;	author john;	state Exp;
branches;
next	1.11;

1.11
date	96.09.13.21.49.05;	author john;	state Exp;
branches;
next	1.10;

1.10
date	96.01.25.20.30.04;	author jkc;	state Exp;
branches;
next	1.9;

1.9
date	94.08.25.14.59.41;	author jkc;	state Exp;
branches;
next	1.8;

1.8
date	92.10.26.11.33.56;	author john;	state Exp;
branches;
next	1.7;

1.7
date	91.09.05.08.50.45;	author jkcohen;	state Exp;
branches;
next	1.6;

1.6
date	90.12.03.11.00.49;	author jkc;	state Exp;
branches;
next	1.5;

1.5
date	90.09.01.20.38.47;	author jkc;	state Exp;
branches;
next	1.4;

1.4
date	90.06.12.13.39.06;	author jkc;	state Exp;
branches;
next	1.3;

1.3
date	90.06.12.13.35.55;	author jkc;	state Exp;
branches;
next	1.2;

1.2
date	90.05.25.19.25.52;	author jkc;	state Exp;
branches;
next	1.1;

1.1
date	90.04.18.20.34.33;	author jkc;	state Exp;
branches;
next	;


desc
@Inverse fft packed freq -> time
@


1.15
log
@added Reg Beardsley's checkpar()
@
text
@/* Copyright (c) Colorado School of Mines, 2011.*/
/* All rights reserved.                       */

/* SUIFFT: $Revision: 1.13 $ ; $Date: 2006/03/29 23:04:28 $	*/

#include "su.h"
#include "segy.h"

/*********************** self documentation **********************/
char *sdoc[] = {
" 								",
" SUIFFT - fft complex frequency traces to real time traces	",
" 								",
" suiftt <stdin >sdout sign=-1					",
" 								",
" Required parameters:						",
" 	none							",
" 								",
" Optional parameter:						",
" 	sign=-1		sign in exponent of inverse fft		",
" 								",
" Output traces are normalized by 1/N where N is the fft size.	",
" 								",
" Note: sufft | suifft is not quite a no-op since the trace	",
" 	length will usually be longer due to fft padding.	",
" 								",
NULL};

/* Credits:
 *
 *	CWP: Shuki, Chris, Jack
 *
 * Trace header fields accessed: ns, trid
 * Trace header fields modified: ns, trid
 */
/**************** end self doc ***********************************/


#define PFA_MAX	720720		/* Largest allowed fft	*/

segy tr;

int
main(int argc, char **argv)
{
	register complex *ct;	/* complex input trace			*/
	register float *rt;	/* real output trace			*/
	int nfft;		/* fft size 				*/
	int nf;			/* number of frequencies		*/
	int sign;		/* sign in exponent of transform	*/
	float onfft;		/* 1.0/nfft				*/
	float newd1;		/* reset time domain sampling		*/


	/* Initialize */
	initargs(argc, argv);
	requestdoc(1);


	/* Get info from first trace */ 
	if (!gettr(&tr))  err("can't get first trace");
	if (tr.trid != FUNPACKNYQ)
		err("input not complex freq data, trid=%d", tr.trid);
	nfft = tr.ns - 2; /* see sufft */
	nf = nfft/2 + 1;
	onfft = 1.0/nfft;
	if(tr.d1) {
	    newd1 = onfft/tr.d1;
	} else {
	   if(tr.dt) newd1 = (float) (((double) tr.dt)/1000000.0);
	   else newd1 = 0.0f;
	}



	/* Set sign in exponent of transform */
	if (!getparint   ("sign", &sign)) sign = -1;
	if (sign != 1 && sign != -1)  err("sign = %d must be 1 or -1", sign);


        checkpars();


	/* Allocate fft arrays */
	ct   = ealloc1complex(nf);
	rt   = ealloc1float(nfft);


	/* Main loop over traces */
	do {
		register int i;

		/* Load traces into ct (pfa fills in negative freqs) */
		for (i = 0; i < nf; ++i) {
			ct[i].r = tr.data[2*i];
			ct[i].i = tr.data[2*i+1];
		}


		/* Inverse FFT */
		pfacr(sign, nfft, ct, rt);


		/* Load back and scale for inverse fft */
		for (i = 0; i < nfft; i++)  tr.data[i] = rt[i] * onfft;

		tr.trid = TREAL;
		tr.ns = nfft;
		tr.f1 = 0.0f;
		tr.d1 = newd1;

		puttr(&tr);

	} while (gettr(&tr));


	return(CWP_Exit());
}
@


1.14
log
@copyright
@
text
@d81 3
@


1.13
log
@Stewe 
Levin added new time variabl
@
text
@d1 4
a4 1
/* SUIFFT: $Revision: 1.12 $ ; $Date: 2003/06/09 16:17:07 $	*/
@


1.12
log
@9 June 2003
@
text
@d1 1
a1 1
/* SUIFFT: $Revision: 1.11 $ ; $Date: 1996/09/13 21:49:05 $	*/
d49 1
d64 7
d103 2
@


1.11
log
@silenced -Wall messages
@
text
@d1 1
a1 1
/* SUIFFT: $Revision: 1.10 $ ; $Date: 1996/01/25 20:30:04 $	*/
d101 1
a101 1
	return EXIT_SUCCESS;
@


1.10
log
@Deal with specifying header fields accessed/modified in sudoc.
@
text
@d1 1
a1 1
/* SUIFFT: $Revision: 1.9 $ ; $Date: 1994/08/25 14:59:41 $	*/
d40 1
@


1.9
log
@Removed copyright statement from codes that had it.
Moved self-doc line for sudoc.
@
text
@d1 1
a1 1
/* SUIFFT: $Revision: 1.8 $ ; $Date: 92/10/26 11:33:56 $	*/
d30 2
@


1.8
log
@new selfdoc installed
@
text
@d1 1
a1 1
/* SUIFFT: $Revision: 1.7 $ ; $Date: 91/09/05 08:50:45 $	*/
a2 13
/*----------------------------------------------------------------------
 * Copyright (c) Colorado School of Mines, 1990.
 * All rights reserved.
 *
 * This code is part of SU.  SU stands for Seismic Unix, a processing line
 * developed at the Colorado School of Mines, partially based on Stanford
 * Exploration Project (SEP) software.  Inquiries should be addressed to:
 *
 *  Jack K. Cohen, Center for Wave Phenomena, Colorado School of Mines,
 *  Golden, CO 80401  (jkc@@dix.mines.colorado.edu)
 *----------------------------------------------------------------------
 */

a24 1
/**************** end self doc ***********************************/
d31 1
@


1.7
log
@string -> String and so forth
@
text
@d1 1
a1 1
/* SUIFFT: $Revision: 1.6 $ ; $Date: 90/12/03 11:00:49 $	*/
d20 18
a37 18
String sdoc =
" 								\n"
" SUIFFT - fft complex frequency traces to real time traces	\n"
" 								\n"
" suiftt <stdin >sdout sign=-1					\n"
" 								\n"
" Required parameters:						\n"
" 	none							\n"
" 								\n"
" Optional parameter:						\n"
" 	sign=-1		sign in exponent of inverse fft		\n"
" 								\n"
" Output traces are normalized by 1/N where N is the fft size.	\n"
" 								\n"
" Note: sufft | suifft is not quite a no-op since the trace	\n"
" 	length will usually be longer due to fft padding.	\n"
" 								\n"
;
d63 1
a63 1
	askdoc(1);
@


1.6
log
@Extracted all that heavily indented "first trace" crap.
@
text
@d1 1
a1 1
/* SUIFFT: $Revision: 1.5 $ ; $Date: 90/09/01 20:38:47 $	*/
d20 1
a20 1
string sdoc =
@


1.5
log
@Adapted for pfarc,pfacr's unpacked to Nyquist traces.
@
text
@d1 1
a1 1
/* SUIFFT: $Revision: 1.4 $ ; $Date: 90/06/12 13:39:06 $	*/
d12 1
a12 1
 *  Golden, CO 80401  (jkc@@dix.mines.colorado)
d20 18
a37 18
string sdoc = "\
								\n\
SUIFFT - fft complex frequency traces to real time traces	\n\
								\n\
suiftt <stdin >sdout sign=-1					\n\
								\n\
Required parameters:						\n\
	none							\n\
								\n\
Optional parameter:						\n\
	sign=-1	sign in exponent of inverse fft			\n\
								\n\
The output traces are normalized by 1/N where N is the fft size.\n\
								\n\
Caveat: sufft | suifft is not quite a no-op since the trace	\n\
	length will usually be longer due to fft padding.	\n\
								\n\
";
a40 1
 *	CWP: Shuki, Chris, Jack, Frank
d42 2
d47 1
a47 1
#define PFA_MAX	720720	/* Largest allowed ft	          */
a52 1
	bool first=true;	/* flag for first trace			*/
d56 1
a56 2
	int nfby2p1;		/* nfby2 + 1				*/
	float onfft;		/* 1.0 / nfft				*/
d58 1
a58 1
	register int i;		/* counter				*/
d66 7
a72 10
	while (gettr(&tr)) {
		if (first) { /* first trace: initialize */
			first = false;
			if (tr.trid != FUNPACKNYQ) {
				err("input not complex freq data, trid=%d",
								tr.trid);
			}
			nfft = tr.ns - 2; /* see sufft */
			nfby2p1 = nfft/2 + 1;
			onfft = 1.0 / nfft;
a73 5
			/* Set sign in exponent of transform */
			if (!igetpar("sign", &sign)) sign = -1;
			if (sign != 1 && sign != -1) {
			    err("sign = %d must be 1 or -1", sign);
			}
d75 3
a77 3
			/* Allocate fft arrays */
			ct   = ealloc1complex(nfby2p1);
			rt   = ealloc1float(nfft);
a78 1
		} /* End of initialization for first trace */
d80 3
d84 5
d90 1
a90 1
		for (i = 0; i < nfby2p1; ++i) {
d96 1
a96 1
		/* Inverse fft */
d107 2
a108 1
	}
@


1.4
log
@Clarify self-doc.
@
text
@d1 1
a1 1
/* SUIFFT: $Revision: 1.3 $ ; $Date: 90/06/12 13:35:55 $	*/
d30 1
a30 1
	sign=-1	sign in exponent of fft				\n\
d46 1
a46 1
#define PFA_MAX	720720	/* Largest allowed nfft	          */
d55 2
a56 7
	int nt;			/* number of points on input trace	*/
	int ntsize;		/* nt*sizeof(float)			*/
	int ntby2;		/* nt / 2				*/
	int ntby2p1;		/* (nt/2) + 1				*/
	int nfft;		/* number of points on output trace	*/
	int nfby2;		/* nfft / 2				*/
	int nfby2p1;		/* (nfft/2) + 1				*/
d70 1
a70 1
			if (tr.trid != FCMPLX) {
d74 2
a75 11
			nt = tr.ns;
			ntsize = nt * FSIZE;
			ntby2 = nt/2;
			ntby2p1 = ntby2 + 1;

			nfft = npfar(nt);
			if (nfft >= MIN(SU_NFLTS, PFA_MAX))
				err("Padded nt=%d -- too big", nfft);

			nfby2 = nfft / 2;
			nfby2p1 = nfby2 + 1;
d91 2
a92 2
		/* Load traces into ct and zero fill if needed */
		for (i = 0; i < ntby2p1; ++i) {
a95 1
		for (i = ntby2p1; i < nfft; ++i)  ct[i] = cmplx(0.0, 0.0);
d99 1
a99 1
		pfacr(-1, nfft, ct, rt);
d103 1
a103 1
		for (i = 0; i < nt; i++)  tr.data[i] = rt[i] * onfft;
@


1.3
log
@Using pfa, complex freq (no packing) to real time.
@
text
@d1 1
a1 1
/* SUIFFT: $Revision: 1.2 $ ; $Date: 90/05/25 19:25:52 $	*/
d33 3
@


1.2
log
@vec --> ealloc1float, etc.
@
text
@d1 1
a1 1
/* SUIFFT: $Revision: 1.1 $ ; $Date: 90/04/18 20:34:33 $	*/
d22 1
a22 1
SUIFFT - fft frequency to time					\n\
a31 4
The input is assumed to be `packed' frequency traces as produced\n\
by sufft.  The output is time domain data.  See the self-doc for\n\
sufft for further details.					\n\
								\n\
a39 19
 * Note:
 *	For even length N, a ``packed'' frequency trace is:
 *	xr[0],xr[N/2],xr[1],xi[1], ..., xr[N/2 -1],xi[N/2 -1]
 *	(the second entry is exceptional).
 *
 *	For odd length N, a ``packed'' frequency trace is:
 *	xr[0],xr[(N-1)/2],xr[1],xi[1], ..., [(N-1)/2 -1],
 *	xi[(N-1)/2 -1],xi[(N-1)/2] (the second and last
 *	entries are exceptional)
 *
 *	Because of the forward search for optimal length
 *	N, it is likely that the odd N case never occurs in
 *	current implementation.  However, the code
 *	supports odd N to admit the possibility of later
 *	supporting user specification or properties of N.
 *
 * Caveat:
 *	This routine uses a highly efficient complex fft.  To fully
 *	exploit it, we transform two traces at a time.
d43 1
a43 1
#define	FACMAX		12		/* For FFTPACK	*/
d45 1
a45 2
segy tr1;
segy tr2;
d50 2
a51 11
	bool lastzero=false;	/* is this trace a phoney one?		*/
	float *hcos;		/* hold cosines for fft			*/
	float *hsin;		/* hold sines for fft			*/
	float *x1;		/* 1st trace and later re part of twin	*/
	float *x2;		/* 2nd trace and later im part of twin	*/
	float *x1r;		/* re part of unpacked 1st trace	*/
	float *x1i;		/* im part of unpacked 1st trace	*/
	float *x2r;		/* re part of unpacked 2nd trace	*/
	float *x2i;		/* im part of unpacked 2nd trace	*/
	float *wr;		/* work area for fft			*/
	float *wi;		/* work area for fft			*/
a55 1
	int ntm1;		/* nt - 1				*/
d57 3
a59 2
	int nfac;		/* number of factors of nfft		*/
	int facs[FACMAX];	/* contains factors of nfft		*/
d69 1
a69 1
	while (gettr(&tr1)) {
d72 3
a74 3
			if (tr1.trid != FPACK) {
				err("input not packed freq data, trid=%d",
								tr1.trid);
d76 1
a76 1
			nt = tr1.ns;
d78 1
a78 1
			ntby2 = tr1.ns/2;
a79 1
			ntm1 = tr1.ns - 1;
d81 2
a82 2
			fftfac(&nt, &nfft, &nfac, facs);
			if (nfft > SU_NFLTS) {
a83 1
			}
d85 4
d96 2
a97 5
			hcos = ealloc1float(nfft);  hsin = ealloc1float(nfft);
			x1   = ealloc1float(nfft);  x2   = ealloc1float(nfft);
			x1r  = ealloc1float(nfft);  x1i  = ealloc1float(nfft);
			x2r  = ealloc1float(nfft);  x2i  = ealloc1float(nfft);
			wr   = ealloc1float(nfft);  wi   = ealloc1float(nfft);
a98 3
			/* Set up tables */
			ffttab(&nfft, hcos, hsin);

a100 33
		/* Load traces into x1, x2 */
		if (gettr(&tr2)) {
			bcopy(tr1.data, x1, ntsize);
			bcopy(tr2.data, x2, ntsize);
		} else { /* odd number of traces; make zero trace */
			lastzero = true;
			bcopy(tr1.data, x1, ntsize);
			bzero(x2, ntsize);
		}
		/* Unpack the traces into real and imag parts */
		x1r[0] = x1[0];
		x2r[0] = x2[0];
		x1i[0] = 0.0;
		x2i[0] = 0.0;
		x1r[ntby2] = x1[1];
		x2r[ntby2] = x2[1]; 
		if (ISODD(nt)) {
			x1i[ntby2] = sign * x1[ntm1];
			x2i[ntby2] = sign * x2[ntm1];
			x1r[ntby2p1] =  x1r[ntby2];
			x1i[ntby2p1] = -x1i[ntby2];
			x2r[ntby2p1] =  x2r[ntby2];
			x2i[ntby2p1] = -x2i[ntby2];
		} else {
			x1i[ntby2] = 0.0;
			x2i[ntby2] = 0.0;
		}
		for (i = 1; i < ntby2; i++) {
			x1r[i]    =  x1[2*i]         ;	x1r[nt-i] =  x1r[i];
			x1i[i]    =  sign * x1[2*i+1];	x1i[nt-i] = -x1i[i];
			x2r[i]    =  x2[2*i]         ;	x2r[nt-i] =  x2r[i];
			x2i[i]    =  sign * x2[2*i+1];	x2i[nt-i] = -x2i[i];
		}
d102 4
a105 8
		/* Twin the traces */
		x1[0] = x1r[0];
		x2[0] = x2r[0];
		for (i = 1; i < ntby2; i++) {
			x1[i] = x1r[i] - x2i[i];
			x2[i] = x2r[i] + x1i[i];
			x1[nt-i] = x1r[i] + x2i[i];
			x2[nt-i] = x2r[i] - x1i[i];
d107 1
a107 9
		if (ISODD(nt)){ /* these come from back half */
			x1[ntby2] = x1r[ntby2p1] + x2i[ntby2p1];
			x2[ntby2] = x2r[ntby2p1] - x1i[ntby2p1];
			x1[ntby2p1] = x1r[ntby2] + x2i[ntby2];
			x2[ntby2p1] = x2r[ntby2] - x1i[ntby2];
		} else {
			x1[ntby2] = x1r[ntby2];
			x2[ntby2] = x2r[ntby2];
		}
a108 2
		/* Fft */
		fft(x1, x2, wr, wi, &nfft, facs, &nfac, hcos, hsin);
d110 2
a111 4
		for (i = 0; i < nt; i++) {
			tr1.data[i] = x1[i] / ((float) nfft);
			tr2.data[i] = x2[i] / ((float) nfft);
		}
d113 8
a120 6
		tr2.trid = tr1.trid = TREAL;
		tr2.ns = tr1.ns = nfft;
		puttr(&tr1);
		if (!lastzero) {
			puttr(&tr2);
		}
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/* SUIFFT: $Revision: 2.8 $ ; $Date: 89/09/20 19:36:14 $	*/
d127 5
a131 5
			hcos = vec(nfft);  hsin = vec(nfft);
			x1   = vec(nfft);  x2   = vec(nfft);
			x1r  = vec(nfft);  x1i  = vec(nfft);
			x2r  = vec(nfft);  x2i  = vec(nfft);
			wr   = vec(nfft);  wi   = vec(nfft);
@
