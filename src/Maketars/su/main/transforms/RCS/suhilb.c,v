head	1.19;
access;
symbols;
locks; strict;
comment	@ * @;


1.19
date	2011.11.12.00.42.19;	author john;	state Exp;
branches;
next	1.18;

1.18
date	2004.12.23.23.33.25;	author john;	state Exp;
branches;
next	1.17;

1.17
date	2003.06.09.16.17.07;	author john;	state Exp;
branches;
next	1.16;

1.16
date	96.09.13.21.49.05;	author john;	state Exp;
branches;
next	1.15;

1.15
date	96.01.25.20.19.00;	author jkc;	state Exp;
branches;
next	1.14;

1.14
date	94.08.25.14.59.39;	author jkc;	state Exp;
branches;
next	1.13;

1.13
date	94.03.31.14.01.09;	author john;	state Exp;
branches;
next	1.12;

1.12
date	94.03.30.13.53.44;	author john;	state Exp;
branches;
next	1.11;

1.11
date	93.12.14.13.41.43;	author jkc;	state Exp;
branches;
next	1.10;

1.10
date	92.10.26.13.40.48;	author john;	state Exp;
branches;
next	1.9;

1.9
date	91.09.05.08.50.42;	author jkcohen;	state Exp;
branches;
next	1.8;

1.8
date	90.08.31.17.14.25;	author jkc;	state Exp;
branches;
next	1.7;

1.7
date	90.08.31.16.44.16;	author jkc;	state Exp;
branches;
next	1.6;

1.6
date	90.08.19.15.53.20;	author jkc;	state Exp;
branches;
next	1.5;

1.5
date	90.06.11.15.55.30;	author jkc;	state Exp;
branches;
next	1.4;

1.4
date	90.06.11.15.51.02;	author jkc;	state Exp;
branches;
next	1.3;

1.3
date	90.06.05.15.51.21;	author jkc;	state Exp;
branches;
next	1.2;

1.2
date	90.05.25.19.25.50;	author jkc;	state Exp;
branches;
next	1.1;

1.1
date	90.04.18.20.34.10;	author jkc;	state Exp;
branches;
next	;


desc
@hilbert transform of traces
@


1.19
log
@copyright
@
text
@/* Copyright (c) Colorado School of Mines, 2011.*/
/* All rights reserved.                       */

/* SUHILB: $Revision: 1.18 $ ; $Date: 2004/12/23 23:33:25 $	*/

#include "su.h"
#include "segy.h"

/*********************** self documentation **********************/
char *sdoc[] = {
"								",
" SUHILB - Hilbert transform					",
"								",
" suhilb <stdin >sdout 						",
"							        ",
" Note: the transform is computed in the direct (time) domain   ",
"							        ",
NULL};

/* Credits:
 *	CWP: Jack Cohen   
 *      CWP: John Stockwell, modified to use Dave Hale's hilbert() subroutine
 *
 * Trace header fields accessed: ns, trid
 */
/**************** end self doc ***********************************/


segy tr;

int
main(int argc, char **argv)
{
	int nt;			/* number of points on input trace	*/
	float *data;		/* data values from each trace		*/
	float *hdata;		/* Hilbert transformed data values	*/
	register int i;		/* counter				*/
	cwp_Bool seismic;	/* is this seismic data?		*/
	
	/* Initialize */
	initargs(argc, argv);
	requestdoc(1);

	/* Get info from first trace */
	if (!gettr(&tr)) err ("can't get first trace");
	nt = tr.ns;

	/* Check that data is correct format */
	seismic = ISSEISMIC(tr.trid);
	if (!seismic)
		warn("input is not seismic data, trid=%d", tr.trid);

	/* allocate space for data and hdata */
	data = ealloc1float(nt);
	hdata = ealloc1float(nt);

	/* Loop over traces */
	do {

		/* read data from trace */
		for (i = 0; i < nt; i++) data[i] = tr.data[i];

		/* apply the Hilbert tranform */		
		hilbert(nt,data,hdata);

		/* put Hilbert tranformed data back in trace */
		for (i = 0; i < nt; i++) tr.data[i] = hdata[i];
		
		puttr(&tr);

	} while (gettr(&tr));


	return(CWP_Exit());
}
@


1.18
log
@changed "err" to "warn" for nonseismic data
@
text
@d1 4
a4 1
/* SUHILB: $Revision: 1.17 $ ; $Date: 2003/06/09 16:17:07 $	*/
@


1.17
log
@9 June 2003
@
text
@d1 1
a1 1
/* SUHILB: $Revision: 1.16 $ ; $Date: 1996/09/13 21:49:05 $	*/
d48 1
a48 1
		err("input is not seismic data, trid=%d", tr.trid);
@


1.16
log
@silenced -Wall messages
@
text
@d1 1
a1 1
/* SUHILB: $Revision: 1.15 $ ; $Date: 1996/01/25 20:19:00 $	*/
d71 1
a71 1
	return EXIT_SUCCESS;
@


1.15
log
@Deal with specifying header fields accessed/modified in sudoc.
@
text
@d1 1
a1 1
/* SUHILB: $Revision: 1.14 $ ; $Date: 1994/08/25 14:59:39 $	*/
d28 1
@


1.14
log
@Removed copyright statement from codes that had it.
Moved self-doc line for sudoc.
@
text
@d1 1
a1 1
/* SUHILB: $Revision: 1.13 $ ; $Date: 94/03/31 14:01:09 $	*/
d20 2
@


1.13
log
@removed Jack's home-grown hilbert transform. Now used hilbert() from cwp/lib
@
text
@d1 1
a1 13
/* SUHILB: $Revision: 1.12 $ ; $Date: 94/03/30 13:53:44 $	*/
/*----------------------------------------------------------------------
 * Copyright (c) Colorado School of Mines, 1990.
 * All rights reserved.
 *
 * This code is part of SU.  SU stands for Seismic Unix, a processing line
 * developed at the Colorado School of Mines, partially based on Stanford
 * Exploration Project (SEP) software.  Inquiries should be addressed to:
 *
 *  Jack K. Cohen, Center for Wave Phenomena, Colorado School of Mines,
 *  Golden, CO 80401  (jkc@@dix.mines.colorado.edu)
 *----------------------------------------------------------------------
 */
a15 1
/**************** end self doc ***********************************/
d21 1
@


1.12
log
@added ISSEISMIC macro
@
text
@d1 1
a1 1
/* SUHILB: $Revision: 1.11 $ ; $Date: 93/12/14 13:41:43 $	*/
d25 1
a25 1
" The filter is applied in frequency domain.			",
d31 2
a32 9
 *	CWP: Jack
 *
 * Algorithm:
 *	h(t) = Re[INVFFT{-i sgn(omega)FFT(f)}]
 *	     = Im[INVFFT{sgn(omega)FFT(f)}]
 *
 * This assumes that the forward fft uses the sign +1 in the
 * exponent--and we do this below!
 *
a35 4
#define LOOKFAC	2	/* Look ahead factor for npfao	  */
#define PFA_MAX	720720	/* Largest allowed nfft	          */


a37 1

a39 1
	register complex *ct;	/* complex trace			*/
d41 2
a42 5
	int nfft;		/* number of points in fft trace	*/
	int nfby2;		/* nfft/2				*/
	int nfby2p1;		/* nfft/2 + 1				*/
	float onfft;		/* 1.0 / nfft				*/
	complex czero;		/* complex zero				*/
a44 1

a49 1

a53 1

d59 3
a62 15
	/* Set up for fft */
	nfft = npfao(nt, LOOKFAC * nt);
	if (nfft >= MIN(SU_NFLTS, PFA_MAX))
		err("Padded nt=%d -- too big", nfft);

	nfby2 = nfft/2;
	nfby2p1 = nfft/2 + 1;
	onfft = 1.0 / nfft;
	czero = cmplx(0.0, 0.0);


	/* Allocate fft array */
	ct = ealloc1complex(nfft);


a64 3
		/* Load traces into ct (zero-padded) */
		for (i = 0; i < nt; ++i)  ct[i] = cmplx(tr.data[i], 0.0);
		for (i = nt; i < nfft; ++i)  ct[i] = czero;
d66 2
a67 2
		/* Fft */
		pfacc(1, nfft, ct);
d69 2
a70 4
		/* Apply sgn */
		ct[0] = czero;				/* zero at dc     */
		if (!ISODD(nfft)) ct[nfby2] = czero;	/* and at Nyquist */
		for (i = nfby2p1; i < nfft; ++i)  ct[i] = crmul(ct[i], -1.0);
d72 3
a74 7

		/* Invert */
		pfacc(-1, nfft, ct);

		/* Take imaginary part, adjust for scale */
		for (i = 0; i < nt; ++i)  tr.data[i] = onfft * ct[i].i;

@


1.11
log
@Enlarged notion of seismic trace to include DEAD, etc.
@
text
@d1 1
a1 1
/* SUHILB: $Revision: 1.10 $ ; $Date: 92/10/26 13:40:48 $	*/
d74 1
a74 2
	seismic = (tr.trid == 0 || tr.trid == TREAL ||
		   tr.trid == TDEAD || tr.trid == TDUMMY);
@


1.10
log
@new selfdoc installed.
@
text
@d1 1
a1 1
/* SUHILB: $Revision: 1.9 $ ; $Date: 91/09/05 08:50:42 $	*/
d60 1
d74 3
a76 1
	if (tr.trid && tr.trid != TREAL) {
a77 1
	}
@


1.9
log
@string -> String and so forth
@
text
@d1 1
a1 1
/* SUHILB: $Revision: 1.8 $ ; $Date: 90/08/31 17:14:25 $	*/
d19 9
a27 9
String sdoc = "\
								\n\
SUHILB - Hilbert transform					\n\
								\n\
suhilb <stdin >sdout 						\n\
							        \n\
The filter is applied in frequency domain.			\n\
							        \n\
";
d64 1
a64 1
	askdoc(1);
@


1.8
log
@Cleaned up a bit.
@
text
@d1 1
a1 1
/* SUHILB: $Revision: 1.7 $ ; $Date: 90/08/31 16:44:16 $	*/
d19 1
a19 1
string sdoc = "\
@


1.7
log
@Fix DC and (for nfft even) Nyquist
@
text
@d1 1
a1 1
/* SUHILB: $Revision: 1.6 $ ; $Date: 90/08/19 15:53:20 $	*/
d11 1
a11 1
 *  Golden, CO 80401  (isis!csm9a!jkcohen)
d23 1
a23 1
suhilb <stdin >stdout						\n\
d36 4
d67 6
a77 5
	/* Get info from first trace */
	if (!gettr(&tr)) err ("can't get first trace");
	nt = tr.ns;


d97 1
a97 1
		for (i = nt; i < nfft; ++i)  ct[i] = cmplx(0.0, 0.0);
@


1.6
log
@Mult by 1/2 instead of 1 at DC.
@
text
@d1 1
a1 1
/* SUHILB: $Revision: 1.5 $ ; $Date: 90/06/11 15:55:30 $	*/
d34 2
a35 1
 *	h(t) = Im[INVFFT{sgn(omega)FFT(f)}]
d54 1
d81 1
d98 2
a99 1
		ct[0] = crmul(ct[0], 0.5);
@


1.5
log
@Tweak
@
text
@d1 1
a1 1
/* SUHILB: $Revision: 1.4 $ ; $Date: 90/06/11 15:51:02 $	*/
d95 1
@


1.4
log
@Using pfa.  As with suband, suenv, max error is about .005, a bit high
to blame on roundoff.
@
text
@d1 1
a1 1
/* SUHILB: $Revision: 1.3 $ ; $Date: 90/06/05 15:51:21 $	*/
a36 2

#define	FACMAX		12		/* For FFTPACK	*/
@


1.3
log
@Eliminated veclib routines.
@
text
@d1 1
a1 1
/* SUHILB: $Revision: 1.2 $ ; $Date: 90/05/25 19:25:50 $	*/
d40 4
d49 1
a49 6
	float *hcos;		/* hold cosines for fft			*/
	float *hsin;		/* hold sines for fft			*/
	register float *xr;	/* real part of trace			*/
	register float *xi;	/* imaginary part of trace		*/
	float *wr;		/* work area for fft			*/
	float *wi;		/* work area for fft			*/
a50 1
	int ntsize;		/* nt in bytes				*/
a51 1
	uint nfftsize;		/* nfft in bytes			*/
d53 2
a54 4
	int nfback;		/* nfft - nfby2				*/
	int nfac;		/* number of factors of nfft		*/
	int facs[FACMAX];	/* contains factors of nfft		*/
	int nzeros;		/* number of padded zeroes in bytes	*/
d67 1
d72 1
d74 2
a75 2
	fftfac(&nt, &nfft, &nfac, facs);
	if (nfft > SU_NFLTS) {
a76 6
	}
	nfby2 = nfft / 2;
	nfback = nfft - nfby2;
	ntsize = nt * FSIZE;
	nfftsize = nfft * FSIZE;
	nzeros = nfftsize - ntsize;
d78 3
a80 4
	/* Allocate fft arrays */
	hcos = ealloc1float(nfft);	hsin = ealloc1float(nfft);
	xr   = ealloc1float(nfft); 	xi   = ealloc1float(nfft);
	wr   = ealloc1float(nfft);	wi   = ealloc1float(nfft);
d83 2
a84 2
	/* Set up tables */
	ffttab(&nfft, hcos, hsin);
d89 3
a91 4
		/* Load traces into xr, xi (zero-padded) */
		bcopy(tr.data, xr, ntsize);
		bzero(xr + nt, nzeros);
		bzero(xi, (int) nfftsize);
a92 1

d94 1
a94 1
		fft(xr, xi, wr, wi, &nfft, facs, &nfac, hcos, hsin);
d96 2
a98 12
		/* Apply sgn and take conjugate for inverse fft          */
		/* Apply inverse scale later, since have to *= -1 anyway */
		/* Positive frequencies -- just conjugate            */
		/* Negative frequencies -- sgn and conj cancel on xi */
		xi[0] *= -1.0;
		for (i = 0; i <= nfby2; ++i) {
			xi[i]        *= -1.0;
			xr[nfft - i] *= -1.0;
		}
		/* Note: for n even, we have turned the sign of xr[nfby2] */
		/*       around, but this term contributes 0 to the       */
		/*       imaginary part of the inverse transform anyway   */
d101 1
a101 1
		fft(xr, xi, wr, wi, &nfft, facs, &nfac, hcos, hsin);
d103 2
a104 3
		/* Take imaginary part, adjust for conjugate and scale */
		for (i = 0; i < nt; ++i)
			tr.data[i] = -xi[i]/nfft;
@


1.2
log
@vec --> ealloc1float, etc.
@
text
@d1 1
a1 2
/* SUHILB: $Revision: 1.1 $ ; $Date: 90/04/18 20:34:10 $	*/
#include "su.h"
d15 1
a16 1
#include "fconst.h"
a56 1
	float monfft;		/* -1.0 / nfft				*/
a82 1
	monfft = -1.0 / (float) nfft;
d126 2
a127 2
		/* for (i = 0; i < nt; ++i) tr.data[i] = -xi[i]/nfft;  */
		vsmul(xi, ONE, &monfft, tr.data, ONE, &nt);
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/* SUHILB: $Revision: 2.14 $ ; $Date: 89/09/20 19:36:11 $	*/
d91 3
a93 3
	hcos = vec(nfft);	hsin = vec(nfft);
	xr   = vec(nfft); 	xi   = vec(nfft);
	wr   = vec(nfft);	wi   = vec(nfft);
@
