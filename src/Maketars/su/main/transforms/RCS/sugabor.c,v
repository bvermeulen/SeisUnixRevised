head	1.20;
access;
symbols;
locks; strict;
comment	@ * @;


1.20
date	2011.11.16.23.35.04;	author john;	state Exp;
branches;
next	1.19;

1.19
date	2011.11.12.00.42.19;	author john;	state Exp;
branches;
next	1.18;

1.18
date	2006.11.07.23.09.09;	author john;	state Exp;
branches;
next	1.17;

1.17
date	2006.11.07.22.58.42;	author john;	state Exp;
branches;
next	1.16;

1.16
date	2004.12.23.23.30.01;	author john;	state Exp;
branches;
next	1.15;

1.15
date	2004.10.21.19.31.10;	author john;	state Exp;
branches;
next	1.14;

1.14
date	2003.06.09.16.17.07;	author john;	state Exp;
branches;
next	1.13;

1.13
date	97.07.28.22.36.46;	author john;	state Exp;
branches;
next	1.12;

1.12
date	97.03.11.20.21.47;	author john;	state Exp;
branches;
next	1.11;

1.11
date	96.09.13.21.49.05;	author john;	state Exp;
branches;
next	1.10;

1.10
date	96.01.25.20.05.35;	author jkc;	state Exp;
branches;
next	1.9;

1.9
date	95.08.02.19.56.01;	author jkc;	state Exp;
branches;
next	1.8;

1.8
date	95.06.30.09.14.03;	author john;	state Exp;
branches;
next	1.7;

1.7
date	94.10.20.14.52.42;	author john;	state Exp;
branches;
next	1.6;

1.6
date	94.10.05.10.29.13;	author john;	state Exp;
branches;
next	1.5;

1.5
date	94.10.04.16.14.03;	author john;	state Exp;
branches;
next	1.4;

1.4
date	94.10.04.16.12.05;	author john;	state Exp;
branches;
next	1.3;

1.3
date	94.10.04.12.18.01;	author john;	state Exp;
branches;
next	1.2;

1.2
date	94.10.04.10.45.33;	author john;	state Exp;
branches;
next	1.1;

1.1
date	94.10.04.09.41.29;	author john;	state Exp;
branches;
next	;


desc
@sugabor - Multifilter analysis via gabor-transform like process
@


1.20
log
@added Reg Beardsley's checkpar()
@
text
@/* Copyright (c) Colorado School of Mines, 2011.*/
/* All rights reserved.                       */

/* SUGABOR: $Revision: 1.18 $ ; $Date: 2006/11/07 23:09:09 $	*/

#include "su.h"
#include "segy.h"

/*********************** self documentation **********************/
char *sdoc[] = {
"									",
" SUGABOR -  Outputs a time-frequency representation of seismic data via",
"	        the Gabor transform-like multifilter analysis technique ",
"		presented by Dziewonski, Bloch and  Landisman, 1969.	",
"									",
"    sugabor <stdin >stdout [optional parameters]			",
"									",
" Required parameters:					 		",
"	if dt is not set in header, then dt is mandatory		",
"									",
" Optional parameters:							",
"	dt=(from header)	time sampling interval (sec)		",
"	fmin=0			minimum frequency of filter array (hz)	",
"	fmax=NYQUIST 		maximum frequency of filter array (hz)	",
"	beta=3.0		ln[filter peak amp/filter endpoint amp]	",
"	band=.05*NYQUIST	filter bandwidth (hz) 			",
"	alpha=beta/band^2	filter width parameter			",
"	verbose=0		=1 supply additional info		",
"	holder=0		=1 output Holder regularity estimate	",
"				=2 output linear regularity estimate	",
"									",
" Notes: This program produces a muiltifilter (as opposed to moving window)",
" representation of the instantaneous amplitude of seismic data in the	",
" time-frequency domain. (With Gaussian filters, moving window and multi-",
" filter analysis can be shown to be equivalent.)			",
"									",
" An input trace is passed through a collection of Gaussian filters	",
" to produce a collection of traces, each representing a discrete frequency",
" range in the input data. For each of these narrow bandwidth traces, a ",
" quadrature trace is computed via the Hilbert transform. Treating the narrow",
" bandwidth trace and its quadrature trace as the real and imaginary parts",
" of a \"complex\" trace permits the \"instantaneous\" amplitude of each",
" narrow bandwidth trace to be compute. The output is thus a representation",
" of instantaneous amplitude as a function of time and frequency.	",
"									",
" Some experimentation with the \"band\" parameter may necessary to produce",
" the desired time-frequency resolution. A good rule of thumb is to run ",
" sugabor with the default value for band and view the image. If band is",
" too big, then the t-f plot will consist of stripes parallel to the frequency",
" axis. Conversely, if band is too small, then the stripes will be parallel",
" to the time axis. 							",
"									",
" Caveat:								",
" The Gabor transform is not a wavelet transform, but rather are sharp	",
" frame basis. However, it is nearly a Morlet continuous wavelet transform",
" so the concept of Holder regularity may have some meaning. If you are	",
" computing Holder regularity of, say, a migrated seismic section, then",
" set band to 1/3 of the frequency band of your data.			",
"									",
" Examples:								",
"    suvibro | sugabor | suximage					",
"    suvibro | sugabor | suxmovie n1= n2= n3= 				",
"     (because suxmovie scales it's amplitudes off of the first panel,  ",
"      may have to experiment with the wclip and bclip parameters	",
"    suvibro | sugabor | supsimage | ... ( your local PostScript utility)",
"									",
NULL};

/* Credits:
 *
 *	CWP: John Stockwell, Oct 1994
 *      CWP: John Stockwell Oct 2004, added holder=1 option
 * Algorithm:
 *
 * This programs takes an input seismic trace and passes it
 * through a collection of truncated Gaussian filters in the frequency
 * domain.
 *
 * The bandwidth of each filter is given by the parameter "band". The
 * decay of these filters is given by "alpha", and the number of filters
 * is given by nfilt = (fmax - fmin)/band. The result, upon inverse
 * Fourier transforming, is that nfilt traces are created, with each
 * trace representing a different frequency band in the original data.
 *
 * For each of the resulting bandlimited traces, a quadrature (i.e. pi/2
 * phase shifted) trace is computed via the Hilbert transform. The 
 * bandlimited trace constitutes a "complex trace", with the bandlimited
 * trace being the "real part" and the quadrature trace being the 
 * "imaginary part".  The instantaneous amplitude of each bandlimited
 * trace is then computed by computing the modulus of each complex trace.
 * (See Taner, Koehler, and Sheriff, 1979, for a discussion of complex
 * trace analysis.
 *
 * The final output for a given input trace is a map of instantaneous
 * amplitude as a function of time and frequency.
 *
 * This is not a wavelet transform, but rather a redundant frame
 * representation.
 *
 * References: 	Dziewonski, Bloch, and Landisman, 1969, A technique
 *		for the analysis of transient seismic signals,
 *		Bull. Seism. Soc. Am., 1969, vol. 59, no.1, pp.427-444.
 *
 *		Taner, M., T., Koehler, F., and Sheriff, R., E., 1979,
 *		Complex seismic trace analysis, Geophysics, vol. 44,
 *		pp.1041-1063.
 *
 * 		Chui, C., K.,1992, Introduction to Wavelets, Academic
 *		Press, New York.
 *
 * Trace header fields accessed: ns, dt, trid, ntr
 * Trace header fields modified: tracl, tracr, d1, f2, d2, trid, ntr
 */
/**************** end self doc ***********************************/

/* Prototype of function used internally */
static void gaussianFilter(float fcent, float dt,
			int nfft, float alpha, float  band, float *filter);

/* constants used internally */
#define FRAC0   0.0	/* Ratio of default fmin to Nyquist */
#define FRAC1   1.0	/* Ratio of default fmax to Nyquist */
#define FRAC2   0.05	/* Ratio of default band to Nyquist */
#define BETA	3.0	/* Default value of beta */
#define LOOKFAC 2	/* Look ahead factor for npfao	*/
#define PFA_MAX 720720  /* Largest allowed nfft	   */

/* global SEGY declaration */
segy tr;

int
main(int argc, char **argv)
{
	register float *rt;	/* real trace				*/
	register float *qt;	/* real quadrature trace		*/
	register complex *ct;   /* complex transformed trace		*/
	register complex *fct;  /* filtered complex transformed trace	*/

	float *filter;		/* filter array				*/
	float dt;		/* sample spacing			*/
	float nyq;		/* nyquist frequency			*/
	int nt;			/* number of points on input trace	*/
	int nfft;		/* number of points for fft trace	*/
	int nf;			/* number of frequencies (incl Nyq)	*/
	cwp_Bool seismic;	/* is this seismic data?		*/

	int ntr;		/* number of traces 			*/
	int nfilt;		/* number of filters 			*/
	int tracr=0;		/* tracr counter			*/
	int verbose=0;		/* verbose flag				*/
	int holder=0;		/* holder flag				*/

	float fcent;		/* center frequency of filters		*/
	float fmin;		/* minimum frequency to window		*/
	float fmax;		/* maximum frequency to window		*/
	float band;		/* frequency bandwidth of filters	*/
	float alpha;		/* filter bandwidth parameter		*/
	float beta;		/* ln[ filter peak amp/ filter end amp] */

	float **tmpdata=NULL;	/* temporary data storage */
	
	/* Initialize */
	initargs(argc, argv);
	requestdoc(1);

	/* Get info from first trace */ 
	if (!gettr(&tr))  err("can't get first trace");
	seismic = ISSEISMIC(tr.trid);

	ntr = tr.ntr;
		
	if (!seismic)
		warn("input is not seismic data, trid=%d", tr.trid);
	nt = tr.ns;
	if (!getparfloat("dt", &dt))	dt = ((double) tr.dt)/1000000.0;
	if (!dt) err("dt field is zero and not getparred");
	nyq = 0.5/dt;

	/* Set up FFT parameters */
	nfft = npfaro(nt, LOOKFAC * nt);
	if (nfft >= SU_NFLTS || nfft >= PFA_MAX)
		err("Padded nt=%d -- too big", nfft);
	nf = nfft/2 + 1;
	
	/* Get parameters */
	if (!getparint("verbose", &verbose))	verbose=0;
	if (!getparint("holder", &holder))	holder=0;
	if (!getparfloat("fmin", &fmin))	fmin = FRAC0*nyq;
	if (!getparfloat("fmax", &fmax))	fmax = FRAC1*nyq;
	if (!getparfloat("band", &band))	band = FRAC2*nyq;
	if (!getparfloat("beta", &beta))	beta = BETA;
	if (!getparfloat("alpha",&alpha))	alpha = beta/(band*band);


        checkpars();

	/* Compute number of filters */
	nfilt = NINT( (fmax - fmin) / band );
	if (verbose){
		warn("            alpha = %f",alpha);
		warn("             beta = %f",beta);
		warn("             band = %f",band);
		warn("number of filters = %d",nfilt);
	}

	/* Allocate fft arrays */
	rt   = ealloc1float(nfft);
	qt   = ealloc1float(nfft);
	ct   = ealloc1complex(nf);
	fct   = ealloc1complex(nf);
	filter = ealloc1float(nf);
	tmpdata = ealloc2float(nt,nfft);

	/* Main loop over traces */
	do {
		register int i,j;

		/* Load trace into rt (zero-padded) */
		memcpy((void *) rt, (const void *) tr.data, nt*FSIZE);
		memset((void *) (rt + nt),0, (nfft-nt)*FSIZE);

		/* FFT, filter, inverse FFT */
		pfarc(1, nfft, rt, ct);

		tracr =0;
		/* Loop over filter center frequencies */
		for (i = 0, fcent=fmin; i < nfilt; ++i, fcent+=band) {

			/* compute Gaussian filter */
			gaussianFilter(fcent, dt, nfft, alpha, band, filter);

			/* apply filter */
			for (j = 0; j < nf; ++j) 
				 fct[j] = crmul(ct[j], filter[j]);

			/* inverse fourier transform */
			pfacr(-1, nfft, fct, rt);

			/* construct quadrature trace via hilbert transform */
			hilbert(nt, rt, qt);

			if (!holder) {

				/* compute instantaneous amplitude */
				for (j = 0; j < nt ; ++j) 
					tr.data[j] = sqrt(rt[j]*rt[j] + qt[j]*qt[j]);


				tr.tracr = ++tracr;
				tr.sx = tr.tracl;
				tr.gx = tr.tracr;
				tr.d1 = dt;
				tr.f2 = fmin;
				tr.d2 = band;
				tr.trid = AMPLITUDE; 
				tr.ntr = ntr*nfilt;
				puttr(&tr); /* output time-freq panels */
			} else {
				/* compute instantaneous amplitude */
				for (j = 0; j < nt ; ++j) 
					tmpdata[j][i] = sqrt(rt[j]*rt[j] + qt[j]*qt[j]);
			}
		}

		if (holder) { /* compute the Holder regularity traces */
			float *x;
			float *y;
			float coeff[4];

				x = ealloc1float(nfilt);
			y = ealloc1float(nfilt);
			
	                /* Compute an estimate of the Lipschitz (Holder)   */
			/* regularity. Here we merely fit a straight line  */
			/* through the log-log graph of the of our wavelet */
			/* transformed data and return the slope + 1/2 as  */
			/* the regularity measure. 			   */

                	for ( j =0 ; j< nt ; ++j ) {
                        	x[0]=0;
                        	for ( i = 1 ; i < nfilt ; ++i ) {
					if (holder==1) {
                                		y[i] = log(ABS(tmpdata[j][i+1]
                                               	              - tmpdata[j][0]));
                                		x[i] = log(i);
					} else if (holder==2) {
                                		y[i] = ABS(tmpdata[j][i+1]
                                               	              - tmpdata[j][0]);
                                		x[i] = i;
					} else {
						err("holder must = 0,1,2!");
					}

                        	}
                        	y[0] =y[1] - (y[3] - y[2]);


                        	linear_regression(y, x, nfilt, coeff);

                        	/*  coeff[0] is the slope of the line */
                        	tr.data[j] = coeff[0] + 0.5;

                	}
			tr.tracr = ++tracr;
			tr.sx = tr.tracl;
			tr.gx = tr.tracr;
			tr.d1 = dt;
			tr.f2 = fmin;
			tr.d2 = band;
			tr.trid = AMPLITUDE; 
			tr.ntr = ntr*nfilt;
			puttr(&tr); /* output holder regularity traces */
		}
	} while (gettr(&tr));

	return(CWP_Exit());
}


static void gaussianFilter(float fcent, float dt,
			int nfft, float alpha, float  band, float *filter)
/*************************************************************************
gaussianFilter -- Gaussian filter
**************************************************************************
Input:
fcent		center (peak) frequency of Gaussian
dt		time sampling interval
nfft		number of points in the fft
band		frequency band of filter
alpha		filter windowing parameter

Output:
filter		array[nfft] filter values
**************************************************************************
Notes: Filter is to be applied in the frequency domain.
The parameter "band" here is the full bandwidth of the filter. In Dziewonski,
et. al, it is the half-bandwitdth. Hence, there are factors of 2 that
appear in the definitions of iflower, ifupper, and alpha.

**************************************************************************
Reference: Dziewonski, Bloch, and Landisman, 1969, A technique
		for the analysis of transient seismic signals,
		Bull. Seism. Soc. Am., 1969, vol. 59, no.1, pp.427-444.
**************************************************************************
Author:  CWP: John Stockwell,   Oct 1994
*************************************************************************/
{
	int i;			/* loop counter				*/
	int iflower;		/* integerization of min frequency	*/
	int ifupper;		/* integerization of max frequency	*/
	int nf;			/* number of frequencies (incl Nyq)	*/
	float onfft;		/* reciprocal of nfft			*/
	float df;		/* frequency spacing (from dt)		*/

	/* number of frequencies */
	nf = nfft/2 + 1;
	onfft = 1.0 / nfft;
	df = onfft / dt;

	/* compute integerized min, max frequencies defining filter window */
	iflower = NINT((fcent - band/2)/df); 
	if (iflower < 0) iflower=0;
	ifupper = NINT((fcent + band/2)/df) ;
	if (ifupper > nf) ifupper=nf;

	/* zero out filter array */
	memset( (void *) filter , 0, nf * FSIZE);
	
        /* loop over integerized frequencies to build filter */
        for (i = 0 ; i < nf ; ++i) {
		float f = i * df - fcent; /* freq's as floats */

		if ( iflower <= i && i <= ifupper)
			filter[i] = exp(-4.0 * alpha * f * f) * onfft;
        }


}
@


1.19
log
@copyright
@
text
@d194 3
@


1.18
log
@changed     iflower <= i <== ifupper to   iflower <= i && i <= ifupper
@
text
@d1 4
a4 1
/* SUGABOR: $Revision: 1.17 $ ; $Date: 2006/11/07 22:58:42 $	*/
@


1.17
log
@changed    memset( .., (int) '\0',...) to memset( .., 0,..) as per suggestion of Marion Zhu and Reg Beardsley
@
text
@d1 1
a1 1
/* SUGABOR: $Revision: 1.16 $ ; $Date: 2004/12/23 23:30:01 $	*/
d367 1
a367 1
		if ( iflower <= i  <= ifupper)
@


1.16
log
@added holder option
@
text
@d1 1
a1 1
/* SUGABOR: $Revision: 1.15 $ ; $Date: 2004/10/21 19:31:10 $	*/
d214 1
a214 1
		memset((void *) (rt + nt), (int) '\0' , (nfft-nt)*FSIZE);
d361 1
a361 1
	memset( (void *) filter , (int) '\0', nf * FSIZE);
@


1.15
log
@added h
Holder regularity estimate
@
text
@d1 1
a1 1
/* SUGABOR: $Revision: 1.14 $ ; $Date: 2003/06/09 16:17:07 $	*/
d27 1
d53 3
a55 2
" so the concept of Holder regularity may have some meaning.		",
"									",
d69 1
a69 1
 *
d170 1
a170 1
		err("input is not seismic data, trid=%d", tr.trid);
d276 11
a286 3
                                	y[i] = log(ABS(tmpdata[j][i+1]
                                                        - tmpdata[j][0]));
                                	x[i] = log(i);
@


1.14
log
@9 June 2003
@
text
@d1 1
a1 1
/* SUGABOR: $Revision: 1.13 $ ; $Date: 1997/07/28 22:36:46 $	*/
d26 1
d49 6
d146 1
d154 2
d182 1
d204 1
d234 49
a282 3
			/* compute instantaneous amplitude */
			for (j = 0; j < nt ; ++j) 
				tr.data[j] = sqrt(rt[j]*rt[j] + qt[j]*qt[j]);
d284 2
d287 1
d296 1
a296 1
			puttr(&tr);
@


1.13
log
@changes suggested by Stew Levin to silence SGI compiler warnings, etc
@
text
@d1 1
a1 1
/* SUGABOR: $Revision: 1.12 $ ; $Date: 1997/03/11 20:21:47 $	*/
d239 1
a239 1
	return EXIT_SUCCESS;
@


1.12
log
@Martin Smith's fix
@
text
@d1 1
a1 1
/* SUGABOR: $Revision: 1.11 $ ; $Date: 1996/09/13 21:49:05 $	*/
a136 1
	int tracl;		/* tracl counter			*/
d166 1
a166 1
	if (nfft >= MIN(SU_NFLTS, PFA_MAX))
a196 1
		++tracr;
d205 1
a205 1
		tracl=0;
a226 1
			tr.tracl = tracl;
d228 2
a273 1
	int ifcent;		/* integerization of center frequency	*/
a287 1
	ifcent = NINT( fcent/df );
@


1.11
log
@silenced -Wall messages
@
text
@d1 1
a1 1
/* SUGABOR: $Revision: 1.10 $ ; $Date: 1996/01/25 20:05:35 $	*/
d25 1
d139 2
d172 1
d181 6
a186 1
	warn("number of filters=%d",nfilt);
a291 4
	/* renormalize alpha, to be compatible with integerized frequencies*/
	/* and to take into account that "band" is the full filter bandwidth*/
	alpha = 4.0*alpha/(df*df);

d295 3
a297 4
	/* loop over integerized frequencies to build filter */
	for (i = 0 ; i < nf ; ++i) {
		float x = (!(ifcent==0))
				? ((float)(i - ifcent)/ifcent) : 1.0;	
a298 1
		/* define filter only in range of iflower to ifupper */
d300 3
a302 2
			filter[i] = exp(-alpha*x*x) * onfft;
	}
@


1.10
log
@Deal with specifying header fields accessed/modified in sudoc.
@
text
@d1 1
a1 1
/* SUGABOR: $Revision: 1.9 $ ; $Date: 1995/08/02 19:56:01 $	*/
d23 1
a23 1
"	band=.025*NYQUIST	filter bandwidth (hz) 			",
d118 1
d299 1
@


1.9
log
@Cast the integers tr.dt and/or tr.delrt and/or clones to double before
division with floating constant (which is implicitly double
precision).  Casting is needed to make some compilers happy and if we
cast to float then there will be an extra conversion to double because
of the floating constant (casting to float and writing 1000000.0F
would save a conversion, but most people find that F yucky and
efficiency is not an issue here).
Motivated by examples from Stew Levin.
@
text
@d1 1
a1 1
/* SUGABOR: $Revision: 1.8 $ ; $Date: 1995/06/30 09:14:03 $	*/
d97 3
d188 1
a188 1
		tracr++;
d199 1
a199 1
		for (i = 0, fcent=fmin; i < nfilt; i++, fcent+=band) {
d215 1
a215 1
			for (j = 0; j < nt ; j++) 
d220 1
a220 1
			tr.tracr = tracr++;
d275 1
a275 1
	/* compute integerized min and max frequencies defining filter window */
d290 1
a290 1
	for (i = 0 ; i < nf ; i++) {
@


1.8
log
@added stuff to selfdoc and additional documentation inline.
Changed the program to set tr.ntr.
@
text
@d1 1
a1 1
/* SUGABOR: $Revision: 1.7 $ ; $Date: 94/10/20 14:52:42 $	*/
d154 1
a154 1
	if (!getparfloat("dt", &dt))	dt = tr.dt/1000000.0;
@


1.7
log
@really fixed the bug that I thought I fixed in previous revision.
@
text
@d1 1
a1 1
/* SUGABOR: $Revision: 1.6 $ ; $Date: 94/10/05 10:29:13 $	*/
d23 1
a23 1
"	band=.05*NYQUIST	filter bandwidth (hz) 			",
d41 5
a45 1
" the desired time-frequency resolution.				",
d49 3
d84 3
d104 1
d112 1
d130 1
d148 2
d163 1
a163 1

d173 1
d213 1
a213 1
				tr.data[j] = sqrt( rt[j]*rt[j] + qt[j]*qt[j]);
d215 1
d222 1
@


1.6
log
@additional comments. Removed extraneous definition and declaration
of onfft. Fixed bug in gaussianFilter subroutine.
@
text
@d1 1
a1 1
/* SUGABOR: $Revision: 1.5 $ ; $Date: 94/10/04 16:14:03 $	*/
d270 1
a270 1
		float x = (!(ifcent==0 && i==0))
@


1.5
log
@..previous message...
@
text
@d1 1
a1 1
/* SUGABOR: $Revision: 1.3 $ ; $Date: 94/10/04 12:18:01 $	*/
d10 2
a11 2
"	        the transform-like multifilter analysis technique presented",
"	        by Dziewonski, Bloch and  Landisman, 1969.		",
d19 1
a19 1
"	dt = (from header)	time sampling rate (sec)		",
d29 1
a29 1
" filter analysis can be shown to be equivalent.)",
d36 1
a36 1
" of a \"complex\" trace, permits the \"instantaneous\" amplitude of each",
d40 1
a40 1
" Some experimentation with the band parameter may necessary to produce ",
d65 8
a72 4
 * For each of the resulting traces, a quadrature trace is computed via
 * application of the Hilbert transform. The instantaneous amplitude
 * of each trace is computed as the modulus of that trace (the real part)
 * its respective quadrature trace (the imaginary part).
d74 2
a75 2
 * The final output for an input trace is a plot of instantaneous amplitude
 * as a function of time and frequency.
d77 1
a77 1
 * Reference: Dziewonski, Bloch, and Landisman, 1969, A technique
d80 7
a115 1
	float onfft;		/* reciprocal of nfft			*/
a131 1

a147 1
	onfft = 1.0 / nfft;
d242 3
a244 3
	float iflower;		/* integerization of min frequency	*/
	float ifupper;		/* integerization of max frequency	*/
	float ifcent;		/* integerization of center frequency	*/
d270 2
a271 1
		float x = (i - ifcent)/ifcent;
@


1.4
log
@additional comments, also removed an extraneous initialization of df
@
text
@d40 3
@


1.3
log
@extraneous df assignment removed
@
text
@d1 1
a1 1
/* SUGABOR: $Revision: 1.2 $ ; $Date: 94/10/04 10:45:33 $	*/
d77 1
a77 1
void gaussianFilter(float fcent, float dt,
a102 1
	float df;		/* frequency spacing (from dt)		*/
d202 1
a202 1
void gaussianFilter(float fcent, float dt,
@


1.2
log
@cleaned up selfdoc, added more documentation.
@
text
@d1 1
a1 1
/* SUGABOR: $Revision: 1.1 $ ; $Date: 94/10/04 09:41:29 $	*/
a137 1
	df = onfft / dt;
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/* SUGABOR: $Revision: 1.7 $ ; $Date: 94/10/04 09:29:41 $	*/
a2 1

d9 3
a11 2
" SUGABOR - Gabor-style (Gaussian) multi-filter analysis via the method	",
"		outlined by Dziewonski, Bloch, and  Landisman, 1969.	",
d13 1
a13 1
" sugabor <stdin >stdout [optional parameters]				",
d23 1
a23 1
"	band=.05*NYQUIST	filter bandwidth (hz)			",
d26 4
a29 2
" Notes: This programs performs muilti-filter analysis via the Gaussian ",
" multi-filter method outlined by Dziewonski, Bloch, and Landisman 1969	",
d31 8
a38 9
" The band parameter was defined as the filter half-bandwidth in Dziewonski,",
" et. al's original definition, here it is the full bandwidth. The parameter",
" alpha is computed taking this into account, so that the results here should",
" be compatible with the original method (with the exception that the value",
" of band here is half of what it would be using Dziewonski, et al.'s  ",
" formulation.								",
" 									",
" Example:								",
" suvibro | sugabor | supsimage (or suximage) | ...			",
d40 4
d50 20
a86 1

d222 1
a222 1
appear in the definitions of ifmin, ifmax, and alpha.
d233 2
a234 2
	float ifmin;		/* integerization of min frequency	*/
	float ifmax;		/* integerization of max frequency	*/
d246 4
a249 4
	ifmin = NINT((fcent - band/2)/df); 
	if (ifmin < 0) ifmin=0;
	ifmax = NINT((fcent + band/2)/df) ;
	if (ifmax > nf) ifmax=nf;
d263 2
a264 2
		/* define filter only in range of ifmin to ifmax */
		if ( ifmin <= i  <= ifmax)
@
