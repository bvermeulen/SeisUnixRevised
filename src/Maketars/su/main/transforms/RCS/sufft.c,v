head	1.31;
access;
symbols;
locks; strict;
comment	@ * @;


1.31
date	2011.11.16.23.35.04;	author john;	state Exp;
branches;
next	1.30;

1.30
date	2011.11.12.00.42.19;	author john;	state Exp;
branches;
next	1.29;

1.29
date	2010.12.06.17.52.57;	author john;	state Exp;
branches;
next	1.28;

1.28
date	2006.11.07.22.58.42;	author john;	state Exp;
branches;
next	1.27;

1.27
date	2006.03.09.19.57.00;	author john;	state Exp;
branches;
next	1.26;

1.26
date	2003.06.09.16.17.07;	author john;	state Exp;
branches;
next	1.25;

1.25
date	97.07.28.22.36.46;	author john;	state Exp;
branches;
next	1.24;

1.24
date	96.09.13.21.49.05;	author john;	state Exp;
branches;
next	1.23;

1.23
date	96.01.25.19.35.14;	author jkc;	state Exp;
branches;
next	1.22;

1.22
date	95.12.05.19.56.14;	author jkc;	state Exp;
branches;
next	1.21;

1.21
date	95.10.30.20.29.21;	author jkc;	state Exp;
branches;
next	1.20;

1.20
date	95.08.02.19.40.31;	author jkc;	state Exp;
branches;
next	1.19;

1.19
date	94.08.25.14.59.18;	author jkc;	state Exp;
branches;
next	1.18;

1.18
date	93.11.24.15.28.57;	author john;	state Exp;
branches;
next	1.17;

1.17
date	93.11.24.14.18.28;	author john;	state Exp;
branches;
next	1.16;

1.16
date	92.11.12.14.56.25;	author john;	state Exp;
branches;
next	1.15;

1.15
date	91.09.05.08.50.23;	author jkcohen;	state Exp;
branches;
next	1.14;

1.14
date	91.06.26.10.57.22;	author jkcohen;	state Exp;
branches;
next	1.13;

1.13
date	91.02.14.10.32.34;	author jkcohen;	state Exp;
branches;
next	1.12;

1.12
date	90.12.03.10.52.13;	author jkc;	state Exp;
branches;
next	1.11;

1.11
date	90.12.03.10.00.43;	author jkc;	state Exp;
branches;
next	1.10;

1.10
date	90.11.17.08.12.09;	author jkc;	state Exp;
branches;
next	1.9;

1.9
date	90.11.17.07.59.25;	author jkc;	state Exp;
branches;
next	1.8;

1.8
date	90.11.17.07.35.47;	author jkc;	state Exp;
branches;
next	1.7;

1.7
date	90.11.16.11.25.47;	author jkc;	state Exp;
branches;
next	1.6;

1.6
date	90.11.15.10.43.25;	author jkc;	state Exp;
branches;
next	1.5;

1.5
date	90.09.01.20.38.15;	author jkc;	state Exp;
branches;
next	1.4;

1.4
date	90.06.12.13.38.55;	author jkc;	state Exp;
branches;
next	1.3;

1.3
date	90.06.12.13.35.14;	author jkc;	state Exp;
branches;
next	1.2;

1.2
date	90.05.25.19.25.43;	author jkc;	state Exp;
branches;
next	1.1;

1.1
date	90.04.17.11.39.57;	author jkc;	state Exp;
branches;
next	;


desc
@Fft time -> packed frequency
@


1.31
log
@added Reg Beardsley's checkpar()
@
text
@/* Copyright (c) Colorado School of Mines, 2011.*/
/* All rights reserved.                       */

/* SUFFT: $Revision: 1.29 $ ; $Date: 2010/12/06 17:52:57 $		*/

#include <math.h>

#include "su.h"
#include "segy.h"

/*********************** self documentation **********************/
char *sdoc[] = {
" 									",
" SUFFT - fft real time traces to complex frequency traces		",
" 									",
" suftt <stdin >sdout sign=1 						",
" 									",
" Required parameters:							",
" none									",
" 									",
" Optional parameters:							",
" sign=1			sign in exponent of fft			",
" dt=from header		sampling interval			",
" verbose=1		=0 to stop advisory messages			",
" 									",
" Notes: To facilitate further processing, the sampling interval	",
" in frequency and first frequency (0) are set in the			",
" output header.							",
" 									",
" sufft | suifft is not quite a no-op since the trace			",
" length will usually be longer due to fft padding.			",
" 									",
" Caveats: 								",
" No check is made that the data IS real time traces!			",
" 									",
" Output is type complex. To view amplitude, phase or real, imaginary	",
" parts, use    suamp 							",
" 									",
" Examples: 								",
" sufft < stdin | suamp mode=amp | .... 				",
" sufft < stdin | suamp mode=phase | .... 				",
" sufft < stdin | suamp mode=uphase | .... 				",
" sufft < stdin | suamp mode=real | .... 				",
" sufft < stdin | suamp mode=imag | .... 				",
" 									",
NULL};

/* Credits:
 *
 *	CWP: Shuki Ronen, Chris Liner, Jack K. Cohen
 *	CENPET: Werner M. Heigl - added well log support
 *
 * Note: leave dt set for later inversion
 *
 * Trace header fields accessed: ns, dt, d1, f1
 * Trace header fields modified: ns, d1, f1, trid
 */
/**************** end self doc ***********************************/


#define LOOKFAC	2	/* Look ahead factor for npfaro	  */
#define PFA_MAX	720720	/* Largest allowed nfft	          */

segy tr;

int
main(int argc, char **argv)
{
	register float *rt;	/* real trace				*/
	register complex *ct;	/* complex transformed trace		*/
	int nt;			/* number of points on input trace	*/
	int nfft;		/* transform length			*/
	int nf;			/* number of frequencies		*/
	int sign;		/* sign in exponent of transform	*/
	int verbose;		/* flag to get advisory messages	*/
	float dt;		/* sampling interval in secs		*/
	float d1;		/* output sample interval in Hz		*/
	cwp_Bool seismic;	/* is this seismic data? */


	/* Initialize */
	initargs(argc, argv);
	requestdoc(1);
	if (!getparint("verbose", &verbose))	verbose=1;


	/* Get info from first trace */ 
	if (!gettr(&tr))  err("can't get first trace");
	nt = tr.ns;

	/* check for seismic or well log data */
	seismic = ISSEISMIC(tr.trid);		
	if (seismic) {
		if (verbose)	warn("input is seismic data, trid=%d",tr.trid);
		dt = ((double) tr.dt)/1000000.0;
	}
	else {
		if (verbose)	warn("input is not seismic data, trid=%d",tr.trid);
		dt = tr.d1;
        }
	if (!dt) {
		dt = .004;
		if (verbose) warn("dt or d1 not set, assumed to be .004");
	}


	/* Set up pfa fft */
	nfft = npfaro(nt, LOOKFAC * nt);
	if (nfft >= SU_NFLTS || nfft >= PFA_MAX)  err("Padded nt=%d--too big", nfft);
	nf = nfft/2 + 1;
	d1 = 1.0/(nfft*dt);

	if (!getparint("sign", &sign)) sign = 1;
	if (sign != 1 && sign != -1)   err("sign = %d must be 1 or -1", sign);


        checkpars();

	rt = ealloc1float(nfft);
	ct = ealloc1complex(nf);


	/* If dt not set, issue advisory on frequency step d1 */
	if (dt && verbose)  warn("d1=%f", 1.0/(nfft*dt));



	/* Main loop over traces */
	do {
		register int i;

		/* Load trace into rt (zero-padded) */
		memcpy((void *) rt, (const void *) tr.data, nt*FSIZE);
		memset((void *) (rt + nt), 0, (nfft-nt)*FSIZE);

		/* FFT */
		pfarc(sign, nfft, rt, ct);

		/* Store values */
		for (i = 0; i < nf; ++i) {
			tr.data[2*i]   = ct[i].r;
			tr.data[2*i+1] = ct[i].i;
		}

		/* Set header values--npfaro makes nfft even */
		tr.ns = 2 * nf;
		tr.trid = FUNPACKNYQ;
		tr.d1 = d1;
		tr.f1 = 0.0;

		puttr(&tr);

	} while (gettr(&tr));


	return(CWP_Exit());
}
@


1.30
log
@copyright
@
text
@d6 2
d116 3
@


1.29
log
@added uphase example to selfdoc
@
text
@d1 4
a4 1
/* SUFFT: $Revision: 1.28 $ ; $Date: 2006/11/07 22:58:42 $		*/
@


1.28
log
@changed    memset( .., (int) '\0',...) to memset( .., 0,..) as per suggestion of Marion Zhu and Reg Beardsley
@
text
@d1 1
a1 1
/* SUFFT: $Revision: 1.27 $ ; $Date: 2006/03/09 19:57:00 $		*/
d37 1
@


1.27
log
@Werner Heigel's fixes
@
text
@d1 1
a1 1
/* SUFFT: $Revision: 1.26 $ ; $Date: 2003/06/09 16:17:07 $		*/
d125 1
a125 1
		memset((void *) (rt + nt), (int) '\0', (nfft-nt)*FSIZE);
@


1.26
log
@9 June 2003
@
text
@d1 1
a1 1
/* SUFFT: $Revision: 1.25 $ ; $Date: 1997/07/28 22:36:46 $		*/
d45 1
d49 1
a49 1
 * Trace header fields accessed: ns, dt
d72 1
d85 10
a94 3

	/* dt is used only to set output header value d1 */
	if (!getparfloat("dt", &dt))	dt = ((double) tr.dt)/1000000.0;
d97 1
a97 1
		if (verbose) warn("dt not set, assumed to be .004");
@


1.25
log
@changes suggested by Stew Levin to silence SGI compiler warnings, etc
@
text
@d1 1
a1 1
/* SUFFT: $Revision: 1.24 $ ; $Date: 1996/09/13 21:49:05 $		*/
d138 1
a138 1
	return EXIT_SUCCESS;
@


1.24
log
@silenced -Wall messages
@
text
@d1 1
a1 1
/* SUFFT: $Revision: 1.23 $ ; $Date: 1996/01/25 19:35:14 $		*/
d8 32
a39 22
" 								",
" SUFFT - fft real time traces to complex frequency traces	",
" 								",
" suftt <stdin >sdout sign=1 					",
" 								",
" Required parameters:						",
" 	none							",
" 								",
" Optional parameters:						",
" 	sign=1			sign in exponent of fft		",
" 	dt=from header		sampling interval		",
"	verbose=1		=0 to stop advisory messages	",
" 								",
" Notes: To facilitate further processing, the sampling interval",
"       in frequency and first frequency (0) are set in the	",
"	output header.						",
" 								",
"	sufft | suifft is not quite a no-op since the trace	",
" 	length will usually be longer due to fft padding.	",
" 								",
" 	No check is made that the data IS real time traces!	",
" 								",
d44 1
a44 1
 *	CWP: Shuki, Chris, Jack
d94 1
a94 1
	if (nfft >= MIN(SU_NFLTS,PFA_MAX))  err("Padded nt=%d--too big", nfft);
@


1.23
log
@Deal with specifying header fields accessed/modified in sudoc.
@
text
@d1 1
a1 1
/* SUFFT: $Revision: 1.22 $ ; $Date: 1995/12/05 19:56:14 $		*/
d49 1
@


1.22
log
@Cosmetic.
@
text
@d1 1
a1 1
/* SUFFT: $Revision: 1.21 $ ; $Date: 1995/10/30 20:29:21 $		*/
a20 3
" Trace header fields accessed: ns, dt				",
" Trace header fields modified: ns, dt, trid			",
" 								",
d38 2
@


1.21
log
@Give user a verbose flag to turn off advisory messages.
@
text
@d1 1
a1 1
/* SUFFT: $Revision: 1.20 $ ; $Date: 1995/08/02 19:40:31 $		*/
d95 1
a95 1
	/* If dt not set, issue advisory on frequncy step d1 */
@


1.20
log
@Cast the integers tr.dt and/or tr.delrt and/or clones to double before
division with floating constant (which is implicitly double
precision).  Casting is needed to make some compilers happy and if we
cast to float then there will be an extra conversion to double because
of the floating constant (casting to float and writing 1000000.0F
would save a conversion, but most people find that F yucky and
efficiency is not an issue here).
Motivated by examples from Stew Levin.
@
text
@d1 1
a1 1
/* SUFFT: $Revision: 1.19 $ ; $Date: 1994/08/25 14:59:18 $		*/
d19 1
d58 1
d66 1
d78 1
a78 1
		warn("dt not set, assumed to be .004");
d84 1
a84 1
	if (nfft >= MIN(SU_NFLTS, PFA_MAX))  err("Padded nt=%d--too big", nfft);
d95 2
a96 2
	/* Echo frequency step size (Hz) to par file */
	if (dt)  warn("d1=%f f1=0.0", 1.0/(nfft*dt));
@


1.19
log
@Removed copyright statement from codes that had it.
Moved self-doc line for sudoc.
@
text
@d1 1
a1 1
/* SUFFT: $Revision: 1.18 $ ; $Date: 93/11/24 15:28:57 $		*/
d72 1
a72 1
	if (!getparfloat("dt", &dt)) dt = (float) tr.dt/1000000.0;
@


1.18
log
@added explicit casts ; changed bzero to memset
. 
@
text
@d1 1
a1 1
/* SUFFT: $Revision: 1.17 $ ; $Date: 93/11/24 14:18:28 $		*/
a2 13
/*----------------------------------------------------------------------
 * Copyright (c) Colorado School of Mines, 1990.
 * All rights reserved.
 *
 * This code is part of SU.  SU stands for Seismic Unix, a processing line
 * developed at the Colorado School of Mines, partially based on Stanford
 * Exploration Project (SEP) software.  Inquiries should be addressed to:
 *
 *  Jack K. Cohen, Center for Wave Phenomena, Colorado School of Mines,
 *  Golden, CO 80401  (jkc@@dix.mines.colorado.edu)
 *----------------------------------------------------------------------
 */

a32 1
/**************** end self doc ***********************************/
d41 1
@


1.17
log
@explicit casts put in
@
text
@d1 1
a1 1
/* SUFFT: $Revision: 1.16 $ ; $Date: 92/11/12 14:56:25 $		*/
d116 1
a116 1
		bzero(rt + nt, (nfft-nt)*FSIZE);
@


1.16
log
@new selfdoc installed
@
text
@d1 1
a1 1
/* SUFFT: $Revision: 1.15 $ ; $Date: 91/09/05 08:50:23 $		*/
d115 1
a115 1
		memcpy(rt, tr.data, nt*FSIZE);
@


1.15
log
@string -> String and so forth
@
text
@d1 1
a1 1
/* SUFFT: $Revision: 1.14 $ ; $Date: 91/06/26 10:57:22 $		*/
d20 26
a45 26
String sdoc =
" 								\n"
" SUFFT - fft real time traces to complex frequency traces	\n"
" 								\n"
" suftt <stdin >sdout sign=1 					\n"
" 								\n"
" Required parameters:						\n"
" 	none							\n"
" 								\n"
" Optional parameters:						\n"
" 	sign=1			sign in exponent of fft		\n"
" 	dt=from header		sampling interval		\n"
" 								\n"
" Trace header fields accessed: ns, dt				\n"
" Trace header fields modified: ns, dt, trid			\n"
" 								\n"
" Notes: To facilitate further processing, the sampling interval\n"
"       in frequency and first frequency (0) are set in the	\n"
"	output header.						\n"
" 								\n"
"	sufft | suifft is not quite a no-op since the trace	\n"
" 	length will usually be longer due to fft padding.	\n"
" 								\n"
" 	No check is made that the data IS real time traces!	\n"
" 								\n"
;
d76 1
a76 1
	askdoc(1);
@


1.14
log
@Remove check on trid =0,1 to allow fft of say ENVELOPE traces.
This suggests a more powerful front end to pfa routines is
required--one that does rc,cc,cr and this subsumes suifft.
@
text
@d1 1
a1 1
/* SUFFT: $Revision: 1.13 $ ; $Date: 91/02/14 10:32:34 $		*/
d20 1
a20 1
string sdoc =
@


1.13
log
@Set d1,f1 in header.
@
text
@d1 1
a1 1
/* SUFFT: $Revision: 1.12 $ ; $Date: 90/12/03 10:52:13 $		*/
d33 1
a33 1
" Trace header fields accessed: ns, dt, trid 			\n"
d43 2
a80 1
	if (tr.trid && tr.trid != TREAL) err("not time domain data");
@


1.12
log
@Leave dt set for later inversion
@
text
@d1 1
a1 1
/* SUFFT: $Revision: 1.11 $ ; $Date: 90/12/03 10:00:43 $		*/
d37 2
a38 1
"       in frequency is echoed to stderr.			\n"
d69 1
a80 2
	dt = (float) tr.dt/1000000.0;   /* used only for par file */
	if (!dt) getparfloat("dt", &dt);
d83 8
d95 1
d129 2
@


1.11
log
@Tweaks in elim unneeded variables and better names.
@
text
@d1 1
a1 1
/* SUFFT: $Revision: 1.10 $ ; $Date: 90/11/17 08:12:09 $		*/
d49 2
a118 1
		tr.dt = 0;	/* df is now the relevant step size */
@


1.10
log
@echo f1 too
@
text
@d1 1
a1 1
/* SUFFT: $Revision: 1.9 $ ; $Date: 90/11/17 07:59:25 $		*/
d29 1
a29 1
" Optional parameter:						\n"
d33 4
a36 1
" Note: To facilitate further processing, the sampling interval	\n"
d39 1
a39 1
" Caveat: sufft | suifft is not quite a no-op since the trace	\n"
d46 1
d62 2
a63 4
	int ntsize;		/* nt*sizeof(float)			*/
	int nfft;		/* number of points on output trace	*/
	int nfby2p1;		/* nfft/2 + 1				*/
	int nzeros;		/* number of padded zeroes*sizeof(float)*/
d65 1
a65 3
	float dt;		/* sample rate in secs			*/
	int ntr=0;		/* number of traces			*/
	register int i;		/* counter				*/
d75 1
d84 1
a84 3
	nfby2p1 = nfft/2 + 1;
	ntsize = nt * FSIZE;
	nzeros = (nfft - nt) * FSIZE;
d90 1
a90 1
	ct = ealloc1complex(nfby2p1);
d100 1
a100 1
		++ntr;
d103 2
a104 2
		memcpy(rt, tr.data, ntsize);
		bzero(rt + nt, nzeros);
d110 1
a110 1
		for (i = 0; i < nfby2p1; ++i) {
d116 1
a116 1
		tr.ns = nfft + 2; /*  2*nfby2p1  */
@


1.9
log
@Echo d1 to stderr instead of par file; ANSI C tweaks.
@
text
@d1 1
a1 1
/* SUFFT: $Revision: 1.8 $ ; $Date: 90/11/17 07:35:47 $		*/
d95 1
a95 1
	if (dt)  warn("d1=%f", 1.0/(nfft*dt));
@


1.8
log
@Rewrote to eliminate "first" logic and instead use
usual do-while logic.
@
text
@d1 1
a1 1
/* SUFFT: $Revision: 1.7 $ ; $Date: 90/11/16 11:25:47 $		*/
d20 20
a39 17
string sdoc = "\
								\n\
SUFFT - fft real time traces to complex frequency traces	\n\
								\n\
suftt <stdin >sdout sign=1 outpar=/dev/tty			\n\
								\n\
Required parameters:						\n\
	none							\n\
								\n\
Optional parameter:						\n\
	sign=1		sign in exponent of fft			\n\
	outpar=/dev/tty	name of parameter file			\n\
								\n\
Caveat: sufft | suifft is not quite a no-op since the trace	\n\
	length will usually be longer due to fft padding.	\n\
								\n\
";
d43 1
a43 1
 *	CWP: Shuki, Chris, Jack, Frank
a64 2
	string outpar;		/* name of file holding output parfile	*/
	FILE *outparfp;		/* ... its file pointer			*/
a82 1

d87 2
a88 3
	/* Set sign in exponent of transform */
	if (!igetpar("sign", &sign))  sign = 1;
	if (sign != 1 && sign != -1)  err("sign = %d must be 1 or -1", sign);
d90 2
d93 1
d95 1
a95 6
	if (dt) {
		if (!sgetpar("outpar", &outpar))  outpar = "/dev/tty" ;
		outparfp = efopen(outpar, "w");
		fprintf(outparfp, "d1=%f\n", 1.0/(nfft*dt));
		efclose(outparfp);
	}
a97 3
	/* Allocate fft arrays */
	rt   = ealloc1float(nfft);
	ct   = ealloc1complex(nfby2p1);
a98 2


d118 1
a118 1
		tr.dt = 0;	/* df is now relevant */
@


1.7
log
@Produce par file with d1=df; unset tr.dt
@
text
@d1 1
a1 1
/* SUFFT: $Revision: 1.6 $ ; $Date: 90/11/15 10:43:25 $		*/
a51 1
	bool first=true;	/* flag for first trace			*/
d72 5
a76 1
	while (gettr(&tr)) {
a77 1
		++ntr;
d79 3
a81 2
		if (first) { /* first trace: initialize */
			first = false;
d83 3
a85 4
			nt = tr.ns;
			nfft = npfaro(nt, LOOKFAC * nt);
			if (nfft >= MIN(SU_NFLTS, PFA_MAX))
				err("Padded nt=%d -- too big", nfft);
d87 3
a89 3
			nfby2p1 = nfft/2 + 1;
			ntsize = nt * FSIZE;
			nzeros = (nfft - nt) * FSIZE;
a90 4
			/* For par file */
			dt = (float) tr.dt/1000000.0;   /* microsecs to secs */
			if (!dt) getparfloat("dt", &dt);
			if (!dt) MUSTFGETPAR("dt", &dt);
d92 7
a98 5
			/* Set sign in exponent of transform */
			if (!igetpar("sign", &sign))	sign = 1;
			if (sign != 1 && sign != -1) {
			    err("sign = %d must be 1 or -1", sign);
			}
a99 1
			if (!sgetpar("outpar", &outpar))  outpar = "/dev/tty" ;
d101 3
a103 2
			/* Open file to save parameters */
			outparfp = efopen(outpar, "w");
a104 3
			/* Allocate fft arrays */
			rt   = ealloc1float(nfft);
			ct   = ealloc1complex(nfby2p1);
a105 1
		} /* End of initialization for first trace */
d107 4
a114 1

a117 1

a129 1
	}
d131 1
a131 4


	/* Make par file */
	fprintf(outparfp, "d1=%f\n", 1.0/(nfft*dt));
@


1.6
log
@bcopy -> memcpy
@
text
@d1 1
a1 1
/* SUFFT: $Revision: 1.5 $ ; $Date: 90/09/01 20:38:15 $		*/
d24 1
a24 1
suftt <stdin >sdout sign=1					\n\
d30 2
a31 1
	sign=1	sign in exponent of fft				\n\
d61 4
d74 3
d89 5
d100 5
d128 1
d133 5
@


1.5
log
@Adapted for pfarc,pfacr's unpacked to Nyquist traces.
@
text
@d1 1
a1 1
/* SUFFT: $Revision: 1.4 $ ; $Date: 90/06/12 13:38:55 $		*/
d94 1
a94 1
		bcopy(tr.data, rt, ntsize);
@


1.4
log
@Clarify self-doc.
@
text
@d1 1
a1 1
/* SUFFT: $Revision: 1.3 $ ; $Date: 90/06/12 13:35:14 $		*/
d57 1
a57 3
	int nfm1;		/* nfft - 1 				*/
	int nfby2;		/* nfft / 2				*/
	int nfby2p1;		/* (nfft/2) + 1				*/
d77 1
a77 3
			nfm1 = nfft - 1;
			nfby2 = nfft / 2;
			nfby2p1 = nfby2 + 1;
d99 1
a99 1
		pfarc(1, nfft, rt, ct);
d103 1
a103 1
		for (i = 0; i < nfby2p1; i++) {
d105 1
a105 1
			tr.data[2*i+1] = sign * ct[i].i;
d108 3
a110 2
		tr.trid = FCMPLX;
		tr.ns = nfft;
@


1.3
log
@Using pfa.  Also storing as plain freq domain complex traces (no
packing).
@
text
@d1 1
a1 1
/* SUFFT: $Revision: 1.2 $ ; $Date: 90/05/25 19:25:43 $		*/
d32 2
a33 2
The output is complex frequency traces, use suifft to fft	\n\
complex traces to real traces.					\n\
@


1.2
log
@vec --> ealloc1float, etc.
@
text
@d1 1
a1 1
/* SUFFT: $Revision: 1.1 $ ; $Date: 90/04/17 11:39:57 $		*/
d12 1
a12 1
 *  Golden, CO 80401  (isis!csm9a!jkcohen)
d22 1
a22 1
SUFFT - fft time to frequency					\n\
d32 2
a33 4
Sufft performs an fft using an optimal or near-optimal trace	\n\
length, N, composed of a product of the factors 2, 3, 4, 5 and	\n\
6.  N is greater than or equal the input trace length, tr.ns by	\n\
at most 500 sample points.					\n\
a34 7
The output is `packed' frequency traces.			\n\
								\n\
Note:								\n\
   For even length N, a ``packed'' frequency trace is:		\n\
   xr[0],xr[N/2],xr[1],xi[1], ..., xr[N/2 -1],xi[N/2 -1]	\n\
   (the second entry is exceptional).				\n\
							        \n\
a40 20
 * Note:
 *	For even length N, a ``packed'' frequency trace is:
 *	xr[0],xr[N/2],xr[1],xi[1], ..., xr[N/2 -1],xi[N/2 -1]
 *	(the second entry is exceptional).
 *
 *	For odd length N, a ``packed'' frequency trace is:
 *	xr[0],xr[(N-1)/2],xr[1],xi[1], ..., [(N-1)/2 -1],
 *	xi[(N-1)/2 -1],xi[(N-1)/2] (the second and last
 *	entries are exceptional)
 *
 *	Because of the forward search for optimal length
 *	N, it is likely that the odd N case never occurs in
 *	current implementation.  However, the code
 *	supports odd N to admit the possibility of later
 *	supporting user specification or properties of N.
 *
 * Caveat:
 *	This routine uses a highly efficient complex fft.  To fully
 *	exploit it, we transform two real traces at a time.
 *
d44 2
a45 1
#define	FACMAX		12		/* For FFTPACK	*/
d47 1
a47 2
segy tr1;
segy tr2;
d52 2
a53 7
	bool lastzero=false;	/* is this trace a phoney one?		*/
	float *hcos;		/* hold cosines for fft			*/
	float *hsin;		/* hold sines for fft			*/
	float *xr;		/* real part of trace			*/
	float *xi;		/* imaginary part of trace		*/
	float *wr;		/* work area for fft			*/
	float *wi;		/* work area for fft			*/
a56 1
	uint nfftsize;		/* nt*sizeof(float)			*/
a59 2
	int nfac;		/* number of factors of nfft		*/
	int facs[FACMAX];	/* contains factors of nfft		*/
d70 1
a70 1
	while (gettr(&tr1)) {
d73 4
a76 7
			if (tr1.trid && tr1.trid != TREAL) {
			    err("input is not time domain data, trid=%d",
								tr1.trid);
			}
			nt = tr1.ns;
			fftfac(&nt, &nfft, &nfac, facs);
			if (nfft > SU_NFLTS) {
d78 1
a78 1
			}
d83 1
a83 2
			nfftsize = nfft * FSIZE;
			nzeros = nfftsize - ntsize;
d92 2
a93 3
			hcos = ealloc1float(nfft);  hsin = ealloc1float(nfft);
			xr   = ealloc1float(nfft);  xi   = ealloc1float(nfft);
			wr   = ealloc1float(nfft);  wi   = ealloc1float(nfft);
a94 3
			/* Set up tables */
			ffttab(&nfft, hcos, hsin);

d97 3
a99 12
		/* Load traces into xr, xi (zero-padded) */
		if (gettr(&tr2)) {
			bcopy(tr1.data, xr, ntsize);
			bzero(xr + nt, nzeros);
			bcopy(tr2.data, xi, ntsize);
			bzero(xi + nt, nzeros);
		} else { /* odd number of traces; make zero trace */
			lastzero = true;
			bcopy(tr1.data, xr, ntsize);
			bzero(xr + nt, nzeros);
			bzero(xi, (int) nfftsize);
		}
a100 2
		/* Fft */
		fft(xr, xi, wr, wi, &nfft, facs, &nfac, hcos, hsin);
d102 8
a109 10
		/* Untwin the traces and store the non-redundant values */
		tr1.data[0] = xr[0];
		tr1.data[1] = 0.0;
		tr2.data[0] = xi[0];
		tr2.data[1] = 0.0;
		for (i = 1; i < nfby2; i++) {
			tr1.data[2*i]   = 0.5*(xr[i] + xr[nfft-i]);
			tr1.data[2*i+1] = sign * 0.5*(xi[i] - xi[nfft-i]);
			tr2.data[2*i]   = 0.5*(xi[i] + xi[nfft-i]);
			tr2.data[2*i+1] = sign * 0.5*(-xr[i] + xr[nfft-i]);
d112 4
a115 18
		/* Pack the exceptional values */
		if (ISODD(nfft)) {
			tr1.data[1] = 0.5 * (xr[nfby2] + xr[nfft - nfby2]);
			tr2.data[1] = 0.5 * (xi[nfby2] + xi[nfft - nfby2]);
			tr1.data[nfm1] = sign * 0.5 *
						(xi[nfby2] - xi[nfby2p1]);
			tr2.data[nfm1] = sign * 0.5 *
						(-xr[nfby2] + xr[nfby2p1]);
		} else {
			tr1.data[1] = xr[nfby2];
			tr2.data[1] = xi[nfby2];
		}
		tr2.trid = tr1.trid = FPACK;
		tr2.ns = tr1.ns = nfft;
		puttr(&tr1);
		if (!lastzero) {
			puttr(&tr2);
		}
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/* SUFFT: $Revision: 2.8 $ ; $Date: 89/09/20 19:35:21 $		*/
d30 1
a30 1
	sign = 1	sign in exponent of fft			\n\
d68 1
a68 3
 *	exploit it, we transform two real traces at a time.  It would
 *	be better to develop an analogous real fft and avoid the
 *	tricky coding involved.
a69 1
 *
a71 5
/* Embed Revision Control System identifier strings */
static string progid =
	"   $Source: /src/su/src/RCS/sufft.c,v $";
static string revid =
	"   $Revision: 2.8 $ ; $Date: 89/09/20 19:35:21 $";
a72 2


d78 1
a78 2
main(argc, argv)
int argc; char **argv;
a103 5
	if (!igetpar("ID", &ID))	ID = 0;
	if (ID) {
		(void) fprintf(stderr, "%s\n", progid);
		(void) fprintf(stderr, "%s\n", revid);
	}
d133 3
a135 3
			hcos = vec(nfft);  hsin = vec(nfft);
			xr   = vec(nfft);  xi   = vec(nfft);
			wr   = vec(nfft);  wi   = vec(nfft);
@
