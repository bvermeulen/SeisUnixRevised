head	1.18;
access;
symbols;
locks; strict;
comment	@ * @;


1.18
date	2015.08.07.22.19.43;	author john;	state Exp;
branches;
next	1.17;

1.17
date	2011.11.16.22.14.43;	author john;	state Exp;
branches;
next	1.16;

1.16
date	2011.11.12.00.21.33;	author john;	state Exp;
branches;
next	1.15;

1.15
date	2010.02.03.23.15.40;	author john;	state Exp;
branches;
next	1.14;

1.14
date	2008.10.30.21.42.34;	author john;	state Exp;
branches;
next	1.13;

1.13
date	2006.12.13.16.55.11;	author john;	state Exp;
branches;
next	1.12;

1.12
date	2006.11.07.22.58.42;	author john;	state Exp;
branches;
next	1.11;

1.11
date	2006.10.31.22.01.49;	author john;	state Exp;
branches;
next	1.10;

1.10
date	2006.10.17.18.59.13;	author john;	state Exp;
branches;
next	1.9;

1.9
date	2006.09.28.22.01.02;	author john;	state Exp;
branches;
next	1.8;

1.8
date	2005.12.22.00.54.17;	author john;	state Exp;
branches;
next	1.7;

1.7
date	2004.12.24.00.05.53;	author john;	state Exp;
branches;
next	1.6;

1.6
date	2003.08.19.17.31.42;	author john;	state Exp;
branches;
next	1.5;

1.5
date	2003.06.09.16.17.07;	author john;	state Exp;
branches;
next	1.4;

1.4
date	2000.09.25.20.38.38;	author john;	state Exp;
branches;
next	1.3;

1.3
date	2000.09.22.19.33.19;	author john;	state Exp;
branches;
next	1.2;

1.2
date	98.05.04.18.16.33;	author john;	state Exp;
branches;
next	1.1;

1.1
date	98.05.04.18.08.16;	author john;	state Exp;
branches;
next	;


desc
@sumigpreffd.c - prestack fourier finite difference migration
@


1.18
log
@changed trigonometric functions to the cwp_ version
@
text
@/* Copyright (c) Colorado School of Mines, 2011.*/
/* All rights reserved.                       */

/* SUMIGPREFFD: $Vision: 1.00 $ ; $Date: 2011/11/16 22:14:43 $	*/

#include "su.h"
#include "segy.h"
#include "header.h"
#include <signal.h>

/*********************** self documentation ******************************/
char *sdoc[] = {
"									",
"SUMIGPREFFD - The 2-D prestack common-shot Fourier finite-difference	",
"		depth  migration.					",
"									",
"  sumigpreffd <indata >outfile [parameters]				", 
"									",
" Required Parameters:							",  
" nxo=	   number of total horizontal output samples			",
" nxshot=	number of shot gathers to be migrated			",
" nz=		number of depth sapmles					",
" dx=		horizontal sampling interval				",
" dz=		depth sampling interval					",
" vfile=	 velocity profile, it must be binary format.		",
"									",  
" Optional Parameters:							",
" fmax=25	the peak frequency of Ricker wavelet used as source wavelet",
" f1=5,f2=10,f3=40,f4=50	frequencies to build a Hamming window	",
" lpad=9999,rpad=9999		number of zero traces padded on both	",
"				sides of depth section to determine the ",
"				migration aperature, the default	",
"				values are using the full aperature.	",
" verbose=0		silent, =1 additional runtime information	",
"									",  
" Notes:								",
" The input velocity file consists of C-style binary floats.		",  
" The structure of this file is vfile[iz][ix]. Note that this means that",
" the x-direction is the fastest direction instead of z-direction! Such a",
" structure is more convenient for the downward continuation type	",
" migration algorithm than using z as fastest dimension as in other SU  ", 
" programs.								",
"									",
" Because most of the tools in the SU package (such as  unif2, unisam2, ", 
" and makevel) produce output with the structure vfile[ix][iz], you will",
" need to transpose the velocity files created by these programs. You may",
" use the SU program \'transp\' in SU to transpose such files into the  ",
" required vfile[iz][ix] structure.					",
" (In C  v[iz][ix] denotes a v(x,z) array, whereas v[ix][iz]  		",
" denotes a v(z,x) array, the opposite of what Matlab and Fortran	",
" programmers may expect.)						", 
"									",
" Also, sx must be monotonically increasing throughout the dataset, and ",
" and gx must be monotonically increasing within a shot. You may resort ",
" your data with \'susort\', accordingly.				",
"									",
" The scalco header field is honored so this field must be set correctly.",
" See selfdocs of \'susort\', \'suchw\'. Also:   sukeyword scalco	",
"									",
NULL};

/*
 * Credits: CWP, Baoniu Han, bhan@@dix.mines.edu, April 19th, 1998
 *
 *	  Modified: Chris Stolk, 11 Dec 2005, - changed data input
 *		    to remove erroneous time delay.
 *	  Modified: CWP, John Stockwell 26 Sept 2006 - replaced Han's
 *	  "goto-loop" with  "do { }while loops".
 *	  Fixed it so that sx, gx, and scalco are honored.
 *
 *
 *
 * Trace header fields accessed: ns, dt, delrt, d2
 * Trace header fields modified: ns, dt, delrt
 */

/**************** end self doc *******************************************/

/* Prototypes of subroutines used internally */
float *ricker(float Freq,float dt,int *Npoint);
void retris(complex *data,complex *a,complex *c,complex *b,complex
		endl,complex endr, int nx, complex *d);
void fdmig( complex **cp, int nx, int nw, float *v,float fw,float
		dw,float dz,float dx,float dt,float vc,int dip);
void get_sx_gx(float *sx, float *gx);

segy tr;

int
main (int argc, char **argv)
{
	int nt;			/* number of time samples		*/
	int nz;			/* number of migrated depth samples	*/
	int nx,nxshot;	/* number of midpoints			*/
	int nxshot_orig;	/* first value of nxshot		*/

	int iz,iw,ix,it,ik;	/* loop counters			*/
	int igx;		/* integerized gx value		 */

	int ntfft,nxfft;	/* fft size				*/
	int nw,truenw,nk;	/* number of wave number, frequency	*/
	int dip=45;		/* dip angle				*/

	float sx,gx;		/* x source and geophone location	*/
	float gxmin=0.0,gxmax=0.0;/* x source and geophone location	*/
	float min_sx_gx;	/* min(sx,gx)			   	*/
	float oldgx;		/* old gx position			*/
	float oldgxmin;		/* old gx position			*/
	float oldgxmax;		/* old gx position			*/
	float oldsx=0.0;	/* old sx position			*/
	int oldigx=0;		/* old value of integerized gx value	*/
	int oldisx=0;		/* old value of integerized sx value	*/

	int isx=0,nxo;		/* index for source and geophone	*/
	int ix1,ix2,ix3,ixshot;	/* dummy index				*/
	int lpad,rpad;/* padding on both sides of the migrated section	*/

	float *wl=NULL,*wtmp=NULL;
	float fmax;
	float f1,f2,f3,f4;
	int nf1,nf2,nf3,nf4;
	int ntw;

	float dt=0.004,dz;	/* time sampling interval 		*/
	float dw,dk;		/* wave number,frequency sampling interval*/
	float fw,fk;		/* first wave number and frequency	*/
	float w,k;		/* wave number and frequency		*/
	float dx;		/* spatial sampling interval		*/
	float **p=NULL;		/* input, output data			*/
	float **cresult=NULL;	/* input, output data			*/
	float v1,vmin;		/* average, min velocity		*/
	double kz1,kz2;
	double phase1;

	float **v=NULL,**vp=NULL;
	complex cshift1,cshift2;
	complex *wlsp=NULL;
	complex **cp=NULL;
	complex **cp1=NULL;
	complex **cq=NULL;
	complex **cq1=NULL;	/* complex input,output			*/
	char *vfile="";		/* name of file containing velocities	*/
	FILE *vfp=NULL;
	
	int verbose;		/* verbose flag				*/

	/* hook up getpar to handle the parameters */
	initargs(argc,argv);
	requestdoc(1);

	/* get required parameters */
	MUSTGETPARINT("nz",&nz);
	MUSTGETPARINT("nxo",&nxo);
	MUSTGETPARINT("nxshot",&nxshot);
	MUSTGETPARFLOAT("dz",&dz);
	MUSTGETPARSTRING("vfile", &vfile);

	/* get optional parameters */
	if (!getparfloat("fmax",&fmax)) fmax = 25.0;  
	if (!getparfloat("f1",&f1)) f1 = 10.0;
	if (!getparfloat("f2",&f2)) f2 = 20.0;
	if (!getparfloat("f3",&f3)) f3 = 40.0;
	if (!getparfloat("f4",&f4)) f4 = 50.0;

	if (!getparint("lpad",&lpad)) lpad=9999;
	if (!getparint("rpad",&rpad)) rpad=9999;
	if (!getparint("dip",&dip)) dip=45;

	if (!getparint("verbose",&verbose))     verbose = 0;


	/* allocating space */
	cresult = alloc2float(nz,nxo);
	vp=alloc2float(nxo,nz);

	/* load velocity file */
	vfp=efopen(vfile,"r");
	efread(vp[0],FSIZE,nz*nxo,vfp);
	efclose(vfp);

	/* zero out cresult array */
	memset((void *) cresult[0],0, nxo*nz*FSIZE);
			
	/* save value of nxshot */
	nxshot_orig=nxshot;

	/* get info from first trace */
	if (!gettr(&tr))  err("can't get first trace");
	nt = tr.ns;
	get_sx_gx(&sx,&gx);
	min_sx_gx = MIN(sx,gx);
	sx = sx - min_sx_gx;
	gx = gx - min_sx_gx;

	/* let user give dt and/or dx from command line */
	if (!getparfloat("dt", &dt)) {
		if (tr.dt) { /* is dt field set? */
			dt = ((double) tr.dt)/1000000.0;
		} else { /* dt not set, assume 4 ms */
			dt = 0.004;
			warn("tr.dt not set, assuming dt=0.004");
		}
	}
	if (!getparfloat("dx",&dx)) {
		if (tr.d2) { /* is d2 field set? */
			dx = tr.d2;
		} else {
			dx = 1.0;
			warn("tr.d2 not set, assuming d2=1.0");
		}
	}

        checkpars();

	do {    /* begin loop over shots */
 
		/* determine frequency sampling interval */
		ntfft = npfar(nt);
		nw = ntfft/2+1;
		dw = 2.0*PI/(ntfft*dt);

		/* compute the index of the frequency to be migrated */
		fw=2.0*PI*f1;
		nf1=fw/dw+0.5;
		 
		fw=2.0*PI*f2;
		nf2=fw/dw+0.5;

		fw=2.0*PI*f3;
		nf3=fw/dw+0.5;

		fw=2.0*PI*f4;
		nf4=fw/dw+0.5;  

		/* the number of frequency to migrated */
		truenw=nf4-nf1+1;
		fw=0.0+nf1*dw;
		if (verbose)
			warn("nf1=%d nf2=%d nf3=%d nf4=%d nw=%d",nf1,nf2,nf3,nf4,truenw);

		/* allocate space */
		wl=alloc1float(ntfft);
		wlsp=alloc1complex(nw);

		/* generate the Ricker wavelet */
		wtmp=ricker(fmax,dt,&ntw);

		/* zero out wl[] array */
		memset((void *) wl, 0, ntfft*FSIZE);
	
		/* CHANGE BY CHRIS STOLK, Dec. 11, 2005 */
		/* The next two lines are the old code, */
		/* it is erroneous because the peak of  */
		/* the wavelet occurs at positive time  */
		/* instead of time zero. */
		/*
		for(it=0;it<ntw;it++)
	  		wl[it]=wtmp[it];
		*/
		/* New code: we put in the wavelet in a centered fashion */ 
		for(it=0;it<ntw;it++) 
	  		wl[(it-ntw/2+ntfft) % ntfft]=wtmp[it];
		/* End of new code */
		free1float(wtmp);

		pfarc(-1,ntfft,wl,wlsp);

		/* allocate space */
		p = alloc2float(ntfft,nxo);
		cq = alloc2complex(nw,nxo);
	
		/* zero out p[][] array */
		memset((void *) p[0], 0, ntfft*nxo*FSIZE);

		/* initialize a number of items before looping over traces */
		nx = 0;
		igx=0;
		oldsx=sx;
		oldgx=gx;
		oldgxmax=gxmax;
		oldgxmin=gxmin;
		
		do { /* begin looping over traces within a shot gather */

			memcpy( (void *) p[igx], (const void *) tr.data,nt*FSIZE);
			
			/* get sx and gx */
			get_sx_gx(&sx,&gx);
			sx = (sx - min_sx_gx);
			gx = (gx - min_sx_gx);

			igx = gx/dx;
			if (igx==oldigx) 
			   warn("repeated igx!!! check dx or scalco value!!!");
			oldigx = igx;


			if(gxmin>gx)gxmin=gx;
			if(gxmax<gx)gxmax=gx;

			if(verbose)
				warn(" inside loop:  min_sx_gx %f isx %d igx %d gx %f sx %f",min_sx_gx,isx,igx,gx,sx);


			/* sx, gx must increase monotonically */
			if (!(oldsx <= sx) )
			 err("sx field must be monotonically increasing!");
			if (!(oldgx <= gx) )
			 err("gx field must be monotonically increasing!");

			++nx;
		} while(gettr(&tr) && sx==oldsx);

		isx=oldsx/dx;
		if (isx==oldisx) 
			warn("repeated isx!!! check dx or scalco value!!!");
		oldisx=isx;
		ixshot=isx;
		if(verbose) {
			warn("sx %f, gx %f , gxmin %f  gxmax %f nx %d",sx,gx,gxmin,gxmax, nx);
			warn("isx %d igx %d ixshot %d" ,isx,igx,ixshot);
		}


		/* transform the shot gather from time to frequency domain */
		pfa2rc(1,1,ntfft,nxo,p[0],cq[0]);


		/* compute the most left and right index for the migrated */
		/* section */
		ix1=oldsx/dx;
		ix2=gxmin/dx;
		ix3=gxmax/dx;

		if(ix1>=ix3)ix3=ix1;
		if(ix1<=ix2)ix2=ix1;

		ix2-=lpad;
		ix3+=rpad;
		if(ix2<0)ix2=0;
		if(ix3>nxo-1)ix3=nxo-1;

		/* the total traces to be migrated */
		nx=ix3-ix2+1;
		nw=truenw;

		/* determine wavenumber sampling (for complex to complex FFT) */
		nxfft = npfa(nx);
		nk = nxfft;
		dk = 2.0*PI/(nxfft*dx);
		fk = -PI/dx;


		/* allocate space for velocity profile within the aperature */
		v=alloc2float(nx,nz);
		for(iz=0;iz<nz;iz++) 
			for(ix=0;ix<nx;ix++)
				v[iz][ix]=vp[iz][ix+ix2];

		/* allocate space */
		cp = alloc2complex(nx,nw);
		cp1 = alloc2complex(nx,nw);

		/* transpose the frequency domain data from	*/
		/* data[ix][iw] to data[iw][ix] and apply a	*/
		/* Hamming at the same time			*/

		for (ix=0; ix<nx;++ix) {
			for (iw=0; iw<nw; iw++){
				float tmpp=0.0,tmppp=0.0;

				if(iw>=(nf1-nf1)&&iw<=(nf2-nf1)){
					tmpp=PI/(nf2-nf1);
					tmppp=tmpp*(iw-nf1)-PI;
					tmpp=0.54+0.46*cos(tmppp);
					cp[iw][ix]=crmul(cq[ix+ix2][iw+nf1],tmpp);
				} else {
					if(iw>=(nf3-nf1)&&iw<=(nf4-nf1)) {
						tmpp=PI/(nf4-nf3);
						tmppp=tmpp*(iw-nf3);
						tmpp=0.54+0.46*cos(tmppp);
						cp[iw][ix]=crmul(cq[ix+ix2][iw+nf1],tmpp);
					} else {
						cp[iw][ix]=cq[ix+ix2][iw+nf1];
					}
				}
				cp1[iw][ix]=cmplx(0.0,0.0);
			}

		}
		for(iw=0;iw<nw;iw++) {
			cp1[iw][ixshot-ix2]=wlsp[iw+nf1];
		}
	
		if(verbose) {
				warn("ixshot %d ix %d ix1 %d ix2 %d ix3 %d",ixshot,ix,ix1,ix2,ix3);
				warn("oldsx %f ",oldsx);
		}

			
		free2float(p);
		free2complex(cq);
		free1float(wl);
		free1complex(wlsp);

		cq=alloc2complex(nxfft,nw);
		cq1=alloc2complex(nxfft,nw);

		/* loops over depth */
		for(iz=0;iz<nz;++iz){

			/* the imaging condition */
			for(ix=0;ix<nx;ix++){
				for(iw=0,w=fw;iw<nw;w+=dw,iw++){   
					complex tmp;
					float ratio=10.0;
		
					if(fabs(ix+ix2-ixshot)*dx<ratio*iz*dz)
						tmp=cmul(cp[iw][ix],cp1[iw][ix]);
					else
						tmp=cmplx(0.0,0.0);  

					cresult[ix+ix2][iz]+=tmp.r/ntfft;
				}
			}

		
			/* get the minimum velocity */
			vmin=v[iz][0];
			for(ix=0;ix<nx;ix++){
				if(v[iz][ix]<vmin)vmin=v[iz][ix];
			}
		
			/* compute time-invariant wavefield */
			for (ik=0;ik<nx;++ik) {
				for (iw=0; iw<nw; ++iw) {
					cq[iw][ik] = ik%2 ? cneg(cp[iw][ik]) : cp[iw][ik];
					cq1[iw][ik] = ik%2 ? cneg(cp1[iw][ik]) : cp1[iw][ik];
				}
			}

		 
			/* zero out parts of the cq[][] and cq1[][] arrays */
			for (ik=nx; ik<nk; ++ik) {
				for (iw=0; iw<nw; ++iw) {
					cq[iw][ik] = cmplx(0.0,0.0);
					cq1[iw][ik] = cmplx(0.0,0.0);
				}
			}
			/* FFT to W-K domain */
			pfa2cc(-1,1,nk,nw,cq[0]);
			pfa2cc(-1,1,nk,nw,cq1[0]);
	
			v1=vmin;

			/* apply phase shift */
			for(ik=0,k=fk;ik<nk;++ik,k+=dk) {
				for(iw=0,w=fw;iw<nw;++iw,w+=dw){
					if(w==0.0)w=1.0e-10/dt; 

					kz1=1.0-pow(v1*k/w,2.0);
					if(kz1>0.15){
						phase1 = -w*sqrt(kz1)*dz/v1;
						cshift1 = cmplx(cos(phase1), sin(phase1));
						cq[iw][ik] = cmul(cq[iw][ik],cshift1);
						cq1[iw][ik] = cmul(cq1[iw][ik],cshift1);
					} else {
						cq[iw][ik] = cq1[iw][ik] = cmplx(0.0,0.0);
					}
				}
			}
	
			/* fourier transform */
			pfa2cc(1,1,nk,nw,cq[0]);
			pfa2cc(1,1,nk,nw,cq1[0]);

			for(ix=0;ix<nx;++ix) {
				for(iw=0,w=fw;iw<nw;w+=dw,++iw){
					float a=0.015,g=1.0;
					int I=10;
				
					if(ix<=I)
						g=exp(-a*(I-ix)*(I-ix));
					if(ix>=nx-I)
						g=exp(-a*(-nx+I+ix)*(-nx+I+ix));
				 
					cq[iw][ix] = crmul( cq[iw][ix],1.0/nxfft);
					cq[iw][ix] =ix%2 ? cneg(cq[iw][ix]) : cq[iw][ix];
					kz2=(1.0/v1-1.0/v[iz][ix])*w*dz;
					cshift2=cmplx(cos(kz2),sin(kz2));
					cp[iw][ix]=cmul(cq[iw][ix],cshift2);
		
					cq1[iw][ix] = crmul( cq1[iw][ix],1.0/nxfft);
					cq1[iw][ix] =ix%2 ? cneg(cq1[iw][ix]) : cq1[iw][ix];
					cp1[iw][ix]=cmul(cq1[iw][ix],cshift2);
		 
				}
			}
				
			/* apply fdmig algorithm */
			fdmig( cp, nx, nw,v[iz],fw,dw,dz,dx,dt,v1,dip);
			fdmig( cp1,nx, nw,v[iz],fw,dw,dz,dx,dt,v1,dip);

		}

		free2complex(cp);
		free2complex(cp1);
		free2complex(cq);
		free2complex(cq1);
		free2float(v);

		--nxshot;
	} while	(nxshot);


	/* restore header fields and write output */
	for(ix=0; ix<nxo; ix++) {
		tr.ns = nz;
		tr.d1 = dz;
		tr.d2 = dx;
		tr.offset = 0;
		tr.cdp = tr.tracl = ix;
		memcpy( (void *) tr.data, (const void *) cresult[ix],nz*FSIZE);	
		puttr(&tr);
	}

	return(CWP_Exit());	
}


float *ricker(float Freq,float dt,int *Npoint) 
{
	int i;			/* they are the dummy counter*/
	float Bpar,t,u,*Amp;
	int Np1,N;
	
	if(Freq==0.0)Freq=30.0;
	if(dt==0.0)dt=0.004;
	Bpar=sqrt(6.0)/(PI*Freq);
	N=ceil(1.35*Bpar/dt);
	Np1=N;
	*Npoint=2*N+1;
	 
	Amp=alloc1float(*Npoint);
	
	Amp[Np1]=1.0;
  
	for(i=1;i<=N;i++) {
		t=dt*(float)i;
		u=2.0*sqrt(6.0)*t/Bpar;
		Amp[Np1+i]=Amp[Np1-i]=0.5*(2.0-u*u)*exp(-u*u/4.0);
	}

	return Amp;
}

void fdmig( complex **cp, int nx, int nw, float *v,float fw,float
	dw,float dz,float dx,float dt,float vc,int dip)
{
	int iw,ix;
	float *p,*s1,*s2,w,coefa,coefb,v1,vn,trick=0.1;
	complex cp2,cp3,cpnm1,cpnm2;
	complex a1,a2,b1,b2;
	complex endl,endr;
	complex *data,*d,*a,*b,*c;

	p=alloc1float(nx);
	s1=alloc1float(nx);
	s2=alloc1float(nx);

	data=alloc1complex(nx);
	d=alloc1complex(nx);
	a=alloc1complex(nx);
	b=alloc1complex(nx);
	c=alloc1complex(nx);

	for(ix=0;ix<nx;ix++){
		p[ix]=vc/v[ix];
		p[ix]=(p[ix]*p[ix]+p[ix]+1.0);
	}

	
	if(dip!=65){
		coefa=0.5;coefb=0.25;
	} else {
		coefa=0.4784689;
		coefb=0.37607656;
	}

	v1=v[0];
	vn=v[nx-1];

	for(iw=0,w=fw;iw<nw;iw++,w+=dw){
		if(fabs(w)<=1.0e-10)w=1.0e-10/dt; 

		for(ix=0;ix<nx;ix++){
			s1[ix]=(v[ix]*v[ix])*p[ix]*coefb/(dx*dx*w*w)+trick;
			s2[ix]=-(1-vc/v[ix])*v[ix]*dz*coefa/(w*dx*dx)*0.5;
		}

		for(ix=0;ix<nx;ix++){
			data[ix]=cp[iw][ix];
		}

		cp2=data[1];
		cp3=data[2];
		cpnm1=data[nx-2];
		cpnm2=data[nx-3];
		a1=crmul(cmul(cp2,conjg(cp3)),2.0);
		b1=cadd(cmul(cp2,conjg(cp2)),cmul(cp3,conjg(cp3)));

		if(b1.r==0.0 && b1.i==0.0)
			a1=cwp_cexp(cmplx(0.0,-w*dx*0.5/v1));
		else
			a1=cdiv(a1,b1);

		if(a1.i>0.0)
			a1=cwp_cexp(cmplx(0.0,-w*dx*0.5/v1));

		a2=crmul(cmul(cpnm1,conjg(cpnm2)),2.0);
		b2=cadd(cmul(cpnm1,conjg(cpnm1)),cmul(cpnm2,conjg(cpnm2)));

		if(b2.r==0.0 && b2.i==0.0)
			a2=cwp_cexp(cmplx(0.0,-w*dx*0.5/vn));
		else
			a2=cdiv(a2,b2);

		if(a2.i>0.0)
			a2=cwp_cexp(cmplx(0.0,-w*dx*0.5/vn));

		for(ix=0;ix<nx;ix++){
			a[ix]=cmplx(s1[ix],s2[ix]);
			b[ix]=cmplx(1.0-2.0*s1[ix],-2.0*s2[ix]);
		}

		for(ix=1;ix<nx-1;ix++){

			d[ix]=cadd(cadd(cmul(data[ix+1],a[ix+1]),
					cmul(data[ix-1],a[ix-1])),
					cmul(data[ix],b[ix]));
		}

		d[0]=cadd(cmul(cadd(b[0],cmul(a[0],a1)),
				data[0]),cmul(data[1],a[1]));

		d[nx-1]=cadd(cmul(cadd(b[nx-1],
			cmul(a[nx-1],a2)),data[nx-1]),
			cmul(data[nx-2],a[nx-2]));

		for(ix=0;ix<nx;ix++){
			data[ix]=cmplx(s1[ix],-s2[ix]);
			b[ix]=cmplx(1.0-2.0*s1[ix],2.0*s2[ix]);
		}
		endl=cadd(b[0],cmul(data[0],a1));
		endr=cadd(b[nx-1],cmul(data[nx-1],a2));

		
		for(ix=1;ix<nx-1;ix++){
			a[ix]=data[ix+1];
			c[ix]=data[ix-1];
		}
		a[0]=data[1];
		c[nx-1]=data[nx-2];
			
		retris(data,a,c,b,endl,endr,nx,d);

		for(ix=0;ix<nx;ix++){
			cp[iw][ix]=data[ix];
		}

	}


	free1complex(data);
	free1float(p);
	free1complex(d);
	free1complex(b);
	free1complex(c);
	free1complex(a);
	free1float(s1);
	free1float(s2);
		
	return;
}
		 

void retris(complex *data,complex *a,complex *c, complex *b,
		complex endl,complex endr, int nx, complex *d)
{
		 
	int ix;
	complex *e,den;
	complex *f;

	e=alloc1complex(nx);
	f=alloc1complex(nx);
	e[0]=cdiv(cneg(a[0]),endl);
	f[0]=cdiv(d[0],endl);

	for(ix=1;ix<nx-1;++ix){
		den=cadd(b[ix],cmul(c[ix],e[ix-1]));
		e[ix]=cdiv(cneg(a[ix]),den);
		f[ix]=cdiv(csub(d[ix],cmul(f[ix-1],c[ix])),den);
	}
		 

	data[nx-1]=cdiv(csub(d[nx-1],cmul(f[nx-2],c[nx-2])),
			cadd(endr,cmul(c[nx-2],e[nx-2])));
		
	for(ix=nx-2;ix>-1;--ix)
	data[ix]=cadd(cmul(data[ix+1],e[ix]),f[ix]);

	free1complex(e);
	free1complex(f);
	return;  
}

void get_sx_gx(float *sx, float *gx)
{ 
/*****************************************************************************
get_sx_gx - get sx and gx from headrs
*****************************************************************************/

	float sy;		/* source coordinates */
	float gy;		/* geophone coordinates */

	if (tr.scalco) { /* if tr.scalco is set, apply value */
		if (tr.scalco>0) {
			*sx = (float) tr.sx*tr.scalco;
			*gx = (float) tr.gx*tr.scalco;
			sy = (float) tr.sy*tr.scalco;
			gy = (float) tr.gy*tr.scalco;
		} else { /* if tr.scalco is negative divide */
			*sx = (float) tr.sx/ABS(tr.scalco);
			*gx = (float) tr.gx/ABS(tr.scalco);
			sy = (float) tr.sy/ABS(tr.scalco);
			gy = (float) tr.gy/ABS(tr.scalco);
			}

		} else {
				*sx = (float) tr.sx;
				*gx = (float) tr.gx;
				sy = (float) tr.sy;
				gy = (float) tr.gy;
	}

	
	/* use pythagorean theorem to remap radial direction */
	/* to x-direction */
	*sx = SGN(*sx-sy)*sqrt((*sx)*(*sx) + sy*sy);
	*gx = SGN(*gx-gy)*sqrt((*gx)*(*gx) + gy*gy);

	return;
}

@


1.17
log
@added Reg Beardsley checkpar()
@
text
@d4 1
a4 1
/* SUMIGPREFFD: $Vision: 1.00 $ ; $Date: 2010/02/03 23:15:40 $	*/
d613 1
a613 1
			a1=cexp(cmplx(0.0,-w*dx*0.5/v1));
d618 1
a618 1
			a1=cexp(cmplx(0.0,-w*dx*0.5/v1));
d624 1
a624 1
			a2=cexp(cmplx(0.0,-w*dx*0.5/vn));
d629 1
a629 1
			a2=cexp(cmplx(0.0,-w*dx*0.5/vn));
@


1.16
log
@copyright
@
text
@d213 2
@


1.15
log
@Hermann Jaramillo's fixes
@
text
@d1 4
a4 1
/* SUMIGPREFFD: $Vision: 1.00 $ ; $Date: 2008/10/30 21:42:34 $	*/
@


1.14
log
@implementd Xiaolin Lu's fixes
which include explicit casts and a slight change in the order
which sx and gx values are read.
@
text
@d1 1
a1 1
/* SUMIGPREFFD: $Vision: 1.00 $ ; $Date: 2006/12/13 16:55:11 $	*/
d327 2
a328 2
		ix2=oldgxmin/dx;
		ix3=oldgxmax/dx;
@


1.13
log
@added comments regarding v(x,z) versus v(z,x) arrays
@
text
@d1 1
a1 1
/* SUMIGPREFFD: $Vision: 1.00 $ ; $Date: 2006/11/07 22:58:42 $	*/
d280 1
d282 5
a291 1
			memcpy( (void *) p[igx], (const void *) tr.data,nt*FSIZE);
a298 4
			/* get sx and gx */
			get_sx_gx(&sx,&gx);
			sx = (sx - min_sx_gx);
			gx = (gx - min_sx_gx);
d724 4
a727 4
			*sx = tr.sx*tr.scalco;
			*gx = tr.gx*tr.scalco;
			sy = tr.sy*tr.scalco;
			gy = tr.gy*tr.scalco;
d729 4
a732 4
			*sx = tr.sx/ABS(tr.scalco);
			*gx = tr.gx/ABS(tr.scalco);
				sy = tr.sy/ABS(tr.scalco);
				gy = tr.gy/ABS(tr.scalco);
d736 4
a739 4
				*sx = tr.sx;
				*gx = tr.gx;
				sy = tr.sy;
				gy = tr.gy;
@


1.12
log
@changed    memset( .., (int) '\0',...) to memset( .., 0,..) as per suggestion of Marion Zhu and Reg Beardsley
@
text
@d1 1
a1 1
/* SUMIGPREFFD: $Vision: 1.00 $ ; $Date: 2006/10/31 22:01:49 $	*/
d46 3
@


1.11
log
@goto loops removed, IO improved to take into account nonzero sy and or
nonzero gy.
@
text
@d1 1
a1 1
/* SUMIGPREFFD: $Vision: 1.00 $ ; $Date: 2006/10/17 18:59:13 $	*/
d176 1
a176 1
	memset((void *) cresult[0], (int) '0', nxo*nz*FSIZE);
d241 1
a241 1
		memset((void *) wl, (int) '0', ntfft*FSIZE);
d265 1
a265 1
		memset((void *) p[0], (int) '0', ntfft*nxo*FSIZE);
@


1.10
log
@MUST...
@
text
@d1 1
a1 1
/* SUMIGPREFFD: $Vision: 1.00 $ ; $Date: 2006/09/28 22:01:02 $	*/
d105 2
a276 2
			memcpy( (void *) p[igx], (const void *) tr.data,nt*FSIZE);

d279 5
d306 3
@


1.9
log
@replaced goto--loop with do { }while and made code honor sx,gx,scalco header fields
@
text
@d1 1
a1 1
/* SUMIGPREFFD: $Vision: 1.00 $ ; $Date: 2005/12/22 00:54:17 $	*/
a6 1
/* #include <time.h> */
a108 1
	int flag=1;		/* feet or meters			*/
d143 7
a150 7
	if (!getparint("nz",&nz)) err("nz must be specified");
	if (!getparfloat("dz",&dz)) err("dz must be specified");
	if (!getparstring("vfile", &vfile)) err("vfile must be specified");

	if (!getparint("nxo",&nxo)) err("nxo must be specified");
	if (!getparint("nxshot",&nxshot)) err("nshot must be specified");

a158 1
	if (!getparint("flag",&flag)) flag=1;
a391 5
		/* if the horizontal spacing interval is in feet, */
		/* convert it to meter */
		if(!flag)
			dx*=0.3048;

@


1.8
log
@Chris Stolk's modifications
@
text
@d1 1
a1 1
/* SUMIGPREFFD: $Vision: 1.00 $ ; $Date: 2003/08/19 17:31:42 $	*/
d13 1
a13 1
"			 migration.					",
d27 1
a27 1
" f1=5,f2=10,f3=40,f4=50	 frequencies to build a Hamming window	",
d29 4
a32 2
" sides of depth section to determine the migration aperature, the default", 
" values are using the full aperature.				   	",
d48 7
d60 7
d75 1
a75 2
float * ricker(float Freq,float dt,int *Npoint);

a77 1

d80 1
d84 2
a85 5

/* static time_t t1,t2; */

int main (int argc, char **argv)

d87 24
a110 14
	int nt;			/* number of time samples */
	int nz;			/* number of migrated depth samples */
	int nx,nxshot,oldsx;	/* number of midpoints 	*/
	int iz,iw,ix,it,ik;	/* loop counters 	*/
	int ntfft,nxfft;	/* fft size		*/
	int nw,truenw,nk;	/* number of wave number, frequency */	
	int dip=45;

	/*prestack goes here*/
	float sx,gxmin,gxmax;
	int isx,nxo,ifx=0;	
	int ix1,ix2,ix3,ixshot;
	int lpad,rpad;
	int flag=1;
d112 1
a112 1
	float *wl,*wtmp;
d118 1
a118 1
	float dt=0.004,dz;	/* time sampling interval 	*/
d120 6
a125 5
	float fw,fk;		/* first wave number and frequency*/
	float w,k;		/* wave number and frequency*/
	float dx;		/* spatial sampling interval	*/
	float **p,**cresult;	/* input, output data	*/
	float v1,vmin;
d128 2
a129 1
	float **v,**vp;
d131 9
a139 3
	complex *wlsp,**cp,**cp1,**cq,**cq1;	/*complex input,output*/
	char *vfile="";		/* name of file containing velocities */
	FILE *vfp;
d149 1
d152 1
d158 1
d164 4
d171 1
a171 1
	/*load velicoty file*/
d176 2
a177 3
	for(ix=0;ix<nxo;ix++)
	for(iz=0;iz<nz;iz++)
	cresult[ix][iz]=0.0;
d179 2
a182 3
loop:
/*	time(&t1); */

d185 4
d208 1
a208 4
	sx=tr.sx;
	isx=sx/dx;
	gxmin=gxmax=tr.gx;
	oldsx=sx;
d210 8
a217 8
	/* determine frequency sampling interval*/
	ntfft = npfar(nt);
	nw = ntfft/2+1;
	dw = 2.0*PI/(ntfft*dt);

	/*compute the index of the frequency to be migrated*/
	fw=2.0*PI*f1;
	nf1=fw/dw+0.5;
d219 2
a220 2
	fw=2.0*PI*f2;
	nf2=fw/dw+0.5;
d222 2
a223 2
	fw=2.0*PI*f3;
	nf3=fw/dw+0.5;
d225 2
a226 2
	fw=2.0*PI*f4;
	nf4=fw/dw+0.5;  
d228 49
a276 4
	/*the number of frequency to migrated*/
	truenw=nf4-nf1+1;
	fw=0.0+nf1*dw;
	warn("nf1=%d nf2=%d nf3=%d nf4=%d nw=%d",nf1,nf2,nf3,nf4,truenw);
d278 1
a278 3
	/* allocate space */
	wl=alloc1float(ntfft);
	wlsp=alloc1complex(nw);
d280 2
a281 2
	/*generate the Ricker wavelet*/
	wtmp=ricker(fmax,dt,&ntw);
d283 2
a284 22
	for(it=0;it<ntfft;it++)
	wl[it]=0.0;  
	
	/* CHANGE BY CHRIS STOLK, Dec. 11, 2005 */
	/* The next two lines are the old code, it is erroneous because the 
	   peak of the wavelet occurs at positive time instead of time zero. */
	/*
	for(it=0;it<ntw;it++)
	  wl[it]=wtmp[it];
	*/
	/* New code: we put in the wavelet in a centered fashion */ 
	for(it=0;it<ntw;it++) 
	  wl[(it-ntw/2+ntfft) % ntfft]=wtmp[it];
	/* End of new code */
	free1float( wtmp);

	pfarc(-1,ntfft,wl,wlsp);

	/* allocate space */
	p = alloc2float(ntfft,nxo);
	cq = alloc2complex(nw,nxo);
	
d286 2
a287 3
	for (ix=0; ix<nxo; ix++)
		for (it=0; it<ntfft; it++)
			p[ix][it] = 0.0;
d289 85
a373 29

        /*read in a single shot gather*/
        if (tr.gx < 0 ) {
                ix=tr.gx/dx + nxo;
        } else {
                ix=tr.gx/dx ;
        }


	memcpy( (void *) p[ix], (const void *) tr.data,nt*FSIZE);

	nx = 0;

	while(gettr(&tr)){
			int igx=0;

			if(tr.sx!=oldsx){ efseeko(stdin,(off_t)(-240-nt*4),SEEK_CUR); break;}
        		if (tr.gx < 0 ) {
                		igx=tr.gx/dx + nxo;
        		} else {
                		igx=tr.gx/dx ;
        		}

			memcpy( (void *) p[igx], (const void *) tr.data,nt*FSIZE);

			if(gxmin>tr.gx)gxmin=tr.gx;
			if(gxmax<tr.gx)gxmax=tr.gx;
			nx++;
			oldsx=tr.sx;
d376 4
a379 32
	warn("sx %f , gxmin %f  gxmax %f",sx,gxmin,gxmax);

	/*transform the shot gather from time to frequency domain*/
	pfa2rc(1,1,ntfft,nxo,p[0],cq[0]);


	/*compute the most left and right index for the migrated section*/
	ix1=sx/dx;
	ix2=gxmin/dx;
	ix3=gxmax/dx;

	if(ix1>=ix3)ix3=ix1;
	if(ix1<=ix2)ix2=ix1;

	ix2-=lpad;
	ix3+=rpad;
	if(ix2<0)ix2=0;
	if(ix3>nxo-1)ix3=nxo-1;

	/*the total traces to be migrated*/
	nx=ix3-ix2+1;
	nw=truenw;

	/* determine wavenumber sampling (for complex to complex FFT) */
	nxfft = npfa(nx);
	nk = nxfft;
	dk = 2.0*PI/(nxfft*dx);
	fk = -PI/dx;


	/*allocate space for velocity profile within the aperature*/
	v=alloc2float(nx,nz);   
d381 4
a384 38
	for(iz=0;iz<nz;iz++)
	for(ix=0;ix<nx;ix++){
	v[iz][ix]=vp[iz][ix+ix2];
	}


	/*allocate space*/
	cp = alloc2complex(nx,nw);
	cp1 = alloc2complex(nx,nw);

	/*transpose the frequency domain data from data[ix][iw] to data[iw][ix] and
	apply a Hamming at the same time*/

	for (ix=0; ix<nx; ix++)
	for (iw=0; iw<nw; iw++){

	float tmpp=0.0,tmppp=0.0;

	if(iw>=(nf1-nf1)&&iw<=(nf2-nf1)){
	tmpp=PI/(nf2-nf1);tmppp=tmpp*(iw-nf1)-PI;tmpp=0.54+0.46*cos(tmppp);
	cp[iw][ix]=crmul(cq[ix+ix2][iw+nf1],tmpp);}
	else{
	if(iw>=(nf3-nf1)&&iw<=(nf4-nf1)){
	tmpp=PI/(nf4-nf3);tmppp=tmpp*(iw-nf3);tmpp=0.54+0.46*cos(tmppp);
	cp[iw][ix]=crmul(cq[ix+ix2][iw+nf1],tmpp);}
	else{
	cp[iw][ix]=cq[ix+ix2][iw+nf1];}
	}
	cp1[iw][ix]=cmplx(0.0,0.0);
	}

	ix=sx/dx-ifx;
	ixshot=ix;
	warn("ix %d",ix);

	for(iw=0;iw<nw;iw++){
	cp1[iw][ix-ix2]=wlsp[iw+nf1];
	}
d387 21
a407 21
	free2float(p);
	free2complex(cq);
	free1float(wl);
	free1complex(wlsp);

	cq=alloc2complex(nxfft,nw);
	cq1=alloc2complex(nxfft,nw);

	/*if the horizontal spacing interval is in feet, convert it to meter*/
	if(!flag)
	dx*=0.3048;


	/* loops over depth */
	for(iz=0;iz<nz;++iz){

	/*the imaging condition*/
	for(ix=0;ix<nx;ix++){
	for(iw=0,w=fw;iw<nw;w+=dw,iw++){   
		complex tmp;
		float ratio=10.0;
d409 4
a412 6
		if(fabs(ix+ix2-ixshot)*dx<ratio*iz*dz)
		tmp=cmul(cp[iw][ix],cp1[iw][ix]);
		else tmp=cmplx(0.0,0.0);  
		cresult[ix+ix2][iz]+=tmp.r/ntfft;
	}
	}
d414 3
a416 17
/* anothe imaging condition, slightly different from the above one, but quite
slow*/
	
/*
	for(iw=0,w=fw;iw<nw;w+=dw,iw++){
		float kk=0.0;
		complex tmp;
		float ratio=1.5; 
		if(dip<80)ratio=1.5;
		else ratio=1.5;
	
		for(ix=0;ix<nx;ix++){	
		kk+=(pow(cp1[iw][ix].i,2.0)+pow(cp1[iw][ix].r,2.0))/nx;
		}
	 
		for(ix=0;ix<nx;ix++){
		tmp=cmul(cp[iw][ix],cp1[iw][ix]);
a417 5
		if(fabs(ix-ixshot)*dx<ratio*iz*dz||ixshot-ix<0 )

		tmp=crmul(tmp,1.0/(kk+1.0e-10));
  
		else tmp=cmplx(0.0,0.0);
d419 5
a423 5
		cresult[ix+ix2][iz]+=tmp.r/ntfft;
	
		}
		}
*/	
d425 7
a431 1
		vmin=v[iz][0];
a432 10
		for(ix=0;ix<nx;ix++){
		if(v[iz][ix]<vmin)vmin=v[iz][ix];
		}
		
		for (ik=0;ik<nx;++ik)
			for (iw=0; iw<nw; ++iw)
				{
				cq[iw][ik] = ik%2 ? cneg(cp[iw][ik]) : cp[iw][ik];
				cq1[iw][ik] = ik%2 ? cneg(cp1[iw][ik]) : cp1[iw][ik];
			}
d434 6
a439 5
		for (ik=nx; ik<nk; ++ik)
			for (iw=0; iw<nw; ++iw)
			{
			cq[iw][ik] = cmplx(0.0,0.0);
			cq1[iw][ik] = cmplx(0.0,0.0);
d441 20
a460 19
		/* FFT to W-K domain */
		
		pfa2cc(-1,1,nk,nw,cq[0]);
		pfa2cc(-1,1,nk,nw,cq1[0]);
	
		v1=vmin;

		for(ik=0,k=fk;ik<nk;++ik,k+=dk)
			for(iw=0,w=fw;iw<nw;++iw,w+=dw){
				if(w==0.0)w=1.0e-10/dt; 
				kz1=1.0-pow(v1*k/w,2.0);
				if(kz1>0.15){
				phase1 = -w*sqrt(kz1)*dz/v1;
				cshift1 = cmplx(cos(phase1), sin(phase1));
				cq[iw][ik] = cmul(cq[iw][ik],cshift1);
				cq1[iw][ik] = cmul(cq1[iw][ik],cshift1);
				}
				else{
				cq[iw][ik] = cq1[iw][ik] = cmplx(0.0,0.0);
d464 8
a471 8
		pfa2cc(1,1,nk,nw,cq[0]);
		pfa2cc(1,1,nk,nw,cq1[0]);

		for(ix=0;ix<nx;++ix)
			for(iw=0,w=fw;iw<nw;w+=dw,++iw){
		 
		float a=0.015,g=1.0;
		int I=10;
d473 4
a476 2
		if(ix<=I)g=exp(-a*(I-ix)*(I-ix));
		if(ix>=nx-I)g=exp(-a*(-nx+I+ix)*(-nx+I+ix));
d478 5
a482 6
				
				cq[iw][ix] = crmul( cq[iw][ix],1.0/nxfft);
				cq[iw][ix] =ix%2 ? cneg(cq[iw][ix]) : cq[iw][ix];
				kz2=(1.0/v1-1.0/v[iz][ix])*w*dz;
				cshift2=cmplx(cos(kz2),sin(kz2));
				cp[iw][ix]=cmul(cq[iw][ix],cshift2);
d484 3
a486 3
				cq1[iw][ix] = crmul( cq1[iw][ix],1.0/nxfft);
				cq1[iw][ix] =ix%2 ? cneg(cq1[iw][ix]) : cq1[iw][ix];
				cp1[iw][ix]=cmul(cq1[iw][ix],cshift2);
d488 1
a489 1
		
d491 3
a493 3
		fdmig( cp, nx, nw,v[iz],fw,dw,dz,dx,dt,v1,dip);
		fdmig( cp1,nx, nw,v[iz],fw,dw,dz,dx,dt,v1,dip);
				 
d495 1
a495 1
}
d497 5
a501 11
free2complex(cp);
free2complex(cp1);
free2complex(cq);
free2complex(cq1);
free2float(v);

nxshot--;
/*
time(&t2);
warn("\n %d nxshot has been finished in %f seconds",nxshot,difftime(t2,t1));
*/
d503 2
a504 1
if(nxshot)goto loop;
d508 3
a510 3
	for(ix=0; ix<nxo; ix++){
		tr.ns = nz ;
		tr.dt = dz*1000000.0 ;
d512 1
a512 1
		tr.offset = 0; 
d514 1
a514 1
		memcpy( (void *) tr.data, (const void *) cresult[ix],nz*FSIZE);
a516 1
	
a518 1

d522 1
a522 2

float * ricker(float Freq,float dt,int *Npoint)
d524 10
a533 10
int i;	/* they are the dummy counter*/
float Bpar,t,u,*Amp;
int Np1,N;
	
if(Freq==0.0)Freq=30.0;
if(dt==0.0)dt=0.004;
Bpar=sqrt(6.0)/(PI*Freq);
N=ceil(1.35*Bpar/dt);
Np1=N;
*Npoint=2*N+1;
d535 1
a535 1
Amp=alloc1float(*Npoint);
d537 1
a537 1
Amp[Np1]=1.0;
d539 5
a543 8
for(i=1;i<=N;i++)
{
t=dt*(float)i;
u=2.0*sqrt(6.0)*t/Bpar;
Amp[Np1+i]=Amp[Np1-i]=0.5*(2.0-u*u)*exp(-u*u/4.0);
}

return Amp;
d545 1
d569 2
a570 2
	p[ix]=vc/v[ix];
	p[ix]=(p[ix]*p[ix]+p[ix]+1.0);
a572 1
/*	if(dip==65){coefa=0.478242060;coefb=0.376369527;}  */
d574 6
a579 5
	if(dip!=65){coefa=0.5;coefb=0.25;}
	else{coefa=0.4784689;coefb=0.37607656;}


	v1=v[0];vn=v[nx-1];
d581 2
a584 1

d608 2
a609 1
		if(a1.i>0.0)a1=cexp(cmplx(0.0,-w*dx*0.5/v1));
d619 2
a620 2
		if(a2.i>0.0)a2=cexp(cmplx(0.0,-w*dx*0.5/vn));

d629 3
a631 2
		d[ix]=cadd(cadd(cmul(data[ix+1],a[ix+1]),cmul(data[ix-1],a[ix-1])),
		cmul(data[ix],b[ix]));
d634 2
a635 1
		d[0]=cadd(cmul(cadd(b[0],cmul(a[0],a1)),data[0]),cmul(data[1],a[1]));
d637 3
a639 2
		d[nx-1]=cadd(cmul(cadd(b[nx-1],cmul(a[nx-1],a2)),data[nx-1]),
		cmul(data[nx-2],a[nx-2]));
d698 2
a699 1
	data[nx-1]=cdiv(csub(d[nx-1],cmul(f[nx-2],c[nx-2])),cadd(endr,cmul(c[nx-2],e[nx-2])));
d708 38
a745 1
	 
@


1.7
log
@fixed error in ix and igx calculation
@
text
@d207 4
d212 6
a217 1
	wl[it]=wtmp[it];
@


1.6
log
@y.
@
text
@d1 1
a1 1
/* SUMIGPREFFD: $Vision: 1.00 $ ; $Date: 2003/06/09 16:17:07 $	*/
d223 8
a230 2
	/*read in a single shot gather*/
	ix=tr.gx/dx;
d236 1
a236 1
			int igx;
d239 6
a244 1
			igx=tr.gx/dx;
@


1.5
log
@9 June 2003
@
text
@d1 1
a1 1
/* SUMIGPREFFD: $Vision: 1.00 $ ; $Date: 2000/09/25 20:38:38 $	*/
d26 1
a26 1
" Fmax=25	the peak frequency of Ricker wavelet used as source wavelet",
d91 1
a91 1
	float Fmax=25;
d121 1
a121 1
	if (!getparfloat("Fmax",&Fmax)) err("Fmax must be specified");  
d202 1
a202 1
	wtmp=ricker(Fmax,dt,&ntw);
@


1.4
log
@updated selfdoc to read a bit clearer
@
text
@d1 1
a1 1
/* SUMIGPREFFD: $Vision: 1.00 $ ; $Date: 2000/09/22 19:33:19 $	*/
d232 1
a232 1
			if(tr.sx!=oldsx){ fseek(stdin,(long)(-240-nt*4),SEEK_CUR); break;}
d474 1
a474 1
	return EXIT_SUCCESS;	
@


1.3
log
@removed timing stuff
@
text
@d1 1
a1 1
/* SUMIGPREFFD: $Vision: 1.00 $ ; $Date: 1998/05/04 18:16:33 $       */
d11 35
a45 30
"                                                                       ",
"SUMIGPREFFD --- The 2-D prestack common-shot Fourier		   	",
"                     finite-difference migration.       		",
"Usage:                                                                 ",
"sumigpreffd <indata >outfile [parameters]	                        ", 
"                                                                       ",
"Required Parameters:                                                   ",  
"                                                                       ",
"nxo=           number of total horizontal output samples               ",
"nxshot=        number of shot gathers to be migrated                   ",
"nz=            number of depth sapmles                                 ",
"dx=            horizontal sampling interval                            ",   
"dz=            depth sampling interval                                 ",
"vfile=         velocity profile, it must be binary format.             ",
"The structure of such a file is vfile[iz][ix], the x-direction is the  ",   
"fastest direction instead of z-direction, such a structure is quite    ",
"convenient for the downward continuation type migration algorithm.     ",
"Since most of the velocity file is in vfile[ix][iz] structure, you can ",
"use 'transp' in SU to transpose them into vfile[iz][ix] structure.     ",
"                                                                       ",  
"Optional Parameters:                                                   ",
"                                                                       ",
"                                                                       ",
"Fmax=25      the peak frequency of Ricker wavelet used as source wavelet",
"                                                                       ",
"f1=5,f2=10,f3=40,f4=50         frequencies to build a Hamming window   ",
"                                                                       ",
"lpad=9999,rpad=9999            number of zero traces padded on both    ",
"sides of depth section to determine the migration aperature, the default", 
"values are using the full aperature.                                   ",
d62 1
a62 1
                endl,complex endr, int nx, complex *d);
d65 1
a65 1
                dw,float dz,float dx,float dt,float vc,int dip);
d91 1
a91 1
        float Fmax=25;
d115 15
a129 15
        /* get optional parameters */
        if (!getparint("nz",&nz)) err("nz must be specified");
        if (!getparfloat("dz",&dz)) err("dz must be specified");
        if (!getparstring("vfile", &vfile)) err("vfile must be specified");
        if (!getparint("nxo",&nxo)) err("nxo must be specified");
        if (!getparint("nxshot",&nxshot)) err("nshot must be specified");
        if (!getparfloat("Fmax",&Fmax)) err("Fmax must be specified");  
        if (!getparfloat("f1",&f1)) f1 = 10.0;
        if (!getparfloat("f2",&f2)) f2 = 20.0;
        if (!getparfloat("f3",&f3)) f3 = 40.0;
        if (!getparfloat("f4",&f4)) f4 = 50.0;
        if (!getparint("lpad",&lpad)) lpad=9999;
        if (!getparint("rpad",&rpad)) rpad=9999;
        if (!getparint("flag",&flag)) flag=1;
        if (!getparint("dip",&dip)) dip=45;
d174 52
a225 52
        /* determine frequency sampling interval*/
        ntfft = npfar(nt);
        nw = ntfft/2+1;
        dw = 2.0*PI/(ntfft*dt);

        /*compute the index of the frequency to be migrated*/
        fw=2.0*PI*f1;
        nf1=fw/dw+0.5;
                 
        fw=2.0*PI*f2;
        nf2=fw/dw+0.5;

        fw=2.0*PI*f3;
        nf3=fw/dw+0.5;

        fw=2.0*PI*f4;
        nf4=fw/dw+0.5;  

        /*the number of frequency to migrated*/
        truenw=nf4-nf1+1;
        fw=0.0+nf1*dw;
        warn("nf1=%d nf2=%d nf3=%d nf4=%d nw=%d",nf1,nf2,nf3,nf4,truenw);

        /* allocate space */
        wl=alloc1float(ntfft);
        wlsp=alloc1complex(nw);

        /*generate the Ricker wavelet*/
        wtmp=ricker(Fmax,dt,&ntw);

        for(it=0;it<ntfft;it++)
        wl[it]=0.0;  
        
        for(it=0;it<ntw;it++)
        wl[it]=wtmp[it];
        free1float( wtmp);

        pfarc(-1,ntfft,wl,wlsp);

        /* allocate space */
        p = alloc2float(ntfft,nxo);
        cq = alloc2complex(nw,nxo);
	

        for (ix=0; ix<nxo; ix++)
                for (it=0; it<ntfft; it++)
                        p[ix][it] = 0.0;


        /*read in a single shot gather*/
        ix=tr.gx/dx;
        memcpy( (void *) p[ix], (const void *) tr.data,nt*FSIZE);
d229 2
a230 2
        while(gettr(&tr)){
                        int igx;
d232 3
a234 3
                        if(tr.sx!=oldsx){ fseek(stdin,(long)(-240-nt*4),SEEK_CUR); break;}
                        igx=tr.gx/dx;
                        memcpy( (void *) p[igx], (const void *) tr.data,nt*FSIZE);
d236 5
a240 5
                        if(gxmin>tr.gx)gxmin=tr.gx;
                        if(gxmax<tr.gx)gxmax=tr.gx;
                        nx++;
                        oldsx=tr.sx;
                        }
d242 1
a242 1
        warn("sx %f , gxmin %f  gxmax %f",sx,gxmin,gxmax);
d244 2
a245 2
        /*transform the shot gather from time to frequency domain*/
        pfa2rc(1,1,ntfft,nxo,p[0],cq[0]);
d248 4
a251 4
        /*compute the most left and right index for the migrated section*/
        ix1=sx/dx;
        ix2=gxmin/dx;
        ix3=gxmax/dx;
d253 2
a254 2
        if(ix1>=ix3)ix3=ix1;
        if(ix1<=ix2)ix2=ix1;
d256 4
a259 4
        ix2-=lpad;
        ix3+=rpad;
        if(ix2<0)ix2=0;
        if(ix3>nxo-1)ix3=nxo-1;
d261 2
a262 2
        /*the total traces to be migrated*/
        nx=ix3-ix2+1;
d265 5
a269 5
       /* determine wavenumber sampling (for complex to complex FFT) */
        nxfft = npfa(nx);
        nk = nxfft;
        dk = 2.0*PI/(nxfft*dx);
        fk = -PI/dx;
d272 7
a278 7
        /*allocate space for velocity profile within the aperature*/
        v=alloc2float(nx,nz);   
        
        for(iz=0;iz<nz;iz++)
        for(ix=0;ix<nx;ix++){
        v[iz][ix]=vp[iz][ix+ix2];
        }
d281 3
a283 3
        /*allocate space*/
        cp = alloc2complex(nx,nw);
        cp1 = alloc2complex(nx,nw);
d285 2
a286 2
        /*transpose the frequency domain data from data[ix][iw] to data[iw][ix] and
        apply a Hamming at the same time*/
d288 2
a289 2
        for (ix=0; ix<nx; ix++)
        for (iw=0; iw<nw; iw++){
d291 1
a291 1
        float tmpp=0.0,tmppp=0.0;
d295 2
a296 2
        cp[iw][ix]=crmul(cq[ix+ix2][iw+nf1],tmpp);}
        else{
d299 2
a300 2
        cp[iw][ix]=crmul(cq[ix+ix2][iw+nf1],tmpp);}
        else{
d302 1
a302 1
        }
d306 1
a306 1
        ix=sx/dx-ifx;
d308 5
a312 1
        warn("ix %d",ix);
d314 5
a318 9
        for(iw=0;iw<nw;iw++){
        cp1[iw][ix-ix2]=wlsp[iw+nf1];
        }

                        
        free2float(p);
        free2complex(cq);
        free1float(wl);
        free1complex(wlsp);
d323 3
a325 3
        /*if the horizontal spacing interval is in feet, convert it to meter*/
        if(!flag)
        dx*=0.3048;
d331 12
a342 12
        /*the imaging condition*/
        for(ix=0;ix<nx;ix++){
        for(iw=0,w=fw;iw<nw;w+=dw,iw++){   
                complex tmp;
                float ratio=10.0;
                
                if(fabs(ix+ix2-ixshot)*dx<ratio*iz*dz)
                tmp=cmul(cp[iw][ix],cp1[iw][ix]);
                else tmp=cmplx(0.0,0.0);  
                cresult[ix+ix2][iz]+=tmp.r/ntfft;
        }
        }
d346 1
a346 1
        
d348 13
a360 13
        for(iw=0,w=fw;iw<nw;w+=dw,iw++){
                float kk=0.0;
                complex tmp;
                float ratio=1.5; 
                if(dip<80)ratio=1.5;
                else ratio=1.5;
        
                for(ix=0;ix<nx;ix++){     
                kk+=(pow(cp1[iw][ix].i,2.0)+pow(cp1[iw][ix].r,2.0))/nx;
                }
         
                for(ix=0;ix<nx;ix++){
                tmp=cmul(cp[iw][ix],cp1[iw][ix]);
d362 1
a362 1
                if(fabs(ix-ixshot)*dx<ratio*iz*dz||ixshot-ix<0 )
d364 1
a364 1
                tmp=crmul(tmp,1.0/(kk+1.0e-10));
d366 78
a443 78
                else tmp=cmplx(0.0,0.0);
                
                cresult[ix+ix2][iz]+=tmp.r/ntfft;
        
                }
                }
*/      
                
                vmin=v[iz][0];

                for(ix=0;ix<nx;ix++){
                if(v[iz][ix]<vmin)vmin=v[iz][ix];
                }
                
                for (ik=0;ik<nx;++ik)
                        for (iw=0; iw<nw; ++iw)
                               {
                                cq[iw][ik] = ik%2 ? cneg(cp[iw][ik]) : cp[iw][ik];
                                cq1[iw][ik] = ik%2 ? cneg(cp1[iw][ik]) : cp1[iw][ik];
                        }
                 
                for (ik=nx; ik<nk; ++ik)
                        for (iw=0; iw<nw; ++iw)
                        {
                        cq[iw][ik] = cmplx(0.0,0.0);
                        cq1[iw][ik] = cmplx(0.0,0.0);
                        }
                /* FFT to W-K domain */
                
                pfa2cc(-1,1,nk,nw,cq[0]);
                pfa2cc(-1,1,nk,nw,cq1[0]);
        
                v1=vmin;

                for(ik=0,k=fk;ik<nk;++ik,k+=dk)
                        for(iw=0,w=fw;iw<nw;++iw,w+=dw){
                                if(w==0.0)w=1.0e-10/dt; 
                                kz1=1.0-pow(v1*k/w,2.0);
                                if(kz1>0.15){
                                phase1 = -w*sqrt(kz1)*dz/v1;
                                cshift1 = cmplx(cos(phase1), sin(phase1));
                                cq[iw][ik] = cmul(cq[iw][ik],cshift1);
                                cq1[iw][ik] = cmul(cq1[iw][ik],cshift1);
                                }
                                else{
                                cq[iw][ik] = cq1[iw][ik] = cmplx(0.0,0.0);
                              }
                        }
        
                pfa2cc(1,1,nk,nw,cq[0]);
                pfa2cc(1,1,nk,nw,cq1[0]);

               for(ix=0;ix<nx;++ix)
                        for(iw=0,w=fw;iw<nw;w+=dw,++iw){
                 
                float a=0.015,g=1.0;
                int I=10;
                                
                if(ix<=I)g=exp(-a*(I-ix)*(I-ix));
                if(ix>=nx-I)g=exp(-a*(-nx+I+ix)*(-nx+I+ix));
                                 
                                
                                cq[iw][ix] = crmul( cq[iw][ix],1.0/nxfft);
                                cq[iw][ix] =ix%2 ? cneg(cq[iw][ix]) : cq[iw][ix];
                                kz2=(1.0/v1-1.0/v[iz][ix])*w*dz;
                                cshift2=cmplx(cos(kz2),sin(kz2));
                                cp[iw][ix]=cmul(cq[iw][ix],cshift2);
                
                                cq1[iw][ix] = crmul( cq1[iw][ix],1.0/nxfft);
                                cq1[iw][ix] =ix%2 ? cneg(cq1[iw][ix]) : cq1[iw][ix];
                                cp1[iw][ix]=cmul(cq1[iw][ix],cshift2);
                 
                        }
                
                                
                fdmig( cp, nx, nw,v[iz],fw,dw,dz,dx,dt,v1,dip);
                fdmig( cp1,nx, nw,v[iz],fw,dw,dz,dx,dt,v1,dip);
                                 
d464 5
a468 5
                tr.ns = nz ;
                tr.dt = dz*1000000.0 ;
                tr.d2 = dx;
                tr.offset = 0; 
                tr.cdp = tr.tracl = ix;
d485 1
a485 1
        
d492 1
a492 1
         
d494 1
a494 1
        
d509 1
a509 1
        dw,float dz,float dx,float dt,float vc,int dip)
d514 3
a516 3
        complex a1,a2,b1,b2;
        complex endl,endr;
        complex *data,*d,*a,*b,*c;
d519 2
a520 2
        s1=alloc1float(nx);
        s2=alloc1float(nx);
d522 10
a531 5
        data=alloc1complex(nx);
        d=alloc1complex(nx);
        a=alloc1complex(nx);
        b=alloc1complex(nx);
        c=alloc1complex(nx);
d533 4
a536 4
        for(ix=0;ix<nx;ix++){
        p[ix]=vc/v[ix];
        p[ix]=(p[ix]*p[ix]+p[ix]+1.0);
        }
a537 4
/*        if(dip==65){coefa=0.478242060;coefb=0.376369527;}  */
        
        if(dip!=65){coefa=0.5;coefb=0.25;}
        else{coefa=0.4784689;coefb=0.37607656;}
d539 1
a540 1
        v1=v[0];vn=v[nx-1];
d542 1
d544 1
a544 1
        for(iw=0,w=fw;iw<nw;iw++,w+=dw){
d546 4
a549 1
                if(fabs(w)<=1.0e-10)w=1.0e-10/dt; 
d551 2
a552 3
                for(ix=0;ix<nx;ix++){
                        s1[ix]=(v[ix]*v[ix])*p[ix]*coefb/(dx*dx*w*w)+trick;
                        s2[ix]=-(1-vc/v[ix])*v[ix]*dz*coefa/(w*dx*dx)*0.5;
d555 29
a583 25
                for(ix=0;ix<nx;ix++){
                        data[ix]=cp[iw][ix];
                }

                cp2=data[1];
                cp3=data[2];
                cpnm1=data[nx-2];
                cpnm2=data[nx-3];
                a1=crmul(cmul(cp2,conjg(cp3)),2.0);
                b1=cadd(cmul(cp2,conjg(cp2)),cmul(cp3,conjg(cp3)));

                if(b1.r==0.0 && b1.i==0.0)
                        a1=cexp(cmplx(0.0,-w*dx*0.5/v1));
                else
                        a1=cdiv(a1,b1);

                if(a1.i>0.0)a1=cexp(cmplx(0.0,-w*dx*0.5/v1));

                a2=crmul(cmul(cpnm1,conjg(cpnm2)),2.0);
                b2=cadd(cmul(cpnm1,conjg(cpnm1)),cmul(cpnm2,conjg(cpnm2)));

                if(b2.r==0.0 && b2.i==0.0)
                        a2=cexp(cmplx(0.0,-w*dx*0.5/vn));
                else
                        a2=cdiv(a2,b2);
d585 1
a585 9
                if(a2.i>0.0)a2=cexp(cmplx(0.0,-w*dx*0.5/vn));


                for(ix=0;ix<nx;ix++){
                        a[ix]=cmplx(s1[ix],s2[ix]);
                        b[ix]=cmplx(1.0-2.0*s1[ix],-2.0*s2[ix]);
                }

                for(ix=1;ix<nx-1;ix++){
d589 1
a589 1
                }
d591 1
a591 1
                d[0]=cadd(cmul(cadd(b[0],cmul(a[0],a1)),data[0]),cmul(data[1],a[1]));
d596 20
a615 20
                for(ix=0;ix<nx;ix++){
                        data[ix]=cmplx(s1[ix],-s2[ix]);
                        b[ix]=cmplx(1.0-2.0*s1[ix],2.0*s2[ix]);
                }
                endl=cadd(b[0],cmul(data[0],a1));
                endr=cadd(b[nx-1],cmul(data[nx-1],a2));

                
                for(ix=1;ix<nx-1;ix++){
                        a[ix]=data[ix+1];
                        c[ix]=data[ix-1];
                }
                a[0]=data[1];
                c[nx-1]=data[nx-2];
                        
                retris(data,a,c,b,endl,endr,nx,d);

                for(ix=0;ix<nx;ix++){
                        cp[iw][ix]=data[ix];
                }
d617 1
a617 1
        }
d620 1
a620 1
        free1complex(data);
d622 8
a629 8
        free1complex(d);
        free1complex(b);
        free1complex(c);
        free1complex(a);
        free1float(s1);
        free1float(s2);
                
        return;
d631 1
a631 1
                 
d634 1
a634 1
                complex endl,complex endr, int nx, complex *d)
d636 16
a651 16
                 
        int ix;
        complex *e,den;
        complex *f;

        e=alloc1complex(nx);
        f=alloc1complex(nx);
        e[0]=cdiv(cneg(a[0]),endl);
        f[0]=cdiv(d[0],endl);

        for(ix=1;ix<nx-1;++ix){
                den=cadd(b[ix],cmul(c[ix],e[ix-1]));
                e[ix]=cdiv(cneg(a[ix]),den);
                f[ix]=cdiv(csub(d[ix],cmul(f[ix-1],c[ix])),den);
        }
                 
d654 7
a660 7
                
        for(ix=nx-2;ix>-1;--ix)
        data[ix]=cadd(cmul(data[ix+1],e[ix]),f[ix]);

        free1complex(e);
        free1complex(f);
        return;  
d662 1
a662 1
         
@


1.2
log
@small changes
@
text
@d1 1
a1 1
/* SUMIGPREFFD: $Vision: 1.00 $ ; $Date: 1998/05/04 18:08:16 $       */
d7 1
a7 1
#include <time.h>
d65 1
a65 1
static time_t t1,t2;
d141 1
a141 1
	time(&t1);
d449 1
a449 1

d452 1
@


1.1
log
@Initial revision
@
text
@d1 1
a1 4
/* Copyright (c) Colorado School of Mines, 1998.*/
/* All rights reserved.                       */

/* SUMIGPREFFD: $Vision: 1.00 $ ; $Date: 1998/04/19 22:00:00 $       */
a8 8
float * ricker(float Freq,float dt,int *Npoint);

void retris(complex *data,complex *a,complex *c,complex *b,complex
                endl,complex endr, int nx, complex *d);

void fdmig( complex **cp, int nx, int nw, float *v,float fw,float
                dw,float dz,float dx,float dt,float vc,int dip);

d52 9
@
