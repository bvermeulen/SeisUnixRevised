head	1.26;
access;
symbols;
locks; strict;
comment	@ * @;


1.26
date	2011.11.16.23.16.23;	author john;	state Exp;
branches;
next	1.25;

1.25
date	2011.11.12.00.38.22;	author john;	state Exp;
branches;
next	1.24;

1.24
date	2010.02.23.19.31.40;	author john;	state Exp;
branches;
next	1.23;

1.23
date	2009.07.22.21.57.13;	author john;	state Exp;
branches;
next	1.22;

1.22
date	2008.06.02.21.02.45;	author john;	state Exp;
branches;
next	1.21;

1.21
date	2003.06.09.16.17.07;	author john;	state Exp;
branches;
next	1.20;

1.20
date	2001.06.22.15.54.09;	author john;	state Exp;
branches;
next	1.19;

1.19
date	2001.06.22.15.26.36;	author john;	state Exp;
branches;
next	1.18;

1.18
date	2000.05.03.19.25.39;	author john;	state Exp;
branches;
next	1.17;

1.17
date	99.12.10.19.06.19;	author john;	state Exp;
branches;
next	1.16;

1.16
date	99.12.09.21.14.39;	author john;	state Exp;
branches;
next	1.15;

1.15
date	98.04.24.21.29.44;	author john;	state Exp;
branches;
next	1.14;

1.14
date	97.05.02.16.22.37;	author john;	state Exp;
branches;
next	1.13;

1.13
date	97.03.07.18.57.34;	author john;	state Exp;
branches;
next	1.12;

1.12
date	96.09.13.21.49.05;	author john;	state Exp;
branches;
next	1.11;

1.11
date	96.05.02.19.54.32;	author jkc;	state Exp;
branches;
next	1.10;

1.10
date	96.05.02.19.52.30;	author jkc;	state Exp;
branches;
next	1.9;

1.9
date	96.02.06.20.21.26;	author jkc;	state Exp;
branches;
next	1.8;

1.8
date	95.08.04.15.31.53;	author jkc;	state Exp;
branches;
next	1.7;

1.7
date	95.06.29.10.26.54;	author john;	state Exp;
branches;
next	1.6;

1.6
date	95.06.29.10.23.50;	author john;	state Exp;
branches;
next	1.5;

1.5
date	94.08.25.15.01.03;	author jkc;	state Exp;
branches;
next	1.4;

1.4
date	93.11.24.16.13.53;	author john;	state Exp;
branches;
next	1.3;

1.3
date	93.05.19.09.31.26;	author john;	state Exp;
branches;
next	1.2;

1.2
date	92.10.22.16.27.10;	author john;	state Exp;
branches;
next	1.1;

1.1
date	92.09.17.13.44.33;	author jkc;	state Exp;
branches;
next	;


desc
@Elevation static corrections.
@


1.26
log
@added Reg Beardsley's checkpar()
@
text
@/* Copyright (c) Colorado School of Mines, 2011.*/
/* All rights reserved.                       */

/* SUSTATIC: $Revision: 1.24 $ ; $Date: 2010/02/23 19:31:40 $	*/

#include "su.h"
#include "segy.h"
#include "header.h"

/*********************** self documentation ******************************/
char *sdoc[] = {
"									",
" SUSTATIC - Elevation static corrections, apply corrections from	",
"	      headers or from a source and receiver statics file	",
"									",
"     sustatic <stdin >stdout  [optional parameters]	 		",
"									",
" Required parameters:							",
"	none								",
" Optional Parameters:							",
"	v0=v1 or user-defined	or from header, weathering velocity	",
"	v1=user-defined		or from header, subweathering velocity	",
"	hdrs=0			=1 to read statics from headers		",
" 				=2 to read statics from files		",
"				=3 to read from output files of suresstat",
"	sign=1			apply static correction (add tstat values)",
"				=-1 apply negative of tstat values	",
" Options when hdrs=2 and hdrs=3:					",
"	sou_file=		input file for source statics (ms) 	",
"	rec_file=		input file for receiver statics (ms) 	",
"	ns=240 			number of souces 			",
"	nr=335 			number of receivers 			",
"	no=96 			number of offsets			",
"									",
" Notes:								",
" For hdrs=1, statics calculation is not performed, statics correction  ",
" is applied to the data by reading statics (in ms) from the header.	",
"									",
" For hdrs=0, field statics are calculated, and				",
" 	input field sut is assumed measured in ms.			",
" 	output field sstat = 10^scalel*(sdel - selev + sdepth)/swevel	",
" 	output field gstat = sstat - sut/1000.				",
" 	output field tstat = sstat + gstat + 10^scalel*(selev - gelev)/wevel",
"									",
" For hdrs=2, statics are surface consistently obtained from the 	",
" statics files. The geometry should be regular.			",
" The source- and receiver-statics files should be unformated C binary 	",
" floats and contain the statics (in ms) as a function of surface location.",
"									",
" For hdrs=3, statics are read from the output files of suresstat, with ",
" the same options as hdrs=2 (but use no=max traces per shot and assume ",
" that ns=max shot number and nr=max receiver number).			",
" For each shot number (trace header fldr) and each receiver number     ",
" (trace header tracf) the program will look up the appropriate static  ",
" correction.  The geometry need not be regular as each trace is treated",
" independently.							",
"									",
" Caveat:  The static shifts are computed with the assumption that the  ",
" desired datum is sea level (elevation=0). You may need to shift the	",
" selev and gelev header values via  suchw.				",
" Example: subtracting min(selev,gelev)=25094431			",
"									",
" suchw < CR290.su key1=selev,gelev key2=selev,gelev key3=selev,gelev \\ ",
"            a=-25094431,-25094431 b=1,1 c=0,0 > CR290datum.su		",
NULL};

/* Credits:
 *	CWP: Jamie Burns
 *
 *	CWP: Modified by Mohammed Alfaraj, 11/10/1992, for reading
 *	     statics from headers and including sign (+-) option
 *
 *      CWP: Modified by Timo Tjan, 29 June 1995, to include input of
 *           source and receiver statics from files. 
 *
 *	modified by Thomas Pratt, USGS, Feb, 2000 to read statics from
 * 	     the output files of suresstat
 *
 * Trace header fields accessed:  ns, dt, delrt, gelev, selev,
 *	sdepth, gdel, sdel, swevel, sut, scalel, fldr, tracf
 * Trace header fields modified:  sstat, gstat, tstat
 */

/************************ end self doc ***********************************/


segy intrace, outtrace;

int
main(int argc, char **argv)
{
	int nt;		/* number of samples on output trace	*/
	float dt;	/* sample rate on outpu trace		*/
	int itime;	/* counter          			*/
	float tmin;	/* first time sample on output trace	*/
	float tsd=0.0;	/* time to move source to datum         */
	float trd=0.0;	/* time to move 0 offset receiver       */
	float v0;	/* weathering velocity			*/
	float v1;	/* subweathering velocity		*/
	int hdrs; 	/* flag to read statics from headers	*/ 
	float *t;	/* array of output times		*/
	float tstat;	/* total (source and receiver) statics	*/
	int sign;	/* to add (+) or subtract (-) statics	*/
	int no;		/* number of offsets per shot 		*/
	int io;		/* offset counter 			*/
	int is;		/* source counter 			*/
	int ir;		/* receiver counter 			*/
	int ns;		/* number of sources = number of source statics */
	int nr;		/* number of receiver = number of rec. statics	*/
	float *sou_statics=NULL;	/* array of source statics	*/
	float *rec_statics=NULL;	/* array of receiver statics	*/
	FILE *fps, *fpr;	/* file pointers for statics input 	*/
	cwp_String sou_file, rec_file; /* statics filenames 		*/

	/* Hook up getpar */
	initargs(argc, argv);
	requestdoc(1);

	/* Get information from first trace */
	if (!gettr(&intrace)) err("can't get first trace");
	nt   = intrace.ns;
	tmin = intrace.delrt/1000.0;
	dt   = ((double) intrace.dt)/1000000.0;
	
	/* Get parameters */
	if (!getparfloat("v1", &v1))          v1 = (float) intrace.swevel;
	if (!getparfloat("v0", &v0))
                v0 = (float) ((intrace.wevel) ? intrace.wevel : v1);
	if (!getparint("hdrs", &hdrs))        hdrs = 0;
	if (!getparint("sign", &sign))        sign = 1;

	/* Allocate vector of output times */
	t = ealloc1float(nt);

	/* reading source and receiver statics from files */
	if ((hdrs == 2) || (hdrs == 3)){

		/* getpar statics file related parameters */
		if (!getparint("ns", &ns))        ns = 240;
		if (!getparint("nr", &nr))        nr = 335;
		if (!getparint("no", &no))        no = 96;

		/* getpar statics file names */
        	getparstring("sou_file",&sou_file);
        	getparstring("rec_file",&rec_file);
                checkpars();

		/* allocate space */
		rec_statics = alloc1float(nr);
        	sou_statics = alloc1float(ns);

		/* open and read from receiver statics file */
        	if((fpr=efopen(rec_file,"rb"))==NULL)
                	err("cannot open stat_file=%s\n",rec_file);
        	efread(rec_statics, sizeof(float),nr,fpr);
        	efclose(fpr);

		/* open and read from source statics file */
        	if((fps=efopen(sou_file,"rb"))==NULL)
                	err("cannot open stat_file=%s\n",sou_file);
        	efread(sou_statics, sizeof(float),ns,fps);
        	efclose(fps);
	}


	/* Loop on traces */	
	io = 0; is = 0;
	do {
		int temp = SGN(intrace.scalel)*log10(abs((int) intrace.scalel));
		float scale;
                scale = pow(10., (float)temp);
		
		/* copy and adjust header */
		memcpy( (void *) &outtrace, (const void *) &intrace, HDRBYTES);
	
		/* compute static correction if necessary */
		if(!hdrs) {
		    	tsd = scale *
			(-intrace.selev + intrace.sdel + intrace.sdepth)/v1;
			trd = tsd - intrace.sut/1000.0;
			tstat = tsd + trd +
				scale * (intrace.selev - intrace.gelev)/v0;

		/* else, read statics from headers */
		} else { 

			if (hdrs == 2) {
				ir = is + io;
				if (is <= ns) tsd = sou_statics[is]/1000;
				if (ir > 0 && ir <= nr)
					trd = rec_statics[ir]/1000;

				intrace.tstat = tsd + trd;
				io ++;
				if (io > no-1) {
					io = 0; is++;
				}
			}
			if (hdrs == 3) {
				ir = is + io;
				tsd = sou_statics[intrace.fldr];
				trd = rec_statics[intrace.tracf];

				intrace.tstat = tsd + trd;
				io ++;
				if (io > no-1) {
					io = 0; is++;
				}
			}
			

			/* if total statics not supplied, calculate it */
			if(intrace.tstat==0) {
				outtrace.tstat = intrace.sstat+intrace.gstat;
				tstat = outtrace.tstat/1000.0;
			} else
				tstat = intrace.tstat/1000.0;
		}
		
		/* Compute output times */
		for (itime=0; itime<nt; ++itime)
			t[itime] = tmin + itime*dt + sign*tstat;

		/* sinc interpolate new data */
		ints8r(nt, dt, tmin, intrace.data, 
				0.0, 0.0, nt, t, outtrace.data);
		
		/* set header field for output trace */
		if(hdrs == 0 || hdrs == 2 || hdrs == 3){

			/* value is added to existing header values */
			/* this permits multiple static corrections */
			outtrace.sstat += (1000.0 * tsd);
			outtrace.gstat += (1000.0 * trd);
			outtrace.tstat += (1000.0 * tstat);
		} 
		
		puttr(&outtrace);
	} while (gettr(&intrace));


	return(CWP_Exit());
}
@


1.25
log
@copyright
@
text
@d146 1
@


1.24
log
@small selfdoc fix suggested by Gerhar
@
text
@d1 4
a4 1
/* SUSTATIC: $Revision: 1.23 $ ; $Date: 2009/07/22 21:57:13 $	*/
@


1.23
log
@fixed error in selfdoc giving an unknown escape sequence warning
@
text
@d1 1
a1 1
/* SUSTATIC: $Revision: 1.22 $ ; $Date: 2008/06/02 21:02:45 $	*/
d23 2
a24 1
"	sign=1			=-1 to subtract statics from traces(up shift)",
@


1.22
log
@added to selfdoc to show that datum is elevation=0
@
text
@d1 1
a1 1
/* SUSTATIC: $Revision: 1.21 $ ; $Date: 2003/06/09 16:17:07 $	*/
d59 1
a59 1
" suchw < CR290.su key1=selev,gelev key2=selev,gelev key3=selev,gelev \ ",
@


1.21
log
@9 June 2003
@
text
@d1 1
a1 1
/* SUSTATIC: $Revision: 1.20 $ ; $Date: 2001/06/22 15:54:09 $	*/
d54 7
@


1.20
log
@Tom Pratt's version
@
text
@d1 1
a1 1
/* SUSTATIC: $Revision: 1.15 $ ; $Date: 1998/04/24 21:29:44 $	*/
d157 1
a157 1
		int temp = intrace.scalel;
d230 1
a230 1
	return EXIT_SUCCESS;
@


1.19
log
@added Chris Robinson's residual refraction statics
@
text
@d1 2
a6 1

d22 1
d24 1
a24 1
" Options when hdrs=2:							",
d27 1
a27 1
"	ns=240 			number of sources 			",
a29 24
"                                                                       ",
" Options when hdrs=3:                                                  ",
"       blvl_file=              base of the near-surface model file (sampled",
"                                  at CMP locations)                    ",
"       refr_file=              horizontal reference datum file (sampled at",
"                                  CMP locations)                       ",
"       nsamp=                  number of midpoints on line             ",
"       fx=                     first x location in velocity model      ",
"       dx=                     midpoint interval                       ",
"       V_r=                    replacement velocity                    ",
"       mx=                     number of velocity model samples in     ",
"                                  lateral direction                    ",
"       mz=                     number of velocity model samples in     ",
"                                  vertical direction                   ",
"       dzv=                    velocity model depth interval           ",
"       vfile=                  near-surface velocity model             ",
"                                                                       ",
" Options when hdrs=4:                                                  ",
"       nsamp=                  number of midpoints on line             ",
"       fx=                     first x location in velocity model      ", 
"       dx=                     midpoint interval                       ", 
"                                                                       ",
" Options when hdrs=5:                                                  ",
"       none                                                            ",
d46 8
a53 19
" For hdrs=3, residual refraction statics and average refraction statics",
" are computed.  For hdrs=4, residual refraction statics are applied,   ",
" and for hdrs=5, average refraction statics are applied (Cox, 1999).   ",
" These three options are coupled in many data processing sequences:    ",
" before stack residual and average refraction statics are computed but ",
" only residual refractions statics are applied, and after stack average",
" refraction statics are applied.  Refraction statics are often split   ",
" like this to avoid biasing stacking velocities.  The files blvl_file  ",
" and refr_file are the base of the velocity model defined in vfile and ",
" the final reference datum, as described by Cox (1999), respectively.  ",
" Residual refraction statics are stored in the header field gstat, and ",
" the average statics are stored in the header field tstat.  V_r is the ",
" replacement velocity as described by Cox (1999).  The velocity file,  ",
" vfile, is designed to work with a horizontal upper surface defined in ",
" refr_file.  If the survey has irregular topography, the horizontal    ",
" upper surface should be above the highest topographic point on the    ",
" line, and the velocity between this horizontal surface and topography ",
" should be some very large value, such as 999999999, so that the       ",
" traveltimes through that region are inconsequential.                  ",
d65 2
a66 2
 *      CWP: Modified by Chris Robinson, 11/2000, to include the splitting
 *           of refraction statics into residuals and averages
d69 1
a69 1
 *	sdepth, gdel, sdel, swevel, sut, scalel
a70 5
 *
 * References:
 *
 * Cox, M., 1999, Static corrections for seismic reflection surveys:
 *    Soc. Expl. Geophys.
d91 1
a91 1
	float tstat=0.0; /* total (source and receiver) statics	*/
a98 7
        int nsamp;      /* number of samples for each surface           */
        int i,j,res=0,bulk=0,mx,mz;
        float fx;      /* first sample position of surfaces            */
        float dx;
        int ic_c,is_c,ir_c;
        float z_blvl_s,z_refr_s;
        float z_blvl_r,z_refr_r;
d101 1
a101 10
        float *blvl_arr=NULL;           /* array of base LVL values     */
        float *refr_arr=NULL;           /* array of reference datum values */
        float *tcdp_stat=NULL, *tcdp_arr=NULL;
        float *num=NULL, *num_arr=NULL, **vel=NULL;
        float dzv;
        float V_r;
	FILE *fps, *fpr;       	/* file pointers for statics input 	*/
        FILE *fpb=NULL, *fpf=NULL;   /* file pointers for input surfaces     */
        FILE *g1=NULL, *g2=NULL, *g3=NULL, *g4=NULL;
        FILE *vfp;
a102 3
        cwp_String blvl_file; /* surface filenames                      */
        cwp_String refr_file;            /*surface filename             */
        cwp_String vfile;
d125 1
a125 1
	if (hdrs == 2){
a152 53
        if (hdrs==3){
                getparstring("blvl_file",&blvl_file);
                getparstring("refr_file",&refr_file);
                getparint("nsamp",&nsamp);
                getparfloat("fx",&fx);
                getparfloat("dx",&dx);
                getparfloat("V_r",&V_r);

                blvl_arr = alloc1float(nsamp);
                if((fpb=efopen(blvl_file,"rb"))==NULL)
                        err("cannot open blvl_file=%s\n",blvl_file);
                efread(blvl_arr, sizeof(float),nsamp,fpb);

                refr_arr = alloc1float(nsamp);
                if((fpf=efopen(refr_file,"rb"))==NULL)
                        err("cannot open refr_file=%s\n",refr_file); 
                efread(refr_arr, sizeof(float),nsamp,fpf);

                g1=fopen("tcdp.b","wb");
                g2=fopen("num.b","wb");

                if (!getparstring("vfile",&vfile)) err("must specify vfile");
                if (!getparint("mx",&mx)) err("must specify mx");
                if (!getparint("mz",&mz)) err("must specify mz");
                if (!getparfloat("dzv",&dzv)) err("must specify dzv");
                vfp = fopen(vfile,"r");
                vel = alloc2float(mz,mx);
                fread(vel[0],sizeof(float),mz*mx,vfp);
                fclose(vfp);

                tcdp_stat = alloc1float(nsamp);
                num = alloc1float(nsamp);
                for(i=0;i<nsamp;i++){
                      tcdp_stat[i] = 0.0;
                      num[i] = 0.0;
                }
        }

        if (hdrs==4){
                getparint("nsamp",&nsamp);
                getparfloat("fx",&fx);
                getparfloat("dx",&dx); 
                tcdp_arr = alloc1float(nsamp);
                if((g3=efopen("tcdp.b","rb"))==NULL)
                        err("cannot open tcdp.b\n");
                efread(tcdp_arr, sizeof(float),nsamp,g3);

                num_arr = alloc1float(nsamp);
                if((g4=efopen("num.b","rb"))==NULL)
                        err("cannot open num.b\n");
                efread(num_arr, sizeof(float),nsamp,g4);

        }
d157 1
a157 1
		int temp = SGN(intrace.scalel)*log10(abs((int) intrace.scalel));
d175 1
a175 1
			if (hdrs==2) {
d177 3
a179 3
				if (is < ns) tsd = sou_statics[is]/1000.0;
				if (ir >= 0 && ir < nr)
					trd = rec_statics[ir]/1000.0;
d181 1
a181 1
				intrace.tstat =  NINT(tsd*1000.0 +  trd*1000.0);
d187 4
d192 7
a198 39
                        if(hdrs==3){
                              is_c = (int)((((float)intrace.sx)-fx)/dx);
                              z_blvl_s = blvl_arr[is_c];
                              z_refr_s = refr_arr[is_c];
                              
                              ir_c = (int)((((float)intrace.gx)-fx)/dx);
                              z_blvl_r = blvl_arr[ir_c];
                              z_refr_r = refr_arr[ir_c];

                              tsd = 0.0;
                              trd = 0.0;
                              is_c = (int)((((float)intrace.sx)-fx)/dx);
                              ir_c = (int)((((float)intrace.gx)-fx)/dx);
                              for(j=0;j<mz-1;j++){
                                 tsd = tsd + dzv/vel[is_c][j];
                                 trd = trd + dzv/vel[ir_c][j];
                              }
                              tsd = tsd - (z_blvl_s-z_refr_s)/V_r;
                              trd = trd - (z_blvl_r-z_refr_r)/V_r;

                              intrace.tstat = NINT(tsd*1000.0+trd*1000.0);

                              ic_c = (int)((((float)intrace.cdp)-fx)/dx);
                              tcdp_stat[ic_c] = tcdp_stat[ic_c] + tsd + trd;
                              num[ic_c] = num[ic_c] + 1.0;
                        }

                        if(hdrs==4){
                              ic_c = (int)((((float)intrace.cdp)-fx)/dx);
                              if(num_arr[ic_c]>=0.5){
                                 bulk = NINT(1000.0*tcdp_arr[ic_c]/num_arr[ic_c]);
                                 res = intrace.tstat - bulk;
                              }
                              if(num_arr[ic_c]<=0.5){
                                 bulk = 0;
                                 res = 0;
                              }
                        }

d201 1
a201 1
			if(intrace.tstat==0 && hdrs!=3 && hdrs!=4){
d204 1
a204 3
			} 
                        /* for hdrs==5, here is where tstat is calculated */
                        if(intrace.tstat!=0 && hdrs!=3 && hdrs!=4){
a205 7
			}
                        if(hdrs==3){
                                tstat = 0.0;
                        }
                        if(hdrs==4){
                                tstat = res/1000.0;
                        }
d217 1
a217 1
		if(hdrs!=1 && hdrs!=3 && hdrs!=4 && hdrs!=5){
d224 1
a224 16
		}
                if(hdrs==3){
                        outtrace.sstat = 0;
                        outtrace.gstat = 0;
                        outtrace.tstat = intrace.tstat;
                }
                if(hdrs==4){
                        outtrace.sstat = 0;
                        outtrace.gstat = res;
                        outtrace.tstat = bulk;
                }
                if(hdrs==5){
                        outtrace.tstat = intrace.tstat;
                        outtrace.sstat = intrace.sstat;
                        outtrace.gstat = intrace.gstat;
                }
a228 12
        if(hdrs==3){
           fwrite(tcdp_stat,sizeof(float),nsamp,g1);
           fwrite(num,sizeof(float),nsamp,g2);
           fclose(fpb);
           fclose(fpf);
           fclose(g1);
           fclose(g2);
        }
        if(hdrs==4){
           fclose(g3);
           fclose(g4);
        }
@


1.18
log
@fixed to properly use scalel
@
text
@a0 2
/* SUSTATIC: $Revision: 1.17 $ ; $Date: 1999/12/10 19:06:19 $	*/

d5 1
d28 24
d68 19
d98 3
d104 5
d129 1
a129 1
	float tstat;	/* total (source and receiver) statics	*/
d137 7
d146 10
a155 1
	FILE *fps, *fpr;	/* file pointers for statics input 	*/
d157 3
d210 53
d285 1
a285 1
			if (hdrs == 2) {
d298 40
d339 1
a339 1
			if(intrace.tstat==0) {
d342 3
a344 1
			} else {
d347 6
d364 1
a364 1
		if(hdrs == 0 || hdrs == 2){
d371 16
a386 1
		} 
d391 12
a405 2


@


1.17
log
@changed NINT statement to NINT on sum, rather than do sum of NINTS
@
text
@d1 1
a1 1
/* SUSTATIC: $Revision: 1.16 $ ; $Date: 1999/12/09 21:14:39 $	*/
d26 1
a26 1
"	ns=240 			number of souces 			",
d145 1
a145 1
		int temp = intrace.scalel;
@


1.16
log
@Chris Robinson's fixes of hdrs=2 bugs.
@
text
@d1 1
a1 1
/* SUSTATIC: $Revision: 1.15 $ ; $Date: 1998/04/24 21:29:44 $	*/
d169 1
a169 1
				intrace.tstat =  NINT(tsd*1000.0) +  NINT(trd*1000.0);
@


1.15
log
@added Kris Vanneste's changes
@
text
@d1 1
a1 1
/* SUSTATIC: $Revision: 1.14 $ ; $Date: 1997/05/02 16:22:37 $	*/
d165 3
a167 3
				if (is <= ns) tsd = sou_statics[is]/1000;
				if (ir > 0 && ir <= nr)
					trd = rec_statics[ir]/1000;
d169 1
a169 1
				intrace.tstat = tsd + trd;
a174 1
			
d180 1
a180 1
			} else
d182 1
@


1.14
log
@switched intrace.selev and intrace.gelev usage in statics computation
bug report by Donat Demanet of the University of Liege, Belgium.ZZ
@
text
@d1 1
a1 1
/* SUSTATIC: $Revision: 1.13 $ ; $Date: 1997/03/07 18:57:34 $	*/
d18 1
a18 1
"	v0=user-defined		or from header, weathering velocity	",
d36 3
a38 3
" 	output field sstat = scalel(selev - sdel - sdepth)/swevel.	",
" 	output field gstat = sstat + sut/1000.				",
" 	output field tstat = sstat + gstat 				",
a102 1
	if (!getparfloat("v0", &v0))          v0 = (float) intrace.wevel;
d104 2
d147 1
a147 3
		if (temp > 0)      scale = temp;
		else if (temp < 0) scale = -1.0/temp;
		else               scale = 1.0;
d209 2
@


1.13
log
@changed parameter scale from int to float to prevent error for negative
scalel header field. Thanks to Michelle Miller of California State University
at Chico.
@
text
@d1 1
a1 1
/* SUSTATIC: $Revision: 1.12 $ ; $Date: 1996/09/13 21:49:05 $	*/
d159 1
a159 1
				scale * (intrace.gelev - intrace.selev)/v0;
@


1.12
log
@silenced -Wall messages
@
text
@d1 1
a1 1
/* SUSTATIC: $Revision: 1.11 $ ; $Date: 1996/05/02 19:54:32 $	*/
d145 1
a145 1
		int scale;
d147 2
a148 2
		else if (temp < 0) scale = -1/temp;
		else               scale = 1;
@


1.11
log
@Changed fread,fopen,fclose to efread, etc.
@
text
@d1 1
a1 1
/* SUSTATIC: $Revision: 1.10 $ ; $Date: 1996/05/02 19:52:30 $	*/
d66 1
d73 2
a74 2
	float tsd;	/* time to move source to datum         */
	float trd;	/* time to move 0 offset receiver       */
d86 3
a88 3
	int nr;		/* number of receiver = number of rec. statics */
	float *sou_statics;	/* array of source statics		 */
	float *rec_statics;	/* array of receiver statics		*/
@


1.10
log
@./main/sustatic.c
"sustatic.c", line 140: warning: k set but not used in function main
Was used to capture the return value of fclose, but never used.
@
text
@d1 1
a1 1
/* SUSTATIC: $Revision: 1.9 $ ; $Date: 1996/02/06 20:21:26 $	*/
d127 1
a127 1
        	if((fpr=fopen(rec_file,"rb"))==NULL)
d129 2
a130 2
        	fread(rec_statics, sizeof(float),nr,fpr);
        	fclose(fpr);
d133 1
a133 1
        	if((fps=fopen(sou_file,"rb"))==NULL)
d135 2
a136 2
        	fread(sou_statics, sizeof(float),ns,fps);
        	fclose(fps);
@


1.9
log
@Deal with header fields accessed/modified down to sudoc.
@
text
@d1 1
a1 1
/* SUSTATIC: $Revision: 1.8 $ ; $Date: 1995/08/04 15:31:53 $	*/
a85 1
	int k;	
d130 1
a130 1
        	k=fclose(fpr);
d136 1
a136 1
        	k=fclose(fps);
@


1.8
log
@Changed cast of intrace.dt to double for consistency.
@
text
@d1 1
a1 1
/* SUSTATIC: $Revision: 1.7 $ ; $Date: 1995/06/29 10:26:54 $	*/
d22 1
a22 1
"	sign=1			=-1 to subtract statics from traces (up shift)",
a44 4
" Trace header fields accessed:  ns, dt, delrt, gelev, selev, 		",
"	sdepth, gdel, sdel, swevel, sut, scalel 			",
" Trace header fields modified:  sstat, gstat, tstat			",
"									",
d55 4
@


1.7
log
@removed ) )
@
text
@d1 1
a1 1
/* SUSTATIC: $Revision: 1.6 $ ; $Date: 95/06/29 10:23:50 $	*/
d100 1
a100 1
	dt   = (float) intrace.dt/1000000.0;
@


1.6
log
@Timo Tjan added the options for reading source and receiver statics from
files.
@
text
@d1 1
a1 1
/* SUSTATIC: $Revision: 1.5 $ ; $Date: 94/08/25 15:01:03 $	*/
d120 2
a121 2
        	getparstring("sou_file",&sou_file));
        	getparstring("rec_file",&rec_file));
@


1.5
log
@Removed copyright statement from codes that had it.
Moved self-doc line for sudoc.
@
text
@d1 1
a1 1
/* SUSTATICS: $Revision: 1.4 $ ; $Date: 93/11/24 16:13:53 $	*/
d10 2
a11 2
" SUSTATICS - Elevation static corrections or apply corrections		",
"	      from headers						",
d13 1
a13 1
" sustatics <stdin >stdout  [optional parameters]	 		",
a16 1
"									",
d18 11
a28 4
" v0=user-defined	or from header, weathering velocity		",
" v1=user-defined	or from header, subweathering velocity		",
" hdrs=0	 	=1 to read statics from headers			",
" sign=1	 	=-1 to subtract statics from traces (up shift)	",
a30 1
"									",
d40 5
d48 1
d54 1
a54 1
 *	     Modified by Mohammed Alfaraj, 11/10/1992, for reading
d56 3
d60 1
d80 12
a91 1
	
d111 2
d114 27
d142 1
d164 14
d195 7
a201 4
		if(!hdrs){
			outtrace.sstat = 1000.0 * tsd;
			outtrace.gstat = 1000.0 * trd;
			outtrace.tstat = 1000.0 * tstat;
a209 1

@


1.4
log
@added explicit casts in memcpy
@
text
@d1 1
a1 1
/* SUSTATICS: $Revision: 1.3 $ ; $Date: 93/05/19 09:31:26 $	*/
a2 13
/*----------------------------------------------------------------------
 * Copyright (c) Colorado School of Mines, 1990.
 * All rights reserved.
 *
 * This code is part of SU.  SU stands for Seismic Unix, a processing line
 * developed at the Colorado School of Mines, partially based on Stanford
 * Exploration Project (SEP) software.  Inquiries should be addressed to:
 *
 *  Jack K. Cohen, Center for Wave Phenomena, Colorado School of Mines,
 *  Golden, CO 80401  (jkc@@dix.mines.colorado)
 *----------------------------------------------------------------------
 */

a38 1
/************************ end self doc ***********************************/
d46 1
@


1.3
log
@updated by Mohammed Alfaraj to permit static correction to be made
from header values.
@
text
@d1 1
a1 1
/* SUSTATICS: $Revision: 1.2 $ ; $Date: 92/10/22 16:27:10 $	*/
d87 1
a87 1
	dt   = intrace.dt/1000000.0;
d108 1
a108 1
		memcpy(&outtrace, &intrace, HDRBYTES);
@


1.2
log
@new selfdoc installed
@
text
@d1 1
a1 1
/* SUSTATIC: $Revision: 1.1 $ ; $Date: 92/09/17 13:44:33 $	*/
d23 2
a24 1
" SUSTATIC - Elevation static corrections				",
d26 1
a26 1
" sustatic <stdin >stdout  [optional parameters]	 		",
d32 4
a35 2
"	v0=from header 	   weathering velocity				",
"	v1=from header 	   subweathering velocity			",
d37 1
a37 4
" input field sut is assumed measured in ms.				",
" output field sstat = scalel(selev - sdel - sdepth)/swevel.		",
" output field gstat = sstat + sut/1000.				",
" output field tstat = sstat + gstat + scalel(gelev - selev)/wevel.	",
d39 9
d49 1
a49 1
"	sdepth, gdel, sdel, wevel, swevel, sut, scalel 			",
d56 3
d67 2
a68 2
	float dt;	/* sample rate on output trace		*/
	int idt;	/* ... as integer			*/
a71 1
	float tstatic;	/* time to move both 0 offset & source  */
d74 1
d76 2
d90 4
a93 2
	if (!getparfloat("v0", &v0))		v0 = (float) intrace.wevel;
	if (!getparfloat("v1", &v1))            v1 = (float) intrace.swevel;
d110 3
a112 2
		/* compute static correction */
		tsd = scale *
d114 14
a127 3
		trd = tsd - intrace.sut/1000.0;
		tstatic = tsd + trd +
			scale * (intrace.gelev - intrace.selev)/v0;
d130 2
a131 4
		{ int itime;
			for (itime=0; itime<nt; ++itime)
			t[itime] = tmin + itime*dt + tstatic;
		}
d138 5
a142 3
		outtrace.sstat = 1000.0 * tsd;
		outtrace.gstat = 1000.0 * trd;
		outtrace.tstat = 1000.0 * tstatic;
d150 1
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/* SUSTATIC: $Revision: 1.2 $ ; $Date: 92/04/23 15:18:39 $	*/
d21 22
a42 22
String sdoc = "\
									\n\
SUSTATIC - Elevation static corrections					\n\
									\n\
sustatic <stdin >stdout  [optional parameters]		 		\n\
									\n\
Required parameters:							\n\
	none								\n\
									\n\
Optional Parameters:							\n\
	v0=from header 	   weathering velocity				\n\
	v1=from header 	   subweathering velocity			\n\
									\n\
input field sut is assumed measured in ms.				\n\
output field sstat = scalel(selev - sdel - sdepth)/swevel.		\n\
output field gstat = sstat + sut/1000.					\n\
output field tstat = sstat + gstat + scalel(gelev - selev)/wevel.	\n\
									\n\
Trace header fields accessed:  ns, dt, delrt, gelev, selev, 		\n\
	sdepth, gdel, sdel, wevel, swevel, sut, scalel 			\n\
Trace header fields modified:  sstat, gstat, tstat			\n\
";
d67 1
a67 1
	askdoc(1);
@
