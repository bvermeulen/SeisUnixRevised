head	1.8;
access;
symbols;
locks; strict;
comment	@ * @;


1.8
date	2015.06.02.20.15.23;	author john;	state Exp;
branches;
next	1.7;

1.7
date	2012.01.26.18.00.38;	author john;	state Exp;
branches;
next	1.6;

1.6
date	2011.11.16.23.30.27;	author john;	state Exp;
branches;
next	1.5;

1.5
date	2011.11.12.00.40.42;	author john;	state Exp;
branches;
next	1.4;

1.4
date	2009.11.24.21.56.44;	author john;	state Exp;
branches;
next	1.3;

1.3
date	2007.02.16.18.28.44;	author john;	state Exp;
branches;
next	1.2;

1.2
date	2006.10.25.22.15.39;	author john;	state Exp;
branches;
next	1.1;

1.1
date	2006.09.04.19.27.43;	author john;	state Exp;
branches;
next	;


desc
@Nils Maerklin's seismic waveform generator.
@


1.8
log
@added NINT for dt -- Ekkehart Tessmer Uni-bremen
@
text
@/* Copyright (c) Colorado School of Mines, 2011.*/
/* All rights reserved.			*/

/* SUWAVEFORM: $Revision: 1.7 $ ; $Date: 2012/01/26 18:00:38 $	*/


#include "su.h"
#include "segy.h"
#include "header.h"

/*********************** self documentation **********************/
char *sdoc[] = {
"									",
" SUWAVEFORM - generate a seismic wavelet				",
"									",
" suwaveform <stdin >stdout [optional parameters]			",
"									",
" Required parameters:						  	",
"	one of the optional parameters listed below			",
"									",
" Optional parameters:						  	",
"	type=akb	wavelet type					",
"		   akb:	AKB wavelet defined by max frequency fpeak	",
"		   berlage: Berlage wavelet				",
"		   gauss:   Gaussian wavelet defined by frequency fpeak	",
"		   gaussd:  Gaussian first derivative wavelet		",
"		   ricker1: Ricker wavelet defined by frequency fpeak	",
"		   ricker2: Ricker wavelet defined by half and period	",
"		   spike:   spike wavelet, shifted by time tspike	",
"		   unit:	unit wavelet, i.e. amplitude = 1 = const.",
"									",
"	dt=0.004	time sampling interval in seconds		",
"	ns=		if set, number of samples in  output trace	",
"									",
"	fpeak=20.0	peak frequency of a Berlage, Ricker, or Gaussian,",
"		   and maximum frequency of an AKB wavelet in Hz	",
"									",
"	half=1/fpeak   Ricker wavelet \"ricker2\": half-length		",
"	period=c*half  Ricker wavelet \"ricker2\": period (c=sqrt(6)/pi)",
"	distort=0.0	Ricker wavelet \"ricker2\": distortion factor	",
"	decay=4*fpeak  Berlage wavelet: exponential decay factor in 1/sec",
"	tn=2	   Berlage wavelet: time exponent			",
"	ipa=-90	Berlage wavelet: initial phase angle in degrees		",
"	tspike=0.0	Spike wavelet: time at spike in seconds		",
"	verbose=0	1: echo output wavelet length			",
"									",
"									",
" Notes:								",
"	If ns is not defined, the program determines the trace length	",
"	depending on the dominant signal period.			   ",
"									",
"	The Ricker wavelet \"ricker1\" and the Gaussian wavelet \"gauss\"  ",
"	are zero-phase. For these two wavelets, the trace header word	",
"	delrt is set such that the peak amplitude is at t=0 seconds.	",
"	If this is not acceptable, use \"sushw key=delrt a=0\".		",
"									",
"	The Ricker wavelets can be defined either by the peak frequency	",
"	fpeak (\"ricker1\") or by its half-length, the period, and a	",
"	distortion factor (\"ricker2\"). \"ricker\" is an acceptable	",
"	alias for \"ricker1\".						",
"									",
"	The Berlage wavelet is defined by the peak frequency fpeak, a time ",
"	time exponent tn describing the wavelet shape at its beginning,	",
"	and an exponential decay factor describing the amplitude decay	",
"	towards later times. The parameters tn and decay are non-negative, ",
"	real numbers; tn is typically a small integer number and decay a   ",
"	multiple of the dominant signal period 1/fpeak. Additionally, an   ",
"	initial phase angle can be given; use -90 or 90 degrees for	",
"	zero-amplitude at the beginning.				   ",
"									",
"	For an AKB wavelet, fpeak is the maximum frequency; the peak	",
"	frequency is about 1/3 of the fpeak value.			 ",
"									",
"	The output wavelet can be normalized or scaled with \"sugain\".	",
"	Use \"suvibro\" to generate a Vibroseis sweep.			",
"									",
" Example:								",
" A normalized, zero-phase Ricker wavelet with a peak frequency		",
" of 15 Hz is generated and convolved with a spike dataset:		",
"									",
"	suwaveform type=ricker1 fpeak=15 | sugain pbal=1 > wavelet.su	",
"	suplane npl=1 | suconv sufile=wavelet.su | suxwigb		",
" 									",
" Gaussian and derivatives of Gaussians:				",
" Use \"sudgwaveform\" to generate these				",
" 									",
" Caveat:								",
"	This program does not check for aliasing.			",
"									",
NULL};

/*
 * Author: 
 *	Nils Maercklin, RISSC, University of Napoli, Italy, 2006
 *
 * References:
 *	Aldridge, D. F. (1990). The Berlage wavelet. 
 *	Geophysics, vol. 55(11), p. 1508-1511.
 *	Alford, R., Kelly, K., and Boore, D. (1947). Accuracy
 *	of finite-difference modeling of the acoustic wave
 *	equation. Geophysics, vol. 39, p. 834-842. (AKB wavelet)
 *	Sheriff, R. E. (2002). Encyclopedic dictionary of 
 *	applied geophysics. Society of Exploration Geophysicists,
 *	Tulsa. (Ricker wavelet, page 301)
 *
 * Notes:
 *	For more information on the wavelets type "sudoc waveforms" 
 *	or have a look at "$CWPROOT/src/cwp/lib/waveforms.c".
 *
 * Credits: 
 *	CWP, the authors of the subroutines in "waveforms.c".
 *
 * Trace header fields set: ns, dt, trid, delrt
 */
/**************** end self doc ***********************************/

segy tr;

int
main(int argc, char **argv)
{
	char *wtype=NULL;	/* wavelet type */
	int nt;		/* number of trace samples */
	float dt;		/* time sampling in seconds */
	float fpeak;	 /* peak of maximum frequency in Hz */
	float *wavelet=NULL; /* wavelet */
	float period;	/* period of ricker2 wavelet */
	float half;	  /* half-length of ricker2 in seconds */
	int hlw;		/* half-length of ricker2 in samples */
	float ampl;	  /* amplitude scale factor (ricker2, berlage) */
	float distort;	/* distortion factor of ricker2 */
	float tn;		/* non-negative time exponent (berlage wavelet) */
	float decay;	 /* non-negative exponential decay factor (berlage) */
	float ipa;	   /* initial phase angle in radians (berlage) */
	float tspike;	/* time of spike in seconds (spike wavelet) */
	int verbose=0;	/* flag: verbose option */
	

	/* Initialize */
	initargs(argc, argv);
	requestdoc(1);

	/* Get parameters and validate input */
	if (!getparfloat("dt", &dt)) dt=0.004;
	if (dt<=0.0) err("dt=%g must be positive", dt);
	if (!getparfloat("fpeak", &fpeak)) fpeak=20.0;
	if (fpeak<=0.0) err("fpeak=%g must be positive", fpeak);
	if (!getparfloat("half", &half)) half=1.0/fpeak;
	if (half<=0.0) err("half=%g must be positive", half);
	if (!getparfloat("period", &period)) period=half*0.77969680123;
	if (period<=0.0) err("period=%g must be positive", period);
	if (!getparfloat("tspike", &tspike)) tspike=0.0;
	if (tspike<0.0) err("tspike=%g must be non-negative", tspike);	
	if (!getparfloat("ampl", &ampl)) ampl=1.0;
	if (!getparfloat("distort", &distort)) distort=0.0;
	if (!getparfloat("tn", &tn)) tn=2.0;
	if (tn<0.0) err("tn=%g must be non-negative", tn);  
	if (!getparfloat("decay", &decay)) decay=4.0*fpeak;
	if (decay<0.0) err("decay=%g must be non-negative", decay);  
	if (!getparfloat("ipa", &ipa)) ipa=-90.0;
	ipa *= PI/180.0;

	if (!getparint("verbose", &verbose)) verbose=0;
	if (!getparstring("type", &wtype)) wtype="akb";

	/* Alias "ricker" for "ricker1" */
	if (STREQ(wtype,"ricker")) wtype="ricker1";
	
	/* Get number of samples or estimate "useful" trace length */
	if (!getparint("ns", &nt) && !getparint("nt", &nt)) {
	if (STREQ(wtype,"berlage")) {
		if (decay) {
		/* empiric trace-length estimate */
		nt = NINT((floor(fpeak*(8.0+2.0*tn)/decay))/(dt*fpeak))+1;
		}
		else {
		nt = NINT( 2.0 / (dt*fpeak))+1;
		}
	}
	else if (STREQ(wtype,"ricker1")) {
		nt = NINT(2.0/(fpeak*dt))+1;
	}
	else if (STREQ(wtype,"ricker2")) {
		nt = NINT(2.0*half/dt)+1;
	}
	else if (STREQ(wtype,"gauss")) {
		nt = NINT(2.0/(fpeak*dt))+1;
	}
	else if (STREQ(wtype,"gaussd")) {
		nt = NINT(2.0/(fpeak*dt))+1;
	}
	else if (STREQ(wtype,"akb")) {
		nt = NINT(4.0/(fpeak*dt))+1;
	}
	else if (STREQ(wtype,"spike")) {
		nt = NINT(tspike/dt)+5;
	}
	else if (STREQ(wtype,"unit")) {
		nt = NINT(half/dt)+1;
	}
	else {
		err("unknown wavelet type=%s", wtype);
	}
	};
	
	/* Check trace length */
	if (nt<1) {
	warn("ns=%d too small, using ns=1", nt); nt=1;
	}
	if (nt>SU_NFLTS) {
	warn("trace too long, using maximum ns=%d", SU_NFLTS);
	nt=SU_NFLTS;
	}
	
	/* Allocate space for wavelet */
	wavelet=ealloc1float(nt);
	
	/* Compute wavelet */
	if (STREQ(wtype,"berlage")) {
	berlage_wavelet (nt, dt, fpeak, ampl, tn, decay, ipa, wavelet);
	}
	else if (STREQ(wtype,"ricker1")) {
	ricker1_wavelet (nt, dt, fpeak, wavelet);
	tr.delrt=-NINT(1000.0/(fpeak));
	}
	else if (STREQ(wtype,"ricker2")) {
	hlw=NINT(half/dt);
	if (hlw==0) hlw=1;
	ricker2_wavelet (hlw, dt, period, ampl, distort, wavelet);
	if (!distort) tr.delrt=-NINT(1000.0*half);
	}
	else if (STREQ(wtype,"gauss")) {
	gaussian_wavelet (nt, dt, fpeak, wavelet);
	tr.delrt=-NINT(1000.0/(fpeak));
	}
	else if (STREQ(wtype,"gaussd")) {
	gaussderiv_wavelet (nt, dt, fpeak, wavelet);
	}
	else if (STREQ(wtype,"akb")) {
	akb_wavelet (nt, dt, fpeak, wavelet);
	}
	else if (STREQ(wtype,"spike")) {
	spike_wavelet (nt, NINT(tspike/dt), wavelet);
	}
	else if (STREQ(wtype,"unit")) {
	unit_wavelet (nt, wavelet);
	}
	else {
	err("unknown wavelet type=%s", wtype);
	}

	
	/* Copy wavelet to trace and set header */
	memcpy((void *) tr.data, (const void *) wavelet, nt*FSIZE);
	tr.tracl = 1;
	tr.dt = NINT(dt*1000000.0);
	tr.ns = nt;
	tr.trid = 1;
	
	/* Write trace to stdout */
	puttr(&tr);
	
	/* Free space */
	free1float(wavelet);

	/* Echo trace length, if verbose=1 */
	if (verbose) {
	warn("%s wavelet with %d samples (%g seconds)", \
		wtype, nt, dt*(float)(nt-1));
	}

	return(CWP_Exit());
}
@


1.7
log
@added selfdoc reference to suwaveform
@
text
@d4 1
a4 1
/* SUWAVEFORM: $Revision: 1.6 $ ; $Date: 2011/11/16 23:30:27 $	*/
d256 1
a256 1
	tr.dt = (int) (dt*1000000.0);
@


1.6
log
@added Reg Beardsley's checkpar()
@
text
@d4 1
a4 1
/* SUWAVEFORM: $Revision: 1.5 $ ; $Date: 2011/11/12 00:40:42 $	*/
d78 3
a80 2
"	A normalized, zero-phase Ricker wavelet with a peak frequency	",
"	of 15 Hz is generated and convolved with a spike dataset:	  ",
d82 5
a86 2
"	suplane npl=1 | suconv sufile=wavelet.su | suxwigb		 ",
"									",
d88 1
a88 1
"	This program does not check for aliasing.			  ",
@


1.5
log
@copyright
@
text
@d2 1
a2 1
/* All rights reserved.                       */
d4 1
a4 1
/* SUWAVEFORM: $Revision: 1.4 $ ; $Date: 2009/11/24 21:56:44 $        */
d13 73
a85 73
"                                                                       ",
" SUWAVEFORM - generate a seismic wavelet                               ",
"                                                                       ",
" suwaveform <stdin >stdout [optional parameters]                       ",
"                                                                       ",
" Required parameters:                                                  ",
"    one of the optional parameters listed below                        ",
"                                                                       ",
" Optional parameters:                                                  ",
"    type=akb       wavelet type                                        ",
"                   akb:     AKB wavelet defined by max frequency fpeak ",
"                   berlage: Berlage wavelet                            ",
"                   gauss:   Gaussian wavelet defined by frequency fpeak",
"                   gaussd:  Gaussian first derivative wavelet          ",
"                   ricker1: Ricker wavelet defined by frequency fpeak  ",
"                   ricker2: Ricker wavelet defined by half and period  ",
"                   spike:   spike wavelet, shifted by time tspike      ",
"                   unit:    unit wavelet, i.e. amplitude = 1 = const.  ",
"                                                                       ",
"    dt=0.004       time sampling interval in seconds                   ",
"    ns=            if set, number of samples in  output trace          ",
"                                                                       ",
"    fpeak=20.0     peak frequency of a Berlage, Ricker, or Gaussian,   ",
"                   and maximum frequency of an AKB wavelet in Hz       ",
"                                                                       ",
"    half=1/fpeak   Ricker wavelet \"ricker2\": half-length             ",
"    period=c*half  Ricker wavelet \"ricker2\": period (c=sqrt(6)/pi)   ",
"    distort=0.0    Ricker wavelet \"ricker2\": distortion factor       ",
"    decay=4*fpeak  Berlage wavelet: exponential decay factor in 1/sec  ",
"    tn=2           Berlage wavelet: time exponent                      ",
"    ipa=-90        Berlage wavelet: initial phase angle in degrees     ",
"    tspike=0.0     Spike wavelet: time at spike in seconds             ",
"    verbose=0      1: echo output wavelet length                       ",
"                                                                       ",
"                                                                       ",
" Notes:                                                                ",
"    If ns is not defined, the program determines the trace length      ",
"    depending on the dominant signal period.                           ",
"                                                                       ",
"    The Ricker wavelet \"ricker1\" and the Gaussian wavelet \"gauss\"  ",
"    are zero-phase. For these two wavelets, the trace header word      ",
"    delrt is set such that the peak amplitude is at t=0 seconds.       ",
"    If this is not acceptable, use \"sushw key=delrt a=0\".            ",
"                                                                       ",
"    The Ricker wavelets can be defined either by the peak frequency    ",
"    fpeak (\"ricker1\") or by its half-length, the period, and a       ",
"    distortion factor (\"ricker2\"). \"ricker\" is an acceptable       ",
"    alias for \"ricker1\".                                             ",
"                                                                       ",
"    The Berlage wavelet is defined by the peak frequency fpeak, a time ",
"    time exponent tn describing the wavelet shape at its beginning,    ",
"    and an exponential decay factor describing the amplitude decay     ",
"    towards later times. The parameters tn and decay are non-negative, ",
"    real numbers; tn is typically a small integer number and decay a   ",
"    multiple of the dominant signal period 1/fpeak. Additionally, an   ",
"    initial phase angle can be given; use -90 or 90 degrees for        ",
"    zero-amplitude at the beginning.                                   ",
"                                                                       ",
"    For an AKB wavelet, fpeak is the maximum frequency; the peak       ",
"    frequency is about 1/3 of the fpeak value.                         ",
"                                                                       ",
"    The output wavelet can be normalized or scaled with \"sugain\".    ",
"    Use \"suvibro\" to generate a Vibroseis sweep.                     ",
"                                                                       ",
" Example:                                                              ",
"    A normalized, zero-phase Ricker wavelet with a peak frequency      ",
"    of 15 Hz is generated and convolved with a spike dataset:          ",
"    suwaveform type=ricker1 fpeak=15 | sugain pbal=1 > wavelet.su      ",
"    suplane npl=1 | suconv sufile=wavelet.su | suxwigb                 ",
"                                                                       ",
" Caveat:                                                               ",
"    This program does not check for aliasing.                          ",
"                                                                       ",
d90 1
a90 1
 *    Nils Maercklin, RISSC, University of Napoli, Italy, 2006
d93 8
a100 8
 *    Aldridge, D. F. (1990). The Berlage wavelet. 
 *       Geophysics, vol. 55(11), p. 1508-1511.
 *    Alford, R., Kelly, K., and Boore, D. (1947). Accuracy
 *       of finite-difference modeling of the acoustic wave
 *       equation. Geophysics, vol. 39, p. 834-842. (AKB wavelet)
 *    Sheriff, R. E. (2002). Encyclopedic dictionary of 
 *       applied geophysics. Society of Exploration Geophysicists,
 *       Tulsa. (Ricker wavelet, page 301)
d103 2
a104 2
 *    For more information on the wavelets type "sudoc waveforms" 
 *    or have a look at "$CWPROOT/src/cwp/lib/waveforms.c".
d107 1
a107 1
 *    CWP, the authors of the subroutines in "waveforms.c".
d118 149
a266 149
    char *wtype=NULL;    /* wavelet type */
    int nt;              /* number of trace samples */
    float dt;            /* time sampling in seconds */
    float fpeak;         /* peak of maximum frequency in Hz */
    float *wavelet=NULL; /* wavelet */
    float period;        /* period of ricker2 wavelet */
    float half;          /* half-length of ricker2 in seconds */
    int hlw;             /* half-length of ricker2 in samples */
    float ampl;          /* amplitude scale factor (ricker2, berlage) */
    float distort;       /* distortion factor of ricker2 */
    float tn;            /* non-negative time exponent (berlage wavelet) */
    float decay;         /* non-negative exponential decay factor (berlage) */
    float ipa;           /* initial phase angle in radians (berlage) */
    float tspike;        /* time of spike in seconds (spike wavelet) */
    int verbose=0;       /* flag: verbose option */
    

    /* Initialize */
    initargs(argc, argv);
    requestdoc(1);

    /* Get parameters and validate input */
    if (!getparfloat("dt", &dt)) dt=0.004;
    if (dt<=0.0) err("dt=%g must be positive", dt);
    if (!getparfloat("fpeak", &fpeak)) fpeak=20.0;
    if (fpeak<=0.0) err("fpeak=%g must be positive", fpeak);
    if (!getparfloat("half", &half)) half=1.0/fpeak;
    if (half<=0.0) err("half=%g must be positive", half);
    if (!getparfloat("period", &period)) period=half*0.77969680123;
    if (period<=0.0) err("period=%g must be positive", period);
    if (!getparfloat("tspike", &tspike)) tspike=0.0;
    if (tspike<0.0) err("tspike=%g must be non-negative", tspike);    
    if (!getparfloat("ampl", &ampl)) ampl=1.0;
    if (!getparfloat("distort", &distort)) distort=0.0;
    if (!getparfloat("tn", &tn)) tn=2.0;
    if (tn<0.0) err("tn=%g must be non-negative", tn);  
    if (!getparfloat("decay", &decay)) decay=4.0*fpeak;
    if (decay<0.0) err("decay=%g must be non-negative", decay);  
    if (!getparfloat("ipa", &ipa)) ipa=-90.0;
    ipa *= PI/180.0;

    if (!getparint("verbose", &verbose)) verbose=0;
    if (!getparstring("type", &wtype)) wtype="akb";

    /* Alias "ricker" for "ricker1" */
    if (STREQ(wtype,"ricker")) wtype="ricker1";
    
    /* Get number of samples or estimate "useful" trace length */
    if (!getparint("ns", &nt) && !getparint("nt", &nt)) {
        if (STREQ(wtype,"berlage")) {
            if (decay) {
                /* empiric trace-length estimate */
                nt = NINT((floor(fpeak*(8.0+2.0*tn)/decay))/(dt*fpeak))+1;
            }
            else {
                nt = NINT( 2.0 / (dt*fpeak))+1;
            }
        }
        else if (STREQ(wtype,"ricker1")) {
            nt = NINT(2.0/(fpeak*dt))+1;
        }
        else if (STREQ(wtype,"ricker2")) {
            nt = NINT(2.0*half/dt)+1;
        }
        else if (STREQ(wtype,"gauss")) {
            nt = NINT(2.0/(fpeak*dt))+1;
        }
        else if (STREQ(wtype,"gaussd")) {
            nt = NINT(2.0/(fpeak*dt))+1;
        }
        else if (STREQ(wtype,"akb")) {
            nt = NINT(4.0/(fpeak*dt))+1;
        }
        else if (STREQ(wtype,"spike")) {
            nt = NINT(tspike/dt)+5;
        }
        else if (STREQ(wtype,"unit")) {
            nt = NINT(half/dt)+1;
        }
        else {
            err("unknown wavelet type=%s", wtype);
        }
    };
    
    /* Check trace length */
    if (nt<1) {
        warn("ns=%d too small, using ns=1", nt); nt=1;
    }
    if (nt>SU_NFLTS) {
        warn("trace too long, using maximum ns=%d", SU_NFLTS);
        nt=SU_NFLTS;
    }
    
    /* Allocate space for wavelet */
    wavelet=ealloc1float(nt);
    
    /* Compute wavelet */
    if (STREQ(wtype,"berlage")) {
        berlage_wavelet (nt, dt, fpeak, ampl, tn, decay, ipa, wavelet);
    }
    else if (STREQ(wtype,"ricker1")) {
        ricker1_wavelet (nt, dt, fpeak, wavelet);
        tr.delrt=-NINT(1000.0/(fpeak));
    }
    else if (STREQ(wtype,"ricker2")) {
        hlw=NINT(half/dt);
        if (hlw==0) hlw=1;
        ricker2_wavelet (hlw, dt, period, ampl, distort, wavelet);
        if (!distort) tr.delrt=-NINT(1000.0*half);
    }
    else if (STREQ(wtype,"gauss")) {
        gaussian_wavelet (nt, dt, fpeak, wavelet);
        tr.delrt=-NINT(1000.0/(fpeak));
    }
    else if (STREQ(wtype,"gaussd")) {
        gaussderiv_wavelet (nt, dt, fpeak, wavelet);
    }
    else if (STREQ(wtype,"akb")) {
        akb_wavelet (nt, dt, fpeak, wavelet);
    }
    else if (STREQ(wtype,"spike")) {
        spike_wavelet (nt, NINT(tspike/dt), wavelet);
    }
    else if (STREQ(wtype,"unit")) {
        unit_wavelet (nt, wavelet);
    }
    else {
        err("unknown wavelet type=%s", wtype);
    }

    
    /* Copy wavelet to trace and set header */
    memcpy((void *) tr.data, (const void *) wavelet, nt*FSIZE);
    tr.tracl = 1;
    tr.dt = (int) (dt*1000000.0);
    tr.ns = nt;
    tr.trid = 1;
    
    /* Write trace to stdout */
    puttr(&tr);
    
    /* Free space */
    free1float(wavelet);

    /* Echo trace length, if verbose=1 */
    if (verbose) {
        warn("%s wavelet with %d samples (%g seconds)", \
            wtype, nt, dt*(float)(nt-1));
    }
d268 1
a268 1
    return(CWP_Exit());
@


1.4
log
@tr.tracl
@
text
@d1 4
a4 1
/* SUWAVEFORM: $Revision: 1.3 $ ; $Date: 2007/02/16 18:28:44 $        */
@


1.3
log
@Nils Maercklin added Gaussian and Gaussain derivative waveform.
@
text
@d1 1
a1 1
/* SUWAVEFORM: $Revision: 1.2 $ ; $Date: 2006/10/25 22:15:39 $        */
d248 1
@


1.2
log
@moved berlage_wavelet to waveforms.c in cwp/lib
@
text
@d1 1
a1 1
/* SUWAVEFORM: $Revision: 1.1 $ ; $Date: 2006/09/04 19:27:43 $        */
d22 2
d32 2
a33 2
"    fpeak=20.0     peak frequency of a Berlage or Ricker wavelet, and  ",
"                   maximum frequency of an AKB wavelet in Hz           ",
d49 9
a57 5
"    The Ricker wavelets are zero-phase and can be defined either by    ",
"    the peak frequency fpeak (\"ricker1\") or by its half-length,      ",
"    the period, and a distortion factor (\"ricker2\"). Here, the       ",
"    trace header word delrt is set such that the peak amplitude is     ",
"    at t=0 seconds. \"ricker\" is an acceptable alias for \"ricker1\". ",
d75 2
a76 2
"    A normalized, zero-phase Ricker wavelet with a peak frequency of   ",
"    15 Hz is generated and convolved with a spike dataset:             ",
d93 2
a94 2
 *	     of finite-difference modeling of the acoustic wave
 *	     equation. Geophysics, vol. 39, p. 834-842.
d132 1
a132 1
    /* initialize */
d136 1
a136 1
    /* get parameters and validate input */
d159 1
a159 1
    /* alias "ricker" for "ricker1" */
d162 1
a162 1
    /* get number of samples or estimate "useful" trace length */
d179 6
d199 1
a199 1
    /* check trace length */
d208 1
a208 1
    /* allocate space for wavelet */
d211 1
a211 1
    /* compute wavelet */
d225 7
d246 1
a246 1
    /* copy wavelet to trace and set header */
d252 1
a252 1
    /* write trace to stdout */
d255 1
a255 1
    /* free space */
d258 1
a258 1
    /* echo trace length */
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/* SUWAVEFORM: $Revision: 1.21 $ ; $Date: 2006/04/13 17:26:28 $        */
a2 1
/* suwaveform.c - Nils Maercklin, 2006-07-24 */
a103 4
/* function prototypes */
void berlage_wavelet (int nt, float dt, float fpeak, float ampl, float tn, \
    float decay, float ipa, float *wavelet);

a246 43

/* Function used internally */

void berlage_wavelet (int nt, float dt, float fpeak, float ampl, float tn, \
    float decay, float ipa, float *wavelet)
/************************************************************************
berlage_wavelet -- Compute the time response of a source function as a
    Berlage wavelet with peak frequency "fpeak" Hz, exponential decay
    factor "decay", time exponent "tn", and initial phase angle "ipa".
*************************************************************************
Input:
nt         number samples in output wavelet
dt         time step
fpeak      peak frequency of the Berlage wavelet
ampl       wavelet amplitude
tn         non-negative time exponent (typically an integer number)
decay      non-negative exponential decay factor
ipa        initial phase angle in radians

Output:
wavelet    Berlage wavelet

*************************************************************************
References:
Aldridge, D. F. (1990). The Berlage wavelet. 
    Geophysics, vol. 55(11), p. 1508-1511, doi:10.1190/1.1442799.
Berlage, A. J. (1932). 
    Seismometer: Handbuch der Geophysik, vol. 4, p. 299-526.
*************************************************************************
Author: Nils Maercklin, July 2006
*************************************************************************/
{
    register int it;
    float t;

    for (it=0;it<nt;it++) {
        t = dt * (float)it;
        wavelet[it] = ampl * pow(t,tn) * exp(-decay*t) * \
            cos(2.0*PI*fpeak*t + ipa);
    }
}

/* END OF FILE */
@
