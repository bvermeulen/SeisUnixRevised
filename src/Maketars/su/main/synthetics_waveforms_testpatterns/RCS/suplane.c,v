head	1.20;
access;
symbols;
locks; strict;
comment	@ * @;


1.20
date	2011.11.12.00.40.42;	author john;	state Exp;
branches;
next	1.19;

1.19
date	2006.11.07.22.58.42;	author john;	state Exp;
branches;
next	1.18;

1.18
date	2003.06.09.16.17.07;	author john;	state Exp;
branches;
next	1.17;

1.17
date	2001.03.09.16.02.47;	author john;	state Exp;
branches;
next	1.16;

1.16
date	98.01.15.22.57.05;	author john;	state Exp;
branches;
next	1.15;

1.15
date	96.06.12.17.29.22;	author john;	state Exp;
branches;
next	1.14;

1.14
date	96.02.21.23.39.07;	author jkc;	state Exp;
branches;
next	1.13;

1.13
date	96.02.21.21.49.35;	author jkc;	state Exp;
branches;
next	1.12;

1.12
date	96.02.21.16.36.09;	author jkc;	state Exp;
branches;
next	1.11;

1.11
date	96.02.20.23.00.29;	author jkc;	state Exp;
branches;
next	1.10;

1.10
date	96.02.05.16.21.16;	author jkc;	state Exp;
branches;
next	1.9;

1.9
date	96.01.29.17.06.37;	author jkc;	state Exp;
branches;
next	1.8;

1.8
date	94.08.25.15.00.32;	author jkc;	state Exp;
branches;
next	1.7;

1.7
date	93.11.24.15.53.52;	author john;	state Exp;
branches;
next	1.6;

1.6
date	92.10.26.12.47.09;	author john;	state Exp;
branches;
next	1.5;

1.5
date	91.09.05.08.51.33;	author jkcohen;	state Exp;
branches;
next	1.4;

1.4
date	91.03.17.09.08.46;	author jkc;	state Exp;
branches;
next	1.3;

1.3
date	91.02.14.14.02.42;	author jkc;	state Exp;
branches;
next	1.2;

1.2
date	90.04.28.20.06.29;	author jkc;	state Exp;
branches;
next	1.1;

1.1
date	90.04.19.20.17.56;	author jkc;	state Exp;
branches;
next	;


desc
@Synthetic data generator
@


1.20
log
@copyright
@
text
@/* Copyright (c) Colorado School of Mines, 2011.*/
/* All rights reserved.                       */

/* SUPLANE: $Revision: 1.19 $ ; $Date: 2006/11/07 22:58:42 $	*/

#include "su.h"
#include "segy.h"

/*********************** self documentation **********************/
char *sdoc[] = {
"								",
"SUPLANE - create common offset data file with up to 3 planes	",
"								",
"suplane [optional parameters] >stdout	 			",
"								",
"Optional Parameters:						",
" npl=3			number of planes			",
" nt=64 		number of time samples			",
" ntr=32		number of traces			",
" taper=0		no end-of-plane taper			",
"			= 1 taper planes to zero at the end	",
" offset=400 		offset					",
" dt=0.004	 	time sample interval in seconds		",
"...plane 1 ...							",
"	dip1=0		dip of plane #1 (ms/trace)		",
" 	len1= 3*ntr/4	HORIZONTAL extent of plane (traces)	",
"	ct1= nt/2	time sample for center pivot	 	",
"	cx1= ntr/2	trace for center pivot			",
"...plane 2 ...							",
"	dip2=4		dip of plane #2 (ms/trace)		",
"	len2= 3*ntr/4	HORIZONTAL extent of plane (traces)	",
"	ct2= nt/2	time sample for center pivot 		",
"	cx2= ntr/2	trace for center pivot			",
"...plane 3 ...							",
"	dip3=8		dip of plane #3 (ms/trace)		",
"	len3= 3*ntr/4	HORIZONTAL extent of plane (traces)	",
"	ct3= nt/2	time sample for center pivot		",
"	cx3= ntr/2	trace for center pivot			",
"								",
" liner=0	use parameters					",
"			= 1 parameters set for 64x64 data set   ",
"			with separated dipping planes.		",
NULL};

/* Credits:
 *	CWP: Chris Liner
 *
 * Trace header fields set: ns, dt, offset, tracl
 */
/**************** end self doc ***********************************/


#define NT	64
#define NTR	32
#define DT	0.004
#define OFF	400
#define NPL	3


segy tr;

int
main(int argc, char **argv)
{
	float dip1;		/* time-dip of plane 1 (ms/trace)	*/
	float dip2;		/* time-dip of plane 2 (ms/trace)	*/
	float dip3;		/* time-dip of plane 3 (ms/trace)	*/
	float dt;		/* time sample interval in seconds 	*/
	float eps;		/* fit - itless (for linear interpol)	*/
	float fit;		/* fractional time sample		*/
	float offset;		/* constant offset for header 		*/
	int ct1,cx1;		/* center of plane 1 (sample and trace)	*/
	int ct2,cx2;		/* center of plane 2 (sample and trace)	*/
	int ct3,cx3;		/* center of plane 3 (sample and trace)	*/
	int itless;		/* sample above plane intersection	*/
	int itmore;		/* sample below plane intersection 	*/
	int itr;		/* trace counter			*/
	int len1;		/* HORIZ extent of plane 1		*/
	int len2;		/* HORIZ extent of plane 2		*/
	int len3;		/* HORIZ extent of plane 3		*/
	int liner;		/* flag for special output section	*/
	float msps;		/* milliseconds per sample 		*/
	int npl;		/* number of planes 			*/
	int nt;			/* time samples in outdata		*/
	int ntr;		/* traces in outdata			*/
	int tfe1;		/* traces-from-end of plane 1 (for taper) */
	int tfe2;		/* traces-from-end of plane 2 (for taper) */
	int tfe3;		/* traces-from-end of plane 3 (for taper) */
	int taper;		/* flag to taper plane ends to zero	*/


	/* Initialize */
	initargs(argc, argv);
	requestdoc(0); /* stdin not used */


	/* set parameters and fill header fields */
	nt = NT;	getparint("nt", &nt);
	CHECK_NT("nt",nt);				tr.ns = nt;
	ntr = NTR;	getparint("ntr", &ntr);
	dt = DT;	getparfloat("dt", &dt);		tr.dt = NINT(dt*1000000.);
	offset=OFF;	getparfloat("offset", &offset);	tr.offset = offset;
	npl = NPL;	getparint("npl", &npl);
	taper = 0;	getparint("taper", &taper);

	/* set defaults and/or get parameters for plane 1 */
	dip1 = 0;	getparfloat("dip1", &dip1);
	len1 = 3*ntr/4;	getparint("len1", &len1);
	ct1 = nt/2;	getparint("ct1", &ct1);		ct1 -= 1;
	cx1 = ntr/2;	getparint("cx1", &cx1);		cx1 -= 1;

	/* set defaults and/or get parameters for plane 2 */
	dip2 = 4;	getparfloat("dip2", &dip2);
	len2 = 3*ntr/4;	getparint("len2", &len2);
	ct2 = nt/2;	getparint("ct2", &ct2);		ct2 -= 1;
	cx2 = ntr/2;	getparint("cx2", &cx2);		cx2 -= 1;	

	/* set defaults and/or get parameters for plane 3 */
	dip3 = 8;	getparfloat("dip3", &dip3);
	len3 = 3*ntr/4;	getparint("len3", &len3);
	ct3 = nt/2;	getparint("ct3", &ct3);		ct3 -= 1;
	cx3 = ntr/2;	getparint("cx3", &cx3);		cx3 -= 1;	

	/* check if user wants the special output specified */
        /* by liner=1; if so, set parameters accordingly    */
	liner = 0;	getparint("liner", &liner);
	if (liner == 1) {
		nt = 64;	tr.ns = nt;
		ntr = 64;
		npl = 3;	

		dip1 = 0;
		len1 = ntr/4;	
		ct1 = nt/2;	ct1 -= 1;		
		cx1 = 3*ntr/4;	cx1 -= 1;

		dip2 = 4;
		len2 = ntr/4;	
		ct2 = nt/2;	ct2 -= 1;
		cx2 = ntr/2;	cx2 -= 1;	

		dip3 = 8;
		len3 = ntr/4;	
		ct3 = nt/2;	ct3 -= 1;
		cx3 = ntr/4;	cx3 -= 1;	
	}

	/* calculate milliseconds per sample */
	msps = dt*1000.0;	

	tfe1 = 0; tfe2 = 0; tfe3 = 0;
	for (itr = 0; itr < ntr; itr++) {
		memset( (void *) tr.data, 0, nt * FSIZE);

		/* plane 1 */
		if (itr >= cx1-len1/2 && itr <= cx1+len1/2) {
		    ++tfe1;

		    /* fit is fractional sample of plane intersection */
		    fit = ct1 - ( cx1 - itr ) * dip1 / msps; 
		    if (fit >= 0 && fit <= (float) nt) {

			/* linear interpolation */
			itless = fit;
			eps = fit - itless;
			itmore = fit + 1;
			tr.data[itless] += 1.0 - eps;	 
			tr.data[itmore] += eps;	 

			/* taper option */
			if (taper == 1) {
			  /* last point */
			  if (tfe1 == 1 || tfe1 == len1 + 1) {
				tr.data[itless] /= 6.0;	 
				tr.data[itmore] /= 6.0;	 
			  } 
			  /*  next-to-last point */
			  if (tfe1 == 2 || tfe1 == len1) {
				tr.data[itless] /= 3.0;	 
				tr.data[itmore] /= 3.0;	 
			  } 
		    }
		  }
		}

		/*  plane 2  */
		if (npl > 1) {
		  if (itr >= cx2-len2/2 && itr <= cx2+len2/2) {
		    ++tfe2;

		    /* fit is fractional sample of plane intersection */
		    fit = ct2 - ( cx2 - itr ) * dip2 / msps; 
		    if (fit >= 0 && fit <= (float) nt) {

			/* linear interpolation */
			itless = fit;
			eps = fit - itless;
			itmore = fit + 1;
			tr.data[itless] += 1.0 - eps;	 
			tr.data[itmore] += eps;	 

			/* taper option */
			if (taper == 1) {
			  /* last point */
			  if (tfe2 == 1 || tfe2 == len2 + 1) {
				tr.data[itless] /= 6.0;	 
				tr.data[itmore] /= 6.0;	 
			  } 
			  /*  next-to-last point */
			  if (tfe2 == 2 || tfe2 == len2) {
				tr.data[itless] /= 3.0;	 
				tr.data[itmore] /= 3.0;	 
			  } 
		        }
		    }
		  }
		}

		/* plane 3  */
		if (npl > 2) {
		  if (itr >= cx3-len3/2 && itr <= cx3+len3/2) {
		    ++tfe3;

		    /* fit is fractional sample of plane intersection */
		    fit = ct3 - ( cx3 - itr ) * dip3 / msps; 
		    if (fit >= 0 && fit <= (float) nt) {

			/* linear interpolation */
			itless = fit;
			eps = fit - itless;
			itmore = fit + 1;
			tr.data[itless] += 1.0 - eps;	 
			tr.data[itmore] += eps;	 

			/* taper option */
			if (taper == 1) {
			  /* last point */
			  if (tfe3 == 1 || tfe3 == len3 + 1) {
				tr.data[itless] /= 6.0;	 
				tr.data[itmore] /= 6.0;	 
			  } 
			  /* next-to-last point */
			  if (tfe3 == 2 || tfe3 == len3) {
				tr.data[itless] /= 3.0;	 
				tr.data[itmore] /= 3.0;	 
			  } 
		        }
		    }
		  }
		}

		/* fill tracl/tracr headers and put trace out */
		tr.tracl = tr.tracr = itr + 1;
		puttr(&tr);
	}
	
	return(CWP_Exit());
}
@


1.19
log
@changed    memset( .., (int) '\0',...) to memset( .., 0,..) as per suggestion of Marion Zhu and Reg Beardsley
@
text
@d1 4
a4 1
/* SUPLANE: $Revision: 1.18 $ ; $Date: 2003/06/09 16:17:07 $	*/
@


1.18
log
@9 June 2003
@
text
@d1 1
a1 1
/* SUPLANE: $Revision: 1.17 $ ; $Date: 2001/03/09 16:02:47 $	*/
d150 1
a150 1
		memset( (void *) tr.data, (int) '\0', nt * FSIZE);
@


1.17
log
@fixed a bug in the setting of dt.
@
text
@d1 1
a1 1
/* SUPLANE: $Revision: 1.16 $ ; $Date: 1998/01/15 22:57:05 $	*/
a252 1

d254 1
a254 1
	return EXIT_SUCCESS;
@


1.16
log
@cosmetic changes to selfdoc
@
text
@d1 1
a1 1
/* SUPLANE: $Revision: 1.15 $ ; $Date: 1996/06/12 17:29:22 $	*/
d98 1
a98 1
	dt = DT;	getparfloat("dt", &dt);		tr.dt = dt*1000000;
@


1.15
log
@changed declaration of msps from int to float
@
text
@d1 1
a1 1
/* SUPLANE: $Revision: 1.14 $ ; $Date: 1996/02/21 23:39:07 $	*/
d11 1
a11 1
"suplane [optional parameters] > out_data_file  		",
d14 4
a17 4
"	npl=3		number of planes			",
"	nt=64 		number of time samples			",
"	ntr=32		number of traces			",
"	taper=0		no end-of-plane taper			",
d19 2
a20 2
" 	offset=400 	offset					",
" 	dt=0.004 	time sample interval in seconds		",
d23 1
a23 1
"	len1= 3*ntr/4	HORIZONTAL extent of plane (traces)	",
d37 1
a37 1
"	liner=0	use parameters					",
@


1.14
log
@Using two argument CHECK_NT macro to check the relevant time sample
quantity.
@
text
@d1 1
a1 1
/* SUPLANE: $Revision: 1.13 $ ; $Date: 1996/02/21 21:49:35 $	*/
d79 1
a79 1
	int msps;		/* milliseconds per sample 		*/
@


1.13
log
@Satisfied -Wall on two minor points.
@
text
@d1 1
a1 1
/* SUPLANE: $Revision: 1.12 $ ; $Date: 1996/02/21 16:36:09 $	*/
d96 1
a96 1
	CHECK_NT(nt);					tr.ns = nt;
@


1.12
log
@Using CHECK_NT macro.
Set tracr as well as tracl.
@
text
@d1 1
a1 1
/* SUPLANE: $Revision: 1.11 $ ; $Date: 1996/02/20 23:00:29 $	*/
d46 1
a46 1

d59 1
@


1.11
log
@Protect against nt >SU_NFLTS.
@
text
@d1 1
a1 1
/* SUPLANE: $Revision: 1.10 $ ; $Date: 1996/02/05 16:21:16 $	*/
d95 1
a95 2
	if (nt > SU_NFLTS) err("Cannot have nt=%d > SU_NFLTS=%d",nt,SU_NFLTS);
        else tr.ns = nt;
d248 2
a249 2
		/* fill tracl header and put trace out */
		tr.tracl = itr + 1;
@


1.10
log
@Deal with header words accessed/modified down to sudoc.
Cosmetics.
@
text
@d1 1
a1 1
/* SUPLANE: $Revision: 1.9 $ ; $Date: 1996/01/29 17:06:37 $	*/
d94 3
a96 1
	nt = NT;	getparint("nt", &nt);		tr.ns = nt;
@


1.9
log
@Say sampling INTERVAL instead of rate to make Ken happy.
@
text
@d1 1
a1 1
/* SUPLANE: $Revision: 1.8 $ ; $Date: 1994/08/25 15:00:32 $	*/
d45 2
a46 1
 */
d104 1
a104 1
	ct1 = nt/2;	getparint("ct1", &ct1);		ct1 -= 1;		
@


1.8
log
@Removed copyright statement from codes that had it.
Moved self-doc line for sudoc.
@
text
@d1 1
a1 1
/* SUPLANE: $Revision: 1.7 $ ; $Date: 93/11/24 15:53:52 $	*/
d11 1
a11 1
"suplane [optional parameters] > out_data_file  			",
d20 1
a20 1
" 	dt=0.004 	time sample rate in seconds		",
d63 1
a63 1
	float dt;		/* time sample rate in seconds 		*/
@


1.7
log
@changed bzero to memset
@
text
@d1 1
a1 1
/* SUPLANE: $Revision: 1.6 $ ; $Date: 92/10/26 12:47:09 $	*/
a2 13
/*----------------------------------------------------------------------
 * Copyright (c) Colorado School of Mines, 1990.
 * All rights reserved.
 *
 * This code is part of SU.  SU stands for Seismic Unix, a processing line
 * developed at the Colorado School of Mines, partially based on Stanford
 * Exploration Project (SEP) software.  Inquiries should be addressed to:
 *
 *  Jack K. Cohen, Center for Wave Phenomena, Colorado School of Mines,
 *  Golden, CO 80401  (jkc@@dix.mines.colorado.edu)
 *----------------------------------------------------------------------
 */

a40 1
/**************** end self doc ***********************************/
d46 1
@


1.6
log
@new selfdoc installed
@
text
@d1 1
a1 1
/* SUPLANE: $Revision: 1.5 $ ; $Date: 91/09/05 08:51:33 $	*/
d160 1
a160 1
		bzero(tr.data, nt * FSIZE);
@


1.5
log
@string -> String and so forth
@
text
@d1 1
a1 1
/* SUPLANE: $Revision: 1.3 $ ; $Date: 91/02/14 14:02:42 $	*/
d20 34
a53 34
String sdoc = "\
								\n\
SUPLANE - create common offset data file with up to 3 planes	\n\
								\n\
suplane [optional parameters] > out_data_file  			\n\
								\n\
Optional Parameters:						\n\
	npl=3		number of planes			\n\
	nt=64 		number of time samples			\n\
	ntr=32		number of traces			\n\
	taper=0		no end-of-plane taper			\n\
			= 1 taper planes to zero at the end	\n\
 	offset=400 	offset					\n\
 	dt=0.004 	time sample rate in seconds		\n\
...plane 1 ...							\n\
	dip1=0		dip of plane #1 (ms/trace)		\n\
	len1= 3*ntr/4	HORIZONTAL extent of plane (traces)	\n\
	ct1= nt/2	time sample for center pivot	 	\n\
	cx1= ntr/2	trace for center pivot			\n\
...plane 2 ...							\n\
	dip2=4		dip of plane #2 (ms/trace)		\n\
	len2= 3*ntr/4	HORIZONTAL extent of plane (traces)	\n\
	ct2= nt/2	time sample for center pivot 		\n\
	cx2= ntr/2	trace for center pivot			\n\
...plane 3 ...							\n\
	dip3=8		dip of plane #3 (ms/trace)		\n\
	len3= 3*ntr/4	HORIZONTAL extent of plane (traces)	\n\
	ct3= nt/2	time sample for center pivot		\n\
	cx3= ntr/2	trace for center pivot			\n\
								\n\
	liner=0	use parameters 				\n\
			= 1 parameters set for 64x64 data set   \n\
			with separated dipping planes.		\n\
";
d57 1
a57 1
 *	CWP: Chris
d102 1
a102 1
	askdoc(0); /* stdin not used */
@


1.4
log
@tweak
@
text
@d20 1
a20 1
string sdoc = "\
d50 1
a50 1
	liner=0		use parameters 				\n\
d106 6
a111 6
	nt = NT;	igetpar("nt", &nt);		tr.ns = nt;
	ntr = NTR;	igetpar("ntr", &ntr);
	dt = DT;	fgetpar("dt", &dt);		tr.dt = dt*1000000;
	offset=OFF;	fgetpar("offset", &offset);	tr.offset = offset;
	npl = NPL;	igetpar("npl", &npl);
	taper = 0;	igetpar("taper", &taper);
d114 4
a117 4
	dip1 = 0;	fgetpar("dip1", &dip1);
	len1 = 3*ntr/4;	igetpar("len1", &len1);
	ct1 = nt/2;	igetpar("ct1", &ct1);		ct1 -= 1;		
	cx1 = ntr/2;	igetpar("cx1", &cx1);		cx1 -= 1;
d120 4
a123 4
	dip2 = 4;	fgetpar("dip2", &dip2);
	len2 = 3*ntr/4;	igetpar("len2", &len2);
	ct2 = nt/2;	igetpar("ct2", &ct2);		ct2 -= 1;
	cx2 = ntr/2;	igetpar("cx2", &cx2);		cx2 -= 1;	
d126 4
a129 4
	dip3 = 8;	fgetpar("dip3", &dip3);
	len3 = 3*ntr/4;	igetpar("len3", &len3);
	ct3 = nt/2;	igetpar("ct3", &ct3);		ct3 -= 1;
	cx3 = ntr/2;	igetpar("cx3", &cx3);		cx3 -= 1;	
d133 1
a133 1
	liner = 0;	igetpar("liner", &liner);
@


1.3
log
@Don't set tr.ntr anymore
@
text
@d1 1
a1 1
/* SUPLANE: $Revision: 1.2 $ ; $Date: 90/04/28 20:06:29 $	*/
d50 1
a50 1
	liner=0	use parameters 				\n\
@


1.2
log
@Changed dip defaults to steeper to avoid the middle plane losing
half its amplitude every other trace.
@
text
@d1 1
a1 1
/* SUPLANE: $Revision: 1.1 $ ; $Date: 90/04/19 20:17:56 $	*/
d107 1
a107 1
	ntr = NTR;	igetpar("ntr", &ntr);		tr.ntr = ntr;
d136 1
a136 1
		ntr = 64;	tr.ntr = ntr;
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/* SUPLANE: $Revision: 2.9 $ ; $Date: 89/06/16 12:04:01 $	*/
d12 1
a12 1
 *  Golden, CO 80401  (isis!csm9a!jkcohen)
d27 4
a30 4
	npl = 3		number of planes			\n\
	nt = 64 	number of time samples			\n\
	ntr = 32	number of traces			\n\
	taper = 0	no end-of-plane taper			\n\
d32 2
a33 2
 	offset = 400 	offset					\n\
 	dt = 0.004 	time sample rate in seconds		\n\
d35 4
a38 4
	dip1 = 0	dip of plane #1 (ms/trace)		\n\
	len1 = 3*ntr/4	HORIZONTAL extent of plane (traces)	\n\
	ct1 = nt/2	time sample for center pivot	 	\n\
	cx1 = ntr/2	trace for center pivot			\n\
d40 4
a43 4
	dip2 = 2	dip of plane #2 (ms/trace)		\n\
	len2 = 3*ntr/4	HORIZONTAL extent of plane (traces)	\n\
	ct2 = nt/2	time sample for center pivot 		\n\
	cx2 = ntr/2	trace for center pivot			\n\
d45 4
a48 4
	dip3 = 4	dip of plane #3 (ms/trace)		\n\
	len3 = 3*ntr/4	HORIZONTAL extent of plane (traces)	\n\
	ct3 = nt/2	time sample for center pivot		\n\
	cx3 = ntr/2	trace for center pivot			\n\
d50 1
a50 1
	liner = 0	use parameters 				\n\
a58 1
 *
a60 5
/* Embed Revision Control System identifier strings */
static string progid =
	"   $Source: /src/su/src/RCS/suplane.c,v $";
static string revid =
	"   $Revision: 2.9 $ ; $Date: 89/06/16 12:04:01 $";
a61 1

d71 1
a71 2
main(argc,argv)
int argc; char **argv;
a101 5
	if (!igetpar("ID", &ID)) ID = 0;
	if (ID) {
		(void) fprintf(stderr, "%s\n", progid);
		(void) fprintf(stderr, "%s\n", revid);
	}
d120 1
a120 1
	dip2 = 2;	fgetpar("dip2", &dip2);
d126 1
a126 1
	dip3 = 4;	fgetpar("dip3", &dip3);
d144 1
a144 1
		dip2 = 2;
d149 1
a149 1
		dip3 = 4;
@
