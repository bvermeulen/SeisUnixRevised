head	1.27;
access;
symbols;
locks; strict;
comment	@ * @;


1.27
date	2011.11.16.23.14.54;	author john;	state Exp;
branches;
next	1.26;

1.26
date	2011.11.12.00.24.32;	author john;	state Exp;
branches;
next	1.25;

1.25
date	2006.10.31.22.03.52;	author john;	state Exp;
branches;
next	1.24;

1.24
date	2006.03.15.17.54.08;	author john;	state Exp;
branches;
next	1.23;

1.23
date	2003.06.09.16.17.07;	author john;	state Exp;
branches;
next	1.22;

1.22
date	2000.09.22.17.27.15;	author john;	state Exp;
branches;
next	1.21;

1.21
date	99.04.05.17.09.07;	author john;	state Exp;
branches;
next	1.20;

1.20
date	98.01.15.21.11.03;	author john;	state Exp;
branches;
next	1.19;

1.19
date	98.01.15.21.06.40;	author john;	state Exp;
branches;
next	1.18;

1.18
date	96.09.13.21.49.05;	author john;	state Exp;
branches;
next	1.17;

1.17
date	96.05.02.19.31.41;	author jkc;	state Exp;
branches;
next	1.16;

1.16
date	96.02.06.15.07.53;	author jkc;	state Exp;
branches;
next	1.15;

1.15
date	95.03.08.12.46.43;	author jkc;	state Exp;
branches;
next	1.14;

1.14
date	95.02.28.13.47.08;	author jkc;	state Exp;
branches;
next	1.13;

1.13
date	94.08.25.15.01.01;	author jkc;	state Exp;
branches;
next	1.12;

1.12
date	93.11.24.16.11.41;	author john;	state Exp;
branches;
next	1.11;

1.11
date	93.08.09.15.19.59;	author john;	state Exp;
branches;
next	1.10;

1.10
date	92.10.23.16.18.39;	author john;	state Exp;
branches;
next	1.9;

1.9
date	91.10.16.13.52.02;	author jkc;	state Exp;
branches;
next	1.8;

1.8
date	91.09.05.08.51.56;	author jkcohen;	state Exp;
branches;
next	1.7;

1.7
date	91.06.18.10.36.16;	author jkcohen;	state Exp;
branches;
next	1.6;

1.6
date	90.11.28.11.19.50;	author jkc;	state Exp;
branches;
next	1.5;

1.5
date	90.11.27.22.00.00;	author jkc;	state Exp;
branches;
next	1.4;

1.4
date	90.11.15.10.43.43;	author jkc;	state Exp;
branches;
next	1.3;

1.3
date	90.06.05.15.51.35;	author jkc;	state Exp;
branches;
next	1.2;

1.2
date	90.06.04.23.25.50;	author jkc;	state Exp;
branches;
next	1.1;

1.1
date	90.04.20.20.40.34;	author jkc;	state Exp;
branches;
next	;


desc
@stack on any key word (after sorting)
@


1.27
log
@added Reg Beardsley's checkpar()
@
text
@/* Copyright (c) Colorado School of Mines, 2011.*/
/* All rights reserved.                       */

/* SUSTACK: $Revision: 1.25 $ ; $Date: 2006/10/31 22:03:52 $	*/

#include "su.h"
#include "segy.h"

/*********************** self documentation **********************/
char *sdoc[] = {
" 								",
" SUSTACK - stack adjacent traces having the same key header word",
" 								",
"     sustack <stdin >stdout [Optional parameters]		",
" 							        ",
" Required parameters:						",
" 	none							",
" 							        ",
" Optional parameters: 						",
" 	key=cdp		header key word to stack on		",
" 	normpow=1.0	each sample is divided by the		",
"			normpow'th number of non-zero values	",
"			stacked (normpow=0 selects no division)	",
"	repeat=0	=1 repeats the stack trace nrepeat times",
"	nrepeat=10	repeats stack trace nrepeat times in	",
"	          	output file				",
" 	verbose=0	verbose = 1 echos information		",
" 							        ",
" Notes:							",
" ------							",
" The offset field is set to zero on the output traces, unless	",
" the user is stacking with key=offset. In that case, the value ",
" of the offset field is left unchanged. 		        ",
" 							        ",
" Sushw can be used afterwards if this is not acceptable.	",
"								",
" For VSP users:						",
" The stack trace appears ten times in the output file when	",
" setting repeat=1 and nrepeat=10. Corridor stacking can be	",
" achieved by properly muting the upgoing data with SUMUTE	",
" before stacking.						",
"								",
NULL};

/* Credits:
 *	SEP: Einar Kjartansson
 *	CWP: Jack K. Cohen, Dave Hale
 *	CENPET: Werner M. Heigl - added repeat trace functionality
 *
 * Note:
 *	The "valxxx" subroutines are in su/lib/valpkge.c.  In particular,
 *      "valcmp" shares the annoying attribute of "strcmp" that
 *		if (valcmp(type, val, valnew) {
 *			...
 *		}
 *	will be performed when val and valnew are different.
 *
 * Trace header fields accessed: ns
 * Trace header fields modified: nhs, tracl, offset
 */
/**************** end self doc ***********************************/


segy intrace, outtrace;

int
main(int argc, char **argv)
{
	cwp_String key;	/* header key word from segy.h		*/
	cwp_String type;/* ... its type				*/
	int indx;	/* ... its index			*/
	int nt;		/* number of data points on trace	*/
	int nsegy;	/* number of bytes in the segy		*/
	Value val;	/* value of key in current gather	*/
	Value valnew;	/* value of key in trace being treated	*/
	int fold;	/* number of traces stacked		*/
	int *nnz;	/* number of non-zero values stacked	*/
	float normpow;	/* divide by nnz[i]^normpow		*/
	int newtracl;	/* tracl for stacked traces		*/
	int repeat;	/* flag for stack trace repeating	*/
	int nrepeat;	/* no. of times stack trace is repeated	*/
	int verbose;	/* verbose flag				*/

	cwp_Bool is_offset=cwp_false;	/* stacking on offset?  */


	/* Initialize */
	initargs(argc, argv);
	requestdoc(1);


	/* Set parameters */
	if (!getparint   ("verbose", &verbose))	 verbose = 0;
	if (!getparfloat ("normpow", &normpow))	 normpow = 1.0;
	if (!getparstring("key", &key))		 key = "cdp";
	if (!getparint   ("repeat",&repeat))	 repeat = 0;
	if (!getparint   ("nrepeat",&nrepeat))	 nrepeat = 10;


        checkpars();

	if (STREQ(key,"offset"))		is_offset=cwp_true;

	type = hdtype(key);
	indx = getindex(key);

	/* Set up for first trace (must compare new key field each time) */
	nsegy = gettr(&intrace);
	nt = intrace.ns;
	memcpy( (void *) &outtrace, (const void *) &intrace, nsegy);
	nnz = ealloc1int(nt);
	{ register int i;
	  for (i = 0; i < nt; i++){
		if (intrace.data[i] != 0.0)  nnz[i]=1;
		else nnz[i] = 0;
	  }
        }
	if (intrace.nhs!=0)
		fold = intrace.nhs;
	else
		fold = 1;


	/* Loop over traces */
	newtracl = 1;
	gethval(&intrace, indx, &val);
	while (nsegy) {		     /* While previous trace non-empty */
		nsegy = gettr(&intrace);
		gethval(&intrace, indx, &valnew);
		if (valcmp(type, val, valnew) || !nsegy) {	
			/* Either val and valnew differ, indicating a  */
			/* new gather or nsegy is zero, indicating the */
		        /* end of the traces.                          */
			if (verbose) {
				fprintf(stderr, "val=");
				fprintfval(stderr, type, val);
				fprintf(stderr, "\tfold=%d\n", fold);
			}

			/* Add header info and output stack */
			outtrace.nhs = fold;
			outtrace.tracl = newtracl++;
			if(!is_offset) outtrace.offset = 0;
			if (normpow && fold != 1) {
			        register int i;
				for (i = 0; i < nt; ++i) {
				    float nnzi = nnz[i];
				    if (nnzi)
					outtrace.data[i] /= pow(nnzi, normpow);
				}
			}
			if (repeat) {
				register int i;
				for (i=0;i<nrepeat;i++)
					puttr(&outtrace);
			} else	puttr(&outtrace);

			/* Set up for next gather */
			memcpy( (void *) &outtrace,
					(const void *) &intrace, nsegy);
			{ register int i;
	  		  for (i = 0; i < nt; i++){
				if (intrace.data[i] != 0.0)  nnz[i]=1;
				else nnz[i] = 0;
			  }
			}

			if (intrace.nhs!=0)
				fold = intrace.nhs;
			else
				fold = 1;

			val = valnew;

		} else {	/* still in same gather */
			register int i;
			for (i = 0; i < nt; ++i) {
				float datum = intrace.data[i];
				if (!(datum == 0.0))  ++nnz[i];
				outtrace.data[i] += datum;
			}
			++fold;
		}
	}


	return(CWP_Exit());
}
@


1.26
log
@copyright
@
text
@d99 3
@


1.25
log
@offset field unchanged if user is stacking on offset
@
text
@d1 4
a4 1
/* SUSTACK: $Revision: 1.24 $ ; $Date: 2006/03/15 17:54:08 $	*/
@


1.24
log
@Werner Heigl's additions
@
text
@d1 1
a1 1
/* SUSTACK: $Revision: 1.23 $ ; $Date: 2003/06/09 16:17:07 $	*/
d28 4
a31 1
" The offset field is set to zero on the output traces.		",
d81 2
d96 2
d137 1
a137 1
			outtrace.offset = 0;
@


1.23
log
@9 June 2003
@
text
@d1 1
a1 1
/* SUSTACK: $Revision: 1.22 $ ; $Date: 2000/09/22 17:27:15 $	*/
d21 3
d26 11
a36 2
" Note:	The offset field is set to zero on the output traces.	",
" 	Sushw can be used afterwards if this is not acceptable.	",
d42 1
d74 2
d88 2
d139 5
a143 1
			puttr(&outtrace);
@


1.22
log
@fixed fold and intrace deficiency
@
text
@d1 1
a1 1
/* SUSTACK: $Revision: 1.21 $ ; $Date: 1999/04/05 17:09:07 $	*/
d153 1
a153 1
	return EXIT_SUCCESS;
@


1.21
log
@cosmetic
@
text
@d1 1
a1 1
/* SUSTACK: $Revision: 1.20 $ ; $Date: 1998/01/15 21:11:03 $	*/
d88 4
a91 1
	fold = 1;
d133 6
a138 1
			fold = 1;
@


1.20
log
@massaged selfdoc
@
text
@d1 1
a1 1
/* SUSTACK: $Revision: 1.19 $ ; $Date: 1998/01/15 21:06:40 $	*/
d28 2
a29 2
 *	SEP: Einar
 *	CWP: Jack, Dave
@


1.19
log
@changed selfdoc
@
text
@d1 1
a1 1
/* SUSTACK: $Revision: 1.18 $ ; $Date: 1996/09/13 21:49:05 $	*/
d11 1
a11 1
"     sustack <input >output [Optional parameters]		",
@


1.18
log
@silenced -Wall messages
@
text
@d1 1
a1 1
/* SUSTACK: $Revision: 1.17 $ ; $Date: 1996/05/02 19:31:41 $	*/
d11 1
a11 1
" sustack <input >output key=cdp normpow=1.0 verbose=0		",
@


1.17
log
@./main/sustack.c
"sustack.c", line 54: warning: index redefinition hides earlier one
Changed it to indx.
@
text
@d1 1
a1 1
/* SUSTACK: $Revision: 1.16 $ ; $Date: 1996/02/06 15:07:53 $	*/
d47 1
@


1.16
log
@Deal with header fields accessed/modified down to sudoc.
@
text
@d1 1
a1 1
/* SUSTACK: $Revision: 1.15 $ ; $Date: 1995/03/08 12:46:43 $	*/
d51 1
a51 1
	int index;	/* ... its index			*/
d74 1
a74 1
	index = getindex(key);
d92 1
a92 1
	gethval(&intrace, index, &val);
d95 1
a95 1
		gethval(&intrace, index, &valnew);
@


1.15
log
@Trace header field access/mod documented.
@
text
@d1 1
a1 1
/* SUSTACK: $Revision: 1.14 $ ; $Date: 95/02/28 13:47:08 $	*/
a24 3
" 								",
" Trace header fields accessed: ns delrt			",
" Trace header fields modified: nhs, tracl, offset		",
d38 3
@


1.14
log
@Fixed nnz initialization bug.  Thx to Alexander Koek, Delft.
@
text
@d1 1
a1 1
/* SUSTACK: $Revision: 1.13 $ ; $Date: 94/08/25 15:01:01 $	*/
d26 2
@


1.13
log
@Removed copyright statement from codes that had it.
Moved self-doc line for sudoc.
@
text
@d1 1
a1 1
/* SUSTACK: $Revision: 1.12 $ ; $Date: 93/11/24 16:11:41 $	*/
d80 5
a84 2
	  for (i = 0; i < nt; ++i)  nnz[i] = 0;
	}
d122 4
a125 1
			  for (i = 0; i < nt; ++i)  nnz[i] = 0;
@


1.12
log
@put explicit casts in memcpy
@
text
@d1 1
a1 1
/* SUSTACK: $Revision: 1.11 $ ; $Date: 93/08/09 15:19:59 $	*/
a2 13
/*----------------------------------------------------------------------
 * Copyright (c) Colorado School of Mines, 1990.
 * All rights reserved.
 *
 * This code is part of SU.  SU stands for Seismic Unix, a processing line
 * developed at the Colorado School of Mines, partially based on Stanford
 * Exploration Project (SEP) software.  Inquiries should be addressed to:
 *
 *  Jack K. Cohen, Center for Wave Phenomena, Colorado School of Mines,
 *  Golden, CO 80401  (jkc@@dix.mines.colorado.edu)
 *----------------------------------------------------------------------
 */

a26 1
/**************** end self doc ***********************************/
d40 1
d48 1
a48 1
	cwp_String type;	/* ... its type				*/
@


1.11
log
@changed String to cwp_String
@
text
@d1 1
a1 1
/* SUSTACK: $Revision: 1.10 $ ; $Date: 92/10/23 16:18:39 $	*/
d90 1
a90 1
	memcpy(&outtrace, &intrace, nsegy);
d129 2
a130 1
			memcpy(&outtrace, &intrace, nsegy);
@


1.10
log
@new selfdoc installed
@
text
@d1 1
a1 1
/* SUSTACK: $Revision: 1.9 $ ; $Date: 91/10/16 13:52:02 $	*/
d60 2
a61 2
	String key;	/* header key word from segy.h		*/
	String type;	/* ... its type				*/
@


1.9
log
@Eliminated CLOSETO since data like 10^(-10) zeroed.
On advice of Dave and Craig, it doesn't make sense to
"nervous Nelly" the user's choices.
@
text
@d1 1
a1 1
/* SUSTACK: $Revision: 1.8 $ ; $Date: 91/09/05 08:51:56 $	*/
d20 20
a39 20
String sdoc =
" 								\n"
" SUSTACK - stack adjacent traces having the same key header word\n"
" 								\n"
" sustack <input >output key=cdp normpow=1.0 verbose=0		\n"
" 							        \n"
" Required parameters:						\n"
" 	none							\n"
" 							        \n"
" Optional parameters: 						\n"
" 	key=cdp		header key word to stack on		\n"
" 	normpow=1.0	each sample is divided by the		\n"
"			normpow'th number of non-zero values	\n"
"			stacked (normpow=0 selects no division)	\n"
" 	verbose=0	verbose = 1 echos information		\n"
" 							        \n"
" Note:	The offset field is set to zero on the output traces.	\n"
" 	Sushw can be used afterwards if this is not acceptable.	\n"
" 								\n"
;
d76 1
a76 1
	askdoc(1);
@


1.8
log
@string -> String and so forth
@
text
@d1 1
a1 1
/* SUSTACK: $Revision: 1.6 $ ; $Date: 90/11/28 11:19:50 $	*/
d140 1
a140 1
				if (!CLOSETO(datum, 0.0))  ++nnz[i];
@


1.7
log
@Tweak self-doc
@
text
@d20 1
a20 1
string sdoc =
d34 1
a34 1
" 	verbose=0	verbose = 1 echoes information		\n"
d60 2
a61 2
	string key;	/* header key word from segy.h		*/
	string type;	/* ... its type				*/
d65 2
a66 2
	value val;	/* value of key in current gather	*/
	value valnew;	/* value of key in trace being treated	*/
@


1.6
log
@nnv --> nnz and use CLOSETO instead of flat 0.0 in datum test
@
text
@d1 1
a1 1
/* SUSTACK: $Revision: 1.5 $ ; $Date: 90/11/27 22:00:00 $	*/
d34 1
a34 1
" 	verbose=0	verbose = 1 echos information		\n"
@


1.5
log
@Divide only by the sum of the NON-ZERO values stacked in at
each sample point.  This allows for muting the early values, etc.
@
text
@d1 1
a1 1
/* SUSTACK: $Revision: 1.4 $ ; $Date: 90/11/15 10:43:43 $	*/
d68 2
a69 2
	int *nnv;	/* number of non-zero values stacked	*/
	float normpow;	/* divide by nnv[i]^normpow		*/
d91 1
a91 1
	nnv = ealloc1int(nt);
d93 1
a93 1
	  for (i = 0; i < nt; ++i)  nnv[i] = 0;
d121 3
a123 3
				    float nnvi = nnv[i];
				    if (nnvi)
					outtrace.data[i] /= pow(nnvi, normpow);
d131 1
a131 1
			  for (i = 0; i < nt; ++i)  nnv[i] = 0;
d140 1
a140 1
				if (datum)  ++nnv[i];
@


1.4
log
@bcopy -> memcpy
@
text
@d1 1
a1 1
/* SUSTACK: $Revision: 1.3 $ ; $Date: 90/06/05 15:51:35 $	*/
d20 20
a39 20
string sdoc = "\
								\n\
SUSTACK - stack adjacent traces having the same key header word	\n\
								\n\
sustack <input >output key=cdp norm=1 verbose=0			\n\
							        \n\
Required parameters:						\n\
	none							\n\
							        \n\
Optional parameters: 						\n\
	key=cdp		header key word to stack on		\n\
	norm=1		the default is to divide by the number	\n\
			of traces stacked; norm = 0 selects no	\n\
			division				\n\
	verbose=0	verbose = 1 echos information		\n\
							        \n\
Note: 	The offset field is set to zero on the output traces.	\n\
	Sushw can be used afterwards if this is not acceptable.	\n\
								\n\
";
d44 1
a44 1
 *	CWP: Jack
a45 3
 * Caution: fold does not take into account possible muting of wide offset
 *          shallow traces during or after the nmo processing.
 *
a46 4
 *	The offset field is set to zero on the output traces.  Sushw can
 *	be used afterwards if this is not acceptable.
 *
 * Note:
d67 3
a69 3
	int fold;	/* number of traces with same key value	*/
	float ffold;	/* ... cast to float			*/
	int norm;	/* norm=1 => divide by fold		*/
d80 3
a82 3
	if (!igetpar("verbose", &verbose))	 verbose = 0;
	if (!igetpar("norm", &norm))		 norm = 1;
	if (!sgetpar("key", &key))		 key = "cdp";
d91 5
a96 2
	newtracl = 1;		/* Global initialization */
	fold = 1;		/* Will be re-initialized for each gather */
d99 1
d118 6
a123 6
			if (norm) {
				ffold = (float) fold;
				if (fold != 1) {
				    register int i;
				    for (i = 0; i < nt; ++i)
					outtrace.data[i] /= ffold;
d130 3
d138 6
a143 3
			for (i = 0; i < nt; ++i)
				outtrace.data[i] += intrace.data[i];
			fold++;
@


1.3
log
@Eliminated veclib routines.
@
text
@d1 1
a1 1
/* SUSTACK: $Revision: 1.2 $ ; $Date: 90/06/04 23:25:50 $	*/
d97 1
a97 1
	bcopy(&intrace, &outtrace, nsegy);
d132 1
a132 1
			bcopy(&intrace, &outtrace, nsegy);
@


1.2
log
@ANSI C, etc
@
text
@d1 1
a1 1
/* SUSTACK: $Revision: 1.1 $ ; $Date: 90/04/20 20:40:34 $	*/
a17 1
#include "fconst.h"
d124 3
a126 2
					vsdiv(outtrace.data, ONE, &ffold,
					       outtrace.data, ONE, &nt);
d137 3
a139 2
			vadd(intrace.data, ONE, outtrace.data, ONE,
						 outtrace.data, ONE, &nt);
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/* SUSTACK: $Revision: 2.6 $ ; $Date: 89/05/25 16:53:52 $	*/
d12 1
a12 1
 *  Golden, CO 80401  (isis!csm9a!jkcohen)
d31 2
a32 2
	key = cdp	header key word to stack on		\n\
	norm = 1	the default is to divide by the number	\n\
d35 1
a35 1
	verbose = 0	verbose = 1 echos information		\n\
a60 2
 *
 *
a62 5
/* Embed Revision Control System identifier strings */
static string progid =
	"   $Source: /src/su/src/RCS/sustack.c,v $";
static string revid =
	"   $Revision: 2.6 $ ; $Date: 89/05/25 16:53:52 $";
a63 2


d66 1
a66 2
main(argc, argv)
int argc; char **argv;
a83 5
	if (!igetpar("ID", &ID))	ID = 0;
	if (ID) {
		(void) fprintf(stderr, "%s\n", progid);
		(void) fprintf(stderr, "%s\n", revid);
	}
@
