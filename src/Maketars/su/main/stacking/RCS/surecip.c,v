head	1.14;
access;
symbols;
locks; strict;
comment	@ * @;


1.14
date	2011.11.16.23.14.54;	author john;	state Exp;
branches;
next	1.13;

1.13
date	2011.11.12.00.24.32;	author john;	state Exp;
branches;
next	1.12;

1.12
date	2003.06.09.16.17.07;	author john;	state Exp;
branches;
next	1.11;

1.11
date	96.09.13.21.49.05;	author john;	state Exp;
branches;
next	1.10;

1.10
date	96.02.05.17.01.32;	author jkc;	state Exp;
branches;
next	1.9;

1.9
date	94.08.25.15.00.42;	author jkc;	state Exp;
branches;
next	1.8;

1.8
date	93.11.24.16.01.57;	author john;	state Exp;
branches;
next	1.7;

1.7
date	92.10.26.11.15.09;	author john;	state Exp;
branches;
next	1.6;

1.6
date	91.09.05.08.51.42;	author jkcohen;	state Exp;
branches;
next	1.5;

1.5
date	90.11.15.10.43.41;	author jkc;	state Exp;
branches;
next	1.4;

1.4
date	90.06.05.20.20.24;	author jkc;	state Exp;
branches;
next	1.3;

1.3
date	90.06.05.15.51.33;	author jkc;	state Exp;
branches;
next	1.2;

1.2
date	90.06.04.23.25.48;	author jkc;	state Exp;
branches;
next	1.1;

1.1
date	90.04.20.15.26.21;	author jkc;	state Exp;
branches;
next	;


desc
@sum traces with equal & opposite offsertsts
@


1.14
log
@added Reg Beardsley's checkpar()
@
text
@/* Copyright (c) Colorado School of Mines, 2011.*/
/* All rights reserved.                       */

/* SURECIP: $Revision: 1.12 $ ; $Date: 2003/06/09 16:17:07 $	*/

#include "su.h"
#include "segy.h"

/*********************** self documentation **********************/
char *sdoc[] = {
"                                				",
" SURECIP - sum opposing offsets in prepared data (see below)	",
"                                				",
" surecip <stdin >stdout	 		               	",
"                                				",
" Sum traces with equal positive and negative offsets (i.e. assume",
" reciprocity holds). 						",
"                                				",
" Usage:							",
"	suabshw <data >absdata					",
"	susort cdp offset <absdata | surecip >sumdata		",
"                                				",
" Note that this processing stream can be simply evoked by:	",
"                                				",
"	recip data sumdata					",
"                                				",
NULL};

/* Credits:
 *	SEP: Shuki Ronen
 *	CWP: Jack Cohen
 *
 * Caveat:
 *	The assumption is that this operation is not a mainstay processing
 *	item.  Hence the recommended implemention via the 'recip' shell
 *	script.  If it becomes a mainstay, then a much faster code can
 *	quickly drummed up by incorporating portions of suabshw and
 *	susort.
 *
 * Trace header fields accessed: ns
 * Trace header fields modified: nhs, tracl, sx, gx
 */
/**************** end self doc ***********************************/


segy intrace, outtrace;

int
main(int argc, char **argv)
{
	int cdpindex;	/* index of cdp header word		*/
	int offindex;	/* index of offset header word		*/
	int nt;		/* number of data points on trace	*/
	int nsegy;	/* number of bytes in the segy		*/
	Value cdpval;	/* value of cdp in current gather	*/
	Value offval;	/*  ... same for offset			*/
	Value cdpvalnew;/* value of cdp in trace being treated	*/
	Value offvalnew;/* ... same for offset			*/
	int newtracl;	/* tracl for stacked traces		*/
	int fold;	/* number of traces with same offset 	*/
	float ffold;	/* ... cast to float			*/
	int norm;	/* norm=1 => divide by fold		*/
	int itmp;	/* temporary for swap of sx, gx keys	*/


	/* Initialize */
	initargs(argc, argv);
	requestdoc(1);


	/* Set parameter */
	if (!getparint("norm", &norm))	norm = 1;

        checkpars();

	/* Get indices */
	cdpindex = getindex("cdp");
	offindex = getindex("offset");

	/* Set up for first trace */
	nsegy = gettr(&intrace);
	nt = intrace.ns;
	gethval(&intrace, cdpindex, &cdpval);
	gethval(&intrace, offindex, &offval);
	memcpy( (void *) &outtrace, (const void *) &intrace, nsegy);

	newtracl = 1;		/* Global initialization */
	fold = 1;		/* Will be re-initialized for each gather */

	/* Loop over traces */
	while (nsegy) {		     /* While previous trace non-empty */
		nsegy = gettr(&intrace);
		gethval(&intrace, cdpindex, &cdpvalnew);
		gethval(&intrace, offindex, &offvalnew);
		if (valcmp("l", cdpval, cdpvalnew) || !nsegy) {	
			/* Either cdpval and cdpvalnew differ,       */
			/* indicating a new gather or nsegy is zero, */
			/* indicating the end of the traces.         */

			/* Add header info and output leftover stack */
			outtrace.nhs = fold;
			outtrace.tracl = newtracl++;
			if (outtrace.sx > outtrace.gx) {
				itmp = outtrace.sx;
				outtrace.sx = outtrace.gx;
				outtrace.gx = itmp;
			}
			if (norm) {
				ffold = (float) fold;
				if (fold != 1) {
				    register int i;
				    for (i = 0; i < nt; ++i)
					outtrace.data[i] /= ffold;
				}
			}
			puttr(&outtrace);
	
			/* Set up for next gather */
			memcpy( (void *) &outtrace,
					(const void *) &intrace, nsegy);
			fold = 1;
			cdpval = cdpvalnew;
			offval = offvalnew;

		} else {	/* still in same cdp gather */
			if (valcmp("l", offval, offvalnew)) {
				/* offval and offvalnew differ */

				/* Add header info and output stack */
				outtrace.nhs = fold;
				outtrace.tracl = newtracl++;
				if (outtrace.sx > outtrace.gx) {
					itmp = outtrace.sx;
					outtrace.sx = outtrace.gx;
					outtrace.gx = itmp;
				}
				if (norm) {
					ffold = (float) fold;
					if (fold != 1) {
					    register int i;
					    for (i = 0; i < nt; ++i)
						outtrace.data[i] /= ffold;
					}
				}
				puttr(&outtrace);

				/* Set up for next offset */
				memcpy( (void *) &outtrace,
				       (const void *) &intrace, nsegy);
				fold = 1;
				offval = offvalnew;

			} else { /* same offset within this cdp */

				register int i;
				for (i = 0; i < nt; ++i)
					outtrace.data[i] += intrace.data[i];

				fold++;
			}
		}
	}


	return(CWP_Exit());
}
@


1.13
log
@copyright
@
text
@d74 2
@


1.12
log
@9 June 2003
@
text
@d1 4
a4 1
/* SURECIP: $Revision: 1.11 $ ; $Date: 1996/09/13 21:49:05 $	*/
@


1.11
log
@silenced -Wall messages
@
text
@d1 1
a1 1
/* SURECIP: $Revision: 1.10 $ ; $Date: 1996/02/05 17:01:32 $	*/
d160 1
a160 1
	return EXIT_SUCCESS;
@


1.10
log
@Deal with header words accessed/modified down to sudoc.
@
text
@d1 1
a1 1
/* SURECIP: $Revision: 1.9 $ ; $Date: 1994/08/25 15:00:42 $	*/
d45 1
@


1.9
log
@Removed copyright statement from codes that had it.
Moved self-doc line for sudoc.
@
text
@d1 1
a1 1
/* SURECIP: $Revision: 1.8 $ ; $Date: 93/11/24 16:01:57 $	*/
d36 3
d143 1
a143 1
						(const void *) &intrace, nsegy);
@


1.8
log
@added explicit casts in memcpy
@
text
@d1 1
a1 1
/* SURECIP: $Revision: 1.7 $ ; $Date: 92/10/26 11:15:09 $	*/
a2 13
/*----------------------------------------------------------------------
 * Copyright (c) Colorado School of Mines, 1990.
 * All rights reserved.
 *
 * This code is part of SU.  SU stands for Seismic Unix, a processing line
 * developed at the Colorado School of Mines, partially based on Stanford
 * Exploration Project (SEP) software.  Inquiries should be addressed to:
 *
 *  Jack K. Cohen, Center for Wave Phenomena, Colorado School of Mines,
 *  Golden, CO 80401  (jkc@@dix.mines.colorado.edu)
 *----------------------------------------------------------------------
 */

a24 1
/**************** end self doc ***********************************/
d37 1
@


1.7
log
@new selfdoc installed
@
text
@d1 1
a1 1
/* SURECIP: $Revision: 1.6 $ ; $Date: 91/09/05 08:51:42 $	*/
d41 2
a42 2
 *	SEP: Shuki
 *	CWP: Jack
d89 1
a89 1
	memcpy(&outtrace, &intrace, nsegy);
d123 2
a124 1
			memcpy(&outtrace, &intrace, nsegy);
d152 2
a153 1
				memcpy(&outtrace, &intrace, nsegy);
@


1.6
log
@string -> String and so forth
@
text
@d1 1
a1 1
/* SURECIP: $Revision: 1.5 $ ; $Date: 90/11/15 10:43:41 $	*/
d20 18
a37 18
String sdoc = "\
                                				\n\
SURECIP - sum opposing offsets in prepared data (see below)	\n\
                                				\n\
surecip <stdin >stdout	 		               		\n\
                                				\n\
Sum traces with equal positive and negative offsets (i.e. assume\n\
reciprocity holds). 						\n\
                                				\n\
Usage:								\n\
	suabshw <data >absdata					\n\
	susort cdp offset <absdata | surecip >sumdata		\n\
                                				\n\
Note that this processing stream can be simply evoked by:	\n\
                                				\n\
	recip data sumdata					\n\
                                				\n\
";
d74 1
a74 1
	askdoc(1);
@


1.5
log
@bcopy -> memcpy
@
text
@d1 1
a1 1
/* SURECIP: $Revision: 1.4 $ ; $Date: 90/06/05 20:20:24 $	*/
d20 1
a20 1
string sdoc = "\
d61 4
a64 4
	value cdpval;	/* value of cdp in current gather	*/
	value offval;	/*  ... same for offset			*/
	value cdpvalnew;/* value of cdp in trace being treated	*/
	value offvalnew;/* ... same for offset			*/
d78 1
a78 1
	if (!igetpar("norm", &norm))	norm = 1;
@


1.4
log
@Typos from veclib surgery
@
text
@d1 1
a1 1
/* SURECIP: $Revision: 1.3 $ ; $Date: 90/06/05 15:51:33 $	*/
d89 1
a89 1
	bcopy(&intrace, &outtrace, nsegy);
d123 1
a123 1
			bcopy(&intrace, &outtrace, nsegy);
d151 1
a151 1
				bcopy(&intrace, &outtrace, nsegy);
@


1.3
log
@Eliminated veclib routines.
@
text
@d1 1
a1 1
/* SURECIP: $Revision: 1.2 $ ; $Date: 90/06/04 23:25:48 $	*/
d146 1
@


1.2
log
@ANSI C, etc
@
text
@d1 1
a1 1
/* SURECIP: $Revision: 1.1 $ ; $Date: 90/04/20 15:26:21 $	*/
a17 1
#include "fconst.h"
d115 3
a117 2
				    vsdiv(outtrace.data, ONE, &ffold,
					   outtrace.data, ONE, &nt);
d143 3
a145 3
					    vsdiv(outtrace.data, ONE, &ffold,
						   outtrace.data, ONE, &nt);
					}
d156 4
a159 2
				vadd(intrace.data, ONE, outtrace.data, ONE,
				      outtrace.data, ONE, &nt);
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/* SURECIP: $Revision: 2.6 $ ; $Date: 89/05/25 16:53:36 $	*/
d12 1
a12 1
 *  Golden, CO 80401  (isis!csm9a!jkcohen)
a50 2
 *
 *
a52 5
/* Embed Revision Control System identifier strings */
static string progid =
    "   $Source: /src/su/src/RCS/surecip.c,v $";
static string revid =
    "   $Revision: 2.6 $ ; $Date: 89/05/25 16:53:36 $";
a53 2


d56 1
a56 2
main(argc, argv)
int argc; char **argv;
a74 5
	if (!igetpar("ID", &ID))	ID = 0;
	if (ID) {
		(void) fprintf(stderr, "%s\n", progid);
		(void) fprintf(stderr, "%s\n", revid);
	}
@
