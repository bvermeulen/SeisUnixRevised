head	1.12;
access;
symbols;
locks; strict;
comment	@ * @;


1.12
date	2011.11.16.23.14.54;	author john;	state Exp;
branches;
next	1.11;

1.11
date	2011.11.12.00.24.32;	author john;	state Exp;
branches;
next	1.10;

1.10
date	2006.11.07.22.58.42;	author john;	state Exp;
branches;
next	1.9;

1.9
date	2003.06.09.16.17.07;	author john;	state Exp;
branches;
next	1.8;

1.8
date	2002.04.18.16.23.54;	author john;	state Exp;
branches;
next	1.7;

1.7
date	96.09.06.20.46.54;	author jkc;	state Exp;
branches;
next	1.6;

1.6
date	96.01.24.18.40.21;	author jkc;	state Exp;
branches;
next	1.5;

1.5
date	95.10.30.16.09.30;	author john;	state Exp;
branches;
next	1.4;

1.4
date	95.08.02.20.52.34;	author jkc;	state Exp;
branches;
next	1.3;

1.3
date	95.02.09.12.55.17;	author john;	state Exp;
branches;
next	1.2;

1.2
date	95.01.19.11.43.28;	author john;	state Exp;
branches;
next	1.1;

1.1
date	95.01.10.13.48.28;	author john;	state Exp;
branches;
next	;


desc
@sudivstack --- diversity stacking program
@


1.12
log
@added Reg Beardsley's checkpar()
@
text
@/* Copyright (c) Colorado School of Mines, 2011.*/
/* All rights reserved.                       */

/* SUDIVSTACK: $Revision: 1.10 $ ; $Date: 2006/11/07 22:58:42 $	*/

#include "su.h"
#include "segy.h"
#include "header.h"


/*********************** self documentation **********************/
char *sdoc[] = {
"                                                                       ",
" SUDIVSTACK -  Diversity Stacking using either average power or peak   ",
"               power within windows                                    ",
"                                                                       ",
"                                                                       ",
" Required parameters:                                                  ",
"    none                                                               ",
"                                                                       ",
" Optional parameters:                                                  ",
"    key=tracf        key header word to stack on                       ",
"    winlen=0.064     window length in seconds.                         ",
"                     typical choices: 0.064, 0.128, 0.256,             ",
"                                      0.512, 1.024, 2.048, 4.096       ",
"                     if not specified the entire trace is used         ",
"                                                                       ",
"    peak=1           peak power option default is average power        ",
"                                                                       ",
" Notes:                                                                ",
"    Diversity stacking is a noise reduction technique used in the      ",
"    summation of duplicate data. Each trace is scaled by the inverse   ",
"    of its average power prior to stacking.  The composite trace is    ",
"    then renormalized by dividing by the sum of the scalers used.      ",
"                                                                       ",
"    This program stacks adjacent traces having the same key header     ",
"    word, which can be specified by the key parameter. The default     ",
"    is \"tracf\" (trace number within field record).                   ",
"    For more information on key header words, type \"sukeyword -o\".   ",
"                                                                       ",
" Examples:                                                             ",
"    For duplicate field shot records:                                  ",
"        susort < field.data tracf | sudivstack > stack.data            ",
"    For CDP ordered data:                                              ",
"        sudivstack < cdp.data key=cdp > stack.data                     ",
"                                                                       ",
NULL};

/* 
 * Author: Mary Palen-Murphy,
 *         Masters' candidate, Colorado School of Mines,
 *         Geophysics Department, 1994
 *
 * Implementation of "key=" option: Nils Maercklin,
 *         GeoForschungsZentrum (GFZ) Potsdam, Germany, 2002.
 *
 * References:
 *
 *    Embree, P.,1968, Diversity seismic record stacking method and system:
 *        U.S. patent 3,398,396.
 *    Gimlin, D. R., and Smith, J. W., 1980, A comparison of seismic trace 
 *        summing techniques: Geophysics, vol. 45, pages 1017-1041.
 *
 * Trace header fields accessed: ns, dt, key=keyword
 * Trace header fields modified: tracl
 */

/**************** end self doc ********************************/


segy intrace,outtrace;

int
main(int argc,char **argv)
{   
    int nt;          /* number of samples input trace */
    char *key;       /* header key word from segy.h */
    char *type;      /* ... its type  */
    int index;       /* ... its index */
    Value val;       /* ... its value */
    int data=1;      /* flag no more data */
    int trnum;       /* current trace number */
    float winlen;    /* window length in seconds */
    int peak;        /* flag to use peak power */
    float entire;    /* flag to use entire trace as window */
    float dt;        /* sample rate in seconds */
    int ntwin;       /* number time samples in window */
    float totalpwa;  /* total power window a */
    float totalpwb;  /* total power window b */
    int j,i;         /* counters */
    float x;         /* variable */
    float avepwa;    /* average (or peak) power window a */
    float avepwb;    /* average (or peak) power window b */
    float maxval;    /* maximum data squared value in window */
    float *intpapw;  /* pointer array holding interpolated powers */
    int count;       /* counter */
    float *sumscale; /* pointer to sum of scalers array */
    float *sumdata;  /* pointer to summed data array */
    int nsegy;       /* number of bytes in segy */
    int newtracl=1;  /* tracl for stacked traces */
    float *xin;      /* pointer x interpolation */
    float *yin;      /* pointer y interpolation */
    float *xout;     /* pointer x interpolation */
    int z;           /* counter */
    
    /* Initialize */
    initargs(argc,argv);
    requestdoc(1);

    /* Get information from first trace */
    if(!(nsegy = gettr(&intrace)))
        err("can not get first trace");

    nt = (int) intrace.ns;
    dt = ((double) intrace.dt)/1000000.0; /* microsecs to secs */ 
    entire = (float) ((nt * dt) - dt);    /* entire data length */
    
    /* Get parameters */
    if (!getparstring("key", &key)) key="tracf";
    if(!getparfloat("winlen", &winlen)) winlen = entire;
    if(!getparint("peak", &peak)) peak = 0;


    checkpars();

    ntwin = (int)(winlen/dt) + 1;
    if(ntwin > nt) ntwin = nt;            /* check data length */

    /* get key type and index */
    type = hdtype(key);
    index = getindex(key);

    /* allocate arrays */
    intpapw = ealloc1float(nt);
    sumscale = ealloc1float(nt);
    sumdata = ealloc1float(nt);
    xin=ealloc1float(2);
    yin=ealloc1float(2);
    xout=ealloc1float(ntwin);

    while(data) { 
        
        /* initialize arrays to zero */
        memset( (void *) sumscale, 0,nt * FSIZE);
        memset( (void *) sumdata, 0,nt * FSIZE);

        /* copy input header information to output header */
        memcpy((void*)&outtrace,(const void*)&intrace,nsegy);
    
        /* get current trace number (value of key from segy.h) */
        gethval(&intrace, index, &val);
        trnum = vtoi(type,val); 
    
        do {

            /* traces having same key=keyword are scaled and summed */
    
            /* calculate scaler in first window */
    
            if(peak) {              /* peak power */
                maxval = 0.0; 
                for(i=0;i<ntwin;++i) {
                    x = intrace.data[i];
                    maxval=((x*x)>maxval)?(x*x):maxval;
                }
                avepwa = maxval;
            } 
            else {                  /* average power */ 
                totalpwa = 0.0;      /*initialize */ 
                    for(i=0;i<ntwin;++i) {
                        x = intrace.data[i];
                        totalpwa += (x * x);
                    }
                    avepwa = totalpwa / ntwin;
                }
             
            /* interpolate from start to end of first window */
            for(i=0;i<ntwin;++i)
                intpapw[i] = avepwa;
    
            /* middle  windows */
            j = 1;
     
            while(ntwin * (j + 1) < nt) { 
                if(peak) {
                    maxval = 0.0;
                    for(i=ntwin * j;i<ntwin * (j+1);++i){
                        x = intrace.data[i];
                        maxval=((x*x)>maxval)?(x*x):maxval; 
                    }
                    avepwb = maxval;
                } 
                else { 
                    totalpwb = 0.0;
                    for(i=ntwin * j;i<ntwin * (j+1);++i) {
                        x = intrace.data[i];
                        totalpwb += (x * x);
                    }
                    avepwb = totalpwb / ntwin;
                }

                /* linear interpolate */ 
                /* between window a and window b */
                
                xin[0] = (ntwin * j) - 1;
                xin[1] = (ntwin * (j + 1)) - 1;
                yin[0] = avepwa;
                yin[1] = avepwb;
                z = 0;
                
                for(i=ntwin * j;i<ntwin * (j+1);++i) {
                    xout[z] = i; 
                    z++;
                }
                
                intlin(2,xin,yin,avepwa,avepwb,ntwin,xout,
                    &intpapw[ntwin * j]);

                /* update to next window */
                avepwa = avepwb;
                j++;
            }   /* end middle window while loop */
            
            /*  last window */
            if(ntwin < nt) {    
                if(peak) {
                    maxval = 0.0;
                    for(i=ntwin * j;i<nt;++i) {
                        x = intrace.data[i];
                        maxval = ((x * x) > maxval) ? 
                        (x * x) : maxval;
                    }
                    avepwb = maxval;
                } 
                else { 
                    count = 0;
                    totalpwb = 0.0;
                    for(i=ntwin * j;i<nt;++i) {
                        x = intrace.data[i];
                        totalpwb += (x * x);
                        count++;
                    }
                    avepwb = totalpwb / count;
                }
                /* interpolate last window */

                xin[0] = (ntwin * j) - 1;
                xin[1] = nt - 1;
                yin[0] = avepwa;
                yin[1] = avepwb;
                count = 0;
                z = 0;
                for(i=ntwin * j;i<nt;++i) {
                    xout[z] = i;
                    z++;
                    count++;
                }
                
                intlin(2,xin,yin,avepwa,avepwb,count,
                    xout,&intpapw[ntwin * j]);
            }    
            /* interpolation completed */
     
            /* multiply each data sample by its inverse ave power*/
            /* and sum if trace numbers the same                 */
            /* sum inverse ave powers for renormalization        */
            /* check not dividing by zero                        */
    
            for(i=0;i<nt;++i) {
                if(intpapw[i] != 0.0){
                    sumdata[i]+= intrace.data[i] / intpapw[i];
             
                    sumscale[i] += 1 / intpapw[i];
                }
            }    
            
            /* get next data trace and check trace number */
            if(!(nsegy = gettr(&intrace))) {
                data = 0;    /* set more data to false */
                break;       /* done no more traces  */
            }
            gethval(&intrace, index, &val);
        
        } while( vtoi(type,val) == trnum);
    
        /* renormalize data trace using inverse of sum of scalers */
        /* check not dividing by zero */
        for(i=0;i<nt;++i){
            if (sumscale[i] == 0.0) sumscale[i] = 1.0;

            outtrace.data[i] = sumdata[i] / sumscale[i];
        }

        outtrace.tracl = newtracl++; /* update header info */ 
        puttr(&outtrace);            /* write to disk */
    
    } /* end while continue loop */
    
    return(CWP_Exit());

} /* end main loop */
@


1.11
log
@copyright
@
text
@d123 3
@


1.10
log
@changed    memset( .., (int) '\0',...) to memset( .., 0,..) as per suggestion of Marion Zhu and Reg Beardsley
@
text
@d1 4
a4 1
/* SUDIVSTACK: $Revision: 1.9 $ ; $Date: 2003/06/09 16:17:07 $	*/
@


1.9
log
@9 June 2003
@
text
@d1 1
a1 1
/* SUDIVSTACK: $Revision: 1.8 $ ; $Date: 2002/04/18 16:23:54 $	*/
d138 2
a139 2
        memset( (void *) sumscale, (int) '\0',nt * FSIZE);
        memset( (void *) sumdata, (int) '\0',nt * FSIZE);
@


1.8
log
@added Nils Merklin's fix of adding a keyword
@
text
@d1 1
a1 1
/* SUDIVSTACK: $Revision: 1.11 $ ; $Date: 2001/11/12 18:03:40 $	*/
d293 1
a293 1
    return EXIT_SUCCESS;
@


1.7
log
@Fixed -Wall complaints.
@
text
@d1 1
a1 1
/* SUDIVSTACK: $Revision: 1.6 $ ;$Date: 1996/01/24 18:40:21 $   */
d5 1
d10 1
a10 1
"									",
d12 32
a43 31
"	        power within windows					",
"									",
" Required parameters:						 	",
" none								 	",
"									",
" Optional parameters:							",
" winlen=0.064		window length in seconds.			",
"			typical choices: 0.064, 0.128, 0.256,		",
"		       			0.512, 1.024, 2.048, 4.096 	",
"			if not specified the entire trace is used	",
"									",
" peak=1	 	peak power option default is average power	",
"									",
" Notes:								",
" Diversity stacking is a noise reduction technique used in the summation",
" of duplicate data. Each trace is scaled by the inverse of its average	",
" power	prior to stacking.  The composite trace is then	renormalized	",
" by dividing by the sum of the scalers used.				",
"									",
" This program stacks adjacent traces which have the			",
" same tracf (trace number within field record) in the segy header.	",
"									",
" Examples:								",
" For duplicate field shot records:					",
"	susort < field.data sx tracf | sudivstack 			",
" For CDP ordered data:							",
"	suchw < cdp.data key1=tracf key2=cdp | sudivstack		",
" For CDP ordered data:							",
"	sudivstack < stdin > stdout [optional parameters]		",
"									",
" For further information, type:   sudivstack  <CR>			",
d47 6
a52 3
 *	Author: Mary Palen-Murphy
 *		Masters' candidate, Colorado School of Mines,
 *		Geophysics Department, 1994
d56 4
a59 5
 * Embree, P.,1968, Diversity seismic record stacking method and system:
 * U.S. patent 3,398,396.
 *
 * Gimlin, D. R., and Smith, J. W., 1980, A comparison of seismic trace 
 * summing techniques: Geophysics, vol. 45, pages 1017-1041.
d61 1
a61 2
 *
 * Trace header fields accessed: ns, dt, tracf
d64 1
d73 221
a293 211
	int nt;			/* number of samples input trace	*/
	int data=1;	    	/* flag no more data			*/
	int trnum;	        /* current trace number			*/
	float winlen;		/* window length in seconds		*/
	int peak;	        /* flag to use peak power		*/
	float entire;		/* flag to use entire trace as window	*/
	float dt;	        /* sample rate in seconds		*/
	int ntwin;	        /* number time samples in window	*/
	float totalpwa;		/* total power window a			*/
	float totalpwb;		/* total power window b			*/
	int j,i;		/* counters				*/
	float x;		/* variable				*/
	float avepwa;		/* average (or peak) power window a	*/
	float avepwb;		/* average (or peak) power window b	*/
	float maxval;		/* maximum data squared value in window	*/
	float *intpapw;		/* pointer array holding interpolated powers */
	int count;	   	/* counter				*/
	float *sumscale;	/* pointer to sum of scalers array	*/
	float *sumdata;		/* pointer to summed data array		*/
	int nsegy;		/* number of bytes in segy		*/
	int newtracl=1;		/* tracl for stacked traces		*/
	float *xin;		/* pointer x interpolation		*/
	float *yin;		/* pointer y interpolation 		*/
	float *xout;		/* pointer x interpolation		*/
	int z;			/* counter				*/
	
	/* Initialize */
	initargs(argc,argv);
	requestdoc(1);

	/* Get information from first trace */
	if(!(nsegy = gettr(&intrace)))
		err("can not get first trace");

	nt = (int) intrace.ns;
	dt = ((double) intrace.dt)/1000000.0;	 /* microsecs to secs */ 
	entire = (float) ((nt * dt) - dt); 	 /* entire data length */
	
	/* Get parameters */
	if(!getparfloat("winlen",&winlen))  winlen = entire;
	if(!getparint("peak",&peak)) peak = 0;

	ntwin = (int)(winlen/dt) + 1;
	if(ntwin > nt) ntwin = nt;		/* check data length */

	/* allocate array  */
	intpapw = ealloc1float(nt);
	sumscale = ealloc1float(nt);
	sumdata = ealloc1float(nt);
	xin=ealloc1float(2);
	yin=ealloc1float(2);
	xout=ealloc1float(ntwin);

	while(data) { 
		
		/* initialize arrays to zero */

		memset( (void *) sumscale, (int) '\0',nt * FSIZE);
		memset( (void *) sumdata, (int) '\0',nt * FSIZE);

		/* copy input header information to output header */
		memcpy((void*)&outtrace,(const void*)&intrace,nsegy);
	
	        /* set current trace number */
	 	trnum = intrace.tracf;
	
 
		 do {

			/* traces having same tracf are scaled and summed */
	
			/* calculate scaler in first window */
	
	  		if(peak) {              /* peak power */
	   			maxval = 0.0; 
				for(i=0;i<ntwin;++i) {
	    				x = intrace.data[i];
	    				maxval=((x*x)>maxval)?(x*x):maxval;
	   			}
	   			avepwa = maxval;
	  		} else {                    /* average power */ 
				totalpwa = 0.0;        /*initialize */ 
	   			for(i=0;i<ntwin;++i) {
	    				x = intrace.data[i];
	    				totalpwa += (x * x);
	   			}
	   			avepwa = totalpwa / ntwin;
	  		}
	 		
			/* interpolate from start to end of first window */
	 		for(i=0;i<ntwin;++i)
	  			intpapw[i] = avepwa;
	
	
			 /* middle  windows */
	 		j = 1;
	 
			while(ntwin * (j + 1) < nt) { 
	  			if(peak) {
	   				maxval = 0.0;
	   				for(i=ntwin * j;i<ntwin * (j+1);++i){
	    					x = intrace.data[i];
	    			       	maxval=((x*x)>maxval)?(x*x):maxval; 
	   				}
	   				avepwb = maxval;
	  			} else { 
					totalpwb = 0.0;
	   				for(i=ntwin * j;i<ntwin * (j+1);++i) {
	    					x = intrace.data[i];
	    					totalpwb += (x * x);
	   				}
	   				avepwb = totalpwb / ntwin;
	  			}


				/* linear interpolate */ 
				/* between window a and window b */
				
				xin[0] = (ntwin * j) - 1;
				xin[1] = (ntwin * (j + 1)) - 1;
				yin[0] = avepwa;
				yin[1] = avepwb;
				z = 0;
				for(i=ntwin * j;i<ntwin * (j+1);++i) {
					xout[z] = i; 
					z++;
				}
				intlin(2,xin,yin,avepwa,avepwb,ntwin,xout,
					&intpapw[ntwin * j]);


	 			/* update to next window */
				 avepwa = avepwb;
				 j++;
	 		}		/* end middle window while loop */
			
			/*  last window */
	 		if(ntwin < nt) {	
				if(peak) {
	  				maxval = 0.0;
	  				for(i=ntwin * j;i<nt;++i) {
	   					x = intrace.data[i];
	   					maxval = ((x * x) > maxval) ? 
							(x * x) : maxval;
	  				}
	  				avepwb = maxval;
		 		} else { 
					count = 0;
					totalpwb = 0.0;
	  				for(i=ntwin * j;i<nt;++i) {
	   					x = intrace.data[i];
	   					totalpwb += (x * x);
	   					count++;
	  				}
	  				avepwb = totalpwb / count;
	 			}
				/* interpolate last window */

				xin[0] = (ntwin * j) - 1;
				xin[1] = nt - 1;
				yin[0] = avepwa;
				yin[1] = avepwb;
				count = 0;
				z = 0;
				for(i=ntwin * j;i<nt;++i) {
					xout[z] = i;
					z++;
					count++;
				}
				intlin(2,xin,yin,avepwa,avepwb,count,
					xout,&intpapw[ntwin * j]);
			}	
			/* interpolation completed */
	 
			/* multiply each data sample by its inverse ave power*/
			/* and sum if trace numbers the same                 */
			/* sum inverse ave powers for renormalization        */
			/* check not dividing by zero                        */
	
		 	for(i=0;i<nt;++i) {
		 		if(intpapw[i] != 0.0){
	  				sumdata[i]+= intrace.data[i] / 
								intpapw[i];
	 		
	  				sumscale[i] += 1 / intpapw[i];
	 			}
		 	}	
			/* get next data trace and check trace number */
	 		if(!(nsegy = gettr(&intrace))) {
	  			data = 0;	/* set more data to false */
	  			break;  	/* done no more traces  */
		 	}
	
		} while(intrace.tracf == trnum);
	
		/* renormalize data trace using inverse of sum of scalers */
		/* check not dividing by zero */

 		for(i=0;i<nt;++i){
			if(sumscale[i] == 0.0)
				sumscale[i] = 1.0;

  			outtrace.data[i] = sumdata[i] / sumscale[i];
		}

		outtrace.tracl = newtracl++;    /* update header info */ 
 		puttr(&outtrace); 	/* write to disk */
	
	} 	/*end while continue loop */
	
	return EXIT_SUCCESS;
d295 1
a295 1
}	 /* end main loop */
@


1.6
log
@Handle header fields accessed/modified for sudoc.
@
text
@d1 1
a1 1
/* SUDIVSTACK: $Revision: 1.5 $ ;$Date: 1995/10/30 16:09:30 $   */
d66 1
a84 1
	float slope;	 	/* linear slope				*/
@


1.5
log
@cosmetic change to selfdoc
@
text
@d1 1
a1 1
/* SUDIVSTACK: $Revision: 1.4 $ ;$Date: 1995/08/02 20:52:34 $   */
d57 3
d243 4
a246 4
			/* multiply each data sample by its inverse ave power */
			/* and sum if trace numbers the same                  */
			/* sum inverse ave powers for renormalization         */
			/* check not dividing by zero                         */
@


1.4
log
@Cast the integers tr.dt and/or tr.delrt and/or clones to double before
division with floating constant (which is implicitly double
precision).  Casting is needed to make some compilers happy and if we
cast to float then there will be an extra conversion to double because
of the floating constant (casting to float and writing 1000000.0F
would save a conversion, but most people find that F yucky and
efficiency is not an issue here).
Motivated by examples from Stew Levin.
@
text
@d1 2
a2 1
/* SUDIVSTACK: $Revision: 1.3 $ ;$Date: 1995/02/09 12:55:17 $   */
d41 1
a42 1
/**************** end self doc ********************************/
d58 1
a58 1

@


1.3
log
@added references.
@
text
@d1 1
a1 1
/* SUDIVSTACK: $Revision: 1.2 $ ;$Date: 95/01/19 11:43:28 $   */
d100 1
a100 1
	dt = (float) intrace.dt/1000000.0;	 /* microsecs to secs */ 
@


1.2
log
@new code, minor changes in selfdoc
@
text
@d1 1
a1 1
/* SUDIVSTACK: $Revision: 1.1 $ ;$Date: 95/01/10 13:48:28 $   */
d47 9
d57 2
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/* SUDIVSTACK: $Revision: 1.00 $ ;$Date: 95/01/10 00:00:00 $   */
d12 2
a13 5
"	Diversity stacking is a noise reduction technique used 		",
"        in the summation of duplicate data.				",
"	Each trace is scaled by the inverse of its average power	",
"	prior to stacking.  The composite trace is then	renormalized	",
"	by dividing by the sum of the scalers used.			",
d15 2
a16 7
"sudivstack < stdin > stdout [optional parameters]			",
"									",
"Required parameters:						 	",
"	none							 	",
"									",
"Optional parameters:							",
" 	winlen=0.064	window length in seconds.			",
d21 1
a21 2
"	peak=1	 	peak power option	 	   		",
"				default is average power		",
d23 5
a27 3
"	Note: This program stacks adjacent traces which have the	",
"             same tracf (trace number within field record)		",
"             in the segy header.					",
d29 2
a30 2
"	For duplicate field shot records:				",
"		susort < field.data sx tracf | sudivstack 		",
d32 7
a38 2
"	For CDP ordered data:						",
"		suchw < cdp.data key1=tracf key2=cdp | sudivstack	",
d44 3
a46 2
 *	Author: Mary Palen-Murphy, CSM masters' candidate, 1994
 *
a266 2
	 

@
