head	1.20;
access;
symbols;
locks; strict;
comment	@ * @;


1.20
date	2011.11.16.17.38.58;	author john;	state Exp;
branches;
next	1.19;

1.19
date	2011.11.12.00.01.04;	author john;	state Exp;
branches;
next	1.18;

1.18
date	2003.06.09.16.17.07;	author john;	state Exp;
branches;
next	1.17;

1.17
date	97.07.28.22.36.46;	author john;	state Exp;
branches;
next	1.16;

1.16
date	96.09.13.21.49.05;	author john;	state Exp;
branches;
next	1.15;

1.15
date	96.02.05.16.10.34;	author jkc;	state Exp;
branches;
next	1.14;

1.14
date	95.01.19.11.44.06;	author john;	state Exp;
branches;
next	1.13;

1.13
date	94.08.25.15.00.20;	author jkc;	state Exp;
branches;
next	1.12;

1.12
date	93.08.13.10.28.13;	author john;	state Exp;
branches;
next	1.11;

1.11
date	92.10.23.16.16.20;	author john;	state Exp;
branches;
next	1.10;

1.10
date	91.09.05.08.51.25;	author jkcohen;	state Exp;
branches;
next	1.9;

1.9
date	90.10.29.18.26.34;	author jkc;	state Exp;
branches;
next	1.8;

1.8
date	90.10.28.18.01.14;	author jkc;	state Exp;
branches;
next	1.7;

1.7
date	90.10.28.08.47.08;	author jkc;	state Exp;
branches;
next	1.6;

1.6
date	90.10.27.23.14.47;	author jkc;	state Exp;
branches;
next	1.5;

1.5
date	90.10.26.20.26.45;	author jkc;	state Exp;
branches;
next	1.4;

1.4
date	90.10.12.09.17.46;	author jkc;	state Exp;
branches;
next	1.3;

1.3
date	90.06.05.15.51.26;	author jkc;	state Exp;
branches;
next	1.2;

1.2
date	90.05.29.21.32.56;	author jkc;	state Exp;
branches;
next	1.1;

1.1
date	90.04.19.20.17.39;	author jkc;	state Exp;
branches;
next	;


desc
@Pack floats to chars
@


1.20
log
@added Reg Beardsley's checkpar()
@
text
@/* Copyright (c) Colorado School of Mines, 2011.*/
/* All rights reserved.                       */

/* SUPACK1: $Revision: 1.18 $ ; $Date: 2003/06/09 16:17:07 $	*/

#include "su.h"
#include "segy.h"

/*********************** self documentation **********************/
char *sdoc[] = {
"								",
" SUPACK1 - pack segy trace data into chars			",
"								",
" supack1 <segy_file >packed_file	gpow=0.5 		",
"								",
" Required parameters:						",
"	none							",
"						        	",
" Optional parameter: 						",
"	gpow=0.5	exponent used to compress the dynamic	",
"			range of the traces			",
"								",
NULL};

/* Credits:
 *	CWP: Jack K. Cohen, Shuki Ronen, Brian Sumner
 *
 * Caveats:
 *	This program is for single site use.  Use segywrite to make
 *	a portable tape.
 *
 *	We are storing the local header words, ungpow and unscale,
 *	required by suunpack1 as floats.  Although not essential
 *	(compare the handling of such fields as dt), it allows us
 *	to demonstrate the convenience of using the natural data type.
 *	In any case, the data itself is non-portable floats in general,
 *	so we aren't giving up any intrinsic portability.
 *	
 * Notes:
 *	ungpow and unscale are defined in segy.h
 *	trid = CHARPACK is defined in su.h and segy.h
 *
 * Trace header fields accessed: ns
 * Trace header fields modified: ungpow, unscale, trid
 */
/**************** end self doc ***********************************/


#define GPOW	0.5	/* default power parameter */

segy tr;	/* on  input: SEGY hdr & (float) trace data */
		/* on output: data as signed chars          */

int
main(int argc, char **argv)
{
	float gpow;
	int nt;
	cwp_Bool isone, ishalf;
	float f_one = 1.0;
	float f_half = 0.5;


	/* Initialize */
	initargs(argc, argv);
	requestdoc(1);


	/* Get parameters */
	if (!getparfloat("gpow", &gpow)) gpow = GPOW;
        checkpars();
	if (gpow <= 0.0) err("gpow = %g must be positive", gpow);
	isone  = CLOSETO(gpow, f_one);
	ishalf = CLOSETO(gpow, f_half);

	/* Get number of time samples from first trace */
	if (!gettr(&tr)) err("can't get first trace");
	nt = tr.ns;

	/* Main loop over segy traces */
	do {
		/* Point output trace at the trace data and pack.
		   Since the chars take less room than the floats,
		   we don't overwrite.
	
		   Note that the segy field tr.data is declared as
		   floats, so we need to invent a pointer for the
		   char array which is actually there.
		*/

		register signed char *otr = (signed char *) tr.data;
		register int i;
		register float absmax;
		register float scale;

		/* Power transform to decrease dynamic range */
		if (!isone) {
			register float val;

			if (ishalf) {
				for (i = 0; i < nt; ++i) {
					val = tr.data[i];
					tr.data[i] = (val >= 0.0) ?
						sqrt(val) : -sqrt(-val);
				}
			} else {
				for (i = 0; i < nt; ++i) {
					val = tr.data[i];
					tr.data[i] = (val >= 0.0) ?
						pow(val, gpow) :
							-pow(-val, gpow);
				}
			}
		}

		/* Store "ungpow" factor */
		tr.ungpow = 1.0/gpow;

		/* Read trace data and get absmax */
		absmax = ABS(tr.data[0]);
		for (i = 1; i < nt; ++i)
			absmax = MAX(absmax, ABS(tr.data[i]));

		/* Compute scale factor and store "unscale" factor */
		/* If max is zero, then put scale and unscale to zero too */
		scale = absmax ? SCHAR_MAX/absmax : 0.0;
		tr.unscale = absmax ? 1.0/scale : 0.0;

		/* Apply the scale and load in char data */
		for (i = 0; i < nt; ++i) { 
			tr.data[i] *= scale;
			otr[i] = (signed char) tr.data[i];
		}

		/* Write trace ID as the packed char code number */
		tr.trid = CHARPACK;

		/* Output the "segy" with chars in the data array */
		puttr(&tr);

	} while (gettr(&tr));

	
	return(CWP_Exit());
}
@


1.19
log
@copyright
@
text
@d71 1
@


1.18
log
@9 June 2003
@
text
@d1 4
a4 1
/* SUPACK1: $Revision: 1.17 $ ; $Date: 1997/07/28 22:36:46 $	*/
@


1.17
log
@changes suggested by Stew Levin to silence SGI compiler warnings, etc
@
text
@d1 1
a1 1
/* SUPACK1: $Revision: 1.16 $ ; $Date: 1996/09/13 21:49:05 $	*/
d140 1
a140 1
	return EXIT_SUCCESS;
@


1.16
log
@silenced -Wall messages
@
text
@d1 1
a1 1
/* SUPACK1: $Revision: 1.15 $ ; $Date: 1996/02/05 16:10:34 $	*/
d23 1
a23 1
 *	CWP: Jack, Shuki, Brian
d57 2
d69 2
a70 2
	isone  = CLOSETO(gpow, 1.0);
	ishalf = CLOSETO(gpow, 0.5);
@


1.15
log
@Deal with header words accessed/modified down to sudoc.
Cosmetics.
@
text
@d1 1
a1 1
/* SUPACK1: $Revision: 1.14 $ ; $Date: 1995/01/19 11:44:06 $	*/
d51 1
@


1.14
log
@fixed unmached comments
@
text
@d1 1
a1 1
/* SUPACK1: $Revision: 1.13 $ ; $Date: 94/08/25 15:00:20 $	*/
d40 2
d103 2
a104 1
						pow(val, gpow) : -pow(-val, gpow);
@


1.13
log
@Removed copyright statement from codes that had it.
Moved self-doc line for sudoc.
@
text
@d1 1
a1 1
/* SUPACK1: $Revision: 1.12 $ ; $Date: 93/08/13 10:28:13 $	*/
d74 7
a80 6
		/* Since the chars take less room than the floats,
		/* we don't overwrite.
		/*
		/* Note that the segy field tr.data is declared as
		/* floats, so we need to invent a pointer for the
		/* char array which is actually there. */
d114 1
a114 1
		/* Compute scale factor and store "unscale" factor
@


1.12
log
@changed Bool to cwp_Bool
@
text
@d1 1
a1 1
/* SUPACK1: $Revision: 1.11 $ ; $Date: 92/10/23 16:16:20 $	*/
a2 13
/*----------------------------------------------------------------------
 * Copyright (c) Colorado School of Mines, 1990.
 * All rights reserved.
 *
 * This code is part of SU.  SU stands for Seismic Unix, a processing line
 * developed at the Colorado School of Mines, partially based on Stanford
 * Exploration Project (SEP) software.  Inquiries should be addressed to:
 *
 *  Jack K. Cohen, Center for Wave Phenomena, Colorado School of Mines,
 *  Golden, CO 80401  (jkc@@dix.mines.colorado.edu)
 *----------------------------------------------------------------------
 */

a20 1
/**************** end self doc ***********************************/
d41 1
@


1.11
log
@new selfdoc installed
@
text
@d1 1
a1 1
/* SUPACK1: $Revision: 1.10 $ ; $Date: 91/09/05 08:51:25 $	*/
d66 1
a66 1
	Bool isone, ishalf;
@


1.10
log
@string -> String and so forth
@
text
@d1 1
a1 1
/* SUPACK1: $Revision: 1.9 $ ; $Date: 90/10/29 18:26:34 $	*/
d20 14
a33 14
String sdoc = "\
								\n\
SUPACK1 - pack segy trace data into chars			\n\
								\n\
supack1 <segy_file >packed_file	gpow=0.5 			\n\
								\n\
Required parameters:						\n\
	none							\n\
						        	\n\
Optional parameter: 						\n\
	gpow=0.5	exponent used to compress the dynamic	\n\
			range of the traces			\n\
								\n\
";
d71 1
a71 1
	askdoc(1);
@


1.9
log
@Some minor efficiencies
@
text
@d1 1
a1 1
/* SUPACK1: $Revision: 1.8 $ ; $Date: 90/10/28 18:01:14 $	*/
d20 1
a20 1
string sdoc = "\
d66 1
a66 1
	bool isone, ishalf;
d75 1
a75 1
	if (!fgetpar("gpow", &gpow)) gpow = GPOW;
d77 1
a77 1
	isone = CLOSETO(gpow, 1.0);
@


1.8
log
@Fixed err statement.
@
text
@d1 1
a1 1
/* SUPACK1: $Revision: 1.7 $ ; $Date: 90/10/28 08:47:08 $	*/
d64 3
a66 5
	signed char *otr;/* temp to hold a packed datum			*/
	float absmax;	/* absolute max on a trace			*/
	float gpow;	/* power to control dynamic range		*/
	float scale;	/* normalize float data to UCHAR_MAX + 1 levels	*/
	int nt;		/* number of time samples			*/
d77 2
d86 9
d96 2
d100 1
a100 1
		if (!CLOSETO(gpow, 1.0)) {
d103 1
a103 1
			if (CLOSETO(gpow, 0.5)) {
d106 2
a107 1
					tr.data[i] = SGN(val) * sqrt(ABS(val));
a108 5
			} else if (CLOSETO(gpow, 2.0)) {
				for (i = 0; i < nt; ++i) {
					val = tr.data[i];
					tr.data[i] = val * ABS(val);
				}
d112 2
a113 2
					tr.data[i] = SGN(val) *
						exp(gpow*log(ABS(val)));
d126 1
a126 1
		/* Compute scale factor and store "unscale" factor        */
d131 1
a131 4
		/* Point output trace at the trace data and pack. */
		/* Since the chars take less room than the floats,*/
		/* we don't overwrite.                            */
		otr = (signed char *) tr.data;
@


1.7
log
@Check that gpow > 0
@
text
@d1 1
a1 1
/* SUPACK1: $Revision: 1.6 $ ; $Date: 90/10/27 23:14:47 $	*/
d78 1
a78 1
	if (gpow <= 0.0) err("gpow = %g must be positive");
@


1.6
log
@Fixed bug: CHAR_MAX -> SCHAR_MAX and explicitly use signed chars.
@
text
@d1 1
a1 1
/* SUPACK1: $Revision: 1.5 $ ; $Date: 90/10/26 20:26:45 $	*/
d78 1
@


1.5
log
@Revised for all-purpose fgettr,fputtr
@
text
@d1 1
a1 1
/* SUPACK1: $Revision: 1.4 $ ; $Date: 90/10/12 09:17:46 $	*/
d57 1
a57 1
#define GPOW		0.5	/* default power parameter */
d60 1
a60 1
		/* on output: data as chars                 */
d64 1
a64 1
	string otr;	/* temp to hold a packed datum			*/
d120 1
a120 1
		scale = absmax ? CHAR_MAX/absmax : 0.0;
d126 1
a126 1
		otr = (char *) tr.data;
d129 1
a129 1
			otr[i] = (char) tr.data[i];
@


1.4
log
@Forgot ABS inside loop (courtesy of Dave).
@
text
@d1 1
a1 1
/* SUPACK1: $Revision: 1.3 $ ; $Date: 90/06/05 15:51:26 $	*/
d136 1
a136 1
		puttr1(&tr);
@


1.3
log
@Eliminated veclib routines.
@
text
@d1 1
a1 1
/* SUPACK1: $Revision: 1.2 $ ; $Date: 90/05/29 21:32:56 $	*/
d116 1
a116 1
			absmax = MAX(absmax, tr.data[i]);
@


1.2
log
@ANSI C, etc.
@
text
@d1 1
a1 1
/* SUPACK1: $Revision: 1.1 $ ; $Date: 90/04/19 20:17:39 $	*/
a17 1
#include "fconst.h"
a53 2
 *	cpack() is optimized in C because it contains a cast.
 *      This code is modeled after some suggestions by Brian.
a65 1
	int absmaxloc;	/* zero-based index of absmax			*/
a68 7
	void cpack(	/* scale and pack to chars: optimized sub	*/
	register float *a,
	int i,
	register float scale,
	register string c,
	int k,
	register int n);
d85 1
d88 13
a100 5
		if (gpow != 1.0) {
			if (gpow == 0.5) {
			    vssqrt(tr.data, ONE, tr.data, ONE, &nt);
			} else if (gpow == 2.0) {
			    vssq(tr.data, ONE, tr.data, ONE, &nt);
d102 5
a106 1
			    vspow(tr.data, ONE, &gpow, tr.data, ONE, &nt);
d114 3
a116 1
		maxmgv(tr.data, ONE, &absmax, &absmaxloc, &nt);
d127 4
a130 1
		cpack(tr.data, 1, scale, otr, 1, nt);
a141 55
}


/* scale and pack: optimizes the following loop:

	for (i = 0; i < tr.ns; i++) { 
		tr.data[i] *= scale;
		otr[i] = (char) tr.data[i];
	}
*/

#define ROLLPOW	3
#define NROLL	(1 << ROLLPOW)
#define ROLLMSK	(NROLL - 1)

void cpack(
	register float *a,
	int i,
	register float scale,
	register string c,
	int k,
	register int n
)
{
	register int r;

	if (i == 1 && k == 1) {
		switch (n & ROLLMSK) {
		case 7: *a *= scale;	*c++ = (char) *a++;
		case 6: *a *= scale;	*c++ = (char) *a++;
		case 5: *a *= scale;	*c++ = (char) *a++;
		case 4: *a *= scale;	*c++ = (char) *a++;
		case 3: *a *= scale;	*c++ = (char) *a++;
		case 2: *a *= scale;	*c++ = (char) *a++;
		case 1: *a *= scale;	*c++ = (char) *a++;
		}

		for (r = n >> ROLLPOW; r--; ) {
			*a *= scale;	*c++ = (char) *a++;
			*a *= scale;	*c++ = (char) *a++;
			*a *= scale;	*c++ = (char) *a++;
			*a *= scale;	*c++ = (char) *a++;
			*a *= scale;	*c++ = (char) *a++;
			*a *= scale;	*c++ = (char) *a++;
			*a *= scale;	*c++ = (char) *a++;
			*a *= scale;	*c++ = (char) *a++;
		}
	} else {
		for (r = n; r--; ) {
			*a *= scale;	*c++ = (char) *a++;
			c += k;
			a += i;
		}
	}
	return;
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/* SUPACK1: $Revision: 2.7 $ ; $Date: 89/09/23 16:54:18 $	*/
d12 1
a12 1
 *  Golden, CO 80401  (isis!csm9a!jkcohen)
d31 1
a31 1
	gpow = 0.5	exponent used to compress the dynamic	\n\
a56 2
 *
 *
a59 7
/* Embed Revision Control System identifier strings */
static string progid =
	"   $Source: /src/su/src/RCS/supack1.c,v $";
static string revid =
	"   $Revision: 2.7 $ ; $Date: 89/09/23 16:54:18 $";


d65 1
a65 2
main(argc, argv)
int argc; char **argv;
d73 7
a79 1
	void cpack();	/* scale and pack to chars: optimized sub	*/
a83 5
	if (!igetpar("ID", &ID)) ID = 0;
	if (ID) {
		(void) fprintf(stderr, "%s\n", progid);
		(void) fprintf(stderr, "%s\n", revid);
	}
d150 8
a157 6
void cpack(a, i, scale, c, k, n)
register float *a;
register float scale;
register string c;
int i, k;
register int n;
@
