head	1.20;
access;
symbols;
locks; strict;
comment	@ * @;


1.20
date	2011.11.16.23.21.55;	author john;	state Exp;
branches;
next	1.19;

1.19
date	2011.11.12.00.39.02;	author john;	state Exp;
branches;
next	1.18;

1.18
date	2010.01.20.23.56.55;	author john;	state Exp;
branches;
next	1.17;

1.17
date	2008.01.21.16.44.13;	author john;	state Exp;
branches;
next	1.16;

1.16
date	2005.08.31.20.09.24;	author john;	state Exp;
branches;
next	1.15;

1.15
date	2005.08.30.00.16.27;	author john;	state Exp;
branches;
next	1.14;

1.14
date	2005.08.29.20.25.59;	author john;	state Exp;
branches;
next	1.13;

1.13
date	2005.08.29.19.54.27;	author john;	state Exp;
branches;
next	1.12;

1.12
date	2004.07.01.18.58.51;	author john;	state Exp;
branches;
next	1.11;

1.11
date	2004.07.01.18.58.11;	author john;	state Exp;
branches;
next	1.10;

1.10
date	2003.06.04.17.05.44;	author john;	state Exp;
branches;
next	1.9;

1.9
date	96.02.22.15.56.23;	author jkc;	state Exp;
branches;
next	1.8;

1.8
date	96.02.07.15.52.39;	author jkc;	state Exp;
branches;
next	1.7;

1.7
date	95.08.04.15.49.55;	author jkc;	state Exp;
branches;
next	1.6;

1.6
date	94.08.25.15.01.29;	author jkc;	state Exp;
branches;
next	1.5;

1.5
date	93.11.29.14.43.50;	author john;	state Exp;
branches;
next	1.4;

1.4
date	93.11.24.16.23.04;	author john;	state Exp;
branches;
next	1.3;

1.3
date	92.10.26.13.48.17;	author john;	state Exp;
branches;
next	1.2;

1.2
date	91.09.05.08.52.19;	author jkcohen;	state Exp;
branches;
next	1.1;

1.1
date	91.06.19.13.53.37;	author dhale;	state Exp;
branches;
next	;


desc
@Convert a function of time to a function of depth
@


1.20
log
@added Reg Beardsley's checkpar()
@
text
@/* Copyright (c) Colorado School of Mines, 2011.*/
/* All rights reserved.                       */

/* SUTTOZ: $Revision: 1.18 $ ; $Date: 2010/01/20 23:56:55 $		*/

#include "su.h"
#include "segy.h"
#include "header.h"

/*********************** self documentation ******************************/
char *sdoc[] = {
"									",
" SUTTOZ - resample from time to depth					",
"									",
" suttoz <stdin >stdout [optional parms]				",
"									",
" Optional Parameters:							",
" nz=1+(nt-1)*dt*vmax/(2.0*dz)   number of depth samples in output	",
" dz=vmin*dt/2		depth sampling interval (defaults avoids aliasing)",
" fz=v(ft)*ft/2		first depth sample				",
" t=0.0,...		times corresponding to interval velocities in v",
" v=1500.0,...		interval velocities corresponding to times in v",
" vfile=		  binary (non-ascii) file containing velocities v(t)",
" verbose=0		>0 to print depth sampling information		",
"									",
" Notes:								",
" Default value of nz set to avoid aliasing				",
" The t and v arrays specify an interval velocity function of time.	",
"									",
" Note that t and v are given  as arrays of floats separated by commas,  ",
" for example:								",
" t=0.0,0.01,.2,... v=1500.0,1720.0,1833.5,... with the number of t values",
" equaling the number of v values. The velocities are linearly interpolated",
" to make a continuous, piecewise linear v(t) profile.			",
"									",
" Linear interpolation and constant extrapolation is used to determine	",
" interval velocities at times not specified.  Values specified in t	",
" must increase monotonically.						",
"									",
" Alternatively, interval velocities may be stored in a binary file	",
" containing one velocity for every time sample.  If vfile is specified,",
" then the t and v arrays are ignored.					",
"									",
" see selfdoc of suztot  for depth to time conversion			",
"									",
" Trace header fields accessed:  ns, dt, and delrt			",
" Trace header fields modified:  trid, ns, d1, and f1			",
"									",
NULL};

/* Credits:
 *	CWP: Dave Hale c. 1992
 *
 */
/**************** end self doc *******************************************/

/* functions defined and used internally */
static void maketz (int nt, float dt, float ft, float v[], 
	int nz, float dz, float fz, float t[]);
static void zttz(int nt, float dt, float ft, float zt[], float vft, float vlt, 
	int nz, float dz, float fz, float tz[]);

segy tr;

int
main(int argc, char **argv)
{
	int nt;		/* number of time samples */
	int it;		/* counter */
	int nz;		/* numer of depth samples */

	int ntpar;	/* number of getparred time values for velocities */
	int nvpar;	/* number of getparred velocity values */
	int itpar;	/* counter */

	int verbose;	/* verbose flag, =0 silent, =1 chatty */
	float dt;	/* time sampling interval */
	float ft;	/* first time value */
	float dz;	/* depth sampling interval for velocities */
	float fz;	/* first depth value */
	float t;	/* timevalues for velocities */
	float vmin;	/* minimum velocity */
	float vmax;	/* maximum velocity */
	float *tpar=NULL;	/* values of t getparred */
	float *vpar=NULL;	/* values of v getparred */
	float *vt=NULL;		/* v(t) velocity as a function of t */
	float *tz=NULL;		/* t(z) time as a function of z */
	float *temp=NULL;	/* temporary storage array */
	char *vfile="";		/* name of the velocity file */

	/* hook up getpar */
	initargs(argc,argv);
	requestdoc(1);

	/* get time sampling from first header */
	if (!gettr(&tr)) err("can't get first trace");
	nt = tr.ns;
	dt = ((double) tr.dt)/1000000.0;
	ft = tr.delrt/1000.0;

	/* determine velocity function v(t) */
	vt = ealloc1float(nt);
	if (!getparstring("vfile",&vfile)) {
		ntpar = countparval("t");
		if (ntpar==0) ntpar = 1;
		tpar = ealloc1float(ntpar);
		if (!getparfloat("t",tpar)) tpar[0] = 0.0;
		nvpar = countparval("v");
		if (nvpar==0) nvpar = 1;
		if (nvpar!=ntpar)err("number of t and v values must be equal");
		vpar = ealloc1float(nvpar);
		if (!getparfloat("v",vpar)) vpar[0] = 1500.0;
		for (itpar=1; itpar<ntpar; ++itpar)
			if (tpar[itpar]<=tpar[itpar-1])
				err("tpar must increase monotonically");
		for (it=0,t=0.0; it<nt; ++it,t+=dt)
			intlin(ntpar,tpar,vpar,vpar[0],vpar[ntpar-1],
				1,&t,&vt[it]);
	} else {
		if (fread(vt,sizeof(float),nt,fopen(vfile,"r"))!=nt)
			err("cannot read %d velocities from file %s",nt,vfile);
	}

	/* determine minimum and maximum velocities */
	for (it=1,vmin=vmax=vt[0]; it<nt; ++it) {
		if (vt[it]<vmin) vmin = vt[it];
		if (vt[it]>vmax) vmax = vt[it];
	}

	/* get parameters */
	if (!getparfloat("dz",&dz)) dz = vmin*dt/2.0;
	if (!getparfloat("fz",&fz)) fz = vt[0]*ft/2.0;
	if (!getparint("nz",&nz)) nz = 1+(nt-1)*dt*vmax/(2.0*dz);
	if (!getparint("verbose",&verbose)) verbose = 0;
        checkpars();
	CHECK_NT("nz",nz);

	/* if requested, print depth sampling */
	if (verbose) {
		warn("Input:");
		warn("\tnumber of time samples = %d",nt);
		warn("\ttime sampling interval = %g",dt);
		warn("\tfirst time sample = %g",ft);
		warn("Output:\n");
		warn("\tnumber of depth samples = %d",nz);
		warn("\tdepth sampling interval = %g",dz);
		warn("\tfirst depth sample = %g",fz);
	}

	/* allocate workspace */
	tz = ealloc1float(nz);
	temp = ealloc1float(nt);

	/* make t(z) function */
	maketz(nt,dt,ft,vt,nz,dz,fz,tz);
	
	/* loop over traces */
	do {
		/* update header fields */
		tr.trid = TRID_DEPTH;
		tr.ns = nz;
		tr.d1 = dz;
		tr.f1 = fz;

		/* resample */
		memcpy((void *) temp, (const void *) tr.data,nt*sizeof(float));
		ints8r(nt,dt,ft,temp,0.0,0.0,nz,tz,tr.data);

		/* put this trace before getting another */
		puttr(&tr);

	} while(gettr(&tr));

	return(CWP_Exit());
}

static void maketz (int nt, float dt, float ft, float v[], 
	int nz, float dz, float fz, float t[])
/************************************************************************
maketz - compute t(z) from v(t)
*************************************************************************
Input:
nt	number of time samples
dt	time sampling interval
ft	first time sample
v[]	array of velocities as a function of time t
nz	number of z values (output)
dz	depth sampling interval (output)
fz	first depth value (output)
Output:
t[]	array of t values as a function of z
*************************************************************************
Author: CWP: Dave Hale (c. 1992)
*************************************************************************/
{
	int it;			/* counter */
	float vft;		/* velocity at the first time sample */
	float vlt;		/* velocity at the last time sample */
	float *z=NULL;		/* array of depth values as a function of t */

	/* allocate space */
	z = ealloc1float(nt);

	/* calculate z(t) from v(t) */
	z[0] = 0.5*ft*v[0];
	for (it=1; it<nt; it++)
		z[it] = z[it-1]+0.5*dt*v[it-1];
	vft = v[0];
	vlt = v[nt-1];

	/* compute t(z) from z(t) */
	zttz(nt,dt,ft,z,vft,vlt,nz,dz,fz,t);
	free1float(z);
}

static void zttz(int nt, float dt, float ft, float zt[], float vft, float vlt, 
	int nz, float dz, float fz, float tz[])
/************************************************************************
zttz - compute t(z) from z(t)
*************************************************************************
Input:
nt	number of time samples
dt	time sampling interval
ft	first time value
zt[]	array of z values as a function of time
vft	velocity at first time sample
vlt	velocity at last time sample
nz	number of z values  (output)
dz	depth sampling interval (output)
fz	first z value
Output:
tz[] 	array of time values as a function of depth
*************************************************************************
Author: CWP: Dave Hale (c. 1992)
************************************************************************/
{
	int iz;				/* depth counter */
	float z;			/* depth */
	float lt=ft+(nt-1)*dt;		/* last time */
	float lz=fz+(nz-1)*dz;		/* last depth */

	/* switch from z(t) to t(z) */
	yxtoxy(nt,dt,ft,zt,nz,dz,fz,0.0,0.0,tz);

	/* for z values before fz, use first velocity to calculate t(z) */
	for (iz=0,z=fz; z<=zt[0]; iz++,z+=dz)
		tz[iz] = 2.0*z/vft;

	/* for z values from lz down to fz, calculate t(z) */
	for (iz=nz-1,z=lz; z>=zt[nt-1]; iz--,z-=dz)
		tz[iz] = lt+2.0*(z-zt[nt-1])/vlt;
}
@


1.19
log
@copyright
@
text
@d135 1
@


1.18
log
@fixed TRID_DEPTH error
@
text
@d1 4
a4 1
/* SUTTOZ: $Revision: 1.17 $ ; $Date: 2008/01/21 16:44:13 $		*/
@


1.17
log
@added stuff to the selfdoc.
@
text
@d1 1
a1 1
/* SUTTOZ: $Revision: 1.16 $ ; $Date: 2005/08/31 20:09:24 $		*/
d156 1
a156 1
		tr.trid = 30;
@


1.16
log
@small selfdoc change
@
text
@d1 1
a1 1
/* SUTTOZ: $Revision: 1.15 $ ; $Date: 2005/08/30 00:16:27 $		*/
d30 2
a31 1
" equaling the number of v values.					",
@


1.15
log
@small change in verbose
@
text
@d1 1
a1 1
/* SUTTOZ: $Revision: 1.14 $ ; $Date: 2005/08/29 20:25:59 $		*/
d40 2
@


1.14
log
@added more documentation.
@
text
@d1 1
a1 1
/* SUTTOZ: $Revision: 1.13 $ ; $Date: 2005/08/29 19:54:27 $		*/
d21 1
a21 1
" verbose=1		>0 to print depth sampling information		",
d128 1
a128 1
	if (!getparint("verbose",&verbose)) verbose = 1;
d133 8
a140 8
		fprintf(stderr,"Input:\n");
		fprintf(stderr,"\tnumber of time samples = %d\n",nt);
		fprintf(stderr,"\ttime sampling interval = %g\n",dt);
		fprintf(stderr,"\tfirst time sample = %g\n",ft);
		fprintf(stderr,"Output:\n");
		fprintf(stderr,"\tnumber of depth samples = %d\n",nz);
		fprintf(stderr,"\tdepth sampling interval = %g\n",dz);
		fprintf(stderr,"\tfirst depth sample = %g\n",fz);
@


1.13
log
@cosmetic
@
text
@d1 1
a1 1
/* SUTTOZ: $Revision: 1.12 $ ; $Date: 2004/07/01 18:58:51 $		*/
a169 1
/* compute t(z) from v(t) */
d172 16
d189 4
a192 2
	int it;
	float vft,vlt,*z;
d194 1
d196 2
d203 2
a208 1
/* compute t(z) from z(t) */
d211 18
d230 4
a233 2
	int iz;
	float z,lt=ft+(nt-1)*dt,lz=fz+(nz-1)*dz;
d235 1
d237 2
d241 2
@


1.12
log
@oops. missing ; from previous edit.
@
text
@d1 1
a1 1
/* SUTTOZ: $Revision: 1.11 $ ; $Date: 2004/07/01 18:58:11 $		*/
d15 7
a21 7
" nz=                     number of depth samples			",
" dz=vmin*dt/2            depth sampling interval (defaults avoids aliasing)",
" fz=v(ft)*ft/2           first depth sample				",
" t=0.0                   times corresponding to interval velocities in v",
" v=1500.0                interval velocities corresponding to times in v",
" vfile=                  binary (non-ascii) file containing velocities v(t)",
" verbose=1               >0 to print depth sampling information	",
d24 1
d46 1
a46 1
 *	CWP: Dave Hale
@


1.11
log
@comments added to declared variables and selfdoc improvement
@
text
@d1 1
a1 1
/* SUTTOZ: $Revision: 1.10 $ ; $Date: 2003/06/04 17:05:44 $		*/
d81 1
a81 1
	float *temp=NULL	/* temporary storage array */
@


1.10
log
@added a couple of items to the selfdoc
@
text
@d1 1
a1 1
/* SUTTOZ: $Revision: 1.9 $ ; $Date: 1996/02/22 15:56:23 $		*/
d38 4
a46 2
 * Trace header fields accessed:  ns, dt, and delrt
 * Trace header fields modified:  trid, ns, d1, and f1
d61 22
a82 3
	int nt,it,nz,ntpar,nvpar,itpar,verbose;
	float dt,ft,dz,fz,t,vmin,vmax,*tpar,*vpar,*vt,*tz,*temp;
	char *vfile="";
@


1.9
log
@Using CHECK_NT to check output number of samples against SU_NFLTS.
@
text
@d1 1
a1 1
/* SUTTOZ: $Revision: 1.8 $ ; $Date: 1996/02/07 15:52:39 $		*/
d25 6
d145 1
a145 1
	return EXIT_SUCCESS;
@


1.8
log
@Deal with header fields accessed/modified down to sudoc.
@
text
@d1 1
a1 1
/* SUTTOZ: $Revision: 1.7 $ ; $Date: 1995/08/04 15:49:55 $		*/
d50 1
d101 1
@


1.7
log
@Changed cast of tr.dt to double for consistency.
@
text
@d1 1
a1 1
/* SUTTOZ: $Revision: 1.6 $ ; $Date: 1994/08/25 15:01:29 $		*/
a31 3
"									",
" Trace header fields accessed:  ns, dt, and delrt			",
" Trace header fields modified:  trid, ns, d1, and f1			",
d36 3
d129 1
a129 1
		memcpy( (void *) temp, (const void *) tr.data,nt*sizeof(float));
@


1.6
log
@Removed copyright statement from codes that had it.
Moved self-doc line for sudoc.
@
text
@d1 1
a1 1
/* SUTTOZ: $Revision: 1.5 $ ; $Date: 93/11/29 14:43:50 $		*/
d63 1
a63 1
	dt = (float) tr.dt/1000000.0;
d75 1
a75 1
		if (nvpar!=ntpar) err("number of t and v values must be equal");
@


1.5
log
@changed bcopy to memcpy
@
text
@d1 1
a1 1
/* SUTTOZ: $Revision: 1.4 $ ; $Date: 93/11/24 16:23:04 $		*/
a2 13
/*----------------------------------------------------------------------
 * Copyright (c) Colorado School of Mines, 1990.
 * All rights reserved.
 *
 * This code is part of SU.  SU stands for Seismic Unix, a processing line
 * developed at the Colorado School of Mines, partially based on Stanford
 * Exploration Project (SEP) software.  Inquiries should be addressed to:
 *
 *  Jack K. Cohen, Center for Wave Phenomena, Colorado School of Mines,
 *  Golden, CO 80401  (jkc@@dix.mines.colorado.edu)
 *----------------------------------------------------------------------
 */

a35 1
/**************** end self doc *******************************************/
d40 1
@


1.4
log
@added explicit cast
@
text
@d1 1
a1 1
/* SUTTOZ: $Revision: 1.3 $ ; $Date: 92/10/26 13:48:17 $		*/
d142 1
a142 1
		bcopy(tr.data,temp,nt*sizeof(float));
@


1.3
log
@new selfdoc installed
@
text
@d1 1
a1 1
/* SUTTOZ: $Revision: 1.2 $ ; $Date: 91/09/05 08:52:19 $		*/
d76 1
a76 1
	dt = tr.dt/1000000.0;
@


1.2
log
@string -> String and so forth
@
text
@d1 1
a1 1
/* SUTTOZ: $Revision: 1.1 $ ; $Date: 91/06/19 13:53:37 $		*/
d21 28
a48 28
String sdoc =
"\n"
"SUTTOZ - resample from time to depth\n"
"\n"
"suttoz <stdin >stdout [optional parms]\n"
"\n"
"Optional Parameters:\n"
"nz=                     number of depth samples\n"
"dz=vmin*dt/2            depth sampling interval (defaults avoids aliasing)\n"
"fz=v(ft)*ft/2           first depth sample\n"
"t=0.0                   times corresponding to interval velocities in v\n"
"v=1500.0                interval velocities corresponding to times in v\n"
"vfile=                  binary (non-ascii) file containing velocities v(t)\n"
"verbose=1               >0 to print depth sampling information\n"
"\n"
"Notes:\n"
"The t and v arrays specify an interval velocity function of time.\n"
"Linear interpolation and constant extrapolation is used to determine\n"
"interval velocities at times not specified.  Values specified in t\n"
"must increase monotonically.\n"
"\n"
"Alternatively, interval velocities may be stored in a binary file\n"
"containing one velocity for every time sample.  If vfile is specified,\n"
"then the t and v arrays are ignored.\n"
"\n"
"Trace header fields accessed:  ns, dt, and delrt\n"
"Trace header fields modified:  trid, ns, d1, and f1\n"
"\n";
d52 1
a52 1
 *	CWP: Dave
d71 1
a71 1
	askdoc(1);
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/* SUTTOZ: $Revision: 1.0 $ ; $Date: 91/06/19 12:37:52 $		*/
d21 1
a21 1
string sdoc =
@
