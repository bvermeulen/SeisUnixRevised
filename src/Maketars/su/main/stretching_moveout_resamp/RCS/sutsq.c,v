head	1.8;
access;
symbols;
locks; strict;
comment	@ * @;


1.8
date	2011.11.16.23.21.55;	author john;	state Exp;
branches;
next	1.7;

1.7
date	2011.11.12.00.39.02;	author john;	state Exp;
branches;
next	1.6;

1.6
date	2003.06.09.16.17.07;	author john;	state Exp;
branches;
next	1.5;

1.5
date	96.09.13.21.49.05;	author john;	state Exp;
branches;
next	1.4;

1.4
date	96.02.22.15.56.22;	author jkc;	state Exp;
branches;
next	1.3;

1.3
date	96.02.07.15.50.03;	author jkc;	state Exp;
branches;
next	1.2;

1.2
date	95.08.02.18.15.21;	author jkc;	state Exp;
branches;
next	1.1;

1.1
date	94.09.06.13.15.44;	author jkc;	state Exp;
branches;
next	;


desc
@resamples from time to time squared or vice versa
It can be used with
sujearadon to do the hyperbolic transform
@


1.8
log
@added Reg Beardsley's checkpar()
@
text
@/* Copyright (c) Colorado School of Mines, 2011.*/
/* All rights reserved.                       */

/* SUTSQ: $Revision: 1.6 $ ; $Date: 2003/06/09 16:17:07 $		*/

#include "su.h"
#include "segy.h"

/*********************** self documentation **********************/
char *sdoc[] = {
"								",
" SUTSQ -- time axis time-squared stretch of seismic traces	",
"								",
" sutsq [optional parameters] <stdin >stdout 			",
"								",
" Required parameters:						",
"	none				 			",
"								",
" Optional parameters:						",
"       tmin= .1*nt*dt  minimum time sample of interest		",
"                       (only needed for forward transform)	",
"       dt= .004       output sample rate			",
"                       (only needed for inverse transform)	",
"       flag= 1        1=forward transform: time to time squared",
"                     -1=inverse transform: time squared to time",
"								",
" Note: The output of the forward transform always starts with	",
" time squared equal to zero.  'tmin' is used to avoid aliasing	",
" the early times.",
" ",	
NULL};

/*
 * Caveats:
 * 	Amplitudes are not well preserved.
 *
 * Trace header fields accessed: ns, dt
 * Trace header fields modified: ns, dt
 */
/**************** end self doc ***********************************/

segy tr;

int
main(int argc, char **argv)
{
	int j,nt,flag,ntout;
	float *buf,*ttn,dt,dtout=0.0,tmin,tmax;

	/* Initialize */
	initargs(argc, argv);
	requestdoc(1);

	/* Get information from the first header */
	if (!gettr(&tr)) err("can't get first trace");
	nt = tr.ns;
	dt = (float) tr.dt/1000000.0;

	if (!getparfloat("tmin", &tmin)) tmin=0.1*nt*dt;
	if (!getparint("flag", &flag)) flag=1;
	if(flag==1) {
		dtout=tmin*2.*dt;
		tmax=nt*dt;
		ntout=1+tmax*tmax/dtout; CHECK_NT("ntout",ntout);
		ttn=ealloc1float(ntout);
		for(j=0;j<ntout;j++) ttn[j]=sqrt(j*dtout);
	}else{
		if (!getparfloat("dt", &dt)) dtout=0.004;
		ntout=1+sqrt(nt*dt)/dtout; CHECK_NT("ntout",ntout);
		ttn=ealloc1float(ntout);
		for(j=0;j<ntout;j++) ttn[j]=j*j*dtout*dtout;
	}
        checkpars();
	buf = ealloc1float(nt);

	fprintf(stderr,"sutsq: ntin=%d dtin=%f ntout=%d dtout=%f\n",
		nt,dt,ntout,dtout);

	/* Main loop over traces */
	do {
		for(j=0;j<nt;j++) buf[j]=tr.data[j];
		tr.ns = ntout;
		tr.dt = dtout*1000000.;			
		ints8r(nt,dt,0.,buf,0.0,0.0,
			ntout,ttn,tr.data);
		puttr(&tr);
	} while (gettr(&tr));
	
	return(CWP_Exit());
}

@


1.7
log
@copyright
@
text
@d73 1
@


1.6
log
@9 June 2003
@
text
@d1 4
a4 1
/* SUTSQ: $Revision: 1.5 $ ; $Date: 1996/09/13 21:49:05 $		*/
@


1.5
log
@silenced -Wall messages
@
text
@d1 1
a1 1
/* SUTSQ: $Revision: 1.4 $ ; $Date: 1996/02/22 15:56:22 $		*/
d85 1
a85 1
	return EXIT_SUCCESS;
@


1.4
log
@Using CHECK_NT to check output number of samples against SU_NFLTS.
@
text
@d1 1
a1 1
/* SUTSQ: $Revision: 1.3 $ ; $Date: 1996/02/07 15:50:03 $		*/
d45 1
a45 1
	float *buf,*ttn,dt,dtout,tmin,tmax;
@


1.3
log
@Deal with header fields accessed/modified down to sudoc.
@
text
@d1 1
a1 1
/* SUTSQ: $Revision: 1.2 $ ; $Date: 1995/08/02 18:15:21 $		*/
d41 1
d61 1
a61 1
		ntout=1+tmax*tmax/dtout;
d66 1
a66 1
		ntout=1+sqrt(nt*dt)/dtout;
@


1.2
log
@Fixed buggered getpar of tmin.  Thx Stew Levin.
@
text
@d1 1
a1 1
/* SUTSQ: $Revision: 1.1 $ ; $Date: 1994/09/06 13:15:44 $		*/
d33 3
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/* SUTSQ: $Revision: 1.8 $ ; $Date: 94/08/25 14:58:06 $		*/
d17 6
a22 6
"       tmin= .1*nt*dt    minimum time sample of interest	",
"                         (only needed for forward transform)",
"       dt  = .004        output sample rate ",
"                         (only needed for inverse transform)",
"       flag= 1            1=forward transform: time to time squared ",
"                         -1=inverse transform: time squared to time",
d24 2
a25 2
" Note: The output of the forward transform always starts with ",
" time squared equal to zero.  'tmin' is used to avoid aliasing",
d52 1
a52 1
	if (!getparfloat("tmin", &tmin)) 0.1*nt*dt;
@
