head	1.26;
access;
symbols;
locks
	john:1.26; strict;
comment	@ * @;


1.26
date	2013.03.20.17.55.32;	author john;	state Exp;
branches;
next	1.25;

1.25
date	2011.11.16.17.43.20;	author john;	state Exp;
branches;
next	1.24;

1.24
date	2011.11.12.00.01.45;	author john;	state Exp;
branches;
next	1.23;

1.23
date	2007.04.30.17.44.15;	author john;	state Exp;
branches;
next	1.22;

1.22
date	2007.04.30.17.26.57;	author john;	state Exp;
branches;
next	1.21;

1.21
date	2007.04.30.17.23.15;	author john;	state Exp;
branches;
next	1.20;

1.20
date	2003.06.09.16.17.07;	author john;	state Exp;
branches;
next	1.19;

1.19
date	97.07.28.22.36.46;	author john;	state Exp;
branches;
next	1.18;

1.18
date	96.09.13.21.49.05;	author john;	state Exp;
branches;
next	1.17;

1.17
date	96.03.05.20.45.19;	author john;	state Exp;
branches;
next	1.16;

1.16
date	96.02.06.20.27.38;	author jkc;	state Exp;
branches;
next	1.15;

1.15
date	94.08.25.15.01.11;	author jkc;	state Exp;
branches;
next	1.14;

1.14
date	94.04.25.10.15.46;	author john;	state Exp;
branches;
next	1.13;

1.13
date	94.03.25.09.56.04;	author john;	state Exp;
branches;
next	1.12;

1.12
date	94.02.07.11.55.21;	author john;	state Exp;
branches;
next	1.11;

1.11
date	94.02.04.10.00.23;	author john;	state Exp;
branches;
next	1.10;

1.10
date	94.02.03.14.00.18;	author john;	state Exp;
branches;
next	1.9;

1.9
date	94.02.03.13.14.12;	author john;	state Exp;
branches;
next	1.8;

1.8
date	94.02.03.12.57.05;	author john;	state Exp;
branches;
next	1.7;

1.7
date	94.02.02.11.48.42;	author john;	state Exp;
branches;
next	1.6;

1.6
date	94.02.02.11.46.05;	author john;	state Exp;
branches;
next	1.5;

1.5
date	94.02.02.09.27.47;	author john;	state Exp;
branches;
next	1.4;

1.4
date	93.11.18.15.14.52;	author john;	state Exp;
branches;
next	1.3;

1.3
date	93.11.18.15.11.14;	author john;	state Exp;
branches;
next	1.2;

1.2
date	93.11.18.14.39.24;	author john;	state Exp;
branches;
next	1.1;

1.1
date	93.11.18.14.33.01;	author john;	state Exp;
branches;
next	;


desc
@suswapbytes... swap the bytes of big/little endian data..
@


1.26
log
@added options to give the user the choice of not swapping the headers
or the data
@
text
@/* Copyright (c) Colorado School of Mines, 2011.*/
/* All rights reserved.                       */

/* suswapbytes: $Revision: 1.25 $ ; $Date: 2011/11/16 17:43:20 $	*/

#include "su.h"
#include "segy.h"
#include "header.h"

/*********************** self documentation **********************/
char *sdoc[] = {
"									",
" SUSWAPBYTES - SWAP the BYTES in SU data to convert data from big endian",
"               to little endian byte order, and vice versa		",
"									",
" suswapbytes < stdin [optional parameter] > sdtout			",
"									",
" 	format=0		foreign to native			",
" 				=1 native to foreign			",
"	swaphdr=1		swap the header byte order		",
" 				=0 do not change the header byte order	",
"	swapdata=1		swap the data byte order		",
" 				=0 do not change the data byte order	",
" 	ns=from header		if ns not set in header, must be set by hand",
" Notes:								",
"  The 'native'	endian is the endian (byte order) of the machine you are",
"  running this program on. The 'foreign' endian is the opposite byte order.",
"   									",
" Examples of big endian machines are: IBM RS6000, SUN, NeXT		",
" Examples of little endian machines are: PCs, DEC			",
"									",
" Caveat: this code has not been tested on DEC				",
"									",
NULL};

/* Credits: 
 *	CWP: adapted for SU by John Stockwell 
 *		based on a code supplied by:
 *	Institute fur Geophysik, Hamburg: Jens Hartmann (June 1993)
 *
 * Trace header fields accessed: ns
 */
/**************** end self doc ********************************/

/* function prototypes for subroutines used internally */

static segy tr;

int
main(int argc, char *argv[])
{
	size_t trbytes;		/* number of bytes in a trace		*/
	size_t databytes;	/* number of bytes in the data		*/
	int format;		/* format of output  			*/
	int swaphdr;		/* =1 swap header values, =0 don't swap */
	int swapdata;		/* =1 swap data values, =0 don't swap	*/
	int ns,i;		/* counters				*/
	float *data=NULL;	/* pointer to data			*/

	/* Initialize */
	initargs(argc, argv);
	requestdoc(1);

	/* Make sure stdout is a file or pipe */
	switch(filestat(STDOUT)) {
	case TTY:
		err("stdout can't be tty");
	break;
	case DIRECTORY:
		err("stdout must be a file, not a directory");
	break;
	case BADFILETYPE:
		err("stdout is illegal filetype");
	break;
	default:
			/* all others ok */
	break;
	}

	/* get parameters */
	if (!getparint("format", &format)) format = 0;
	if (!getparint("swaphdr", &swaphdr)) swaphdr = 1;
	if (!getparint("swapdata", &swapdata)) swapdata = 1;

	if (format==0) { /* convert foreign to native byte order */

		/* read the header off the first trace */
		efread(&tr,1,HDRBYTES,stdin);

		/* swap the header values on the first trace */
		if (swaphdr)
			for (i = 0; i < SU_NKEYS; ++i) swaphval(&tr,i);

		if (!getparint("ns", &ns))	ns = tr.ns ;
                checkpars();
 
		if (!ns) err("ns not set in header, set ns by hand!");

		/* size of data portion */
		databytes = ns*FSIZE;
		
		/* allocate space for data */
		data = alloc1float(databytes);

		/* read the data values on the first trace */
		efread(data,1,databytes,stdin);

		/* now swap the data values */
		if (swapdata)
			for (i = 0; i < ns ; ++i) swap_float_4(&data[i]);

		/* write out the first trace */
		efwrite(&tr, 1, HDRBYTES, stdout);
		efwrite(data, 1, databytes, stdout);

		/* total size of a trace */
		trbytes= HDRBYTES + databytes;

		/* read, swap, and output the rest of the traces */
 		while (efread(&tr,1,trbytes,stdin)) {

			/* swap header values */
			if (swaphdr)
			for (i = 0; i < SU_NKEYS; ++i) swaphval(&tr,i);

			/* now swap the data values */
			if (swapdata)
				for (i = 0; i < ns ; ++i)
					swap_float_4(&tr.data[i]);

			efwrite(&tr, 1, trbytes, stdout);
		} /* finished converting foreign to native */

	} else { /* convert "native" to "foreign" byte order */
                checkpars();
		/* read in traces, swap, and write to stdout */
		while (gettr(&tr)) {

			trbytes=HDRBYTES+FSIZE*tr.ns;

			/* now swap the data values */
			for (i = 0; i < ((int) tr.ns) ; ++i)
					swap_float_4(&tr.data[i]);

			/* swap header values */
			for (i = 0; i < SU_NKEYS; ++i) swaphval(&tr,i);


			efwrite(&tr,1,trbytes,stdout);
		} /* finished converting native to foreign */
	}
	return(CWP_Exit());
}

@


1.25
log
@added Reg Beardsley's checkpar()
@
text
@d4 1
a4 1
/* suswapbytes: $Revision: 1.23 $ ; $Date: 2007/04/30 17:44:15 $	*/
d20 4
d52 7
a58 4
	size_t trbytes;
	size_t databytes;
	int format,ns,i;
	float *data;
d80 1
a80 1

d82 2
d91 2
a92 1
		for (i = 0; i < SU_NKEYS; ++i) swaphval(&tr,i);
d109 2
a110 1
		for (i = 0; i < ns ; ++i) swap_float_4(&data[i]);
d123 1
d127 2
a128 1
			for (i = 0; i < ns ; ++i)
@


1.24
log
@copyright
@
text
@d85 2
d122 1
@


1.23
log
@trl to tr
@
text
@d1 4
a4 1
/* suswapbytes: $Revision: 1.22 $ ; $Date: 2007/04/30 17:26:57 $	*/
@


1.22
log
@*** empty log message ***
@
text
@d1 1
a1 1
/* suswapbytes: $Revision: 1.21 $ ; $Date: 2007/04/30 17:23:15 $	*/
d40 1
a40 1
static segy trl;
d76 1
a76 1
		efread(&trl,1,HDRBYTES,stdin);
d79 1
a79 1
		for (i = 0; i < SU_NKEYS; ++i) swaphval(&trl,i);
d81 1
a81 1
		if (!getparint("ns", &ns))	ns = trl.ns ;
d97 1
a97 1
		efwrite(&trl, 1, HDRBYTES, stdout);
d104 1
a104 1
 		while (efread(&trl,1,trbytes,stdin)) {
d107 1
a107 1
			for (i = 0; i < SU_NKEYS; ++i) swaphval(&trl,i);
d111 1
a111 1
					swap_float_4(&trl.data[i]);
d113 1
a113 1
			efwrite(&trl, 1, trbytes, stdout);
d118 1
a118 1
		while (gettrl(&trl)) {
d120 1
a120 1
			trbytes=HDRBYTES+FSIZE*trl.ns;
d123 2
a124 2
			for (i = 0; i < ((int) trl.ns) ; ++i)
					swap_float_4(&trl.data[i]);
d127 1
a127 1
			for (i = 0; i < SU_NKEYS; ++i) swaphval(&trl,i);
d130 1
a130 1
			efwrite(&trl,1,trbytes,stdout);
@


1.21
log
@stew levin changes
segy tr to static segy tr
puttr to  fwrite...
@
text
@d1 1
a1 1
/* suswapbytes: $Revision: 1.20 $ ; $Date: 2003/06/09 16:17:07 $	*/
d40 1
a40 1
static segy tr;
d76 1
a76 1
		efread(&tr,1,HDRBYTES,stdin);
d79 1
a79 1
		for (i = 0; i < SU_NKEYS; ++i) swaphval(&tr,i);
d81 1
a81 1
		if (!getparint("ns", &ns))	ns = tr.ns ;
d97 1
a97 1
		efwrite(&tr, 1, HDRBYTES, stdout);
d104 1
a104 1
 		while (efread(&tr,1,trbytes,stdin)) {
d107 1
a107 1
			for (i = 0; i < SU_NKEYS; ++i) swaphval(&tr,i);
d111 1
a111 1
					swap_float_4(&tr.data[i]);
d113 1
a113 1
			efwrite(&tr, 1, trbytes, stdout);
d118 1
a118 1
		while (gettr(&tr)) {
d120 1
a120 1
			trbytes=HDRBYTES+FSIZE*tr.ns;
d123 2
a124 2
			for (i = 0; i < ((int) tr.ns) ; ++i)
					swap_float_4(&tr.data[i]);
d127 1
a127 1
			for (i = 0; i < SU_NKEYS; ++i) swaphval(&tr,i);
d130 1
a130 1
			efwrite(&tr,1,trbytes,stdout);
@


1.20
log
@9 June 2003
@
text
@d1 1
a1 1
/* suswapbytes: $Revision: 1.19 $ ; $Date: 1997/07/28 22:36:46 $	*/
d40 1
a40 1
segy tr;
d112 2
a113 1
			puttr(&tr);
@


1.19
log
@changes suggested by Stew Levin to silence SGI compiler warnings, etc
@
text
@d1 1
a1 1
/* suswapbytes: $Revision: 1.18 $ ; $Date: 1996/09/13 21:49:05 $	*/
d132 1
a132 1
	return EXIT_SUCCESS;
@


1.18
log
@silenced -Wall messages
@
text
@d1 1
a1 1
/* suswapbytes: $Revision: 1.17 $ ; $Date: 1996/03/05 20:45:19 $	*/
d45 2
a46 1
	int trbytes,databytes;
@


1.17
log
@added Stew Levin's fixes
@
text
@d1 1
a1 1
/* suswapbytes: $Revision: 1.16 $ ; $Date: 1996/02/06 20:27:38 $	*/
d42 1
d63 3
@


1.16
log
@Deal with header fields accessed/modified down to sudoc.
@
text
@d1 1
a1 1
/* suswapbytes: $Revision: 1.15 $ ; $Date: 1994/08/25 15:01:11 $	*/
d117 1
a117 1
			for (i = 0; i < tr.ns ; ++i)
@


1.15
log
@Removed copyright statement from codes that had it.
Moved self-doc line for sudoc.
@
text
@d1 1
a1 1
/* suswapbytes: $Revision: 1.14 $ ; $Date: 94/04/25 10:15:46 $	*/
d33 2
@


1.14
log
@for format=0, was swapping header values too soon.
@
text
@d1 1
a1 14
/* suswapbytes: $Revision: 1.13 $ ; $Date: 94/03/25 09:56:04 $	*/

/*----------------------------------------------------------------------
 * Copyright (c) Colorado School of Mines, 1993.
 * All rights reserved.
 *
 * This code is part of SU.	SU stands for Seismic Unix, a processing line
 * developed at the Colorado School of Mines, partially based on Stanford
 * Exploration Project (SEP) software.	Inquiries should be addressed to:
 *
 *	Jack K. Cohen, Center for Wave Phenomena, Colorado School of Mines,
 *	Golden, CO 80401	(jkc@@dix.mines.colorado.edu)
 *----------------------------------------------------------------------
 */
@


1.13
log
@final form, 
@
text
@d1 1
a1 1
/* suswapbytes: $Revision: 1.12 $ ; $Date: 94/02/07 11:55:21 $	*/
d127 4
a133 3
			/* now swap the data values */
			for (i = 0; i < tr.ns ; ++i)
					swap_float_4(&tr.data[i]);
@


1.12
log
@changed TRBYTES to trbytes and DATABYTES to databytes in main
changed (&(*( ))) to ( ) in swaphval()
@
text
@d1 1
a1 1
/* suswapbytes: $Revision: 1.11 $ ; $Date: 94/02/04 10:00:23 $	*/
a49 1
void swaphval(segy *tr, int index);
a139 38
#include "hdr.h"

void swaphval(segy *tr, int index)
/************************************************************************
* swaphval -- swap the bytes in an SU header value by index
*************************************************************************
* Input:
*	segy *tr -- pointer to a segy 
*	int index -- index value
* Output:
*	segy *tr -- pointer to a segy with header fields byte-swapped
*************************************************************************
* Author: CWP: John Stockwell, based on su/lib/hdrpkge.c ideas
*************************************************************************/

{
	char *tp= (char *) tr;

	/* swap the bytes in trace header by type */
        switch(*(hdr[index].type)) {
        case 'h': swap_short_2((short*)(tp + hdr[index].offs));
			break;
        case 'u': swap_u_short_2((unsigned short*)(tp + hdr[index].offs));
			break;
        case 'l': swap_long_4((long*)(tp + hdr[index].offs));
			break;
        case 'v': swap_u_long_4((unsigned long*)(tp + hdr[index].offs));
			break;
        case 'f': swap_float_4((float*)(tp + hdr[index].offs));
			break;
        case 'd': swap_double_8((double*)(tp + hdr[index].offs));
			break;
        default: err("%s: %s: unsupported data type", __FILE__, __LINE__);
			break;
        }

        return;
}
@


1.11
log
@made it so input can be from a pipe
@
text
@d1 1
a1 1
/* suswapbytes: $Revision: 1.10 $ ; $Date: 94/02/03 14:00:18 $	*/
d56 1
a56 1
	int TRBYTES,DATABYTES;
d80 1
a80 1
	if (!format) {
d92 1
a92 1
		DATABYTES = ns*FSIZE;
d95 1
a95 1
		data = alloc1float(DATABYTES);
d98 1
a98 1
		efread(data,1,DATABYTES,stdin);
d105 1
a105 2
		efwrite(data, 1, DATABYTES, stdout);
		
d108 1
a108 1
		TRBYTES= HDRBYTES + DATABYTES;
d111 1
a111 1
 		while (efread(&tr,1,TRBYTES,stdin)) {
d120 4
a123 2
		}
	} else { /* read in traces, swap, and write to stdout */
d126 1
a126 1
			TRBYTES=HDRBYTES+FSIZE*tr.ns;
d135 2
a136 2
			efwrite(&tr,1,TRBYTES,stdout);
		} 
d161 1
a161 1
        case 'h': swap_short_2(&(*((short*)  (tp + hdr[index].offs))));
d163 1
a163 1
        case 'u': swap_u_short_2(&(*((unsigned short*)(tp + hdr[index].offs))));
d165 1
a165 1
        case 'l': swap_long_4(&(*((long*)   (tp + hdr[index].offs))));
d167 1
a167 1
        case 'v': swap_u_long_4(&(*((unsigned long*)(tp + hdr[index].offs))));
d169 1
a169 1
        case 'f': swap_float_4(&(*((float*)  (tp + hdr[index].offs))));
d171 1
a171 1
        case 'd': swap_double_8(&(*((double*) (tp + hdr[index].offs))));
@


1.10
log
@substantial cleanup of swaphval
@
text
@d1 1
a1 1
/* suswapbytes: $Revision: 1.9 $ ; $Date: 94/02/03 13:14:12 $	*/
d56 1
a56 1
	long N_BYTES;
d58 1
d81 2
d84 4
a87 1
		swaphval(&tr, getindex("ns"));
d90 24
a113 3
			N_BYTES=HDRBYTES+FSIZE*ns;
			rewind(stdin);
 		while (efread(&tr,1,N_BYTES,stdin)) {
d118 1
a118 1
			for (i = 0; i < tr.ns ; ++i)
a119 1

d122 1
a122 1
	} else {
a123 1
			N_BYTES=HDRBYTES+FSIZE*tr.ns;
d125 2
d134 1
a134 1
			efwrite(&tr,1,N_BYTES,stdout);
@


1.9
log
@cosmetic
@
text
@d1 1
a1 1
/* suswapbytes: $Revision: 1.8 $ ; $Date: 94/02/03 12:57:05 $	*/
d131 1
a131 8
	short h;		/* temp variable for shorts */
	unsigned short u;	/*  ''    ''     '' unsigned shorts */
	long l;			/*  ''    ''     '' longs */
	unsigned long v;	/*  ''    ''     '' unsigned longs */
	float f;		/*  ''    ''     '' floats */
	double d;		/*  ''    ''     '' doubles */

	/* read header value, swap bytes, return swapped value to header */
d133 12
a144 18
        case 'h': h = *((short*)  (tp + hdr[index].offs));
			swap_short_2(&h);
       		*((short*) (tp + hdr[index].offs)) = h; break;
        case 'u': u = *((unsigned short*) (tp + hdr[index].offs));
			swap_u_short_2(&u); 
        	*((unsigned short*) (tp + hdr[index].offs)) = u; break;
        case 'l': l = *((long*)   (tp + hdr[index].offs));
			swap_long_4(&l); 
        	*((long*)   (tp + hdr[index].offs)) = l; break;
        case 'v': v = *((unsigned long*)  (tp + hdr[index].offs));
			swap_u_long_4(&v);
        	*((unsigned long*)  (tp + hdr[index].offs)) = v; break;
        case 'f': f = *((float*)  (tp + hdr[index].offs));
			swap_float_4(&f);
        	*((float*)  (tp + hdr[index].offs)) = f; break;
        case 'd': d = *((double*) (tp + hdr[index].offs));
			swap_double_8(&d);
        	*((double*) (tp + hdr[index].offs)) = d; break;
d146 1
a146 1
		break;
@


1.8
log
@cleaned up to be totally independent of header types used
@
text
@d1 1
a1 1
/* suswapbytes: $Revision: 1.5 $ ; $Date: 94/02/02 09:27:47 $	*/
d83 1
a83 1
		if (!ns) err("ns not set in header, set by hand!");
d91 2
a92 1
			for (i = 0; i < tr.ns ; ++i) swap_float_4(&tr.data[i]);
d104 2
a105 1
			for (i = 0; i < tr.ns ; ++i) swap_float_4(&tr.data[i]);
d116 4
a119 4
/***************************************************************************
*swaphval -- swap the bytes in an SU header value by index
*
*Input:
d122 1
a122 2
****************************************************************************
*Output:
d124 3
a126 3
*****************************************************************************
*Author: CWP: John Stockwell, based on su/lib/hdrpkge.c ideas
****************************************************************************/
@


1.7
log
@*** empty log message ***
@
text
@d1 1
a1 1
/* suswapbytes: $Revision: 1.6 $ ; $Date: 94/02/02 11:46:05 $	*/
d24 1
a24 1
"	       to little endian byte order, and vice versa		",
d28 3
a30 3
"  format=0		foreign to native				",
" 			=1 native to foreign				",
"  ns=from header	if tr.ns not set, user must set ns by hand	",
d50 1
a51 2
void swap_su_trace();

d57 1
a57 1
	int format,ns;
d81 1
a81 1
		swap_short_2(&tr.ns);
d87 6
a92 1
			swap_su_trace();
d98 7
a104 1
			swap_su_trace();
d111 1
d113 13
a125 8
void swap_su_trace()
/*********************************************************************** 
 * swap_su_trace - byte swap the values in a segy trace
 *
 */
{ 
	int i;
	Value val;
d127 2
a128 3
	/* swap header values */
	for (i = 0; i < SU_NKEYS; ++i) { /* loop over su header indices */
		cwp_String type;
d130 6
a135 2
		/* get the type of the header value */
		type = hdtype(getkey(i));
d137 23
a159 2
		/* get the value  */
		gethval(&tr, i, &val);
d161 1
a161 20
		/* select swapping routine by type */
		switch(*type) {
			case 'h': swap_short_2(&val.h);
					puthval(&tr,i,&val); break;
			case 'u': swap_short_2(&val.u);
					puthval(&tr,i,&val); break;
			case 'l': swap_long_4(&val.l);
					puthval(&tr,i,&val); break;
			case 'v': swap_long_4(&val.v);
					puthval(&tr,i,&val); break;
			case 'f': swap_float_4(&val.f);
					puthval(&tr,i,&val); break;
			case 'd': swap_double_8(&val.d);
					puthval(&tr,i,&val); break;
			default: err("%s: %s: unsupported data type",
						 __FILE__, __LINE__); break;
		}
	}
	/* now swap the data values */
	for (i = 0; i < tr.ns ; ++i) swap_float_4(&tr.data[i]);
@


1.6
log
@added ns to selfdoc, also added a couple of breaks, and a defaut
in swap_su_trace()
@
text
@d1 1
a1 1
/* suswapbytes: $Revision: 1.5 $ ; $Date: 94/02/02 09:27:47 $	*/
d135 1
a135 1
			default: err("%s: %s: mysterious data type",
@


1.5
log
@updated "swap_su_trace" function to use valpkge and hdrpkge items.
@
text
@d1 1
a1 1
/* suswapbytes: $Revision: 1.4 $ ; $Date: 93/11/18 15:14:52 $	*/
d24 1
a24 1
"               to little endian byte order, and vice versa		",
d28 3
a30 2
" 	format=0		foreign to native			",
" 				=1 native to foreign			",
d132 1
a132 1
					puthval(&tr,i,&val);
d134 3
a136 1
					puthval(&tr,i,&val);
@


1.4
log
@*** empty log message ***
@
text
@d1 1
a1 1
/* suswapbytes: $Revision: 1.3 $ ; $Date: 93/11/18 15:11:14 $	*/
d18 1
d37 1
a37 1
" Caveat: this code has not been thoroughly tested			",
d42 3
a44 2
 *	Jens Hartmann (June 1993) Institut fuer Geophysik, Hamburg.
 *      adapted for SU by John Stockwell, Center for Wave Phenomena.
d46 1
d48 1
a48 6
/* prototypes for functions used internally */
void swap();
void swap_trace();
void int_4(long *tni4);
void int_2(short *tni2);
void swap_float(float *tnf4);
d50 1
a51 1

d57 1
a57 1
	int format;
d80 5
a84 3
		efread(&tr,1,240,stdin);
		int_2(&tr.ns);
			N_BYTES=240+4*tr.ns;
d87 1
a87 2
			swap_trace();
			swap();
d92 2
a93 3
			N_BYTES=240+4*tr.ns;
			swap();
			swap_trace();
a99 6
void swap()
{
  int i;
  for(i=0;i<tr.ns;i++)
    swap_float(&tr.data[i]);
}
d101 8
a108 71
void swap_trace()
{
  int_4(&tr.tracl);
  int_4(&tr.tracr);
  int_4(&tr.fldr);
  int_4(&tr.tracf);
  int_4(&tr.ep);
  int_4(&tr.cdp);
  int_4(&tr.cdpt);
  int_2(&tr.trid);
  int_2(&tr.nvs);
  int_2(&tr.nhs);
  int_2(&tr.duse);
  int_4(&tr.offset);
  int_4(&tr.gelev);
  int_4(&tr.selev);
  int_4(&tr.sdepth);
  int_4(&tr.gdel);
  int_4(&tr.sdel);
  int_4(&tr.swdep);
  int_4(&tr.gwdep);
  int_2(&tr.scalel);
  int_2(&tr.scalco);
  int_4(&tr.sx);
  int_4(&tr.sy);
  int_4(&tr.gx);
  int_4(&tr.gy);
  int_2(&tr.counit);
  int_2(&tr.wevel);
  int_2(&tr.swevel);
  int_2(&tr.sut);
  int_2(&tr.gut);
  int_2(&tr.sstat);
  int_2(&tr.gstat);
  int_2(&tr.tstat);
  int_2(&tr.laga);
  int_2(&tr.delrt);
  int_2(&tr.muts);
  int_2(&tr.mute);
  int_2(&tr.ns);
  int_2(&tr.dt);
  int_2(&tr.gain);
  int_2(&tr.igc);
  int_2(&tr.igi);
  int_2(&tr.corr);
  int_2(&tr.sfs);
  int_2(&tr.sfe);
  int_2(&tr.slen);
  int_2(&tr.styp);
  int_2(&tr.stas);
  int_2(&tr.stae);
  int_2(&tr.tatyp);
  int_2(&tr.afilf);
  int_2(&tr.afils);
  int_2(&tr.nofils);
  int_2(&tr.lcf);
  int_2(&tr.hcf);
  int_2(&tr.lcs);
  int_2(&tr.hcs);
  int_2(&tr.year);
  int_2(&tr.day);
  int_2(&tr.hour);
  int_2(&tr.minute);
  int_2(&tr.timbas);
  int_2(&tr.trwf);
  int_2(&tr.grnors);
  int_2(&tr.grnofr);
  int_2(&tr.grnlof);
  int_2(&tr.gaps);
  int_2(&tr.otrav);
} 
d110 3
a112 13
/* swap the bytes for PC */
void int_4(long *tni4)
{
 *tni4=(((*tni4>>24)&0xff) | ((*tni4&0xff)<<24) |
	    ((*tni4>>8)&0xff00) | ((*tni4&0xff00)<<8));  
}
/* swap the bytes for PC */
void swap_float(float *tnf4)
{
 int *tni4=(int *)tnf4;
 *tni4=(((*tni4>>24)&0xff) | ((*tni4&0xff)<<24) |
	    ((*tni4>>8)&0xff00) | ((*tni4&0xff00)<<8));  
}
d114 24
a137 4
/* swap the bytes for PC */
void int_2(short *tni2)
{
 *tni2=(((*tni2>>8)&0xff) | ((*tni2&0xff)<<8));  
@


1.3
log
@*** empty log message ***
@
text
@d1 1
a1 1
/* suswapbytes: $Revision: 1.2 $ ; $Date: 93/11/18 14:39:24 $	*/
d4 1
a4 1
 * Copyright (c) Colorado School of Mines, 1990.
d22 2
a23 2
" SUSWAPBYTES - Swap the bytes in SU data to convert data from big to little",
"		endian and little to big endian byte order		",
a28 1
" 									",
d41 1
a41 1
 *	J.Hartmann (June 1993)	Institut fuer Geophysik Hamburg
@


1.2
log
@Caveat added.
@
text
@d1 1
a1 1
/* suswapbytes: $Revision: 1.1 $ ; $Date: 93/11/18 14:33:01 $	*/
d22 2
a23 2
" SUSWAPBYTES - Convert SU data from little-big, big-little endian	",
"		byte order						",
a28 1
"									",
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/* suswapbytes: $Revision: 1.20 $ ; $Date: 93/07/27 09:45:16 $	*/
d37 2
@
