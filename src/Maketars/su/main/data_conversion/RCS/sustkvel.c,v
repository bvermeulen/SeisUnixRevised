head	1.14;
access;
symbols;
locks; strict;
comment	@ * @;


1.14
date	2011.11.16.17.43.20;	author john;	state Exp;
branches;
next	1.13;

1.13
date	2011.11.12.00.01.45;	author john;	state Exp;
branches;
next	1.12;

1.12
date	2003.06.09.16.17.07;	author john;	state Exp;
branches;
next	1.11;

1.11
date	96.09.13.21.49.05;	author john;	state Exp;
branches;
next	1.10;

1.10
date	96.01.17.20.43.56;	author jkc;	state Exp;
branches;
next	1.9;

1.9
date	94.08.25.15.01.04;	author jkc;	state Exp;
branches;
next	1.8;

1.8
date	93.08.09.15.20.02;	author john;	state Exp;
branches;
next	1.7;

1.7
date	92.10.26.12.57.01;	author john;	state Exp;
branches;
next	1.6;

1.6
date	91.09.05.08.51.58;	author jkcohen;	state Exp;
branches;
next	1.5;

1.5
date	90.11.27.20.17.58;	author jkc;	state Exp;
branches;
next	1.4;

1.4
date	90.06.13.14.54.41;	author jkc;	state Exp;
branches;
next	1.3;

1.3
date	90.05.29.20.44.20;	author jkc;	state Exp;
branches;
next	1.2;

1.2
date	90.05.25.19.26.14;	author jkc;	state Exp;
branches;
next	1.1;

1.1
date	90.04.20.20.40.51;	author jkc;	state Exp;
branches;
next	;


desc
@compute stacking velocities from interval velocities
@


1.14
log
@added Reg Beardsley's checkpar()
@
text
@/* Copyright (c) Colorado School of Mines, 2011.*/
/* All rights reserved.                       */

/* SUSTKVEL: $Revision: 1.12 $ ; $Date: 2003/06/09 16:17:07 $		*/

#include "su.h"

/*********************** self documentation ******************************/
char *sdoc[] = {
"									",
" SUSTKVEL - convert constant dip layer interval velocity model to the	",
"	   stacking velocity model required by sunmo			",
"									",
" sustkvel v= h= dip=0.0 outpar=/dev/tty				",
"									",
" Required parameters:					        	",
"	v=	interval velocities 					",
"	h=	layer thicknesses at the cmp	 			",
"									",
" Optional parameters:							",
"	dip=0.0			(constant) dip of the layers (degrees)	",
"	outpar=/dev/tty		output parameter file in the form	",
"				required by sunmo:			",
"				tv=zero incidence time pick vector	",
"				v=stacking velocities vector		",
"									",
" Examples:								",
"    sustkvel v=5000,6000,8000,10000 h=1000,1200,1300,1500 outpar=stkpar",
"    sunmo <data.cdp par=stkpar >data.nmo				",
"									",
"    sustkvel par=intpar outpar=stkpar					",
"    sunmo <data.cdp par=stkpar >data.nmo				",
"									",
" If the file, intpar, contains:					",
"    v=5000,6000,8000,10000						",
"    h=1000,1200,1300,1500						",
" then the two examples are equivalent.  The created parameter file,	",
" stkpar, is in the form of the velocity model required by sunmo.	",
"									",
" Note: sustkvel does not have standard su syntax since it does not	",
"      operate on seismic data.  Hence stdin and stdout are not used.	",
"									",
" Caveat: Does not accept a series of interval velocity models to	",
"	produce a variable velocity file for sunmo.			",
"									",
NULL};

/* Credits:
 *	CWP: Jack 
 *
 * Technical Reference:
 *	The Common Depth Point Stack
 *	William A. Schneider
 *	Proc. IEEE, v. 72, n. 10, p. 1238-1254
 *	1984
 *
 * Formulas:
 *    	Note: All sums on i are from 1 to k
 *
 *	From Schneider:
 *	Let h[i] be the ith layer thickness measured at the cmp and
 *	v[i] the ith interval velocity.
 *	Set:
 *		t[i] = h[i]/v[i]
 *		t0[k] = 2 Sum t[i] * cos(dip)
 *		vs[k] = (1.0/cos(dip)) sqrt(Sum v[i]*v[i]*t[i] / Sum t[i])
 *	Define:
 *		t0by2[k] = Sum h[i]/v[i]
 *		vh[k]    = Sum v[i]*h[i]
 *	Then:
 *		t0[k] = 2 * t0by2[k] * cos(dip)
 *		vs[k] = sqrt(vh[k] / t0by2[k]) / cos(dip)
 *
 *
 */
/**************** end self doc *******************************************/

int
main(int argc, char **argv)
{
	register float *v=NULL;		/* interval velocities		*/
	register float *h=NULL;		/* layer thicknesses at the cmp	*/
	register float *vs=NULL;	/* stacking velocities		*/
	register float *t0=NULL;	/* zero incidence times		*/
	register int i;		/* counter				*/
	int n;			/* number of layers			*/
	float t0by2;		/* temporary for t0/2 sum		*/
	float vh;		/* temporary for vh sum			*/
	float dip;		/* (constant) layer dip (degrees)	*/
	float cosdip;		/* cos(dip)				*/
	float ocosdip;		/* 1.0/cos(dip)				*/
	cwp_String outpar;	/* name of file holding output parfile	*/
	FILE *outparfp;		/* ... its file pointer			*/


	/* Initialize */
	initargs(argc, argv);
	requestdoc(0);

	/* Get parameters */
	if (!getparfloat("dip", &dip))	dip = 0.0;
	dip = dip * PI / 180.0;
	cosdip = cos(dip);
	ocosdip = 1.0 / cosdip;

	if (!getparstring("outpar", &outpar))	outpar = "/dev/tty";
	outparfp = efopen(outpar, "w");


	/* Allocate space for the model */
	if ((n = countparval("v"))) {
		v  = ealloc1float(n);
		h  = ealloc1float(n);
		vs = ealloc1float(n);
		t0 = ealloc1float(n);
	} else err("no v's specified");

	/* Get the intervals and interval velocities */
	if (n != getparfloat("h", h))
		err("expected %d intervals", n);
	if (n != getparfloat("v", v))
		err("expected %d velocities", n);

        checkpars();

	/* Check that v's and h's are positive */
	for (i = 0; i < n; i++) {
		if (v[i] <= 0.0)
			err("v's must be positive: v[%d] = %f", i, v[i]);
		if (h[i] <= 0.0)
			err("h's must be positive: h[%d] = %f", i, h[i]);
	}

	/* Compute T0(i), Vs(i) */
	t0by2 = 0.0;
	vh = 0.0;
	for (i = 0; i < n; i++) {
		t0by2 += h[i]/v[i];
		vh += v[i] * h[i];
		t0[i] = 2.0 * t0by2 * cosdip;
		vs[i] = sqrt(vh/t0by2) * ocosdip;
	}

	/* Make par file */
	fprintf(outparfp, "tnmo=");
	for (i = 0; i < n - 1; i++) {
		fprintf(outparfp, "%g,", t0[i]);
	}
	fprintf(outparfp, "%g\n", t0[n-1]);

	fprintf(outparfp, "vnmo=");
	for (i = 0; i < n - 1; i++) {
		fprintf(outparfp, "%g,", vs[i]);
	}
	fprintf(outparfp, "%g\n", vs[n-1]);


	return(CWP_Exit());
}
@


1.13
log
@copyright
@
text
@d124 2
@


1.12
log
@9 June 2003
@
text
@d1 4
a4 1
/* SUSTKVEL: $Revision: 1.11 $ ; $Date: 1996/09/13 21:49:05 $		*/
@


1.11
log
@silenced -Wall messages
@
text
@d1 1
a1 1
/* SUSTKVEL: $Revision: 1.10 $ ; $Date: 1996/01/17 20:43:56 $		*/
d153 1
a153 1
	return EXIT_SUCCESS;
@


1.10
log
@Removed calculation of pi per PI in cwp.h.
@
text
@d1 1
a1 1
/* SUSTKVEL: $Revision: 1.9 $ ; $Date: 1994/08/25 15:01:04 $		*/
d75 1
a75 1

d78 4
a81 4
	register float *v;	/* interval velocities			*/
	register float *h;	/* layer thicknesses at the cmp		*/
	register float *vs;	/* stacking velocities			*/
	register float *t0;	/* zero incidence times			*/
d108 1
a108 1
	if (n = countparval("v")) {
@


1.9
log
@Removed copyright statement from codes that had it.
Moved self-doc line for sudoc.
@
text
@d1 1
a1 1
/* SUSTKVEL: $Revision: 1.8 $ ; $Date: 93/08/09 15:20:02 $		*/
a88 1
	float pi;		/* the usual thing			*/
a96 3

	pi = 4.0 * atan(1.0);

d99 1
a99 1
	dip = dip * pi / 180.0;
@


1.8
log
@changed String to cwp_String
@
text
@d1 1
a1 1
/* SUSTKVEL: $Revision: 1.7 $ ; $Date: 92/10/26 12:57:01 $		*/
a2 13
/*----------------------------------------------------------------------
 * Copyright (c) Colorado School of Mines, 1990.
 * All rights reserved.
 *
 * This code is part of SU.  SU stands for Seismic Unix, a processing line
 * developed at the Colorado School of Mines, partially based on Stanford
 * Exploration Project (SEP) software.  Inquiries should be addressed to:
 *
 *  Jack K. Cohen, Center for Wave Phenomena, Colorado School of Mines,
 *  Golden, CO 80401  (jkc@@dix.mines.colorado.edu)
 *----------------------------------------------------------------------
 */

a43 1
/**************** end self doc *******************************************/
d73 1
d90 1
a90 1
	cwp_String outpar;		/* name of file holding output parfile	*/
@


1.7
log
@new selfdoc installed
@
text
@d1 1
a1 1
/* SUSTKVEL: $Revision: 1.6 $ ; $Date: 91/09/05 08:51:58 $		*/
d103 1
a103 1
	String outpar;		/* name of file holding output parfile	*/
@


1.6
log
@string -> String and so forth
@
text
@d1 1
a1 1
/* SUSTKVEL: $Revision: 1.5 $ ; $Date: 90/11/27 20:17:58 $		*/
d19 38
a56 38
String sdoc = "\
									\n\
SUSTKVEL - convert constant dip layer interval velocity model to the	\n\
	   stacking velocity model required by sunmo			\n\
									\n\
sustkvel v= h= dip=0.0 outpar=/dev/tty					\n\
									\n\
Required parameters:					        	\n\
	v=	interval velocities 					\n\
	h=	layer thicknesses at the cmp	 			\n\
									\n\
Optional parameters:							\n\
	dip=0.0			(constant) dip of the layers (degrees)	\n\
	outpar=/dev/tty		output parameter file in the form	\n\
				required by sunmo:			\n\
				tv=zero incidence time pick vector	\n\
				v=stacking velocities vector		\n\
									\n\
Examples:								\n\
    sustkvel v=5000,6000,8000,10000 h=1000,1200,1300,1500 outpar=stkpar	\n\
    sunmo <data.cdp par=stkpar >data.nmo				\n\
									\n\
    sustkvel par=intpar outpar=stkpar					\n\
    sunmo <data.cdp par=stkpar >data.nmo				\n\
									\n\
If the file, intpar, contains:						\n\
    v=5000,6000,8000,10000						\n\
    h=1000,1200,1300,1500						\n\
then the two examples are equivalent.  The created parameter file,	\n\
stkpar, is in the form of the velocity model required by sunmo.		\n\
									\n\
Note: sustkvel does not have standard su syntax since it does not	\n\
      operate on seismic data.  Hence stdin and stdout are not used.	\n\
									\n\
Caveat: Does not accept a series of interval velocity models to		\n\
	produce a variable velocity file for sunmo.			\n\
									\n\
";
d109 1
a109 1
	askdoc(0);
@


1.5
log
@Changed parfile for new sunmo
@
text
@d1 1
a1 1
/* SUSTKVEL: $Revision: 1.4 $ ; $Date: 90/06/13 14:54:41 $		*/
d19 1
a19 1
string sdoc = "\
d103 1
a103 1
	string outpar;		/* name of file holding output parfile	*/
d115 1
a115 1
	if (!fgetpar("dip", &dip))	dip = 0.0;
d120 1
a120 1
	if (!sgetpar("outpar", &outpar))	outpar = "/dev/tty";
d133 1
a133 1
	if (n != fgetpar("h", h))
d135 1
a135 1
	if (n != fgetpar("v", v))
@


1.4
log
@In revising for countparval, stole something from suintvel and
didn't edit properly.
@
text
@d1 1
a1 1
/* SUSTKVEL: $Revision: 1.3 $ ; $Date: 90/05/29 20:44:20 $		*/
d157 1
a157 1
	fprintf(outparfp, "tv=");
d163 1
a163 1
	fprintf(outparfp, "v=");
@


1.3
log
@Attempt to maxgetpar() -> countparval()
@
text
@d1 1
a1 1
/* SUSTKVEL: $Revision: 1.2 $ ; $Date: 90/05/25 19:26:14 $		*/
d125 1
a125 1
	if (n = countparval("t0")) {
d130 1
a130 1
	} else err("no t0's specified");
@


1.2
log
@vec --> ealloc1float, etc.
@
text
@d1 1
a1 1
/* SUSTKVEL: $Revision: 1.1 $ ; $Date: 90/04/20 20:40:51 $		*/
d124 7
a130 6
	/* Allocate space for the model using maxgetpar() */
	n = maxgetpar();
	v  = ealloc1float(n);
	h  = ealloc1float(n);
	vs = ealloc1float(n);
	t0 = ealloc1float(n);
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/* SUSTKVEL: $Revision: 2.7 $ ; $Date: 89/09/20 19:37:30 $		*/
d12 1
a12 1
 *  Golden, CO 80401  (isis!csm9a!jkcohen)
d27 2
a28 2
	v =	interval velocities 					\n\
	h =	layer thicknesses at the cmp	 			\n\
d31 2
a32 2
	dip = 0.0		(constant) dip of the layers (degrees)	\n\
	outpar = /dev/tty	output parameter file in the form	\n\
a87 5
/* Embed Revision Control System identifier strings */
static string progid =
	"   $Source: /src/su/src/RCS/sustkvel.c,v $";
static string revid =
	"   $Revision: 2.7 $ ; $Date: 89/09/20 19:37:30 $";
d89 1
a89 3

main(argc,argv)
int argc; char **argv;
a108 5
	if (!igetpar("ID", &ID))	ID = 0;
	if (ID) {
		(void) fprintf(stderr, "%s\n", progid);
		(void) fprintf(stderr, "%s\n", revid);
	}
d121 1
a121 3
	if (NULL == (outparfp = fopen(outpar, "w"))) {
		err("can't open outpar=\"%s\"", outpar);
	}
d126 4
a129 4
	v  = vec(n);
	h  = vec(n);
	vs = vec(n);
	t0 = vec(n);
@
