head	1.31;
access;
symbols;
locks; strict;
comment	@ * @;


1.31
date	2011.11.16.17.43.20;	author john;	state Exp;
branches;
next	1.30;

1.30
date	2011.11.12.00.01.45;	author john;	state Exp;
branches;
next	1.29;

1.29
date	2006.11.07.22.58.42;	author john;	state Exp;
branches;
next	1.28;

1.28
date	2003.06.09.16.17.07;	author john;	state Exp;
branches;
next	1.27;

1.27
date	98.03.26.22.41.39;	author john;	state Exp;
branches;
next	1.26;

1.26
date	97.07.28.22.36.46;	author john;	state Exp;
branches;
next	1.25;

1.25
date	97.03.11.20.41.35;	author john;	state Exp;
branches;
next	1.24;

1.24
date	96.09.03.20.55.29;	author jkc;	state Exp;
branches;
next	1.23;

1.23
date	96.02.20.20.24.13;	author jkc;	state Exp;
branches;
next	1.22;

1.22
date	95.12.12.16.50.35;	author jkc;	state Exp;
branches;
next	1.21;

1.21
date	95.08.04.15.18.20;	author jkc;	state Exp;
branches;
next	1.20;

1.20
date	94.10.06.14.42.23;	author jkc;	state Exp;
branches;
next	1.19;

1.19
date	94.08.26.10.19.46;	author jkc;	state Exp;
branches;
next	1.18;

1.18
date	94.08.25.14.58.14;	author jkc;	state Exp;
branches;
next	1.17;

1.17
date	94.08.25.10.05.43;	author jkc;	state Exp;
branches;
next	1.16;

1.16
date	94.08.24.10.36.02;	author jkc;	state Exp;
branches;
next	1.15;

1.15
date	94.08.24.10.15.59;	author jkc;	state Exp;
branches;
next	1.14;

1.14
date	94.07.15.13.59.30;	author john;	state Exp;
branches;
next	1.13;

1.13
date	94.01.10.10.46.03;	author john;	state Exp;
branches;
next	1.12;

1.12
date	93.11.24.15.23.11;	author john;	state Exp;
branches;
next	1.11;

1.11
date	93.11.22.16.12.06;	author john;	state Exp;
branches;
next	1.10;

1.10
date	92.11.06.09.39.19;	author john;	state Exp;
branches;
next	1.9;

1.9
date	92.10.28.16.54.12;	author john;	state Exp;
branches;
next	1.8;

1.8
date	92.10.28.16.53.10;	author john;	state Exp;
branches;
next	1.7;

1.7
date	92.10.22.15.42.35;	author john;	state Exp;
branches;
next	1.6;

1.6
date	92.08.31.11.16.12;	author john;	state Exp;
branches;
next	1.5;

1.5
date	91.09.05.08.49.11;	author jkcohen;	state Exp;
branches;
next	1.4;

1.4
date	90.12.18.14.12.42;	author jkc;	state Exp;
branches;
next	1.3;

1.3
date	90.10.04.16.26.56;	author jkc;	state Exp;
branches;
next	1.2;

1.2
date	90.09.03.09.42.58;	author jkc;	state Exp;
branches;
next	1.1;

1.1
date	90.04.15.15.33.37;	author jkc;	state Exp;
branches;
next	;


desc
@Write routine SEGY header files.
@


1.31
log
@added Reg Beardsley's checkpar()
@
text
@/* Copyright (c) Colorado School of Mines, 2011.*/
/* All rights reserved.                       */

/* SEGYHDRS: $Revision: 1.29 $ ; $Date: 2006/11/07 22:58:42 $	*/

#include "su_xdr.h"
#include "bheader.h"
#include "tapesegy.h"

/*********************** self documentation **********************/
char *sdoc[] = {
" 									",
" SEGYHDRS - make SEG-Y ascii and binary headers for segywrite		",
" 									",
" segyhdrs [ < sudata ] [optional parameters] [ > copy of sudata ]      ",
" 									",
" Required parameters:							",
"	ns=  if no input trace header					",
"	dt=  if no input trace header					",
" Optional parameters:							",
" 	ns=tr.ns from header    number of samples on input traces	",
" 	dt=tr.dt from header	sample rate (microseconds) from traces	",
" 	bfile=binary		name of file containing binary block	",
" 	hfile=header		name of file containing ascii block	",
"   Some binary header fields are set:					",
" 	jobid=1			job id field				",
" 	lino=1			line number (only one line per reel)	",
" 	reno=1			reel number				",
" 	format=1		data format				",
" 									",
" All other fields are set to 0, by default.				",
" To set any binary header field, use sukeyword to find out		",
" the appropriate keyword, then use the getpar form:			",
" 	keyword=value	to set keyword to value				",
" 									",
" The header file is created as ascii and is translated to ebcdic	",
" by segywrite before being written to tape.  Its contents are		",
" formal but can be edited after creation as long as the forty		",
" line format is maintained.						",
" 									",
" Caveat: This program has not been tested under XDR for machines       ",
"	 not having a 2 byte unsigned short integral data type.	",
" 									",
NULL};

/* Credits:
 *
 *	CWP: Jack K. Cohen,  John Stockwell 
 *      MOBIL: Stew Levin
 */
/**************** end self doc ***********************************/

static segy tr;
static bhed bh;

int
main(int argc, char **argv)
{
#ifdef SUXDR
	XDR  bhed_xdr;		/* xdr structure to associate w/binaryfp */
#endif
	char *hfile;		/* name of ascii header file		*/
	char buf[81];		/* buffer for ascii file lines + null	*/
	char *bfile;		/* name of binary header file		*/
	FILE *headerfp;		/* file pointer for hfile		*/
	FILE *binaryfp;		/* file pointer for bfile		*/
	int i;			/* counter				*/
	cwp_Bool redin=cwp_false;
	cwp_Bool redout=cwp_false; /* flags for redirected input/output    */

	/* bhed fields the user might wish to set, taken right out of segy.h */
	int jobid;	/* job identification number */
	int lino;	/* line number (only one line per reel) */
	int reno;	/* reel number */
	short ntrpr;	/* number of data traces per record */
	short nart;	/* number of auxiliary traces per record */
	unsigned short hdt; /* sample interval in microsecs for this reel */
	unsigned short dto; /* same for original field recording */

	/* hns replaces ns in original version of segyhdrs */
	unsigned short hns; /* number of samples per trace for this reel */

	unsigned short nso; /* same for original field recording */
	short format;	/* data sample format code:
				1 = floating point (4 bytes)
				2 = fixed point (4 bytes)
				3 = fixed point (2 bytes)
				4 = fixed point w/gain code (4 bytes) */
	short fold;	/* CDP fold expected per CDP ensemble */
	short tsort;	/* trace sorting code: 
				1 = as recorded (no sorting)
				2 = CDP ensemble
				3 = single fold continuous profile
				4 = horizontally stacked */
	short vscode;	/* vertical sum code:
				1 = no sum
				2 = two sum ...
				N = N sum (N = 32,767) */
	short hsfs;	/* sweep frequency at start */
	short hsfe;	/* sweep frequency at end */
	short hslen;	/* sweep length (ms) */
	short hstyp;	/* sweep type code:
				1 = linear
				2 = parabolic
				3 = exponential
				4 = other */
	short schn;	/* trace number of sweep channel */
	short hstas;	/* sweep trace taper length at start if
			   tapered (the taper starts at zero time
			   and is effective for this length) */
	short hstae;	/* sweep trace taper length at end (the ending
			   taper starts at sweep length minus the taper
			   length at end) */
	short htatyp;	/* sweep trace taper type code:
				1 = linear
				2 = cos-squared
				3 = other */
	short hcorr;	/* correlated data traces code:
				1 = no
				2 = yes */
	short bgrcv;	/* binary gain recovered code:
				1 = yes
				2 = no */
	short rcvm;	/* amplitude recovery method code:
				1 = none
				2 = spherical divergence
				3 = AGC
				4 = other */
	short mfeet;	/* measurement system code:
				1 = meters
				2 = feet */
	short polyt;	/* impulse signal polarity code:
				1 = increase in pressure or upward
				    geophone case movement gives
				    negative number on tape
				2 = increase in pressure or upward
				    geophone case movement gives
				    positive number on tape */
	short vpol;	/* vibratory polarity code:
				code	seismic signal lags pilot by
				1	337.5 to  22.5 degrees
				2	 22.5 to  67.5 degrees
				3	 67.5 to 112.5 degrees
				4	112.5 to 157.5 degrees
				5	157.5 to 202.5 degrees
				6	202.5 to 247.5 degrees
				7	247.5 to 292.5 degrees
				8	293.5 to 337.5 degrees */


	/* Initialize */
	initargs(argc, argv);
	redin = cwp_true;
	switch(filestat(STDIN)) {
	case TTY:
	case DIRECTORY:
	case BADFILETYPE:
		redin = cwp_false;
	break;
	default: /* Others OK */
	break;
	}
	redout = cwp_true;
	switch(filestat(STDOUT)) {
	case TTY:
	case DIRECTORY:
	case BADFILETYPE:
		redout = cwp_false;
	break;
	default: /* Others OK */
	break;
	}

	if(redin==cwp_false)
	    requestdoc(2); /* if stdin not used, must have ns and dt */

	
	/* get number of samples and sample rate from first trace or getpar */
	if (redin==cwp_true) {
	if (!gettr(&tr))  err("can't get first trace");
	if (!getparushort("ns", &hns))		hns = tr.ns;
	if (!getparushort("dt", &hdt))		hdt = tr.dt;
	if (!hns) warn("hns not set in binary header, consider using ns=");
	if (!hdt) warn("hdt not set in binary header, consider using dt=");
	} else {
	    if(!getparushort("ns",&hns)) err("need ns=");
	    if(!getparushort("dt",&hdt)) err("need dt=");
	}

	/* Get parameters */
	if (!getparstring("hfile", &hfile))	hfile = "header";
	if (!getparstring("bfile", &bfile))	bfile = "binary";

	/* Optional settings; user has access to all named fields of bhed */
	if (!getparint("jobid", &jobid))	jobid = 1;
	if (!getparint("lino", &lino))		lino = 1;
	if (!getparint("reno", &reno))		reno = 1;
	if (!getparshort("ntrpr", &ntrpr))	ntrpr = 0;
	if (!getparshort("nart", &nart))	nart = 0;
	if (!getparushort("dto", &dto))		dto = 0;
	if (!getparushort("nso", &nso))		nso = 0;
	if (!getparshort("format", &format))	format = 1;
	if (!getparshort("fold", &fold))	fold = 0;
	if (!getparshort("tsort", &tsort))	tsort = 0;
	if (!getparshort("vscode", &vscode))	vscode = 0;
	if (!getparshort("hsfs", &hsfs))	hsfs = 0;
	if (!getparshort("hsfe", &hsfe))	hsfe = 0;
	if (!getparshort("hslen", &hslen))	hslen = 0;
	if (!getparshort("hstyp", &hstyp))	hstyp = 0;
	if (!getparshort("schn", &schn))	schn = 0;
	if (!getparshort("hstas", &hstas))	hstas = 0;
	if (!getparshort("hstae", &hstae))	hstae = 0;
	if (!getparshort("htatyp", &htatyp))	htatyp = 0;
	if (!getparshort("hcorr", &hcorr))	hcorr = 0;
	if (!getparshort("bgrcv", &bgrcv))	bgrcv = 0;
	if (!getparshort("rcvm", &rcvm))	rcvm = 0;
	if (!getparshort("mfeet", &mfeet))	mfeet = 0;
	if (!getparshort("polyt", &polyt))	polyt = 0;
	if (!getparshort("vpol", &vpol))	vpol = 0;
        checkpars();


	/* Open files for writing */
	headerfp = efopen(hfile, "w");
	binaryfp = efopen(bfile, "w");
#ifdef SUXDR
	xdrstdio_create(&bhed_xdr, binaryfp, XDR_ENCODE);
#endif

	/* Create ascii header */
	sprintf(buf, "%-79.79s\n", "C      This tape was made at the");
	efwrite((char *) buf, 1, 80, headerfp);

	sprintf(buf, "%-79.79s\n", "C");
	efwrite((char *) buf, 1, 80, headerfp);

	sprintf(buf, "%-79.79s\n", "C      Center for Wave Phenomena");
	efwrite((char *) buf, 1, 80, headerfp);

	sprintf(buf, "%-79.79s\n", "C      Colorado School of Mines");
	efwrite((char *) buf, 1, 80, headerfp);

	sprintf(buf, "%-79.79s\n", "C      Golden, CO, 80401");
	efwrite((char *) buf, 1, 80, headerfp);

	for (i = 0;  i < 35; i++) {
		sprintf(buf, "%-79.79s\n", "C");
		efwrite((char *) buf, 1, 80, headerfp);
	}


	/* Create binary header; set all named fields */
	memset((void *) &bh, 0, BNYBYTES);
	bh.jobid = (int) jobid;
	bh.lino = (int) lino;
	bh.reno = (int) reno;
	bh.ntrpr = (short) ntrpr;
	bh.nart = (short) nart;
	bh.hdt = (short) hdt;
	bh.dto = (short) dto;
	bh.hns = (short) hns;
	bh.nso = (short) nso;
	bh.format = (short) format;
	bh.fold = (short) fold;
	bh.tsort = (short) tsort;
	bh.vscode = (short) vscode;
	bh.hsfs = (short) hsfs;
	bh.hsfe = (short) hsfe;
	bh.hslen = (short) hslen;
	bh.hstyp = (short) hstyp;
	bh.schn = (short) schn;
	bh.hstas = (short) hstas;
	bh.hstae = (short) hstae;
	bh.htatyp = (short) htatyp;
	bh.hcorr = (short) hcorr;
	bh.bgrcv = (short) bgrcv;
	bh.rcvm = (short) rcvm;
	bh.mfeet = (short) mfeet;
	bh.polyt = (short) polyt;
	bh.vpol = (short) vpol;

	/* Write binary header from bh structure to designated file */
#ifdef SUXDR
	if(FALSE == xdrbhdrsub(&bhed_xdr,&bh))
		err("%s: problem writing binary tape header",__FILE__);
#else
	efwrite( (char *) &bh, 1, BNYBYTES, binaryfp);
#endif

	/* Clean up */
	efclose(headerfp);
#ifdef SUXDR
	xdr_destroy(&bhed_xdr);
#endif
	efclose(binaryfp);

	if(redin==cwp_true) {
		/* suck in all input traces to avoid broken pipe */
	  do {
	      if(redout==cwp_true) puttr(&tr);
	  } while(gettr(&tr));
	}

	return(CWP_Exit());
}
@


1.30
log
@copyright
@
text
@d220 1
@


1.29
log
@changed    memset( .., (int) '\0',...) to memset( .., 0,..) as per suggestion of Marion Zhu and Reg Beardsley
@
text
@d1 4
a4 1
/* SEGYHDRS: $Revision: 1.28 $ ; $Date: 2003/06/09 16:17:07 $	*/
@


1.28
log
@9 June 2003
@
text
@d1 1
a1 1
/* SEGYHDRS: $Revision: 1.27 $ ; $Date: 1998/03/26 22:41:39 $	*/
d249 1
a249 1
	memset((void *) &bh, (int) '\0', BNYBYTES);
@


1.27
log
@added new XDR version
@
text
@d1 1
a1 1
/* SEGYHDRS: $Revision: 1.26 $ ; $Date: 1997/07/28 22:36:46 $	*/
d300 1
a300 1
	return EXIT_SUCCESS;
@


1.26
log
@changes suggested by Stew Levin to silence SGI compiler warnings, etc
@
text
@d1 1
a1 1
/* SEGYHDRS: $Revision: 1.25 $ ; $Date: 1997/03/11 20:41:35 $	*/
d3 1
a3 2
#include "su.h"
#include "segy.h"
d50 2
a51 2
segy tr;
bhed bh;
d56 3
d222 3
a224 1

d279 4
d284 1
a284 1

d288 3
@


1.25
log
@Stew Levin's new version which can be used to make header files
on the fly.
@
text
@d1 1
a1 1
/* SEGYHDRS: $Revision: 1.23 $ ; $Date: 1996/02/20 20:24:13 $	*/
d63 2
a64 1
	int redin, redout;	/* flags for redirected input/output    */
d148 1
a148 1
	redin = redin || (!redin);
d153 1
a153 1
		redin = !redin;
d158 1
a158 1
	redout = redout || (!redout);
d163 1
a163 1
		redout = !redin;
d169 1
a169 1
	if(!redin)
d174 1
a174 1
	if (redin) {
d282 2
a283 1
	if(redin) { /* suck in all input traces to avoid broken pipe */
d285 1
a285 1
	      if(redout) puttr(&tr);
@


1.24
log
@Cleaned up -Wall stuff in particular using new bhear.h include file.
@
text
@d6 1
d13 1
a13 1
" segyhdrs < sudata [optional parameters]				",
d16 2
a17 1
" 	none								",
d19 1
a19 1
" 	ns=tr.ns from header	number of samples on input traces	",
d39 2
a40 2
" Caveat: This program breaks if a \"short\" isn't 2 bytes since	",
"         the SEG-Y standard demands a 2 byte integer for ns.		",
d47 1
d63 1
d70 1
a70 1
        short nart;	/* number of auxiliary traces per record */
d147 23
a169 1
	requestdoc(0); /* stdin not used */
d173 1
d179 4
d280 6
@


1.23
log
@Changed types to agree with segy.h.
Now warn on hns or hdt not set.
@
text
@d1 1
a1 1
/* SEGYHDRS: $Revision: 1.22 $ ; $Date: 1995/12/12 16:50:35 $	*/
d5 1
a5 1
#include "tapesegy.h"
d51 1
@


1.22
log
@Cosmetic
@
text
@d1 1
a1 1
/* SEGYHDRS: $Revision: 1.21 $ ; $Date: 1995/08/04 15:18:20 $	*/
d64 4
a67 4
	int ntrpr;	/* number of data traces per record */
        int nart;	/* number of auxiliary traces per record */
	int hdt;	/* sample interval in microsecs for this reel */
	int dto;	/* same for original field recording */
d70 1
a70 1
	int hns;	/* number of samples per trace for this reel */
d72 2
a73 2
	int nso;	/* same for original field recording */
	int format;	/* data sample format code:
d78 2
a79 2
	int fold;	/* CDP fold expected per CDP ensemble */
	int tsort;	/* trace sorting code: 
d84 1
a84 1
	int vscode;	/* vertical sum code:
d88 4
a91 4
	int hsfs;	/* sweep frequency at start */
	int hsfe;	/* sweep frequency at end */
	int hslen;	/* sweep length (ms) */
	int hstyp;	/* sweep type code:
d96 2
a97 2
	int schn;	/* trace number of sweep channel */
	int hstas;	/* sweep trace taper length at start if
d100 1
a100 1
	int hstae;	/* sweep trace taper length at end (the ending
d103 1
a103 1
	int htatyp;	/* sweep trace taper type code:
d107 1
a107 1
	int hcorr;	/* correlated data traces code:
d110 1
a110 1
	int bgrcv;	/* binary gain recovered code:
d113 1
a113 1
	int rcvm;	/* amplitude recovery method code:
d118 1
a118 1
	int mfeet;	/* measurement system code:
d121 1
a121 1
	int polyt;	/* impulse signal polarity code:
d128 1
a128 1
	int vpol;	/* vibratory polarity code:
d145 1
a145 1
	/* get number of samples from first trace */
d147 4
a150 4
	if ( tr.ns == 0 ) warn("ns not set in header");
	if ( tr.dt == 0 ) warn("dt not set in header");
	if (!getparint("ns", &hns))		hns = tr.ns;
	if (!getparint("dt", &hdt))		hdt = tr.dt;
d160 22
a181 22
	if (!getparint("ntrpr", &ntrpr))	ntrpr = 0;
	if (!getparint("nart", &nart))		nart = 0;
	if (!getparint("dto", &dto))		dto = 0;
	if (!getparint("nso", &nso))		nso = 0;
	if (!getparint("format", &format))	format = 1;
	if (!getparint("fold", &fold))		fold = 0;
	if (!getparint("tsort", &tsort))	tsort = 0;
	if (!getparint("vscode", &vscode))	vscode = 0;
	if (!getparint("hsfs", &hsfs))		hsfs = 0;
	if (!getparint("hsfe", &hsfe))		hsfe = 0;
	if (!getparint("hslen", &hslen))	hslen = 0;
	if (!getparint("hstyp", &hstyp))	hstyp = 0;
	if (!getparint("schn", &schn))		schn = 0;
	if (!getparint("hstas", &hstas))	hstas = 0;
	if (!getparint("hstae", &hstae))	hstae = 0;
	if (!getparint("htatyp", &htatyp))	htatyp = 0;
	if (!getparint("hcorr", &hcorr))	hcorr = 0;
	if (!getparint("bgrcv", &bgrcv))	bgrcv = 0;
	if (!getparint("rcvm", &rcvm))		rcvm = 0;
	if (!getparint("mfeet", &mfeet))	mfeet = 0;
	if (!getparint("polyt", &polyt))	polyt = 0;
	if (!getparint("vpol", &vpol))		vpol = 0;
@


1.21
log
@Tweak self doc to say input is sudata instead of segydata
@
text
@d1 1
a1 1
/* SEGYHDRS: $Revision: 1.20 $ ; $Date: 1994/10/06 14:42:23 $	*/
d156 1
a156 1
	/* Optional settings; user has acess to all named fields of bhed */
@


1.20
log
@Now include tapesegy.h for defines moved from segy.h.
@
text
@d1 1
a1 1
/* SEGYHDRS: $Revision: 1.19 $ ; $Date: 94/08/26 10:19:46 $	*/
d12 1
a12 1
" segyhdrs < segydata [optional parameters]				",
d14 1
a14 1
" Required parameter:							",
@


1.19
log
@Sigh.  Third time is the charm.  Made buf size 81 to hold
sprintf's nulll, but only write out the first 79 chars of
each user string plus the newline.
@
text
@d1 1
a1 1
/* SEGYHDRS: $Revision: 1.18 $ ; $Date: 94/08/25 14:58:14 $	*/
d5 1
@


1.18
log
@Removed copyright statement from codes that had it.
Moved self-doc line for sudoc.
@
text
@d1 1
a1 1
/* SEGYHDRS: $Revision: 1.17 $ ; $Date: 94/08/25 10:05:43 $	*/
d52 6
a57 6
	char *hfile;		/* name of ascii header file	*/
	char buf[80];		/* buffer for ascii file lines	*/
	char *bfile;		/* name of binary header file	*/
	FILE *headerfp;		/* file pointer for hfile	*/
	FILE *binaryfp;		/* file pointer for bfile	*/
	int i;			/* counter			*/
d189 1
a189 1
	sprintf(buf, "%-78.78s\n", "C      This tape was made at the");
d192 1
a192 1
	sprintf(buf, "%-78.78s\n", "C");
d195 1
a195 1
	sprintf(buf, "%-78.78s\n", "C      Center for Wave Phenomena");
d198 1
a198 1
	sprintf(buf, "%-78.78s\n", "C      Colorado School of Mines");
d201 1
a201 1
	sprintf(buf, "%-78.78s\n", "C      Golden, CO, 80401");
d205 1
a205 1
		sprintf(buf, "%-78.78s\n", "C");
@


1.17
log
@The truth emerges.  sprintf writes a null at the end
of the string that we weren't leaving room for.  So,
indeed, buf was overflowing.
@
text
@d1 1
a1 1
/* SEGYHDRS: $Revision: 1.16 $ ; $Date: 94/08/24 10:36:02 $	*/
@


1.16
log
@Now specifying MAX (prec) in the ascii header creation.
@
text
@d1 1
a1 1
/* SEGYHDRS: $Revision: 1.15 $ ; $Date: 94/08/24 10:15:59 $	*/
d189 1
a189 1
	sprintf(buf, "%-79.79s\n", "C      This tape was made at the");
d192 1
a192 1
	sprintf(buf, "%-79.79s\n", "C");
d195 1
a195 1
	sprintf(buf, "%-79.79s\n", "C      Center for Wave Phenomena");
d198 1
a198 1
	sprintf(buf, "%-79.79s\n", "C      Colorado School of Mines");
d201 1
a201 1
	sprintf(buf, "%-79.79s\n", "C      Golden, CO, 80401");
d205 1
a205 1
		sprintf(buf, "%-79.79s\n", "C");
@


1.15
log
@Changed (long) to (int) casts per new segy.h.
@
text
@d1 1
a1 1
/* SEGYHDRS: $Revision: 1.14 $ ; $Date: 94/07/15 13:59:30 $	*/
d189 1
a189 1
	sprintf(buf, "%-79s\n", "C      This tape was made at the");
d192 1
a192 1
	sprintf(buf, "%-79s\n", "C");
d195 1
a195 1
	sprintf(buf, "%-79s\n", "C      Center for Wave Phenomena");
d198 1
a198 1
	sprintf(buf, "%-79s\n", "C      Colorado School of Mines");
d201 1
a201 1
	sprintf(buf, "%-79s\n", "C      Golden, CO, 80401");
d205 1
a205 1
		sprintf(buf, "%-79s\n", "C");
@


1.14
log
@cosmetic
@
text
@d1 1
a1 1
/* SEGYHDRS: $Revision: 1.13 $ ; $Date: 94/01/10 10:46:03 $	*/
d212 3
a214 3
	bh.jobid = (long) jobid;
	bh.lino = (long) lino;
	bh.reno = (long) reno;
@


1.13
log
@changed an errant hns to hdt
@
text
@d1 1
a1 1
/* SEGYHDRS: $Revision: 1.12 $ ; $Date: 93/11/24 15:23:11 $	*/
a2 13
/*----------------------------------------------------------------------
 * Copyright (c) Colorado School of Mines, 1990.
 * All rights reserved.
 *
 * This code is part of SU.  SU stands for Seismic Unix, a processing line
 * developed at the Colorado School of Mines, partially based on Stanford
 * Exploration Project (SEP) software.  Inquiries should be addressed to:
 *
 *  Jack K. Cohen, Center for Wave Phenomena, Colorado School of Mines,
 *  Golden, CO 80401  (jkc@@dix.mines.colorado.edu)
 *----------------------------------------------------------------------
 */

a39 1
/**************** end self doc ***********************************/
d45 1
@


1.12
log
@changed bzero to memset
@
text
@d1 1
a1 1
/* SEGYHDRS: $Revision: 1.11 $ ; $Date: 93/11/22 16:12:06 $	*/
d162 1
a162 1
	if (!getparint("dt", &hdt))		hns = tr.dt;
@


1.11
log
@added "dt" as a parameter read from header on first trace.
@
text
@d1 1
a1 1
/* SEGYHDRS: $Revision: 1.10 $ ; $Date: 92/11/06 09:39:19 $	*/
d224 1
a224 1
	bzero(&bh, BNYBYTES);
@


1.10
log
@changed to read ns from header
@
text
@d1 1
a1 1
/* SEGYHDRS: $Revision: 1.9 $ ; $Date: 92/10/28 16:54:12 $	*/
d30 1
d160 1
d162 1
a173 1
	if (!getparint("hdt", &hdt))		hdt = 0;
@


1.9
log
@cosmetic change
@
text
@d1 1
a1 1
/* SEGYHDRS: $Revision: 1.8 $ ; $Date: 92/10/28 16:53:10 $	*/
d21 30
a50 30
" 								",
" SEGYHDRS - make SEG-Y ascii and binary headers for segywrite	",
" 								",
" segyhdrs ns= [bfile= hfile=] 					",
" 								",
" Required parameter:						",
" 	ns=the number of samples per trace			",
" 								",
" Optional parameters:						",
" 	bfile=binary	name of file containing binary block	",
" 	hfile=header	name of file containing ascii block	",
"   Some binary header fields are set:				",
" 	jobid=1		job id field				",
" 	lino=1		line number (only one line per reel)	",
" 	reno=1		reel number				",
" 	format=1	data format				",
" 								",
" All other fields are set to 0, by default.			",
" To set any binary header field, use sukeyword to find out	",
" the appropriate keyword, then use the getpar form:		",
" 	keyword=value	to set keyword to value			",
" 								",
" The header file is created as ascii and is translated to ebcdic",
" by segywrite before being written to tape.  Its contents are	",
" formal but can be edited after creation as long as the forty	",
" line format is maintained.					",
" 								",
" Caveat: This program breaks if a \"short\" isn't 2 bytes since",
"         the SEG-Y standard demands a 2 byte integer for ns.	",
" 								",
d56 1
a56 1
 *	CWP: Jack K. Cohen,  John Stockwell
d59 1
a59 1

d64 6
a69 6
	char *hfile;	/* name of ascii header file	*/
	char buf[80];	/* buffer for ascii file lines	*/
	int hfd;	/* file descriptor for bfile	*/
	char *bfile;	/* name of binary header file	*/
	int bfd;	/* file descriptor for bfile	*/
	int i;		/* counter			*/
d77 1
a77 1
	int hdt;	/* sample interval in micro secs for this reel */
d155 5
a161 1
	MUSTGETPARINT("ns", &hns);
a172 1
	if (!getparint("ns", &hns))		hns = 0;
d195 2
a196 2
	hfd = eopen(hfile, O_WRONLY | O_CREAT | O_TRUNC, 0644);
	bfd = eopen(bfile, O_WRONLY | O_CREAT | O_TRUNC, 0644);
d201 2
a202 1
	ewrite(hfd, (char *) buf, 80);
d204 2
a205 1
	ewrite(hfd, (char *) buf, 80);
d207 2
a208 1
	ewrite(hfd, (char *) buf, 80);
d210 2
a211 1
	ewrite(hfd, (char *) buf, 80);
d213 2
a214 1
	ewrite(hfd, (char *) buf, 80);
d217 1
a217 1
		ewrite(hfd, (char *) buf, 80);
d252 1
a252 1
	ewrite(bfd, (char *) &bh, BNYBYTES);
d256 2
a257 2
	eclose(hfd);
	eclose(bfd);
@


1.8
log
@cosmetic change to selfdoc
@
text
@d1 1
a1 1
/* SEGYHDRS: $Revision: 1.7 $ ; $Date: 92/10/22 15:42:35 $	*/
d37 2
a38 1
"   All other fields are set to 0, by default.			",
@


1.7
log
@new selfdoc installed
@
text
@d1 1
a1 1
/* SEGYHDRS: $Revision: 1.6 $ ; $Date: 92/08/31 11:16:12 $	*/
@


1.6
log
@expanded user ability to specify binary header info
@
text
@d1 1
a1 1
/* SEGYHDRS: $Revision: 1.5 $ ; $Date: 91/09/05 08:49:11 $	*/
d20 31
a50 31
char *sdoc =
" 								\n"
" SEGYHDRS - make SEG-Y ascii and binary headers for segywrite	\n"
" 								\n"
" segyhdrs ns= [bfile= hfile=] 					\n"
" 								\n"
" Required parameter:						\n"
" 	ns=the number of samples per trace			\n"
" 								\n"
" Optional parameters:						\n"
" 	bfile=binary	name of file containing binary block	\n"
" 	hfile=header	name of file containing ascii block	\n"
"   Some binary header fields are set:				\n"
" 	jobid=1		job id field				\n"
" 	lino=1		line number (only one line per reel)	\n"
" 	reno=1		reel number				\n"
" 	format=1	data format				\n"
"   All other fields are set to 0, by default.			\n"
" To set any binary header field, use sukeyword to find out	\n"
" the appropriate keyword, then use the getpar form:		\n"
" 	keyword=value	to set keyword to value			\n"
" 								\n"
" The header file is created as ascii and is translated to ebcdic\n"
" by segywrite before being written to tape.  Its contents are	\n"
" formal but can be edited after creation as long as the forty	\n"
" line format is maintained.					\n"
" 								\n"
" Caveat: This program breaks if a \"short\" isn't 2 bytes since\n"
"         the SEG-Y standard demands a 2 byte integer for ns.	\n"
" 								\n"
;
d152 1
a152 1
	askdoc(0); /* stdin not used */
@


1.5
log
@string -> String and so forth
@
text
@d1 1
a1 1
/* SEGYHDRS: $Revision: 1.4 $ ; $Date: 90/12/18 14:12:42 $	*/
d20 1
a20 1
String sdoc =
d32 9
d42 4
a45 5
" The hns and format fields in the binary header are set.  The	\n"
" other fields are zeroed out.  The header file is created as	\n"
" ascii and is translated to ebcdic by segywrite before being	\n"
" written to tape.  Its contents are formal but can be edited	\n"
" after creation as long as the forty line format is maintained.\n"
d55 1
a55 1
 *	CWP: Jack
d63 1
a63 1
	String hfile;	/* name of ascii header file	*/
d66 1
a66 1
	String bfile;	/* name of binary header file	*/
a67 1
	int ns;		/* number of samples		*/
d70 8
d79 71
d156 1
a156 1
	MUSTGETPARINT("ns", &ns);
d160 28
d189 1
d212 1
a212 1
	/* Create binary header: set hns and format fields */
d214 27
a240 3
	bh.hns = (short) ns;
	bh.format = 1;

@


1.4
log
@Documented some machine dependencies in the self-doc.
@
text
@d1 1
a1 1
/* SEGYHDRS: $Revision: 1.3 $ ; $Date: 90/10/04 16:26:56 $	*/
d20 1
a20 1
string sdoc =
d55 1
a55 1
	string hfile;	/* name of ascii header file	*/
d58 1
a58 1
	string bfile;	/* name of binary header file	*/
d60 1
a60 1
	short ns;	/* number of samples		*/
d70 1
a70 1
	MUSTHGETPAR("ns", &ns);
d99 1
a99 1
	bh.hns = ns;
@


1.3
log
@Somehow open statements had lost fildes = on right hand side.
@
text
@d1 1
a1 1
/* SEGYHDRS: $Revision: 1.2 $ ; $Date: 90/09/03 09:42:58 $	*/
d20 23
a42 20
string sdoc = "\
								\n\
SEGYHDRS - make SEG-Y ascii and binary headers for segywrite	\n\
								\n\
segyhdrs ns= [bfile= hfile=] 					\n\
								\n\
Required parameter:						\n\
	ns=the number of samples per trace			\n\
								\n\
Optional parameters:						\n\
	bfile=binary	name of file containing binary block	\n\
	hfile=header	name of file containing ascii block	\n\
								\n\
The hns and format fields in the binary header are set.  The	\n\
other fields are zeroed out.  The header file is created as	\n\
ascii and is translated to ebcdic by segywrite before being	\n\
written to tape.  Its contents are formal but can be edited	\n\
after creation as long as the forty line format is maintained.	\n\
								\n\
";
d46 1
a47 1
 *
d71 2
a72 2
	if (!sgetpar("hfile", &hfile))	hfile = "header";
	if (!sgetpar("bfile", &bfile))	bfile = "binary";
@


1.2
log
@ANSI C and syscalls changes--not checked!!
@
text
@d1 1
a1 1
/* SEGYHDRS: $Revision: 1.1 $ ; $Date: 90/04/15 15:33:37 $	*/
d73 2
a74 2
	eopen(hfile, O_WRONLY | O_CREAT | O_TRUNC, 0644);
	eopen(bfile, O_WRONLY | O_CREAT | O_TRUNC, 0644);
d79 1
a79 1
	ewrite(hfd, buf, 80);
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/* SEGYHDRS: $Revision: 2.7 $ ; $Date: 89/10/20 16:46:56 $	*/
d4 1
a4 1
 * Copyright (c) Colorado School of Mines, 1989.
d12 1
a12 1
 *  Golden, CO 80401  (isis!csm9a!jkcohen)
d27 1
a27 1
	ns = the number of samples per trace			\n\
a44 8
 * Caveats:
 *	In the binary header, only sets the hns field (mandatory input),
 *	and the format field (to IBM).  The other fields are zeroed out.
 *
 *	The ascii header is purely formal as created, but may be edited
 *	if the user maintains the SEG-Y format.
 *
 *
a46 5
/* Embed Revision Control System identifier strings */
static string progid =
	"   $Source: /src/su/src/RCS/segyhdrs.c,v $";
static string revid =
	"   $Revision: 2.7 $ ; $Date: 89/10/20 16:46:56 $";
a47 2


d50 1
a50 2
main(argc, argv)
int argc; char **argv;
d61 1
a61 1
	/* Initialize SU */
a62 5
	if (!igetpar("ID", &ID))	ID = 0;
	if (ID) {
		(void) fprintf(stderr, "%s\n", progid);
		(void) fprintf(stderr, "%s\n", revid);
	}
d73 2
a74 10
	if (-1 == (hfd =
		open(hfile, O_WRONLY | O_CREAT | O_TRUNC, 0644))) {
		syserr("can't open ascii header file, %s, for output",
								hfile);
	}
	if (-1 == (bfd =
		open(bfile, O_WRONLY | O_CREAT | O_TRUNC, 0644))) {
		syserr("can't open binary header file, %s, for output",
								bfile);
	}
d79 1
a79 1
	ewrite(hfd, (char *) buf, 80);
d99 1
d105 2
a106 6
	if (-1 == close(hfd)) {
		syserr("close failed on ascii header file");
	}
	if (-1 == close(bfd)) {
		syserr("close failed on binary header file");
	}
d108 1
a108 2

	return SUCCEED;
@
