head	1.5;
access;
symbols;
locks; strict;
comment	@ * @;


1.5
date	2011.11.17.00.03.38;	author john;	state Exp;
branches;
next	1.4;

1.4
date	2011.11.12.00.44.21;	author john;	state Exp;
branches;
next	1.3;

1.3
date	2011.09.09.22.35.17;	author john;	state Exp;
branches;
next	1.2;

1.2
date	2009.12.09.18.17.17;	author john;	state Exp;
branches;
next	1.1;

1.1
date	2009.08.03.21.35.06;	author john;	state Exp;
branches;
next	;


desc
@suputgthr companion program to sugetgthr
@


1.5
log
@added Reg Beardsley's checkpar()
@
text
@/* Copyright (c) Colorado School of Mines, 2011.*/
/* All rights reserved.                       */

/* SUPUTGTHR: $Revision: 1.3 $ ; $Date: 2011/09/09 22:35:17 $	*/

#include "su.h"
#include "segy.h"
#include <unistd.h>

/*********************** self documentation **********************/
char *sdoc[] = {
" 									",
" SUPUTGTHR - split the stdout flow to gathers on the bases of given	",
" 		key parameter. 						",
" 									",
"	suputgthr <stdin   dir= [Optional parameters]			",
" 									",
" Required parameters:							",
" dir=		Name of directory where to put the gathers		",
" Optional parameters: 							",
" key=ep		header key word to watch   			",
" suffix=\".hsu\"	extension of the output files			",
" verbose=0		verbose = 1 echos information			",
" numlength=7		Length of numeric part of filename		",
" 									",
" Notes: 			    					",
" The name of the file is constructed from the key parameter. Traces	",
" are put into a temporary disk file, and renamed when key parameter	",
" changes in the input flow to \"key.suffix\". The result is that the	",
" directory \"dir\" contains separate files by \"key\" ensemble. 	",	
" 									",
" Header field modified:  ntr  to be the number of traces in a given 	",
" ensemble.								",
" Related programs: sugetgthr, susplit 					",
NULL};

/* 
 * Credits: Balazs Nemeth, Potash Corporation, Saskatoon Saskatchewan
 * given to CWP in 2008
 * Note:
 *	The "valxxx" subroutines are in su/lib/valpkge.c.  In particular,
 *	"valcmp" shares the annoying attribute of "strcmp" that
 *		if (valcmp(type, val, valnew) {
 *			...
 *		}
 *	will be performed when val and valnew are different.
 *
 */

/**************** end self doc ***********************************/


segy intrace;
segy tmptr;

int
main(int argc, char **argv)
{
	cwp_String key;	/* header key word from segy.h		*/
	cwp_String type;/* ... its type				*/
	int index;	/* ... its index			*/
	int nsegy;	/* number of bytes in the segy		*/
	Value val;	/* value of key in current gather	*/
	Value valnew;	/* value of key in trace being treated	*/
	int verbose;	/* verbose flag				*/
	int val_i;	/* key value as an integer		*/

	int ntr=0;	/* count of number of traces in an ensemble */
	int numlength;	/* length of numerical part of filenames */
	
	FILE *tmpfp=NULL;		/* file pointer			*/
	FILE *outfp=NULL;	/* file pointer			*/
	cwp_String dir;		/* directory name		*/
	cwp_String suffix;	/* suffix of output files	*/

	char directory[BUFSIZ];		/* storage for directory name	*/
 	char tempfilename[BUFSIZ];	/* 	...temporary filename	*/
	char middle[BUFSIZ];		/*      ...middle of final filename */
	char stem[BUFSIZ];		/*      ...stem of final filename */
 	char format[BUFSIZ];		/* 	...format of numeric part */
	char outfile[BUFSIZ];		/*      ...final filename	*/

	/* Initialize */
	initargs(argc, argv);
	requestdoc(1);


	/* Get parameters */
	MUSTGETPARSTRING("dir", &dir);
	if (!getparint   ("verbose", &verbose))	 	verbose = 0;
	if (!getparstring("key", &key))		 	key = "ep";
	if (!getparstring("suffix", &suffix))		suffix = ".hsu";
	if (!getparint("numlength", &numlength)) 	numlength=7;
        checkpars();

	/* Initialize */
	/* tempfilename = ealloc1(strlen(tmplt)+3,sizeof(char)); */
	type = hdtype(key);
	index = getindex(key);

	/* Set up for first trace (must compare new key field each time) */
	nsegy = gettr(&intrace);
	
	/* Create temporary filename for the first gather */
	strcpy(directory, dir);
	strcpy(tempfilename, temporary_filename(directory));
	if((tmpfp = fopen(tempfilename,"w+")) == NULL)
		err("Cannot open file %s\n",tempfilename);

	if (verbose) warn(" temporary filename = %s", tempfilename);

	/* get key header value */
	gethval(&intrace, index, &val);
	
	ntr=0;
	do {

		++ntr;
		/* Get header value */				 
		gethval(&intrace, index, &valnew);

		/* compare past header value to current value */
		if (valcmp(type, val, valnew) || !nsegy) {
		 /* Either val and valnew differ, indicating a  */
		 /* new gather or nsegy is zero, indicating the */
		 /* end of the traces.			  */
			
			/* capture key field value */
			/* and build output filename */
			val_i=vtoi(type,val);

			/* zero out name parts */
			strcpy(outfile,"");
			strcpy(middle,"");
			strcpy(stem,"");

			/* build output name parts */
			strcat(middle,directory);
			strcat(middle,"/");
			strcat(stem,key);
			strcat(stem,"=");

			/* format for numeric part */
			(void)sprintf(format, "%%s%%s%%0%dd%%s",numlength);
		
			/* build name of output file */
			(void)sprintf(outfile, format,middle,stem,
					val_i, suffix);

			if (verbose) warn(" outfile = %s", outfile);

			/* rewind file */
			rewind(tmpfp);

			/* open the new file */
			if((outfp = fopen(outfile,"w+")) == NULL)
				err("Cannot open file %s\n",outfile);
			/* loop over traces setting ntr field */
			/*  and write to finalfile */	
			while(fgettr(tmpfp,&tmptr))  {
				tmptr.ntr = ntr;
				fputtr(outfp,&tmptr);
			}
			/* Close files */
			fclose(tmpfp);
			fclose(outfp);
			remove(tempfilename);

			if (verbose) warn("val= %i", val_i);

			/* Set up for next gather */
			/* create new tempfname first */
			strcpy(tempfilename, temporary_filename(directory));
			
			/* open filename */
			if((tmpfp = fopen(tempfilename,"w+")) == NULL)
				err("Cannot open file %s\n",tempfilename);
			val = valnew;
			ntr=0;
		}
		fputtr(tmpfp,&intrace);
	} while(gettr(&intrace));
	
	/* Close file */
	rewind(tmpfp);
	val_i=vtoi(type,val);
	
	/* Move last gather into new location */
	/* capture key field value */
	/* and build output filename */

	/* null out name parts */
	strcpy(outfile,"");
	strcpy(middle,"");
	strcpy(stem,"");

	/* build name parts */
	strcat(middle,directory);
	strcat(middle,"/");
	strcat(stem,key);
	strcat(stem,"=");
	
	/* write format of numeric part of output filename */
	(void)sprintf(format, "%%s%%s%%0%dd%%s",numlength);

	/* write output filename */
	(void)sprintf(outfile, format,middle,stem,
				val_i, suffix);

	/* open the output file */
	if((outfp = fopen(outfile,"w+")) == NULL)
			err("Cannot open file %s\n",outfile);
	/* loop over traces setting ntr field */
	while(fgettr(tmpfp,&tmptr))  {
		tmptr.ntr = ntr;
		fputtr(outfp,&tmptr);
	}
	/* Close file */
	fclose(tmpfp);
	fclose(outfp);
	remove(tempfilename);

	if (verbose) warn(" outfile = %s", outfile);
	if (verbose) warn("val= %i",val_i);

	return(CWP_Exit());

}
@


1.4
log
@copyright
@
text
@d94 1
@


1.3
log
@*** empty log message ***
@
text
@d1 4
a4 1
/* SUPUTGTHR: $Revision: 1.2 $ ; $Date: 2009/12/09 18:17:17 $	*/
@


1.2
log
@updated to be similar to susplit, and to set the ntr field
in each ensemble.
@
text
@d1 1
a1 1
/* SUPUTGTHR: $Revision: 1.1 $ ; $Date: 2009/08/03 21:35:06 $	*/
d68 2
a69 2
	FILE *fp=NULL;		/* file pointer			*/
	FILE *finalfp=NULL;	/* file pointer			*/
d71 1
a71 1
	cwp_String suffix;	
d78 1
a78 3
	char finalname[BUFSIZ];		/*      ...final filename	*/

	int i;			/* counter */
d103 1
a103 1
	if((fp = fopen(tempfilename,"w+")) == NULL)
d108 1
d118 1
d120 3
a122 5

			
			/* Either val and valnew differ, indicating a  */
			/* new gather or nsegy is zero, indicating the */
			/* end of the traces.			  */
d127 3
a129 1
			strcpy(finalname,"");
d133 1
d139 1
d142 2
a143 1
			(void)sprintf(finalname, format,middle,stem,
d146 1
a146 1
			if (verbose) warn(" finalname = %s", finalname);
d149 1
a149 1
			rewind(fp);
d152 2
a153 2
			if((finalfp = fopen(finalname,"w+")) == NULL)
				err("Cannot open file %s\n",finalname);
d156 1
a156 1
			while(fgettr(fp,&tmptr))  {
d158 1
a158 1
				fputtr(finalfp,&tmptr);
d161 2
a162 2
			fclose(fp);
			fclose(finalfp);
d165 2
a166 5
			if (verbose) {
				fprintf(stderr, "val=");
				fprintfval(stderr, type, val);
				fprintf(stderr,"\n");
			}
d172 1
a172 1
			if((fp = fopen(tempfilename,"w+")) == NULL)
d177 1
a177 1
		fputtr(fp,&intrace);
d181 1
a181 1
	rewind(fp);
d187 3
a189 1
	strcpy(finalname,"");
d192 2
d198 2
d201 3
a203 1
	(void)sprintf(finalname, format,middle,stem,
d206 3
a208 3
	/* open the new file */
	if((finalfp = fopen(finalname,"w+")) == NULL)
			err("Cannot open file %s\n",finalname);
d210 1
a210 1
	while(fgettr(fp,&tmptr))  {
d212 1
a212 1
		fputtr(finalfp,&tmptr);
d215 2
a216 2
	fclose(fp);
	fclose(finalfp);
d219 2
a220 5
	if (verbose) {
		warn("val=");
		fprintfval(stderr, type, val);
		warn("\n");
	}
d222 1
a222 1
	 return(CWP_Exit());
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/* SUPUTGTHR: $Revision: 1.22 $ ; $Date: 2006/11/07 22:58:42 $	*/
d16 1
a16 1
" 	dir=		Name of directory where to put the gathers	",
d19 1
a19 1
" ext=hsu		extension of the output files			",
d21 1
d26 6
a31 1
" changes in the input flow to \"key.ext\"				",	
d35 1
a35 1
 * Credits: Balasz Nemeth, Potash Corporation, Saskatoon Saskatchewan
d51 1
d58 1
a58 1
	int indx;	/* ... its index			*/
d63 4
d68 2
a69 1
	FILE *fp;		/* file pointer			*/
d71 8
a78 5
	cwp_String ext;	
	char tmpname[]="sugXXXXXX";
 	char *tmpfname=NULL;
 	char  fname[]="	  ";
	char *fffname=NULL;
d80 1
d89 5
a93 4
	if (!getparint   ("verbose", &verbose))	 verbose = 0;
	if (!getparstring("key", &key))		 key = "ep";
	if (!getparstring("ext", &ext))		 ext = "hsu";
 
d95 1
a95 1
	/* tmpfname = ealloc1(strlen(tmplt)+3,sizeof(char)); */
d97 1
a97 1
	indx = getindex(key);
d103 6
a108 5
	mktemp(tmpname);
	tmpfname = ealloc1(strlen(dir)+strlen(tmpname)+2,sizeof(char));
	sprintf(tmpfname, "%s/%s",dir,tmpname);
	if((fp = fopen(tmpfname,"w")) == NULL)
		err("Cannot open file %s\n",tmpfname);
d110 3
a112 1
	gethval(&intrace, indx, &val);
d114 2
d117 2
a118 1
		gethval(&intrace, indx, &valnew);
d120 1
d126 32
a157 1
			/* Close file */
d159 3
a161 11
			
			/* Move file into new location */
			/* create new filename first */
			sprintf(fname,"%d",vtoi(type,val));
			fffname = ealloc1(strlen((const char *)&dir)+strlen(fname)+
					  strlen((const char *) &ext)+4,sizeof(char));
			rename(tmpfname,fffname);
			sprintf(fffname, "%s/%s.%s",dir,fname,ext);
			free1(fffname);
			free1(tmpfname);
			
d167 3
d171 3
a173 7
			/* Set up for next gather */
			/* Create temporary filename */
			mktemp(tmpname);
			tmpfname = ealloc1(strlen(dir)+strlen(tmpname)+2,sizeof(char));
			sprintf(tmpfname, "%s/%s",dir,tmpname);
			if((fp = fopen(tmpfname,"w")) == NULL)
				err("Cannot open file %s\n",tmpfname);
d175 1
d181 2
a182 1
	fclose(fp);
d185 26
a210 8
	/* create new filename first */
	sprintf(fname,"%d",vtoi(type,val));
	fffname = ealloc1(strlen((const char *)&dir)+strlen(fname)+
			  strlen((const char *) &ext)+4,sizeof(char));
	sprintf(fffname, "%s/%s.%s",dir,fname,ext);
	rename(tmpfname,fffname);
	free1(fffname);
	free1(tmpfname);
d217 1
a217 1
        return(CWP_Exit());
@
