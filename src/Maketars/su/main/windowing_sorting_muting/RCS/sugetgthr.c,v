head	1.5;
access;
symbols;
locks; strict;
comment	@ * @;


1.5
date	2011.11.17.00.03.38;	author john;	state Exp;
branches;
next	1.4;

1.4
date	2011.11.12.00.44.21;	author john;	state Exp;
branches;
next	1.3;

1.3
date	2011.09.09.22.35.17;	author john;	state Exp;
branches;
next	1.2;

1.2
date	2009.08.04.17.39.39;	author john;	state Exp;
branches;
next	1.1;

1.1
date	2009.08.04.15.25.16;	author john;	state Exp;
branches;
next	;


desc
@get gather from an SU directory and send to a pipe
@


1.5
log
@added Reg Beardsley's checkpar()
@
text
@/* Copyright (c) Colorado School of Mines, 2011.*/
/* All rights reserved.                       */

/* SUGETGTHR: $Revision: 1.3 $ ; $Date: 2011/09/09 22:35:17 $		*/

#include <sys/stat.h> 
#include <sys/types.h>
#include <fcntl.h>
#include <dirent.h>

#include "su.h"
#include "segy.h"
#include "header.h"


#define CWP_O_LARGEFILE	0100000

/*********************** self documentation **********************/
char *sdoc[] = {
" 									",
" SUGETGTHR - Gets su files from a directory and put them               ",
"             throught the unix pipe. This creates continous data flow.	",
" 									",
"  sugetgthr  <stdin >sdout   						",
" 									",
" Required parameters:							",
" 									",
" dir=            Name of directory to fetch data from 			",
" 	          Every file in the directory is treated as an su file	",
" Optional parameters:							",
" verbose=0		=1 more chatty					",
" vt=0			=1 allows gathers with variable length traces	",
" 			no header checking is done!			",
" ns=			must be specified if vt=1; number of samples to read",
" 									",
NULL};



segy tr;

int
main(int argc, char **argv)
{
	
	cwp_String dir="";	/* input directory containng the gathers */
	char *fname=NULL;	
	char *ffname=NULL;
	
	DIR *dp=NULL;
	struct dirent *d=NULL;
	struct stat __st;
	FILE *fp=NULL;
	int fd=0;
	
	int verbose;
	int vt=0;
	ssize_t nread;
	int ns=0;

	
	/* Initialize */
	initargs(argc, argv);
	requestdoc(1);

        /* Get parameters */
        MUSTGETPARSTRING("dir", &dir);
       	if (!getparint   ("verbose", &verbose)) verbose = 0;
       	if (!getparint   ("vt", &vt)) vt = 0;
	if(vt)MUSTGETPARINT("ns",&ns); 
        checkpars();
	
	/* Open the directory */
	if ((dp = opendir(dir)) == NULL)
		err(" %s directory not found\n",dir);
	
	/* For each file in directory */
	while (( d = readdir(dp)) !=NULL) {
		
		fname = ealloc1(strlen(d->d_name)+1,sizeof(char));
		strcpy(fname,d->d_name);
		
		/* Skip . and .. directory entries */
		if(strcmp(fname,".") && strcmp(fname,"..")) {		
			ffname = ealloc1(strlen(d->d_name)+strlen(dir)+2,sizeof(char));
			
			/* Create full filename */
			sprintf(ffname, "%s/%s",dir,fname);
			if(verbose==1) warn("%s",ffname);
			
			/* get some info from the file */
			stat(ffname,&__st);
			if(__st.st_size > 0) {
			
				/* Open the file and read traces into stdout*/
 				if(vt) {
					fd = open(ffname,O_RDONLY|CWP_O_LARGEFILE);
				/*	nread=fread(&tr,(size_t) HDRBYTES,1,fp);  */
					nread=read(fd,&tr,(size_t) HDRBYTES); 
					memset((void *) &tr.data[tr.ns], (int) '\0' ,MAX(ns-tr.ns,0)*FSIZE);
				/*	nread+=fread(&tr.data[0],(size_t) tr.ns*FSIZE,1,fp); */
					nread+=read(fd,&tr.data[0],(size_t) tr.ns*FSIZE);
				} else {
					fp = efopen(ffname, "r");
					nread=fgettr(fp, &tr);
				}
				do {
					if(vt) { 
						tr.ns=ns;
						fwrite(&tr,ns*FSIZE+HDRBYTES,1,stdout);
					} else {
						puttr(&tr);
					}
					if(vt) {
						/* nread=fread(&tr,(size_t) HDRBYTES,1,fp); */
						nread=read(fd,&tr,(size_t) HDRBYTES);
						memset((void *) &tr.data[tr.ns], (int) '\0' ,MAX(ns-tr.ns,0)*FSIZE);
						/* nread+=fread(&tr.data[0],(size_t) tr.ns*FSIZE,1,fp); */
						nread+=read(fd,&tr.data[0],(size_t) tr.ns*FSIZE);
					} else {
						nread=fgettr(fp, &tr);
					}
				} while(nread);
				if(vt) close(fd);
				else efclose(fp);
			} else {
				warn(" File %s has zero size, skipped.\n",ffname);
			}
			free1(ffname);
		}
		free1(fname);
		
	}
	closedir(dp);
        return(CWP_Exit());
}
@


1.4
log
@copyright
@
text
@d71 1
@


1.3
log
@*** empty log message ***
@
text
@d1 4
a4 1
/* SUGETGTHR: $Revision: 1.2 $ ; $Date: 2009/08/04 17:39:39 $		*/
@


1.2
log
@*** empty log message ***
@
text
@d1 1
a1 1
/* SUGETGTHR: $Revision: 1.1 $ ; $Date: 2009/08/04 15:25:16 $		*/
d13 1
a13 2

#define O_LARGEFILE	0100000
d93 1
a93 1
					fd = open(ffname,O_RDONLY|O_LARGEFILE);
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/* SUGETGTHR: $Revision: 1.26 $ ; $Date: 2009/07/22 23:13:12 $		*/
d22 1
a22 1
" sutred  <stdin >sdout        						",
d27 1
a27 1
" 	          Every file in the directory is treated as a su file	",
d32 1
a32 1
" ns			must be specified if vt=1; number of smaples to read",
d58 1
d86 1
a86 1
			if(verbose==1) fprintf(stderr,"%s\n",ffname);
@
