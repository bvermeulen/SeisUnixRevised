head	1.18;
access;
symbols;
locks; strict;
comment	@ * @;


1.18
date	2011.11.17.00.03.38;	author john;	state Exp;
branches;
next	1.17;

1.17
date	2011.11.12.00.44.21;	author john;	state Exp;
branches;
next	1.16;

1.16
date	2011.03.08.19.33.59;	author john;	state Exp;
branches;
next	1.15;

1.15
date	2006.11.07.22.58.42;	author john;	state Exp;
branches;
next	1.14;

1.14
date	2003.06.09.16.17.07;	author john;	state Exp;
branches;
next	1.13;

1.13
date	96.08.20.21.43.55;	author jkc;	state Exp;
branches;
next	1.12;

1.12
date	96.01.29.21.38.55;	author jkc;	state Exp;
branches;
next	1.11;

1.11
date	96.01.29.21.27.07;	author jkc;	state Exp;
branches;
next	1.10;

1.10
date	96.01.29.21.22.09;	author jkc;	state Exp;
branches;
next	1.9;

1.9
date	96.01.29.20.43.35;	author jkc;	state Exp;
branches;
next	1.8;

1.8
date	96.01.29.17.17.25;	author jkc;	state Exp;
branches;
next	1.7;

1.7
date	94.08.25.14.59.54;	author jkc;	state Exp;
branches;
next	1.6;

1.6
date	92.10.26.14.04.49;	author john;	state Exp;
branches;
next	1.5;

1.5
date	91.09.05.08.50.58;	author jkcohen;	state Exp;
branches;
next	1.4;

1.4
date	91.03.22.16.05.37;	author jkc;	state Exp;
branches;
next	1.3;

1.3
date	90.06.05.15.51.23;	author jkc;	state Exp;
branches;
next	1.2;

1.2
date	90.06.04.23.25.38;	author jkc;	state Exp;
branches;
next	1.1;

1.1
date	90.04.18.21.01.04;	author jkc;	state Exp;
branches;
next	;


desc
@Zero out traces
@


1.18
log
@added Reg Beardsley's checkpar()
@
text
@/* Copyright (c) Colorado School of Mines, 2011.*/
/* All rights reserved.                       */

/* SUKILL: $Revision: 1.16 $ ; $Date: 2011/03/08 19:33:59 $	*/

#include "su.h"
#include "segy.h"

/*********************** self documentation **********************/
char *sdoc[] = {
" 								",
" SUKILL - zero out traces					",
" 								",
" sukill <stdin >stdout [optional parameters]			",
" 								",
" Optional parameters:						",
"	key=trid	header name to select traces to kill	",
"	a=2		header value identifying tracces to kill",
" or								",
" 	min= 		first trace to kill (one-based)		",
" 	count=1		number of traces to kill 		",
" 								",
" Notes:							",
"	If min= is set it overrides selecting traces by header.	",
" 								",
NULL};

/* Credits:
 *	CWP: Chris Liner, Jack K. Cohen
 *	header-based trace selection: Florian Bleibinhaus
 *
 * Trace header fields accessed: ns
 */
/**************** end self doc ***********************************/


segy tr;

int
main(int argc, char **argv)
{
	cwp_String key;		/* trace header			*/
	cwp_String type;	/* type for trace header	*/
	int index;		/* index of trace header	*/
	Value val;		/* trace header value		*/
	double dval,a;		/* trace header value		*/
	register int itr;	/* trace counter		*/
	int min;		/* first trace to zero out	*/
	int count;		/* number of traces to zero out	*/
	int nt = 0;		/* number of time samples	*/

	/* Initialize */
	initargs(argc, argv);
	requestdoc(1);


	/* Get parameters */
	if (!getparint("min", &min)) min = 0;
	if (min < 0) err("min = %d, must be >= 1", min);
	if (!getparint("count", &count))  count = 1;
	if (!getparstring("key", &key)) key = "trid";
	if (!getpardouble("a", &a)) a = 2.;
        checkpars();

	/* Get type and index value */
	type  = hdtype(key);
	index = getindex(key);


	if ( min>0 ) {

	/* Echo traces till min if they are there */
	for (itr = 1; itr < min; ++itr) {
		if (gettr(&tr)) puttr(&tr);
		else err("failed to get requested trace #%ld", itr);
	}

	/* Kill "count" traces if they are there
	 * Do first outside loop to get nt    */
	if (gettr(&tr)) {
		nt = tr.ns;
		memset( (void *) tr.data, 0, nt * FSIZE);
		puttr(&tr);
		++itr;
	} else err("failed to get requested trace #%ld", itr);

	for ( ; itr < min + count; ++itr) {
		if (gettr(&tr)) {
			memset( (void *) tr.data, 0, nt * FSIZE);
			puttr(&tr);
		} else err("failed to get requested trace #%ld", itr);
	}

	/* Echo the trailing traces if any */
	while (gettr(&tr)) {
		puttr(&tr);
	}

	} else {	/* select traces by header value */
		while (gettr(&tr)) {
			nt = tr.ns;
			gethval(&tr, index, &val);
			dval = vtod(type, val);
			if ( dval==a ) memset( (void *) tr.data, 0, nt*FSIZE);
			puttr(&tr);
		}
	}


	return(CWP_Exit());
}
@


1.17
log
@copyright
@
text
@d63 1
@


1.16
log
@Florian Bleibenhaus additions for header word based trace killing
@
text
@d1 4
a4 1
/* SUKILL: $Revision: 1.15 $ ; $Date: 2006/11/07 22:58:42 $	*/
@


1.15
log
@changed    memset( .., (int) '\0',...) to memset( .., 0,..) as per suggestion of Marion Zhu and Reg Beardsley
@
text
@d1 1
a1 1
/* SUKILL: $Revision: 1.14 $ ; $Date: 2003/06/09 16:17:07 $	*/
d11 1
a11 1
" sukill <stdin >stdout min= count=1				",
d13 4
a16 1
" Required parameters						",
d18 1
d20 2
a21 2
" Optional parameters						",
" 	count= 1	number of traces to kill 		",
d27 1
d39 5
d55 2
a56 2
	MUSTGETPARINT("min", &min);
	if (min < 1) err("min = %d, must be >= 1", min);
d58 2
d61 6
a82 1

a89 1

d95 11
@


1.14
log
@9 June 2003
@
text
@d1 1
a1 1
/* SUKILL: $Revision: 1.13 $ ; $Date: 1996/08/20 21:43:55 $	*/
d60 1
a60 1
		memset( (void *) tr.data, (int) '\0', nt * FSIZE);
d68 1
a68 1
			memset( (void *) tr.data, (int) '\0', nt * FSIZE);
@


1.13
log
@Make -Wall happy.
@
text
@d1 1
a1 1
/* SUKILL: $Revision: 1.12 $ ; $Date: 1996/01/29 21:38:55 $	*/
d79 1
a79 1
	return EXIT_SUCCESS;
@


1.12
log
@Trade return FAILURE for err.
@
text
@d1 1
a1 1
/* SUKILL: $Revision: 1.11 $ ; $Date: 1996/01/29 21:27:07 $	*/
d31 1
a33 1
	register int i;		/* time counter			*/
d37 1
a37 1
	int nt;			/* number of time samples	*/
@


1.11
log
@Trap negative min.
@
text
@d1 1
a1 1
/* SUKILL: $Revision: 1.10 $ ; $Date: 1996/01/29 21:22:09 $	*/
d53 1
a53 1
		else return EXIT_FAILURE;
d63 1
a63 1
	} else return EXIT_FAILURE;
d70 1
a70 1
		} else return EXIT_FAILURE;
@


1.10
log
@Attempt to deal with min > ntr and/or min+count > ntr.
@
text
@d1 1
a1 1
/* SUKILL: $Revision: 1.9 $ ; $Date: 1996/01/29 20:43:35 $	*/
d46 1
@


1.9
log
@Use memset to zero the traces.
@
text
@d1 1
a1 1
/* SUKILL: $Revision: 1.8 $ ; $Date: 1996/01/29 17:17:25 $	*/
d45 2
a46 2
	MUSTGETPARINT   ("min", &min);
	if (!getparint   ("count", &count))	count = 1;
d50 3
a52 2
	for (itr = 1; itr < min && gettr(&tr); ++itr) {
		puttr(&tr);
d57 6
a62 1
	if (gettr(&tr)) nt = tr.ns;
a63 3
	memset( (void *) tr.data, (int) '\0', nt * FSIZE);
	puttr(&tr);
	++itr;
d65 5
a69 3
	for ( ; itr < min + count && gettr(&tr); ++itr) {
		memset( (void *) tr.data, (int) '\0', nt * FSIZE);
		puttr(&tr);
@


1.8
log
@Deal with trace header fields accessed/modified in sudoc area.
@
text
@d1 1
a1 1
/* SUKILL: $Revision: 1.7 $ ; $Date: 1994/08/25 14:59:54 $	*/
d58 1
a58 2
	for (i = 0; i < nt; ++i)
		tr.data[i] = 0.0;
d63 1
a63 2
		for (i = 0; i < nt; ++i)
			tr.data[i] = 0.0;
@


1.7
log
@Removed copyright statement from codes that had it.
Moved self-doc line for sudoc.
@
text
@d1 1
a1 1
/* SUKILL: $Revision: 1.6 $ ; $Date: 92/10/26 14:04:49 $	*/
d24 1
@


1.6
log
@new selfdoc installed
@
text
@d1 1
a1 1
/* SUKILL: $Revision: 1.5 $ ; $Date: 91/09/05 08:50:58 $	*/
a2 13
/*----------------------------------------------------------------------
 * Copyright (c) Colorado School of Mines, 1990.
 * All rights reserved.
 *
 * This code is part of SU.  SU stands for Seismic Unix, a processing line
 * developed at the Colorado School of Mines, partially based on Stanford
 * Exploration Project (SEP) software.  Inquiries should be addressed to:
 *
 *  Jack K. Cohen, Center for Wave Phenomena, Colorado School of Mines,
 *  Golden, CO 80401  (jkc@@dix.mines.colorado)
 *----------------------------------------------------------------------
 */

a19 1
/**************** end self doc ***********************************/
d25 1
@


1.5
log
@string -> String and so forth
@
text
@d1 1
a1 1
/* SUKILL: $Revision: 1.3 $ ; $Date: 90/06/05 15:51:23 $	*/
d20 13
a32 13
String sdoc =
" 								\n"
" SUKILL - zero out traces					\n"
" 								\n"
" sukill <stdin >stdout min= count=1				\n"
" 								\n"
" Required parameters						\n"
" 	min= 		first trace to kill (one-based)		\n"
" 								\n"
" Optional parameters						\n"
" 	count= 1	number of traces to kill 		\n"
" 								\n"
;
d36 1
a36 1
 *	CWP: Chris, Jack
d53 1
a53 1
	askdoc(1);
@


1.4
log
@tweaks to selfdoc
@
text
@d20 1
a20 1
string sdoc =
@


1.3
log
@Eliminated veclib routines.
@
text
@d1 1
a1 1
/* SUKILL: $Revision: 1.2 $ ; $Date: 90/06/04 23:25:38 $	*/
d20 13
a32 13
string sdoc = "\
								\n\
SUKILL - zero out traces					\n\
								\n\
sukill <stdin >stdout min= count=1				\n\
								\n\
Required parameters						\n\
	min= 		first trace to kill (one-based)		\n\
								\n\
Optional parameters						\n\
	count= 1	number of traces to kill 		\n\
								\n\
";
d57 2
a58 2
	MUSTIGETPAR("min", &min);
	if (!igetpar("count", &count))	count = 1;
@


1.2
log
@ANSI C, etc
@
text
@d1 1
a1 1
/* SUKILL: $Revision: 1.1 $ ; $Date: 90/04/18 21:01:04 $	*/
a17 1
#include "fconst.h"
d45 1
d69 3
a71 1
	vfill(FZERO, tr.data, ONE, &nt); /* tr.data[] = 0.0; */
d76 2
a77 1
		vfill(FZERO, tr.data, ONE, &nt); 
a85 1

@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/* SUKILL: $Revision: 2.9 $ ; $Date: 89/05/25 16:52:09 $	*/
d12 1
a12 1
 *  Golden, CO 80401  (isis!csm9a!jkcohen)
d28 1
a28 1
	min = 		first trace to kill (one-based)		\n\
d31 1
a31 1
	count = 1	number of traces to kill 		\n\
a38 1
 *
a41 8
/* Embed Revision Control System identifier strings */
static string progid =
	"   $Source: /src/su/src/RCS/sukill.c,v $";
static string revid =
	"   $Revision: 2.9 $ ; $Date: 89/05/25 16:52:09 $";



d44 1
a44 2
main(argc, argv)
int argc; char **argv;
a52 5
	if (!igetpar("ID", &ID)) ID = 0;
	if (ID) {
		(void) fprintf(stderr, "%s\n", progid);
		(void) fprintf(stderr, "%s\n", revid);
	}
@
