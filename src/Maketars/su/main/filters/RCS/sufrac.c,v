head	1.29;
access;
symbols;
locks; strict;
comment	@ * @;


1.29
date	2011.12.21.23.25.42;	author john;	state Exp;
branches;
next	1.28;

1.28
date	2011.11.12.00.09.00;	author john;	state Exp;
branches;
next	1.27;

1.27
date	2006.11.07.22.58.42;	author john;	state Exp;
branches;
next	1.26;

1.26
date	2006.03.09.20.00.59;	author john;	state Exp;
branches;
next	1.25;

1.25
date	2004.12.23.23.34.13;	author john;	state Exp;
branches;
next	1.24;

1.24
date	2003.06.09.16.17.07;	author john;	state Exp;
branches;
next	1.23;

1.23
date	97.07.28.22.36.46;	author john;	state Exp;
branches;
next	1.22;

1.22
date	96.07.18.18.47.29;	author jkc;	state Exp;
branches;
next	1.21;

1.21
date	96.07.17.22.29.04;	author jkc;	state Exp;
branches;
next	1.20;

1.20
date	96.07.17.20.32.32;	author jkc;	state Exp;
branches;
next	1.19;

1.19
date	96.01.29.17.05.08;	author jkc;	state Exp;
branches;
next	1.18;

1.18
date	96.01.25.20.00.15;	author jkc;	state Exp;
branches;
next	1.17;

1.17
date	95.08.02.19.53.48;	author jkc;	state Exp;
branches;
next	1.16;

1.16
date	94.08.25.14.59.24;	author jkc;	state Exp;
branches;
next	1.15;

1.15
date	94.03.30.13.53.41;	author john;	state Exp;
branches;
next	1.14;

1.14
date	94.03.04.14.49.15;	author john;	state Exp;
branches;
next	1.13;

1.13
date	94.03.04.14.43.41;	author john;	state Exp;
branches;
next	1.12;

1.12
date	93.12.14.13.41.41;	author jkc;	state Exp;
branches;
next	1.11;

1.11
date	93.11.24.15.31.21;	author john;	state Exp;
branches;
next	1.10;

1.10
date	93.11.24.15.09.46;	author john;	state Exp;
branches;
next	1.9;

1.9
date	92.10.23.15.15.20;	author john;	state Exp;
branches;
next	1.8;

1.8
date	92.10.23.15.11.32;	author john;	state Exp;
branches;
next	1.7;

1.7
date	92.04.03.15.24.17;	author jkc;	state Exp;
branches;
next	1.6;

1.6
date	91.09.05.08.50.30;	author jkcohen;	state Exp;
branches;
next	1.5;

1.5
date	90.11.15.10.43.28;	author jkc;	state Exp;
branches;
next	1.4;

1.4
date	90.07.16.18.21.50;	author jkc;	state Exp;
branches;
next	1.3;

1.3
date	90.07.16.17.44.04;	author jkc;	state Exp;
branches;
next	1.2;

1.2
date	90.05.25.19.25.45;	author jkc;	state Exp;
branches;
next	1.1;

1.1
date	90.04.17.11.40.50;	author jkc;	state Exp;
branches;
next	;


desc
@take fractional derivative or integral
@


1.29
log
@Reg Beardsley's C99 compliance cexp -> cwp_cexp
@
text
@/* Copyright (c) Colorado School of Mines, 2011.*/
/* All rights reserved.                       */

/* SUFRAC: $Revision: 1.28 $ ; $Date: 2011/11/12 00:09:00 $	*/

#include "su.h"
#include "segy.h"

/*********************** self documentation **********************/
char *sdoc[] = {
"									",
" SUFRAC -- take general (fractional) time derivative or integral of	",
"	    data, plus a phase shift.  Input is CAUSAL time-indexed	",
"	    or depth-indexed data.					",
"									",
" sufrac power= [optional parameters] <indata >outdata 			",
"									",
" Optional parameters:							",
"	power=0		exponent of (-i*omega)	 			",
"			=0  ==> phase shift only			",
"			>0  ==> differentiation				",
"			<0  ==> integration				",
"									",
"	sign=-1			sign in front of i * omega		",
"	dt=(from header)	time sample interval (in seconds)	",
"	phasefac=0		phase shift by phase=phasefac*PI	",
"	verbose=0		=1 for advisory messages		",
"									",
" Examples:								",
"  preprocess to correct 3D data for 2.5D migration			",
"         sufrac < sudata power=.5 sign=1 | ...				",
"  preprocess to correct susynlv, susynvxz, etc. (2D data) for 2D migration",
"         sufrac < sudata phasefac=.25 | ...				",
" The filter is applied in frequency domain.				",
" if dt is not set in header, then dt is mandatory			",
"									",
" Algorithm:								",
"		g(t) = Re[INVFTT{ ( (sign) iw)^power FFT(f)}]		",
" Caveat:								",
" Large amplitude errors will result if the data set has too few points.",
"									",
" Good numerical integration routine needed!				",
" For example, see Gnu Scientific Library.				",
"									",
NULL};

/* Credits:
 *	CWP: Chris Liner, Jack K. Cohen, Dave Hale (pfas)
 *      CWP: Zhenyue Liu and John Stockwell added phase shift option
 *	CENPET: Werner M. Heigl - added well log support
 *
 * Trace header fields accessed: ns, dt, trid, d1
*/
/**************** end self doc ***********************************/


#define	I		cmplx(0.0, 1.0)
#define	PIBY2		0.5 * PI
#define TWOPI		2.0 * PI
#define LOOKFAC		2	/* Look ahead factor for npfao	  */
#define PFA_MAX		720720	/* Largest allowed nfft	          */

segy tr;

int
main(int argc, char **argv)
{
	float power;		/* power of i omega applied to data	*/
	float amp;		/* amplitude associated with the power	*/
	float arg;		/* argument of power 			*/
	float phasefac;		/* phase factor	 			*/
	float phase;		/* phase shift = phasefac*PI		*/
	complex exparg;		/* cwp_cexp(I arg)				*/
	register float *rt;	/* real trace				*/
	register complex *ct;	/* complex transformed trace		*/
	complex *filt;		/* complex power	 		*/
	int nt;			/* number of points on input trace	*/
	size_t ntsize;		/* nt in bytes				*/
	float dt;		/* sample spacing (secs) on input trace	*/
	float omega;		/* circular frequency			*/
	float domega;		/* circular frequency spacing (from dt)	*/
	float sign;		/* sign in front of i*omega default -1	*/
	int nfft;		/* number of points in nfft		*/
        int nf;                 /* number of frequencies (incl Nyq)     */
	float onfft;		/* 1 / nfft				*/
	int verbose;		/* flag to get advisory messages	*/
	size_t nzeros;		/* number of padded zeroes in bytes	*/
	cwp_Bool seismic;	/* is this seismic data?		*/
	
	
	/* Initialize */
	initargs(argc, argv);
	requestdoc(1);


	/* Set parameters */
	if (!getparint("verbose", &verbose))	  verbose  =  0;
	if (!getparfloat("power", &power))	  power    =  0.0;
	if (!getparfloat("sign", &sign))	  sign     = -1.0;
	if (!getparfloat("phasefac", &phasefac))  phasefac =  0.0;
	phase = phasefac * PI;


	/* Get info from first trace */
	if (!gettr(&tr))	err("can't get first trace");
	seismic = ISSEISMIC(tr.trid);
	if (seismic) {
		if (verbose)	warn("input is seismic data, trid=%d",tr.trid);
		dt = ((double) tr.dt)/1000000.0;
	}
	else {
		if (verbose)	warn("input is not seismic data, trid=%d",tr.trid);
		dt = tr.d1;
        }
        if (!dt)	err("dt or d1 field is zero and not getparred");
	nt = tr.ns;
	ntsize = nt * FSIZE;


	/* Set up for fft */
	nfft = npfaro(nt, LOOKFAC * nt);
	if (nfft >= SU_NFLTS || nfft >= PFA_MAX)
		err("Padded nt=%d -- too big", nfft);

        nf = nfft/2 + 1;
        onfft = 1.0 / nfft;
	nzeros = (nfft - nt) * FSIZE;
	domega = TWOPI * onfft / dt;


	/* Allocate fft arrays */
	rt   = ealloc1float(nfft);
	ct   = ealloc1complex(nf);
	filt = ealloc1complex(nf);


	/* Set up args for complex power evaluation */
	arg = sign * PIBY2 * power + phase;
	exparg = cwp_cexp(crmul(I, arg));


	/* Evaluate complex power, put inverse fft scale in */
	{
		register int i;
		for (i = 0 ; i < nf; ++i) {

			omega = i * domega;

			/* kludge to handle omega=0 case for power < 0 */
			if (power < 0 && i == 0) omega = FLT_MAX;

			/* calculate filter */
			amp = pow(omega, power) * onfft;

			filt[i] = crmul(exparg, amp);
		}
	}
		

	/* Loop over traces */
	do {
		/* Load trace into rt (zero-padded) */
		memcpy( (void *) rt, (const void *) tr.data, ntsize);
		memset((void *) (rt + nt),0, nzeros);

		/* FFT */
		pfarc(1, nfft, rt, ct);


		/* Apply filter */
		{ register int i;
		for (i = 0; i < nf; ++i)  ct[i] = cmul(ct[i], filt[i]);
		}

		/* Invert */
		pfacr(-1, nfft, ct, rt);


		/* Load traces back in, recall filter had nfft factor */
		{ register int i;
		for (i = 0; i < nt; ++i)  tr.data[i] = rt[i];
		}


		puttr(&tr);

	} while (gettr(&tr));


	return(CWP_Exit());
}
@


1.28
log
@copyright
@
text
@d4 1
a4 1
/* SUFRAC: $Revision: 1.27 $ ; $Date: 2006/11/07 22:58:42 $	*/
d73 1
a73 1
	complex exparg;		/* cexp(I arg)				*/
d139 1
a139 1
	exparg = cexp(crmul(I, arg));
@


1.27
log
@changed    memset( .., (int) '\0',...) to memset( .., 0,..) as per suggestion of Marion Zhu and Reg Beardsley
@
text
@d1 4
a4 1
/* SUFRAC: $Revision: 1.26 $ ; $Date: 2006/03/09 20:00:59 $	*/
@


1.26
log
@Werner Heigel's fixes
@
text
@d1 1
a1 1
/* SUFRAC: $Revision: 1.25 $ ; $Date: 2004/12/23 23:34:13 $	*/
d161 1
a161 1
		memset((void *) (rt + nt), (int) '\0', nzeros);
@


1.25
log
@changed "err" to "warn" for nonseismic data
@
text
@d1 1
a1 1
/* SUFRAC: $Revision: 1.24 $ ; $Date: 2003/06/09 16:17:07 $	*/
d10 2
a11 1
"	    data, plus a phase shift.  Input is TIME DOMAIN data.	",
d24 1
d39 3
d47 1
d49 1
a49 1
 * Trace header fields accessed: ns, dt, trid
d83 1
d94 1
d104 9
a112 6

	if (!seismic)
		warn("input is not seismic data, trid=%d", tr.trid);

	if (!getparfloat("dt", &dt))	dt = ((double) tr.dt)/1000000.0;
	if (!dt)	err("dt field is zero and not getparred");
@


1.24
log
@9 June 2003
@
text
@d1 1
a1 1
/* SUFRAC: $Revision: 1.23 $ ; $Date: 1997/07/28 22:36:46 $	*/
d98 1
a98 1
		err("input is not seismic data, trid=%d", tr.trid);
@


1.23
log
@changes suggested by Stew Levin to silence SGI compiler warnings, etc
@
text
@d1 1
a1 1
/* SUFRAC: $Revision: 1.22 $ ; $Date: 1996/07/18 18:47:29 $	*/
d176 1
a176 1
	return EXIT_SUCCESS;
@


1.22
log
@Discovered that Zhen's "kludge" to avoid dividing by zero for
negative powers didn't make any sense.  Now replace the zero
omega by a LARGE number, so that the DC is removed from the
negative power filter.
@
text
@d1 1
a1 1
/* SUFRAC: $Revision: 1.21 $ ; $Date: 1996/07/17 22:29:04 $	*/
d69 1
a69 1
	int ntsize;		/* nt in bytes				*/
d77 1
a77 1
	int nzeros;		/* number of padded zeroes in bytes	*/
d108 1
a108 1
	if (nfft >= MIN(SU_NFLTS, PFA_MAX))
@


1.21
log
@Cosmetics
@
text
@d1 1
a1 1
/* SUFRAC: $Revision: 1.20 $ ; $Date: 1996/07/17 20:32:32 $	*/
a52 1
#define EPS		.0000001/* a small number for omega->0    */
d56 1
a70 1
	float df;		/* frequency spacing (from dt)		*/
d72 1
d87 3
a89 3
	if (!getparfloat("power", &power))	  power =  0.0;
	if (!getparfloat("sign", &sign))	  sign  = -1.0;
	if (!getparfloat("phasefac", &phasefac))  phasefac  = 0;
d114 1
a114 1
	df = onfft / dt;
d132 2
a133 1
			register float eps=EPS;	
d136 1
a136 5
			if (power < 0 || i == 0 ) {
				omega = eps * TWOPI * df;
			} else {
				omega = TWOPI * i * df;
			}
@


1.20
log
@Took out old alg. statement from comments.
@
text
@d1 1
a1 1
/* SUFRAC: $Revision: 1.19 $ ; $Date: 1996/01/29 17:05:08 $	*/
d87 4
a90 4
	if (!getparfloat("power", &power))	power =  0.0;
	if (!getparfloat("sign", &sign))	sign  = -1.0;
	if (!getparfloat("phasefac", &phasefac))	phasefac  = 0;
		phase = phasefac * PI;
@


1.19
log
@Say sampling INTERVAL instead of rate to make Ken happy.
@
text
@d1 1
a1 1
/* SUFRAC: $Revision: 1.18 $ ; $Date: 1996/01/25 20:00:15 $	*/
a41 3
 *
 * Algorithm:
 *	g(t) = Re[INVFTT{ (-iw)^power FFT(f)}]
@


1.18
log
@Deal with specifying header fields accessed/modified in sudoc.
@
text
@d1 1
a1 1
/* SUFRAC: $Revision: 1.17 $ ; $Date: 1995/08/02 19:53:48 $	*/
d21 1
a21 1
"	dt=(from header)	time sample rate (in seconds)		",
@


1.17
log
@Cast the integers tr.dt and/or tr.delrt and/or clones to double before
division with floating constant (which is implicitly double
precision).  Casting is needed to make some compilers happy and if we
cast to float then there will be an extra conversion to double because
of the floating constant (casting to float and writing 1000000.0F
would save a conversion, but most people find that F yucky and
efficiency is not an issue here).
Motivated by examples from Stew Levin.
@
text
@d1 1
a1 1
/* SUFRAC: $Revision: 1.16 $ ; $Date: 1994/08/25 14:59:24 $	*/
d45 3
a47 1
 */
@


1.16
log
@Removed copyright statement from codes that had it.
Moved self-doc line for sudoc.
@
text
@d1 1
a1 1
/* SUFRAC: $Revision: 1.15 $ ; $Date: 94/03/30 13:53:41 $	*/
d101 1
a101 1
	if (!getparfloat("dt", &dt))	dt = (float) tr.dt/1000000.0;
@


1.15
log
@added ISSEISMIC macro
@
text
@d1 1
a1 1
/* SUFRAC: $Revision: 1.14 $ ; $Date: 94/03/04 14:49:15 $	*/
a2 13
/*----------------------------------------------------------------------
 * Copyright (c) Colorado School of Mines, 1990.
 * All rights reserved.
 *
 * This code is part of SU.  SU stands for Seismic Unix, a processing line
 * developed at the Colorado School of Mines, partially based on Stanford
 * Exploration Project (SEP) software.  Inquiries should be addressed to:
 *
 *  Jack K. Cohen, Center for Wave Phenomena, Colorado School of Mines,
 *  Golden, CO 80401  (jkc@@dix.mines.colorado)
 *----------------------------------------------------------------------
 */

a37 1
/**************** end self doc ***********************************/
d46 1
d54 1
a54 1
#define EPS		.0000001	/* a small number for omega->0    */
@


1.14
log
@*** empty log message ***
@
text
@d1 1
a1 1
/* SUFRAC: $Revision: 1.13 $ ; $Date: 94/03/04 14:43:41 $	*/
d109 2
a110 2
	seismic = (tr.trid == 0 || tr.trid == TREAL ||
		   tr.trid == TDEAD || tr.trid == TDUMMY);
@


1.13
log
@added phase shift capability, fixed failure for negative powers
@
text
@d1 1
a1 1
/* SUFRAC: $Revision: 1.12 $ ; $Date: 93/12/14 13:41:41 $	*/
d35 1
a35 1
"	phasefac=0		phase shift with phasefac*PI		",
d48 2
a49 2
"      Truncation errors caused by small data sets may cause large amplitude",
" errors.								",
d55 1
@


1.12
log
@Enlarged notion of seismic trace to include DEAD, etc.
@
text
@d1 1
a1 1
/* SUFRAC: $Revision: 1.11 $ ; $Date: 93/11/24 15:31:21 $	*/
d21 29
a49 19
"								",
" SUFRAC -- take general (fractional) time derivative 		",
"	    or integral of data.  Input is TIME DOMAIN data.	",
"								",
" sufrac power= [optional parameters] <indata >outdata 		",
"								",
" Required parameters:						",
"	power=		exponent of (-i*omega)	 		",
"			=0  ==> costly do-nothing		",
"			>0  ==> differentiation			",
"			<0  ==> integration			",
"	if dt is not set in header, then dt is mandatory	",
"								",
" Optional parameters:						",
"	sign=-1			sign in front of i * omega	",
"	dt = (from header)	time sample rate (in seconds)	",
"								",
" The filter is applied in frequency domain.			",
"								",
d66 1
d75 2
d102 2
d137 1
a137 1
	arg = sign * PIBY2 * power;
d144 11
a154 2
		for (i = 0; i < nf; ++i) {
			omega = TWOPI * i * df;
d156 1
a175 1

@


1.11
log
@changed bzero to memset
@
text
@d1 1
a1 1
/* SUFRAC: $Revision: 1.10 $ ; $Date: 93/11/24 15:09:46 $	*/
d78 1
d93 3
a95 1
	if (tr.trid && tr.trid != TREAL) {
a96 1
	}
@


1.10
log
@explicit cast added
@
text
@d1 1
a1 1
/* SUFRAC: $Revision: 1.9 $ ; $Date: 92/10/23 15:15:20 $	*/
d139 1
a139 1
		bzero(rt + nt, nzeros);
@


1.9
log
@cosmetic change in selfdoc
@
text
@d1 1
a1 1
/* SUFRAC: $Revision: 1.8 $ ; $Date: 92/10/23 15:11:32 $	*/
d96 1
a96 1
	if (!getparfloat("dt", &dt))	dt = tr.dt/1000000.0;
d138 1
a138 1
		memcpy(rt, tr.data, ntsize);
@


1.8
log
@new selfdoc installed
@
text
@d1 1
a1 1
/* SUFRAC: $Revision: 1.7 $ ; $Date: 92/04/03 15:24:17 $	*/
d20 1
a20 1
"char *sdoc[] = {
@


1.7
log
@Filling the filter loop went to nfft instead of nf. Also
updated some variable names per other programs.
@
text
@d1 1
a1 1
/* SUFRAC: $Revision: 1.6 $ ; $Date: 91/09/05 08:50:30 $	*/
d20 21
a40 21
String sdoc = "\
								\n\
SUFRAC -- take general (fractional) time derivative 		\n\
	    or integral of data.  Input is TIME DOMAIN data.	\n\
								\n\
sufrac power= [optional parameters] <indata >outdata 		\n\
								\n\
Required parameters:						\n\
	power=		exponent of (-i*omega)	 		\n\
			=0  ==> costly do-nothing		\n\
			>0  ==> differentiation			\n\
			<0  ==> integration			\n\
	if dt is not set in header, then dt is mandatory	\n\
								\n\
Optional parameters:						\n\
	sign=-1			sign in front of i * omega	\n\
	dt = (from header)	time sample rate (in seconds)	\n\
								\n\
The filter is applied in frequency domain.			\n\
								\n\
";
a42 1

d44 1
a44 1
 *	CWP: Chris, Jack, Dave (pfas)
d82 1
a82 1
	askdoc(1);
@


1.6
log
@string -> String and so forth
@
text
@d1 1
a1 1
/* SUFRAC: $Revision: 1.5 $ ; $Date: 90/11/15 10:43:28 $	*/
d53 2
a54 3
#define	piby2		1.57079632679490
#define pi		3.14159265358979
#define twopi		6.28318530717959
d76 1
a76 2
	int nfby2;		/* nfft/2				*/
	int nfby2p1;		/* nfft/2 + 1				*/
d108 2
a109 3
	nfby2 = nfft / 2;
	nfby2p1 = nfby2 + 1;
	onfft = 1.0 / (float) nfft;
d116 2
a117 2
	ct   = ealloc1complex(nfby2p1);
	filt = ealloc1complex(nfby2p1);
d121 1
a121 1
	arg = sign * piby2 * power;
d128 2
a129 2
		for (i = 0; i < nfft; ++i) {
			omega = twopi * i * df;
d148 1
a148 1
		for (i = 0; i < nfby2p1; ++i)  ct[i] = cmul(ct[i], filt[i]);
@


1.5
log
@bcopy -> memcpy
@
text
@d1 1
a1 1
/* SUFRAC: $Revision: 1.4 $ ; $Date: 90/07/16 18:21:50 $	*/
d20 1
a20 1
string sdoc = "\
@


1.4
log
@Tweaks
@
text
@d1 1
a1 1
/* SUFRAC: $Revision: 1.3 $ ; $Date: 90/07/16 17:44:04 $	*/
d142 1
a142 1
		bcopy(tr.data, rt, ntsize);
@


1.3
log
@Converted from fftmr to pfa routines.
@
text
@d1 1
a1 1
/* SUFRAC: $Revision: 1.2 $ ; $Date: 90/05/25 19:25:45 $	*/
d52 1
d66 1
a66 2
	complex carg;		/* ... times i	 			*/
	complex exparg;		/* cexp(carg)				*/
d72 1
a72 1
	float dt;		/* sample rate in secs on input trace	*/
a76 1
	int nfftsize;		/* nfft in bytes			*/
a80 3
	register int i;		/* counter				*/
	complex ii;		/* complex unit, i.e., cmplx(0,1)	*/

d113 1
a113 2
	nfftsize = nfft * FSIZE;
	nzeros = nfftsize - ntsize;
a114 1
	ii = cmplx(0.0, 1.0);
d125 1
a125 2
	carg = crmul(ii, arg);
	exparg = cexp(carg);
d128 8
a135 5
	/* Evaluate complex power */
	for (i = 0; i < nfft; ++i) {
		omega = twopi * i * df;
		amp = pow(omega, power);
		filt[i] = crmul(exparg, amp);
d150 1
d152 1
d160 3
a162 1
		for (i = 0; i < nt; ++i)  tr.data[i] = rt[i] * onfft;
@


1.2
log
@vec --> ealloc1float, etc.
@
text
@d1 1
a1 1
/* SUFRAC: $Revision: 1.1 $ ; $Date: 90/04/17 11:40:50 $	*/
d45 1
a45 1
 *	CWP: Chris, Jack
a51 1
#define	FACMAX		12		/* For FFTPACK	*/
d55 2
d64 6
a69 5
	float arg;		/* argument of power (omega > 0)	*/
	float cosarg;		/* cos(arg) 				*/
	float sinarg;		/* sin(arg) 				*/
	float *re;		/* real part of complex power 		*/
	float *im;		/* imaginary part of complex power	*/
d79 1
a80 2
	int nfac;		/* number of factors of nfft		*/
	int facs[FACMAX];	/* contains factors of nfft		*/
d83 1
a83 8
	float *hcos;		/* hold cosines for fft			*/
	float *hsin;		/* hold sines for fft			*/
	register float *xr;	/* real part of trace			*/
	register float *xi;	/* imaginary part of trace		*/
	register float xrold;	/* temp for real part			*/
	register float xiold;	/* temp for imaginary part 		*/
	float *wr;		/* work area for fft			*/
	float *wi;		/* work area for fft			*/
d93 2
a94 2
	if (!fgetpar("power", &power))		power =  0.0;
	if (!fgetpar("sign", &sign))		sign  = -1.0;
d103 1
a103 1
	if (!fgetpar("dt", &dt))	dt = tr.dt/1000000.0;
d110 2
a111 2
	fftfac(&nt, &nfft, &nfac, facs);
	if (nfft > SU_NFLTS) {
d113 1
a113 1
	}
d115 1
d120 1
d124 3
a126 3
	hcos = ealloc1float(nfft);	hsin = ealloc1float(nfft);
	xr   = ealloc1float(nfft);	xi   = ealloc1float(nfft);
	wr   = ealloc1float(nfft);	wi   = ealloc1float(nfft);
a128 8
	/* Set up tables */
	ffttab(&nfft, hcos, hsin);


	/* Set up arrays for real and imag part of multiplier */
	re = ealloc1float(nfft);	im = ealloc1float(nfft);


d131 2
a132 2
	cosarg = cos(arg);
	sinarg = sin(arg);
d135 2
a136 3
	/* Evaluate complex power, n/2 gets done twice for n even */
	re[0] = 0.0;	im[0] = 0.0;
	for (i = 1; i <= nfby2; ++i) {
d138 2
a139 5
		amp = pow((double) omega, (double) power);
		re[i] = amp * cosarg;
		im[i] = amp * sinarg;
		re[nfft - i] =  re[i];
		im[nfft - i] = -im[i];	/* im[n/2] = 0 for n even */
d145 3
a147 4
		/* Load traces into xr, xi (zero-padded) */
		bcopy(tr.data, xr, ntsize);
		bzero(xr + nt, nzeros);
		bzero(xi, nfftsize);
d149 2
a150 2
		/* Fft */
		fft(xr, xi, wr, wi, &nfft, facs, &nfac, hcos, hsin);
a151 7
		/* Multiply by factor, conjugate and scale for inverse */
		for (i = 0; i < nfft; ++i) {
			xrold = xr[i];
			xiold = xi[i];
			xr[i] =  (xrold*re[i] - xiold*im[i]) * onfft;
			xi[i] = -(xrold*im[i] + xiold*re[i]) * onfft;
		}
d153 4
d158 1
a158 1
		fft(xr, xi, wr, wi, &nfft, facs, &nfac, hcos, hsin);
d160 4
a163 2
		/* Take real part */
		bcopy(xr, tr.data, ntsize);
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/* SUFRAC: $Revision: 1.11 $ ; $Date: 89/09/20 19:35:32 $	*/
d12 1
a12 1
 *  Golden, CO 80401  (isis!csm9a!jkcohen)
d28 1
a28 1
	power =		exponent of (-i*omega)	 		\n\
d35 2
a36 2
	sign = -1	sign in front of i * omega		\n\
	dt    = (from header)	time sample rate (in seconds)	\n\
a48 2
 *
 *
a51 7
/* Embed Revision Control System identifier strings */
static string progid=
	"   $Source: /src/su/src/RCS/sufrac.c,v $";
static string revid =
	"   $Revision: 1.11 $ ; $Date: 89/09/20 19:35:32 $";


d59 1
a59 3

main(argc, argv)
int argc; char **argv;
a94 5
	if (!igetpar("ID", &ID))	ID = 0;
	if (ID) {
		(void) fprintf(stderr, "%s\n", progid);
		(void) fprintf(stderr, "%s\n", revid);
	}
d128 3
a130 3
	hcos = vec(nfft);	hsin = vec(nfft);
	xr   = vec(nfft);	xi   = vec(nfft);
	wr   = vec(nfft);	wi   = vec(nfft);
d138 1
a138 1
	re = vec(nfft);	im = vec(nfft);
@
