head	1.23;
access;
symbols;
locks; strict;
comment	@ * @;


1.23
date	2011.11.12.00.09.00;	author john;	state Exp;
branches;
next	1.22;

1.22
date	2006.11.07.22.58.42;	author john;	state Exp;
branches;
next	1.21;

1.21
date	2006.04.13.17.26.28;	author john;	state Exp;
branches;
next	1.20;

1.20
date	2006.04.13.17.23.33;	author john;	state Exp;
branches;
next	1.19;

1.19
date	2006.04.13.17.20.46;	author john;	state Exp;
branches;
next	1.18;

1.18
date	2006.03.09.19.59.37;	author john;	state Exp;
branches;
next	1.17;

1.17
date	2004.12.23.23.34.46;	author john;	state Exp;
branches;
next	1.16;

1.16
date	2003.06.09.16.17.07;	author john;	state Exp;
branches;
next	1.15;

1.15
date	98.08.24.20.10.26;	author john;	state Exp;
branches;
next	1.14;

1.14
date	97.07.28.22.36.46;	author john;	state Exp;
branches;
next	1.13;

1.13
date	96.09.13.16.48.05;	author john;	state Exp;
branches;
next	1.12;

1.12
date	96.02.09.21.41.20;	author jkc;	state Exp;
branches;
next	1.11;

1.11
date	96.01.29.17.04.22;	author jkc;	state Exp;
branches;
next	1.10;

1.10
date	96.01.25.19.52.31;	author jkc;	state Exp;
branches;
next	1.9;

1.9
date	95.08.02.19.42.37;	author jkc;	state Exp;
branches;
next	1.7;

1.7
date	94.08.25.14.59.20;	author jkc;	state Exp;
branches;
next	1.6;

1.6
date	94.03.30.13.53.39;	author john;	state Exp;
branches;
next	1.5;

1.5
date	93.12.14.13.41.39;	author jkc;	state Exp;
branches;
next	1.4;

1.4
date	93.11.24.15.27.53;	author john;	state Exp;
branches;
next	1.3;

1.3
date	93.11.17.09.05.23;	author john;	state Exp;
branches;
next	1.2;

1.2
date	92.10.22.14.15.45;	author john;	state Exp;
branches;
next	1.1;

1.1
date	92.04.15.11.05.55;	author john;	state Exp;
branches;
next	;


desc
@Sufilter--- and extension of suband
written by J. Stockwell
@


1.23
log
@copyright
@
text
@/* Copyright (c) Colorado School of Mines, 2011.*/
/* All rights reserved.                       */

/* SUFILTER: $Revision: 1.22 $ ; $Date: 2006/11/07 22:58:42 $        */


#include "su.h"
#include "segy.h"

/*********************** self documentation **********************/
char *sdoc[] = {
"									",
" SUFILTER - applies a zero-phase, sine-squared tapered filter		",
"									",
" sufilter <stdin >stdout [optional parameters]         		",
"									",
" Required parameters:                                         		",
"       if dt is not set in header, then dt is mandatory        	",
"									",
" Optional parameters:							",
"       f=f1,f2,...             array of filter frequencies(HZ) 	",
"       amps=a1,a2,...          array of filter amplitudes		",
"       dt = (from header)      time sampling interval (sec)        	",
"	verbose=0		=1 for advisory messages		",
"									",
" Defaults:f=.10*(nyquist),.15*(nyquist),.45*(nyquist),.50*(nyquist)	",
"                        (nyquist calculated internally)		",
"          amps=0.,1.,...,1.,0.  trapezoid-like bandpass filter		",
"									",
" Examples of filters:							",
" Bandpass:   sufilter <data f=10,20,40,50 | ...			",
" Bandreject: sufilter <data f=10,20,30,40 amps=1.,0.,0.,1. | ..	",
" Lowpass:    sufilter <data f=10,20,40,50 amps=1.,1.,0.,0. | ...	",
" Highpass:   sufilter <data f=10,20,40,50 amps=0.,0.,1.,1. | ...	",
" Notch:      sufilter <data f=10,12.5,35,50,60 amps=1.,.5,0.,.5,1. |..	",
NULL};

/* Credits:
 *      CWP: John Stockwell, Jack Cohen
 *	CENPET: Werner M. Heigl - added well log support
 *
 * Possible optimization: Do assignments instead of crmuls where
 * filter is 0.0.
 *
 * Trace header fields accessed: ns, dt, d1
 */
/**************** end self doc ***********************************/

/* Prototype of function used internally */
void polygonalFilter(float *f, float *amps,
			int npoly, int nfft, float dt, float *filter);

#define PIBY2   1.57079632679490
#define FRAC0   0.10    /* Ratio of default f1 to Nyquist */
#define FRAC1   0.15    /* Ratio of default f2 to Nyquist */
#define FRAC2   0.45    /* Ratio of default f3 to Nyquist */
#define FRAC3   0.50    /* Ratio of default f4 to Nyquist */
#define LOOKFAC 2       /* Look ahead factor for npfao    */
#define PFA_MAX 720720  /* Largest allowed nfft           */


segy tr;

int
main(int argc, char **argv)
{
        register float *rt;     /* real trace                           */
        register complex *ct;   /* complex transformed trace            */
        float *filter;          /* filter array                         */
        float *f;               /* array of filter frequencies		*/
        int npoly;              /* .... sizes of f and intfr	        */
        float *amps;            /* array of amplitude values		*/
        int namps;              /* .... size of amps                    */
        int icount,ifs,iamps;   /* loop counting variables              */
        float dt;               /* sample spacing                       */
        float nyq;              /* nyquist frequency                    */
        int nt;                 /* number of points on input trace      */
        int nfft;               /* number of points for fft trace       */
        int nf;                 /* number of frequencies (incl Nyq)     */
	int verbose;		/* flag to get advisory messages	*/
	cwp_Bool seismic;	/* is this seismic data?		*/

        
        /* Initialize */
        initargs(argc, argv);
        requestdoc(1);


        /* Get info from first trace */ 
	if (!getparint("verbose", &verbose))	verbose=0;
        if (!gettr(&tr))  err("can't get first trace");
	seismic = ISSEISMIC(tr.trid);
	if (seismic) {
		if (verbose)	warn("input is seismic data, trid=%d",tr.trid);
		dt = ((double) tr.dt)/1000000.0;
	}
	else {
		if (verbose) warn("input is not seismic data, trid=%d",tr.trid);

		dt = tr.d1;

        }

	/* error trapping so that the user can have a default value of dt */
	if (!(dt || getparfloat("dt", &dt))) {
		dt = .004;
		if (verbose) {
			warn("neither dt nor d1 are set, nor is dt getparred!");
			warn("assuming .004 sec sampling!");
		}
	}

        nt = tr.ns;
        nyq = 0.5/dt;


        /* Set up FFT parameters */
        nfft = npfaro(nt, LOOKFAC * nt);
        if (nfft >= SU_NFLTS || nfft >= PFA_MAX)
                err("Padded nt=%d -- too big", nfft);

        nf = nfft/2 + 1;

        /* Get frequencies that define the filter */
        if ((npoly = countparval("f"))!=0) {
                f = ealloc1float(npoly);
                getparfloat("f",f);
        } else {
                npoly = 4;
                f = ealloc1float(npoly);

                f[0] = FRAC0 * nyq;
                f[1] = FRAC1 * nyq;
                f[2] = FRAC2 * nyq;
                f[3] = FRAC3 * nyq;
        }

	/* Check f values */
	if(npoly < 2) warn("Only %d value defining filter",npoly);
        for(ifs=0; ifs < npoly-1; ++ifs)
		if(f[ifs] < 0.0 || f[ifs] > f[ifs+1])
                                err("Bad filter parameters");
	
	/* Get filter amplitude values*/
        if ((namps = countparval("amps"))!=0) {
                amps = ealloc1float(namps);
                getparfloat("amps",amps);
        } else {
                namps = npoly;
                amps = ealloc1float(namps);

		/* default is a trapezoidal bandpass filter */
		for(iamps=0; iamps<namps; ++iamps)
               		amps[iamps]=1.;
		
		amps[0]=0.; amps[namps-1]=0.;
        }
	if (!(namps==npoly)) 
		err("number of f values must = number of amps values");
        
        /* Check amps values */
        for(iamps = 0, icount=0; iamps < namps ; ++iamps) {
		if( amps[iamps] > 0. ) ++icount;
                if( amps[iamps] < 0.) err("amp values must be positive");
        }
        if (icount==0) err("All amps values are zero");
        for(iamps = 0, icount=0; iamps < namps-1 ; ++iamps) {
			if(!(amps[iamps]==amps[iamps+1])) ++icount;
	}
        if (icount==0) warn("All amps values are the same");


        /* Allocate fft arrays */
        rt   = ealloc1float(nfft);
        ct   = ealloc1complex(nf);
        filter = ealloc1float(nf);

	/* Build the polygonal filter filter[]*/
	polygonalFilter(f,amps,npoly,nfft,dt,filter);

        /* Main loop over traces */
        do {
                register int i;

                /* Load trace into rt (zero-padded) */
                memcpy((void *) rt, (const void *) tr.data, nt*FSIZE);
                memset((void *) (rt + nt), 0 , (nfft-nt)*FSIZE);

                /* FFT, filter, inverse FFT */
                pfarc(1, nfft, rt, ct);
                for (i = 0; i < nf; ++i)  ct[i] = crmul(ct[i], filter[i]);
                pfacr(-1, nfft, ct, rt);

                /* Load traces back in, recall filter had nfft factor */
                for (i = 0; i < nt; ++i)  tr.data[i] = rt[i];

                puttr(&tr);
        } while (gettr(&tr));

        return(CWP_Exit());
}


void polygonalFilter(float *f, float *amps, int npoly,
				int nfft, float dt, float *filter)
/*************************************************************************
polygonalFilter -- polygonal filter with sin^2 tapering
**************************************************************************
Input:
f		array[npoly] of frequencies defining the filter
amps		array[npoly] of amplitude values
npoly		size of input f and amps arrays
dt		time sampling interval
nfft		number of points in the fft

Output:
filter		array[nfft] filter values
**************************************************************************
Notes: Filter is to be applied in the frequency domain
**************************************************************************
Author:  CWP: John Stockwell   1992
*************************************************************************/
#define PIBY2   1.57079632679490
{
        int *intfr;             /* .... integerizations of f		*/
        int icount,ifs;		/* loop counting variables              */
	int taper=0;		/* flag counter				*/
        int nf;                 /* number of frequencies (incl Nyq)     */
        int nfm1;               /* nf-1                                 */
        float onfft;            /* reciprocal of nfft                   */
        float df;               /* frequency spacing (from dt)          */

        
	intfr=alloc1int(npoly);

        nf = nfft/2 + 1;
        nfm1 = nf - 1;
        onfft = 1.0 / nfft;

        /* Compute array of integerized frequencies that define the filter*/
        df = onfft / dt;
        for(ifs=0; ifs < npoly ; ++ifs) {
                intfr[ifs] = NINT(f[ifs]/df);
                if (intfr[ifs] > nfm1) intfr[ifs] = nfm1;
        }

	/* Build filter, with scale, and taper specified by amps[] values*/
	/* Do low frequency end first*/
	for(icount=0; icount < intfr[0] ; ++icount) 
		filter[icount] = amps[0] * onfft;

	/* now do the middle frequencies */
	for(ifs=0 ; ifs<npoly-1 ; ++ifs){
	   if(amps[ifs] < amps[ifs+1]) {	
		++taper;
		for(icount=intfr[ifs]; icount<=intfr[ifs+1]; ++icount) {
		    float c = PIBY2 / (intfr[ifs+1] - intfr[ifs] + 2);
		    float s = sin(c*(icount - intfr[ifs] + 1));
		    float adiff = amps[ifs+1] - amps[ifs];
		    filter[icount] = (amps[ifs] + adiff*s*s) * onfft;
		}
	   } else if (amps[ifs] > amps[ifs+1]) {	
		++taper;
		for(icount=intfr[ifs]; icount<=intfr[ifs+1]; ++icount) {
			   float c = PIBY2 / (intfr[ifs+1] - intfr[ifs] + 2);
                	   float s = sin(c*(intfr[ifs+1] - icount + 1));
			   float adiff = amps[ifs] - amps[ifs+1];
                	   filter[icount] = (amps[ifs+1] + adiff*s*s) * onfft;
		  }
	   } else 
		if(!(taper)){
		for(icount=intfr[ifs]; icount <= intfr[ifs+1]; ++icount)
		   	   filter[icount] = amps[ifs] * onfft;
		} else {
		for(icount=intfr[ifs]+1; icount <= intfr[ifs+1]; ++icount)
		   	   filter[icount] = amps[ifs] * onfft;
		}
	}

	/* finally do the high frequency end */
	for(icount=intfr[npoly-1]+1; icount<nf; ++icount){
		filter[icount] = amps[npoly-1] * onfft;
	}

}
@


1.22
log
@changed    memset( .., (int) '\0',...) to memset( .., 0,..) as per suggestion of Marion Zhu and Reg Beardsley
@
text
@d1 4
a4 1
/* SUFILTER: $Revision: 1.21 $ ; $Date: 2006/04/13 17:26:28 $        */
@


1.21
log
@ok. I think I got it this time.
@
text
@d1 1
a1 1
/* SUFILTER: $Revision: 1.20 $ ; $Date: 2006/04/13 17:23:33 $        */
d184 1
a184 1
                memset((void *) (rt + nt), (int) '\0' , (nfft-nt)*FSIZE);
@


1.20
log
@*** empty log message ***
@
text
@d1 1
a1 1
/* SUFILTER: $Revision: 1.19 $ ; $Date: 2006/04/13 17:20:46 $        */
d95 2
a96 1
		if (verbose)	warn("input is not seismic data, trid=%d",tr.trid);
d102 6
a107 4
	if (!(dt && getparfloat("dt", &dt))) {
		dt = .004
		warn("neither dt nor d1 are set, nor is dt getparred!");
		warn("assuming .004 sec sampling!");
@


1.19
log
@small change to allow user to getpar dt
@
text
@d1 1
a1 1
/* SUFILTER: $Revision: 1.18 $ ; $Date: 2006/03/09 19:59:37 $        */
d100 1
a100 1
	/* error trapping so that 
@


1.18
log
@Werner Heigel's fixes
@
text
@d1 1
a1 1
/* SUFILTER: $Revision: 1.17 $ ; $Date: 2004/12/23 23:34:46 $        */
d97 1
d99 8
a106 1
        if (!dt)	err("dt or d1 field is zero and not getparred");
@


1.17
log
@changed err to warn for nonseismic data
@
text
@d1 1
a1 1
/* SUFILTER: $Revision: 1.16 $ ; $Date: 2003/06/09 16:17:07 $        */
d21 1
d37 1
d42 1
a42 1
 * Trace header fields accessed: ns, dt
d77 1
d87 1
d90 9
a98 3
		
	if (!seismic)
		warn("input is not seismic data, trid=%d", tr.trid);
a99 2
	if (!getparfloat("dt", &dt))	dt = ((double) tr.dt)/1000000.0;
        if (!dt) err("dt field is zero and not getparred");
@


1.16
log
@9 June 2003
@
text
@d1 1
a1 1
/* SUFILTER: $Revision: 1.15 $ ; $Date: 1998/08/24 20:10:26 $        */
d88 1
a88 1
		err("input is not seismic data, trid=%d", tr.trid);
@


1.15
log
@fixed bug with non 0,1 values for amps.
@
text
@d1 1
a1 1
/* SUFILTER: $Revision: 1.14 $ ; $Date: 1997/07/28 22:36:46 $        */
d178 1
a178 1
        return EXIT_SUCCESS;
@


1.14
log
@changes suggested by Stew Levin to silence SGI compiler warnings, etc
@
text
@d1 1
a1 1
/* SUFILTER: $Revision: 1.13 $ ; $Date: 1996/09/13 16:48:05 $        */
d141 1
a141 1
		if( amps[iamps] > 0. ) icount+=amps[iamps];
@


1.13
log
@fixed -Wall complaints
@
text
@d1 1
a1 1
/* SUFILTER: $Revision: 1.12 $ ; $Date: 1996/02/09 21:41:20 $        */
a65 1
        int *intfr;             /* .... integerizations of f		*/
a74 1
        float onfft;            /* reciprocal of nfft                   */
d97 1
a97 1
        if (nfft >= MIN(SU_NFLTS, PFA_MAX))
a100 1
        onfft = 1.0 / nfft;
a104 1
                intfr = ealloc1int(npoly);
a108 1
                intfr = ealloc1int(npoly);
@


1.12
log
@Heo Seung <metal@@min01.snu.ac.kr>:
-->		icount+=amps[iamps];
I think that line must be changed like below:
-->		if( amps[iamps] > 0. ) icount++;
@
text
@d1 1
a1 1
/* SUFILTER: $Revision: 1.11 $ ; $Date: 1996/01/29 17:04:22 $        */
d59 1
a74 1
	int taper=0;		/* flag counter				*/
a76 1
        float df;               /* frequency spacing (from dt)          */
d209 1
a209 3
        int icount,ifs,iamps;   /* loop counting variables              */
        float nyq;              /* nyquist frequency                    */
        int nt;                 /* number of points on input trace      */
@


1.11
log
@Say sampling INTERVAL instead of rate to make Ken happy.
@
text
@d1 1
a1 1
/* SUFILTER: $Revision: 1.10 $ ; $Date: 1996/01/25 19:52:31 $        */
d147 1
a147 1
		icount+=amps[iamps];
@


1.10
log
@Deal with specifying header fields accessed/modified in sudoc.
Cosmetics.
@
text
@d1 1
a1 1
/* SUFILTER: $Revision: 1.9 $ ; $Date: 1995/08/02 19:42:37 $        */
d20 1
a20 1
"       dt = (from header)      time sampling rate (sec)        	",
@


1.9
log
@Cast the integers tr.dt and/or tr.delrt and/or clones to double before
division with floating constant (which is implicitly double
precision).  Casting is needed to make some compilers happy and if we
cast to float then there will be an extra conversion to double because
of the floating constant (casting to float and writing 1000000.0F
would save a conversion, but most people find that F yucky and
efficiency is not an issue here).
Motivated by examples from Stew Levin.
@
text
@d1 1
a1 1
/* SUFILTER: $Revision: 1.8 $ ; $Date: 1994/09/30 12:03:08 $        */
d39 2
d124 1
a124 1
        for(ifs=0; ifs < npoly-1; ifs++)
d137 1
a137 1
		for(iamps=0; iamps<namps; iamps++)
d146 1
a146 1
        for(iamps = 0, icount=0; iamps < namps ; iamps++) {
d151 2
a152 2
        for(iamps = 0, icount=0; iamps < namps-1 ; iamps++) {
			if(!(amps[iamps]==amps[iamps+1])) icount++;
d228 1
a228 1
        for(ifs=0; ifs < npoly ; ifs++) {
d235 1
a235 1
	for(icount=0; icount < intfr[0] ; icount++) 
d239 1
a239 1
	for(ifs=0 ; ifs<npoly-1 ; ifs++){
d241 2
a242 2
		taper++;
		for(icount=intfr[ifs]; icount<=intfr[ifs+1]; icount++) {
d249 2
a250 2
		taper++;
		for(icount=intfr[ifs]; icount<=intfr[ifs+1]; icount++) {
d258 1
a258 1
		for(icount=intfr[ifs]; icount <= intfr[ifs+1]; icount++)
d261 1
a261 1
		for(icount=intfr[ifs]+1; icount <= intfr[ifs+1]; icount++)
d267 1
a267 1
	for(icount=intfr[npoly-1]+1; icount<nf; icount++){
@


1.7
log
@Removed copyright statement from codes that had it.
Moved self-doc line for sudoc.
@
text
@d1 1
a1 1
/* SUFILTER: $Revision: 1.6 $ ; $Date: 94/03/30 13:53:39 $        */
a2 2
void buildpolyfilt(float *f, float *amps, int npoly, int nfft, 
					float dt, float *filter);
d42 3
d91 1
a91 1
        if (!getparfloat("dt", &dt))    dt = tr.dt/1000000.0;
d161 1
a161 1
	buildpolyfilt(f,amps,npoly,nfft,dt,filter);
a184 10
/* BUILDPOLYFILT  -- Build a POLYgonal FILTer with sin^2 tapering
 *			--filter to be applied in the frequency domain
 *Credits:   CWP: John Stockwell
 *	float *f		array of frequencies defining the filter
 *      float *amps;            array of amplitude values
 *      int npoly;              size of f/amps
 *      float dt;               sampling rate
 *      int nfft;               number of points in the fft
 *      float *filter;          array filter values
 */
d186 19
a204 2
void buildpolyfilt(float *f, float *amps, int npoly, int nfft, 
					float dt, float *filter)
a205 2


@


1.6
log
@added ISSEISMIC macro
@
text
@d1 1
a1 1
/* SUFILTER: $Revision: 1.5 $ ; $Date: 93/12/14 13:41:39 $        */
a2 13
/*----------------------------------------------------------------------
 * Copyright (c) Colorado School of Mines, 1990.
 * All rights reserved.
 *
 * This code is part of SU.  SU stands for Seismic Unix, a processing line
 * developed at the Colorado School of Mines, partially based on Stanford
 * Exploration Project (SEP) software.  Inquiries should be addressed to:
 *
 *  Jack K. Cohen, Center for Wave Phenomena, Colorado School of Mines,
 *  Golden, CO 80401  (jkc@@dix.mines.colorado.edu)
 *----------------------------------------------------------------------
 */

a34 1
/**************** end self doc ***********************************/
d42 1
@


1.5
log
@Enlarged notion of seismic trace to include DEAD, etc.
@
text
@d1 1
a1 1
/* SUFILTER: $Revision: 1.4 $ ; $Date: 93/11/24 15:27:53 $        */
d98 2
a99 2
	seismic = (tr.trid == 0 || tr.trid == TREAL ||
		   tr.trid == TDEAD || tr.trid == TDUMMY);
@


1.4
log
@added explicit casts, changed bzero to memset
@
text
@d1 1
a1 1
/* SUFILTER: $Revision: 1.3 $ ; $Date: 93/11/17 09:05:23 $        */
d88 1
d98 4
a101 2
        if (tr.trid && tr.trid != TREAL)
                err("input is not seismic data, trid=%d", tr.trid);
@


1.3
log
@changed condition of warning to npoly < 2
@
text
@d1 1
a1 1
/* SUFILTER: $Revision: 1.2 $ ; $Date: 92/10/22 14:15:45 $        */
d177 2
a178 2
                memcpy(rt, tr.data, nt*FSIZE);
                bzero(rt + nt, (nfft-nt)*FSIZE);
@


1.2
log
@new doc installed
@
text
@d1 1
a1 1
/* SUFILTER: $Revision: 1.1 $ ; $Date: 92/04/15 11:05:55 $        */
d130 1
a130 1
	if(npoly < 3) warn("Only %d value(s) defining filter",npoly);
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/* SUFILTER: $Revision: 1.9 $ ; $Date: 92/03/23 16:33:58 $        */
d23 25
a47 21
char *sdoc =
"SUFILTER - applies a zero-phase, sine-squared tapered filter   \n"
"								\n"
"sufilter <stdin >stdout [optional parameters]         		\n"
"								\n"
"Required parameters:                                          	\n"
"       if dt is not set in header, then dt is mandatory        \n"
"Optional parameters:						\n"
"       f=f1,f2,...             array of filter frequencies(HZ) \n"
"       amps=a1,a2,...          array of filter amplitudes	\n"
"       dt = (from header)      time sampling rate (sec)        \n"
"Defaults:f=.10*(nyquist),.15*(nyquist),.45*(nyquist),.50*(nyquist)\n"
"                        (nyquist calculated internally)	\n"
"          amps=0.,1.,...,1.,0.  trapezoidal bandpass filter	\n"
"Examples of filters:                                           \n"
"Bandpass:   sufilter <data f=10,20,40,50 | ...	 	        \n"
"Bandreject: sufilter <data f=10,20,30,40 amps=1.,0.,0.,1. | ..	\n"
"Lowpass:    sufilter <data f=10,20,40,50 amps=1.,1.,0.,0. | ...   \n"
"Highpass:   sufilter <data f=10,20,40,50 amps=0.,0.,1.,1. | ...   \n"
"Notch:      sufilter <data f=10,12.5,35,50,60 amps=1.,.5,0.,.5,1. |..\n"
;
d92 1
a92 1
        askdoc(1);
@
