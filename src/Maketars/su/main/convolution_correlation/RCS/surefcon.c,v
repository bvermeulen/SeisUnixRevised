head	1.7;
access;
symbols;
locks; strict;
comment	@ * @;


1.7
date	2015.08.07.21.57.27;	author john;	state Exp;
branches;
next	1.6;

1.6
date	2011.11.16.17.37.27;	author john;	state Exp;
branches;
next	1.5;

1.5
date	2011.11.12.00.00.03;	author john;	state Exp;
branches;
next	1.4;

1.4
date	2005.04.20.16.37.05;	author john;	state Exp;
branches;
next	1.3;

1.3
date	2005.02.25.20.12.45;	author john;	state Exp;
branches;
next	1.2;

1.2
date	2005.02.16.17.40.15;	author john;	state Exp;
branches;
next	1.1;

1.1
date	2005.02.16.17.38.32;	author john;	state Exp;
branches;
next	;


desc
@surefcon.c - convolution of regrh refraction data
@


1.7
log
@changed conv to convolve_cwp
@
text
@/* Copyright (c) Colorado School of Mines, 2011.*/
/* All rights reserved.                       */

/* SUREFCON: $Revision: 1.6 $ ; $Date: 2011/11/16 17:37:27 $	*/

#include "su.h"
#include "segy.h"
#include "header.h"
/*********************** self documentation **************************/
char *sdoc[] = {
"									",
" SUREFCON -  Convolution of user-supplied Forward and Reverse		",
"		refraction shots using XY trace offset in reverse shot	",
"									",
"	surefcon <forshot sufile=revshot  xy=trace offseted  >stdout	",
"									",
" Required parameters:						 	",
" sufile=	file containing SU trace to use as reverse shot		",
" xy=		Number of traces offseted from the 1st trace in sufile	",
"									",
" Optional parameters:						 	",
" none								 	",
"									",
" Trace header fields accessed: ns					",
" Trace header fields modified: ns					",
"									",
" Notes:								",
" This code implements the Refraction Convolution Section (RCS)	method	",
" of generalized reciprocal refraction traveltime analysis developed by ",
" Derecke Palmer and Leoni Jones.					",
"									",
" The time sampling interval on the output traces is half of that on the",
" traces in the input files.		  	",
"									",
" Example:								",
"									",
"	 surefcon <DATA sufile=DATA xy=1 | ...				",
"									",
" Here, the su data file, \"DATA\", convolved the nth trace by		",
" (n+xy)th trace in the same file					",
"									",
"									",
NULL};

/* Credits: (based on suconv)
 *	CWP: Jack K. Cohen, Michel Dietrich
 *	UNSW: D. Palmer, K.T. LEE
 *  CAVEATS: no space-variable or time-variable capacity.
 *	The more than one trace allowed in sufile is the
 *	beginning of a hook to handle the spatially variant case.
 *
 * Trace header fields accessed: ns
 * Trace header fields modified: ns
 * Notes:
 * This code implements the refraction convolution 
 * section (RCS) method
 * method described in:
 *
 * Palmer, D, 2001a, Imaging refractors with the convolution section,
 *           Geophysics 66, 1582-1589.
 * Palmer, D, 2001b, Resolving refractor ambiguities with amplitudes,
 *           Geophysics 66, 1590-1593.
 *
 * Exploration Geophysics (2005) 36, 18­25
 * Butsuri-Tansa (Vol. 58, No.1)
 * Mulli-Tamsa (Vol. 8,
 *    A simple approach to refraction statics with the 
 * Generalized Main Reciprocal Method and the Refraction 
 * Convolution Section Heading
 *        by Derecke Palmer  Leonie Jones
 *
 */
/**************** end self doc ********************************/

segy intrace, outtrace, sutrace;

int
main(int argc, char **argv)
{
	int nt;		/* number of points on input traces	*/
	int ntout;	/* number of points on output traces	*/
	int xy;		/* the offset number for GRM		*/
	float *forshot;	/* forward shot			*/
	int nforshot;	/* length of input wavelet in samples  */
	cwp_String sufile;	/* name of file of forward SU traces	*/
	FILE *fp;		/* ... its file pointer		*/
	int itr;		/* trace counter			 */

	/* Initialize */
	initargs(argc, argv);
	requestdoc(1);

	/* Get info from first trace */ 
	if (!gettr(&intrace) ) err("can't get 1st reverse shot trace");
	nt = intrace.ns;

	/* Default parameters;  User-defined overrides */
	if (!getparint("xy", &xy) )  xy = 0;
		
	/* Check xy values */
	if (xy < 0)	err("xy=%d should be positive", xy);
	 
	if (!getparstring("sufile", &sufile)) {
		err("must specify sufile= desired forward shot");
	} else {
                checkpars();

		/* Get parameters and set up forshot array */
		fp = efopen(sufile, "r");
	 	for (itr = 0; itr <= xy; ++itr) {
			if (!fgettr(fp, &sutrace) ) { 
				err("can't get 1st requested forward trace");
			}
	 	}	

	 	nforshot = sutrace.ns;
	 	forshot = ealloc1float(nforshot);

		 /* Set output trace length */
		 ntout = nt + nforshot - 1;
		
		 /* Main loop over reverse shot traces */
		 do {  
			warn("rev==%d\t , for=%d", intrace.tracf, sutrace.tracf);
			 memcpy((void *) forshot,
			(const void *) sutrace.data, nforshot*FSIZE);
	
			/* Convolve for shot with reverse shot trace */
			convolve_cwp(nforshot, 0, forshot,
					 nt, 0, intrace.data, 
					ntout, 0, outtrace.data);	

			/* Output convolved trace */
			memcpy((void *) &outtrace, (const void *) &intrace, HDRBYTES);
			outtrace.ns = ntout;
			outtrace.dt = outtrace.dt/2;
			/*outtrace.cdp = 2*intrace.tracf + xy;*/ 
			fprintf(stderr,"out_cdp=%d\n", 2*intrace.tracf + xy);
			puttr(&outtrace);
		
		 } while ( gettr(&intrace) && fgettr(fp, &sutrace) ); 
	}
	
	return(CWP_Exit());
}
@


1.6
log
@added Reg Beardsley's checkpar() call
@
text
@d4 1
a4 1
/* SUREFCON: $Revision: 1.4 $ ; $Date: 2005/04/20 16:37:05 $	*/
d129 1
a129 1
			conv(nforshot, 0, forshot,
@


1.5
log
@copyright
@
text
@d106 1
@


1.4
log
@20 April
@
text
@d1 4
a4 1
/* SUREFCON: $Revision: 1.3 $ ; $Date: 2005/02/25 20:12:45 $	*/
@


1.3
log
@added more veribhHHhh
verbiage
@
text
@d1 1
a1 1
/* SUREFCON: $Revision: 1.2 $ ; $Date: 2005/02/16 17:40:15 $	*/
d56 5
@


1.2
log
@cons[3~[3~[3~
cosmetic
@
text
@d1 1
a1 1
/* SUREFCON: $Revision: 1.1 $ ; $Date: 2005/02/16 17:38:32 $	*/
d9 2
a10 2
" SUREFCON -  Convolution of user-supplied Forward and Reverse	 ",
"		refraction shots using XY trace offset in reverse shot ",
d12 1
a12 1
"	surefcon <forshot sufile=revshot  xy={trace offseted}  >stdout	",
d14 3
a16 3
" Required parameters:						 ",
" sufile=	file containing SU trace to use as reverse shot	",
" xy=	Number of traces offseted from the 1st trace in sufile	",
d18 2
a19 2
" Optional parameters:						 ",
" none								 ",
d24 4
a27 2
" Notes: The time sampling interval on the output traces		",
" is half of that on the traces in the input files.		  ",
d29 2
a30 2
" Examples:							  ",
"	 suconv<DATA sufile=DATA xy=1 | ...				",
d32 5
a36 1
" Here, the su data file, \"DATA\", convolved the nth trace by	 ",
d41 2
a42 1
/* Credits:
d48 1
d51 13
d72 5
a76 5
	int nt;		 /* number of points on input traces	*/
	int ntout;		/* number of points on output traces	*/
	int xy;		 /* the offset number for GRM		*/
	float *forshot;	 /* forward shot			*/
	int nforshot;		/* length of input wavelet in samples  */
d78 1
a78 1
	FILE *fp;		 /* ... its file pointer		*/
d80 1
d84 1
d88 1
a97 9
	 /* Get parameters and set up forshot array */
	 fp = efopen(sufile, "r");
	 for (itr = 0; itr <= xy; ++itr) {
		if (!fgettr(fp, &sutrace) ) { 
		err("can't get 1st requested forward trace");
		};
	 };	
	 nforshot = sutrace.ns;
	 forshot = ealloc1float(nforshot);
d99 13
a111 2
	 /* Set output trace length */
	 ntout = nt + nforshot - 1;
d113 5
a117 5
	 /* Main loop over reverse shot traces */
	 do {  
		warn("rev==%d\t , for=%d", intrace.tracf, sutrace.tracf);
		 memcpy((void *) forshot,
		(const void *) sutrace.data, nforshot*FSIZE);
d119 12
a130 11
		/* Convolve forshot with revshot trace */
		conv(nforshot, 0, forshot,
		 nt, 0, intrace.data, 
			ntout, 0, outtrace.data);	
		/* Output convolveed trace */
		memcpy((void *) &outtrace, (const void *) &intrace, HDRBYTES);
		outtrace.ns = ntout;
		outtrace.dt = outtrace.dt/2;
		/*outtrace.cdp = 2*intrace.tracf + xy;*/ 
		fprintf(stderr,"out_cdp=%d\n", 2*intrace.tracf + xy);
		puttr(&outtrace);
d132 2
a133 2
	 } while ( gettr(&intrace) && fgettr(fp, &sutrace) ); 
	} ;
d135 1
a135 1
	return EXIT_SUCCESS;
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/* SUREFCON: $Revision: 1.12 $ ; $Date: 1996/09/05 19:24:26 $        */
d8 26
a33 26
"                                                                    ",
" SUREFCON -  Convolution of user-supplied Forward and Reverse       ",
"             refraction shots using XY trace offset in reverse shot ",
"                                                                    ",
"   surefcon <forshot sufile=revshot  xy={trace offseted}  >stdout   ",
"                                                                    ",
" Required parameters:                                               ",
" sufile=     file containing SU trace to use as reverse shot        ",
" xy=     Number of traces offseted from the 1st trace in sufile     ",
"                                                                    ",
" Optional parameters:                                               ",
" none                                                               ",
"                                                                    ",
" Trace header fields accessed: ns                                   ",
" Trace header fields modified: ns                                   ",
"                                                                    ",
" Notes: The time sampling interval on the output traces	     ",
" is half of that on the traces in the input files.                  ",
"                                                                    ",
" Examples:                                                          ",
"       suconv<DATA sufile=DATA xy=1 | ...                           ",
"                                                                    ",
" Here, the su data file, \"DATA\", convolved the nth trace by       ",
" (n+xy)th trace in the same file                                    ",
"                                                                    ",
"                                                                    ",
d36 2
a37 2
 *     CWP: Jack K. Cohen, Michel Dietrich
 *     UNSW: D. Palmer, K.T. LEE
d39 2
a40 2
 *     The more than one trace allowed in sufile is the
 *     beginning of a hook to handle the spatially variant case.
d43 1
d47 2
d51 58
a108 57
      int nt;                 /* number of points on input traces    */
      int ntout;              /* number of points on output traces   */
      int xy;                 /* the offset number for GRM           */
      float *forshot;         /* forward shot                        */
      int nforshot;           /* length of input wavelet in samples  */
      cwp_String sufile;      /* name of file of forward SU traces   */
      FILE *fp;               /* ... its file pointer                */
      int itr;                /* trace counter                       */
      /* Initialize */
      initargs(argc, argv);
      requestdoc(1);
      /* Get info from first trace */ 
      if (!gettr(&intrace) ) err("can't get 1st reverse shot trace");
      nt = intrace.ns;
      /* Default parameters;  User-defined overrides */
      if (!getparint("xy", &xy) )  xy = 0;
              
      /* Check xy values */
      if (xy < 0)   err("xy=%d should be positive", xy);
       
      if (!getparstring("sufile", &sufile)) {
              err("must specify sufile= desired forward shot");
      } else {
         /* Get parameters and set up forshot array */
         fp = efopen(sufile, "r");
         for (itr = 0; itr <= xy; ++itr) {
            if (!fgettr(fp, &sutrace) ) { 
                err("can't get 1st requested forward trace");
            };
         };   
         nforshot = sutrace.ns;
         forshot = ealloc1float(nforshot);
         /* Set output trace length */
         ntout = nt + nforshot - 1;
            
         /* Main loop over reverse shot traces */
         do {  
             warn("rev==%d\t , for=%d", intrace.tracf, sutrace.tracf);
               memcpy((void *) forshot,
             (const void *) sutrace.data, nforshot*FSIZE);
      
            /* Convolve forshot with revshot trace */
            conv(nforshot, 0, forshot,
                 nt, 0, intrace.data, 
                     ntout, 0, outtrace.data);        
            /* Output convolveed trace */
            memcpy((void *) &outtrace, (const void *) &intrace, HDRBYTES);
            outtrace.ns = ntout;
            outtrace.dt = outtrace.dt/2;
              /*outtrace.cdp = 2*intrace.tracf + xy;*/ 
              fprintf(stderr,"out_cdp=%d\n", 2*intrace.tracf + xy);
            puttr(&outtrace);
            
         } while ( gettr(&intrace) && fgettr(fp, &sutrace) ); 
      } ;
      
      return EXIT_SUCCESS;
@
