head	1.18;
access;
symbols;
locks; strict;
comment	@ * @;


1.18
date	2011.11.16.22.10.29;	author john;	state Exp;
branches;
next	1.17;

1.17
date	2011.11.12.00.13.49;	author john;	state Exp;
branches;
next	1.16;

1.16
date	2003.06.09.16.17.07;	author john;	state Exp;
branches;
next	1.15;

1.15
date	96.09.17.16.52.18;	author jkc;	state Exp;
branches;
next	1.14;

1.14
date	96.09.13.21.49.05;	author john;	state Exp;
branches;
next	1.13;

1.13
date	95.08.02.10.39.54;	author john;	state Exp;
branches;
next	1.12;

1.12
date	95.07.10.15.52.07;	author john;	state Exp;
branches;
next	1.11;

1.11
date	95.07.10.13.50.22;	author john;	state Exp;
branches;
next	1.10;

1.10
date	95.06.28.11.36.21;	author john;	state Exp;
branches;
next	1.9;

1.9
date	94.08.25.14.59.34;	author jkc;	state Exp;
branches;
next	1.8;

1.8
date	93.08.13.10.28.07;	author john;	state Exp;
branches;
next	1.7;

1.7
date	93.08.09.15.19.34;	author john;	state Exp;
branches;
next	1.6;

1.6
date	92.10.26.11.20.53;	author john;	state Exp;
branches;
next	1.5;

1.5
date	91.09.05.08.50.40;	author jkcohen;	state Exp;
branches;
next	1.4;

1.4
date	90.12.08.15.47.20;	author jkc;	state Exp;
branches;
next	1.3;

1.3
date	90.12.08.15.22.20;	author jkc;	state Exp;
branches;
next	1.2;

1.2
date	90.09.03.09.48.49;	author jkc;	state Exp;
branches;
next	1.1;

1.1
date	90.04.17.14.08.41;	author jkc;	state Exp;
branches;
next	;


desc
@Display one or more header words
@


1.18
log
@added Reg Beardsley's checkpar() call
@
text
@/* Copyright (c) Colorado School of Mines, 2011.*/
/* All rights reserved.                       */

/* SUGETHW: $Revision: 1.16 $ ; $Date: 2003/06/09 16:17:07 $	*/

#include "su.h"
#include "segy.h"
#include "header.h"

/*********************** self documentation **********************/
char *sdoc[] = {
" 									",
" SUGETHW - sugethw writes the values of the selected key words		",
" 									",
"   sugethw key=key1,... [output=] <infile [>outfile]			",
" 									",
" Required parameters:							",
" key=key1,...		At least one key word.				",
" 									",
" Optional parameters:							",
" output=ascii		output written as ascii for display		",
" 			=binary for output as binary floats		",
" 			=geom   ascii output for geometry setting	",
" verbose=0 		quiet						",
" 			=1 chatty					",
" 									",
" Output is written in the order of the keys on the command		",
" line for each trace in the data set.					",
" 									",
" Example:								",
" 	sugethw <stdin key=sx,gx					",
" writes sx, gx values as ascii trace by trace to the terminal.		",
" 									",
" Comment: 								",
" Users wishing to edit one or more header field (as in geometry setting)",
" may do this via the following sequence:				",
"     sugethw < sudata output=geom key=key1,key2,... > hdrfile 		",
" Now edit the ASCII file hdrfile with any editor, setting the fields	",
" appropriately. Convert hdrfile to a binary format via:		",
"     a2b < hdrfile n1=nfields > binary_file				",
" Then set the header fields via:					",
"     sushw < sudata infile=binary_file key=key1,key2,... > sudata.edited",
" 									",
NULL};

/* Credits:
 *
 *	SEP: Shuki Ronen
 *	CWP: Jack K. Cohen
 *      CWP: John Stockwell, added geom stuff, and getparstringarray
 */
/**************** end self doc ***********************************/

#define ASCII 0
#define BINARY 1
#define GEOM 2

segy tr;

int
main(int argc, char **argv)
{
	cwp_String key[SU_NKEYS];	/* array of keywords		*/
	int nkeys;		/* number of keywords to be gotten 	*/
	int iarg;		/* arguments in argv loop		*/
	int countkey=0;		/* counter of keywords in argc loop	*/
	cwp_String output;	/* string representing output format	*/
	int ioutput=ASCII;	/* integer representing output format	*/
	int verbose;		/* verbose?				*/

	/* Initialize */
	initargs(argc, argv);
	requestdoc(1);

	/* Get key values */
	if (!getparint("verbose",&verbose))	verbose=0;
	if ((nkeys=countparval("key"))!=0) {
		getparstringarray("key",key);
	} else {
		/* support old fashioned method for inputting key fields */
		/* as single arguments:  sugethw key1 key2 ... 		*/
		if (argc==1) err("must set at least one key value!");

		for (iarg = 1; iarg < argc; ++iarg) {
			cwp_String keyword;	     /* keyword */

			keyword = argv[iarg];

			if (verbose) warn("argv=%s",argv[iarg]);
			/* get array of types and indexes to be set */
			if ((strncmp(keyword,"output=",7)!=0)) {
				key[countkey] = keyword;
				++countkey;
			}

			if (countkey==0)
				err("must set at least one key value!");
		}
		nkeys=countkey;
	}

	/* Set and check output format; recall ioutput initialized to ASCII */
	if (!getparstring("output", &output))   output = "ascii";

        checkpars();

	if      (STREQ(output, "binary"))	ioutput = BINARY;
	else if (STREQ(output, "geom"))		ioutput = GEOM;
	else if (!STREQ(output, "ascii"))
		err("unknown format output=\"%s\", see self-doc", output);

	/* Loop over traces writing selected header field values */
	while (gettr(&tr)) {
		register int ikey;

		for (ikey = 0; ikey < nkeys; ++ikey) {
			Value val;
			float fval;

			gethdval(&tr, key[ikey], &val);

			switch(ioutput) {
			case ASCII:
				printf("%6s=", key[ikey]);
				printfval(hdtype(key[ikey]), val);
				putchar('\t');
			break;
			case BINARY:
				fval = vtof(hdtype(key[ikey]), val);
				efwrite((char *) &fval, FSIZE, 1, stdout);
			break;
			case GEOM:
				printfval(hdtype(key[ikey]), val);
				putchar(' ');
			break;
			}
		}

		switch(ioutput) {
		case GEOM:
			printf("\n");
		break;
		case ASCII:
			printf("\n\n");
		break;
		}
	}

	return(CWP_Exit());
}
@


1.17
log
@copyright
@
text
@d105 2
@


1.16
log
@9 June 2003
@
text
@d1 4
a4 1
/* SUGETHW: $Revision: 1.15 $ ; $Date: 1996/09/17 16:52:18 $	*/
@


1.15
log
@Used initialization in code.
@
text
@d1 1
a1 1
/* SUGETHW: $Revision: 1.14 $ ; $Date: 1996/09/13 21:49:05 $	*/
d144 1
a144 1
	return EXIT_SUCCESS;
@


1.14
log
@silenced -Wall messages
@
text
@d1 1
a1 1
/* SUGETHW: $Revision: 1.13 $ ; $Date: 1995/08/02 10:39:54 $	*/
d65 1
a65 1
	int ioutput=0;		/* integer representing output format	*/
d99 1
a99 1
	/* Set and check output format */
d102 1
a102 2
	if      (STREQ(output, "ascii"))	ioutput = ASCII;
	else if (STREQ(output, "binary"))	ioutput = BINARY;
d104 2
a105 1
	else     err("unknown format output=\"%s\", see self-doc", output);
@


1.13
log
@added verbose option
@
text
@d1 1
a1 1
/* SUGETHW: $Revision: 1.12 $ ; $Date: 95/07/10 15:52:07 $	*/
d57 1
d65 1
a65 1
	int ioutput;		/* integer representing output format	*/
@


1.12
log
@restored old functionality of  sugethw key1 key2 ... for backward
compatiblity
@
text
@d1 1
a1 1
/* SUGETHW: $Revision: 1.10 $ ; $Date: 95/06/28 11:36:21 $	*/
d18 1
a18 1
" 	output=ascii	output written as ascii for display		",
d21 2
d65 1
d72 1
d85 1
a85 1
			warn("argv=%s",argv[iarg]);
@


1.11
log
@new version with key=key1,key2,...
@
text
@d45 1
a45 1
 *      CWP: John Stockwell, added geom stuff
d59 2
d72 20
a91 1
		err("must set at least one key value!");
d97 4
a100 4
        if      (STREQ(output, "ascii"))	ioutput = ASCII;
        else if (STREQ(output, "binary"))	ioutput = BINARY;
        else if (STREQ(output, "geom"))		ioutput = GEOM;
        else     err("unknown format output=\"%s\", see self-doc", output);
@


1.10
log
@updated to permit multicolum format for editing
@
text
@d1 1
a1 1
/* SUGETHW: $Revision: 1.9 $ ; $Date: 94/08/25 14:59:34 $	*/
d5 1
d12 1
a12 1
"   sugethw key1 key2 ... [output=] <infile [>outfile]			",
d15 1
a15 1
" 	At least one key word.						",
d26 1
a26 1
" 	sugethw <stdin sx gx						",
d32 1
a32 1
"     sugethw < sudata output=geom  key1 key2 ... > hdrfile 		",
d37 1
a37 1
"     sushw < sudata infile=binary_file key1 key2 ... > sudata.edited	",
d57 2
a61 1

d66 6
a72 4
	/* Argument count check */
	if (argc == 1)  err("must specify key(s) as command line arguments");


d83 1
a83 1
		register int i;
d85 1
a85 2
		for (i = 1; i < argc; ++i) {
			cwp_String key = argv[i];
d89 1
a89 5
			/* discard command line parameter strings */
			if (	STREQ(key, "output=ascii")
				|| STREQ(key, "output=binary")
				|| STREQ(key, "output=geom"))
				continue;
a90 2
			gethdval(&tr, key, &val);

d93 2
a94 2
				printf("%6s=", key);
				printfval(hdtype(key), val);
d98 1
a98 1
				fval = vtof(hdtype(key), val);
d102 1
a102 1
				printfval(hdtype(key), val);
@


1.9
log
@Removed copyright statement from codes that had it.
Moved self-doc line for sudoc.
@
text
@d1 1
a1 1
/* SUGETHW: $Revision: 1.8 $ ; $Date: 93/08/13 10:28:07 $	*/
d8 30
a37 19
" 								",
" SUGETHW - sugethw writes the values of the selected key words	",
" 								",
" sugethw key1 key2 ... [output=] <infile [>outfile]		",
" 								",
" Required parameters:						",
" 	At least one key word.					",
" 								",
" Optional parameters:						",
" 	output=ascii	output written as ascii 		",
" 			=binary for output as binary floats	",
" 								",
" Output is written in the order of the keys on the command	",
" line for each trace in the data set.				",
" 								",
" Example:							",
" 	sugethw <stdin sx gx					",
" writes sx, gx values as ascii trace by trace to the terminal.	",
" 								",
d42 3
a44 2
 *	SEP: Shuki
 *	CWP: Jack
d48 3
d56 2
a57 2
	cwp_String output;
	cwp_Bool asciiout = true;
d69 2
a70 5
	/* Set and check output disposition (ascii or binary) */
	if (!getpar("output", &output))   output = "ascii";
	if ((!STREQ(output, "ascii")) && (!STREQ(output, "binary")))
		err("output parameter=%s, must be ascii or binary", output);
	if (STREQ(output, "binary"))  asciiout = false;
d72 4
d84 1
d87 3
a89 2
			if (STREQ(key, "output=ascii") ||
			    STREQ(key, "output=binary"))
d93 3
a95 1
			if (asciiout) {  /* ascii output */
d99 3
a101 2
			} else {  /* binary output */
				float fval = vtof(hdtype(key), val);
d103 5
d111 8
a118 1
		if (asciiout)  printf("\n\n");
@


1.8
log
@changed Bool to cwp_Bool
@
text
@d1 1
a1 1
/* SUGETHW: $Revision: 1.7 $ ; $Date: 93/08/09 15:19:34 $	*/
a2 13
/*----------------------------------------------------------------------
 * Copyright (c) Colorado School of Mines, 1990.
 * All rights reserved.
 *
 * This code is part of SU.  SU stands for Seismic Unix, a processing line
 * developed at the Colorado School of Mines, partially based on Stanford
 * Exploration Project (SEP) software.  Inquiries should be addressed to:
 *
 *  Jack K. Cohen, Center for Wave Phenomena, Colorado School of Mines,
 *  Golden, CO 80401  (jkc@@dix.mines.colorado)
 *----------------------------------------------------------------------
 */

a27 1
/**************** end self doc ***********************************/
d34 1
@


1.7
log
@changed String to cwp_String
@
text
@d1 1
a1 1
/* SUGETHW: $Revision: 1.6 $ ; $Date: 92/10/26 11:20:53 $	*/
d55 1
a55 1
	Bool asciiout = true;
@


1.6
log
@new selfdoc installed
@
text
@d1 1
a1 1
/* SUGETHW: $Revision: 1.5 $ ; $Date: 91/09/05 08:50:40 $	*/
d54 1
a54 1
	String output;
d79 1
a79 1
			String key = argv[i];
@


1.5
log
@string -> String and so forth
@
text
@d1 1
a1 1
/* SUGETHW: $Revision: 1.4 $ ; $Date: 90/12/08 15:47:20 $	*/
d20 21
a40 21
String sdoc =
" 								\n"
" SUGETHW - sugethw writes the values of the selected key words	\n"
" 								\n"
" sugethw key1 key2 ... [output=] <infile [>outfile]		\n"
" 								\n"
" Required parameters:						\n"
" 	At least one key word.					\n"
" 								\n"
" Optional parameters:						\n"
" 	output=ascii	output written as ascii 		\n"
" 			=binary for output as binary floats	\n"
" 								\n"
" Output is written in the order of the keys on the command	\n"
" line for each trace in the data set.				\n"
" 								\n"
" Example:							\n"
" 	sugethw <stdin sx gx					\n"
" writes sx, gx values as ascii trace by trace to the terminal.	\n"
" 								\n"
;
d60 1
a60 1
	askdoc(1);
@


1.4
log
@More modernization
@
text
@d1 1
a1 1
/* SUGETHW: $Revision: 1.3 $ ; $Date: 90/12/08 15:22:20 $	*/
d20 1
a20 1
string sdoc =
d54 2
a55 2
	string output;
	bool asciiout = true;
d68 1
a68 1
	if (!getparstring("output", &output))   output = "ascii";
d79 2
a80 2
			string key = argv[i];
			value val;
@


1.3
log
@Modernized; fixed bug in binary output.  Made ascii
the default mode for all cases.
@
text
@d1 1
a1 1
/* SUGETHW: $Revision: 1.2 $ ; $Date: 90/09/03 09:48:49 $	*/
d38 1
a38 1
" Writes sx, gx values as ascii trace by trace to the terminal.	\n"
d44 1
a46 4
 *
 * Note: sugethw violates normal su usage by using command line
 *       arguments to pass the key header words.  Possibly it should
 *	 be rewritten to accept a vector of keywords.
d54 2
a55 6
	char *output;		/* ascii/binary switch 		*/
	filetype ftype;		/* type of STDOUT		*/
	int i;			/* counter over keys		*/
	char *key;		/* header key word from segy.h	*/
	value val;		/* value of header key word	*/
	float fval;		/* ... cast as float		*/
d63 1
d71 1
d76 7
a82 2
		for (i = 1; i < argc; i++) {
			key = argv[i];
d85 2
a86 1
				continue;  /* discard these strings */
d88 1
a88 1
			if (STREQ(output, "ascii")) {
d93 1
a93 1
				fval = vtof(hdtype(key), val);
d98 1
a98 1
		if (STREQ(output, "ascii"))  printf("\n\n");
@


1.2
log
@ANSI C changes
@
text
@d1 1
a1 1
/* SUGETHW: $Revision: 1.1 $ ; $Date: 90/04/17 14:08:41 $	*/
d20 21
a40 27
string sdoc = "\
								\n\
SUGETHW - sugethw writes the values of the selected key words.	\n\
								\n\
sugethw key1 key2 ... [output=] <infile [>outfile]		\n\
								\n\
Required parameters:						\n\
	At least one key word.					\n\
								\n\
Optional parameters:						\n\
	output=ascii	= ascii (stdout is tty or pipe) 	\n\
								\n\
sugethw writes the values of the keywords as either ascii	\n\
characters or binary floats according to the above defaults.	\n\
These defaults can be overridden by using the output parameter.	\n\
								\n\
Output is written in the order of the keys on the command line	\n\
for each trace in the data set.					\n\
								\n\
Examples:							\n\
	sugethw <stdin sx gx					\n\
Writes sx, gx values as ascii trace by trace to the terminal.	\n\
								\n\
	sugethw <stdin sx gx >outfile				\n\
Writes sx, gx values as floats trace by trace to \"outfile.\"	\n\
								\n\
";
d57 6
a62 6
	char *output;		/* ascii/binary - to over-ride defaults */
	filetype ftype;		/* type of STDOUT			*/
	int i;			/* counter over keys			*/
	char *key;		/* header key word from segy.h		*/
	value val;		/* value of header key word		*/
	float fval;		/* ... cast as float			*/
d70 1
a70 3
	if (argc == 1) {
		err("must specify key(s) as command line arguments");
	}
d72 1
d74 3
a76 17
	ftype = filestat(STDOUT);
	switch(ftype) {
	case TTY:
	case PIPE:
		if (!sgetpar("output", &output))   output = "ascii";
	break;
	case DISK:
	case TAPE:
		if (!sgetpar("output", &output))   output = "binary";
	break;
	default:
		err("stdout is illegal filetype");
	}
	if ((!STREQ(output, "ascii")) && (!STREQ(output, "binary"))) {
		warn("output parameter=%s, must be ascii or binary",
								output);
	}
d78 2
d84 2
a85 3
			    STREQ(key, "output=binary")) {
			    break;  /* discard these strings */
			}
d87 1
a87 4
			if (STREQ(output, "binary")) {
				fval = vtof(hdtype(key), val);
				efwrite((char *) &fval, FSIZE, 1, stdout);
			} else {  /* ascii output */
d91 3
d96 2
a97 1
		printf("\n\n");
a98 1
	
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/* SUGETHW: $Revision: 2.7 $ ; $Date: 89/06/15 12:16:56 $	*/
d12 1
a12 1
 *  Golden, CO 80401  (isis!csm9a!jkcohen)
d30 1
a30 2
	output = ascii  = ascii (stdout is tty or pipe) 	\n\
			= binary (stdout is disk or tape) 	\n\
a55 2
 *
 *
a57 5
/* Embed Revision Control System identifier strings */
static string progid =
	"   $Source: /src/su/src/RCS/sugethw.c,v $";
static string revid =
	"   $Revision: 2.7 $ ; $Date: 89/06/15 12:16:56 $";
a58 2


d61 1
a61 2
main(argc, argv)
int argc; char **argv;
a72 5
	if (!igetpar("ID", &ID))	ID = 0;
	if (ID) {
		(void) fprintf(stderr, "%s\n", progid);
		(void) fprintf(stderr, "%s\n", revid);
	}
d77 1
a77 2
		warn("must specify key(s) as command line arguments");
		selfdoc();
d81 1
a81 1
	ftype = statfil(STDOUT);
@
