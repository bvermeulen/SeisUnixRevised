head	1.29;
access;
symbols;
locks; strict;
comment	@ * @;


1.29
date	2011.11.12.00.20.05;	author john;	state Exp;
branches;
next	1.28;

1.28
date	2008.05.05.20.42.43;	author john;	state Exp;
branches;
next	1.27;

1.27
date	2003.06.09.16.17.07;	author john;	state Exp;
branches;
next	1.26;

1.26
date	99.04.05.17.09.07;	author john;	state Exp;
branches;
next	1.25;

1.25
date	98.11.11.19.28.07;	author john;	state Exp;
branches;
next	1.24;

1.24
date	97.07.28.22.36.46;	author john;	state Exp;
branches;
next	1.23;

1.23
date	96.09.13.21.49.05;	author john;	state Exp;
branches;
next	1.22;

1.22
date	96.02.07.16.26.58;	author jkc;	state Exp;
branches;
next	1.21;

1.21
date	95.12.05.19.55.17;	author jkc;	state Exp;
branches;
next	1.20;

1.20
date	95.10.05.16.30.12;	author john;	state Exp;
branches;
next	1.19;

1.19
date	94.08.25.15.01.49;	author jkc;	state Exp;
branches;
next	1.18;

1.18
date	93.11.29.14.20.05;	author john;	state Exp;
branches;
next	1.17;

1.17
date	93.11.12.13.31.39;	author john;	state Exp;
branches;
next	1.16;

1.16
date	93.08.13.10.28.48;	author john;	state Exp;
branches;
next	1.15;

1.15
date	93.08.09.15.20.16;	author john;	state Exp;
branches;
next	1.14;

1.14
date	93.05.26.12.56.55;	author john;	state Exp;
branches;
next	1.13;

1.13
date	92.10.23.15.03.24;	author john;	state Exp;
branches;
next	1.12;

1.12
date	92.04.03.16.11.33;	author jkc;	state Exp;
branches;
next	1.11;

1.11
date	92.04.01.13.38.56;	author jkc;	state Exp;
branches;
next	1.10;

1.10
date	92.02.14.09.04.51;	author john;	state Exp;
branches;
next	1.9;

1.9
date	91.09.05.09.07.34;	author jkcohen;	state Exp;
branches;
next	1.8;

1.8
date	91.09.05.08.52.36;	author jkcohen;	state Exp;
branches;
next	1.7;

1.7
date	91.01.18.15.16.15;	author jkc;	state Exp;
branches;
next	1.6;

1.6
date	91.01.11.18.50.12;	author jkc;	state Exp;
branches;
next	1.5;

1.5
date	90.12.23.20.02.58;	author jkc;	state Exp;
branches;
next	1.4;

1.4
date	90.12.23.16.26.23;	author jkc;	state Exp;
branches;
next	1.3;

1.3
date	90.12.18.20.12.21;	author jkc;	state Exp;
branches;
next	1.2;

1.2
date	90.12.18.16.39.28;	author jkc;	state Exp;
branches;
next	1.1;

1.1
date	90.12.18.16.37.30;	author jkc;	state Exp;
branches;
next	;


desc
@Version of suedit using xwigb instead of suwig
@


1.29
log
@copyright
@
text
@/* Copyright (c) Colorado School of Mines, 2011.*/
/* All rights reserved.                       */

/* SUXEDIT: $Revision: 1.28 $; $Date: 2008/05/05 20:42:43 $	*/

#include "su.h"
#include "segy.h"
#include "header.h"
#include <errno.h>
extern int errno;

/*********************** self documentation ******************************/
char *sdoc[] = {
" 									",
" SUXEDIT - examine segy diskfiles and edit headers			",
" 									",
" suxedit diskfile  (open for possible header modification if writable)	",
" suxedit <diskfile  (open read only)					",
" 							        	",
" The following commands are recognized:				",
" number	read in that trace and print nonzero header words	",
" <CR>		go to trace one step away (step is initially -1)	",
" +		read in next trace (step is set to +1)			",
" -		read in previous trace (step is set to -1)		",
" dN		advance N traces (step is set to N)			",
" %		print some percentiles of the trace data		",
" r		print some ranks (rank[j] = jth smallest datum) 	",
" p [n1 [n2]]  	tab plot sample n1 to n2 on current trace		",
" g [tr1 tr2] [\"opts\"] 	wiggle plot (graph) the trace		",
"				[traces tr1 to tr2]			",
" f		wiggle plot the Fourier transform of the trace		",
" ! key=val  	change a value in a field (e.g. ! tracr=101)		",
" ?		print help file						",
" q		quit							",
" 									",
" NOTE: sample numbers are 1-based (first sample is 1).			",
" 									",
NULL};

/* Credits:
 *	SEP: Einar Kjartansson, Shuki Ronen, Stew Levin
 *	CWP: Jack K. Cohen
 *
 * Trace header fields accessed: ns
 * Trace header fields modified: ntr (only for internal plotting)
 */
/**************** end self doc ***********************************/


segy tr;		/* a segy trace structure		*/
FILE *tty;		/* /dev/tty is used to read user input	*/
char userin[BUFSIZ];	/* buffer user requests			*/
int nt;			/* number of sample points on traces	*/
FILE *infp;		/* file descriptor of trace file	*/
char tmpwig[L_tmpnam];	/* file for trace plots			*/

/* tabulate help message as an array of strings */
char *help[] = {
"					",
" n		read in trace #n	",
" <CR>		step			",
" +		next trace;   step -> +1",
" -		prev trace;   step -> -1",
" dN		adv N traces; step -> N	",
" %		percentiles		",
" r		ranks			",
" p [n1 [n2]]  	tabplot			",
" g [tr1 tr2] [\"opts\"]	wiggle plot",
" f		wig plot Fourier Transf ",
" ! key=val  	modify field		",
" ?		print this file		",
" q		quit			",
"					",
NULL};

char **helpptr = help ;		/* help pointer */

#define SCREENFUL	19	/* default number of points in tab plot */

/* subroutine prototypes */
void editkey(void);
void wigplot(void);
void ftwigplot(void);
int cmp_indirect(const void *pr, const void *ps);
void userwait(void);

int
main(int argc, char **argv)
{
	int step = -1;		/* step +1/-1 for traversing data	*/
	int itr;		/* trace number (zero based)		*/
	int ntr;		/* number of traces in data set		*/
	int *rank;		/* permuted indices for indirect sort	*/
	int i;			/* counter				*/
	int iq;			/* index of qth quantile (100qth %tile)	*/
	cwp_Bool write_ok=cwp_false;	/* is file writable?		*/


	/* Initialize */
	initargs(argc, argv);
	requestdoc(1);


	if (argc > 2)  err("only one filename argument is allowed");

	tty = efopen("/dev/tty", "r");

	/* Open file and print editing warnings if appropriate */
	if (!isatty(STDIN)) {	/* stdin was redirected to file */
		infp = stdin;
		write_ok = cwp_false;
		warn("! examine only (no header editing from STDIN)\n");

	} else {  	/* file is given by argument */

		/* First try for read and write */
		if (0 == (access(argv[1], READ_OK | WRITE_OK))) {
			infp = efopen(argv[1], "r+");
			write_ok = cwp_true;

		/* Then for just read */
		} else if (0 == (access(argv[1], READ_OK))) {
			infp = efopen(argv[1], "r");
			write_ok = cwp_false;
			warn("! %s is readonly (no header editing)\n",
								argv[1]);
		/* Admit defeat */
		} else {
			err("can't open %s for reading", argv[1]);
		}
	}

	/* Get information from first trace */
	ntr = fgettra(infp, &tr, 0);
	nt = tr.ns;

	/* Set up array for indirect sort requested by 'r' and '%' keys */
	rank = ealloc1int(nt);
	for (i = 0; i < nt; ++i)  rank[i] = i;

	printf("%d traces in input file\n", ntr);

	/* Start from last trace */
	itr = ntr - 1;
	fgettra(infp, &tr, itr);
	printheader(&tr);
	printf("> ");
	efflush(stdout);

	/* Get user directives and do requested tasks */
	while (NULL != fgets(userin, BUFSIZ, tty)) {
		switch(*userin) {
		case '0': /* check if digit */
		case '1': case '2': case '3': case '4':
		case '5': case '6': case '7': case '8':
		case '9': /* end check if digit */
			itr = eatoi(userin) - 1;
			if (itr < 0 || itr > ntr - 1) {
			 	warn("no such trace");
				itr = ntr - 1;
			}
			fgettra(infp, &tr, itr);
			printheader(&tr);
		break;
		case 'q':
			return(CWP_Exit());
		case 'p':
			{ static int p1, p2;
			  /* Get user inputs (avoid running off end of data) */
			  switch(sscanf(userin + 1, "%d %d", &p1, &p2)) {
			  case 2:	/* user specified final position */
				if (p2 < p1) {
					warn("need p1=%d < p2=%d", p1, p2);
					return 0;
				}
				p2 = MIN(p2, nt);
			  break;
			  default:
				p2 = MIN(p1 + SCREENFUL, nt);
			  break;
			  }
			  if (p1 >= nt || p1 <= 0) p1 = 1;
			  tabplot(&tr, p1-1, p2-1); /* 1-base -> 0-base */
			  p1 = p2;
			}
		break;
		case 'g':
			wigplot();
		break;
		case 'f':
			ftwigplot();
		break;
		case '+':
			++itr;
			if (itr > ntr - 1) {
				step = -1;
			    	itr = ntr - 1;
				printf("\nBounced off end of data:\n\n");
			}
			fgettra(infp, &tr, itr);
			printheader(&tr);
			step = 1;
		break;
		case '-':
			itr--;
			if (itr < 0) {
				step = 1;
				itr = 0;
				printf("\nBounced off end of data:\n\n");
			}
			fgettra(infp, &tr, itr);
			printheader(&tr);
			step = -1;
		break;
		case '\n':
			itr += step;
			if (itr > ntr - 1) {
				step *= -1;
			    	itr = ntr - 1;
				printf("\nBounced off end of data:\n\n");
			}
			if (itr < 0) {
				step *= -1;
				itr = 0;
				printf("\nBounced off end of data:\n\n");
			}
			fgettra(infp, &tr, itr);
			printheader(&tr);
		break;
		case 'd':
			step = eatoi(userin + 1);
			itr += step;
			if (itr > ntr - 1) {
				step *= -1;
			    	itr = ntr - 1;
				printf("\nBounced off end of data:\n\n");
			}
			if (itr < 0) {
				step *= -1;
				itr = 0;
				printf("\nBounced off end of data:\n\n");
			}
			fgettra(infp, &tr, itr);
			printheader(&tr);
		break;
		case 'r':
			/* sort: rank[] holds rank of datum in tr */
			qsort(rank, nt, FSIZE, cmp_indirect);

			/* Could make table of desired i's and loop */
			i = 0;
			printf(" rank[%d] = %8.2e", i+1, tr.data[rank[i]]);
			i = nt / 20;
			printf(" rank[%d] = %8.2e", i+1, tr.data[rank[i]]);
			i = nt/2 - i;
			printf(" rank[%d] = %8.2e", i+1, tr.data[rank[i]]);
			printf("\n");
			i = nt - 1 - i;
			printf(" rank[%d] = %8.2e", i+1, tr.data[rank[i]]);
			i = nt - 1 - nt/20;
			printf(" rank[%d] = %8.2e", i+1, tr.data[rank[i]]);
			i = nt - 1;
			printf(" rank[%d] = %8.2e", i+1, tr.data[rank[i]]);
			printf("\nmin is at sample %d,  max at %d\n",
					rank[0] + 1, rank[nt-1] + 1);
		break;
		case '%':
			/* sort: rank[] holds rank of datum in tr */
			qsort(rank, nt, FSIZE, cmp_indirect);

			/* round to qth quantile (100 qth percentile) */
			/* thus (q*nt - 1) + .5 (-1 for zero basing) */
			i = 1; iq = (int) (0.01*nt - 0.5);
			printf(" %dst percentile is %8.2e\n",
					i+1, tr.data[rank[iq]]);
			i = 5; iq = (int) (0.05*nt - 0.5);
			printf(" %dth percentile is %8.2e\n",
					i+1, tr.data[rank[iq]]);
			i = 25; iq = (int) (0.25*nt - 0.5);
			printf("%dth percentile is %8.2e\n",
					i+1, tr.data[rank[iq]]);
			i = 50; iq = (int) (0.50*nt - 0.5);
			printf("%dth percentile is %8.2e\n",
					i+1, tr.data[rank[iq]]);
			i = 75; iq = (int) (0.75*nt - 0.5);
			printf("%dth percentile is %8.2e\n",
					i+1, tr.data[rank[iq]]);
			i = 95; iq = (int) (0.95*nt - 0.5);
			printf("%dth percentile is %8.2e\n",
					i+1, tr.data[rank[iq]]);
			i = 99; iq = (int) (0.99*nt - 0.5);
			printf("%dth percentile is %8.2e\n",
					i+1, tr.data[rank[iq]]);
			printf("min at sample %d equals %8.2e\n",
					rank[0] + 1, tr.data[rank[0]]);
			printf("max at sample %d equals %8.2e\n",
					rank[nt-1] + 1, tr.data[rank[nt-1]]);
		break;
		case '!':
			if (write_ok) {
				editkey();
			} else {
				warn("file not writable");
			}
		break;
		case '?':
			while(*helpptr) fprintf(stderr,"%s\n", *helpptr++);
			helpptr = help;
		break;
		default:
			warn("bad key %s\n", userin);
			while(*helpptr) fprintf(stderr,"%s\n", *helpptr++);
			helpptr = help;
		break;
		}
		printf("> ");
		efflush(stdout);
	}

	return(CWP_Exit());
}



/* Modify a header field value */
void editkey(void)
{
	cwp_String keyword;	/* buffer and then header key word	*/
	cwp_String keyval;	/* header key value in ascii		*/
	cwp_String ptr;		/* pointer to isolate key word		*/
	cwp_String type;	/* type of key word			*/
	ssize_t nsegy;		/* length of trace in bytes		*/
	int databytes;		/* length of data in bytes		*/
	Value val;		/* numerical value of key word		*/

	/* char userin[] is "!    keyword  = keyval" */

	/* Strip the '!' and any leading spaces from buffer */
/* suxedit.c:339: warning: subscript has type `char' */
	for (keyword = userin + 1; isspace((int)(*keyword)); keyword++);

	/* Set keyval to start of val */
 	if (NULL == (keyval = strchr(keyword, '=') + 1)) {
		printf("command error: format is \"! key=val\"\n");
		return;
	}

	/* Null terminate keyword (back up over = and any spaces) */
/* suxedit.c:348: warning: subscript has type `char' */
	for (ptr = keyval - 2; isspace((int)(*ptr)); ptr--);
	(*(ptr + 1)) = '\0';

	/* Convert ascii keyval string to numeric val value */
	type = hdtype(keyword);
	errno = 0;
	atoval(type, keyval, &val);
	if (errno) {
	    warn("failed to convert %s to numeric, field not changed", keyval);
	}

	/* Insert value into header */
	puthdval(&tr, keyword, &val);

	/* Write back the trace with the new value */
	databytes = nt * FSIZE;
	nsegy = (ssize_t) (databytes + HDRBYTES);
	efseeko(infp, (off_t) (-nsegy), SEEK_CUR);
	efwrite(&tr, 1, HDRBYTES, infp);

	/* Restore file pointer */
	efseeko(infp,(off_t) databytes, SEEK_CUR);

	/* Show the user the new header value */
	printheader(&tr);

	return;
}


/* Wiggle plot of selected adjacent traces */
void wigplot(void)
{
	int n1;			/* first trace to be plotted		*/
	int n2;			/* last trace to be plotted		*/
	int i;			/* counter				*/
	char cmd[BUFSIZ];	/* build command for system call	*/
	char disp_opts[256];	/* display options for suxwigb		*/
	FILE *wigfp;		/* fp for suxwigb input file		*/


	/* Prepare temporary file to hold traces to be plotted */
	wigfp = efopen(tmpnam(tmpwig), "w+");



	/* Parse request and subtract 1 for internal trace numbers */
	strcpy (disp_opts, "");
	switch(sscanf(userin + 1,
		      "%d %d %[-a-zA-Z0-9.= ]", &n1, &n2, disp_opts)) {
	case 1: /* user specified remote trace to plot */
		--n1;
		fgettra(infp, &tr, n1);
		tr.ntr = 0;
		fputtr(wigfp, &tr);
	break;
	case 2: /* user specified block of traces to plot */
	case 3: /* user optionally specifies display options */
		if (n2 < n1) {
			warn("must specify n1=%d < n2=%d", n1, n2);
			return;
		}
		for (i = n1 - 1; i <= n2 - 1; ++i) {
			fgettra(infp, &tr, i);
			tr.ntr = 0;
			fputtr(wigfp, &tr);
		}
	break;
	default: /* no numbers given by user: plot current trace */
		fputtr(wigfp, &tr);
	break;
	}

	/* Set up system call to suxwigb */
	rewind(wigfp);
	sprintf(cmd, "suxwigb <%s %s", tmpwig, disp_opts);
	system(cmd);

	/* Clean up temp file */
	efclose(wigfp);
	eremove(tmpwig);

	/* Prepare for next user request */
	userwait();	/* prompt and pause till user presses return  */
	printheader(&tr);

	return;
}


/* Wiggle plot Fourier transform of current trace */
void ftwigplot(void)
{
	char cmd[BUFSIZ];	/* build command for system call	*/
	FILE *fftfp;		/* fp for suspecfx input file		*/


	/* Prepare temporary file to hold fft trace to be plotted */
	fftfp = efopen(tmpnam(tmpwig), "w+");
	tr.ntr = 0;

	fputtr(fftfp, &tr);

	/* Set up system call for suspecfx */
	rewind(fftfp);
	sprintf(cmd, "suspecfx <%s | suxwigb", tmpwig);
	system(cmd);

	/* Clean up temp file */
	efclose(fftfp);
	eremove(tmpwig);

	/* Prepare for next user request */
	userwait();	/* prompt and pause till user presses return  */
	printheader(&tr);

	return;
}


/* Comparison function for qsort */
int cmp_indirect(const void *pr, const void *ps)
{
	const int *r = pr;
	const int *s = ps;
	float diff = tr.data[*r] - tr.data[*s];

	if      (diff > 0)	return(1);
	else if (diff < 0)	return(-1);
	else  /* diff == 0 */	return(0);
}


/* userwait - prompt and wait for user signal to continue */
void userwait(void)
{
	/* Note: leading newline helps some devices switch to ascii */
	fprintf(stderr, "\npress return key to continue\n");
	getc(tty);

	return;
}
@


1.28
log
@explicity cast of keyword.
@
text
@d1 4
a4 1
/* SUXEDIT: $Revision: 1.27 $; $Date: 2003/06/09 16:17:07 $	*/
@


1.27
log
@9 June 2003
@
text
@d1 1
a1 1
/* SUXEDIT: $Revision: 1.26 $; $Date: 1999/04/05 17:09:07 $	*/
d336 2
a337 1
	for (keyword = userin + 1; isspace(*keyword); keyword++);
d346 2
a347 1
	for (ptr = keyval - 2; isspace(*ptr); ptr--);
d401 1
a401 1
		fputtr(wigfp, &tr); 
d412 1
a412 1
			fputtr(wigfp, &tr); 
d416 1
a416 1
		fputtr(wigfp, &tr); 
@


1.26
log
@cosmetic
@
text
@d1 1
a1 1
/* SUXEDIT: $Revision: 1.25 $; $Date: 1998/11/11 19:28:07 $	*/
d163 1
a163 1
			return EXIT_SUCCESS;
d317 1
a317 1
	return EXIT_SUCCESS;
d362 1
a362 1
	efseek(infp, -nsegy, SEEK_CUR);
d366 1
a366 1
	efseek(infp, databytes, SEEK_CUR);
d387 2
a388 1
	wigfp = efopen(etmpnam(tmpwig), "w+");
@


1.25
log
@fixed error that caused HEADERBYTES worth of data to be destroyed
for each additional trace header field edited.
@
text
@d1 1
a1 1
/* SUXEDIT: $Revision: 1.24 $; $Date: 1997/07/28 22:36:46 $	*/
d38 2
a39 2
 *	SEP: Einar, Shuki, Stew
 *	CWP: Jack 
@


1.24
log
@changes suggested by Stew Levin to silence SGI compiler warnings, etc
@
text
@d1 1
a1 1
/* SUXEDIT: $Revision: 1.23 $; $Date: 1996/09/13 21:49:05 $	*/
d330 1
d360 2
a361 1
	nsegy = (ssize_t) (nt * FSIZE + HDRBYTES);
d366 1
a366 1
	efseek(infp, nsegy, SEEK_CUR);
@


1.23
log
@silenced -Wall messages
@
text
@d1 1
a1 1
/* SUXEDIT: $Revision: 1.22 $; $Date: 1996/02/07 16:26:58 $	*/
d81 1
a81 1
int cmp_indirect();
d93 1
a93 1
	cwp_Bool write_ok=false;	/* is file writable?			*/
d108 1
a108 1
		write_ok = false;
d116 1
a116 1
			write_ok = true;
d121 1
a121 1
			write_ok = false;
d329 1
a329 1
	int nsegy;		/* length of trace in bytes		*/
d359 1
a359 1
	nsegy = nt * FSIZE + HDRBYTES;
d433 1
a433 1
void ftwigplot()
d463 1
a463 1
int cmp_indirect(int *r, int *s)
d465 2
@


1.22
log
@Deal with header fields accessed/modified down to sudoc.
@
text
@d1 1
a1 1
/* SUXEDIT: $Revision: 1.21 $; $Date: 1995/12/05 19:55:17 $	*/
d84 1
d93 1
a93 1
	cwp_Bool write_ok;	/* is file writable?			*/
d171 1
a171 1
					return;
@


1.21
log
@Cosmetics.
@
text
@d1 1
a1 1
/* SUXEDIT: $Revision: 1.20 $; $Date: 1995/10/05 16:30:12 $	*/
d41 2
@


1.20
log
@tr.ntr = 0 to force su graphics programs to count traces
@
text
@d1 1
a1 1
/* SUXEDIT: $Revision: 1.19 $; $Date: 1994/08/25 15:01:49 $	*/
d63 1
a63 1
" g [tr1 tr2] [\"opts\"]  	wiggle plot		",
d90 1
a90 1
	cwp_Bool write_ok;		/* is file writable?			*/
d324 1
a324 1
	cwp_String ptr;	/* pointer to isolate key word		*/
d326 2
a327 2
	int nsegy;	/* length of trace in bytes		*/
	Value val;	/* numerical value of key word		*/
d377 1
a377 1
	char disp_opts[256]; /* display options for suxwigb */
d387 2
a388 1
	switch(sscanf(userin + 1, "%d %d %[-a-zA-Z0-9.= ]", &n1, &n2, disp_opts)) {
@


1.19
log
@Removed copyright statement from codes that had it.
Moved self-doc line for sudoc.
@
text
@d1 1
a1 1
/* SUXEDIT: $Revision: 1.18 $; $Date: 93/11/29 14:20:05 $	*/
d391 1
d402 1
d437 1
@


1.18
log
@changed helpp helpptr
@
text
@d1 1
a1 1
/* SUXEDIT: $Revision: 1.17 $; $Date: 93/11/12 13:31:39 $	*/
a2 13
/*----------------------------------------------------------------------
 * Copyright (c) Colorado School of Mines, 1990.
 * All rights reserved.
 *
 * This code is part of SU.  SU stands for Seismic Unix, a processing line
 * developed at the Colorado School of Mines, partially based on Stanford
 * Exploration Project (SEP) software.  Inquiries should be addressed to:
 *
 *  Jack K. Cohen, Center for Wave Phenomena, Colorado School of Mines,
 *  Golden, CO 80401  (jkc@@dix.mines.colorado.edu)
 *----------------------------------------------------------------------
 */

a35 1
/**************** end self doc ***********************************/
d42 1
@


1.17
log
@changed help menu to a char * array
@
text
@d1 1
a1 1
/* SUXEDIT: $Revision: 1.16 $; $Date: 93/08/13 10:28:48 $	*/
d65 1
d84 1
a84 1
char **helpp = help ;		/* help pointer */
d314 2
a315 2
			while(*helpp) fprintf(stderr,"%s\n", *helpp++);
			helpp = help;
d319 2
a320 2
			while(*helpp) fprintf(stderr,"%s\n", *helpp++);
			helpp = help;
@


1.16
log
@changed Bool to cwp_Bool
@
text
@d1 1
a1 1
/* SUXEDIT: $Revision: 1.15 $; $Date: 93/08/09 15:20:16 $	*/
d65 17
a81 17
cwp_String help =
"					\n"
" n		read in trace #n	\n"
" <CR>		step			\n"
" +		next trace;   step -> +1\n"
" -		prev trace;   step -> -1\n"
" dN		adv N traces; step -> N	\n"
" %		percentiles		\n"
" r		ranks			\n"
" p [n1 [n2]]  	tabplot			\n"
" g [tr1 tr2] [\"opts\"]  	wiggle plot		\n"
" f		wig plot Fourier Transf \n"
" ! key=val  	modify field		\n"
" ?		print this file		\n"
" q		quit			\n"
"					\n"
;
d83 2
d313 2
a314 1
			printf("%s\n", help);
d317 3
a319 1
			warn("bad key %s\n%s", userin, help);
@


1.15
log
@changed String to cwp_String
@
text
@d1 1
a1 1
/* SUXEDIT: $Revision: 1.14 $; $Date: 93/05/26 12:56:55 $	*/
d100 1
a100 1
	Bool write_ok;		/* is file writable?			*/
@


1.14
log
@added Tony Kocurko's additions
@
text
@d1 1
a1 1
/* SUXEDIT: $Revision: 1.13 $; $Date: 92/10/23 15:03:24 $	*/
d65 1
a65 1
String help =
d329 4
a332 4
	String keyword;	/* buffer and then header key word	*/
	String keyval;	/* header key value in ascii		*/
	String ptr;	/* pointer to isolate key word		*/
	String type;	/* type of key word			*/
@


1.13
log
@new selfdoc installed
@
text
@d1 1
a1 1
/* SUXEDIT: $Revision: 1.12 $; $Date: 92/04/03 16:11:33 $	*/
d39 2
a40 1
" g [tr1 tr2]  	wiggle plot (graph) the trace [traces tr1 to tr2]	",
d53 1
a53 1
 *	CWP: Jack
d75 1
a75 1
" g [tr1 tr2]  	wiggle plot		\n"
d384 1
d393 2
a394 1
	switch(sscanf(userin + 1, "%d %d", &n1, &n2)) {
d401 1
d418 1
a418 1
	sprintf(cmd, "suxwigb <%s", tmpwig);
@


1.12
log
@Better handling of situation where go off end of data.
No longer groan and die when non-existant trace is accessed.
@
text
@d1 1
a1 1
/* SUXEDIT: $Revision: 1.11 $; $Date: 92/04/01 13:38:56 $	*/
d23 25
a47 25
String sdoc =
" 									\n"
" SUXEDIT - examine segy diskfiles and edit headers			\n"
" 									\n"
" suxedit diskfile  (open for possible header modification if writable)	\n"
" suxedit <diskfile  (open read only)					\n"
" 							        	\n"
" The following commands are recognized:				\n"
" number	read in that trace and print nonzero header words	\n"
" <CR>		go to trace one step away (step is initially -1)	\n"
" +		read in next trace (step is set to +1)			\n"
" -		read in previous trace (step is set to -1)		\n"
" dN		advance N traces (step is set to N)			\n"
" %		print some percentiles of the trace data		\n"
" r		print some ranks (rank[j] = jth smallest datum) 	\n"
" p [n1 [n2]]  	tab plot sample n1 to n2 on current trace		\n"
" g [tr1 tr2]  	wiggle plot (graph) the trace [traces tr1 to tr2]	\n"
" f		wiggle plot the Fourier transform of the trace		\n"
" ! key=val  	change a value in a field (e.g. ! tracr=101)		\n"
" ?		print help file						\n"
" q		quit							\n"
" 									\n"
" NOTE: sample numbers are 1-based (first sample is 1).			\n"
" 									\n"
;
d104 1
a104 1
	askdoc(1);
@


1.11
log
@Fixed bug with one trace when step to end of data set.
@
text
@d1 1
a1 1
/* SUXEDIT: $Revision: 1.10 $; $Date: 92/02/14 09:04:51 $	*/
d161 4
d199 3
a201 6
				if (ntr == 1) itr = 0;
				else {
				    step = -1;
			    	    itr = ntr - 2;
				    printf("\nBounced off end of data:\n\n");
				}
d210 3
a212 6
				if (ntr == 1) itr = 0;
				else {
				    step = 1;
				    itr = 2;
				    printf("\nBounced off end of data:\n\n");
				}
d220 4
a223 7
			if (itr < 0 || itr > ntr - 1) {
				if (ntr == 1) itr = 0;
				else {
				    step *= -1;
				    itr += 2*step;
				    printf("\nBounced off end of data:\n\n");
				}
d225 5
d233 16
a300 11
		break;
		case 'd':
			step = eatoi(userin + 1);
			itr += step;
			if (itr < 0 || itr > ntr - 1) {
				step *= -1;
				itr += 2*step;
				printf("\nBounced off end of data:\n\n");
			}
			fgettra(infp, &tr, itr);
			printheader(&tr);
@


1.10
log
@changed suspec1 to suspecfx
@
text
@d1 1
a1 1
/* SUXEDIT: $Revision: 1.9 $; $Date: 91/09/05 09:07:34 $	*/
d195 6
a200 3
				step = -1;
				itr = ntr - 2;
				printf("\nBounced off end of data:\n\n");
d209 6
a214 3
				step = 1;
				itr = 2;
				printf("\nBounced off end of data:\n\n");
d223 6
a228 3
				step *= -1;
				itr += 2*step;
				printf("\nBounced off end of data:\n\n");
@


1.9
log
@Need errno.h
@
text
@d1 1
a1 1
/* SUXEDIT: $Revision: 1.8 $; $Date: 91/09/05 08:52:36 $	*/
d419 1
a419 1
	FILE *fftfp;		/* fp for suspec1 input file		*/
d427 1
a427 1
	/* Set up system call for suspec1 */
d429 1
a429 1
	sprintf(cmd, "suspec1 <%s | suxwigb", tmpwig);
@


1.8
log
@string -> String and so forth
@
text
@d1 1
a1 1
/* SUXEDIT: $Revision: 1.5 $; $Date: 90/12/23 20:02:58 $	*/
d19 2
@


1.7
log
@Found way to stop ansi police complaint on the declaration
of the qsort comparison function.
@
text
@d21 1
a21 1
string sdoc =
d62 1
a62 1
string help =
d97 1
a97 1
	bool write_ok;		/* is file writable?			*/
d312 4
a315 4
	string keyword;	/* buffer and then header key word	*/
	string keyval;	/* header key value in ascii		*/
	string ptr;	/* pointer to isolate key word		*/
	string type;	/* type of key word			*/
d317 1
a317 1
	value val;	/* numerical value of key word		*/
d339 1
a339 2
	    syswarn("failed to convert %s to numeric, field not changed",
								keyval);
@


1.6
log
@Removed unnecessary casts from qsort call
@
text
@d86 1
a86 1
int cmp_indirect(int *r, int *s);
@


1.5
log
@Forgot to rewind files before system call
@
text
@d1 1
a1 1
/* SUXEDIT: $Revision: 1.4 $; $Date: 90/12/23 16:26:23 $	*/
d140 1
a140 3
	for (i = 0; i < nt; ++i) {
		rank[i] = i;
	}
d224 1
a224 1
			qsort((char *) rank, (uint) nt, FSIZE, cmp_indirect);
d245 1
a245 1
			qsort((char *) rank, (uint) nt, FSIZE, cmp_indirect);
@


1.4
log
@fd -> fp and using gettra macro
@
text
@d1 1
a1 1
/* SUXEDIT: $Revision: 1.3 $; $Date: 90/12/18 20:12:21 $	*/
d400 1
d428 2
a429 1
	/* Set up system call for suamp */
@


1.3
log
@Using suspec1.
@
text
@d1 1
a1 1
/* SUXEDIT: $Revision: 1.2 $; $Date: 90/12/18 16:39:28 $	*/
d59 1
a59 1
int infd;		/* file descriptor of trace file	*/
d111 1
a111 1
		infd = STDIN;
d119 1
a119 1
			infd = eopen(argv[1], O_RDWR, 0666);
d124 1
a124 1
			infd = eopen(argv[1], O_RDONLY, 0666);
d135 1
a135 1
	ntr = gettra(infd, &tr, 0);
d148 1
a148 1
	gettra(infd, &tr, itr);
d151 1
a151 3
	if (-1 == fflush(stdout)) {
		err("fflush of stdout failed");
	}
d161 1
a161 1
			gettra(infd, &tr, itr);
d199 1
a199 1
			gettra(infd, &tr, itr);
d210 1
a210 1
			gettra(infd, &tr, itr);
d221 1
a221 1
			gettra(infd, &tr, itr);
d285 1
a285 1
			gettra(infd, &tr, itr);
d303 1
a303 3
		if (-1 == fflush(stdout)) {
			err("fflush of stdout failed");
		}
d350 2
a351 5
	if (-1 == lseek(infd, (long) (-nsegy), SEEK_CUR)) {
		syswarn("lseek error, field not changed");
		return;
	}
	ewrite(infd, (char *) (&tr), HDRBYTES);
d354 1
a354 4
	if (-1 == lseek(infd, (long) nsegy, SEEK_CUR)) {
		syswarn("lseek error after changing field");
		return;
	}
a370 1
	int wigfd;		/* ... its file id			*/
a374 1
	wigfd = fileno(wigfp);
d381 2
a382 2
		gettra(infd, &tr, n1);
		fputtr(wigfd, &tr); 
d390 2
a391 2
			gettra(infd, &tr, i);
			fputtr(wigfd, &tr); 
d395 1
a395 1
		fputtr(wigfd, &tr); 
d404 1
a404 1
	eclose(wigfd);
a419 1
	int fftfd;		/* ... its file id			*/
a423 1
	fftfd = fileno(fftfp);
d425 1
a425 1
	fputtr(fftfd, &tr);
d432 1
a432 1
	eclose(fftfd);
@


1.2
log
@Make it know it's right name in the self-doc
@
text
@d1 1
a1 1
/* SUXEDIT: $Revision: 1.1 $; $Date: 90/12/18 16:37:30 $	*/
d380 2
a381 2
	FILE *fpwig;		/* fp for suxwigb input file		*/
	int fdwig;		/* ... its file id			*/
d385 2
a386 2
	fpwig = efopen(etmpnam(tmpwig), "w+");
	fdwig = fileno(fpwig);
d394 1
a394 1
		fputtr(fdwig, &tr); 
d403 1
a403 1
			fputtr(fdwig, &tr); 
d407 1
a407 1
		fputtr(fdwig, &tr); 
d416 1
a416 1
	eclose(fdwig);
a420 2
	sprintf(cmd, "%s/clg", CWPBIN);
	system(cmd);	/* clear screen */
d431 2
a432 2
	FILE *fpfft;		/* fp for sufft input file		*/
	int fdfft;		/* ... its file id			*/
d436 2
a437 2
	fpfft = efopen(tmpnam(tmpwig), "w+");
	fdfft = fileno(fpfft);
d439 1
a439 1
	fputtr(fdfft, &tr);
d442 1
a442 2
	sprintf(cmd,
	    "sufft <%s | suamp | suxwigb", tmpwig);
d446 1
a446 1
	eclose(fdfft);
a450 2
	sprintf(cmd, "%s/clg", CWPBIN);
	system(cmd);	/* clear screen */
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/* SUEDIT: $Revision: 1.7 $; $Date: 90/12/18 16:33:43 $	*/
d23 1
a23 1
" SUEDIT - examine segy diskfiles and edit headers			\n"
d25 2
a26 2
" suedit diskfile  (open for possible header modification if writable)	\n"
" suedit <diskfile  (open read only)					\n"
@
