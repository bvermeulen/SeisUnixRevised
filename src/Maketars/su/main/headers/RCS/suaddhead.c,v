head	1.21;
access;
symbols;
locks; strict;
comment	@ * @;


1.21
date	2011.11.16.22.10.29;	author john;	state Exp;
branches;
next	1.20;

1.20
date	2011.11.12.00.20.05;	author john;	state Exp;
branches;
next	1.19;

1.19
date	2011.01.21.20.06.59;	author john;	state Exp;
branches;
next	1.18;

1.18
date	2008.05.05.19.13.51;	author john;	state Exp;
branches;
next	1.17;

1.17
date	2005.10.04.16.42.43;	author john;	state Exp;
branches;
next	1.16;

1.16
date	2003.06.09.16.17.07;	author john;	state Exp;
branches;
next	1.15;

1.15
date	97.07.28.22.36.46;	author john;	state Exp;
branches;
next	1.14;

1.14
date	96.09.04.19.22.36;	author jkc;	state Exp;
branches;
next	1.13;

1.13
date	96.01.23.22.16.29;	author jkc;	state Exp;
branches;
next	1.12;

1.12
date	95.08.04.18.22.31;	author jkc;	state Exp;
branches;
next	1.11;

1.11
date	94.08.25.14.58.41;	author jkc;	state Exp;
branches;
next	1.10;

1.10
date	94.07.15.14.05.38;	author john;	state Exp;
branches;
next	1.9;

1.9
date	92.10.26.13.33.30;	author john;	state Exp;
branches;
next	1.8;

1.8
date	91.09.05.08.49.23;	author jkcohen;	state Exp;
branches;
next	1.7;

1.7
date	90.12.05.10.10.05;	author jkc;	state Exp;
branches;
next	1.6;

1.6
date	90.11.17.15.49.06;	author jkc;	state Exp;
branches;
next	1.5;

1.5
date	90.11.17.15.04.54;	author jkc;	state Exp;
branches;
next	1.4;

1.4
date	90.07.23.21.28.36;	author jkc;	state Exp;
branches;
next	1.3;

1.3
date	90.05.29.16.25.10;	author jkc;	state Exp;
branches;
next	1.2;

1.2
date	90.05.03.10.44.04;	author jkc;	state Exp;
branches;
next	1.1;

1.1
date	90.04.16.14.13.56;	author jkc;	state Exp;
branches;
next	;


desc
@Add segy header to data
(probably will eventually add some internal header instead)
@


1.21
log
@added Reg Beardsley's checkpar() call
@
text
@/* Copyright (c) Colorado School of Mines, 2011.*/
/* All rights reserved.                       */

/* SUADDHEAD: $Revision: 1.19 $ ; $Date: 2011/01/21 20:06:59 $		*/

#include "su.h"
#include "segy.h"
#include "header.h"

/*********************** self documentation ******************************/
char *sdoc[] = {
" 									",
" SUADDHEAD - put headers on bare traces and set the tracl and ns fields",
" 									",
" suaddhead <stdin >stdout ns= ftn=0					",
" 									",
" Required parameter:							",
" 	ns=the number of samples per trace				",
" 									",
" Optional parameter:							",
#ifdef SU_LINE_HEADER
"	head=           file to read headers in				",
"                       not supplied --  will generate headers 		",
"                       given        --  will read in headers and attach",
"                                        floating point arrays to form 	",
"                                        traces 			", 
"                       (head can be created via sustrip program)	",
#endif
" 	ftn=0		Fortran flag					",
" 			0 = data written unformatted from C		",
" 			1 = data written unformatted from Fortran	",
"       tsort=3         trace sorting code:				",
"                                1 = as recorded (no sorting)		",
"                                2 = CDP ensemble			",
"                                3 = single fold continuous profile	",
"                                4 = horizontally stacked		", 
"       ntrpr=1         number of data traces per record		",
"                       if tsort=2, this is the number of traces per cdp", 
" 									",
" Trace header fields set: ns, tracl					",
" Use sushw/suchw to set other needed fields.				",
" 									",
" Caution: An incorrect ns field will munge subsequent processing.	",
" Note:    n1 and nt are acceptable aliases for ns.			",
" 									",
" Example:								",
" suaddhead ns=1024 <bare_traces | sushw key=dt a=4000 >segy_traces	",
" 									",
" This command line adds headers with ns=1024 samples.  The second part	",
" of the pipe sets the trace header field dt to 4 ms.	See also the	",
" selfdocs of related programs  sustrip and supaste.			",
" See:   sudoc supaste							",
" Related Programs:  supaste, sustrip 					",
NULL};
/**************** end self doc *******************************************/

/* Credits:
 *	SEP: Einar Kjartansson   c. 1985
 *	CWP: Jack K. Cohen      April 1990
 *      UNOCAL: Zhiming Li	add ascii and binary headers
 */


extern unsigned char su_text_hdr[3200];
extern bhed su_binary_hdr;

segy tr;

int
main(int argc, char **argv)
{
	int ns;			/* number of samples			*/
	int ftn;		/* ftn=1 for Fortran			*/
	char junk[ISIZE];	/* to discard ftn junk  		*/
	cwp_Bool isreading=cwp_true;    /* true/false flag for while    */

	int ihead=0;		/* counter */
	int iread=0;		/* counter */
	int tsort, ntrpr;	/* Unocal header fields */
#ifdef SU_LINE_HEADER
	cwp_String head;	/* name of file holding headers         */
	FILE *infp=stdin, *outfp=stdout; /* input and output files 	*/
#endif
	FILE *headfp=NULL;	/* . file pointer for pointers		*/

	/* Initialize */
	initargs(argc, argv);
	requestdoc(1);


	/* Get parameters */
	if (!getparint("n1", &ns)
	 && !getparint("nt", &ns)
	 && !getparint("ns", &ns))  err("must specify ns=");
	if (!getparint("ftn", &ftn))	ftn = 0;
	if (ftn != 0 && ftn != 1)	err("ftn=%d must be 0 or 1", ftn);
	if (!getparint("ntrpr", &ntrpr)) ntrpr = 1;
	if (!getparint("tsort", &tsort)) tsort = 3;

#ifdef SU_LINE_HEADER

	if (!getparstring("head"  , &head)) {
		ihead = 0;

	} else {
		ihead = 1;
		if( !(headfp=efopen(head, "r")) ){

                   err( "unable to open header file " );
                }
              
	}
        checkpars();

	/* create id headers */
	if(ihead==0) {
		su_binary_hdr.format = 1;
		su_binary_hdr.ntrpr = ntrpr;
		su_binary_hdr.tsort = tsort;
		su_binary_hdr.fold = ntrpr;
	} else {
		fgethdr(headfp,&su_text_hdr,&su_binary_hdr);
	}

	su_binary_hdr.hns = ns;

#endif
		
	while (isreading==cwp_true) {
		static int tracl = 0;	/* one-based trace number */

		/* If Fortran data, read past the record size bytes */
		if (ftn) efread(junk, ISIZE, 1, stdin);

		/* Do read of data for the segy */
		iread = fread((char *) tr.data, FSIZE, ns, stdin);
		if(iread!=ns) {
			return(CWP_Exit());

		} else {
			if(ihead==0) {
				tr.tracl = ++tracl;
			} else {
				efread(&tr, 1, HDRBYTES, headfp);
			}
			tr.ns = ns;
			tr.trid = TREAL;
			puttr(&tr);
		}

		/* If Fortran data, read past the record size bytes */
		if (ftn) efread(junk, ISIZE, 1, stdin);
	}

	return(CWP_Exit());
}
@


1.20
log
@copyright
@
text
@d113 1
a113 1

@


1.19
log
@selfdoc updates
@
text
@d1 4
a4 1
/* SUADDHEAD: $Revision: 1.18 $ ; $Date: 2008/05/05 19:13:51 $		*/
@


1.18
log
@cosmetic change
@
text
@d1 1
a1 1
/* SUADDHEAD: $Revision: 1.17 $ ; $Date: 2005/10/04 16:42:43 $		*/
d47 4
a50 2
" of the pipe sets the trace header field dt to 4 ms.			",
" 									",
d55 2
a56 2
 *	SEP: Einar Kjartansson
 *	CWP: Jack K. Cohen
@


1.17
log
@4 Oct 2005
@
text
@d1 1
a1 1
/* SUADDHEAD: $Revision: 1.2 $ ; $Date: 2005/06/14 15:50:11 $		*/
d8 1
a8 1
char*  sdoc[] = {
@


1.16
log
@9 June 2003
@
text
@d1 1
a1 1
/* SUADDHEAD: $Revision: 1.15 $ ; $Date: 1997/07/28 22:36:46 $		*/
d5 1
d8 1
a8 1
char *sdoc[] = {
d18 8
d29 7
d50 1
d55 1
a55 2
 *
 * Trace header fields set: ns, tracl
d58 3
a60 1
/**************** end self doc *******************************************/
d70 1
a70 1
	cwp_Bool isreading=cwp_true;	/* true/false flag for while	*/
d72 8
a89 1
	tr.ns = ns;
d92 27
d120 1
d122 2
d130 15
a144 4
		/* Do read of data for the segy -- quit on <= 0 items */
		if (0 >= efread((char *) tr.data, FSIZE, ns, stdin)) break;
		tr.tracl = ++tracl;
		puttr(&tr);
@


1.15
log
@changes suggested by Stew Levin to silence SGI compiler warnings, etc
@
text
@d1 1
a1 1
/* SUADDHEAD: $Revision: 1.14 $ ; $Date: 1996/09/04 19:22:36 $		*/
d84 1
a84 1
	return EXIT_SUCCESS;
@


1.14
log
@Fixed -Wall complaint.
@
text
@d1 1
a1 1
/* SUADDHEAD: $Revision: 1.13 $ ; $Date: 1996/01/23 22:16:29 $		*/
d52 1
d69 1
a69 1
	while (TRUE) {
@


1.13
log
@Moved traces accessed, etc. down to sudoc.
@
text
@d1 1
a1 1
/* SUADDHEAD: $Revision: 1.12 $ ; $Date: 1995/08/04 18:22:31 $		*/
d46 1
@


1.12
log
@Simplified the code -- thx to Stew Levin
@
text
@d1 1
a1 1
/* SUADDHEAD: $Revision: 1.11 $ ; $Date: 1994/08/25 14:58:41 $		*/
d38 2
@


1.11
log
@Removed copyright statement from codes that had it.
Moved self-doc line for sudoc.
@
text
@d1 1
a1 1
/* SUADDHEAD: $Revision: 1.10 $ ; $Date: 94/07/15 14:05:38 $		*/
d71 4
a74 8
		/* Do read of data for the segy */
		switch (efread((char *) tr.data, FSIZE, ns, stdin)) {
		case 0: /* finished */
			return EXIT_SUCCESS;
		default:
			tr.tracl = ++tracl;
			puttr(&tr);
		}
@


1.10
log
@cosmetic
@
text
@d1 1
a1 1
/* SUADDHEAD: $Revision: 1.9 $ ; $Date: 92/10/26 13:33:30 $		*/
@


1.9
log
@new selfdoc installed
@
text
@d1 1
a1 1
/* SUADDHEAD: $Revision: 1.8 $ ; $Date: 91/09/05 08:49:23 $		*/
a2 13
/*----------------------------------------------------------------------
 * Copyright (c) Colorado School of Mines, 1990.
 * All rights reserved.
 *
 * This code is part of SU.  SU stands for Seismic Unix, a processing line
 * developed at the Colorado School of Mines, partially based on Stanford
 * Exploration Project (SEP) software.  Inquiries should be addressed to:
 *
 *  Jack K. Cohen, Center for Wave Phenomena, Colorado School of Mines,
 *  Golden, CO 80401  (jkc@@dix.mines.colorado.edu)
 *----------------------------------------------------------------------
 */

a33 1
/**************** end self doc *******************************************/
d36 2
a37 2
 *	SEP: Einar
 *	CWP: Jack
d40 1
@


1.8
log
@string -> String and so forth
@
text
@d1 1
a1 1
/* SUADDHEAD: $Revision: 1.7 $ ; $Date: 90/12/05 10:10:05 $		*/
d20 27
a46 27
String sdoc =
" 									\n"
" SUADDHEAD - put headers on bare traces and set the tracl and ns fields\n"
" 									\n"
" suaddhead <stdin >stdout ns= ftn=0					\n"
" 									\n"
" Required parameter:							\n"
" 	ns=the number of samples per trace				\n"
" 									\n"
" Optional parameter:							\n"
" 	ftn=0		Fortran flag					\n"
" 			0 = data written unformatted from C		\n"
" 			1 = data written unformatted from Fortran	\n"
" 									\n"
" Trace header fields set: ns, tracl					\n"
" Use sushw/suchw to set other needed fields.				\n"
" 									\n"
" Caution: An incorrect ns field will munge subsequent processing.	\n"
" Note:    n1 and nt are acceptable aliases for ns.			\n"
" 									\n"
" Example:								\n"
" suaddhead ns=1024 <bare_traces | sushw key=dt a=4000 >segy_traces	\n"
" 									\n"
" This command line adds headers with ns=1024 samples.  The second part	\n"
" of the pipe sets the trace header field dt to 4 ms.			\n"
" 									\n"
;
d66 1
a66 1
	askdoc(1);
@


1.7
log
@"knows" about aliases n1 or nt for ns
@
text
@d1 1
a1 1
/* SUADDHEAD: $Revision: 1.6 $ ; $Date: 90/11/17 15:49:06 $		*/
d20 1
a20 1
string sdoc =
@


1.6
log
@Tweak
@
text
@d1 1
a1 1
/* SUADDHEAD: $Revision: 1.5 $ ; $Date: 90/11/17 15:04:54 $		*/
d34 2
a35 2
" The ns field and the tracl field are set.  The other fields are	\n"
" zeroed out.  Sushw and suchw can then be used to set other fields.	\n"
d37 2
a38 2
" Caution:								\n"
" 	An incorrect ns field will munge subsequent processing.		\n"
d44 1
a44 1
" of the pipe sets dt to 4 ms.						\n"
a51 5
 *
 * Caveats:
 *	Only sets the ns field (mandatory user input), and the tracl field.
 *	The other fields are zeroed out.
 *	Sushw and suchw can be used to set or change fields.
d70 4
a73 1
	MUSTGETPARINT("ns", &ns);	tr.ns = ns;
@


1.5
log
@ANSI C tweaks and eliminate use of pfread, ushort, long.
@
text
@d1 1
a1 1
/* SUADDHEAD: $Revision: 1.4 $ ; $Date: 90/07/23 21:28:36 $		*/
d75 1
a75 1
	MUSTIGETPAR("ns", &ns);		tr.ns = ns;
@


1.4
log
@Tweak
@
text
@d1 1
a1 1
/* SUADDHEAD: $Revision: 1.3 $ ; $Date: 90/05/29 16:25:10 $		*/
d20 27
a46 27
string sdoc = "\
									\n\
SUADDHEAD - puts headers on bare traces and sets the tracl and ns fields\n\
									\n\
suaddhead <stdin >stdout ns= ftn=0					\n\
									\n\
Required parameter:							\n\
	ns=the number of samples per trace				\n\
									\n\
Optional parameter:							\n\
	ftn=0		Fortran flag					\n\
			0 = data written unformatted from C		\n\
			1 = data written unformatted from Fortran	\n\
									\n\
The ns field and the tracl field are set.  The other fields are		\n\
zeroed out.  Sushw and suchw can then be used to set other fields.	\n\
									\n\
Caution:								\n\
	An incorrect ns field will munge subsequent processing.		\n\
									\n\
Example:								\n\
suaddhead ns=1024 <bare_traces | sushw key=dt a=4000 >segy_traces	\n\
									\n\
This command line adds headers with ns=1024 samples.  The second part	\n\
of the pipe sets dt to 4 ms.						\n\
									\n\
";
a56 2
 *
 *
d64 1
a64 2
	ushort ns;		/* number of samples			*/
	long tracl;		/* trace number (one-based)		*/
a66 3
	size_t (*rdfn) ();	/* pointer to efread() or pfread()	*/
	size_t efread();	/* must be declared to use pointer	*/
	size_t pfread();	/* must be declared to use pointer	*/
a73 19
	/* Set appropriate read function for input filetype.  Here, we	*/
	/* use a buffered read with system error checks.  The arguments	*/
	/* are the same as for fread: ptr, itemsize, nitems, stream	*/
	switch (filestat(STDIN)) {
	case TTY:
		err("input can't be tty");
	break;
	case DISK:
	case TAPE:
		rdfn = efread;
	break;
	case PIPE:
		rdfn = pfread;
	break;
	default:
		err("undefined input filetype %s", printstat(STDIN));
	break;
	}

d75 3
a77 5
	MUSTUGETPAR("ns", &ns);
	if (!igetpar("ftn", &ftn))	ftn = 0;
	if (ftn != 0 && ftn != 1) {
		err("ftn=%d must be 0 or 1", ftn);
	}
a78 1
	tr.ns = ns;
a79 1
	tracl = 0;
d81 1
d84 1
a84 1
		if (ftn) (*rdfn) (junk, ISIZE, 1, stdin);
d86 2
a87 2
		/* Do appropriate read of data for the segy */
		switch ((*rdfn) ((char *) tr.data, FSIZE, ns, stdin)) {
d96 1
a96 1
		if (ftn) (*rdfn) (junk, ISIZE, 1, stdin);
@


1.3
log
@fixed type of rdfn
@
text
@d1 1
a1 1
/* SUADDHEAD: $Revision: 1.2 $ ; $Date: 90/05/03 10:44:04 $		*/
d69 1
a69 1
	char junk[sizeof(int)];	/* to discard ftn junk  		*/
@


1.2
log
@migawd, after all this time had size&count args reversed in freads
(doesn't matter of course, but poor form).
@
text
@d1 1
a1 1
/* SUADDHEAD: $Revision: 1.1 $ ; $Date: 90/04/16 14:13:56 $		*/
d70 1
a70 1
	int (*rdfn) ();		/* pointer to efread() or pfread()	*/
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/* SUADDHEAD: $Revision: 2.10 $ ; $Date: 89/05/25 16:49:23 $		*/
d4 1
a4 1
 * Copyright (c) Colorado School of Mines, 1989.
d12 1
a12 1
 *  Golden, CO 80401  (isis!csm9a!jkcohen)
d27 1
a27 1
	ns = the number of samples per trace				\n\
d30 1
a30 1
	ftn = 0		Fortran flag					\n\
a60 5
/* Embed Revision Control System identifier strings */
static string progid =
	"   $Source: /src/su/src/RCS/suaddhead.c,v $";
static string revid =
	"   $Revision: 2.10 $ ; $Date: 89/05/25 16:49:23 $";
a61 2


d64 1
a64 2
main(argc, argv)
int argc; char **argv;
d71 2
a72 2
	int efread();		/* must be declared to use pointer	*/
	int pfread();		/* must be declared to use pointer	*/
d75 1
a75 1
	/* Initialize SU */
a76 5
	if (!igetpar("ID", &ID))	ID = 0;
	if (ID) {
		(void) fprintf(stderr, "%s\n", progid);
		(void) fprintf(stderr, "%s\n", revid);
	}
d83 1
a83 1
	switch(statfil(STDIN)) {
d95 1
a95 1
		err("undefined input filetype %s", statprint(STDIN));
d112 1
a112 1
		if (ftn) (*rdfn) (junk, 1, ISIZE, stdin);
d115 1
a115 1
		switch((*rdfn) ((char *) tr.data, FSIZE, ns, stdin)) {
d117 1
a117 1
			return SUCCEED;
d124 1
a124 1
		if (ftn) (*rdfn) (junk, 1, ISIZE, stdin);
d126 2
@
