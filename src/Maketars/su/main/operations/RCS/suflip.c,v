head	1.31;
access;
symbols;
locks; strict;
comment	@ * @;


1.31
date	2011.11.16.23.09.52;	author john;	state Exp;
branches;
next	1.30;

1.30
date	2011.11.12.00.23.17;	author john;	state Exp;
branches;
next	1.29;

1.29
date	2003.06.09.16.17.07;	author john;	state Exp;
branches;
next	1.28;

1.28
date	98.08.24.19.41.29;	author john;	state Exp;
branches;
next	1.27;

1.27
date	97.07.28.22.36.46;	author john;	state Exp;
branches;
next	1.26;

1.26
date	96.09.09.15.42.17;	author jkc;	state Exp;
branches;
next	1.25;

1.25
date	96.09.04.22.55.37;	author jkc;	state Exp;
branches;
next	1.24;

1.24
date	96.08.11.20.04.50;	author jkc;	state Exp;
branches;
next	1.23;

1.23
date	96.08.02.21.39.38;	author jkc;	state Exp;
branches;
next	1.22;

1.22
date	96.08.02.19.25.54;	author jkc;	state Exp;
branches;
next	1.21;

1.21
date	96.08.02.19.20.58;	author jkc;	state Exp;
branches;
next	1.20;

1.20
date	96.08.02.02.45.48;	author jkc;	state Exp;
branches;
next	1.19;

1.19
date	96.08.02.02.29.02;	author jkc;	state Exp;
branches;
next	1.18;

1.18
date	96.08.02.01.39.17;	author jkc;	state Exp;
branches;
next	1.17;

1.17
date	96.08.01.21.14.59;	author jkc;	state Exp;
branches;
next	1.16;

1.16
date	96.08.01.16.08.32;	author jkc;	state Exp;
branches;
next	1.15;

1.15
date	96.02.21.23.39.07;	author jkc;	state Exp;
branches;
next	1.14;

1.14
date	96.02.21.22.44.21;	author jkc;	state Exp;
branches;
next	1.13;

1.13
date	96.01.25.19.57.09;	author jkc;	state Exp;
branches;
next	1.12;

1.12
date	95.08.02.19.48.42;	author jkc;	state Exp;
branches;
next	1.11;

1.11
date	94.08.25.14.59.22;	author jkc;	state Exp;
branches;
next	1.10;

1.10
date	93.11.24.15.08.43;	author john;	state Exp;
branches;
next	1.9;

1.9
date	92.10.22.15.59.50;	author john;	state Exp;
branches;
next	1.8;

1.8
date	92.10.12.14.50.31;	author jkc;	state Exp;
branches;
next	1.7;

1.7
date	91.09.05.08.50.27;	author jkcohen;	state Exp;
branches;
next	1.6;

1.6
date	91.06.28.11.23.19;	author jkcohen;	state Exp;
branches;
next	1.5;

1.5
date	90.12.23.16.32.55;	author jkc;	state Exp;
branches;
next	1.4;

1.4
date	90.11.15.10.43.27;	author jkc;	state Exp;
branches;
next	1.3;

1.3
date	90.05.28.11.05.18;	author jkc;	state Exp;
branches;
next	1.2;

1.2
date	90.05.28.10.45.53;	author jkc;	state Exp;
branches;
next	1.1;

1.1
date	90.04.17.11.40.28;	author jkc;	state Exp;
branches;
next	;


desc
@rotate or reflect su data
@


1.31
log
@added Reg Beardsley's checkpar()
@
text
@/* Copyright (c) Colorado School of Mines, 2011.*/
/* All rights reserved.                       */

/* SUFLIP: $Revision: 1.29 $ ; $Date: 2003/06/09 16:17:07 $	*/

#include "su.h"
#include "segy.h"
#include "header.h"
#include <signal.h>

/*********************** self documentation **********************/
char *sdoc[] = {
" 								",
" SUFLIP - flip a data set in various ways			",
" 								",
" suflip <data1 >data2 flip=1 verbose=0				",
" 								",
" Required parameters:						",
" 	none							",
" 								",
" Optional parameters:						",
" 	flip=1 	rotational sense of flip			",
" 			+1  = flip 90 deg clockwise		",
" 			-1  = flip 90 deg counter-clockwise	",
" 			 0  = transpose data			",
" 			 2  = flip right-to-left		",
" 			 3  = flip top-to-bottom		",
" 	tmpdir=	 if non-empty, use the value as a directory path",
"		 prefix for storing temporary files; else if	",
"	         the CWP_TMPDIR environment variable is set use	",
"	         its value for the path; else use tmpfile()	",
" 								",
" 	verbose=0	verbose = 1 echoes flip info		",
" 								",
" NOTE:  tr.dt header field is lost if flip=-1,+1.  It can be	",
"        reset using sushw.					",
" 								",
" EXAMPLE PROCESSING SEQUENCES:					",
"   1.	suflip flip=-1 <data1 | sushw key=dt a=4000 >data2	",
" 								",
"   2.	suflip flip=2 <data1 | suflip flip=2 >data1_again	",
" 								",
"   3.	suflip tmpdir=/scratch <data1 | ...			",
" 								",
" Caveat:  may fail on large files.				",
NULL};

/* Credits:
 *	CWP: Chris Liner, Jack K. Cohen, John Stockwell
 *
 * Caveat:
 *	right-left flip (flip = 2) and top-bottom flip (flip = 3)
 *	don't require the matrix approach.  We sacrificed efficiency
 *	for uniform coding.
 *
 * Trace header fields accessed: ns, dt
 * Trace header fields modified: ns, dt, tracl
 */
/**************** end self doc ***********************************/

/* prototype */
void flipper(register float **indata, register float **flipdata,
		register int ncol, register int nrow, register int flip);
static void closefiles(void);

/* Globals (so can trap signal) defining temporary disk files */
char tracefile[BUFSIZ];	/* filename for the file of traces	*/
char headerfile[BUFSIZ];/* filename for the file of headers	*/
FILE *tracefp;		/* fp for trace storage file		*/
FILE *headerfp;		/* fp for header storage file		*/

segy tr;

int
main(int argc, char **argv)
{
	int flip;		/* flag dictating sense of flip		*/
	int verbose;		/* flag for echoing info		*/
	int trdt;		/* time sample rate as integer		*/
	int nt;			/* samples per trace on input		*/
	int ntr;		/* traces in input data			*/
	register int i;		/* counter			 	*/
	register float **data;	/* matrix for input data		*/
	register
	    float **flipdata;	/* matrix for flipped data		*/

	char *tmpdir;		/* directory path for tmp files		*/
	cwp_Bool istmpdir=cwp_false;/* true for user given path		*/
	
	/* Initialize */
	initargs(argc, argv);
	requestdoc(1);

	/* Set parameters */
	if (!getparint("verbose", &verbose))	verbose = 0;
	if (!getparint("flip",    &flip))    	flip = 1;
	if (flip != -1 && flip != 0 && flip != 1 && flip != 2 && flip != 3)
		err("flip = %d, flag must be -1, 0, 1, 2, or 3", flip);
	
	/* Look for user-supplied tmpdir */
	if (!getparstring("tmpdir",&tmpdir) &&
	    !(tmpdir = getenv("CWP_TMPDIR"))) tmpdir="";
	if (!STREQ(tmpdir, "") && access(tmpdir, WRITE_OK))
		err("you can't write in %s (or it doesn't exist)", tmpdir);

        checkpars();

	/* Get info from first trace */
	if (!gettr(&tr))  err("can't get first trace");
	nt = tr.ns;
	trdt = tr.dt;

	/* Store traces and headers in tempfiles while getting a count */
	if (STREQ(tmpdir,"")) {
		tracefp = etmpfile();
		headerfp = etmpfile();
		if (verbose) warn("using tmpfile() call");
	} else { /* user-supplied tmpdir */
		char directory[BUFSIZ];
		strcpy(directory, tmpdir);
		strcpy(tracefile, temporary_filename(directory));
		strcpy(headerfile, temporary_filename(directory));
		/* Trap signals so can remove temp files */
		signal(SIGINT,  (void (*) (int)) closefiles);
		signal(SIGQUIT, (void (*) (int)) closefiles);
		signal(SIGHUP,  (void (*) (int)) closefiles);
		signal(SIGTERM, (void (*) (int)) closefiles);
		tracefp = efopen(tracefile, "w+");
		headerfp = efopen(headerfile, "w+");
      		istmpdir=cwp_true;		
		if (verbose) warn("putting temporary files in %s", directory);
	}
	
	ntr = 0;
	do {
		++ntr;
		efwrite(&tr, HDRBYTES, 1, headerfp);
		efwrite(tr.data, FSIZE, nt, tracefp);
	} while (gettr(&tr));
	erewind(tracefp);
	erewind(headerfp);

	/* Allocate data matrices */
	data = ealloc2float(nt, ntr);
	if (flip == -1 || flip == 0 || flip == 1) {
		CHECK_NT("ntr",ntr);
		flipdata = ealloc2float(ntr, nt);
	} else {
		flipdata = ealloc2float(nt, ntr);
	}


	/* Load traces into the data matrix and close tmpfile */
	efread(*data, FSIZE, nt*ntr, tracefp);
	efclose(tracefp);
	if (istmpdir) eremove(tracefile);


	/* Verbose print */
	if (verbose) {
		fprintf(stderr, "\nSUFLIP:          flip = %d\n", flip);
		fprintf(stderr, "input:   samples/trace = %d", nt);
		fprintf(stderr, "    traces = %d \n", ntr);
		if (flip == 1 || flip == 0 || flip == -1) {
			fprintf(stderr, "output:  samples/trace = %d", ntr);
			fprintf(stderr, "    traces = %d \n\n", nt);
		} else {
			fprintf(stderr, "output:  samples/trace = %d", nt);
			fprintf(stderr, "    traces = %d \n\n", ntr);
		}
	}


	/* Sub does the flipping */
	flipper(data, flipdata, nt, ntr, flip); 


	/* Output the result by pulling traces off flipdata matrix */
	if (flip == -1 || flip == 0 || flip == 1) {
		for (i = 0; i < nt; i++) {
			memcpy((void *) tr.data,
			       (const void *) flipdata[i], ntr*FSIZE); 
			efread(&tr, 1, HDRBYTES, headerfp);
			tr.ns = ntr;
			tr.tracl = i + 1;
			puttr(&tr);
		}
	} else {
		for (i = 0; i < ntr; i++) {
			memcpy((void *) tr.data,
					(const void *) flipdata[i], nt*FSIZE); 
			efread(&tr, 1, HDRBYTES, headerfp);
			tr.ns = nt;
			tr.dt = trdt;
			tr.tracl = i + 1;
			puttr(&tr);
		}
	}

	efclose(headerfp);
	if (istmpdir) eremove(headerfile);
	return(CWP_Exit());
}


void flipper(register float **indata, register float **flipdata,
		register int ncol, register int nrow, int flip)
{
	register int icol, irow;

	switch (flip) {

	case -1: 	/*  flip 90 deg counter-clockwise  */

		for (irow = 0; irow < nrow; irow++) {
			for (icol = 0; icol < ncol; icol++) {
				flipdata[icol][nrow-1 - irow] =
							indata[irow][icol];
			}
		}
	break;
	case 0: 	/*  transpose  */

		for (irow = 0; irow < nrow; irow++) {
			for (icol = 0; icol < ncol; icol++) {
				flipdata[icol][irow] = indata[irow][icol];
			}
		}
	break;
	case 1: 	/*  flip 90 deg clockwise  */

		for (irow = 0; irow < nrow; irow++) {
			for (icol = 0; icol < ncol; icol++) {
				flipdata[ncol-1 - icol][irow] =
						indata[irow][icol];
			}
		}
	break;
	case 2:		/*  flip right-to-left  */

		for (irow = 0; irow < nrow; irow++) {
			for (icol = 0; icol < ncol; icol++) {
				flipdata[nrow-1 - irow][icol] =
						indata[irow][icol];
			}
		}
	break;
	case 3:		/*  flip top-to-bottom  */

		for (irow = 0; irow < nrow; irow++) {
			for (icol = 0; icol < ncol; icol++) {
				flipdata[irow][ncol-1 - icol] =
							indata[irow][icol];
			}
		}
	break;
	default:	/*  defensive programming  */

		err("%d: mysterious flip value: %d", __LINE__, flip);
	}
	return;
}

/* for graceful interrupt termination */
static void closefiles(void)
{
	efclose(headerfp);
	efclose(tracefp);
	eremove(headerfile);
	eremove(tracefile);
	exit(EXIT_FAILURE);
}
@


1.30
log
@copyright
@
text
@d106 2
@


1.29
log
@9 June 2003
@
text
@d1 4
a4 1
/* SUFLIP: $Revision: 1.28 $ ; $Date: 1998/08/24 19:41:29 $	*/
@


1.28
log
@added caveat
@
text
@d1 1
a1 1
/* SUFLIP: $Revision: 1.27 $ ; $Date: 1997/07/28 22:36:46 $	*/
d197 1
a197 1
	return EXIT_SUCCESS;
@


1.27
log
@changes suggested by Stew Levin to silence SGI compiler warnings, etc
@
text
@d1 1
a1 1
/* SUFLIP: $Revision: 1.26 $ ; $Date: 1996/09/09 15:42:17 $	*/
d42 1
@


1.26
log
@Cosmetic
@
text
@d1 1
a1 1
/* SUFLIP: $Revision: 1.25 $ ; $Date: 1996/09/04 22:55:37 $	*/
d84 1
a84 1
	cwp_Bool istmpdir=false;/* true for user given path		*/
d124 1
a124 1
      		istmpdir=true;		
@


1.25
log
@Added some more signals and an EXIT_FAILURE in closefiles,
per suaddnoise--this should be the new tmpfile standard!
@
text
@d1 1
a1 1
/* SUFLIP: $Revision: 1.24 $ ; $Date: 1996/08/11 20:04:50 $	*/
d26 1
a26 1
"		 prefix for storing temporary files; else if the",
@


1.24
log
@Removed unistd.h to par.h.
@
text
@d1 1
a1 1
/* SUFLIP: $Revision: 1.23 $ ; $Date: 1996/08/02 21:39:38 $	*/
d117 4
a120 2
		/* Handle user interrupts */
		signal(SIGINT, (void (*) (int)) closefiles);
d265 1
@


1.23
log
@Put in signal stuff to remove files on user-interrupt.
@
text
@d1 1
a1 1
/* SUFLIP: $Revision: 1.22 $ ; $Date: 1996/08/02 19:25:54 $	*/
a6 1
#include <unistd.h>
@


1.22
log
@Cosmetic
@
text
@d1 1
a1 1
/* SUFLIP: $Revision: 1.21 $ ; $Date: 1996/08/02 19:20:58 $	*/
d6 1
d61 7
a85 4
	FILE *tracefp;		/* fp for trace storage file		*/
	FILE *headerfp;		/* fp for header storage file		*/
	char tracefile[BUFSIZ];	/* filename for the file of traces	*/
	char headerfile[BUFSIZ];/* filename for the file of headers	*/
a90 1

d118 3
d123 1
a123 1
		istmpdir=true;
d255 9
@


1.21
log
@Avoid superfluous conversions of dt since it is only stored for later
use.  Fixed access() call when tmpdir not used.
@
text
@d1 1
a1 1
/* SUFLIP: $Revision: 1.20 $ ; $Date: 1996/08/02 02:45:48 $	*/
d123 1
a123 1
		 ++ntr;
@


1.20
log
@added include file to prototype access()
@
text
@d1 1
a1 1
/* SUFLIP: $Revision: 1.19 $ ; $Date: 1996/08/02 02:29:02 $	*/
a33 1
"        [programs internally use tr.dt/1000000.0]		",
d68 1
a68 1
	float dt;		/* time sample rate			*/
d97 2
a98 2
	if (access(tmpdir, WRITE_OK))
		err("you can't write in %s or it doesn't exist", tmpdir);
d103 1
a103 1
	dt = ((double) tr.dt)/1000000.0;
d181 1
a181 1
			tr.dt = dt*1000000.0;
@


1.19
log
@Added trap for illegal tmpdir.
@
text
@d1 1
a1 1
/* SUFLIP: $Revision: 1.18 $ ; $Date: 1996/08/02 01:39:17 $	*/
d6 1
@


1.18
log
@Clarified self-doc re tmpdir
@
text
@d1 1
a1 1
/* SUFLIP: $Revision: 1.17 $ ; $Date: 1996/08/01 21:14:59 $	*/
d97 2
@


1.17
log
@Now honor CWP_TMPDIR if there, unless getparred.
@
text
@d1 1
a1 1
/* SUFLIP: $Revision: 1.15 $ ; $Date: 1996/02/21 23:39:07 $	*/
d24 4
a27 5
" 	tmpdir=		use the value as a directory path	",
"			prefix for storing temporary files;	",
"			else if the CWP_TMPDIR environment	",
"			variable is set use that value instead;	",
"			else make tmpfile() calls	 	",
@


1.16
log
@Allow environmentally defined tmp dirs and also command line tmp dirs.
@
text
@d24 5
a28 4
" 	tmpdir=		if set to ENV, use the value of the	",
"			CWP_TMPDIR environment variable; if set	",
"			to anything else, use that as a		",
"			directory path for temporary files.	",
d77 1
a77 1
	char *tmpdir="";	/* directory path for tmp files		*/
d94 4
a97 4
	getparstring("tmpdir",&tmpdir);
	/* Check if CWP_TMPDIR really is set */
	if (STREQ(tmpdir, "ENV") && (getenv("CWP_TMPDIR") == NULL) )
	    strcpy(tmpdir, "");
d108 2
a109 2
		if (verbose) warn("using default tmpfile");
	} else {
d111 1
a111 4
		if (STREQ(tmpdir,"ENV"))
			strcpy(directory, getenv("CWP_TMPDIR"));
		else 
			strcpy(directory, tmpdir);
d119 1
a119 2

	/* Write headers and data to temporary files */
@


1.15
log
@Using two argument CHECK_NT macro to check the relevant time sample
quantity.
@
text
@d1 1
a1 1
/* SUFLIP: $Revision: 1.14 $ ; $Date: 1996/02/21 22:44:21 $	*/
d24 5
d40 2
d45 1
a45 1
 *	CWP: Chris, Jack
a67 2
	FILE *tracefp;		/* fp for trace storage */
	FILE *headerfp;		/* fp for header storage file		*/
d76 7
a82 1

d93 4
a96 1

d104 19
a122 2
	tracefp = etmpfile();
	headerfp = etmpfile();
d145 1
d189 2
a190 1
	
@


1.14
log
@Using CHECK_NT(ntr) macro for flips that change nt to ntr..
@
text
@d1 1
a1 1
/* SUFLIP: $Revision: 1.13 $ ; $Date: 1996/01/25 19:57:09 $	*/
d104 1
a104 1
		CHECK_NT(ntr);
@


1.13
log
@Deal with specifying header fields accessed/modified in sudoc.
@
text
@d1 1
a1 1
/* SUFLIP: $Revision: 1.12 $ ; $Date: 1995/08/02 19:48:42 $	*/
d56 1
d104 1
@


1.12
log
@Cast the integers tr.dt and/or tr.delrt and/or clones to double before
division with floating constant (which is implicitly double
precision).  Casting is needed to make some compilers happy and if we
cast to float then there will be an extra conversion to double because
of the floating constant (casting to float and writing 1000000.0F
would save a conversion, but most people find that F yucky and
efficiency is not an issue here).
Motivated by examples from Stew Levin.
@
text
@d1 1
a1 1
/* SUFLIP: $Revision: 1.11 $ ; $Date: 1994/08/25 14:59:22 $	*/
d44 3
d50 1
a50 1
/* suroutine prototype */
d137 1
a137 1
					(const void *) flipdata[i], ntr*FSIZE); 
@


1.11
log
@Removed copyright statement from codes that had it.
Moved self-doc line for sudoc.
@
text
@d1 1
a1 1
/* SUFLIP: $Revision: 1.10 $ ; $Date: 93/11/24 15:08:43 $	*/
d83 1
a83 1
	dt = (int) tr.dt/1000000.0;
@


1.10
log
@*** empty log message ***
@
text
@d1 1
a1 1
/* SUFLIP: $Revision: 1.9 $ ; $Date: 92/10/22 15:59:50 $	*/
a2 13
/*----------------------------------------------------------------------
 * Copyright (c) Colorado School of Mines, 1990.
 * All rights reserved.
 *
 * This code is part of SU.  SU stands for Seismic Unix, a processing line
 * developed at the Colorado School of Mines, partially based on Stanford
 * Exploration Project (SEP) software.  Inquiries should be addressed to:
 *
 *  Jack K. Cohen, Center for Wave Phenomena, Colorado School of Mines,
 *  Golden, CO 80401  (jkc@@dix.mines.colorado)
 *----------------------------------------------------------------------
 */

a35 1
/**************** end self doc ***********************************/
d45 1
@


1.9
log
@new selfdoc installed
@
text
@d1 1
a1 1
/* SUFLIP: $Revision: 1.8 $ ; $Date: 92/10/12 14:50:31 $	*/
d96 1
a96 1
	dt = tr.dt/1000000.0;
d146 2
a147 1
			memcpy(tr.data, flipdata[i], ntr*FSIZE); 
d155 2
a156 1
			memcpy(tr.data, flipdata[i], nt*FSIZE); 
@


1.8
log
@Don't need diskfile anymore (use tmpfile per John's suggestion).
@
text
@d1 1
a1 1
/* SUFLIP: $Revision: 1.7 $ ; $Date: 91/09/05 08:50:27 $	*/
d21 28
a48 28
String sdoc =
" 								\n"
" SUFLIP - flip a data set in various ways			\n"
" 								\n"
" suflip <data1 >data2 flip=1 verbose=0				\n"
" 								\n"
" Required parameters:						\n"
" 	none							\n"
" 								\n"
" Optional parameters:						\n"
" 	flip=1 	rotational sense of flip			\n"
" 			+1  = flip 90 deg clockwise		\n"
" 			-1  = flip 90 deg counter-clockwise	\n"
" 			 0  = transpose data			\n"
" 			 2  = flip right-to-left		\n"
" 			 3  = flip top-to-bottom		\n"
" 	verbose=0	verbose = 1 echoes flip info		\n"
" 								\n"
" NOTE:  tr.dt header field is lost if flip=-1,+1.  It can be	\n"
"        reset using sushw.					\n"
"        [programs internally use tr.dt/1000000.0]		\n"
" 								\n"
" EXAMPLE PROCESSING SEQUENCES:					\n"
"   1.	suflip flip=-1 <data1 | sushw key=dt a=4000 >data2	\n"
" 								\n"
"   2.	suflip flip=2 <data1 | suflip flip=2 >data1_again	\n"
" 								\n"
;
d83 1
a83 1
	askdoc(1);
@


1.7
log
@string -> String and so forth
@
text
@d1 1
a1 1
/* SUFLIP: $Revision: 1.5 $ ; $Date: 90/12/23 16:32:55 $	*/
d70 2
a71 1
	FILE *hdrfp;		/* fp for header storage file		*/
a73 1
	int ntsize; 		/* ... measured in bytes		*/
a74 1
	int ntrsize; 		/* ... measured in bytes		*/
d93 3
a95 6
	/* Prepare temporary file to hold headers */
	hdrfp = tmpfile();


	/* Get info from first trace and store first header */
	if (!(ntr = gettra(&tr, 0)))  err("can't get first trace");
a96 3
	nt = tr.ns;
	ntsize = nt * FSIZE;
	ntrsize = ntr * FSIZE;
d98 11
d119 3
a121 8
	/* Loop over input traces & put them into data matrix */
	i = 0;
	do {
		memcpy(data[i], tr.data, ntsize); 
		efwrite((char *)&tr, 1, HDRBYTES, hdrfp);
		++i;
	} while (gettr(&tr));
	erewind(hdrfp);
d146 2
a147 2
			memcpy(tr.data, flipdata[i], ntrsize); 
			efread(&tr, 1, HDRBYTES, hdrfp);
d154 2
a155 2
			memcpy(tr.data, flipdata[i], ntsize); 
			efread(&tr, 1, HDRBYTES, hdrfp);
@


1.6
log
@Tweak
@
text
@d21 1
a21 1
string sdoc =
d122 1
a122 1
	rewind(hdrfp);
@


1.5
log
@fd -> fp fgettr
@
text
@d1 1
a1 1
/* SUFLIP: $Revision: 1.4 $ ; $Date: 90/11/15 10:43:27 $	*/
d122 1
a122 1
	erewind(hdrfp);
@


1.4
log
@bcopy -> memcpy
@
text
@d1 1
a1 1
/* SUFLIP: $Revision: 1.3 $ ; $Date: 90/05/28 11:05:18 $	*/
d21 28
a48 28
string sdoc = "\
								\n\
SUFLIP - flip a data set in various ways			\n\
								\n\
suflip <data1 >data2 flip=1 verbose=0				\n\
								\n\
Required parameters:						\n\
	none							\n\
								\n\
Optional parameters:						\n\
	flip=1 	rotational sense of flip			\n\
			+1  = flip 90 deg clockwise		\n\
			-1  = flip 90 deg counter-clockwise	\n\
			 0  = transpose data			\n\
			 2  = flip right-to-left		\n\
			 3  = flip top-to-bottom		\n\
	verbose=0	verbose = 1 echoes flip info		\n\
								\n\
NOTE:  tr.dt header field is lost if flip=-1,+1.  It can be	\n\
       reset using sushw.					\n\
       [programs internally use tr.dt/1000000.0]		\n\
								\n\
EXAMPLE PROCESSING SEQUENCES:					\n\
  1.	suflip flip=-1 <data1 | sushw key=dt a=4000 >data2	\n\
								\n\
  2.	suflip flip=2 <data1 | suflip flip=2 >data1_again	\n\
								\n\
";
a79 1
	FILE *tmpfile();	/* system subroutine			*/
d88 2
a89 2
	if (!igetpar("verbose", &verbose))	verbose = 0;
	if (!igetpar("flip",    &flip))    	flip = 1;
d99 1
a99 1
	if (!(ntr = gettra(STDIN, &tr, 0))) err("can't get first trace");
a148 1
			tr.ntr = nt;
a156 1
			tr.ntr = ntr;
@


1.3
log
@mat --> ealloc2float + reversal of args per Dave (I think).
@
text
@d1 1
a1 1
/* SUFLIP: $Revision: 1.2 $ ; $Date: 90/05/28 10:45:53 $	*/
d119 1
a119 1
		bcopy(tr.data, data[i], ntsize); 
d148 1
a148 1
			bcopy(flipdata[i], tr.data, ntrsize); 
d157 1
a157 1
			bcopy(flipdata[i], tr.data, ntsize); 
@


1.2
log
@ID removed, ANSI C, subcalls, ...
@
text
@d1 1
a1 1
/* SUFLIP: $Revision: 1.1 $ ; $Date: 90/04/17 11:40:28 $	*/
d12 1
a12 1
 *  Golden, CO 80401  (isis!csm9a!jkcohen)
d70 1
a70 1
	FILE *fphdr;		/* fp for header storage file		*/
d96 1
a96 1
	fphdr = tmpfile();
d108 1
a108 1
	data = mat(ntr, nt);
d110 1
a110 1
		flipdata = mat(nt, ntr);
d112 1
a112 1
		flipdata = mat(ntr, nt);
d120 1
a120 1
		efwrite((char *)&tr, 1, HDRBYTES, fphdr);
d123 1
a123 1
	erewind(fphdr);
d149 1
a149 1
			efread(&tr, 1, HDRBYTES, fphdr);
d158 1
a158 1
			efread(&tr, 1, HDRBYTES, fphdr);
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/* SUFLIP: $Revision: 2.10 $ ; $Date: 89/09/20 19:54:23 $	*/
d31 1
a31 1
	flip = 1 	rotational sense of flip		\n\
d37 1
a37 1
	verbose = 0	verbose = 1 echoes flip info		\n\
a57 2
 *
 *
d60 3
a62 5
/* Embed Revision Control System identifier strings */
static string progid =
	"   $Source: /src/su/src/RCS/suflip.c,v $";
static string revid =
	"   $Revision: 2.10 $ ; $Date: 89/09/20 19:54:23 $";
a63 2


d66 1
a66 2
main(argc, argv)
int argc; char **argv;
a79 1
	void flipper();		/* subroutine that does the flipping	*/
a84 5
	if (!igetpar("ID", &ID))	ID = 0;
	if (ID) {
		(void) fprintf(stderr, "%s\n", progid);
		(void) fprintf(stderr, "%s\n", revid);
	}
d123 1
a123 1
	rewind(fphdr);
d149 1
a149 1
			efread((char *) &tr, 1, HDRBYTES, fphdr);
d158 1
a158 1
			efread((char *) &tr, 1, HDRBYTES, fphdr);
d172 2
a173 3
void flipper(indata, flipdata, ncol, nrow, flip)
register int ncol, nrow, flip;
register float **indata, **flipdata;
@
