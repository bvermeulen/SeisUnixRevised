head	1.10;
access;
symbols;
locks; strict;
comment	@ * @;


1.10
date	2011.11.16.17.24.58;	author john;	state Exp;
branches;
next	1.9;

1.9
date	2011.11.11.23.59.15;	author john;	state Exp;
branches;
next	1.8;

1.8
date	2010.01.25.22.57.31;	author john;	state Exp;
branches;
next	1.7;

1.7
date	2008.05.05.20.42.12;	author john;	state Exp;
branches;
next	1.6;

1.6
date	2007.05.17.13.52.41;	author john;	state Exp;
branches;
next	1.5;

1.5
date	2007.04.09.20.57.24;	author john;	state Exp;
branches;
next	1.4;

1.4
date	2006.04.13.15.18.14;	author john;	state Exp;
branches;
next	1.3;

1.3
date	2006.04.13.14.57.00;	author john;	state Exp;
branches;
next	1.2;

1.2
date	2005.02.04.20.07.11;	author john;	state Exp;
branches;
next	1.1;

1.1
date	2005.02.04.19.53.53;	author john;	state Exp;
branches;
next	;


desc
@Reg Beardsley's histogram code.
@


1.10
log
@added Reg Beardsley
''s checkpar() calls
@
text
@/* Copyright (c) Colorado School of Mines, 2011.*/
/* All rights reserved.                       */

/* SUHISTOGRAM: $Revision: 1.8 $ ; $Date: 2010/01/25 22:57:31 $	*/

#include "su.h"
#include "segy.h"
#include "math.h" 

/*********************** self documentation **********************/
char *sdoc[] = {
"								",
" SUHISTOGRAM - create histogram of input amplitudes		",
"								",
"    suhistogram <in.su >out.dat				",
"								",
" Required parameters:						",
" min=		minimum bin 					",
" max=		maximum bin 					",
" bins=		number of bins					",
"								",
" Optional parameters						",
" trend=0	=0 1-D histogram				",
"	   =1 2-D histogram picks on cumulate			",
"	   =2 2-D histogram in trace format			",
"								",
" clip=     threshold value to drop outliers			",
"								",
" dt=	sample rate in feet or milliseconds.  Defaults  to	",
"    	tr.dt*1e-3					  	",
" datum=  header key to get datum shift if desired (e.g. to	",
"	 hang from water bottom)			    	",
"								",
" Notes:							",
" trend=0 produces a two column ASCII output for use w/ gnuplot.",
" Extreme values are counted in the end bins.			",
"								",
" trend=1 produces a 6 column ASCII output for use w/ gnuplot   ",
" The columns are time/depth and picks on the cumulate		",
" at 2.28%, 15.87%, 50%, 84.13% & 97.72% of the total points    ",
" corresponding to the median and +- 1 or 2 standard deviations ",
" for a Gaussian distribution.					",
"								",
" trend=2 produces an SU trace panel w/ one trace per bin that  ",
" can be displayed w/ suximage, etc.				",
"							   	",
" Example for plotting with xgraph:				",
" suhistogram < data.su min=MIN max=MAX bins=BINS |		",
" a2b n1=2 | xgraph n=BINS nplot=1			 	",
NULL};

/*
 * Author: Reginald H. Beardsley  2006   rhb@@acm.org
 * 
 */

/**************** end self doc ********************************/

segy     tr;

int
main(int argc, char **argv)
{

   int i;  
   int j;  
   int k;  
   int bins;
   int trend=0;

   int p1;
   int p2;
   int p3;
   int p4;
   int p5;

   float m;
   int sum;
   float *a=NULL;
   float *b=NULL;
   float c;

   float *cnt=NULL;
   int **histogram=NULL;

   float min;
   float max;
   float bin;
   Value val;
   float fval;
   float dt;

   float clip=1e38;

   cwp_String datum=0;

   /* Initialize */
   initargs(argc, argv);
   requestdoc(1);

   /* Get info from first trace */
   if( !gettr(&tr) ){
      err("Can't get first trace \n");
   }

   /* Get parameters */
   if( !getparfloat("min", &min) ){
      err("min must be specified\n");
   }

   if( !getparfloat("max", &max) ){
      err("max must be specified\n");
   }

   if( !getparint("bins", &bins) ){
      err("bins must be specified\n");
   }

   getparint("trend", &trend);

   getparstring( "datum" ,&datum );

   getparfloat( "clip" ,&clip );

   if( !getparfloat( "dt" ,&dt ) ){
      dt = tr.dt*1e-3;
   }

   checkpars();
   bin = (max-min) / bins;

   cnt = ealloc1float( tr.ns );
   a = ealloc1float( tr.ns );
   b = ealloc1float( tr.ns );
   memset( cnt ,0 ,tr.ns*sizeof(float) );
   memset( a   ,0 ,tr.ns*sizeof(float) );
   memset( b   ,0 ,tr.ns*sizeof(float) );

   if( trend ){

      /*-------------------*/
      /* allocate a buffer */
      /*-------------------*/

      histogram=ealloc2int( bins ,tr.ns );

      for( i=0; i<tr.ns; i++ ){
	 memset( histogram[i] ,0 ,bins*sizeof(int) );
      }

      /*----------------------*/
      /* accumulate histogram */
      /*----------------------*/

      do{

	 if( datum ){
	    gethdval(&tr ,datum ,&val);
	    fval = vtof(hdtype(datum), val);

	 }else{
	    fval = 0.0;

	 }

	 for( i=0; i<tr.ns; i++ ){
   
	    if( tr.data[i] < clip ){

	       j = (tr.data[i] - min) / bin;
	       k = (i*dt - fval)/dt;
      
	       if( j >= 0 && j < bins 
		&& k >= 0 && k < tr.ns ){
		  histogram[k][j]++;
		  a[k] += tr.data[i]*tr.data[i];
		  b[k] += tr.data[i];
		  cnt[k]++;
	       } 
	    }
	 }
   
      }while( gettr(&tr) );

      if( trend == 1 ){

	 /*-----------------*/
	 /* pick key points */
	 /*-----------------*/

	 for( i=0; i<tr.ns; i++ ){


	    if( cnt[i] > 0 ){

	       p1 = 0;
	       p2 = 0;
	       p3 = 0;
	       p4 = 0;
	       p5 = 0;

	       sum = 0;

	       printf( "%f " ,i*tr.dt/1000.0 );

	       for( j=0; j<bins; j++ ){

		  sum += histogram[i][j];

		  m = (100.0*sum ) / cnt[i]; 
		     
		  if( !p1 && m >= 2.28 ){
		     p1 = 1;
		     printf( "%f " ,min + j*bin );

		  }else if( !p2 && m >= 15.87 ){
		     p2 = 1;
		     printf( "%f " ,min + j*bin );

		  }else if( !p3 && m >= 50.00 ){
		     p3 = 1;
		     printf( "%f " ,min + j*bin );

		  }else if( !p4 && m >= 84.13 ){
		     p4 = 1;
		     printf( "%f " ,min + j*bin );

		  }else if( !p5 && m >= 97.72 ){
		     p5 = 1;
		     printf( "%f " ,min + j*bin );
		  }

	       }

	       c = sqrt( (cnt[i]*a[i] - b[i]*b[i])/(cnt[i]*(cnt[i]-1)));

	       printf( "%f " ,c );

	       printf( "\n" );

	    }

	 }

      }else{

	 for( j=0; j<bins; j++ ){

	    for( i=0; i<tr.ns; i++ ){

	       if( cnt[i] > 0 ){
		  tr.data[i] = histogram[i][j] / (float) cnt[i];

	       }else{
		  tr.data[i] = histogram[i][j];

	       }
	       
	    }
	    tr.tracl = j;
	    fputtr( stdout ,&tr );

	  }


      }

   }else{

      histogram=ealloc2int( 1 ,bins );
      memset( histogram[0] ,0 ,bins*sizeof(int) );
   
      /* Loop over traces */
      do{
	 for( i=0; i<tr.ns; i++ ){
   
	    j = (tr.data[i] - min) / bin;
	    j = j < 0 ? 0 : j;
	    j = j > bins-1 ? bins-1 : j;
   
	    histogram[0][j]++;
	    cnt[0]++;
   
	 }
   
      }while( gettr(&tr) );

      for( i=0; i<bins; i++ ){
   
	 printf( "%15f " ,min+i*bin		);
	 printf( "%15f " , (float)  histogram[0][i]/cnt[0] );
	 printf( "\n" );
      } 



   }

   return(CWP_Exit());
}


@


1.9
log
@copyright
@
text
@d129 1
@


1.8
log
@cosmetic
@
text
@d1 4
a4 1
/* SUHISTOGRAM: $Revision: 1.7 $ ; $Date: 2008/05/05 20:42:12 $	*/
@


1.7
log
@explicit cast in printf statement, modification of selfdoc
@
text
@d1 1
a1 1
/* SUHISTOGRAM: $Revision: 1.6 $ ; $Date: 2007/05/17 13:52:41 $        */
d8 18
a25 18
char    *sdoc[] = {
"                                                               ",
" SUHISTOGRAM - create histogram of input amplitudes	        ",
"                                                               ",
"    suhistogram <in.su >out.dat                                ",
"                                                               ",
" Required parameters:                                          ",
" min=		minimum bin 				        ",
" max=		maximum bin 				        ",
" bins=		number of bins				        ",
"                                                               ",
" Optional parameters                                           ",
" trend=0	=0 1-D histogram                                ",
"           =1 2-D histogram picks on cumulate                  ",
"           =2 2-D histogram in trace format                    ",
"                                                               ",
" clip=     threshold value to drop outliers                    ",
"                                                               ",
d27 1
a27 1
"    	tr.dt*1e-3                                          	",
d29 3
a31 3
"         hang from water bottom)                            	",
"                                                               ",
" Notes:                                                        ",
d33 2
a34 2
" Extreme values are counted in the end bins.		        ",
"                                                               ",
d36 1
a36 1
" The columns are time/depth and picks on the cumulate          ",
d39 2
a40 2
" for a Gaussian distribution.                                  ",
"                                                               ",
d42 5
a46 5
" can be displayed w/ suximage, etc.                            ",
"                                                               ",
" Example for plotting with xgraph:                             ",
" suhistogram < data.su min=MIN max=MAX bins=BINS |	        ",
" a2b n1=2 | xgraph n=BINS nplot=1                              ",
d144 1
a144 1
         memset( histogram[i] ,0 ,bins*sizeof(int) );
d153 3
a155 3
         if( datum ){
            gethdval(&tr ,datum ,&val);
            fval = vtof(hdtype(datum), val);
d157 2
a158 2
         }else{
            fval = 0.0;
d160 1
a160 1
         }
d162 1
a162 1
         for( i=0; i<tr.ns; i++ ){
d164 1
a164 1
            if( tr.data[i] < clip ){
d166 2
a167 2
               j = (tr.data[i] - min) / bin;
               k = (i*dt - fval)/dt;
d169 9
a177 9
               if( j >= 0 && j < bins 
                && k >= 0 && k < tr.ns ){
                  histogram[k][j]++;
                  a[k] += tr.data[i]*tr.data[i];
                  b[k] += tr.data[i];
                  cnt[k]++;
               } 
            }
         }
d183 3
a185 3
         /*-----------------*/
         /* pick key points */
         /*-----------------*/
d187 1
a187 1
         for( i=0; i<tr.ns; i++ ){
d190 1
a190 1
            if( cnt[i] > 0 ){
d192 5
a196 5
               p1 = 0;
               p2 = 0;
               p3 = 0;
               p4 = 0;
               p5 = 0;
d198 1
a198 1
               sum = 0;
d200 1
a200 1
               printf( "%f " ,i*tr.dt/1000.0 );
d202 1
a202 1
               for( j=0; j<bins; j++ ){
d204 1
a204 1
                  sum += histogram[i][j];
d206 5
a210 5
                  m = (100.0*sum ) / cnt[i]; 
                     
                  if( !p1 && m >= 2.28 ){
                     p1 = 1;
                     printf( "%f " ,min + j*bin );
d212 3
a214 3
                  }else if( !p2 && m >= 15.87 ){
                     p2 = 1;
                     printf( "%f " ,min + j*bin );
d216 3
a218 3
                  }else if( !p3 && m >= 50.00 ){
                     p3 = 1;
                     printf( "%f " ,min + j*bin );
d220 3
a222 3
                  }else if( !p4 && m >= 84.13 ){
                     p4 = 1;
                     printf( "%f " ,min + j*bin );
d224 4
a227 4
                  }else if( !p5 && m >= 97.72 ){
                     p5 = 1;
                     printf( "%f " ,min + j*bin );
                  }
d229 1
a229 1
               }
d231 1
a231 1
               c = sqrt( (cnt[i]*a[i] - b[i]*b[i])/(cnt[i]*(cnt[i]-1)));
d233 1
a233 1
               printf( "%f " ,c );
d235 1
a235 1
               printf( "\n" );
d237 1
a237 1
            }
d239 1
a239 1
         }
d243 1
a243 1
         for( j=0; j<bins; j++ ){
d245 1
a245 1
            for( i=0; i<tr.ns; i++ ){
d247 2
a248 2
               if( cnt[i] > 0 ){
                  tr.data[i] = histogram[i][j] / (float) cnt[i];
d250 2
a251 2
               }else{
                  tr.data[i] = histogram[i][j];
d253 5
a257 5
               }
               
            }
            tr.tracl = j;
            fputtr( stdout ,&tr );
d259 1
a259 1
          }
d271 1
a271 1
         for( i=0; i<tr.ns; i++ ){
d273 3
a275 3
            j = (tr.data[i] - min) / bin;
            j = j < 0 ? 0 : j;
            j = j > bins-1 ? bins-1 : j;
d277 2
a278 2
            histogram[0][j]++;
            cnt[0]++;
d280 1
a280 1
         }
d286 3
a288 3
         printf( "%15f " ,min+i*bin                );
         printf( "%15f " , (float)  histogram[0][i]/cnt[0] );
         printf( "\n" );
@


1.6
log
@Reg's fixes.
again.
@
text
@d1 1
a1 1
/* SUHISTOGRAM: $Revision: 1.2 $ ; $Date: 2006/12/20 19:13:57 $        */
d14 4
a17 5
" required parameters:                                          ",
"							        ",
" min=    - minimum bin 				        ",
" max=    - maximum bin 				        ",
" bins=   - number of bins				        ",
d19 2
a20 3
" optional parameters                                           ",
"                                                               ",
" trend=0 - =0 1-D histogram                                    ",
d26 4
a29 4
" dt=     - sample rate in feet or milliseconds.  Defaults  to  ",
"           tr.dt*1e-3                                          ",
" datum=  - header key to get datum shift if desired (e.g. to   ",
"           hang from water bottom)                             ",
d35 1
a35 1
" trend=1 produces a 6 column ASCII output for use w/ gnuplot      ",
a51 1
 * 
d287 1
a287 1
         printf( "%15d " ,histogram[0][i]/cnt[0]   );
@


1.5
log
@some comments added
@
text
@d1 1
a1 1
/* SUHISTOGRAM: $Revision: 1.4 $ ; $Date: 2006/04/13 15:18:14 $        */
d61 2
a62 1
int      main(int argc, char **argv)
d65 5
a69 5
   int i;	/* counter */  
   int j; 	/* counter */ 
   int k; 	/* counter */ 
   int bins;	/* histogram bins */
   int trend=0;	/* output format flag */
d79 6
a84 2
   int* cnt;
   int **histogram;
d131 6
a136 2
   cnt = ealloc1int( tr.ns );
   memset( cnt ,0 ,tr.ns*sizeof(int) );
d175 2
d234 4
d300 2
@


1.4
log
@Redh

Reg BeartHdsley's latest update
@
text
@d1 1
a1 1
/* SUHISTOGRAM: $Revision: 1.2 $ ; $Date: 2006/04/07 18:24:00 $        */
d64 5
a68 5
   int i;  
   int j;  
   int k;  
   int bins;
   int trend=0;
d79 1
a79 1
   int** histogram;
@


1.3
log
@some cosmetic fixes
@
text
@d1 1
a1 1
/* SUHISTOGRAM: $Revision: 1.1 $ ; $Date: 2006/01/18 15:51:14 $        */
d5 1
d26 7
d66 1
d84 7
d116 8
d147 9
d158 11
a168 7
            j = (tr.data[i] - min) / bin;
            j = j < 0 ? 0 : j;
            j = j > bins-1 ? bins-1 : j;
   
            histogram[i][j]++;
            cnt[i]++;
   
@


1.2
log
@added additional notes for plotting with xgraph
@
text
@d1 1
a1 1
/* SUHISTOGRAM: $Revision: 1.1 $ ; $Date: 2005/02/04 19:53:53 $        */
d8 33
a40 18
"                                                            ",
" SUHISTOGRAM - create histogram of input amplitudes	     ",
"                                                            ",
"    suhistogram <in.su >out.dat                             ",
"                                                            ",
" required parameters:                                       ",
"							     ",
" min=    - minimum bin 				     ",
" max=    - maximum bin 				     ",
" bins=   - number of bins				     ",
"                                                            ",
" Notes:                                                     ",
" This produces a two column ASCII output for use w/ gnuplot.",
" Extreme values are counted in the end bins.		     ",
"                                                            ",
" Example for plotting with xgraph:                          ",
" suhistogram < data.su min=MIN max=MAX bins=BINS |	     ",
" a2b n1=2 | xgraph n=BINS nplot=1                           ",
d44 1
a44 1
 * Author: Reginald H. Beardsley  2005   rhb@@acm.org
d59 13
a75 2
   int* histogram;
    
d98 2
d102 10
a111 1
   histogram=emalloc( bins*sizeof(int) );
a112 2
   /* Loop over traces */
   do{
d114 44
d159 52
a210 3
         j = (tr.data[i] - min) / bin;
         j = j < 0 ? 0 : j;
         j = j > bins-1 ? bins-1 : j;
a211 1
         histogram[j]++;
d215 26
a240 1
   }while( gettr(&tr) );
a241 1
   for( i=0; i<bins; i++ ){
a242 4
      printf( "%15f " ,min+i*bin    );
      printf( "%15d " ,histogram[i] );
      printf( "\n" );
   } 
d244 3
a246 1
        return(CWP_Exit());
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/* SUHISTOGRAM: $Revision: 1.1 $ ; $Date: 2005/02/03 14:45:21 $        */
d9 1
a9 1
" SUHISTOGRAM - create histogram of input amplitudes   ",
d14 4
a17 4
"",
" min=    - minimum bin ",
" max=    - maximum bin ",
" bins=   - number of bins ",
d21 1
a21 1
" Extreme values are counted in the end bins.",
d23 4
a26 2
NULL
};
@
