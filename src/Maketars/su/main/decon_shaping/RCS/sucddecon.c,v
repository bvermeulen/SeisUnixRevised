head	1.16;
access;
symbols;
locks
	john:1.16; strict;
comment	@ * @;


1.16
date	2015.10.12.16.58.08;	author john;	state Exp;
branches;
next	1.15;

1.15
date	2015.08.11.21.14.49;	author john;	state Exp;
branches;
next	1.14;

1.14
date	2011.11.16.17.47.47;	author john;	state Exp;
branches;
next	1.13;

1.13
date	2011.11.12.00.07.16;	author john;	state Exp;
branches;
next	1.12;

1.12
date	2011.05.11.16.34.06;	author john;	state Exp;
branches;
next	1.11;

1.11
date	2011.05.11.16.33.33;	author john;	state Exp;
branches;
next	1.10;

1.10
date	2011.02.17.19.17.31;	author john;	state Exp;
branches;
next	1.9;

1.9
date	2010.01.20.23.15.49;	author john;	state Exp;
branches;
next	1.8;

1.8
date	2006.11.07.22.58.42;	author john;	state Exp;
branches;
next	1.7;

1.7
date	2006.10.31.22.19.34;	author john;	state Exp;
branches;
next	1.6;

1.6
date	2006.01.18.21.01.46;	author john;	state Exp;
branches;
next	1.5;

1.5
date	2006.01.17.18.59.56;	author john;	state Exp;
branches;
next	1.4;

1.4
date	2006.01.16.18.24.16;	author john;	state Exp;
branches;
next	1.3;

1.3
date	2006.01.12.23.51.20;	author john;	state Exp;
branches;
next	1.2;

1.2
date	2006.01.12.23.18.31;	author john;	state Exp;
branches;
next	1.1;

1.1
date	2006.01.10.19.38.22;	author john;	state Exp;
branches;
next	;


desc
@deconvolution by complex division
@


1.16
log
@fixxed end padding error on output.
@
text
@/* Copyright (c) Colorado School of Mines, 2011.*/
/* All rights reserved.                       */


/* SUCDDECON: $Revision: 1.15 $ ; $Date: 2015/08/11 21:14:49 $		*/

#include "su.h"
#include "segy.h"
#include "header.h"

#define PNOISE .001
#define LOOKFAC 5	/* Look ahead factor for npfao	*/
#define PFA_MAX 720720  /* Largest allowed nfft	   */

/*********************** self documentation ******************************/
char *sdoc[] = {
" 									",
" SUCDDECON - DECONvolution with user-supplied filter by straightforward",
" 	      Complex Division in the frequency domain			",
" 									",
" sucddecon <stdin >stdout [optional parameters]			",
" 									",
" Required parameters:							",
" filter= 		ascii filter values separated by commas		",
" 		...or...						",
" sufile=		file containing SU traces to use as filter	",
"                       (must have same number of traces as input data	",
" 			 for panel=1)					",
" Optional parameters:							",
" panel=0		use only the first trace of sufile as filter	",
" 			=1 decon trace by trace an entire gather	",
" pnoise=0.001		white noise factor for stabilizing results	",
"	 				(see below)		 	",
" sym=0		not centered, =1 center the output on each trace",
" verbose=0		silent, =1 chatty				",
" 									",
" Notes:								",
" For given time-domain input data I(t) (stdin) and deconvolution	",
" filter F(t), the frequency-domain deconvolved trace can be written as:",
"									",
"	 I(f)		I(f) * complex_conjugate[F(f)]			",
" D(f) = ----- ===> D(f) = ------------------------ 			",
"	 F(f)		|F(f)|^2 + delta				",
"									",
" The real scalar delta is introduced to prevent the resulting deconvolved",
" trace to be dominated by frequencies at which the filter power is close",
" to zero. As described above, delta is set to some fraction (pnoise) of ",
" the mean of the filter power spectra. Time sampling rate must be the 	",
" same in the input data and filter traces. If panel=1 the two input files",
" must have the same number of traces. Data and filter traces don't need to",
" necessarily have the same number of samples, but the filter trace length",
" length be always equal or shorter than the data traces. 		",
" 									",
" Caveat: 								",
" You may need to apply frequency filtering to get acceptable output	",
"   sucddecon  ...| sufilter f=f1,f2,f3,f4 				",
" where f1,f2,f3,f4 are an acceptable frequency range, and you may need ",
" to mute artifacts that appear at the beginning of the output, as well.",
" 									",
" Trace header fields accessed: ns, dt					",
" Trace header fields modified: none					",
" 									",
NULL};

/* Credits:
 *	CWP: Ivan Vasconcelos
 *              some changes by John Stockwell
 *  CAVEATS: 
 *	In the option, panel=1 the number of traces in the sufile must be 
 *	the same as the number of traces on the input.
 *
 * Trace header fields accessed: ns,dt
 * Trace header fields modified: none
 */
/**************** end self doc *******************************************/

segy tr, sutrace;

int
main(int argc, char **argv)
{
	int nt;			/* number of samples on input traces	*/
	int it,i;		/* counter 				*/
	float dt;		/* sampling interval of input data	*/
	
	float *rf=NULL;		/* filter coefficients			*/
	float *rt=NULL;		/* data coefficients in time		*/
	complex *cf=NULL;	/* filter coefficients in freq		*/
	complex *ct=NULL;	/* data coefficients in freq		*/
	
	float delta=0.0;	/* white noise term			*/
	complex cdelta;		/* delta as a complex number		*/
	float pnoise=0.0;	/* input parameter for computing delta	*/
	float sum_powspec=0.0;	/* sum of filter power spectra		*/
	
	float nyq=0.0;		/* nyquist frequency			*/
	int nfft;		/* number of points for fft data trace  */
	int nf;			/* number of frequencies (incl Nyq)	*/
	
	int nfilter=0;		/* filter length in samples		*/
	int nfiltby2=0;		/* filter length/2 in samples		*/
	int ntr=0;		/* trace counter			*/

	float *filter=NULL;	/* filter if set as filter=		*/
	cwp_String sufile;	/* name of file containing one SU trace */
	FILE *fp=NULL;		/* ... its file pointer			*/

	int panel=0;		/* xcor with trace or panel 		*/
	int verbose=0;		/* =0 silent =1 chatty	 		*/
	int sym=0;		/* =0 not centered; =1 output centered	*/

	cwp_Bool is_filter=cwp_false;	/* is filter set from commandline?*/
	cwp_Bool is_panel=cwp_false;	/* is panel set? */

	/* Initialize */
	initargs(argc, argv);
	requestdoc(1);

	
	/* Get info from first trace */ 
	if (!gettr(&tr)) err("can't get first trace");
	nt = tr.ns;
	dt = ((double) tr.dt)/1000000.0;
	nyq=0.5/dt;
	
	/* Set up FFT parameters */
	nfft = npfaro(nt, LOOKFAC * nt);
	if (nfft >= SU_NFLTS || nfft >= PFA_MAX)
				err("Padded nt=%d -- too big", nfft);

	nf = nfft/2 + 1;
	
	/* Get parameters and set up filter array */
	if (!getparint("panel", &panel)) 		panel = 0;
	if (panel) is_panel=cwp_true;

	if (!getparint("verbose", &verbose))		verbose = 0;
	if (!getparint("sym", &sym))			sym = 0;
	if (!getparfloat("pnoise",&pnoise))		pnoise = PNOISE;
	if (!getparstring("sufile", &sufile)) {
		if (!(nfilter = countparval("filter"))) {
			warn("must specify filter= desired filter");
			err(" or sufile= ");
		}
			nfiltby2 = nfilter/2;
			filter = ealloc1float(nfilter+nfiltby2);
			getparfloat("filter",filter);
			
			is_filter = cwp_true;
			is_panel = cwp_false;

			rf = ealloc1float(nfft);
			memset(( void *) rf, 0, nfft*FSIZE);
		
	} else {
		fp = efopen(sufile, "r");
		fgettr(fp, &sutrace);
		nfilter = sutrace.ns;
		nfiltby2 = nfilter/2;
		rf = ealloc1float(nfft+nfiltby2);
		cf = ealloc1complex(nfft+nfiltby2);
	}
        checkpars();


	/* Allocate space */
	rt = ealloc1float(nfft+nfiltby2);
	ct = ealloc1complex(nfft+nfiltby2);
	cf = ealloc1complex(nfft+nfiltby2);
	
	/* Zero out arrays */
	memset( (void *) rt, 0 , (nfft+nfiltby2)*FSIZE);
	memset( (void *) ct, 0 , (nfft+nfiltby2)*sizeof(complex));
	memset( (void *) cf, 0 , (nfft+nfiltby2)*sizeof(complex));
	

	if (is_filter) {
		memcpy(( void *) rf, (const void *) filter, nfilter*FSIZE);
	} else {
		memcpy(( void *) rf, (const void *) sutrace.data,nfilter*FSIZE);
	}
	
	/* Debugging warnings */
	if (verbose) warn(" nt=%d nfilter=%d nfft=%d ", nt, nfilter, nfft); 

	if(!is_filter) rewind(fp);
	/* Main loop over traces */
	do {
		++ntr;
		
		if (is_panel) {
			cwp_Bool is_filter_out = cwp_false;

			if (!is_filter_out) {
				if ((!fgettr(fp, &sutrace))) {
					if (verbose)
					warn("Out of traces in sufile at trace= %d !",ntr);
					is_filter_out = cwp_true;
				}
			}
	
			/* zero out trace and filter arrays */
			memset((void *)rt, 0, nfft*FSIZE);
			memset((void *)rf, 0, nfft*FSIZE);

			/* copy traces from data and filter */
			memcpy(( void *) (rt+nfiltby2), (const void *) tr.data, nt*FSIZE);
			memcpy(( void *) rf,
				(const void *) sutrace.data, nfilter*FSIZE);

			
		} else {
			/* zero out trace array and copy data */
			memset((void *)rt, 0, nfft*FSIZE);
			memcpy((void *)(rt+nfiltby2), (const void *) tr.data, nt*FSIZE);

		}

		/* zero out ct and cf arrays */
		memset((void *)ct, 0, (nfft + nfiltby2)*sizeof(complex));
		memset((void *)cf, 0, (nfft + nfiltby2)*sizeof(complex));
					
		/* compute complex traces */
		pfarc(1,nfft,rt,ct);
		pfarc(1,nfft,rf,cf);
		
		/* first compute the the noise factor delta */
		/* find sum of power spectrum */
		for (i=0; i<nfft; i++)
			sum_powspec += rcabs(cf[i]);
		
		/* delta = pnoise * mean of filter power spectrum */
		delta = pnoise * sum_powspec/nfft;
		cdelta=cmplx(delta,0.0); /*... as a complex number */
		
						
		/* compute deconvolved trace
 		 	  data		       ct(i) * conjg[cf(i)]
 		 decon = ----- ===> ctout(i) = ------------------------ 
 			  filter		cf[i]*conjg(cf[i]) + delta	
 		*/
		for (i=0; i<nfft; ++i){
			complex numer=cmul(ct[i],conjg(cf[i])); /* numerator */
			complex denom=cadd(cmul(cf[i],conjg(cf[i])),cdelta);
						/* denominator */

			/* perform deconvolution by division */
			ct[i] = cdiv(numer,denom);

			/* for centered output flip sign every other sample */
			if (sym) {
				if (ISODD(i)) {
					ct[i].r = -ct[i].r;
					ct[i].i = -ct[i].i;
				}
			}
		}
		
		/* Perform inverse fourier transform */
		pfacr(-1,nfft,ct,rt);
		
		/* Copy deconvolved samples */
		for (it=0; it<nt; ++it)
				tr.data[it] = rt[nfiltby2+it];
		
		puttr(&tr);

	} while (gettr(&tr));

	return(CWP_Exit());
}
@


1.15
log
@selfdoc update
@
text
@d4 2
a5 1
/* SUCDDECON: $Revision: 1.14 $ ; $Date: 2011/11/16 17:47:47 $		*/
d262 1
a262 1
		/* Copy deconvolved samples*/
d264 1
a264 1
				tr.data[it] = rt[it];
@


1.14
log
@added Reg Beardsley's checkpar()
@
text
@d4 1
a4 1
/* SUCDDECON: $Revision: 1.12 $ ; $Date: 2011/05/11 16:34:06 $		*/
d53 6
@


1.13
log
@copyright
@
text
@d156 1
@


1.12
log
@fixed problem for when filter= is set.
@
text
@d1 4
a4 1
/* SUCDDECON: $Revision: 1.11 $ ; $Date: 2011/05/11 16:33:33 $		*/
@


1.11
log
@*** empty log message ***
@
text
@d1 1
a1 1
/* SUCDDECON: $Revision: 1.10 $ ; $Date: 2011/02/17 19:17:31 $		*/
d175 1
a175 1
	rewind(fp);
@


1.10
log
@put in a shift to account for the length of the filter
@
text
@d1 1
a1 1
/* SUCDDECON: $Revision: 1.9 $ ; $Date: 2010/01/20 23:15:49 $		*/
d159 6
d209 2
a210 2
		memset((void *)ct, 0, nfft*sizeof(complex));
		memset((void *)cf, 0, nfft*sizeof(complex));
@


1.9
log
@changed "centered" to "sym" to agree with other SU codes
@
text
@d1 1
a1 1
/* SUCDDECON: $Revision: 1.8 $ ; $Date: 2006/11/07 22:58:42 $		*/
d91 1
d135 2
a136 1
			filter = ealloc1float(nfilter);
d149 3
a151 2
		rf = ealloc1float(nfft);
		cf = ealloc1complex(nfft);
d154 1
d156 3
a158 3
	rt = ealloc1float(nfft);
	ct = ealloc1complex(nfft);
	cf = ealloc1complex(nfft);
d190 1
a190 1
			memcpy(( void *) rt, (const void *) tr.data, nt*FSIZE);
d198 1
a198 1
			memcpy((void *)rt, (const void *) tr.data, nt*FSIZE);
@


1.8
log
@changed    memset( .., (int) '\0',...) to memset( .., 0,..) as per suggestion of Marion Zhu and Reg Beardsley
@
text
@d1 1
a1 1
/* SUCDDECON: $Revision: 1.7 $ ; $Date: 2006/10/31 22:19:34 $		*/
d30 1
a30 1
" centered=0		not centered, =1 center the output on each trace",
d99 1
a99 1
	int centered=0;		/* =0 not centered; =1 output centered	*/
d127 1
a127 1
	if (!getparint("centered", &centered))		centered = 0;
d230 1
a230 1
			if (centered) {
@


1.7
log
@cosmetic
@
text
@d1 1
a1 1
/* SUCDDECON: $Revision: 1.6 $ ; $Date: 2006/01/18 21:01:46 $		*/
d141 1
a141 1
			memset(( void *) rf, (int) '\0', nfft*FSIZE);
d182 2
a183 2
			memset((void *)rt, (int) '\0', nfft*FSIZE);
			memset((void *)rf, (int) '\0', nfft*FSIZE);
d193 1
a193 1
			memset((void *)rt, (int) '\0', nfft*FSIZE);
d199 2
a200 2
		memset((void *)ct, (int) '\0', nfft*sizeof(complex));
		memset((void *)cf, (int) '\0', nfft*sizeof(complex));
@


1.6
log
@fixed out of traces issue for sufile filter.
@
text
@d1 1
a1 1
/* SUCDDECON: $Revision: 1.5 $ ; $Date: 2006/01/17 18:59:56 $		*/
d221 1
a221 1
		for (i=0; i<nfft; i++){
d242 2
a243 3
		for (it=0; it<nt; it++)
			tr.data[it] = rt[it];
		
@


1.5
log
@cleaned up considerably and made filter= option work.
@
text
@d1 1
a1 1
/* SUCDDECON: $Revision: 1.4 $ ; $Date: 2006/01/16 18:24:16 $		*/
d7 1
d26 3
a28 3
" panel=0	use only the first trace of sufile as filter		",
" 		=1 decon trace by trace an entire gather		",
" pnoise=0.05	white noise factor for stabilizing results		",
d30 2
a31 2
" centered=0	not centered, =1 center the output on each trace	",
" verbose=0	silent, =1 chatty					",
d91 1
d128 1
a128 1
	if (!getparfloat("pnoise",&pnoise))		pnoise=0.05;
d165 1
d168 1
d171 9
d189 1
a190 3
			/* see if you can get the next filter trace */
			if ((!fgettr(fp, &sutrace))) 
				err("number of traces in sufile are not the same as the number of traces on the input");
@


1.4
log
@13 Jan 2006 version
@
text
@d1 1
a1 1
/* SUCDDECON: $Revision: 1.3 $ ; $Date: 2006/01/12 23:51:20 $		*/
d27 1
a27 1
" deltaf=0.05	white noise factor for stabilizing results		",
d36 1
a36 1
"	 I(f)		I(f) * adjoint[F(f)]				",
d42 1
a42 1
" to zero. As described above, delta is set to some fraction (deltaf) of ",
d56 1
d66 1
a66 1
segy intrace, outtrace, sutrace;
a72 1
	int ntout;		/* number of points on output traces	*/
a74 1
	
a78 1
	complex *ctemp=NULL;	/* complex temporary storage 		*/
d81 2
a82 1
	float deltaf=0.0;	/* input parameter for computing delta	*/
a87 1

d91 1
a93 1
	FILE *ft=NULL;		/* ... its second file pointer		*/
d99 3
d108 3
a110 4
	if (!gettr(&intrace)) err("can't get first trace");
	nt = intrace.ns;
	ntout = nt;
	dt = ((double) intrace.dt)/1000000.0;
a112 1
	
d121 6
a126 4
	if (!getparint("panel", &panel))  panel = 0;
	if (!getparint("verbose", &verbose))  verbose = 0;
	if (!getparint("centered", &centered))  centered = 0;
	if (!getparfloat("deltaf",&deltaf)) deltaf=0.05;
d128 6
a133 2
		if (!(nfilter = countparval("filter")))
			err("must specify filter= desired filter");
d135 4
a139 2
			rf = ealloc1float(nfft);
			getparfloat("filter", rf);
d143 4
a146 18
		ft = efopen(sufile, "r");
		if (panel == 0){
			fgettr(fp, &sutrace);
			nfilter = sutrace.ns;
			rf = ealloc1float(nfft);
			cf = ealloc1complex(nfft);

			memset(( void *) rf, (int) '\0', nfft*FSIZE);

			memcpy(( void *) rf,
				(const void *) sutrace.data, nfilter*FSIZE);

		} else {
			fgettr(ft, &sutrace);
			nfilter = sutrace.ns;
			rf = ealloc1float(nfft);
			cf = ealloc1complex(nfft);
		}
d149 1
a149 1
	/* allocate space */
d152 7
a158 5
	ctemp = ealloc1complex(nfft);
	
	/* debugging warnings */
	if (verbose)
		warn(" nt=%d nfilter=%d nfft=%d ", nt, nfilter, nfft);
d160 2
d165 4
a168 5
		if (panel == 1) {
			if ((!fgettr(fp, &sutrace))) 
				err("number of traces in sufile are not the same as the number of traces on the input");
						
			/* copy traces from data and filter */
d172 4
a175 2
			memcpy(( void *) rt, (const void *) intrace.data, nt*FSIZE);
			memcpy(( void *) rf, (const void *) sutrace.data, nfilter*FSIZE);
d177 3
d181 1
d183 1
a183 1
			memcpy((void *)rt, (const void *) intrace.data, nt*FSIZE);
d187 1
d189 1
a189 2
		memset((void *)ctemp, (int) '\0', nfft*sizeof(complex));
		
d195 8
a202 2
		/* first compute the the noise factor delta*/
		for (i=0; i<nfft; i++){
d204 6
a209 7
			sum_powspec += cf[i].r*cf[i].r + cf[i].i*cf[i].i;
			delta = (deltaf * sum_powspec)/nfft;
		
		}
		
		
		/* compute deconvolved trace */
d211 12
a222 11
		
			ctemp[i].r = (ct[i].r*cf[i].r + ct[i].i*cf[i].i)/(cf[i].r*cf[i].r + cf[i].i*cf[i].i + delta);
			ctemp[i].i = (ct[i].i*cf[i].r - ct[i].r*cf[i].i)/(cf[i].r*cf[i].r + cf[i].i*cf[i].i + delta);
		}

		/* if "centered" then flip sign on every other sample */
		if (centered) {
			for (i=0; i<nfft; ++i) { 
				if (i % 2) {
					ctemp[i].r = -ctemp[i].r;
					ctemp[i].i = -ctemp[i].i;
d227 2
a228 1
		/* set complex arrays to zero */
d230 3
a232 3
		pfacr(-1,nfft,ctemp,rt);

		memcpy((void *) &outtrace, (const void *) &intrace, HDRBYTES);
a233 3
		/* copy deconvolved samples*/
		for (it=0; it<ntout; it++)
			outtrace.data[it] = rt[it];
d235 1
a235 2
		outtrace.ns = ntout;
		puttr(&outtrace);
d237 1
a237 1
	} while (gettr(&intrace));
@


1.3
log
@removed redundancy and unnecessary centering of padding, standardized to other
SU codes
@
text
@d1 1
a1 1
/* SUCDDECON: $Revision: 1.2 $ ; $Date: 2006/01/12 23:18:31 $		*/
d29 2
a30 1
" verbose=0		silent, =1 chatty				",
d99 1
d124 1
d184 1
a184 2
		
		/* set complex arrays to zero */
d208 12
@


1.2
log
@small changes
@
text
@d1 1
a1 1
/* SUCDDECON: $Revision: 1.1 $ ; $Date: 2006/01/10 19:38:22 $		*/
d16 1
a16 1
" sucddecon <stdin >stdout  filter= [optional parameters]		",
d19 2
d69 4
a72 20
	int nt;		/* number of samples on input data traces	*/
	int it,i;	/* counter 					*/
	int ntout;	/* number of points on output traces		*/
	float dt;	/* sampling interval of input data		*/
	
	
	float *trace=NULL;		/* copy of data trace		*/
	float *filter=NULL;		/* copy of filter trace		*/
	register float *filter_time=NULL; /* filter coefficients	*/
					  /*  in the time domain, zero-padded */
	register float *trace_time=NULL; /* data coefficients */
				 	 /*  in the time domain, zero-padded */
	register float *decon_time=NULL;   /* coefficients of deconvolved */
					   /* trace in the time domain */
	register complex *filter_freq=NULL; /* filter coefficients in the */
					    /* frequency domain*/
	register complex *trace_freq=NULL; /* data coefficients in the */
					   /*  frequency domain */
	register complex *decon_freq=NULL; /* coefficients of deconvolved */
					   /* trace in the frequency domain */
d74 8
a81 1
	float delta=0.0;	/* noise factor for stabilizing output trace */
d83 1
a83 1
	float sum_powspec=0.0;	/* sum of filter power spectra	*/
d85 3
a87 3
	float nyq=0.0;	/* nyquist frequency			*/
	int nfft;	/* number of points for fft data trace  */
	int nf;		/* number of frequencies (incl Nyq)	*/
a98 1

d126 4
d137 2
a138 3
			filter = ealloc1float(nfilter);
			filter_time = ealloc1float(nfft);
			filter_freq = ealloc1complex(nfft);
d140 1
a140 1
			memset(( void *) filter_time, (int) '\0', nfft*FSIZE);
d142 1
a142 1
			memcpy(( void *) filter_time,
d148 2
a149 2
			filter_time = ealloc1float(nfft);
			filter_freq = ealloc1complex(nfft);
d154 3
a156 5
	trace = ealloc1float(nt);
	trace_time = ealloc1float(nfft);
	trace_freq = ealloc1complex(nfft);
	decon_time = ealloc1float(nfft);
	decon_freq = ealloc1complex(nfft);
d158 1
a158 1
	/*debugging warnings*/
d170 2
a171 2
			memset((void *)trace_time, (int) '\0', nfft*FSIZE);
			memset((void *)filter_time, (int) '\0', nfft*FSIZE);
d173 2
a174 4
			memcpy(( void *) trace_time,
				(const void *) intrace.data, nt*FSIZE);
			memcpy(( void *) filter_time,
				(const void *) sutrace.data, nfilter*FSIZE);
d177 2
a178 3
			memset((void *)trace_time, (int) '\0', nfft*FSIZE);
			memcpy((void *)trace_time, 
				(const void *) intrace.data, nt*FSIZE);
d182 4
a185 1
		/* main trace manipulation goes here */
d188 2
a189 2
		pfarc(1,nfft,trace_time,trace_freq);
		pfarc(1,nfft,filter_time,filter_freq);
d194 1
a194 1
			sum_powspec += filter_freq[i].r*filter_freq[i].r + filter_freq[i].i*filter_freq[i].i;
d203 2
a204 2
			decon_freq[i].r = (trace_freq[i].r*filter_freq[i].r + trace_freq[i].i*filter_freq[i].i)/(filter_freq[i].r*filter_freq[i].r + filter_freq[i].i*filter_freq[i].i + delta);
			decon_freq[i].i = (trace_freq[i].i*filter_freq[i].r - trace_freq[i].r*filter_freq[i].i)/(filter_freq[i].r*filter_freq[i].r + filter_freq[i].i*filter_freq[i].i + delta);
d207 1
a207 1
		pfacr(-1,nfft,decon_freq,decon_time);
d212 2
a213 4
		for (it=0; it<nfft; it++)
			outtrace.data[it] = decon_time[it];
					

@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/* SUCDDECON: $Revision: 1.0 $ ; $Date: 2005/10/07  $		*/
d7 2
a8 2
#define LOOKFAC 5       /* Look ahead factor for npfao    */
#define PFA_MAX 720720  /* Largest allowed nfft           */
d13 2
a14 1
" SUCDDECON - DECONvolution by Complex Division with user-supplied filter",
d20 2
a21 1
" 									",
d23 3
a25 3
" panel=0		use only the first trace of sufile as filter 	",
" 			=1 decon trace by trace an entire gather	",
" deltaf=0.05	noise factor for stabilizing results    		",
d27 1
a27 4
" 					(only with panel=1)	 	",
" 									",
" Trace header fields accessed: ns, dt					",
" Trace header fields modified: none					",
d29 2
a30 1
" Notes: For given time-domain input data I(t) (stdin) and deconvolution",
d33 1
a33 1
"         I(f)               I(f) * adjoint[F(f)]			",
d35 1
a35 1
"         F(f)                |F(f)|^2 + delta				",
d46 3
d54 2
a55 2
 *     In the option, panel=1 the number of traces in the sufile must be 
 *     the same as the number of traces on the input.
d68 3
a70 3
	int it,i;	/* counter 				*/
	int ntout;	/* number of points on output traces	*/
	float dt;	/* sampling interval of input data*/
d73 3
a75 3
	float *trace=NULL;		/* copy of data trace*/
	float *filter=NULL;		/* copy of filter trace*/
	register float *filter_time=NULL; /* filter coefficients */
d79 20
a98 25
	register float *decon_time=NULL;	/* coefficients of deconvolved */
						/* trace in the time domain */
	register complex *filter_freq=NULL;	/* filter coefficients in the */
						/* frequency domain*/
	register complex *trace_freq=NULL;	/* data coefficients in the */
						/*  frequency domain */
	register complex *decon_freq=NULL;	/* coefficients of deconvolved */
						/* trace in the frequency domain */
	
	float delta=0;		/* noise factor for stabilizing output trace*/
	float deltaf=0;		/* input parameter for computing delta*/
	float sum_powspec=0;	/* sum of filter power spectra*/
	float powspec;		/* value of the spectra at a given sample*/
	
	float nyq;              /* nyquist frequency                    */
        int nfft;               /* number of points for fft data trace  */
        int nf;                 /* number of frequencies (incl Nyq)     */
	cwp_Bool seismic;	/* is this seismic data?		*/

	
	int nsfilt=0;	      	/* filter length in samples	*/
	int fsample_t;		/* index of first non-zero sample */
				/*  in zero-padded trace */
	int fsample_f;		/* index of first non-zero sample 
				/*  in zero-padded filter*/
d101 1
a101 1
	FILE *ft=NULL;		/* ... its second file pointer			*/
d103 2
a104 1
	int panel;		/* xcor with trace or panel 		*/
d115 1
a115 1
	ntout = nfft;
a118 10
	/*debugging warnings*/
	/*warn(" Set trace variables \n");*/
	
	
	/* Get parameters and set up filter array */
	if (!getparint("panel", &panel))  panel = 0;
	/*if (!getparint("ntrc",&ntrc)) ntrc=48;*/
	/*if (!getparint("zeropad",&zeropad)) zeropad=9;
	if ( zeropad % 2 ==0) err("please use odd integers for zeropad");*/
	
d122 2
a123 3
	/*nfft=zeropad*nt;*/
        if (nfft >= SU_NFLTS || nfft >= PFA_MAX)
               		err("Padded nt=%d -- too big", nfft);
d125 1
a125 6
        nf = nfft/2 + 1;
	
	/*debugging warnings*/
	/*warn(" Set FFT size \n");*/

	
d127 3
d132 1
a132 1
		if (!(nsfilt = countparval("filter")))
d140 2
a141 3
			nsfilt = sutrace.ns;
			fsample_f= ((int) (nfft-nsfilt)/2);
			filter = ealloc1float(nsfilt);
d144 7
a150 9
			memcpy(( void *) filter,
				(const void *) sutrace.data, nsfilt*FSIZE);
			memset(( void *) filter_time,
				(int) '\0', nfft*FSIZE);
				
			for (it=0; it<nsfilt; it++) filter_time[fsample_f+it] = filter[it];
			/*memcpy(( void *) &filter_time[fsample_f],
				(const void *) filter, nsfilt*FSIZE);*/
		}else{
d152 1
a152 2
			nsfilt = sutrace.ns;
			filter = ealloc1float(nsfilt);
a156 3
	
	fsample_t= ((int) (nfft-nt)/2);
	fsample_f= ((int) (nfft-nsfilt)/2);
d166 2
a167 4
	/*warn(" Get input variables and allocate space \n");*/
	
	/*debugging warnings*/
	fprintf(stderr, " nt=%d nsfilt=%d nfft=%d \n", nt, nsfilt, nfft);
a170 1
	
d172 1
a172 1
		if (panel == 1){
d176 5
a180 2
			/*copy traces from data and filter*/
			memcpy(( void *) trace,
d182 2
a183 2
			memcpy(( void *) filter,
				(const void *) sutrace.data, nsfilt*FSIZE);
a184 18
			/*debugging warnings*/
			/*warn(" Copied data and filter traces \n");*/
			
			/* make zero-padded traces with equal number of samples*/
			memset(( void *) filter_time,
			(int) '\0', nfft*FSIZE);
			memset(( void *) trace_time,
			(int) '\0', nfft*FSIZE);
			for (it=0; it<nsfilt; it++) filter_time[fsample_f+it] = filter[it];
			for (it=0; it<nt; it++) trace_time[fsample_t+it] = trace[it];
			/*memcpy(( void *) &filter_time[fsample_f],
				(const void *) filter, nsfilt*FSIZE);
			memcpy(( void *) &trace_time[fsample_t],
				(const void *) trace, nt*FSIZE);*/
			
			/*debugging warnings*/
			/*warn(" Made zero padded traces \n");*/

d186 2
a187 1
			memcpy(( void *) trace,
d189 1
a189 8
			memset(( void *) trace_time,
				(int) '\0', nfft*FSIZE);
			for (it=0; it<nt; it++) trace_time[fsample_t+it] = trace[it];
			/*memcpy(( void *) &trace_time[fsample_t],
				(const void *) trace, nt*FSIZE);*/
				
			/*debugging warnings*/
			/*warn(" Made zero padded traces \n");*/
d192 1
a192 5
		
		/*for (it=0; it<nfft; it++) fprintf(stderr, " trace[%d] = %2.4f    filter[%d] = %2.4f \n", it, trace_time[it], it,
		filter_time[it]);*/

		/*main trace manipulation goes here*/
d194 1
a194 1
		/*compute complex traces*/
a197 3
		/*debugging warnings*/
		/*warn(" Computed FFT time ---> freq \n");*/

a205 10
		/*pw_max=0;
		for (i=0; i<nfft; i++){
			powspec = filter_freq[i].r*filter_freq[i].r + filter_freq[i].i*filter_freq[i].i;
			if (powspec > pw_max) pw_max = powspec ;
			delta = deltaf * pw_max;
		
		}*/
		
		/*debugging warnings*/
		/*warn(" Computed delta \n");*/
a213 8
		
		
		/*for (i=0; i<nf; i++){
		
			decon_freq[i].r = trace_freq[i].r;
			decon_freq[i].i = trace_freq[i].i;
		}*/
		
d215 2
d219 2
a220 4
		for (it=0; it<nfft; it++) outtrace.data[it] = decon_time[it];
		/*memcpy((void *) outtrace,
				(const void *) &decon_time[fsample_t], nt*FSIZE);*/

a221 2
		memcpy((void *) &outtrace,
				(const void *) &intrace, HDRBYTES);
a224 1
		outtrace.delrt = 0;
a225 1
		
a228 1

@
