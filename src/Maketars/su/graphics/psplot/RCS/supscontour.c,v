head	1.22;
access;
symbols;
locks; strict;
comment	@ * @;


1.22
date	2011.11.12.00.46.15;	author john;	state Exp;
branches;
next	1.21;

1.21
date	2003.08.19.16.48.49;	author john;	state Exp;
branches;
next	1.20;

1.20
date	2003.08.19.16.47.16;	author john;	state Exp;
branches;
next	1.19;

1.19
date	98.08.25.19.54.26;	author john;	state Exp;
branches;
next	1.18;

1.18
date	97.02.24.16.11.20;	author john;	state Exp;
branches;
next	1.17;

1.17
date	96.09.17.15.33.05;	author jkc;	state Exp;
branches;
next	1.16;

1.16
date	96.09.10.15.20.43;	author john;	state Exp;
branches;
next	1.15;

1.15
date	95.10.03.19.10.51;	author jkc;	state Exp;
branches;
next	1.14;

1.14
date	95.02.28.12.59.31;	author jkc;	state Exp;
branches;
next	1.13;

1.13
date	95.02.21.14.56.31;	author jkc;	state Exp;
branches;
next	1.12;

1.12
date	95.01.19.12.08.38;	author john;	state Exp;
branches;
next	1.11;

1.11
date	94.11.28.15.44.23;	author john;	state Exp;
branches;
next	1.10;

1.10
date	94.09.30.18.27.27;	author john;	state Exp;
branches;
next	1.9;

1.9
date	94.09.16.12.56.08;	author john;	state Exp;
branches;
next	1.8;

1.8
date	93.11.29.14.50.04;	author john;	state Exp;
branches;
next	1.7;

1.7
date	93.09.10.21.26.29;	author john;	state Exp;
branches;
next	1.6;

1.6
date	92.10.26.14.53.10;	author john;	state Exp;
branches;
next	1.5;

1.5
date	91.09.06.07.58.25;	author jkcohen;	state Exp;
branches;
next	1.4;

1.4
date	91.07.02.16.25.00;	author jkcohen;	state Exp;
branches;
next	1.3;

1.3
date	90.11.20.12.59.29;	author jkc;	state Exp;
branches;
next	1.2;

1.2
date	90.09.13.10.27.28;	author jkc;	state Exp;
branches;
next	1.1;

1.1
date	90.06.04.15.47.53;	author jkc;	state Exp;
branches;
next	;


desc
@pscontour with su context
@


1.22
log
@copyright
@
text
@/* Copyright (c) Colorado School of Mines, 2011.*/
/* All rights reserved.                       */

/* SUPSCONTOUR: $Revision: 1.21 $ ; $Date: 2003/08/19 16:48:49 $		*/

#include "su.h"
#include "segy.h"
#include <signal.h>

/*********************** self documentation *****************************/
char *sdoc[] = {
"									",
" SUPSCONTOUR - PostScript CONTOUR plot of a segy data set		",
"									",
" supscontour <stdin [optional parameters] | ...			",
"									",
" Optional parameters:						 	",
"									",
" n2=tr.ntr or number of traces in the data set (ntr is an alias for n2)",
"									",
" d1=tr.d1 or tr.dt/10^6	sampling interval in the fast dimension	",
"   =.004 for seismic 		(if not set)				",
"   =1.0 for nonseismic		(if not set)				",
" 							        	",
" d2=tr.d2			sampling interval in the slow dimension	",
"   =1.0 			(if not set)				",
" 							        	",
" f1=tr.f1 or tr.delrt/10^3 or 0.0  first sample in the fast dimension	",
" 							        	",
" f2=tr.f2 or tr.tracr or tr.tracl  first sample in the slow dimension	",
"   =1.0 for seismic		    (if not set)			",
"   =d2 for nonseismic		    (if not set)			",
" 							        	",
" verbose=0              =1 to print some useful information		",
"									",
" tmpdir=	 	if non-empty, use the value as a directory path	",
"		 	prefix for storing temporary files; else if the	",
"	         	the CWP_TMPDIR environment variable is set use	",
"	         	its value for the path; else use tmpfile()	",
"									",
" Note that for seismic time domain data, the \"fast dimension\" is	",
" time and the \"slow dimension\" is usually trace number or range.	",
" Also note that \"foreign\" data tapes may have something unexpected	",
" in the d2,f2 fields, use segyclean to clear these if you can afford	",
" the processing time or use d2= f2= to override the header values if	",
" not.									",
"									",
" See the pscontour selfdoc for the remaining parameters.		",
"									",
" On NeXT:	supscontour < infile [optional parameters]  | open	",
"									",
" Trace header fields accessed: ns, ntr, tracr, tracl, delrt, trid,     ",
"	dt, d1, d2, f1, f2						",
NULL};

/* Credits:
 *
 *	CWP: Dave Hale and Zhiming Li (pscontour, etc.)
 *	   Jack Cohen and John Stockwell (supscontour, etc.)
 *      Delphi: Alexander Koek, added support for irregularly spaced traces
 *      Aarhus University: Morten W. Pedersen copied everything from the xwigb
 *                         source and just replaced all occurencies of the word
 *
 * Notes:
 *	When the number of traces isn't known, we need to count
 *	the traces for pscontour.  You can make this value "known"
 *	either by getparring n2 or by having the ntr field set
 *	in the trace header.  A getparred value takes precedence
 *	over the value in the trace header.
 *
 *	When we do have to count the traces, we use the "tmpfile"
 *	routine because on many machines it is implemented
 *	as a memory area instead of a disk file.
 *
 *	If your system does make a disk file, consider altering
 *	the code to remove the file on interrupt.  This could be
 *	done either by trapping the interrupt with "signal"
 *	or by using the "tmpnam" routine followed by an immediate
 *	"remove" (aka "unlink" in old unix).
 *
 *	When we must compute ntr, we don't allocate a 2-d array,
 *	but just content ourselves with copying trace by trace from
 *	the data "file" to the pipe into the plotting program.
 *	Although we could use tr.data, we allocate a trace buffer
 *	for code clarity.
 */
/**************** end self doc *******************************************/

static void closefiles(void);

/* Globals (so can trap signal) defining temporary disk files	*/
char tracefile[BUFSIZ];	/* filename for trace storage file	*/
FILE *tracefp;		/* fp for trace storage file		*/
char x2file[BUFSIZ];	/* filename for positions file		*/
FILE *x2fp;		/* fp for positions file		*/

segy tr;

int
main(int argc, char **argv)
{
	char *plotcmd;		/* build pscontour command for popen	*/
	float *trbuf;		/* trace buffer				*/
	FILE *plotfp;		/* fp for plot data			*/
	int nt;			/* number of samples on trace	  	*/
	int ntr;		/* number of traces			*/
	int verbose;		/* verbose flag				*/
	float d1;		/* time/depth sample rate		*/
	float d2;		/* trace/dx sample rate			*/
	float f1;		/* tmin/zmin			   	*/
	float f2;		/* tracemin/xmin			*/
	cwp_Bool seismic;	/* is this seismic data?		*/
	cwp_Bool have_ntr=cwp_false;/* is ntr known from header or user?	*/
	char *tmpdir;		/* directory path for tmp files		*/
	cwp_Bool istmpdir=cwp_false;/* true for user given path		*/

	char *cwproot;		/* value of CWPROOT environment variable*/
	char *bindir;		/* directory path for tmp files		*/

	/* Support for irregularly spaced data */
	cwp_String key;		/* header key word with x2 information  */
	cwp_String type=NULL;	/* ... its type			 	*/
	int index=0;		/* ... its index			*/
	cwp_Bool irregular=cwp_false;  /* if true, reading x2 from header   */
	cwp_String x2string;    /* string of x2 values			*/
	off_t x2len;		/* ... its length			*/
	Value val;		/* value of key				*/


	/* Initialize */
	initargs(argc, argv);
	requestdoc(1);
	
	/* Get info from first trace */
	if (!gettr(&tr)) err("can't get first trace");
	seismic = ISSEISMIC(tr.trid); 
	nt = tr.ns;
	ntr = tr.ntr;
	if (ntr) have_ntr = cwp_true; 

	if (!getparint("verbose", &verbose))    verbose=0;
	if (!getparfloat("d1", &d1)) {
		if      (tr.d1)  d1 = tr.d1;
		else if (tr.dt)  d1 = ((double) tr.dt)/1000000.0;
		else {
			if (seismic) {
				d1 = 0.004;
				warn("tr.dt not set, assuming dt=0.004");
			} else { /* non-seismic data */
				d1 = 1.0;
				warn("tr.d1 not set, assuming d1=1.0");
			}
		}
	}

	if (!getparfloat("d2", &d2)) d2 = (tr.d2) ? tr.d2 : 1.0;

	if (!getparfloat("f1", &f1)) {
		if      (tr.f1)     f1 = tr.f1;
		else if (tr.delrt)  f1 = (float) tr.delrt/1000.0;
		else                f1 = 0.0;
	}

	if (!getparfloat("f2", &f2)) {
		if	(tr.f2)	f2 = tr.f2;
		else if (tr.tracr)  f2 = (float) tr.tracr;
		else if (tr.tracl)  f2 = (float) tr.tracl;
		else if (seismic)   f2 = 1.0;
		else		f2 = 0.0;
	}


	if (getparstring("key", &key)) {
		type = hdtype(key);
		index = getindex(key);
		if ( (index = getindex(key)) == -1 )
			err("%s: keyword not in segy.h: '%s'", __FILE__, key);

		irregular = cwp_true;
	}
	/* Look for user-supplied tmpdir */
	if (!getparstring("tmpdir",&tmpdir) &&
	    !(tmpdir = getenv("CWP_TMPDIR"))) tmpdir="";
	if (!STREQ(tmpdir, "") && access(tmpdir, WRITE_OK))
		err("you can't write in %s (or it doesn't exist)", tmpdir);

	/* See if CWPBIN environment variable is not set */
	if (!(bindir = getenv("CWPBIN"))) { /* construct bindir from CWPROOT */

		bindir = (char *) emalloc(BUFSIZ);

		/* Get value of CWPROOT environment variable */
		if (!(cwproot = getenv("CWPROOT"))) cwproot ="" ;
		if (STREQ(cwproot, "")) {
			warn("CWPROOT environment variable is not set! ");
			err("Set CWPROOT in shell environment as per instructions in CWP/SU Installation README files");
		}
		/* then bindir = $CWPROOT/bin */
		sprintf(bindir, "%s/bin", cwproot);
	}
	strcat(bindir,"/");   /* put / at the end of bindir */

	/* Allocate trace buffer */
	trbuf = ealloc1float(nt);

	/* Get or set ntr */
	if (getparint("n2", &ntr) || getparint("ntr", &ntr)) have_ntr = cwp_true;

	if (!have_ntr || irregular) { /* count traces */

		if (verbose) {
	       		if (irregular) {
				warn("trace spacing from header field %s",key);
				warn("... getting positions");
			} else {
				warn("n2 not getparred and ntr header field"
				     " not set");
				warn("....  counting traces");
			}
		}

		/* Create temporary "file" to hold data */
		if (STREQ(tmpdir,"")) {
			tracefp = etmpfile();
			if (irregular) x2fp = etmpfile();
			if (verbose) warn("using tmpfile() call");
		} else { /* user-supplied tmpdir */
			char directory[BUFSIZ];
			strcpy(directory, tmpdir);
			strcpy(tracefile, temporary_filename(directory));
			strcpy(x2file, temporary_filename(directory));
			/* Handle user interrupts */
			signal(SIGINT, (void (*) (int)) closefiles);
			signal(SIGQUIT, (void (*) (int)) closefiles);
			signal(SIGHUP,  (void (*) (int)) closefiles);
			signal(SIGTERM, (void (*) (int)) closefiles);
			tracefp = efopen(tracefile, "w+");
			if (irregular) x2fp = efopen(x2file, "w+");
			istmpdir=cwp_true;		
			if (verbose)
			      warn("putting temporary files in %s", directory);
		}


		/* Loop over input data and read to temporary file */
		ntr = 0;
		if(irregular ) {
			float xmin=FLT_MAX,xmax=-FLT_MAX;

			fprintf(x2fp,"x2=");
			do {
				if(ntr) fprintf(x2fp,",");
				++ntr;
				gethval(&tr,index,&val);
				fprintfval(x2fp,type,val);
				xmin = MIN(xmin,vtof(type,val));
				xmax = MAX(xmax,vtof(type,val));
				efwrite(tr.data, FSIZE, nt, tracefp);
			} while (gettr(&tr));

			if(xmin==xmax) {
				warn("values in header %s all equal,",key);
				warn("using f2=%f d2=%f",f2,d2);
				irregular=cwp_false;
				have_ntr=cwp_false;
				efclose(x2fp);
			}

		} else {

			do {
				++ntr;
				efwrite(tr.data, FSIZE, nt, tracefp);
			} while (gettr(&tr));

		}

	} 

	/* Set up pscontour command line */
	if (irregular ) {
		x2len = (off_t) eftell( x2fp );
		x2string = (char *) emalloc( ++x2len );
		rewind(x2fp);
		fread(x2string,sizeof(char),x2len,x2fp);
		plotcmd = (char *) emalloc(x2len+BUFSIZ);
		sprintf(plotcmd, "%spscontour n1=%d d1=%f f1=%f %s", bindir,
			   nt, d1, f1, x2string);
		free(x2string);
	} else {
		plotcmd = (char *) emalloc(BUFSIZ);
		sprintf(plotcmd,
			"%spscontour n1=%d n2=%d d1=%f d2=%f f1=%f f2=%f", bindir, 
			   nt, ntr, d1, d2, f1, f2);
	}


	for (--argc, ++argv; argc; --argc, ++argv) {
		if (strncmp(*argv, "d1=", 3) && /* skip those already set */
		    strncmp(*argv, "d2=", 3) &&
		    strncmp(*argv, "f1=", 3) &&
		    strncmp(*argv, "f2=", 3)) {
		    
			strcat(plotcmd, " ");   /* put a space between args */
			strcat(plotcmd, "\"");  /* user quotes are stripped */
			strcat(plotcmd, *argv); /* add the arg */
			strcat(plotcmd, "\"");  /* user quotes are stripped */
		}
	}


	/* Open pipe to pscontour and send the traces */
	plotfp = epopen(plotcmd, "w");
	
	if (!have_ntr || irregular) { /* send out stored traces one by one */
		rewind(tracefp);
		{ register int itr;
			for (itr = 0; itr < ntr; ++itr) {
				efread (trbuf, FSIZE, nt, tracefp);
				efwrite(trbuf, FSIZE, nt, plotfp);
			}
		}
	} else { /* just pump out traces and let pscontour do the work */
		do {
			efwrite(tr.data, FSIZE, nt, plotfp);
		} while (gettr(&tr));
	}


	/* Clean up */
	epclose(plotfp);
	if (!have_ntr) {
		efclose(tracefp);
		if (istmpdir) eremove(tracefile);
	}
	if (irregular) {
		efclose(x2fp);
		if (istmpdir) eremove(x2file);
	}

	return EXIT_SUCCESS;
}

/* for graceful interrupt termination */
static void closefiles(void)
{
	efclose(tracefp);
	eremove(tracefile);
	efclose(x2fp);
	eremove(x2file);
	exit(EXIT_FAILURE);
}
@


1.21
log
@off_t put in for large file support
@
text
@d1 4
a4 1
/* SUPSCONTOUR: $Revision: 36.2 $ ; $Date: 2003/08/05 22:24:31 $		*/
@


1.20
log
@fixed to find CWPROOT path to avoid collision with nonCWP code of the same name
@
text
@d1 1
a1 1
/* SUPSCONTOUR: $Revision: 1.19 $ ; $Date: 1998/08/25 19:54:26 $		*/
d123 1
a123 1
	int x2len;		/* ... its length			*/
d279 1
a279 1
		x2len = (int) ftell( x2fp );
@


1.19
log
@*** empty log message ***
@
text
@d1 1
a1 1
/* SUPSCONTOUR: $Revision: 1.18 $ ; $Date: 1997/02/24 16:11:20 $		*/
d114 3
d184 16
d284 1
a284 1
		sprintf(plotcmd, "pscontour n1=%d d1=%f f1=%f %s",
d290 1
a290 1
			"pscontour n1=%d n2=%d d1=%f d2=%f f1=%f f2=%f",
@


1.18
log
@changed xcontour to pscontour
@
text
@d1 1
a1 1
/* SUPSCONTOUR: $Revision: 1.17 $ ; $Date: 1996/09/17 15:33:05 $		*/
d110 1
a110 1
	cwp_Bool have_ntr=false;/* is ntr known from header or user?	*/
d112 1
a112 1
	cwp_Bool istmpdir=false;/* true for user given path		*/
d118 1
a118 1
	cwp_Bool irregular=false;  /* if true, reading x2 from header   */
d133 1
a133 1
	if (ntr) have_ntr = true; 
d173 1
a173 1
		irregular = true;
d185 1
a185 1
	if (getparint("n2", &ntr) || getparint("ntr", &ntr)) have_ntr = true;
d217 1
a217 1
			istmpdir=true;		
d242 2
a243 2
				irregular=false;
				have_ntr=false;
@


1.17
log
@tmpdir stuff and added support for irregular traces
@
text
@d1 1
a1 1
/* SUPSCONTOUR: $Revision: 1.16 $ ; $Date: 1996/09/10 15:20:43 $		*/
d99 1
a99 1
	char *plotcmd;		/* build xcontour command for popen	*/
d265 1
a265 1
		sprintf(plotcmd, "xcontour n1=%d d1=%f f1=%f %s",
d271 1
a271 1
			"xcontour n1=%d n2=%d d1=%f d2=%f f1=%f f2=%f",
@


1.16
log
@silenced -Wall complaints
@
text
@d1 1
a1 1
/* SUPSCONTOUR: $Revision: 1.15 $ ; $Date: 1995/10/03 19:10:51 $		*/
d5 1
d31 6
d57 3
d86 7
d99 1
a99 1
	char plotcmd[BUFSIZ];   /* build pscontour command for popen	*/
a100 1
	FILE *datafp=NULL;	/* fp for trace data file 		*/
d111 11
d166 15
d187 2
a188 1
	if (!have_ntr) { /* count traces */
d190 8
a197 2
			warn("n2 not getparred and ntr header field not set");
			warn("....  counting traces");
d201 21
a221 1
		datafp = etmpfile();
d225 28
a252 4
		do {
			++ntr;
			efwrite(tr.data, FSIZE, nt, datafp);
		} while (gettr(&tr));
d254 1
d259 13
a271 2
	sprintf(plotcmd,
		"pscontour n1=%d n2=%d d1=%f d2=%f f1=%f f2=%f",
d273 2
d293 2
a294 2
	if (!have_ntr) { /* send out stored traces one by one */
		rewind(datafp);
d297 1
a297 1
				efread (trbuf, FSIZE, nt, datafp);
d310 8
a317 1
	if (!have_ntr) efclose(datafp);
d320 10
@


1.15
log
@Honor f1 and d1.  Converted to standard style self-doc.
@
text
@d1 1
a1 1
/* SUPSCONTOUR: $Revision: 1.14 $ ; $Date: 1995/02/28 12:59:31 $		*/
d79 1
d84 1
a84 1
	FILE *datafp;		/* fp for trace data file 		*/
@


1.14
log
@Modified boolean variables and improved their names.
@
text
@d1 1
a1 1
/* SUPSCONTOUR: $Revision: 1.13 $ ; $Date: 95/02/21 14:56:31 $		*/
d15 1
a15 1
" n2 is the number of traces (ntr is an acceptable alias for n2)	",
d17 13
a29 14
" d1 is the sampling interval in the fast dimension.  If not getparred  ",
" then for seismic time domain data d1=tr.dt/10^6 if set, else 0.004.	",
" For other types of data d1=tr.d1 if set, else 1.0			",
"									",
" d2 is the sampling interval in the slow dimension.  If not getparred  ",
" d2=tr.d2 if set, else 1.0						",
"									",
" f1 is the first sample in the fast dimension.  If not getparred	",
" then for seismic time domain data f1=tr.delrt/10^3 if set, else 0.0.  ",
" For other types of data f1=tr.d1 if set else 0.0			",
"									",
" f2 is the first sample in the slow dimension.  If not getparred	",
" f2=tr.f2 if set, else tr.tracr if set, else tr.tracl if set,		",
" else 1.0 for seismic time domain data, else 0.0			",
d109 4
a112 4
		if (seismic) {
			if (tr.dt) {
				d1 = (float) tr.dt / 1000000.0;
			} else {
d115 1
a115 5
			}
		} else { /* non-seismic data */
			if (tr.d1) {
				d1 = tr.d1;
			} else {
d125 3
a127 5
		if (seismic) {
			f1 = (tr.delrt) ? (float) tr.delrt/1000.0 : 0.0;
		} else {
			f1 = (tr.f1) ? tr.f1 : 0.0;
		}
@


1.13
log
@Modified boolean test variables.
@
text
@d1 1
a1 1
/* SUPSCONTOUR: $Revision: 1.18 $ ; $Date: 95/01/19 12:09:21 $		*/
d94 1
a94 1
	cwp_Bool know_ntr=false;/* is ntr known from header or user?	*/
d106 1
a106 1
	if (ntr) know_ntr = true; 
d149 1
a149 1
	if (getparint("n2", &ntr) || getparint("ntr", &ntr)) know_ntr = true;
d151 1
a151 1
	if (!know_ntr) { /* count traces */
d192 1
a192 1
	if (!know_ntr) { /* send out stored traces one by one */
d209 1
a209 1
	if (!know_ntr) efclose(datafp);
@


1.12
log
@added verbose
@
text
@d1 1
a1 1
/* SUPSCONTOUR: $Revision: 1.11 $ ; $Date: 94/11/28 15:44:23 $		*/
d8 1
a8 1
" 									",
d10 1
a10 1
" 									",
d12 7
a18 8
" 							        	",
" Optional parameters: 							",
" 							        	",
" n2 is the number of traces.  If not getparred then it			",
" is the total number of traces in the data set.  			",
" 							        	",
" d1 is the sampling interval in the fast dimension.  If not getparred	",
" then for seismic time domain data d1=tr.dt/10^6 if set, else 0.004. 	",
d20 2
a21 2
" 							        	",
" d2 is the sampling interval in the slow dimension.  If not getparred	",
d23 1
a23 1
" 							        	",
d25 3
a27 3
" then for seismic time domain data f1=tr.delrt/10^3 if set, else 0.0.	",
" For other types of data f1=tr.d1 if set else 0.0	 		",
" 							        	",
d30 2
a31 2
" else 1.0 for seismic time domain data, else 0.0 			",
" 							        	",
d36 1
a36 1
" the processing time or use d2= f2= to over-ride the header values if	",
d38 1
a38 1
" 							        	",
d40 5
a44 2
" 							        	",
" On NeXT:     supscontour < infile [optional parameters]  | open      	",
d49 2
a50 3
 *	CWP: Dave Hale and Zhiming Li (pscontour)
 *	     Jack K. Cohen  (suxmovie)
 *	     John Stockwell (supscontour)
d53 18
a70 11
 *	When n2 isn't getparred, we need to count the traces
 *	for pscontour.  In this case:
 *	we are using tmpfile because on many machines it is
 *	implemented as a memory area instead of a disk file.
 *	However, if your system really makes a disk file you
 *	should consider altering the code to remove the file
 *	on interrupt.  Two possibilities are trapping the
 *	interrupt with "signal" or using "tmpnam" followed
 *	by an immediate "remove" (aka unlink in old unix).
 *	Although we compute ntr, we don't allocate a 2-d array
 *	and content ourselves with copying trace by trace from
d82 3
a84 3
	char plotcmd[BUFSIZ];	/* build pscontour command for popen 	*/
	float *trbuf;		/* trace buffer			 	*/
	FILE *datafp;		/* fp for trace data file (if n2 < ntr)	*/
d86 1
a86 2
	int nt;			/* number of samples on trace		*/
	int n2;			/* number of traces			*/
d88 5
a92 5
	int verbose;		/* verbose?				*/
	float d1;		/* time/depth sample rate 		*/
	float d2;		/* trace/dx sample rate 		*/
	float f1;		/* tmin/zmin				*/
	float f2;		/* tracemin/xmin	 		*/
d94 1
a94 2
	cwp_Bool got_n2 = true;	/* was n2 getparred?			*/
	cwp_Bool got_ntr = true;	/* was ntr set in header?	*/
a103 1
		 
d106 1
a106 1
	if (ntr==0) got_ntr = false; 
d108 1
a108 2
	if (!getparint("verbose", &verbose)) 	verbose=0;

d138 1
a138 1
		if      (tr.f2)     f2 = tr.f2;
d142 1
a142 1
		else 		    f2 = 0.0;
a144 2
	if (!getparfloat("f2", &f2)) f2 = 1.0;

d148 2
a149 2
	/* Get or set n2 and n3 */
	if (!getparint("n2", &n2)) got_n2 = false;
d151 2
a152 2
	if (!got_n2 && !got_ntr) { /* count traces */
 		if (verbose) {
d154 1
a154 1
 			warn("....  counting traces");
a169 2
	if (!got_n2) n2 = ntr;

d173 1
a173 1
			   nt, n2, d1, d2, f1, f2);
d192 1
a192 1
	if (!got_n2 && !got_ntr) { /* send out stored traces one by one */
d209 1
a209 1
	if (!got_n2 && !got_ntr) efclose(datafp);
@


1.11
log
@changed to permit slow dimension to be input via getpar of n2 or via
new locally assigned header field "ntr".
@
text
@d1 1
a1 1
/* SUPSCONTOUR: $Revision: 1.2 $ ; $Date: 94/09/16 12:56:19 $		*/
d81 1
d103 2
d150 4
a153 2
 		warn("n2 not getparred and ntr header field not set");
 		warn("....  counting traces");
@


1.10
log
@made it so that it would plot non seismic data using f2 and d2
@
text
@d1 1
a1 1
/* SUPSCONTOUR: $Revision: 1.9 $ ; $Date: 94/09/16 12:56:08 $		*/
d8 5
a12 5
"									",
" SUPSCONTOUR - PostScript CONTOURing of a segy data set		",
"									",
" supscontour <stdin >postscript file [optional parameters]		",
"							        	",
a13 5
"							        	",
" d1=tr.dt or 0.004      sampling interval in fast dim, often dt or dz	",
" d2=1.0                 ... in slow dim, often unit step in trace or dx",
" f1=tr.delrt/1000.0     first sample in fast dim, often tmin or zmin	",
" f2=1.0                 ... in slow dim, often first tracl or xmin	",
d15 25
d41 2
a42 1
"							        	",
d47 3
a49 1
 *	CWP: Dave (pscontour), Jack & John (su tee shirt)
d51 15
a71 2


d74 7
a80 3
	char psdata[L_tmpnam];	/* tmp file for psimage data		*/
	char cmd[BUFSIZ];	/* build psimage command for system call*/
	FILE *psdatafp;		/* fp for psimage input file		*/
a84 3
	int ns;			/* number of samples on trace		*/
	int ntr;		/* number of traces			*/
	int itr;		/* counter over traces			*/
d86 2
d98 3
a100 1
	ns = tr.ns;
d138 1
d140 2
a141 3
	/* Prepare temporary file to hold psdata */
	tmpnam(psdata);
	psdatafp = efopen(psdata, "w+");
d143 2
d146 3
a148 7
	/* Loop over input traces & put them into the psdata file */
	ntr = 0;
	do {
		++ntr;
		efwrite(tr.data, FSIZE, ns, psdatafp);
	} while (gettr(&tr));
	erewind(psdatafp);
d150 2
d153 6
a158 3
	/* System call to pscontour */
	sprintf(cmd, "pscontour <%s n1=%d n2=%d d1=%f d2=%f f1=%f f2=%f",
			   psdata, ns, ntr, d1, d2, f1, f2);
d160 10
d176 4
a179 4
			strcat(cmd, " ");   /* get a space in between args */
			strcat(cmd, "\"");  /* user quotes will be stripped */
			strcat(cmd, *argv); /* add the arg */
			strcat(cmd, "\"");  /* user quotes will be stripped */
a182 1
	system(cmd);
d184 16
d201 1
d203 2
a204 3
	efclose(psdatafp);
	eremove(psdata);

@


1.9
log
@cosmetic changes
@
text
@d1 1
a1 1
/* SUPSCONTOUR: $Revision: 1.8 $ ; $Date: 93/11/29 14:50:04 $		*/
d48 1
a54 1

d57 2
d60 1
d62 14
a75 5
		if (tr.dt) {  /* is dt field set? */
			d1 = (float) tr.dt / 1000000.0;
		} else {		/* dt not set, assume 4 ms */
			d1 = 0.004;
			warn("tr.dt not set, assuming dt=%g", d1);
d78 6
a83 5
	if (!getparfloat("d2", &d2)) d2 = 1.0; /* default count by traces */
	if (!getparfloat("f1", &f1)) f1 = tr.delrt/1000.0;
	if (!getparfloat("f2", &f2)) {
		if (tr.tracl) {
			f2 = tr.tracl;
d85 1
a85 1
			f2 = 1.0;
d88 9
@


1.8
log
@added explicit cast.
@
text
@d1 1
a1 1
/* SUPSCONTOUR: $Revision: 1.7 $ ; $Date: 93/09/10 21:26:29 $		*/
a2 13
/*----------------------------------------------------------------------
 * Copyright (c) Colorado School of Mines, 1990.
 * All rights reserved.
 *
 * This code is part of SU.  SU stands for Seismic Unix, a processing line
 * developed at the Colorado School of Mines, partially based on Stanford
 * Exploration Project (SEP) software.  Inquiries should be addressed to:
 *
 *  Jack K. Cohen, Center for Wave Phenomena, Colorado School of Mines,
 *  Golden, CO 80401  (jkc@@dix.mines.colorado)
 *----------------------------------------------------------------------
 */

a22 1
/**************** end self doc *******************************************/
d29 1
@


1.7
log
@no change
@
text
@d1 1
a1 1
/* SUPSCONTOUR: $Revision: 1.6 $ ; $Date: 92/10/26 14:53:10 $		*/
d73 1
a73 1
			d1 = tr.dt / 1000000.0;
@


1.6
log
@new selfdoc installed
@
text
@d1 1
a1 1
/* SUPSCONTOUR: $Revision: 1.5 $ ; $Date: 91/09/06 07:58:25 $		*/
@


1.5
log
@string -> String, etc.
@
text
@d1 1
a1 1
/* SUPSCONTOUR: $Revision: 1.3 $ ; $Date: 90/11/20 12:59:29 $		*/
d20 16
a35 17
String sdoc = "\
									\n\
SUPSCONTOUR - PostScript CONTOURing of a segy data set		 	\n\
									\n\
supscontour <stdin >postscript file [optional parameters]		\n\
							        	\n\
Optional parameters: 							\n\
							        	\n\
d1=tr.dt or 0.004      sampling interval in fast dim, often dt or dz	\n\
d2=1.0                 ... in slow dim, often unit step in trace or dx	\n\
f1=tr.delrt/1000.0     first sample in fast dim, often tmin or zmin	\n\
f2=1.0                 ... in slow dim, often first tracl or xmin	\n\
							        	\n\
 							        	\n\
See the pscontour selfdoc for the remaining parameters.			\n\
							        	\n\
";
d65 1
a65 1
	askdoc(1);
@


1.4
log
@Fixed self-doc
@
text
@d20 1
a20 1
string sdoc = "\
d72 1
a72 1
	if (!fgetpar("d1", &d1)) {
d80 1
a80 1
	if (!fgetpar("d2", &d2)) d2 = 1.0; /* default count by traces */
d82 1
a82 1
	if (!fgetpar("f2", &f2)) {
@


1.3
log
@use tr.delrt
@
text
@d1 1
a1 1
/* SUPSCONTOUR: $Revision: 1.2 $ ; $Date: 90/09/13 10:27:28 $		*/
d33 2
a34 34
x1=f1,f1+d1,...        array of monotonic sampled values in 1st dimension\n\
x2=f2,f2+d2,...        array of monotonic sampled values in 2nd dimension\n\
nc=5                   number of contour values				\n\
dc=(max-min)/nc        contour interval					\n\
fc=min+dc              first contour					\n\
c=fc,fc+dc,...         array of contour values				\n\
cwidth=1.0,...         array of contour line widths			\n\
cgray=0.0,...          array of contour grays (0.0=black to 1.0=white)	\n\
cdash=0.0,...          array of dash spacings (0.0 for solid)		\n\
xbox=1.5               offset in inches of left side of axes box	\n\
ybox=1.5               offset in inches of bottom side of axes box	\n\
wbox=6.0               width in inches of axes box			\n\
hbox=8.0               height in inches of axes box			\n\
x1beg=x1min            value at which axis 1 begins			\n\
x1end=x1max            value at which axis 1 ends			\n\
d1num=0.0              numbered tic interval on axis 1 (0.0 for automatic)\n\
f1num=x1min            first numbered tic on axis 1 (used if d1num not 0.0)\n\
n1tic=1                number of tics per numbered tic on axis 1	\n\
grid1=none             grid lines on axis 1 - none, dot, dash, or solid	\n\
label1=                label on axis 1					\n\
x2beg=x2min            value at which axis 2 begins			\n\
x2end=x2max            value at which axis 2 ends			\n\
d2num=0.0              numbered tic interval on axis 2 (0.0 for automatic)\n\
f2num=x2min            first numbered tic on axis 2 (used if d2num not 0.0)\n\
n2tic=1                number of tics per numbered tic on axis 2	\n\
grid2=none             grid lines on axis 2 - none, dot, dash, or solid	\n\
label2=                label on axis 2					\n\
labelfont=Helvetica    font name for axes labels			\n\
labelsize=12           font size for axes labels			\n\
title=                 title of plot					\n\
titlefont=Helvetica-Bold font name for title				\n\
titlesize=24           font size for title				\n\
style=seismic          normal (axis 1 horizontal, axis 2 vertical) or	\n\
                       seismic (axis 1 vertical, axis 2 horizontal)	\n\
@


1.2
log
@Fixed quote stripping bug reported by Craig.
@
text
@d1 1
a1 1
/* SUPSCONTOUR: $Revision: 1.1 $ ; $Date: 90/06/04 15:47:53 $		*/
d30 1
a30 1
f1=0.0                 first sample in fast dim, often tmin or zmin	\n\
d113 1
a113 1
	if (!fgetpar("f1", &f1)) f1 = 0.0; /* default tmin */
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/* SUPSCONTOUR: $Revision: 1.1 $ ; $Date: 90/06/04 14:11:42 $		*/
d141 1
a141 1
		if (strncmp(*argv, "d1=", 3) && /* these already set */
d146 4
a149 2
			/* get a space in between args */
			strcat(cmd, " "); strcat(cmd, *argv);
@
