head	1.25;
access;
symbols;
locks; strict;
comment	@ * @;


1.25
date	2011.11.12.00.46.15;	author john;	state Exp;
branches;
next	1.24;

1.24
date	2010.03.17.22.10.11;	author john;	state Exp;
branches;
next	1.23;

1.23
date	2003.08.19.16.47.16;	author john;	state Exp;
branches;
next	1.22;

1.22
date	98.08.25.19.54.26;	author john;	state Exp;
branches;
next	1.21;

1.21
date	96.09.17.16.12.52;	author jkc;	state Exp;
branches;
next	1.20;

1.20
date	96.09.10.15.20.43;	author john;	state Exp;
branches;
next	1.19;

1.19
date	95.10.03.19.20.23;	author jkc;	state Exp;
branches;
next	1.18;

1.18
date	95.02.28.13.00.06;	author jkc;	state Exp;
branches;
next	1.17;

1.17
date	95.02.21.14.56.46;	author jkc;	state Exp;
branches;
next	1.16;

1.16
date	95.01.19.12.09.13;	author john;	state Exp;
branches;
next	1.15;

1.15
date	95.01.19.11.41.40;	author john;	state Exp;
branches;
next	1.14;

1.14
date	94.11.28.15.45.16;	author john;	state Exp;
branches;
next	1.13;

1.13
date	94.09.16.12.56.24;	author john;	state Exp;
branches;
next	1.12;

1.12
date	94.03.30.13.58.20;	author john;	state Exp;
branches;
next	1.11;

1.11
date	93.09.14.13.19.21;	author jkc;	state Exp;
branches;
next	1.10;

1.10
date	93.09.10.21.28.07;	author john;	state Exp;
branches;
next	1.9;

1.9
date	92.10.26.15.00.28;	author john;	state Exp;
branches;
next	1.8;

1.8
date	91.09.06.07.58.39;	author jkcohen;	state Exp;
branches;
next	1.7;

1.7
date	91.03.05.15.17.14;	author jkcohen;	state Exp;
branches;
next	1.6;

1.6
date	91.03.03.13.48.33;	author jkc;	state Exp;
branches;
next	1.5;

1.5
date	91.02.22.15.13.39;	author jkcohen;	state Exp;
branches;
next	1.4;

1.4
date	91.02.14.13.22.51;	author jkcohen;	state Exp;
branches;
next	1.3;

1.3
date	90.11.20.12.55.33;	author jkc;	state Exp;
branches;
next	1.2;

1.2
date	90.09.13.10.27.48;	author jkc;	state Exp;
branches;
next	1.1;

1.1
date	90.06.04.11.44.37;	author jkc;	state Exp;
branches;
next	;


desc
@psimage with su framework
@


1.25
log
@copyright
@
text
@/* Copyright (c) Colorado School of Mines, 2011.*/
/* All rights reserved.                       */

/* SUPSIMAGE: $Revision: 1.24 $ ; $Date: 2010/03/17 22:10:11 $		*/

#include "su.h"
#include "segy.h"
#include <signal.h>

/*********************** self documentation *****************************/
char *sdoc[] = {
"									",
" SUPSIMAGE - PostScript IMAGE plot of a segy data set			",
"									",
" supsimage <stdin [optional parameters] | ...				",
"									",
" Optional parameters:						 	",
"									",
" n2=tr.ntr or number of traces in the data set (ntr is an alias for n2)",
"									",
" d1=tr.d1 or tr.dt/10^6	sampling interval in the fast dimension	",
"   =.004 for seismic 		(if not set)				",
"   =1.0 for nonseismic		(if not set)				",
" 							        	",
" d2=tr.d2			sampling interval in the slow dimension	",
"   =1.0 			(if not set)				",
" 							        	",
" f1=tr.f1 or tr.delrt/10^3 or 0.0  first sample in the fast dimension	",
" 							        	",
" f2=tr.f2 or tr.tracr or tr.tracl  first sample in the slow dimension	",
"   =1.0 for seismic		    (if not set)			",
"   =d2 for nonseismic		    (if not set)			",
"									",
" verbose=0              =1 to print some useful information		",
"									",
" tmpdir=	 	if non-empty, use the value as a directory path	",
"		 	prefix for storing temporary files; else if the	",
"	         	the CWP_TMPDIR environment variable is set use	",
"	         	its value for the path; else use tmpfile()	",
" 									",
" Note that for seismic time domain data, the \"fast dimension\" is	",
" time and the \"slow dimension\" is usually trace number or range.	",
" Also note that \"foreign\" data tapes may have something unexpected	",
" in the d2,f2 fields, use segyclean to clear these if you can afford	",
" the processing time or use d2= f2= to override the header values if	",
" not.									",
"									",
" See the psimage selfdoc for the remaining parameters.		",
"									",
" On NeXT:	supsimage < infile [optional parameters]  | open	",
"									",
" Trace header fields accessed: ns, ntr, tracr, tracl, delrt, trid,     ",
"	dt, d1, d2, f1, f2						",
NULL};

/* Credits:
 *
 *	CWP: Dave Hale and Zhiming Li (psimage, etc.)
 *	   Jack Cohen and John Stockwell (supsimage, etc.)
 *
 * Notes:
 *	When the number of traces isn't known, we need to count
 *	the traces for psimage.  You can make this value "known"
 *	either by getparring n2 or by having the ntr field set
 *	in the trace header.  A getparred value takes precedence
 *	over the value in the trace header.
 *
 *	When we do have to count the traces, we use the "tmpfile"
 *	routine because on many machines it is implemented
 *	as a memory area instead of a disk file.
 *	"remove" (aka "unlink" in old unix).
 *
 *	When we must compute ntr, we don't allocate a 2-d array,
 *	but just content ourselves with copying trace by trace from
 *	the data "file" to the pipe into the plotting program.
 *	Although we could use tr.data, we allocate a trace buffer
 *	for code clarity.
 */
/**************** end self doc *******************************************/

static void closefiles(void);

/* Globals (so can trap signal) defining temporary disk files	*/
char tracefile[BUFSIZ];	/* filename for trace storage file	*/
FILE *tracefp;		/* fp for trace storage file		*/


segy tr;

int
main(int argc, char **argv)
{
	char plotcmd[BUFSIZ];   /* build psimage command for popen	*/
	float *trbuf;		/* trace buffer				*/
	FILE *plotfp;		/* fp for plot data			*/
	int nt;			/* number of samples on trace	  	*/
	int ntr;		/* number of traces			*/
	int verbose;		/* verbose flag				*/
	float d1;		/* time/depth sample rate		*/
	float d2;		/* trace/dx sample rate			*/
	float f1;		/* tmin/zmin			   	*/
	float f2;		/* tracemin/xmin			*/
	cwp_Bool seismic;	/* is this seismic data?		*/
	cwp_Bool have_ntr=cwp_false;/* is ntr known from header or user?	*/
	char *tmpdir;		/* directory path for tmp files		*/
	cwp_Bool istmpdir=cwp_false;/* true for user given path		*/

	char *cwproot;		/* value of CWPROOT environment variable*/
	char *bindir;		/* directory path for tmp files		*/

	/* Initialize */
	initargs(argc, argv);
	requestdoc(1);
	
	/* Get info from first trace */
	if (!gettr(&tr)) err("can't get first trace");
	seismic = ISSEISMIC(tr.trid); 
	nt = tr.ns;
	ntr = tr.ntr;
	if (ntr) have_ntr = cwp_true; 

	if (!getparint("verbose", &verbose))    verbose=0;
	if (!getparfloat("d1", &d1)) {
		if      (tr.d1)  d1 = tr.d1;
		else if (tr.dt)  d1 = ((double) tr.dt)/1000000.0;
		else {
			if (seismic) {
				d1 = 0.004;
				warn("tr.dt not set, assuming dt=0.004");
			} else { /* non-seismic data */
				d1 = 1.0;
				warn("tr.d1 not set, assuming d1=1.0");
			}
		}
	}

	if (!getparfloat("d2", &d2)) d2 = (tr.d2) ? tr.d2 : 1.0;

	if (!getparfloat("f1", &f1)) {
		if      (tr.f1)     f1 = tr.f1;
		else if (tr.delrt)  f1 = (float) tr.delrt/1000.0;
		else                f1 = 0.0;
	}

	if (!getparfloat("f2", &f2)) {
		if	(tr.f2)	f2 = tr.f2;
		else if (tr.tracr)  f2 = (float) tr.tracr;
		else if (tr.tracl)  f2 = (float) tr.tracl;
		else if (seismic)   f2 = 1.0;
		else		f2 = 0.0;
	}

	/* Look for user-supplied tmpdir */
	if (!getparstring("tmpdir",&tmpdir) &&
	    !(tmpdir = getenv("CWP_TMPDIR"))) tmpdir="";
	if (!STREQ(tmpdir, "") && access(tmpdir, WRITE_OK))
		err("you can't write in %s (or it doesn't exist)", tmpdir);

	/* See if CWPBIN environment variable is not set */
	if (!(bindir = getenv("CWPBIN"))) { /* construct bindir from CWPROOT */

		bindir = (char *) emalloc(BUFSIZ);

		/* Get value of CWPROOT environment variable */
		if (!(cwproot = getenv("CWPROOT"))) cwproot ="" ;
		if (STREQ(cwproot, "")) {
			warn("CWPROOT environment variable is not set! ");
			err("Set CWPROOT in shell environment as per instructions in CWP/SU Installation README files");
		}
		/* then bindir = $CWPROOT/bin */
		sprintf(bindir, "%s/bin", cwproot);
	}
	strcat(bindir,"/");   /* put / at the end of bindir */

	/* Allocate trace buffer */
	trbuf = ealloc1float(nt);

	/* Get or set ntr */
	if (getparint("n2", &ntr) || getparint("ntr", &ntr)) have_ntr = cwp_true;

	if (!have_ntr) { /* count traces */
		if (verbose) {
			warn("n2 not getparred and ntr header field not set");
			warn("....  counting traces");
		}

		/* Create temporary "file" to hold data */
		/* Create temporary "file" to hold data */
		if (STREQ(tmpdir,"")) {
			tracefp = etmpfile();
			if (verbose) warn("using tmpfile() call");
		} else { /* user-supplied tmpdir */
			char directory[BUFSIZ];
			strcpy(directory, tmpdir);
			strcpy(tracefile, temporary_filename(directory));
			/* Handle user interrupts */
			signal(SIGINT, (void (*) (int)) closefiles);
			signal(SIGQUIT, (void (*) (int)) closefiles);
			signal(SIGHUP,  (void (*) (int)) closefiles);
			signal(SIGTERM, (void (*) (int)) closefiles);
			tracefp = efopen(tracefile, "w+");
			istmpdir=cwp_true;		
			if (verbose)
			      warn("putting temporary files in %s", directory);
		}

		/* Loop over input data and read to temporary file */
		ntr = 0;
		do {
			++ntr;
			efwrite(tr.data, FSIZE, nt, tracefp);
		} while (gettr(&tr));


	} 

	/* Set up psimage command line */
	sprintf(plotcmd,
		"%spsimage n1=%d n2=%d d1=%f d2=%f f1=%f f2=%f", bindir,
			   nt, ntr, d1, d2, f1, f2);

	for (--argc, ++argv; argc; --argc, ++argv) {
		if (strncmp(*argv, "d1=", 3) && /* skip those already set */
		    strncmp(*argv, "d2=", 3) &&
		    strncmp(*argv, "f1=", 3) &&
		    strncmp(*argv, "f2=", 3)) {
		    
			strcat(plotcmd, " ");   /* put a space between args */
			strcat(plotcmd, "\"");  /* user quotes are stripped */
			strcat(plotcmd, *argv); /* add the arg */
			strcat(plotcmd, "\"");  /* user quotes are stripped */
		}
	}

	/* Open pipe to psimage and send the traces */
	plotfp = epopen(plotcmd, "w");
	
	if (!have_ntr) { /* send out stored traces one by one */
		rewind(tracefp);
		{ register int itr;
			for (itr = 0; itr < ntr; ++itr) {
				efread (trbuf, FSIZE, nt, tracefp);
				efwrite(trbuf, FSIZE, nt, plotfp);
			}
		}
	} else { /* just pump out traces and let psimage do the work */
		do {
			efwrite(tr.data, FSIZE, nt, plotfp);
		} while (gettr(&tr));
	}


	/* Clean up */
	epclose(plotfp);
	if (!have_ntr) {
		efclose(tracefp);
		if (istmpdir) eremove(tracefile);
	}

	return EXIT_SUCCESS;
}

/* for graceful interrupt termination */
static void closefiles(void)
{
	efclose(tracefp);
	eremove(tracefile);
	exit(EXIT_FAILURE);
}
@


1.24
log
@Ekkehart Tessmer's additions
@
text
@d1 4
a4 1
/* SUPSIMAGE: $Revision: 1.23 $ ; $Date: 2003/08/19 16:47:16 $		*/
@


1.23
log
@fixed to find CWPROOT path to avoid collision with nonCWP code of the same name
@
text
@d1 1
a1 1
/* SUPSIMAGE: $Revision: 1.22 $ ; $Date: 1998/08/25 19:54:26 $		*/
d45 1
a45 1
" See the psimage selfdoc for the remaining parameters.			",
a231 1

@


1.22
log
@*** empty log message ***
@
text
@d1 1
a1 1
/* SUPSIMAGE: $Revision: 1.21 $ ; $Date: 1996/09/17 16:12:52 $		*/
d105 2
d156 16
d216 1
a216 1
		"psimage n1=%d n2=%d d1=%f d2=%f f1=%f f2=%f",
@


1.21
log
@Added tmpdir stuff.
@
text
@d1 1
a1 1
/* SUPSIMAGE: $Revision: 1.20 $ ; $Date: 1996/09/10 15:20:43 $		*/
d101 1
a101 1
	cwp_Bool have_ntr=false;/* is ntr known from header or user?	*/
d103 1
a103 1
	cwp_Bool istmpdir=false;/* true for user given path		*/
d115 1
a115 1
	if (ntr) have_ntr = true; 
d158 1
a158 1
	if (getparint("n2", &ntr) || getparint("ntr", &ntr)) have_ntr = true;
d181 1
a181 1
			istmpdir=true;		
@


1.20
log
@silenced -Wall complaints
@
text
@d1 1
a1 1
/* SUPSIMAGE: $Revision: 1.19 $ ; $Date: 1995/10/03 19:20:23 $		*/
d5 1
d31 7
a67 5
 *
 *	If your system does make a disk file, consider altering
 *	the code to remove the file on interrupt.  This could be
 *	done either by trapping the interrupt with "signal"
 *	or by using the "tmpnam" routine followed by an immediate
d78 6
a91 1
	FILE *datafp=NULL;	/* fp for trace data file 		*/
d102 2
d148 6
d167 18
a184 1
		datafp = etmpfile();
d190 1
a190 1
			efwrite(tr.data, FSIZE, nt, datafp);
d219 1
a219 1
		rewind(datafp);
d222 1
a222 1
				efread (trbuf, FSIZE, nt, datafp);
d235 4
a238 1
	if (!have_ntr) efclose(datafp);
d241 8
@


1.19
log
@Honor f1 and d1.  Converted to standard style self-doc.
@
text
@d1 1
a1 1
/* SUPSIMAGE: $Revision: 1.18 $ ; $Date: 1995/02/28 13:00:06 $		*/
d78 1
d83 1
a83 1
	FILE *datafp;		/* fp for trace data file 		*/
@


1.18
log
@Modified boolean variables and improved their names.
@
text
@d1 1
a1 1
/* SUPSIMAGE: $Revision: 1.17 $ ; $Date: 95/02/21 14:56:46 $		*/
d15 1
a15 1
" n2 is the number of traces (ntr is an acceptable alias for n2)	",
d17 12
a28 14
" d1 is the sampling interval in the fast dimension.  If not getparred  ",
" then for seismic time domain data d1=tr.dt/10^6 if set, else 0.004.	",
" For other types of data d1=tr.d1 if set, else 1.0			",
"									",
" d2 is the sampling interval in the slow dimension.  If not getparred  ",
" d2=tr.d2 if set, else 1.0						",
"									",
" f1 is the first sample in the fast dimension.  If not getparred	",
" then for seismic time domain data f1=tr.delrt/10^3 if set, else 0.0.  ",
" For other types of data f1=tr.d1 if set else 0.0			",
"									",
" f2 is the first sample in the slow dimension.  If not getparred	",
" f2=tr.f2 if set, else tr.tracr if set, else tr.tracl if set,		",
" else 1.0 for seismic time domain data, else 0.0			",
d108 4
a111 4
		if (seismic) {
			if (tr.dt) {
				d1 = (float) tr.dt / 1000000.0;
			} else {
d114 1
a114 5
			}
		} else { /* non-seismic data */
			if (tr.d1) {
				d1 = tr.d1;
			} else {
d124 3
a126 5
		if (seismic) {
			f1 = (tr.delrt) ? (float) tr.delrt/1000.0 : 0.0;
		} else {
			f1 = (tr.f1) ? tr.f1 : 0.0;
		}
@


1.17
log
@Modified boolean test variables.
@
text
@d1 1
a1 1
/* SUPSIMAGE: $Revision: 1.18 $ ; $Date: 95/01/19 12:09:21 $		*/
d94 1
a94 1
	cwp_Bool know_ntr=false;/* is ntr known from header or user?	*/
d106 1
a106 1
	if (ntr) know_ntr = true; 
d149 1
a149 1
	if (getparint("n2", &ntr) || getparint("ntr", &ntr)) know_ntr = true;
d151 1
a151 1
	if (!know_ntr) { /* count traces */
d192 1
a192 1
	if (!know_ntr) { /* send out stored traces one by one */
d209 1
a209 1
	if (!know_ntr) efclose(datafp);
@


1.16
log
@added verbose
@
text
@d1 1
a1 1
/* SUPSIMAGE: $Revision: 1.15 $ ; $Date: 95/01/19 11:41:40 $		*/
d8 11
a18 12
" 									",
" SUPSIMAGE - PostScript IMAGE plot of a segy data set		",
" 									",
" supsimage <stdin [optional parameters] | ...			",
" 							        	",
" Optional parameters: 							",
" 							        	",
" n2 is the number of traces.  If not getparred then it			",
" is the total number of traces in the data set.  			",
" 							        	",
" d1 is the sampling interval in the fast dimension.  If not getparred	",
" then for seismic time domain data d1=tr.dt/10^6 if set, else 0.004. 	",
d20 2
a21 2
" 							        	",
" d2 is the sampling interval in the slow dimension.  If not getparred	",
d23 1
a23 1
" 							        	",
d25 3
a27 3
" then for seismic time domain data f1=tr.delrt/10^3 if set, else 0.0.	",
" For other types of data f1=tr.d1 if set else 0.0	 		",
" 							        	",
d30 2
a31 2
" else 1.0 for seismic time domain data, else 0.0 			",
" 							        	",
d36 1
a36 1
" the processing time or use d2= f2= to over-ride the header values if	",
d38 7
a44 4
" 							        	",
" See the psimage selfdoc for the remaining parameters.		",
" 							        	",
" On NeXT:     supsimage < infile [optional parameters]  | open      	",
d49 2
a50 3
 *	CWP: Dave Hale and Zhiming Li (psimage)
 *	     Jack K. Cohen  (suxmovie)
 *	     John Stockwell (supsimage)
d53 18
a70 11
 *	When n2 isn't getparred, we need to count the traces
 *	for psimage.  In this case:
 *	we are using tmpfile because on many machines it is
 *	implemented as a memory area instead of a disk file.
 *	However, if your system really makes a disk file you
 *	should consider altering the code to remove the file
 *	on interrupt.  Two possibilities are trapping the
 *	interrupt with "signal" or using "tmpnam" followed
 *	by an immediate "remove" (aka unlink in old unix).
 *	Although we compute ntr, we don't allocate a 2-d array
 *	and content ourselves with copying trace by trace from
d82 3
a84 3
	char plotcmd[BUFSIZ];	/* build psimage command for popen 	*/
	float *trbuf;		/* trace buffer			 	*/
	FILE *datafp;		/* fp for trace data file (if n2 < ntr)	*/
d86 1
a86 2
	int nt;			/* number of samples on trace		*/
	int n2;			/* number of traces			*/
d89 4
a92 4
	float d1;		/* time/depth sample rate 		*/
	float d2;		/* trace/dx sample rate 		*/
	float f1;		/* tmin/zmin				*/
	float f2;		/* tracemin/xmin	 		*/
d94 1
a94 2
	cwp_Bool got_n2 = true;	/* was n2 getparred?			*/
	cwp_Bool got_ntr = true;	/* was ntr set in header?	*/
a103 1
		 
d106 1
a106 1
	if (ntr==0) got_ntr = false; 
d108 1
a108 3
	
	if (!getparint("verbose", &verbose))	verbose=0;

d138 1
a138 1
		if      (tr.f2)     f2 = tr.f2;
d142 1
a142 1
		else 		    f2 = 0.0;
d148 2
a149 2
	/* Get or set n2 and n3 */
	if (!getparint("n2", &n2)) got_n2 = false;
d151 1
a151 1
	if (!got_n2 && !got_ntr) { /* count traces */
d153 2
a154 2
 			warn("n2 not getparred and ntr header field not set");
 			warn("....  counting traces");
a169 2
	if (!got_n2) n2 = ntr;

d173 1
a173 1
			   nt, n2, d1, d2, f1, f2);
d192 1
a192 1
	if (!got_n2 && !got_ntr) { /* send out stored traces one by one */
d209 1
a209 1
	if (!got_n2 && !got_ntr) efclose(datafp);
@


1.15
log
@removed extraneous getpar of f2 parameter
@
text
@d1 1
a1 1
/* SUPSIMAGE: $Revision: 1.14 $ ; $Date: 94/11/28 15:45:16 $		*/
d81 1
d103 3
d149 4
a152 2
 		warn("n2 not getparred and ntr header field not set");
 		warn("....  counting traces");
@


1.14
log
@changed to permit slow dimension to be input via getpar of n2 or via
new locally assigned header field "ntr".
@
text
@d1 1
a1 1
/* SUPSIMAGE: $Revision: 1.2 $ ; $Date: 94/09/16 12:56:19 $		*/
a136 2

	if (!getparfloat("f2", &f2)) f2 = 1.0;
@


1.13
log
@cosmetic changes
@
text
@d1 1
a1 1
/* SUPSIMAGE: $Revision: 1.12 $ ; $Date: 94/03/30 13:58:20 $		*/
d9 1
a9 1
" SUPSIMAGE - PostScript IMAGE plot of a segy data set 			",
d11 1
a11 1
" supsimage <stdin >postscript file [optional parameters]		",
d15 3
d40 1
a40 1
" See the psimage selfdoc for the remaining parameters.			",
d42 1
d47 3
a49 1
 *	CWP: Dave (psimage), Jack & John (su tee shirt)
d51 15
a71 2


d74 1
a74 1
	char plotcmd[BUFSIZ];	/* build command for popen	 	*/
d76 1
a76 1
	FILE *datafp;		/* fp for trace data file		*/
d78 3
d85 3
a87 3
	int nt;			/* number of samples on trace		*/
	int ntr;		/* number of traces			*/
	cwp_Bool seismic;		/* is this seismic data?		*/
a93 1

d99 2
d138 1
d143 2
d146 3
a148 2
	/* Create temporary "file" to hold data */
	datafp = etmpfile();
d150 2
d153 6
a158 6
	/* Loop over input traces & put them into the psdata file */
	ntr = 0;
	do {
		++ntr;
		efwrite(tr.data, FSIZE, nt, datafp);
	} while (gettr(&tr));
d161 1
a161 3
	/* System call to psimage */
	sprintf(plotcmd, "psimage n1=%d n2=%d d1=%f d2=%f f1=%f f2=%f",
			   nt, ntr, d1, d2, f1, f2);
d163 7
d184 1
a184 1
	/* Open pipe; read data to buf; write buf to plot program */
d186 8
a193 5
	rewind(datafp);
	{ register int itr;
		for (itr = 0; itr < ntr; ++itr) {
			efread (trbuf, FSIZE, nt, datafp);
			efwrite(trbuf, FSIZE, nt, plotfp);
d195 4
d204 1
a204 2
	efclose(datafp);

@


1.12
log
@added ISSEISMIC() macro
@
text
@d1 1
a1 1
/* SUPSIMAGE: $Revision: 1.11 $ ; $Date: 93/09/14 13:19:21 $		*/
a2 13
/*----------------------------------------------------------------------
 * Copyright (c) Colorado School of Mines, 1990.
 * All rights reserved.
 *
 * This code is part of SU.  SU stands for Seismic Unix, a processing line
 * developed at the Colorado School of Mines, partially based on Stanford
 * Exploration Project (SEP) software.  Inquiries should be addressed to:
 *
 *  Jack K. Cohen, Center for Wave Phenomena, Colorado School of Mines,
 *  Golden, CO 80401  (jkc@@dix.mines.colorado)
 *----------------------------------------------------------------------
 */

a39 1
/**************** end self doc *******************************************/
d46 1
@


1.11
log
@Allow TDEAD etc. as seismic time traces
@
text
@d1 1
a1 1
/* SUPSIMAGE: $Revision: 1.10 $ ; $Date: 93/09/10 21:28:07 $		*/
d88 2
a89 2
	seismic = (tr.trid == 0 || tr.trid == TREAL ||
		   tr.trid == TDEAD || tr.trid == TDUMMY);
@


1.10
log
@Bool -> cwp_Bool
@
text
@d1 1
a1 1
/* SUPSIMAGE: $Revision: 1.9 $ ; $Date: 92/10/26 15:00:28 $		*/
d88 2
a89 1
	seismic = (tr.trid == 0 || tr.trid == TREAL);
@


1.9
log
@new selfdoc installed
@
text
@d1 1
a1 1
/* SUPSIMAGE: $Revision: 1.8 $ ; $Date: 91/09/06 07:58:39 $		*/
d78 1
a78 1
	Bool seismic;		/* is this seismic data?		*/
@


1.8
log
@string -> String, etc.
@
text
@d1 1
a1 1
/* SUPSIMAGE: $Revision: 1.7 $ ; $Date: 91/03/05 15:17:14 $		*/
d20 33
a52 33
String sdoc =
" 									\n"
" SUPSIMAGE - PostScript IMAGE plot of a segy data set 			\n"
" 									\n"
" supsimage <stdin >postscript file [optional parameters]		\n"
" 							        	\n"
" Optional parameters: 							\n"
" 							        	\n"
" d1 is the sampling interval in the fast dimension.  If not getparred	\n"
" then for seismic time domain data d1=tr.dt/10^6 if set, else 0.004. 	\n"
" For other types of data d1=tr.d1 if set, else 1.0			\n"
" 							        	\n"
" d2 is the sampling interval in the slow dimension.  If not getparred	\n"
" d2=tr.d2 if set, else 1.0						\n"
" 							        	\n"
" f1 is the first sample in the fast dimension.  If not getparred	\n"
" then for seismic time domain data f1=tr.delrt/10^3 if set, else 0.0.	\n"
" For other types of data f1=tr.d1 if set else 0.0	 		\n"
" 							        	\n"
" f2 is the first sample in the slow dimension.  If not getparred	\n"
" f2=tr.f2 if set, else tr.tracr if set, else tr.tracl if set,		\n"
" else 1.0 for seismic time domain data, else 0.0 			\n"
" 							        	\n"
" Note that for seismic time domain data, the \"fast dimension\" is	\n"
" time and the \"slow dimension\" is usually trace number or range.	\n"
" Also note that \"foreign\" data tapes may have something unexpected	\n"
" in the d2,f2 fields, use segyclean to clear these if you can afford	\n"
" the processing time or use d2= f2= to over-ride the header values if	\n"
" not.									\n"
" 							        	\n"
" See the psimage selfdoc for the remaining parameters.			\n"
" 							        	\n"
;
d83 1
a83 1
	askdoc(1);
@


1.7
log
@Another change to d1 etc. defaults to partially guard
against junk from a foreign tape
@
text
@d1 1
a1 1
/* SUPSIMAGE: $Revision: 1.6 $ ; $Date: 91/03/03 13:48:33 $		*/
d20 1
a20 1
string sdoc =
d78 1
a78 1
	bool seismic;		/* is this seismic data?		*/
@


1.6
log
@Tweaked f2 default to look at tr.tracr before tr.tracl
@
text
@d1 1
a1 1
/* SUPSIMAGE: $Revision: 1.5 $ ; $Date: 91/02/22 15:13:39 $		*/
d29 2
a30 2
" d1=tr.d1 if set, else d1=tr.dt/10^6 if set, else 0.004 for seismic	\n"
" time domain data, else 1.0						\n"
d36 2
a37 1
" f1=tr.d1 if set, else f1=tr.delrt/10^3 if set, else 0.0 		\n"
d45 4
d88 1
a88 1
	seismic =  (tr.trid == 0 || tr.trid == TREAL);
d92 14
a105 8
		if      (tr.d1)  d1 = tr.d1;
		else if (tr.dt)  d1 = (float) tr.dt / 1000000.0;
		else if (seismic) {
			d1 = 0.004;
			warn("tr.dt not set, assuming dt=0.004");
		} else { /* not time domain data */
			d1 = 1.0;
			warn("tr.d1 not set, assuming d1=1.0");
d109 1
a109 4
	if (!getparfloat("d2", &d2)) {
		if (tr.d2)  d2 = tr.d2;
		else d2 = 1.0;
	}
d112 5
a116 3
		if      (tr.f1)     f1 = tr.f1;
		else if (tr.delrt)  f1 = (float) tr.delrt/1000.0;
		else                f1 = 0.0;
@


1.5
log
@Make d2, etc. the default if set
@
text
@d1 1
a1 1
/* SUPSIMAGE: $Revision: 1.4 $ ; $Date: 91/02/14 13:22:51 $		*/
d39 2
a40 2
" f2=tr.f2 if set, else f2=tr.tracl if set, else 1.0 for seismic time	\n"
" domain data, else 0.0 						\n"
d111 1
@


1.4
log
@Look for d1,d2,f1,f2 header fields
@
text
@d1 1
a1 1
/* SUPSIMAGE: $Revision: 1.3 $ ; $Date: 90/11/20 12:55:33 $		*/
d29 2
a30 2
" d1=tr.dt/10^6 if set, else 0.004 for seismic time domain data, it is	\n"
"   =tr.d1 if set, else 1.0 for all other types of data			\n"
d33 1
a33 1
" d1=tr.d2 if set, else 1.0						\n"
d36 1
a36 2
" f1=tr.delrt/10^3 if set, else 0.0 for seismic time data, it is	\n"
" f1=tr.d1 if set, else 0.0  for all other types of data.		\n"
d39 2
a40 2
" f2=tr.tracl if set, else 1.0 for seismic time data, it is		\n"
" f2=tr.d2 if set, else 0.0  for all other types of data.		\n"
d85 1
d87 5
a91 7
		if (seismic) { /* seismic time data */
			if (tr.dt) { /* is dt field set? */
				d1 = (float) tr.dt / 1000000.0;
			} else { /* dt not set, assume 4 ms */
				d1 = 0.004;
				warn("tr.dt not set, assuming dt=0.004");
			}
d93 2
a94 6
			if (tr.d1) { /* is d1 field set? */
				d1 = tr.d1;
			} else { /* d1 not set, assume 1.0 */
				d1 = 1.0;
				warn("tr.d1 not set, assuming d1=1.0");
			}
d98 4
a101 2
	if (!getparfloat("f1", &f1))
		f1 = (seismic) ? (float) tr.delrt/1000.0 : tr.f1;
d103 5
a107 2
	if (!getparfloat("d2", &d2))	d2 = tr.d2;
	if (!d2) d2 = 1.0;
d109 6
a114 2
	if (!getparfloat("f2", &f2))
		f2 = (seismic) ? ((tr.tracl) ? (float) tr.tracl : 1.0) : 0.0;
@


1.3
log
@Use tr.delrt
@
text
@d1 1
a1 1
/* SUPSIMAGE: $Revision: 1.2 $ ; $Date: 90/09/13 10:27:48 $		*/
d28 3
a30 4
" d1=tr.dt or 0.004      sampling interval in fast dim, often dt or dz	\n"
" d2=1.0                 ... in slow dim, often unit step in trace or dx\n"
" f1=tr.delrt/1000.0     first sample in fast dim, often tmin or zmin	\n"
" f2=1.0                 ... in slow dim, often first tracl or xmin	\n"
d32 14
d74 1
d84 1
d87 14
a100 5
		if (tr.dt) {  /* is dt field set? */
			d1 = tr.dt / 1000000.0;
		} else {		/* dt not set, assume 4 ms */
			d1 = 0.004;
			warn("tr.dt not set, assuming dt=%g", d1);
a102 3
	if (!getparfloat("d2", &d2)) d2 = 1.0; /* default count by traces */
	if (!getparfloat("f1", &f1)) f1 = tr.delrt/1000.0;
	if (!getparfloat("f2", &f2)) f2 = tr.tracl ? tr.tracl : 1.0;
d104 2
d107 7
a127 1
	erewind(datafp);
d150 1
@


1.2
log
@Fixed quote stripping bug reported by Craig.
@
text
@d1 1
a1 1
/* SUPSIMAGE: $Revision: 1.1 $ ; $Date: 90/06/04 11:44:37 $		*/
d20 16
a35 49
string sdoc = "\
									\n\
SUPSIMAGE - PostScript IMAGE plot of a segy data set 			\n\
									\n\
supsimage <stdin >postscript file [optional parameters]			\n\
							        	\n\
Optional parameters: 							\n\
							        	\n\
d1=tr.dt or 0.004      sampling interval in fast dim, often dt or dz	\n\
d2=1.0                 ... in slow dim, often unit step in trace or dx	\n\
f1=0.0                 first sample in fast dim, often tmin or zmin	\n\
f2=1.0                 ... in slow dim, often first tracl or xmin	\n\
							        	\n\
perc=100.0             percentile used to determine clip		\n\
clip=(perc percentile) clip used to determine bclip and wclip		\n\
bperc=perc             percentile for determining black clip value	\n\
wperc=100.0-perc       percentile for determining white clip value	\n\
bclip=clip             data values outside of [bclip,wclip] are clipped	\n\
wclip=-clip            data values outside of [bclip,wclip] are clipped	\n\
d1s=1.0                factor by which to scale d1 before imaging	\n\
d2s=1.0                factor by which to scale d2 before imaging	\n\
verbose=1              =1 for info printed on stderr (0 for no info)	\n\
xbox=1.5               offset in inches of left side of axes box	\n\
ybox=1.5               offset in inches of bottom side of axes box	\n\
wbox=6.0               width in inches of axes box			\n\
hbox=8.0               height in inches of axes box			\n\
x1beg=x1min            value at which axis 1 begins			\n\
x1end=x1max            value at which axis 1 ends			\n\
d1num=0.0              numbered tic interval on axis 1 (0.0 for automatic)\n\
f1num=x1min            first numbered tic on axis 1 (used if d1num not 0.0)\n\
n1tic=1                number of tics per numbered tic on axis 1	\n\
grid1=none             grid lines on axis 1 - none, dot, dash, or solid	\n\
label1=                label on axis 1					\n\
x2beg=x2min            value at which axis 2 begins			\n\
x2end=x2max            value at which axis 2 ends			\n\
d2num=0.0              numbered tic interval on axis 2 (0.0 for automatic)\n\
f2num=x2min            first numbered tic on axis 2 (used if d2num not 0.0)\n\
n2tic=1                number of tics per numbered tic on axis 2	\n\
grid2=none             grid lines on axis 2 - none, dot, dash, or solid	\n\
label2=                label on axis 2					\n\
labelfont=Helvetica    font name for axes labels			\n\
labelsize=12           font size for axes labels			\n\
title=                 title of plot					\n\
titlefont=Helvetica-Bold font name for title				\n\
titlesize=24           font size for title				\n\
style=seismic          normal (axis 1 horizontal, axis 2 vertical) or	\n\
                       seismic (axis 1 vertical, axis 2 horizontal)	\n\
							        	\n\
";
d51 4
a54 3
	char psdata[L_tmpnam];	/* tmp file for psimage data		*/
	char cmd[BUFSIZ];	/* build psimage command for system call*/
	FILE *psdatafp;		/* fp for psimage input file		*/
d59 1
a59 1
	int ns;			/* number of samples on trace		*/
a60 1
	int itr;		/* counter over traces			*/
d70 2
a71 2
	ns = tr.ns;
	if (!fgetpar("d1", &d1)) {
d79 3
a81 9
	if (!fgetpar("d2", &d2)) d2 = 1.0; /* default count by traces */
	if (!fgetpar("f1", &f1)) f1 = 0.0; /* default tmin */
	if (!fgetpar("f2", &f2)) {
		if (tr.tracl) {
			f2 = tr.tracl;
		} else {
			f2 = 1.0;
		}
	}
a82 3
	/* Prepare temporary file to hold psdata */
	tmpnam(psdata);
	psdatafp = efopen(psdata, "w+");
d84 2
d87 5
d96 1
a96 1
		efwrite(tr.data, FSIZE, ns, psdatafp);
d98 1
a98 1
	erewind(psdatafp);
d102 2
a103 2
	sprintf(cmd, "psimage <%s n1=%d n2=%d d1=%f d2=%f f1=%f f2=%f",
			   psdata, ns, ntr, d1, d2, f1, f2);
d111 4
a114 4
			strcat(cmd, " ");   /* get a space in between args */
			strcat(cmd, "\"");  /* user quotes will be stripped */
			strcat(cmd, *argv); /* add the arg */
			strcat(cmd, "\"");  /* user quotes will be stripped */
a117 1
	system(cmd);
d119 8
d128 1
d130 2
a131 2
	efclose(psdatafp);
	eremove(psdata);
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/* SUPSIMAGE: $Revision: 1.3 $ ; $Date: 90/06/02 07:33:04 $		*/
d141 1
a141 1
		if (strncmp(*argv, "d1=", 3) && /* these already set */
d146 4
a149 2
			/* get a space in between args */
			strcat(cmd, " "); strcat(cmd, *argv);
@
