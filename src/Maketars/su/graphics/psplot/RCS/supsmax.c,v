head	1.16;
access;
symbols;
locks; strict;
comment	@ * @;


1.16
date	2011.11.12.00.46.15;	author john;	state Exp;
branches;
next	1.15;

1.15
date	2003.08.19.16.47.16;	author john;	state Exp;
branches;
next	1.14;

1.14
date	98.08.25.19.54.26;	author john;	state Exp;
branches;
next	1.13;

1.13
date	96.09.17.16.21.11;	author jkc;	state Exp;
branches;
next	1.12;

1.12
date	96.09.10.15.20.43;	author john;	state Exp;
branches;
next	1.11;

1.11
date	95.10.03.19.22.32;	author jkc;	state Exp;
branches;
next	1.10;

1.10
date	95.02.28.13.00.08;	author jkc;	state Exp;
branches;
next	1.9;

1.9
date	95.02.21.14.56.49;	author jkc;	state Exp;
branches;
next	1.8;

1.8
date	95.01.19.12.09.15;	author john;	state Exp;
branches;
next	1.7;

1.7
date	94.11.28.15.45.18;	author john;	state Exp;
branches;
next	1.6;

1.6
date	94.09.16.12.56.26;	author john;	state Exp;
branches;
next	1.5;

1.5
date	94.03.30.13.58.24;	author john;	state Exp;
branches;
next	1.4;

1.4
date	93.09.14.13.19.23;	author jkc;	state Exp;
branches;
next	1.3;

1.3
date	93.09.10.21.28.09;	author john;	state Exp;
branches;
next	1.2;

1.2
date	93.06.07.15.07.17;	author john;	state Exp;
branches;
next	1.1;

1.1
date	93.04.29.14.35.32;	author john;	state Exp;
branches;
next	;


desc
@SUPSMAX -- PostScript Plots of the max,min,abs max
@


1.16
log
@copyright
@
text
@/* Copyright (c) Colorado School of Mines, 2011.*/
/* All rights reserved.                       */

/* SUPSMAX: $Revision: 1.15 $ ; $Date: 2003/08/19 16:47:16 $		*/

#include "su.h"
#include "segy.h"
#include "header.h"
#include <signal.h>

/*********************** self documentation *****************************/
char *sdoc[] = {
" 									",
" SUPSMAX - PostScript of the MAX, min, or absolute max value on each trace",
" 	   of a SEGY (SU) data	set					",
" 									",
"   supsmax <stdin >postscript file [optional parameters]		",
" 									",
" Optional parameters: 							",
" mode=max		max value					",
" 			=min min value					",
" 			=abs absolute max value				",
" 									",
" n2=tr.ntr or number of traces in the data set (ntr is an alias for n2)",
"									",
" d1=tr.d1 or tr.dt/10^6	sampling interval in the fast dimension	",
"   =.004 for seismic 		(if not set)				",
"   =1.0 for nonseismic		(if not set)				",
" 							        	",
" d2=tr.d2			sampling interval in the slow dimension	",
"   =1.0 			(if not set)				",
" 							        	",
" f1=tr.f1 or tr.delrt/10^3 or 0.0  first sample in the fast dimension	",
" 							        	",
" f2=tr.f2 or tr.tracr or tr.tracl  first sample in the slow dimension	",
"   =1.0 for seismic		    (if not set)			",
"   =d2 for nonseismic		    (if not set)			",
" 									",
" verbose=0              =1 to print some useful information		",
"									",
" tmpdir=	 	if non-empty, use the value as a directory path	",
"		 	prefix for storing temporary files; else if the	",
"	         	the CWP_TMPDIR environment variable is set use	",
"	         	its value for the path; else use tmpfile()	",
" 									",
" Note that for seismic time domain data, the \"fast dimension\" is	",
" time and the \"slow dimension\" is usually trace number or range.	",
" Also note that \"foreign\" data tapes may have something unexpected	",
" in the d2,f2 fields, use segyclean to clear these if you can afford	",
" the processing time or use d2= f2= to over-ride the header values if	",
" not.									",
" 									",
" See the sumax selfdoc for additional parameter.			",
" See the psgraph selfdoc for the remaining parameters.			",
" 									",
NULL};

/* Credits:
 *
 *	CWP: John Stockwell, based on Jack Cohen's SU JACKet 
 *
 * Notes:
 *	When the number of traces isn't known, we need to count
 *	the traces for psgraph.  You can make this value "known"
 *	either by getparring n2 or by having the ntr field set
 *	in the trace header.  A getparred value takes precedence
 *	over the value in the trace header.
 *
 *	When we do have to count the traces, we use the "tmpfile"
 *	routine because on many machines it is implemented
 *	as a memory area instead of a disk file.
 */
/**************** end self doc *******************************************/

static void closefiles(void);

/* Globals (so can trap signal) defining temporary disk files	*/
char tracefile[BUFSIZ];	/* filename for trace storage file	*/
char headerfile[BUFSIZ];/* filename for the file of headers	*/
FILE *tracefp;		/* fp for trace storage file		*/
FILE *headerfp;		/* fp for header storage file		*/

segy tr;

int
main(int argc, char **argv)
{
	char plotcmd[BUFSIZ];	/* build command for popen		*/
	FILE *plotfp;		/* fp for plot data			*/
	float d1;		/* time/depth sample rate 		*/
	float d2;		/* trace/dx sample rate 		*/
	float f1;		/* tmin/zmin				*/
	float f2;		/* tracemin/xmin			*/
	int nt;			/* number of samples on trace		*/
	int ntr;		/* number of traces			*/
	int verbose;		/* verbose flag				*/
	cwp_Bool seismic;	/* is this seismic data?		*/
	cwp_Bool have_ntr=cwp_false;/* is ntr known from header or user?	*/
	cwp_String mode;	/* sumax mode parameter			*/
	char *tmpdir;		/* directory path for tmp files		*/
	cwp_Bool istmpdir=cwp_false;/* true for user given path		*/

	char *cwproot;		/* value of CWPROOT environment variable*/
	char *bindir;		/* directory path for tmp files		*/

	/* Initialize */
	initargs(argc, argv);
	requestdoc(1);
	
	/* Get info from first trace */
	if (!gettr(&tr)) err("can't get first trace");
	seismic = ISSEISMIC(tr.trid); 
	nt = tr.ns;
	ntr = tr.ntr;
	if (ntr) have_ntr = cwp_true; 

	if (!getparint("verbose", &verbose))	verbose=0;
	if (!getparfloat("d1", &d1)) {
		if      (tr.d1)  d1 = tr.d1;
		else if (tr.dt)  d1 = ((double) tr.dt)/1000000.0;
		else {
			if (seismic) {
				d1 = 0.004;
				warn("tr.dt not set, assuming dt=0.004");
			} else { /* non-seismic data */
				d1 = 1.0;
				warn("tr.d1 not set, assuming d1=1.0");
			}
		}
	}

	if (!getparfloat("d2", &d2)) d2 = (tr.d2) ? tr.d2 : 1.0;

	if (!getparfloat("f1", &f1)) {
		if      (tr.f1)     f1 = tr.f1;
		else if (tr.delrt)  f1 = (float) tr.delrt/1000.0;
		else                f1 = 0.0;
	}

	if (!getparfloat("f2", &f2)) {
		if      (tr.f2)     f2 = tr.f2;
		else if (tr.tracr)  f2 = (float) tr.tracr;
		else if (tr.tracl)  f2 = (float) tr.tracl;
		else if (seismic)   f2 = 1.0;
		else 		    f2 = 0.0;
	}
	
	if (getparint("n2", &ntr) || getparint("ntr", &ntr)) have_ntr = cwp_true;
	if (!getparstring("mode", &mode)) mode = "max";

	/* Look for user-supplied tmpdir */
	if (!getparstring("tmpdir",&tmpdir) &&
	    !(tmpdir = getenv("CWP_TMPDIR"))) tmpdir="";
	if (!STREQ(tmpdir, "") && access(tmpdir, WRITE_OK))
		err("you can't write in %s (or it doesn't exist)", tmpdir);
	
	/* See if CWPBIN environment variable is not set */
	if (!(bindir = getenv("CWPBIN"))) { /* construct bindir from CWPROOT */

		bindir = (char *) emalloc(BUFSIZ);

		/* Get value of CWPROOT environment variable */
		if (!(cwproot = getenv("CWPROOT"))) cwproot ="" ;
		if (STREQ(cwproot, "")) {
			warn("CWPROOT environment variable is not set! ");
			err("Set CWPROOT in shell environment as per instructions in CWP/SU Installation README files");
		}
		/* then bindir = $CWPROOT/bin */
		sprintf(bindir, "%s/bin", cwproot);
	}
	strcat(bindir,"/");   /* put / at the end of bindir */

	
	/* ntr stuff */
	if (!have_ntr) {
		/* Store traces and headers in tmpfile while getting a count */
		if (verbose) {
			warn(" n2 not getparred or header field ntr not set");
			warn(" ....    counting traces");
		}

		if (STREQ(tmpdir,"")) {
			tracefp = etmpfile();
			headerfp = etmpfile();
			if (verbose) warn("using tmpfile() call");
		} else { /* user-supplied tmpdir */
			char directory[BUFSIZ];
			strcpy(directory, tmpdir);
			strcpy(tracefile, temporary_filename(directory));
			strcpy(headerfile, temporary_filename(directory));
			/* Trap signals so can remove temp files */
			signal(SIGINT,  (void (*) (int)) closefiles);
			signal(SIGQUIT, (void (*) (int)) closefiles);
			signal(SIGHUP,  (void (*) (int)) closefiles);
			signal(SIGTERM, (void (*) (int)) closefiles);
			tracefp = efopen(tracefile, "w+");
			headerfp = efopen(headerfile, "w+");
			istmpdir=cwp_true;		
			if (verbose)
			     warn("putting temporary files in %s", directory);
		}

		/* Loop over input data and read to temporary file */
			ntr = 0;
		do {
			++ntr;
		 	efwrite(&tr, 1, HDRBYTES, headerfp);
		 	efwrite(tr.data, FSIZE, nt, tracefp);
		} while (gettr(&tr));
	}

	/* System call to psgraph */
	sprintf(plotcmd, "%ssumax output=binary mode=%s | %spsgraph n=%d",  
			bindir, mode, bindir, ntr);
	for (--argc, ++argv; argc; --argc, ++argv) {
		if ( 
			strncmp(*argv, "output=", 7)  &&
			strncmp(*argv, "mode=", 5)  &&
			strncmp(*argv, "n=", 2) &&
			strncmp(*argv, "n2=", 3) &&/*psgraph honors n2,nplot*/
			strncmp(*argv, "nplot=", 6) ) { 

			strcat(plotcmd, " ");   /* put a space between args */
			strcat(plotcmd, "\"");  /* user quotes are stripped */
			strcat(plotcmd, *argv); /* add the arg */
			strcat(plotcmd, "\"");  /* user quotes are stripped */
		}
	}



	/* Open pipe; write data to plotcmd */
	plotfp = epopen(plotcmd, "w");
	
	if (!have_ntr) {
		rewind(headerfp);
		rewind(tracefp);
		{ register int itr;
		for (itr = 0; itr < ntr; ++itr) {
			efread(&tr, 1, HDRBYTES, headerfp);
			efread(tr.data, FSIZE, nt, tracefp);
			fputtr(plotfp, &tr);
		}
		}
	} else { /* pump out traces and let sumax and psimage do the work */
                do {
                        fputtr(plotfp,&tr);
                } while (gettr(&tr));
        }


	/* Clean up */
	epclose(plotfp);
	efclose(headerfp);
	if (istmpdir) eremove(headerfile);
	if (!have_ntr) {
		efclose(tracefp);
		if (istmpdir) eremove(tracefile);
	}

	return EXIT_SUCCESS;
}

/* for graceful interrupt termination */
static void closefiles(void)
{
	efclose(headerfp);
	efclose(tracefp);
	eremove(headerfile);
	eremove(tracefile);
	exit(EXIT_FAILURE);
}
@


1.15
log
@fixed to find CWPROOT path to avoid collision with nonCWP code of the same name
@
text
@d1 4
a4 1
/* SUPSMAX: $Revision: 1.14 $ ; $Date: 1998/08/25 19:54:26 $		*/
@


1.14
log
@*** empty log message ***
@
text
@d1 1
a1 1
/* SUPSMAX: $Revision: 1.13 $ ; $Date: 1996/09/17 16:21:11 $		*/
d100 2
d154 16
d171 1
d210 2
a211 2
	sprintf(plotcmd, " sumax output=binary mode=%s | psgraph n=%d", 
			mode, ntr);
@


1.13
log
@Added tmpdir stuff.
@
text
@d1 1
a1 1
/* SUPSMAX: $Revision: 1.12 $ ; $Date: 1996/09/10 15:20:43 $		*/
d95 1
a95 1
	cwp_Bool have_ntr=false;/* is ntr known from header or user?	*/
d98 1
a98 1
	cwp_Bool istmpdir=false;/* true for user given path		*/
d110 1
a110 1
	if (ntr) have_ntr = true; 
d143 1
a143 1
	if (getparint("n2", &ntr) || getparint("ntr", &ntr)) have_ntr = true;
d176 1
a176 1
			istmpdir=true;		
@


1.12
log
@silenced -Wall complaints
@
text
@d1 1
a1 1
/* SUPSMAX: $Revision: 1.11 $ ; $Date: 1995/10/03 19:22:32 $		*/
d6 1
d36 7
d72 8
a86 2
	FILE *headerfp=NULL;	/* fp for header			*/
	FILE *datafp=NULL;	/* fp for data				*/
d97 2
d146 6
a151 1

a154 1

d160 23
a182 3
		headerfp = etmpfile();
		datafp = etmpfile();
		ntr = 0;
d186 1
a186 1
		 	efwrite(tr.data, FSIZE, nt, datafp);
d215 1
a215 1
		rewind(datafp);
d219 1
a219 1
			efread(tr.data, FSIZE, nt, datafp);
d232 6
a237 2
	if (!have_ntr) efclose(headerfp);
	if (!have_ntr) efclose(datafp);
d239 2
d242 8
a249 1
	return EXIT_SUCCESS;
@


1.11
log
@Honor f1 and d1.  Converted to standard style self-doc.
@
text
@d1 1
a1 1
/* SUPSMAX: $Revision: 1.10 $ ; $Date: 1995/02/28 13:00:08 $		*/
d66 1
d71 2
a72 2
	FILE *headerfp;		/* fp for header			*/
	FILE *datafp;		/* fp for data				*/
a82 1
	cwp_String output;	/* sumax output parameter		*/
@


1.10
log
@Modified boolean variables and improved their names.
@
text
@d1 1
a1 1
/* SUPSMAX: $Revision: 1.9 $ ; $Date: 95/02/21 14:56:49 $		*/
d20 1
a20 1
" n2 is the number of traces (ntr is an acceptable alias for n2)	",
d22 12
a33 14
" d1 is the sampling interval in the fast dimension.  If not getparred	",
" then for seismic time domain data d1=tr.dt/10^6 if set, else 0.004. 	",
" For other types of data d1=tr.d1 if set, else 1.0			",
" 									",
" d2 is the sampling interval in the slow dimension.  If not getparred	",
" d2=tr.d2 if set, else 1.0						",
" 									",
" f1 is the first sample in the fast dimension.  If not getparred	",
" then for seismic time domain data f1=tr.delrt/10^3 if set, else 0.0.	",
" For other types of data f1=tr.d1 if set else 0.0			",
" 									",
" f2 is the first sample in the slow dimension.  If not getparred	",
" f2=tr.f2 if set, else tr.tracr if set, else tr.tracl if set,		",
" else 1.0 for seismic time domain data, else 0.0 			",
d98 4
a101 4
		if (seismic) {
			if (tr.dt) {
				d1 = (float) tr.dt / 1000000.0;
			} else {
d104 1
a104 5
			}
		} else { /* non-seismic data */
			if (tr.d1) {
				d1 = tr.d1;
			} else {
d114 3
a116 5
		if (seismic) {
			f1 = (tr.delrt) ? (float) tr.delrt/1000.0 : 0.0;
		} else {
			f1 = (tr.f1) ? tr.f1 : 0.0;
		}
@


1.9
log
@Modified boolean test variables.
@
text
@d1 1
a1 1
/* SUPSMAX: $Revision: 1.8 $ ; $Date: 95/01/19 12:09:15 $		*/
d82 1
a82 1
	cwp_Bool know_ntr=false;/* is ntr known from header or user?	*/
d96 1
a96 1
	if (ntr) know_ntr = true; 
d135 1
a135 1
	if (getparint("n2", &ntr) || getparint("ntr", &ntr)) know_ntr = true;
d140 1
a140 1
	if (!know_ntr) {
d181 1
a181 1
	if (!know_ntr) {
d200 2
a201 2
	if (!know_ntr) efclose(headerfp);
	if (!know_ntr) efclose(datafp);
@


1.8
log
@added verbose
@
text
@d1 1
a1 1
/* SUPSMAX: $Revision: 1.7 $ ; $Date: 94/11/28 15:45:18 $		*/
d20 2
d53 10
a80 1
	int n2;			/* number of traces			*/
d82 1
a82 2
	cwp_Bool got_n2=true;	/* has n2 been getparred?		*/
	cwp_Bool got_ntr=true;	/* has ntr header field been set?	*/
a93 1
		 
d96 1
a96 1
	if (ntr==0) got_ntr = false;
d132 1
a132 1
		else 		   f2 = 0.0;
d135 1
a135 1
	if (!getparint("n2", &n2))	got_n2 = false;
d140 1
a140 1
	if (!got_n2 && !got_ntr) {
d144 1
a144 1
			warn(" n2 not getparred or header filed ntr not set");
d148 1
a148 1
		headerfp  = etmpfile();
d165 3
a167 1
			strncmp(*argv, "n=", 2) ) {
d181 1
a181 1
	if (!got_n2 && !got_ntr) {
d200 2
a201 2
	if (!got_n2 && !got_ntr ) efclose(headerfp);
	if (!got_n2 && !got_ntr ) efclose(datafp);
@


1.7
log
@changed to permit slow dimension to be input via getpar of n2 or via
new locally assigned header field "ntr".
@
text
@d1 1
a1 1
/* SUPSMAX: $Revision: 1.6 $ ; $Date: 94/09/16 12:56:26 $		*/
d68 1
d89 1
d134 5
a138 2
		warn(" n2 not getparred or header filed ntr not set");
		warn(" ....    counting traces");
@


1.6
log
@cosmetic changes
@
text
@d1 1
a1 1
/* supsmax: $Revision: 1.5 $ ; $Date: 94/03/30 13:58:24 $		*/
d13 1
a13 1
" supsmax <stdin >postscript file [optional parameters]		",
d68 6
a73 3
	cwp_Bool seismic;		/* is this seismic data?		*/
	cwp_String mode;		/* sumax mode parameter			*/
	cwp_String output;		/* sumax output parameter		*/
d85 2
d124 1
d129 2
a130 9
	/* Store traces and headers in tmpfile while getting a count */
	headerfp  = etmpfile();
	datafp = etmpfile();
	ntr = 0;
	do {
		++ntr;
		 efwrite(&tr, 1, HDRBYTES, headerfp);
		 efwrite(tr.data, FSIZE, nt, datafp);
	} while (gettr(&tr));
d132 12
d161 1
d165 15
a179 9
	rewind(headerfp);
	rewind(datafp);
	{ register int itr;
	 for (itr = 0; itr < ntr; ++itr) {
		efread(&tr, 1, HDRBYTES, headerfp);
		efread(tr.data, FSIZE, nt, datafp);
		fputtr(plotfp, &tr);
	  }
	}
d184 2
a185 2
	efclose(headerfp);
	efclose(datafp);
@


1.5
log
@added ISSEISMIC() macro
@
text
@d1 1
a1 1
/* supsmax: $Revision: 1.4 $ ; $Date: 93/09/14 13:19:23 $		*/
a2 13
/*----------------------------------------------------------------------
 * Copyright (c) Colorado School of Mines, 1990.
 * All rights reserved.
 *
 * This code is part of SU.  SU stands for Seismic Unix, a processing line
 * developed at the Colorado School of Mines, partially based on Stanford
 * Exploration Project (SEP) software.  Inquiries should be addressed to:
 *
 *  Jack K. Cohen, Center for Wave Phenomena, Colorado School of Mines,
 *  Golden, CO 80401  (jkc@@dix.mines.colorado)
 *----------------------------------------------------------------------
 */

a45 1
/**************** end self doc *******************************************/
d52 1
@


1.4
log
@Allow TDEAD etc. as seismic time traces
@
text
@d1 1
a1 1
/* supsmax: $Revision: 1.3 $ ; $Date: 93/09/10 21:28:09 $		*/
d92 2
a93 2
	seismic = (tr.trid == 0 || tr.trid == TREAL ||
		   tr.trid == TDEAD || tr.trid == TDUMMY);
@


1.3
log
@Bool -> cwp_Bool
@
text
@d1 1
a1 1
/* supsmax: $Revision: 1.2 $ ; $Date: 93/06/07 15:07:17 $		*/
d92 2
a93 1
	seismic = (tr.trid == 0 || tr.trid == TREAL);
@


1.2
log
@cosmetic change
@
text
@d1 1
a1 1
/* supsmax: $Revision: 1.1 $ ; $Date: 93/04/29 14:35:32 $		*/
d81 3
a83 3
	Bool seismic;		/* is this seismic data?		*/
	String mode;		/* sumax mode parameter			*/
	String output;		/* sumax output parameter		*/
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/* supsmax: $Revision: 1.7 $ ; $Date: 92/10/26 14:58:27 $		*/
d23 1
a23 1
" supsmax - PostScript of the MAX, min, or absolute max value on each trace",
@
