head	1.24;
access;
symbols;
locks; strict;
comment	@ * @;


1.24
date	2011.11.12.00.45.18;	author john;	state Exp;
branches;
next	1.23;

1.23
date	2011.09.09.22.35.53;	author john;	state Exp;
branches;
next	1.22;

1.22
date	2006.03.06.16.46.17;	author john;	state Exp;
branches;
next	1.21;

1.21
date	97.10.23.21.43.45;	author john;	state Exp;
branches;
next	1.20;

1.20
date	96.09.17.16.27.27;	author jkc;	state Exp;
branches;
next	1.19;

1.19
date	96.09.17.16.22.48;	author jkc;	state Exp;
branches;
next	1.18;

1.18
date	96.09.16.20.11.45;	author jkc;	state Exp;
branches;
next	1.17;

1.17
date	96.08.11.21.04.58;	author jkc;	state Exp;
branches;
next	1.16;

1.16
date	96.08.11.20.07.09;	author jkc;	state Exp;
branches;
next	1.15;

1.15
date	96.08.02.22.58.24;	author jkc;	state Exp;
branches;
next	1.14;

1.14
date	95.10.02.15.15.27;	author jkc;	state Exp;
branches;
next	1.13;

1.13
date	95.02.28.13.10.55;	author jkc;	state Exp;
branches;
next	1.12;

1.12
date	95.01.19.12.14.33;	author john;	state Exp;
branches;
next	1.11;

1.11
date	94.12.05.09.54.58;	author john;	state Exp;
branches;
next	1.10;

1.10
date	94.11.28.15.46.19;	author john;	state Exp;
branches;
next	1.9;

1.9
date	94.03.30.14.01.40;	author john;	state Exp;
branches;
next	1.8;

1.8
date	93.09.14.13.23.56;	author jkc;	state Exp;
branches;
next	1.7;

1.7
date	93.09.11.08.06.10;	author john;	state Exp;
branches;
next	1.6;

1.6
date	92.10.26.15.17.35;	author john;	state Exp;
branches;
next	1.5;

1.5
date	91.09.19.16.52.35;	author jkcohen;	state Exp;
branches;
next	1.4;

1.4
date	91.09.19.12.01.02;	author jkcohen;	state Exp;
branches;
next	1.3;

1.3
date	91.09.06.08.30.37;	author jkcohen;	state Exp;
branches;
next	1.2;

1.2
date	91.06.16.10.28.41;	author jkcohen;	state Exp;
branches;
next	1.1;

1.1
date	91.06.16.10.24.27;	author jkcohen;	state Exp;
branches;
next	;


desc
@SU driver for xmovie
@


1.24
log
@copyright
@
text
@/* Copyright (c) Colorado School of Mines, 2011.*/
/* All rights reserved.                       */

/* SUXMOVIE:  Revision: 1.22 ; Date: 2003/08/20 18:26:36  */

#include "su.h"
#include "segy.h"
#include <signal.h>

/*********************** self documentation *****************************/
char *sdoc[] = {
" 									",
" SUXMOVIE - X MOVIE plot of a 2D or 3D segy data set 			",
" 									",
" suxmovie <stdin [optional parameters]		 			",
" 						 	        	",
" Optional parameters: 							",
" 							        	",
" n1=tr.ns         	    	number of samples per trace  		",
" ntr=tr.ntr     	    	number of traces in the data set	",
" n2=tr.shortpad or tr.ntr	number of traces in inline direction 	",
" n3=ntr/n2     	    	number of traces in crossline direction	",
" 							        	",
" d1=tr.d1 or tr.dt/10^6    sampling interval in the fast dimension	",
"   =.004 for seismic 		(if not set)				",
"   =1.0 for nonseismic		(if not set)				",
" 							        	",
" d2=tr.d2		    sampling interval in the slow dimension	",
"   =1.0 			(if not set)				",
" 							        	",
" d3=1.0		    sampling interval in the slowest dimension	",
" 							        	",
" f1=tr.f1 or 0.0  	    first sample in the z dimension		",
" f2=tr.f2 or 1.0           first sample in the x dimension		",
" f3=1.0 		    						",
" 							        	",
" mode=0          0= x,z slice movie through y dimension (in line)      ",
"                 1= y,z slice movie through x dimension (cross line)   ",
"                 2= x,y slice movie through z dimension (time slice)   ",
" 							        	",
" verbose=0              =1 to print some useful information		",
"									",
" tmpdir=	 	if non-empty, use the value as a directory path	",
"		 	prefix for storing temporary files; else if the	",
"	         	the CWP_TMPDIR environment variable is set use	",
"	         	its value for the path; else use tmpfile()	",
" 									",
" Notes:",
" For seismic data, the \"fast dimension\" is either time or		",
" depth and the \"slow dimension\" is usually trace number.	        ",
" The 3D data set is expected to have n3 sets of n2 traces representing ",
" the horizontal coverage of n2*d2 in x  and n3*d3 in y direction.      ",
" 							        	",
" The data is read to memory with and piped to xmovie with the         	",
" respective sampling parameters.			        	",
" See the xmovie selfdoc for the remaining parameters and X functions.	",
" 							        	",
NULL};
/**************** end self doc *******************************************/

/* Credits:
 *
 *	CWP: Dave (xmovie), Jack (su tee shirt)
 *      IFM-GEOMAR: Gerald, rewrite for time slices (mode=2)
 *                    crosslines (mode=1) and inlines (mode=0)
 *
 * Notes:
 *	When n2,n3 isn't getparred, we need to count the traces
 *	for xmovie.  In this case:
 *	we are using tmpfile because on many machines it is
 *	implemented as a memory area instead of a disk file.
 *	Although we compute ntr, we don't allocate a 2-d array
 *	and content ourselves with copying trace by trace from
 *	the data "file" to the pipe into the plotting program.
 *	Although we could use tr.data, we allocate a trace buffer
 *	for code clarity.
 */
static void closefiles(void);

/* Globals (so can trap signal) defining temporary disk files	*/
char tracefile[BUFSIZ];	/* filename for trace storage file	*/
FILE *tracefp;		/* fp for trace storage file		*/

segy tr;

int
main(int argc, char **argv)
{
  char plotcmd[BUFSIZ];	/* build xmovie command for popen 	*/

  float ***trbuf=0;	/* read trace buffer			*/

  FILE *plotfp;		/* fp for plot data			*/
 
  int ix,iy;
  int itr;		/* trace counter */
  int n1;		/* number of samples on trace		*/
  int n2;		/* number of traces per inline (x)	*/
  int n3;		/* number of traces per crossline (y)	*/
  int ntr;		/* number of traces			*/

  int verbose;		/* verbose flag				*/
  short mode;           /* movie mode                           */

  float d1;		/* time/depth sample rate 		*/
  float d2;		/* trace/dx sample rate (inline)	*/
  float d3;		/* trace/dy sample rate (crossline)	*/
  float f1;		/* tmin/zmin				*/
  float f2;		/* tracemin/xmin			*/
  float f3;		/* tracemin/ymin	 		*/
  cwp_Bool seismic;	/* is this seismic data?		*/
  cwp_Bool got_n2 = cwp_false;/* was n2 getparred?		*/
  cwp_Bool got_n3 = cwp_false;/* was n3 getparred?		*/
  
  char *cwproot;	/* value of CWPROOT environment variable*/
  char *bindir;		/* directory path for tmp files		*/
  
  char *tmpdir;		/* directory path for tmp files		*/
  cwp_Bool istmpdir=cwp_false;/* true for user given path	*/
  
  /* Initialize */
  initargs(argc, argv);
  requestdoc(1);
  
  /* Get info from first trace */
  if (!gettr(&tr)) err("can't get first trace");
  seismic = ISSEISMIC(tr.trid);

  if (!getparint("verbose", &verbose))	verbose=0;
  if (!getparshort("mode",&mode))          mode=0;

  if (!getparfloat("d1", &d1)) {
    if       (tr.dt)  d1 = ((double) tr.dt)/1000.0;
    else if  (tr.d1)  d1 = tr.d1;
    else {
      if (seismic) {
	d1 = 0.004;
	warn("tr.dt not set, assuming dt=0.004");
      } else { /* non-seismic data */
	d1 = 1.0;
	warn("tr.dt not set, assuming d1=1.0");
      }
    }
  }
  

  /* get number of traces in file */
  if (!getparint("ntr", &ntr)) ntr = tr.ntr;
  
  /* Get n1 */
  if (!getparint("n1", &n1)) n1 = tr.ns;
  /* Get n2 */
  if (getparint("n2", &n2)) got_n2 = cwp_true;  
  /* Get n3 */
  if (getparint("n3", &n3)) got_n3 = cwp_true;

  if (!got_n2) { /* is ntr and n2 set ? */
   if ( tr.shortpad ) { 
     n2 = tr.shortpad; 
     got_n2 = cwp_true;
     warn("n2 unset, used tr.shortpad : n2=%i ",n2);
   } else 
     if ( tr.ntr ) {
     n2 = tr.ntr; 
     got_n2 = cwp_true;
     warn("n2 unset, used tr.ntr : n2=%i ",n2);     
   }
  }
  if (!got_n3) { /* is ntr and n2 set ? */
   if ( ntr != n2 && ntr > 0 ) {/* ntr multiple of n2 ?*/
    if ( ntr%n2 == 0 ) {
     n3 = ntr / n2 ;
     got_n3 = cwp_true;
     warn("n3 unset, but deduced from ntr=%i and n2=%i : n3=%i ",
    	ntr,n2,n3);
    }
   } else { /* n2 = ntr */
     n3 = 1.0 ;
   }
  }
  
  if ( ntr != (n2*n3) ) { 
    warn("ntr=%i inconsistent ! set ntr=(n2=%i)*(n3=%i), trace count required.",
    	ntr,n2,n3);
    ntr= n2*n3; got_n3= cwp_false ;
  }

  if (!getparfloat("d1", &d1)) d1 = (tr.d1) ? tr.d1 : 1.0;
  if (!getparfloat("d2", &d2)) d2 = (tr.d2) ? tr.d2 : 1.0;
  if (!getparfloat("d3", &d3)) d3 = 1.0;
  
  if (!getparfloat("f1", &f1)) f1 = (tr.f1) ? tr.f1 : 0.0;
  if (!getparfloat("f2", &f2)) f2 = (tr.f2) ? tr.f2 : 1.0;
  if (!getparfloat("f3", &f3)) f3 = 1.0;  

  /* Look for user-supplied tmpdir */
  if (!getparstring("tmpdir",&tmpdir) &&
      !(tmpdir = getenv("CWP_TMPDIR"))) tmpdir="";
  if (!STREQ(tmpdir, "") && access(tmpdir, WRITE_OK))
    err("you can't write in %s (or it doesn't exist)", tmpdir);
  
  /* See if CWPBIN environment variable is not set */
  if (!(bindir = getenv("CWPBIN"))) { /* construct bindir from CWPROOT */
    
    bindir = (char *) emalloc(BUFSIZ);

    /* Get value of CWPROOT environment variable */
    if (!(cwproot = getenv("CWPROOT"))) cwproot ="" ;
    if (STREQ(cwproot, "")) {
      warn("CWPROOT environment variable is not set! ");
      err("Set CWPROOT in shell environment as per instructions in CWP/SU Installation README files");
    }
    /* then bindir = $CWPROOT/bin */
    sprintf(bindir, "%s/bin", cwproot);
  }
  strcat(bindir,"/");   /* put / at the end of bindir */

  /* Allocate trace buffer */
  if (got_n3)   trbuf = ealloc3float(n1,n2,n3);
	
  /* count and store traces  */
	
  if (!got_n3) { /* count traces and store in tmpfile */
    warn("must have n3, counting traces ... "); 

    /* Create temporary "file" to hold data */
    if (STREQ(tmpdir,"")) {
      if (verbose) warn("using tmpfile() call");
      tracefp = etmpfile();
    } else { /* user-supplied tmpdir */
      char directory[BUFSIZ];
      strcpy(directory, tmpdir);
      strcpy(tracefile, temporary_filename(directory));
      if (verbose)
	warn("putting temporary files in %s", directory);
      /* Handle user interrupts */
      signal(SIGINT, (void (*) (int)) closefiles);
      signal(SIGTERM, (void (*) (int)) closefiles);
      tracefp = efopen(tracefile, "w+");
      istmpdir=cwp_true;		
    }
  }

  /* Loop over input traces & put them into the data file */
  itr = 0;
  iy  = 0;
  ix  = -1;
  do {
    ++itr;		
    if (++ix>=n2) {		
      ix=0;iy++; 
      if (verbose>1) 
	fprintf(stderr,"trace %i,ix=%i,iy=%i\n",itr,ix,iy);
    } ;


    if (got_n3) /* write to memory */
      memcpy((void *) trbuf[iy][ix],(const void *)tr.data,n1*FSIZE);
    else      /* write to tempfile */
      efwrite(tr.data, FSIZE, n1, tracefp);
    
  } while (gettr(&tr));

  if (itr != ntr) { 
   warn("ntr=%i and trace count inconsistent! resetting ntr=%i",
    	ntr,itr);
	ntr=itr;
  }
  
  if (verbose) 
    fprintf(stderr,"End at trace %i,ix=%i,iy=%i\n",ntr,ix+1,iy+1);
  
  /* set n3 if not getparred */
  if (!got_n3) { 
    register int ix,iy;
    float *rbuf;

    if (!got_n2) {
       n2 = ntr;
    }
    n3 = ntr / n2 ; 
    if (verbose) warn("counted %i traces, set n3=%i",ntr,n3);

    if (verbose)
      fprintf(stderr,"allocating memory and reading tempfile to memory ... ");

    rewind(tracefp);
    trbuf = ealloc3float(n1,n2,n3); 
    rbuf  = ealloc1float(n1);

    for (iy=0;iy<n3;++iy)
      for (ix=0;ix<n2;++ix) {
	efread (rbuf, FSIZE, n1, tracefp);
	memcpy((void *) trbuf[iy][ix],(const void *)rbuf,n1*FSIZE);
      }
    free(rbuf);
    if (verbose)
      fprintf(stderr,"\t done !\n");
  }
	
  /* use transposed data array for output to create time/depth slices */
  if (verbose) {
    float range,max;
    warn("Cube dimensions:");
    range=(n2-1)*d2;    max=f2+range;
    fprintf(stderr," x range: %g + (%i * %g) = %g\n",f2,n2,d2,max);
    range=(n3-1)*d3;    max=f3+range;
    fprintf(stderr," y range: %g + (%i * %g) = %g\n",f3,n3,d3,max);
    range=(n1-1)*d1;    max=f1+range;
    fprintf(stderr," z range: %g + (%i * %g) = %g\n",f1,n1,d1,max);
  }
		

  /* Set up xmovie command line */
  switch ( mode ) {
  case 0 :
    sprintf(plotcmd, "%sxmovie n1=%d n2=%d d1=%f d2=%f f1=%f f2=%f", bindir,
	    n1, n2, d1, d2, f1, f2);
    break;
  case 1 :
    sprintf(plotcmd, "%sxmovie n1=%d n2=%d d1=%f d2=%f f1=%f f2=%f", bindir,
	    n1, n3, d1, d3, f1, f3);
    break;
  case 2 :
    sprintf(plotcmd, "%sxmovie n1=%d n2=%d d1=%f d2=%f f1=%f f2=%f", bindir,
	    n2, n3, d2, d3, f2, f3);
    break;
  default :
    err("Mode %i unkown",mode); 
  }
	
  for (--argc, ++argv; argc; --argc, ++argv) {
    
    /* skip those already set */
    if (strncmp(*argv, "d1=", 3) &&
	strncmp(*argv, "d2=", 3) &&
	strncmp(*argv, "d3=", 3) &&
	strncmp(*argv, "n1=", 3) &&
	strncmp(*argv, "n2=", 3) &&
	strncmp(*argv, "n3=", 3) &&
	strncmp(*argv, "ntr=", 3) &&
	strncmp(*argv, "f1=", 3) &&
	strncmp(*argv, "f3=", 3) &&
	strncmp(*argv, "f2=", 3)) {
      
      /* put a space between args */
      strcat(plotcmd, " ");
      
      /* user quotes are stripped */
      strcat(plotcmd, "\"");
      strcat(plotcmd, *argv); /* add the arg */
      
      /* user quotes are stripped */
      strcat(plotcmd, "\"");
    }
  }

  /* Open pipe to xmovie and send the traces */
  if (verbose) {
    warn("open pipe for plot command ... ");
    fprintf(stderr,"call %s \n",plotcmd);
  }
  plotfp = epopen(plotcmd, "w");
	
  /* send out stored traces one by one */
  
  { /*register int itr;*/
    register int ix,iy,iz;
    float *wrbuf;

    switch ( mode ) {    
    case 0 :   /*  vertical (x) slices   */
      for   (iy  = 0; iy  < n3;  ++iy ) 
	for   (ix  = 0; ix  < n2;  ++ix ) 
	  efwrite(trbuf[iy][ix], FSIZE, n1, plotfp);
      break;
    case 1 :   /*  vertical (y) slices   */
      for   (ix  = 0; ix  < n2;  ++ix ) 
	for   (iy  = 0; iy  < n3;  ++iy ) 
	  efwrite(trbuf[iy][ix], FSIZE, n1, plotfp);
      break;
    case 2 :   /*  horizontal slices */
      wrbuf=ealloc1float(n2);
      for   (iz = 0; iz < n1; ++iz) {	
	for   (iy  = 0; iy  < n3;  ++iy ) {
	  memset((void *)wrbuf,(int)'\0',n1*FSIZE);
	  for   (ix  = 0; ix  < n2;  ++ix ) 
	    wrbuf[ix]= trbuf[iy][ix][iz] ;
	  efwrite(wrbuf, FSIZE, n2, plotfp);
	}
	
	/* efwrite(trbuf[iy][ix], FSIZE, ntr, plotfp);
	 *
	 * efwrite(wrbuf, FSIZE, n1, plotfp); */
      }
      free(wrbuf);    	
      break;
    default :
      err("Mode %i unkown",mode);
      break;
    }
  }
  free(trbuf);
  /* Clean up */
  epclose(plotfp);
  
  if (!got_n3) {
    efclose(tracefp);
    if (istmpdir) eremove(tracefile);
  }
  
  return EXIT_SUCCESS;
}

static void closefiles(void)
{
  efclose(tracefp);
  eremove(tracefile);
  exit(EXIT_FAILURE);
}
@


1.23
log
@*** empty log message ***
@
text
@d1 3
@


1.22
log
@cosmetic
@
text
@d275 3
@


1.21
log
@cwp_true and other Stew Levin fixes
@
text
@d1 1
a1 1
/* SUXMOVIE: $Revision: 1.20 $ ; $Date: 1996/09/17 16:27:27 $		*/
d10 1
a10 1
" SUXMOVIE - X MOVIE plot of a segy data set 				",
d12 2
a13 2
" suxmovie <stdin [optional parameters]					",
" 							        	",
d16 4
a19 1
" n2=tr.ntr or number of traces in the data set				",
d21 1
a21 1
" d1=tr.d1 or tr.dt/10^6	sampling interval in the fast dimension	",
d25 1
a25 1
" d2=tr.d2			sampling interval in the slow dimension	",
d28 5
a32 1
" f1=tr.f1 or tr.delrt/10^3 or 0.0  first sample in the fast dimension	",
d34 3
a36 3
" f2=tr.f2 or tr.tracr or tr.tracl  first sample in the slow dimension	",
"   =1.0 for seismic		    (if not set)			",
"   =d2 for nonseismic		    (if not set)			",
d45 5
a49 6
" Note that for seismic time domain data, the \"fast dimension\" is	",
" time and the \"slow dimension\" is usually trace number or range.	",
" Also note that \"foreign\" data tapes may have something unexpected	",
" in the d2,f2 fields, use segyclean to clear these if you can afford	",
" the processing time or use d2= f2= to over-ride the header values if	",
" not.									",
d51 2
d61 2
d65 1
a65 1
 *	When n2 isn't getparred, we need to count the traces
d69 1
a69 1
*	Although we compute ntr, we don't allocate a 2-d array
a74 1

d86 1
a86 42
	char plotcmd[BUFSIZ];	/* build xmovie command for popen 	*/
	float *trbuf;		/* trace buffer			 	*/
	FILE *plotfp;		/* fp for plot data			*/
	int nt;			/* number of samples on trace		*/
	int n2;			/* number of traces per frame		*/
	int ntr;		/* number of traces			*/
	int verbose;		/* verbose flag				*/
	float d1;		/* time/depth sample rate 		*/
	float d2;		/* trace/dx sample rate 		*/
	float f1;		/* tmin/zmin				*/
	float f2;		/* tracemin/xmin	 		*/
	cwp_Bool seismic;	/* is this seismic data?		*/
	cwp_Bool got_n2 = cwp_false;/* was n2 getparred?			*/
	cwp_Bool have_ntr = cwp_false;/* was ntr header field set?		*/
	char *tmpdir;		/* directory path for tmp files		*/
	cwp_Bool istmpdir=cwp_false;/* true for user given path		*/

	/* Initialize */
	initargs(argc, argv);
	requestdoc(1);
	
	/* Get info from first trace */
	if (!gettr(&tr)) err("can't get first trace");
	seismic = ISSEISMIC(tr.trid);
	nt = tr.ns;
	ntr = tr.ntr;
	if (ntr) have_ntr = cwp_true; 

	if (!getparint("verbose", &verbose))	verbose=0;
	if (!getparfloat("d1", &d1)) {
		if      (tr.d1)  d1 = tr.d1;
		else if (tr.dt)  d1 = ((double) tr.dt)/1000000.0;
		else {
			if (seismic) {
				d1 = 0.004;
				warn("tr.dt not set, assuming dt=0.004");
			} else { /* non-seismic data */
				d1 = 1.0;
				warn("tr.d1 not set, assuming d1=1.0");
			}
		}
	}
d88 1
a88 1
	if (!getparfloat("d2", &d2)) d2 = (tr.d2) ? tr.d2 : 1.0;
d90 124
a213 5
	if (!getparfloat("f1", &f1)) {
		if      (tr.f1)     f1 = tr.f1;
		else if (tr.delrt)  f1 = (float) tr.delrt/1000.0;
		else                f1 = 0.0;
	}
d215 7
a221 7
	if (!getparfloat("f2", &f2)) {
		if      (tr.f2)     f2 = tr.f2;
		else if (tr.tracr)  f2 = (float) tr.tracr;
		else if (tr.tracl)  f2 = (float) tr.tracl;
		else if (seismic)   f2 = 1.0;
		else 		    f2 = 0.0;
	}
d223 135
a357 54

	/* Look for user-supplied tmpdir */
	if (!getparstring("tmpdir",&tmpdir) &&
	    !(tmpdir = getenv("CWP_TMPDIR"))) tmpdir="";
	if (!STREQ(tmpdir, "") && access(tmpdir, WRITE_OK))
		err("you can't write in %s (or it doesn't exist)", tmpdir);

	/* Allocate trace buffer */
	trbuf = ealloc1float(nt);

	/* Get n2 */
	if (getparint("n2", &n2)) got_n2 = cwp_true;
	if (got_n2) have_ntr = cwp_true;

	if (!have_ntr) { /* count and store traces to set n2 */

		if (verbose) {
			warn("n2 not getparred or ntr header field not set");
			warn(" .... counting traces ");
		}

		/* Create temporary "file" to hold data */
		if (STREQ(tmpdir,"")) {
			tracefp = etmpfile();
			if (verbose) warn("using tmpfile() call");
		} else { /* user-supplied tmpdir */
			char directory[BUFSIZ];
			strcpy(directory, tmpdir);
			strcpy(tracefile, temporary_filename(directory));
			/* Handle user interrupts */
			signal(SIGINT, (void (*) (int)) closefiles);
			signal(SIGTERM, (void (*) (int)) closefiles);
			tracefp = efopen(tracefile, "w+");
			istmpdir=cwp_true;		
			if (verbose)
			      warn("putting temporary files in %s", directory);
		}

		/* Loop over input traces & put them into the data file */
		ntr = 0;
		do {
			++ntr;
			efwrite(tr.data, FSIZE, nt, tracefp);
		} while (gettr(&tr));

	}

	/* Let getparred value take precedence */
	if (!got_n2) n2 = ntr;


	/* Set up xmovie command line */
	sprintf(plotcmd, "xmovie n1=%d n2=%d d1=%f d2=%f f1=%f f2=%f",
		   nt, n2, d1, d2, f1, f2);
d359 25
a383 18
	for (--argc, ++argv; argc; --argc, ++argv) {

		/* skip those already set */
		if (strncmp(*argv, "d1=", 3) &&
		    strncmp(*argv, "d2=", 3) &&
		    strncmp(*argv, "f1=", 3) &&
		    strncmp(*argv, "f2=", 3)) {

			/* put a space between args */
			strcat(plotcmd, " ");

			/* user quotes are stripped */
			strcat(plotcmd, "\"");
			strcat(plotcmd, *argv); /* add the arg */

			/* user quotes are stripped */
			strcat(plotcmd, "\"");
		}
a384 4


	/* Open pipe to xmovie and send the traces */
	plotfp = epopen(plotcmd, "w");
d386 21
a406 24
	if (!have_ntr) { /* send out stored traces one by one */
		rewind(tracefp);
		{ register int itr;
			for (itr = 0; itr < ntr; ++itr) {
				efread (trbuf, FSIZE, nt, tracefp);
				efwrite(trbuf, FSIZE, nt, plotfp);
			}
		}
	} else { /* just pump out traces and let xmovie do the work */
		do {
			efwrite(tr.data, FSIZE, nt, plotfp);
		} while (gettr(&tr));
	}


	/* Clean up */
	epclose(plotfp);
	if (!have_ntr) {
		efclose(tracefp);
		if (istmpdir) eremove(tracefile);
	} 


	return EXIT_SUCCESS;
d411 3
a413 3
	efclose(tracefp);
	eremove(tracefile);
	exit(EXIT_FAILURE);
a414 1

@


1.20
log
@Changed set_ntr to have_ntr.
@
text
@d1 1
a1 1
/* SUXMOVIE: $Revision: 1.19 $ ; $Date: 1996/09/17 16:22:48 $		*/
d89 2
a90 2
	cwp_Bool got_n2 = false;/* was n2 getparred?			*/
	cwp_Bool have_ntr = false;/* was ntr header field set?		*/
d92 1
a92 1
	cwp_Bool istmpdir=false;/* true for user given path		*/
d103 1
a103 1
	if (ntr) have_ntr = true; 
d147 2
a148 2
	if (getparint("n2", &n2)) got_n2 = true;
	if (got_n2) have_ntr = true;
d169 1
a169 1
			istmpdir=true;		
@


1.19
log
@Removed superfluous comments on tmpfile().
@
text
@d1 1
a1 1
/* SUXMOVIE: $Revision: 1.18 $ ; $Date: 1996/09/16 20:11:45 $		*/
d90 1
a90 1
	cwp_Bool set_ntr = false;/* was ntr header field set?		*/
d103 1
a103 1
	if (ntr) set_ntr = true; 
d148 1
a148 1
	if (got_n2) set_ntr = true;
d150 1
a150 1
	if (!set_ntr) { /* count and store traces to set n2 */
d215 1
a215 1
	if (!set_ntr) { /* send out stored traces one by one */
d232 1
a232 1
	if (!set_ntr) {
@


1.18
log
@Updated tmpfile handling.
@
text
@d1 1
a1 1
/* SUXMOVIE: $Revision: 1.17 $ ; $Date: 1996/08/11 21:04:58 $		*/
d59 1
a59 6
 *	However, if your system really makes a disk file you
 *	should consider altering the code to remove the file
 *	on interrupt.  Two possibilities are trapping the
 *	interrupt with "signal" or using "tmpnam" followed
 *	by an immediate "remove" (aka unlink in old unix).
 *	Although we compute ntr, we don't allocate a 2-d array
@


1.17
log
@*** empty log message ***
@
text
@d1 1
a1 1
/* SUXMOVIE: $Revision: 1.16 $ ; $Date: 1996/08/11 20:07:09 $		*/
d74 2
a75 2
char datafile[BUFSIZ];	/* filename for trace storage file	*/
FILE *datafp;		/* fp for trace storage file		*/
d164 1
a164 1
			datafp = etmpfile();
d169 1
a169 1
			strcpy(datafile, temporary_filename(directory));
d173 1
a173 1
			datafp = efopen(datafile, "w+");
d183 1
a183 1
			efwrite(tr.data, FSIZE, nt, datafp);
d221 1
a221 1
		rewind(datafp);
d224 1
a224 1
				efread (trbuf, FSIZE, nt, datafp);
d238 2
a239 2
		efclose(datafp);
		if (istmpdir) eremove(datafile);
d248 3
a250 3
	efclose(datafp);
	eremove(datafile);

@


1.16
log
@Removed unistd.h to par.h.
@
text
@d1 1
a1 1
/* SUXMOVIE: $Revision: 1.15 $ ; $Date: 1996/08/02 22:58:24 $		*/
d31 2
@


1.15
log
@Inserted user-supplied tmpdir stuff.
@
text
@d1 1
a1 1
/* SUXMOVIE: $Revision: 1.14 $ ; $Date: 1995/10/02 15:15:27 $		*/
a5 1
#include <unistd.h>
@


1.14
log
@Honor f1 and d1.
Made self-doc look like other self-docs.
@
text
@d1 1
a1 1
/* SUXMOVIE: $Revision: 1.13 $ ; $Date: 1995/02/28 13:10:55 $		*/
d5 2
d32 5
d70 5
d78 1
a82 1
	FILE *datafp;		/* fp for trace data file (if n2 < ntr)	*/
d95 2
d141 6
d162 15
a176 1
		datafp = etmpfile();
d236 4
a239 1
	if (!set_ntr) efclose(datafp);
d244 8
@


1.13
log
@Modified boolean variables.
@
text
@d1 1
a1 1
/* SUXMOVIE: $Revision: 1.12 $ ; $Date: 95/01/19 12:14:33 $		*/
d15 1
a15 2
" n2 is the number of traces per frame.  If not getparred then it	",
" is the total number of traces in the data set.  			",
d17 12
a28 14
" d1 is the sampling interval in the fast dimension.  If not getparred	",
" then for seismic time domain data d1=tr.dt/10^6 if set, else 0.004. 	",
" For other types of data d1=tr.d1 if set, else 1.0			",
" 							        	",
" d2 is the sampling interval in the slow dimension.  If not getparred	",
" d2=tr.d2 if set, else 1.0						",
" 							        	",
" f1 is the first sample in the fast dimension.  If not getparred	",
" then for seismic time domain data f1=tr.delrt/10^3 if set, else 0.0.	",
" For other types of data f1=tr.d1 if set else 0.0	 		",
" 							        	",
" f2 is the first sample in the slow dimension.  If not getparred	",
" f2=tr.f2 if set, else tr.tracr if set, else tr.tracl if set,		",
" else 1.0 for seismic time domain data, else 0.0 			",
d97 4
a100 4
		if (seismic) {
			if (tr.dt) {
				d1 = (float) tr.dt / 1000000.0;
			} else {
d103 1
a103 5
			}
		} else { /* non-seismic data */
			if (tr.d1) {
				d1 = tr.d1;
			} else {
d113 3
a115 5
		if (seismic) {
			f1 = (tr.delrt) ? (float) tr.delrt/1000.0 : 0.0;
		} else {
			f1 = (tr.f1) ? tr.f1 : 0.0;
		}
@


1.12
log
@added verbose
@
text
@d1 1
a1 1
/* SUXMOVIE: $Revision: 1.11 $ ; $Date: 94/12/05 09:54:58 $		*/
d84 2
a85 2
	cwp_Bool got_n2 = true;	/* was n2 getparred?			*/
	cwp_Bool got_ntr = true;	/* was ntr header field set?	*/
a93 1
		 
d96 1
a96 1
	if (ntr==0) got_ntr = false;
d140 2
a141 2
	if (!getparint("n2", &n2)) got_n2 = false;
	if (got_n2) got_ntr = true;
d143 1
a143 1
	if (!got_ntr) { /* count and store traces to set n2 */
d194 1
a194 1
	if (!got_ntr) { /* send out stored traces one by one */
d211 1
a211 1
	if (!got_ntr) efclose(datafp);
@


1.11
log
@updated to permit getparring of n2 or reading of ntr parameter from header
@
text
@d1 1
a1 1
/* SUXMOVIE: $Revision: 1.10 $ ; $Date: 94/11/28 15:46:19 $		*/
d78 1
d99 1
d146 4
a149 2
		warn("n2 not getparred or ntr header field not set");
		warn(" .... counting traces ");
@


1.10
log
@changed to permit slow dimension to be input via getpar of n2 or via
new locally assigned header field "ntr".
@
text
@d1 1
a1 2
/* Copyright (c) Colorado School of Mines, 1994.*/
/* All rights reserved.                       */
a2 2
/* SUXMOVIE: $Revision: 1.9 $ ; $Date: 94/03/30 14:01:40 $		*/

d163 3
a165 5
	if (!got_ntr) {

		/* Set up xmovie command line */
		sprintf(plotcmd, "xmovie n1=%d n2=%d d1=%f d2=%f f1=%f f2=%f",
			   nt, n2, d1, d2, f1, f2);
d167 1
a167 1
		for (--argc, ++argv; argc; --argc, ++argv) {
d169 5
a173 5
			/* skip those already set */
			if (strncmp(*argv, "d1=", 3) &&
			    strncmp(*argv, "d2=", 3) &&
			    strncmp(*argv, "f1=", 3) &&
			    strncmp(*argv, "f2=", 3)) {
d175 2
a176 2
				/* put a space between args */
				strcat(plotcmd, " ");
d178 3
a180 3
				/* user quotes are stripped */
				strcat(plotcmd, "\"");
				strcat(plotcmd, *argv); /* add the arg */
d182 2
a183 3
				/* user quotes are stripped */
				strcat(plotcmd, "\"");
			}
d187 1
a189 1

@


1.9
log
@added ISSEISMIC macro
@
text
@d1 2
a2 1
/* SUXMOVIE: $Revision: 1.8 $ ; $Date: 93/09/14 13:23:56 $		*/
d4 1
a4 12
/*----------------------------------------------------------------------
 * Copyright (c) Colorado School of Mines, 1990.
 * All rights reserved.
 *
 * This code is part of SU.  SU stands for Seismic Unix, a processing line
 * developed at the Colorado School of Mines, partially based on Stanford
 * Exploration Project (SEP) software.  Inquiries should be addressed to:
 *
 *  Jack K. Cohen, Center for Wave Phenomena, Colorado School of Mines,
 *  Golden, CO 80401  (jkc@@dix.mines.colorado)
 *----------------------------------------------------------------------
 */
d85 1
a85 1
	cwp_Bool seismic;		/* is this seismic data?		*/
d87 1
a88 1

a92 1

d98 2
d141 3
d145 1
a145 2
	/* Get or set n2 */
	if (!getparint("n2", &n2)) { /* count and store traces to set n2 */
d147 3
a159 2
		n2 = ntr;
		got_n2 = false;
d162 2
d165 5
a169 2
	/* Set up xmovie command line */
	sprintf(plotcmd, "xmovie n1=%d n2=%d d1=%f d2=%f f1=%f f2=%f",
d171 2
d174 16
a189 10
	for (--argc, ++argv; argc; --argc, ++argv) {
		if (strncmp(*argv, "d1=", 3) && /* skip those already set */
		    strncmp(*argv, "d2=", 3) &&
		    strncmp(*argv, "f1=", 3) &&
		    strncmp(*argv, "f2=", 3)) {
		    
			strcat(plotcmd, " ");   /* put a space between args */
			strcat(plotcmd, "\"");  /* user quotes are stripped */
			strcat(plotcmd, *argv); /* add the arg */
			strcat(plotcmd, "\"");  /* user quotes are stripped */
a192 1

d195 1
d197 1
a197 1
	if (!got_n2) { /* send out stored traces one by one */
d214 1
a214 1
	if (!got_n2) efclose(datafp);
@


1.8
log
@Allow TDEAD etc. as seismic time traces.
@
text
@d1 1
a1 1
/* SUXMOVIE: $Revision: 1.7 $ ; $Date: 93/09/11 08:06:10 $		*/
d106 2
a107 2
	seismic = (tr.trid == 0 || tr.trid == TREAL ||
		   tr.trid == TDEAD || tr.trid == TDUMMY);
@


1.7
log
@Bool -> cwp_Bool, String -> cwp_String
@
text
@d1 1
a1 1
/* SUXMOVIE: $Revision: 1.6 $ ; $Date: 92/10/26 15:17:35 $		*/
d106 2
a107 1
	seismic =  (tr.trid == 0 || tr.trid == TREAL);
@


1.6
log
@new selfdoc installed
@
text
@d1 1
a1 1
/* SUXMOVIE: $Revision: 1.5 $ ; $Date: 91/09/19 16:52:35 $		*/
d95 2
a96 2
	Bool seismic;		/* is this seismic data?		*/
	Bool got_n2 = true;	/* was n2 getparred?			*/
@


1.5
log
@Fixed 2 bugs.  One was handling n2 = total # of traces correctly;
the other was closing the tmpfile when it was never created.
@
text
@d1 1
a1 1
/* SUXMOVIE: $Revision: 1.4 $ ; $Date: 91/09/19 12:01:02 $		*/
d20 36
a55 36
String sdoc =
" 									\n"
" SUXMOVIE - X MOVIE plot of a segy data set 				\n"
" 									\n"
" suxmovie <stdin [optional parameters]					\n"
" 							        	\n"
" Optional parameters: 							\n"
" 							        	\n"
" n2 is the number of traces per frame.  If not getparred then it	\n"
" is the total number of traces in the data set.  			\n"
" 							        	\n"
" d1 is the sampling interval in the fast dimension.  If not getparred	\n"
" then for seismic time domain data d1=tr.dt/10^6 if set, else 0.004. 	\n"
" For other types of data d1=tr.d1 if set, else 1.0			\n"
" 							        	\n"
" d2 is the sampling interval in the slow dimension.  If not getparred	\n"
" d2=tr.d2 if set, else 1.0						\n"
" 							        	\n"
" f1 is the first sample in the fast dimension.  If not getparred	\n"
" then for seismic time domain data f1=tr.delrt/10^3 if set, else 0.0.	\n"
" For other types of data f1=tr.d1 if set else 0.0	 		\n"
" 							        	\n"
" f2 is the first sample in the slow dimension.  If not getparred	\n"
" f2=tr.f2 if set, else tr.tracr if set, else tr.tracl if set,		\n"
" else 1.0 for seismic time domain data, else 0.0 			\n"
" 							        	\n"
" Note that for seismic time domain data, the \"fast dimension\" is	\n"
" time and the \"slow dimension\" is usually trace number or range.	\n"
" Also note that \"foreign\" data tapes may have something unexpected	\n"
" in the d2,f2 fields, use segyclean to clear these if you can afford	\n"
" the processing time or use d2= f2= to over-ride the header values if	\n"
" not.									\n"
" 							        	\n"
" See the xmovie selfdoc for the remaining parameters and X functions.	\n"
" 							        	\n"
;
d101 1
a101 1
	askdoc(1);
@


1.4
log
@Don't buffer traces if n2 is set!!!
@
text
@d1 1
a1 1
/* SUXMOVIE: $Revision: 1.3 $ ; $Date: 91/09/06 08:30:37 $		*/
d96 1
d150 1
a150 1
	/* Set n2 */
d164 1
d186 1
a186 1
	/* Open pipe; read data to buf; write buf to plot program */
d189 1
a189 1
	if (ntr == n2) { /* send out stored traces one by one */
d206 1
a206 1
	efclose(datafp);
@


1.3
log
@string -> String, etc.
@
text
@d1 1
a1 1
/* SUXMOVIE: $Revision: 1.2 $ ; $Date: 91/06/16 10:28:41 $		*/
d63 3
a65 1
 *	We are using tmpfile because on many machines it is
a71 1
 *	
a74 1
 *
d86 1
a86 1
	FILE *datafp;		/* fp for trace data file		*/
d149 2
a150 2
	/* Create temporary "file" to hold data */
	datafp = etmpfile();
d152 2
d155 6
a160 6
	/* Loop over input traces & put them into the data file */
	ntr = 0;
	do {
		++ntr;
		efwrite(tr.data, FSIZE, nt, datafp);
	} while (gettr(&tr));
d162 2
a164 2
	/* Set n2 */
	if (!getparint("n2", &n2))	n2 = ntr;
a165 1

d186 8
a193 5
	rewind(datafp);
	{ register int itr;
		for (itr = 0; itr < ntr; ++itr) {
			efread (trbuf, FSIZE, nt, datafp);
			efwrite(trbuf, FSIZE, nt, plotfp);
d195 4
@


1.2
log
@Eliminated computation of n3 since new xmovie doesn't demand it anymore.
@
text
@d1 1
a1 1
/* SUXMOVIE: $Revision: 1.1 $ ; $Date: 91/06/16 10:24:27 $		*/
d20 1
a20 1
string sdoc =
d95 1
a95 1
	bool seismic;		/* is this seismic data?		*/
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/* SUXMOVIE: $Revision: 1.16 $ ; $Date: 91/03/05 15:18:29 $		*/
a89 1
	int n3;			/* number of frames			*/
d161 1
a161 1
	/* Set n2, n3 */
a162 1
	n3 = ntr/n2;
d166 2
a167 2
	sprintf(plotcmd, "xmovie n1=%d n2=%d n3=%d d1=%f d2=%f f1=%f f2=%f",
			   nt, n2, n3, d1, d2, f1, f2);
@
