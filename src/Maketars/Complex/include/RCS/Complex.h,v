head     1.4;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


1.4
date     90.08.11.10.50.12;  author dhale;  state Exp;
branches ;
next     1.3;

1.3
date     90.08.06.10.40.20;  author dhale;  state Exp;
branches ;
next     1.2;

1.2
date     90.08.06.07.55.28;  author dhale;  state Exp;
branches ;
next     1.1;

1.1
date     90.08.06.04.22.12;  author dhale;  state Exp;
branches ;
next     ;


desc
@C++ include file for class complex.
@


1.4
log
@changed const complex& to complex in all functions to workaround
apparent bug in RS/6000 C compiler.
@
text
@// Complex.h - C++ include file for complex arithmetic

#ifndef COMPLEX_H
#define COMPLEX_H

#include <math.h>

class complex
{
public:
	float r;
	float i;
	inline complex() {r=0.0; i=0.0;}
	inline complex(float re, float im=0.0) {r=re; i=im;}
	inline float real(complex a);
	inline float imag(complex a);
	inline void operator+= (complex a);
	inline void operator+= (float a);
	inline void operator-= (complex a);
	inline void operator-= (float a);
	inline void operator*= (complex a);
	inline void operator*= (float a);
	inline void operator/= (complex a);
	inline void operator/= (float a);
};

// inline members
inline float complex::real(complex a) { return a.r; }
inline float complex::imag(complex a) { return a.i; }
inline void complex::operator+= (complex a)
{
	r += a.r; i += a.i;
}
inline void complex::operator+= (float a)
{
	r += a;
}
inline void complex::operator-= (complex a)
{
	r -= a.r; i -= a.i;
}
inline void complex::operator-= (float a)
{
	r -= a;
}
inline void complex::operator*= (complex a)
{
	float ar=a.r,ai=a.i,tr=r*ar-i*ai;
	i = r*ai+i*ar; r = tr;
}
inline void complex::operator*= (float a)
{
	r *= a; i *= a;
}
inline void complex::operator/= (complex a)
{
	float ar=a.r,ai=a.i,scale=1.0/(ar*ar+ai*ai);
	float tr = (r*ar+i*ai)*scale;
	i = (i*ar-r*ai)*scale; r = tr;
}
inline void complex::operator/= (float a)
{
	float scale=1.0/a;
	r *= scale; i *= scale;
}

// inline functions
inline int operator== (complex a, complex b)
{
	return a.r==b.r && a.i==b.i;
}
inline int operator== (complex a, float b)
{
	return a.r==b && a.i==0.0;
}
inline int operator== (float a, complex b)
{
	return a==b.r && b.i==0.0;
}
inline int operator!= (complex a, complex b)
{
	return a.r!=b.r || a.i!=b.i;
}
inline int operator!= (complex a, float b)
{
	return a.r!=b || a.i!=0.0;
}
inline int operator!= (float a, complex b)
{
	return a!=b.r || b.i!=0.0;
}
inline complex operator- (complex a)
{
	return complex(-a.r,-a.i);
}
inline complex conjg (complex a)
{
	return complex(a.r,-a.i);
}
inline float abs (complex a)
{
	return sqrt(a.r*a.r+a.i*a.i);
}
inline complex operator+ (complex a, complex b)
{
	return complex(a.r+b.r,a.i+b.i);
}
inline complex operator+ (complex a, float b)
{
	return complex(a.r+b,a.i);
}
inline complex operator+ (float a, complex b)
{
	return complex(a+b.r,b.i);
}
inline complex operator- (complex a, complex b)
{
	return complex(a.r-b.r,a.i-b.i);
}
inline complex operator- (complex a, float b)
{
	return complex(a.r-b,a.i);
}
inline complex operator- (float a, complex b)
{
	return complex(a-b.r,-b.i);
}
inline complex operator* (complex a, complex b)
{
	float ar=a.r,ai=a.i,br=b.r,bi=b.i;
	return complex(ar*br-ai*bi,ar*bi+ai*br);
}
inline complex operator* (complex a, float b)
{
	return complex(a.r*b,a.i*b);
}
inline complex operator* (float a, complex b)
{
	return complex(a*b.r,a*b.i);
}
inline complex operator/ (complex a, complex b)
{
	float ar=a.r,ai=a.i,br=b.r,bi=b.i,scale=1.0/(br*br+bi*bi);
	return complex((ar*br+ai*bi)*scale,(ai*br-ar*bi)*scale); 
}
inline complex operator/ (complex a, float b)
{
	float scale=1.0/b;
	return complex(a.r*scale,a.i*scale); 
}
inline complex operator/ (float a, complex b)
{
	float br=b.r,bi=b.i,scale=a/(br*br+bi*bi);
	return complex(br*scale,-bi*scale); 
}

// inline functions with destination argument (ugly, but efficient)
inline void cmplx(float a, float b, complex& c)
{
	c.r = a; c.i = b;
}
inline void conjg(complex& a, complex& b)
{
	b.r = a.r; b.i = -a.i;
}
inline void neg(complex& a, complex& b)
{
	b.r = -a.r; b.i = -a.i;
}
inline void add(complex& a, complex& b, complex& c)
{
	c.r = a.r+b.r; c.i = a.i+b.i;
}
inline void add(float a, complex& b, complex& c)
{
	c.r = a+b.r; c.i = b.i;
}
inline void add(complex& a, float b, complex& c)
{
	c.r = a.r+b; c.i = a.i;
}
inline void sub(complex& a, complex& b, complex& c)
{
	c.r = a.r-b.r; c.i = a.i-b.i;
}
inline void sub(float a, complex& b, complex& c)
{
	c.r = a-b.r; c.i = -b.i;
}
inline void sub(complex& a, float b, complex& c)
{
	c.r = a.r-b; c.i = a.i;
}
inline void mul(complex& a, complex& b, complex& c)
{
	float ar=a.r,ai=a.i,br=b.r,bi=b.i;
	c.r = ar*br-ai*bi; c.i = ar*bi+ai*br;
}
inline void mul(float a, complex& b, complex& c)
{
	c.r = a*b.r; c.i = a*b.i;
}
inline void mul(complex& a, float b, complex& c)
{
	c.r = a.r*b; c.i = a.i*b;
}
inline void div(complex& a, complex& b, complex& c)
{
	float ar=a.r,ai=a.i,br=b.r,bi=b.i,scale=1.0/(br*br+bi*bi);
	c.r = (ar*br+ai*bi)*scale; c.i = (ai*br-ar*bi)*scale; 
}
inline void div(float a, complex& b, complex& c)
{
	float br=b.r,bi=b.i,scale=a/(br*br+bi*bi);
	c.r = br*scale; c.i = -bi*scale; 
}
inline void div(complex& a, float b, complex& c)
{
	float scale=1.0/b;
	c.r = a.r*scale; c.i = a.i*scale; 
}

// non-inline function prototypes
complex sqrt(complex a);
complex cos(complex a);
complex sin(complex a);
complex cosh(complex a);
complex sinh(complex a);
complex exp(complex a);
complex log(complex a);
complex pow(complex a, int p);
complex pow(complex a, double p);
complex pow(double a, complex p);
complex pow(complex a, complex p);

#endif
@


1.3
log
@Changed all inline member functions to get around bug in
RS/6000 C compiler optimization.
@
text
@d13 1
a13 2
	inline complex() {};
	inline complex(const complex& a) {r=a.r; i=a.i;}
d15 2
a16 2
	inline float real();
	inline float imag();
d28 2
a29 2
inline float complex::real() { return r; }
inline float complex::imag() { return i; }
d68 1
a68 1
inline int operator== (const complex& a, const complex& b)
d72 1
a72 1
inline int operator== (const complex& a, float b)
d76 1
a76 1
inline int operator== (float a, const complex& b)
d80 1
a80 1
inline int operator!= (const complex& a, const complex& b)
d84 1
a84 1
inline int operator!= (const complex& a, float b)
d88 1
a88 1
inline int operator!= (float a, const complex& b)
d92 1
a92 1
inline complex operator- (const complex& a)
d96 1
a96 1
inline complex conjg (const complex& a)
d100 1
a100 1
inline float abs (const complex& a)
d104 1
a104 1
inline complex operator+ (const complex& a, const complex& b)
d108 1
a108 1
inline complex operator+ (const complex& a, const float &b)
d112 1
a112 1
inline complex operator+ (const float &a, const complex& b)
d116 1
a116 1
inline complex operator- (const complex& a, const complex& b)
d120 1
a120 1
inline complex operator- (const complex& a, float b)
d124 1
a124 1
inline complex operator- (float a, const complex& b)
d128 1
a128 1
inline complex operator* (const complex& a, const complex& b)
d133 1
a133 1
inline complex operator* (const complex& a, float b)
d137 1
a137 1
inline complex operator* (float a, const complex& b)
d141 1
a141 1
inline complex operator/ (const complex& a, const complex& b)
d146 1
a146 1
inline complex operator/ (const complex& a, float b)
d151 1
a151 1
inline complex operator/ (float a, const complex& b)
d224 11
a234 11
complex sqrt(const complex& a);
complex cos(const complex& a);
complex sin(const complex& a);
complex cosh(const complex& a);
complex sinh(const complex& a);
complex exp(const complex& a);
complex log(const complex& a);
complex pow(const complex& a, int p);
complex pow(const complex& a, double p);
complex pow(double a, const complex& p);
complex pow(const complex& a, const complex& p);
@


1.2
log
@*** empty log message ***
@
text
@d18 8
a25 9
	inline complex& operator=  (const complex& a);
	inline complex& operator+= (const complex& a);
	inline complex& operator+= (float a);
	inline complex& operator-= (const complex& a);
	inline complex& operator-= (float a);
	inline complex& operator*= (const complex& a);
	inline complex& operator*= (float a);
	inline complex& operator/= (const complex& a);
	inline complex& operator/= (float a);
d31 1
a31 5
inline complex& complex::operator= (const complex& a)
{ 
	r = a.r; i = a.i; return *this; 
} 
inline complex& complex::operator+= (const complex& a)
d33 1
a33 1
	r += a.r; i += a.i; return *this; 
d35 1
a35 1
inline complex& complex::operator+= (float a)
d37 1
a37 1
	r += a; return *this; 
d39 1
a39 1
inline complex& complex::operator-= (const complex& a)
d41 1
a41 1
	r -= a.r; i -= a.i; return *this; 
d43 1
a43 1
inline complex& complex::operator-= (float a)
d45 1
a45 1
	r -= a; return *this; 
d47 1
a47 1
inline complex& complex::operator*= (const complex& a)
d50 1
a50 1
	i = r*ai+i*ar; r = tr; return *this; 
d52 1
a52 1
inline complex& complex::operator*= (float a)
d54 1
a54 1
	r *= a; i *= a; return *this; 
d56 1
a56 1
inline complex& complex::operator/= (const complex& a)
d60 1
a60 1
	i = (i*ar-r*ai)*scale; r = tr; return *this; 
d62 1
a62 1
inline complex& complex::operator/= (float a)
d65 1
a65 1
	r *= scale; i *= scale; return *this; 
@


1.1
log
@Initial revision
@
text
@d13 3
a15 3
	inline complex();
	inline complex(const complex& a);
	inline complex(float re, float im=0.0);
a29 3
inline complex::complex() {}
inline complex::complex(const complex& a) : r(a.r), i(a.i) {}
inline complex::complex(float re, float im) : r(re), i(im) {}
@
