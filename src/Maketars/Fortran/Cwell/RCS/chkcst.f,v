head	1.1;
access;
symbols;
locks
	john:1.1; strict;
comment	@c @;


1.1
date	97.01.28.19.25.22;	author john;	state Exp;
branches;
next	;


desc
@chkcst
@


1.1
log
@Initial revision
@
text
@      subroutine chkcst(xray1,zray1,xray2,zray2,n,nseg,icaust)
c     Checks for caustic by looking to see if two adjacent rays
c     intersect each other on one of their segments.
c     Does not support multiple caustics (ie looks only for
c     one intersection).

      integer  n,           icaust,      nseg

      real     xray1(0:n),  zray1(0:n),  xray2(0:n),  zray2(0:n),
     :         denom,       large,       small

      parameter( large = 999999.,
     :           small = .1)

cc    Local variables
      integer  i
      real     sr1,   cr1,   sr2,   cr2,   x,   z,
     :         x1,    x2


c     first set caustic identifier to 'no caustic'
      icaust = 1

c     (Note: rays can't intersect in first segment)
      do 100 i = 2,  nseg

c        eqn of ray segment for first ray...
         denom = ( zray1(i) - zray1(i-1))
         if(abs(denom).lt.small) then
c           ray is horizontal
            sr1 = large
            cr1 = zray1(i)
         else
c           slope
            sr1 = ( xray1(i) - xray1(i-1) ) / denom
c           intercept
            cr1 = ( xray1(i-1)*zray1(i) - xray1(i)*zray1(i-1) ) 
     :      / denom 
         end if

c        eqn of ray segment for second ray...
         denom = zray2(i) - zray2(i-1)
         if(abs(denom).lt.small) then
c           ray is horizontal
            sr2 = large
            cr2 = zray2(i)
         else
c           slope
            sr2 = ( xray2(i) - xray2(i-1) ) / denom
c           intercept
            cr2 = ( xray2(i-1)*zray2(i) - xray2(i)*zray2(i-1) ) 
     :         / denom
         end if


         if(sr1.eq.sr2) then
c           ray segments parallel, no intersection
         else
c           intersection point
            z = ( cr2 - cr1 ) / ( sr1 - sr2 )
            x = sr1 * z + cr1

            x1 = xray1(i-1)
            x2 = xray1(i)
c           check to see if intersection occurs within ray segment
c           two cases, depending on whether ray is shooting to left or right
            if(x.ge.(x1))then
               if(x.le.x2) then
                  icaust = 0
c                 not supporting multiple caustics...
                  return
               end if
            else if(x.le.(x1)) then
               if(x.ge.x2) then
                  icaust = 0
c                 not supporting multiple caustics...
                  return
               end if
            end if
         end if

100      continue

      return
      end
@
