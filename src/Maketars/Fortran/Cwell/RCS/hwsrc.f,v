head	1.1;
access;
symbols;
locks
	john:1.1; strict;
comment	@c @;


1.1
date	97.01.28.19.25.22;	author john;	state Exp;
branches;
next	;


desc
@hwsrc
@


1.1
log
@Initial revision
@
text
@      SUBROUTINE hwsrc(x1,sinthc,irfrct,ds,x2,z2,lref,
     :up,down,beta,signdx,pi,slayer,xstart,xend,fail,
     :xcross,left,right)

c     When finding head wave rays, the source is move along the interface
c     and rays are shot off at the critical angle.  This routine
c     finds the location of the next source position in this procedure.

      integer    irfrct,   lref,     slayer
      REAL       x1,  x2,  z2,  sinthc, ds, beta, signdx,
     :           pi,  xend,     xstart, xcross(0:*)
      logical    up,       down,     fail,     left,   right

      INTEGER    MAXINT,       MAXSPL,         MXSPM1,
     :           MAXN,         MAXNP1,         nnew

      PARAMETER ( MAXINT = 20,
     :            MAXSPL = 51,
     :            MAXN   = 40)

      PARAMETER ( MAXNP1 = MAXN + 1,
     :            MXSPM1 = MAXSPL - 1)

      REAL         XINT(0:MAXINT,MAXSPL),    ZINT(0:MAXINT,MAXSPL),
     :             A0(0:MAXINT,MXSPM1),      A1(0:MAXINT,MXSPM1),
     :             A2(0:MAXINT,MXSPM1),      A3(0:MAXINT,MXSPM1),
     :             SIGN(0:MAXN)

      INTEGER      NPTS(0:MAXINT),  NINT,      NORDER(MAXN)

      COMMON /A/   XINT,          ZINT,
     :             A0,            A1,        A2,          A3,
     :             SIGN,
     :             NPTS,          NINT,      NORDER

      REAL       DZ(MAXN),        DDZ(MAXN),
     :           D(MAXNP1),       DELTAX(MAXNP1),   DELTAZ(MAXNP1),
     :           V(MAXNP1)

      INTEGER    N

      COMMON /B/   DZ,            DDZ,
     :             D,             DELTAX,        DELTAZ,
     :             V,             N

c     Local Variables:
      integer   l,  j
      real      slope,   denom,   dx,   transx,   transz


      fail = .false.
      l = irfrct
      J = 1
50    IF(X1.GT.XINT(L,J)) THEN
         J = J + 1
         GO TO 50
      END IF
      J = J - 1
c     find slope of interface
      slope = A1(L,J) + 2. * A2(L,J) * X1
     :   + 3. * A3(L,J) * X1**2

      dx = ds / sqrt( 1. + slope*slope )
         
c     x-location of next source point on the interface
      x2 = x1 + signdx * dx
      if(x2.le.xstart.or.x2.ge.xend) then
         fail = .true.
         return
      end if

c     which side of well is source on ?
      if(x2.ge.xcross(irfrct)) then
         right = .true.
         left = .false.
      else
         right = .false.
         left = .true.
      end if

c     find z-coordinate on interface at x2        
      J = 1
100   IF(X2.GT.XINT(L,J)) THEN
         J = J + 1
         GO TO 100
      END IF
      J = J - 1

      Z2 = A0(L,J) + A1(L,J) * X2 +
     :       A2(L,J) * X2**2 + A3(L,J) * X2**3 

c     and new slope
      slope = A1(L,J) + 2. * A2(L,J) * X2
     :   + 3. * A3(L,J) * X2**2


c     find component of transmitted ray in x-direction
c     -ray leaves at critical angle
      DENOM = SQRT( 1. + slope**2 )
      TRANSX = ( signdx * SINTHC + SIGN(lref) * SQRT( 1. - SINTHC**2 )
     :         * slope ) / DENOM

c     find z-component of transmitted ray
      TRANSZ = ( signdx * SINTHC * slope - SIGN(lref) *
     :          SQRT( 1. - SINTHC**2 ) ) / DENOM


c     ...is ray going up or down from interface...
c     also set source layer number
      sign(0) = sign(lref)
      if(sign(0).gt.0.) then
         up = .true.
         down = .false.
         slayer = irfrct
      else
         up = .false.
         down = .true.
         slayer = irfrct + 1
      end if

c     find takeoff angle in (x,z) coordinate system
      call FINDBN(transx,transz,PI,beta,sign(0))

      return
      end
c-----------------------------------------------------------

      SUBROUTINE FINDBN(x1mx0,z1mz0,PI,BETNEW,s)

c     Given the raypath, this subroutine finds its takeoff angle

      REAL    x1mx0,     z1mz0,     PI,      BETNEW,  s

c     local  variables
c     s      sign(0)


      if(s.lt.0.) then
c        takeoff angle measured from downward vertical
c        ray is downgoing (generally)
         if(z1mz0.gt.0.) then
c           in range -90 to 90 degrees - ray really going down
            BETNEW = 180. * ATAN2( X1mX0 , Z1MZ0 ) / PI
         else if(z1mz0.lt.0.) then
c           ray going up
            if(x1mx0.lt.0.) then
               BETNEW = -180.+180.*ATAN2(abs(X1mX0),abs(Z1MZ0))/PI
            else if(x1mx0.gt.0.) then
              BETNEW = +180. - 180. * ATAN2(X1mX0,abs(Z1MZ0)) / PI
            else if(x1mx0.eq.0.) then
               betnew = 180.
            end if
         else if (z1mz0.eq.0.) then
c           ray horizontal
            if(x1mx0.lt.0.) betnew = -90.
            if(x1mx0.gt.0.) betnew = +90.
         end if
      end if
         
      if(s.gt.0.) then
c        takeoff angle measured from upward vertical
c        ray is upgoing (generally)
         if(z1mz0.lt.0.) then
c           in range -90 to 90 degrees - ray really going up
            BETNEW = 180. * ATAN2( X1mX0 , abs(Z1MZ0) ) / PI
         else if(z1mz0.gt.0.) then
c           ray going down
            if(x1mx0.lt.0.) then
               BETNEW = -180. + 180. * ATAN2(abs(X1mX0),Z1MZ0) / PI
            else if(x1mx0.gt.0.) then
              BETNEW = +180. - 180. * ATAN2( X1mX0 , Z1MZ0 ) / PI
            else if(x1mx0.eq.0.) then
               betnew = 180.
            end if
         else if (z1mz0.eq.0.) then
c           ray horizontal
            if(x1mx0.lt.0.) betnew = -90.
            if(x1mx0.gt.0.) betnew = +90.
         end if
      end if
 

      RETURN
      END

c---------------------------------------------------------------------
@
