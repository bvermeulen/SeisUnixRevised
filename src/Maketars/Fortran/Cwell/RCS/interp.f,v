head	1.1;
access;
symbols;
locks
	john:1.1; strict;
comment	@c @;


1.1
date	97.01.28.19.25.22;	author john;	state Exp;
branches;
next	;


desc
@interp
@


1.1
log
@Initial revision
@
text
@      subroutine linint(zend,t,amp,phase,work,nt,d0,d1,spfail,
     :           firstr,lastr,nrlayr,zrec,nrec,trec,
     :           amprec,phsrec,nrec1,nrecn,turnup,turndn)

c     Calculates the interpolated values of traveltime, amplitude
c     and phase at the receiver locations given tese quanitities
c     at the end points of the rays.

      integer     nt,    nrec,   nrlayr,   firstr,   lastr,
     :            nrec1, nrecn

      real zend(nt),  t(nt),    amp(nt),     phase(nt),  work(nt),
     :     d0(nt-1),  d1(nt-1), zrec(nrec),  trec(nrlayr),  
     :     phsrec(nrlayr),      amprec(nrlayr)

      logical   spfail,         turnup,      turndn

      integer   i

      spfail = .false.
      
c     prep for line interpolation...
      call prepln(zend,t,amp,phase,work,nt)

c     first do traveltimes
      call linfit(zend,t,nt,d0,d1,spfail)
      if(spfail) return

      call interp(zend,nt,d0,d1,
     :nrlayr,firstr,lastr,zrec,nrec,trec,
     :nrec1,nrecn,turnup,turndn)
c     avoid extrapolation to negative times...
      do 10 i = 1, nrecn - nrec1 + 1
         if(trec(i).lt.0.) then
            trec(i) = 0.
c           write(*,*)'adjusting negative times'
         end if
10       continue


c     now do amplitudes
      call linfit(zend,amp,nt,d0,d1,spfail)
      if(spfail) return

      call interp(zend,nt,d0,d1,
     :nrlayr,firstr,lastr,zrec,nrec,amprec,
     :nrec1,nrecn,turnup,turndn)
c     avoid sign change in amplitudes caused by extrapolation
      if(amp(nt/2).ge.0.) then
c        we want all amplitudes to be positive
c        (amplitude should not change sign within a branch)
         do 20 i = 1,  nrecn - nrec1 + 1
            if(amprec(i).lt.0.) then 
            amprec(i) = 0.
c           write(*,*)'adjusting amplitudes'
            end if
20          continue
      else
         do 30 i = 1,  nrecn - nrec1 + 1
            if(amprec(i).gt.0.) then
            amprec(i) = 0.
c           write(*,*)'adjusting amplitudes'
            end if
30          continue
      end if

c     finally, do phase
      call linfit(zend,phase,nt,d0,d1,spfail)
      if(spfail) return

      call interp(zend,nt,d0,d1,
     :nrlayr,firstr,lastr,zrec,nrec,phsrec,
     :nrec1,nrecn,turnup,turndn)

      return
      end

c------------------------------------------------------------------------
      subroutine prepln(z,t,amp,phase,work,nt)
c     Orders the values from shallow to deep in the well

      integer nt
      real    z(nt),  t(nt), amp(nt),  phase(nt),  work(nt)

      integer  i

      if(z(nt).gt.z(1)) return

      do 10 i = 1,  nt
         work(i) = z(i)
10       continue
      do 20 i = 1,  nt
         z(i) = work(nt-i+1)
20       continue

      do 30 i = 1,  nt
         work(i) = t(i)
30       continue
      do 40 i = 1,  nt
         t(i) = work(nt-i+1)
40       continue

      do 50 i = 1,  nt
         work(i) = amp(i)
50       continue
      do 60 i = 1,  nt
         amp(i) = work(nt-i+1)
60       continue

      do 70 i = 1,  nt
         work(i) = phase(i)
70       continue
      do 80 i = 1,  nt
         phase(i) = work(nt-i+1)
80       continue

      return
      end

c--------------------------------------------------------------

      subroutine linfit(z,t,nt,d0,d1,spfail)

c     Calculates the coefficients for linear interpolation.

      integer       nt

      real  z(nt),  t(nt),   d0(nt-1),  d1(nt-1)

      logical spfail

      integer i
      real    denom


      do 10 i = 1,  nt - 1
         denom = z(i+1) - z(i)
         if(denom.eq.0.) then
            spfail = .true.
            return
         end if
c        intercept...
         d0(i) = ( t(i)*z(i+1)-t(i+1)*z(i) ) / denom
c        slope...
         d1(i) = ( t(i+1)-t(i) ) / denom
10       continue

      return
      end

c-----------------------------------------------------------------------
      subroutine interp(z,nt,d0,d1,nrlayr,firstr,lastr,
     :           zrec,nrec,trec,nrec1,nrecn,turnup,turndn)

c     Linearly interpolates values using the coefficients calculated
c     by sub linfit.

      integer  nt,      nrlayr, firstr,  lastr,   nrec,
     :         nrec1,   nrecn

      real   z(nt),             d0(nt-1),         d1(nt-1),
     :       zrec(nrec),        trec(nrlayr)

      logical  turnup,  turndn

      integer  i,       it,     j
      logical  first

c     first check for turning point at end of branch (if so, we
c     will not extrapolate beyond turning point)
      if(turnup.or.turndn) go to 200

      it = 0
c     firstr and lastr are are the top and bottom receiver in the layer
      do 100 i = firstr,  lastr 

c        first find the right section of the line
         if(zrec(i).le.z(1)) then
c           receiver is above first ray intersection
            j = 1
         else if(zrec(i).ge.z(nt)) then
c           receiver is below last ray intersection
            j = nt - 1
         else
            j = 1
5           if(zrec(i).gt.z(j)) then
              j = j + 1
              go to 5
            end if
            j = j - 1
         end if

c        linearly interpolate
         it = it + 1
         trec(it) = d0(j) + d1(j) * zrec(i) 
      
100      continue

c     range of interpolated values
      nrec1 = firstr
      nrecn = lastr
      return

200   continue

      first = .true.
      it = 0
      do 300 i = firstr,  lastr 

c        first find the right section of the line
         if(zrec(i).le.z(1)) then
c           receiver is above first ray intersection
            if(turndn) go to 300
            j = 1
         else if(zrec(i).ge.z(nt)) then
c           receiver is below last ray intersection
            if(turnup) go to 300
            j = nt - 1
         else
            j = 1
10          if(zrec(i).gt.z(j)) then
              j = j + 1
              go to 10
            end if
            j = j - 1
         end if
         if(first) then
c           first receiver to be interpolated to
            nrec1 = i
            first = .false.
         end if

         it = it + 1
         trec(it) = d0(j) + d1(j) * zrec(i) 
      
300      continue

c     range of interpolated values
      nrecn = nrec1 + it - 1

      return
      end

c-----------------------------------------------------------------
@
