head	1.1;
access;
symbols;
locks
	john:1.1; strict;
comment	@c @;


1.1
date	97.01.28.19.25.22;	author john;	state Exp;
branches;
next	;


desc
@misc
@


1.1
log
@Initial revision
@
text
@
      subroutine order(kref,nrefls,is,ievent,vel,norder,v,sign,
     : vref,n,valid,list,raylst,stderr,maxevt,maxref,nint,lref,
     : evtype,sinthc)

c     Calculates the order in which the ray meets the interfaces.
c     Sets velocities on ray segments.
c     Sets direction in which a ray leaves an interface (through sign()).
c     Finds the velocity of the reflecting layers.
ccc   (Note: this subroutine has been modified from the one used in
ccc    CSHOT.)

      real     vel(0:*),  v(*),  sign(0:*),  vref(*)
      integer  ievent,    is,    raylst,     nrefls,   stderr,   n,
     :         nint,      lref
      integer  kref(maxevt,0:maxref),        norder(*)
      logical  valid,     list
      character evtype*1

cc    Local variables:
c     DOWN     TRUE when ray is going down
c     I        Counter
c     IMAX     Max interface number at ends of ray segment
c     INC      +-1, depending on whether ray is going up or down
c     I1       Interface number of previous reflector
c     I2       Interface number of next reflector
c     ITRAK    Tracks the number of intersections
c     K,L      Counters
c     UP       TRUE when ray is going up
c     VREFCT   Velocity of refractor

      integer  i,   imax,   inc,   i1,   i2,   itrak,  k,  l
      logical  up,  down
      real     vrefct


      valid = .true.
c     first set order of intersections

      itrak = 0
c     source layer
      kref(ievent,0) = is

      if(kref(ievent,nrefls).ge.kref(ievent,nrefls-1)) then
c        send ray back to upper surface
         kref(ievent,nrefls+1) = 0
         vrefct = vel(kref(ievent,nrefls)+1)
      else
c        send ray to deepest interface
         kref(ievent,nrefls+1) = nint
         vrefct = vel(kref(ievent,nrefls))
      end if

      if(kref(ievent,1).ge.kref(ievent,0)) then
c        ray is going down from source
         norder(1) = kref(ievent,0)
         itrak = itrak + 1
         down = .true.
         up = .false.
      else
c        ray is going up from source
         down = .false.
         up = .true.
      end if

      do 100 l = 1,  nrefls + 1
         if(kref(ievent,l).ge.kref(ievent,l-1).and.down) then
c           ray is going down
            inc = 1
            i1 = kref(ievent,l-1) + 1
            i2 = kref(ievent,l)
            vref(l) = vel(i2+1)
         else if(kref(ievent,l).lt.kref(ievent,l-1).and.up) then
c           ray is going up   
            inc = - 1
            i1 = kref(ievent,l-1)  - 1
            i2 = kref(ievent,l)
            vref(l) = vel(i2)
         else
            valid = .false.
            write(stderr,'(2x,a)')
     :      'Invalid event.'
            if(list) then
               write(raylst,'(2x,a)')
     :         'Invalid event.'
               write(raylst,'(2x,a)')
     :         'May be due to source location or the reflector list.'
            end if
            return
         end if
      
c        set order of intersections betweeen ray and interfaces
         do 50 k = i1, i2, inc
            itrak = itrak + 1
            norder(itrak) = k
50          continue

         if(down) then
            down = .false.
            up   = .true.
         else
            down = .true.
            up   = .false.
         end if

c        intersection number of last reflection...
         if(l.eq.nrefls) lref = itrak

100      continue


c     set n
      n = itrak - 1

c     now set velocities on ray segments
      v(1) = vel(is)
      do 210 i = 2,  n + 1
         imax = max(norder(i),norder(i-1))
         v(i) = vel(imax)
210      continue
    
c     set sign() ie, direction of ray leaving an interface
      do 250 i = 1,  n 
         if(norder(i+1).gt.norder(i)) then
c           ray going down
            sign(i) = -1.
         else
c           ray going up
            sign(i) = 1.
         end if
250      continue

      if(norder(1).lt.is) then
c        ray goes up from source
         sign(0) = 1.
      else
c        ray goes down from source
         sign(0) = -1.
      end if

c     check for valid head wave
      if(evtype.eq.'h') then
         if(vrefct.gt.v(lref)) then
            sinthc = v(lref)/vrefct
         else
            valid = .false.
            write(stderr,'(2x,a)')
     :      'No head wave.'
            return
         end if
      end if

      return
      end

c---------------------------------------------------------------------
      subroutine setref(event,irefl,nrefls,ievent,valid,maxevt,
     :                  maxref,nint)

c     Given character input (event), this subroutine sets the list
c     of reflectors for this event and counts the number of reflections
c     that occur in this event.  Assumes that 2 digits are enough to 
c     specify a reflector (ie, 99 is max interface number)

      character    event*30
      logical      valid
      integer      nrefls,    ievent,    maxevt,   maxref,   nint

      integer   irefl(maxevt,0:maxref)

cc    Local variables:
c     DIGITS   The digits 0 - 9, and space
c     IDIG1    First digit of pair
c     IDIG2    Second digit of pair
c     J,K      Counters

      character  digits*11
      integer    idig1,    idig2,   j,   k


      digits = ' 0123456789'
      valid = .true.
      nrefls = 1

c     look at characters - max of 30
c     pass over blank spaces

      j = 1
10    if(j.le.30) then

         if(event(j:j).eq.digits(1:1)) then
c           this is a space
            j = j + 1
         else   
c           calculate the digit
            k = 2
20          if(event(j:j).ne.digits(k:k)) then
               k = k + 1
               if(k.gt.11) then
c                 character not 0 - 9
                  valid = .false.
                  return
               end if
               go to 20 
            end if
c           got the first digit of possible pair
            idig1 = k - 2
   
c           next character
            j = j + 1
            if(j.gt.30) then
c              only one digit
c              set reflector
               irefl(ievent,nrefls) = idig1
            else  
c              set number (maximum of two digits)
               if(event(j:j).eq.digits(1:1)) then
c                 space - only one digit
                  irefl(ievent,nrefls) = idig1
               else
                  k = 2
30                if(event(j:j).ne.digits(k:k)) then
                     k = k + 1
                     if(k.gt.11) then
                        valid = .false.
                        return
                     end if
                     go to 30
                  end if
c                 got  the second digit
                  idig2 = k - 2
c                 set reflector
                  irefl(ievent,nrefls) = 10 * idig1 + idig2
c                 make sure next character is a space (2 digits max)
                  if(event(j+1:j+1).ne.digits(1:1)) then
                     valid = .false.
                     return
                  end if
               end if

               j = j + 1
            end if
            nrefls = nrefls + 1

         end if
         go to 10 

      end if

c     number of reflections in this event
      nrefls = nrefls - 1

c     make sure these are valid reflector numbers
      do 50 j = 1,  nrefls
         if(irefl(ievent,j).gt.nint.or.irefl(ievent,j).lt.0) then
            valid = .false.
            return
         end if
50       continue

      return 
      end

c-----------------------------------------------------------------------
      subroutine xzsrc(s1,nsrc,dsrc,zwell,nwell,w0,w1,w2,w3,
     :                xsrc,zsrc,fail)
c     Calculates the x-z coordinates of sources (or receivers)
c     in the well.

      integer   nsrc,       nwell

      real      s1,         dsrc,        zwell(0:nwell-1),
     :          w0(nwell),  w1(nwell),   w2(nwell),   w3(nwell),
     :          xsrc(nsrc), zsrc(nsrc)

      logical   fail

cc    Local variables:
c     DELS    integration step size (arc length down the well)
c     DELZ    change in Z due to step DELS
c     DXDZ    slope of well (dx/dz)
c     ISI     lower limit of integration
c     ISF     upper limit of integration
c     J,K,L   loop variables
c     XTRAK   x-coordinate in well
c     ZTRAK   z-coordinate in well

      real     dels,  delz,  dxdz,  xtrak,  ztrak
      integer  isi,   isf,   j,      k,     l    
      parameter( dels = 1.)

      fail = .false.
      ztrak = zwell(0)
      
c     First find x,z-coordinates of sources in well
      do 300 k = 1,  nsrc

c        set limits of integration
         if(k.eq.1) then
            isi = 0
            isf = s1
         else
            isi = s1 + ( k - 2 ) * dsrc
            isf = isi + dsrc
         end if
c        integrate down the well to next source
         do 250 l = isi + 1,  isf

            if(ztrak.lt.zwell(0).or.
     :      ztrak.ge.zwell(nwell-1)) then
               fail = .true.
               return
c              write(stderr,'(a)')'XZREC: receivers outside well.'
c              stop
            end if
            J = 1
210         IF(ztrak.ge.zwell(J-1)) THEN
               J = J + 1
               GO TO 210
            END IF
            J = J - 1
c           slope of well
            dxdz =       w1(j)
     :           +  2. * w2(j) * ztrak
     :           +  3. * w3(j) * ztrak**2
   
c           change in z brought about by dels increment in distance (arc
c           length) down well
            delz = dels / sqrt( 1. + dxdz**2 )
c           z coordinate at this distance down the well
            ztrak = ztrak + delz

250         continue

c           find x-coordinate at this source
            J = 1
260         IF(ztrak.ge.zwell(J-1)) THEN
               J = J + 1
               GO TO 260
            END IF
            J = J - 1
            xtrak = w0(j) + w1(j) * ztrak
     :                    + w2(j) * ztrak**2
     :                    + w3(j) * ztrak**3

c           set x,z-coordinates of source
            xsrc(k) = xtrak
            zsrc(k) = ztrak
 
300         continue

         return
         end

c----------------------------------------------------------------------
      subroutine xzwint(xwell,zwell,nwell,w0,w1,w2,w3,xint,
     :           a0,a1,a2,a3,maxint,maxspl,mxspm1,nint,
     :           xcross,zcross,fail,stderr)

c     Calculates the intersections of the well with the interfaces

      real  xwell(0:nwell-1),          zwell(0:nwell-1)
      real  w0(nwell),                 w1(nwell), 
     :      w2(nwell),                 w3(nwell),
     :      XINT(0:MAXINT,MAXSPL),     
     :      A0(0:MAXINT,MXSPM1),       A1(0:MAXINT,MXSPM1),
     :      A2(0:MAXINT,MXSPM1),       A3(0:MAXINT,MXSPM1)

      INTEGER    NINT,                 stderr

      real  xcross(0:nint),            zcross(0:nint)
      logical fail

cc    Local variables
      integer s,  ds,   smax,   iint,   j
      real    ztrak,    xtrak,  dxdz,   delz,   zintk

c     max length of well
c     parameter( smax = 50000)
      parameter(   ds = 1)
c     parameter( smax = 10000)
c     parameter(   ds = 5)

c     write(*,*)'xzwint, using new smax and ds'

c     intersection of well and upper surface
      xcross(0) = xwell(0)
      zcross(0) = zwell(0)


      iint = 1
      s = 0
      ztrak = zwell(0)
      

c100   if(iint.le.nint.and.s.lt.smax) then
100   if(iint.le.nint) then
c        while there are more interfaces at which to calculate
c        well intersection (well must cut all interfaces)

         s = s + ds

c        calculate z at this s
         J = 1
210      IF(ztrak.ge.zwell(J-1)) THEN
            J = J + 1
            GO TO 210
         END IF
         J = J - 1

         dxdz =       w1(j)
     :        +  2. * w2(j) * ztrak
     :        +  3. * w3(j) * ztrak**2
  
         delz = ds / sqrt( 1. + dxdz**2 )
         ztrak = ztrak + delz
         if(ztrak.ge.zwell(nwell-1)) then
             write(stderr,'(1x,a,1x,a,1x,i2)')
     :      'XZREC: failed to find well intersection',
     :      'with interface',iint
            fail = .true.
            return
         end if

c        calculate x-coordinate at this z
         J = 1
260      IF(ztrak.ge.zwell(J-1)) THEN
            J = J + 1
            GO TO 260
         END IF
         J = J - 1
         xtrak = w0(j) + w1(j) * ztrak
     :                 + w2(j) * ztrak**2
     :                 + w3(j) * ztrak**3


c        calculate depth of interface at this x
         J = 1
270      IF(xtrak.gt.XINT(iint,J)) THEN
            J = J + 1
            GO TO 270
         END IF
         J = J - 1
         zintk = a0(iint,j) + a1(iint,j) * xtrak  
     :                      + a2(iint,j) * xtrak**2
     :                      + a3(iint,j) * xtrak**3

         if(abs(ztrak-zintk).le.ds) then
c           approaching interface
c           compute approx x-coord of intersection
            xcross(iint) = xtrak + dxdz * (zintk - ztrak)
            J = 1
290         IF(xtrak.gt.XINT(iint,J)) THEN
               J = J + 1
               GO TO 290
            END IF
            J = J - 1
c           compute z-coord of intersection
            zcross(iint) = a0(iint,j) + a1(iint,j) * xtrak  
     :                         + a2(iint,j) * xtrak**2
     :                         + a3(iint,j) * xtrak**3
            iint = iint + 1
         end if

         go to 100

      end if

c     if(iint.le.nint) then
c        couldn't find all intersection points of well
c        with interfaces
c        try reducing dsmax in parameter statement above
c        write(stderr,'(1x,a)')
c    :   'XZREC: failed to find all well-interface intersections'
c        fail = .true.
c        return
c     end if



      return

      end

c------------------------------------------------------------------
      subroutine setvar(p,logic1,logic2,logic3,logic4,
     :                  c1,c1cap,c2,c2cap,c3,c3cap)
c     Sets logical variables given character input.
      
      character p*3, c1*1, c2*1, c3*1, c1cap*1, c2cap*1, c3cap*1

      logical logic1, logic2, logic3, logic4
   
cc    Local variables:
c     J   counter
      integer  j

      logic1 = .false.
      logic2 = .false.
      logic3 = .false.

      do 200 j = 1,  3
         if(p(j:j).eq.c1.or.p(j:j).eq.c1cap) then
            logic1 = .true.
            logic4 = .true.
         else if(p(j:j).eq.c2.or.p(j:j).eq.c2cap) then
            logic2 = .true.
            logic4 = .true.
         else if(p(j:j).eq.c3.or.p(j:j).eq.c3cap) then
            logic3 = .true.
         end if
200      continue

         return
         end

c----------------------------------------------------------------------

      subroutine layer(x,z,slayer,inside)
c     Given coordinates of source point, computes layer in which
c     source is located

      real       x,            z
      integer    slayer
      logical    inside

      INTEGER    MAXINT,       MAXSPL,         MXSPM1,
     :           MAXN

      PARAMETER ( MAXINT = 20,
     :            MAXSPL = 51,
     :            MAXN   = 40)

      PARAMETER ( MXSPM1 = MAXSPL - 1)

      REAL        XINT(0:MAXINT,MAXSPL),     ZINT(0:MAXINT,MAXSPL),
     :            A0(0:MAXINT,MXSPM1),       A1(0:MAXINT,MXSPM1),
     :            A2(0:MAXINT,MXSPM1),       A3(0:MAXINT,MXSPM1),
     :            SIGN(0:MAXN)

      INTEGER     NPTS(0:MAXINT),   NINT,      NORDER(MAXN)

      COMMON /A/   XINT,          ZINT,
     :             A0,            A1,        A2,          A3,
     :             SIGN,
     :             NPTS,          NINT,      NORDER


cc    Local variables:
c     IINT    interface counter
c     J       counter
c     ZINTK   depth of interface IINT at x-coordinate of source

      integer  iint,  j
      real     zintk


      inside = .true.

      iint = 1
5     if(x.le.xint(iint,1).or.x.gt.xint(iint,npts(iint))) then
c        source outside model
         inside = .false.
         return
      end if

c     find depth of interface at this source location
      J = 1
10    IF(x.gt.XINT(iint,J)) THEN
         J = J + 1
         GO TO 10
      END IF
      J = J - 1
c     interface depth...
      zintk = a0(iint,j) + a1(iint,j) * x
     :                   + a2(iint,j) * x**2
     :                   + a3(iint,j) * x**3

      if(zintk.gt.z) then
c        source above interface
         slayer = iint
      else
c        source below interface
         iint = iint + 1
         if(iint.gt.nint) then
c           source below last interface
            slayer = nint + 1
         else
c           next interface
            go to 5
         end if
      end if

      return
      end

c----------------------------------------------------------------------

      SUBROUTINE TRIDI(N,C,D,E,B,SGNDET,INFO)

c     Tridi solves the equation JX = B for X.  J is the tridiagonal
c     jacobian whose bands here are C (subdiagonal), D (diagonal),
c     and E (superdiagonal). The solution is returned as B.
c     See reference, eqns. (11) and (14).
c     The code is from a LINPAK listing.
c     REFERENCE : LINPACK USER'S GUIDE,  J.J. DONGARRA et al,
c                 SIAM, 1979.

      INTEGER   N,        INFO

      REAL      C(N),     D(N),     E(N),      B(N),
     :          SGNDET

      INTEGER   K,        KB,       KP1,       NM1,       NM2

      REAL      T


c     initialising the sign of the determinant
      SGNDET = 1.

      INFO = 0
      C(1) = D(1)
      NM1 = N - 1
      IF(NM1.LT.1) GO TO 40
         D(1) = E(1)
         E(1) = 0.0E0
         E(N) = 0.0E0

         DO 30  K = 1,  NM1
            KP1 = K + 1
            IF(ABS(C(KP1)).LT.ABS(C(K))) GO TO 10
c              sign changes
               SGNDET = - SGNDET
               T = C(KP1)
               C(KP1) = C(K)
               C(K) = T
               T = D(KP1)
               D(KP1) = D(K)
               D(K) = T
               T = E(KP1)
               E(KP1) = E(K)
               E(K) = T
               T = B(KP1)
               B(KP1) = B(K)
               B(K) = T
10          CONTINUE

            IF(C(K).NE.0.0E0) GO TO 20
               INFO = K
               GO TO 100
20          CONTINUE

            T = -C(KP1)/C(K)
            C(KP1) = D(KP1) + T*D(K)
            D(KP1) = E(KP1) + T*E(K)
            E(KP1) = 0.0E0
            B(KP1) = B(KP1) + T*B(K)
30          CONTINUE
40    CONTINUE


      IF(C(N).NE.0.0E0) GO TO 50
         INFO = N
         GO TO 90
50    CONTINUE

      NM2 = N - 2
      B(N) = B(N)/C(N)
      IF(N.EQ.1) GO TO 80
         B(NM1) = (B(NM1) - D(NM1)*B(N))/C(NM1)
         IF(NM2.LT.1) GO TO 70
            DO 60  KB = 1,  NM2
               K = NM2 - KB + 1
               B(K) = (B(K) - D(K)*B(K+1) - E(K)*B(K+2))/C(K)
60             CONTINUE
70       CONTINUE
80    CONTINUE
90    CONTINUE
100   CONTINUE


      RETURN
      END

c-----------------------------------------------------------------------

      subroutine wellx(x,z,xcross,lref,norder,n,nnew,nint,cross,
     :                 icross,iint,iintp1,laysrc,left,right,
     :                 zwell,nwell,w0,w1,w2,w3)

c     Checks to see if ray intersects well.

      integer     n,  nnew,   nint,  icross,  iint,  iintp1,  
     :            lref,       nwell,  laysrc
      integer     norder(n+1)

      real        x(0:n+1),    z(0:n+1),  xcross(0:nint),
     :            zwell(0:*),  w0(*),     w1(*),   w2(*),   w3(*)

      logical     cross,       left,      right

cc    Local variables
      real        xw,  dxl,    dxu
      integer     i,   ip1,    j


      do 50 i = lref,  nnew-1
         ip1 = i + 1

         if(i.eq.0) then

c           This only occurs for direct wave - first ray segment
c           Calculate x-coord. of well at z(1)   
            if(z(1).ge.zwell(nwell-1)) then
c              ray hit last interface below where well did
               j=nwell-1
               go to 15
            end if
            j = 1
10          if(z(1).ge.zwell(j-1)) then
               j = j + 1
               go to 10
            end if
            j = j - 1
            if(j.eq.0) then
c              curved upper surface - ray hitting above z(0)
c              use first well segment
               j = 1
            end if
15          xw = w0(j) + w1(j) * z(1) + 
     :           w2(j) * z(1) * z(1) + w3(j) * z(1)**3

            if(left.and.(x(1)-xw).ge.0.) then
c              crossing
               cross = .true.
               iint = laysrc
               iintp1 = laysrc - 1
               icross = 0
               return
            else if(right.and.(x(1)-xw).le.0.) then
c              crossing
               cross = .true.
               iint = laysrc
               iintp1 = laysrc - 1
               icross = 0
               return
            else
c              look for intersection on later ray segments
            end if
            
         else

            dxl = x(i) - xcross(norder(i))
            dxu = x(ip1) - xcross(norder(ip1))
            if(dxl.eq.0.) then
c              crossing
               cross = .true.
               iint = norder(i)
               iintp1 = norder(i+1)
               icross = i
               return
            end if
            if(dxu/dxl.le.0.) then
c              crossing
               cross = .true.
               iint = norder(i)
               iintp1 = norder(i+1)
               icross = i
               return
            end if

         end if

50       continue

      cross = .false.

      return
      end

c--------------------------------------------------------------

      subroutine srcpos(xs,zs,zwell,xwell0,w0,w1,w2,w3,left,right)
c     Checks to see if source is to the left or right of the
c     receiver well.

      real xs, zs, zwell(0:*), xwell0, w0(*), w1(*), w2(*), w3(*)

      logical   left,  right

cc    Local variables
      integer j
      real xw


c     find x coord. of well at source depth
      if(zs.lt.zwell(0)) then
c        source located above top of receiver well (due to topography)
         if(xs.lt.xwell0) then
c           source to left of well
            left = .true.
            right = .false.
         else
c           source to right of well
            left = .false.
            right = .true.
         end if
         return
      end if

      j = 1
10    if(zs.ge.zwell(j-1)) then
         j = j + 1
         go to 10
      end if
      j = j - 1
      xw = w0(j) + w1(j) * zs + w2(j) * zs * zs + w3(j) *zs * zs * zs

      if((xw-xs).gt.0.) then
          left = .true.
          right = .false.
c         source to left of well
      else
          left = .false.
          right = .true.
c         source to right of well
      end if

      return
      end

c-------------------------------------------------

      subroutine updown(up,down,beta,xs,zs,slayer,
     :          nint,xcross,zcross,pi)

c     If a ray is going up from the source (as defined by takeoff angle)
c     but first strikes an interface which lies below the source (at
c     the source location) then it is considered
c     a downgoing ray.  This can happen for curvy layers.  Similarly a ray
c     going down can hit an interface above the source first.  If so, it
c     is considered upgoing.
c     Example: A source is located between interfaces 1 and 2.  The ray
c     leaves the source going up.  It hits interface 2 first.  This is
c     taken to be a downgoing ray by the program.
c     This subroutine checks for this kind of pathology.

      logical  up,      down
      real     beta,    xs,   zs,  pi,  xcross(0:*),  zcross(0:*)
      integer  slayer,  nint

cc    Local variables
      integer  i
      real     mr,    cr,   zr

      if(beta.eq.0.) then
c        ray is vertical
         return
      end if
      
c     coeffs of eqn of straight line leaving source at angle beta
      if(abs(beta).eq.90.) then
         mr = 0.
      else
         if(up) then
            mr = -1. / tan(pi*beta/180.)
         else
            mr = 1. / tan(pi*beta/180.)
         end if
      end if
      cr = zs - mr*xs

      i = 0
      zr = mr * xcross(i) + cr

c     next cases occur when takeoff angle is outside range -90 to 90.
      if(zr.gt.zs.and.up) then
         return
      end if
      if(zr.lt.zs.and.down)then
         return
      end if

100   if(zr.le.zcross(i)) then
         if(i.le.slayer) then
            up = .true.
            down = .false.
         else
            up = .false.
            down= .true.
         end if
         return
      else
         i = i + 1
         if(i.gt.nint) return
         zr = mr * xcross(i) + cr
         if(zr.ge.zs.and.up) then
            return
         end if
         if(zr.le.zs.and.down)then
            return
         end if
         go to 100
      end if

      return
      end

c------------------------------------------------------------------

      subroutine setdir(left,up,down,bold,beta,sign,xs,zs,
     :           slayer,nint,xcross,zcross,pi,n,np1,
     :           norder,v,vel,irefl,maxevt,ievent,evtype)

c     Sets the order of intersections for direct waves (this
c     may change with takeoff angle).

      integer    nint,  n,  np1,  maxevt,  ievent,  slayer,
     :           norder(*), irefl(maxevt,0:*)

      real       bold,        beta,  xs,  zs,  pi,
     :           sign(0:*),   xcross(0:nint),  zcross(0:nint),
     :           v(*),        vel(0:nint+1)

      character evtype*1

      logical    left,  up,  down

cc    Local variables
      integer  i,  k

c     store beta (beta is rotated for direct waves)
      bold = beta
      if(evtype.eq.'h') go to 50

      if(left) then
c        source to left of well
         if(beta.le.0.) then
            up = .true.
            down = .false.
            beta = beta + 90.
            sign(0) = 1.
         else
            up = .false.
            down = .true.
            beta = 90. - beta
            sign(0) = -1.
         end if
      else
c        source to right of well
         if(beta.le.0.) then
            up = .false.
            down = .true.
            beta = - beta - 90.
            sign(0) = -1.
         else
            up = .true.
            down = .false.
            beta = beta - 90.
            sign(0) = 1.
         end if
      end if
         
c     check for pathology...
      call updown(up,down,beta,xs,zs,
     :            slayer,nint,xcross,zcross,pi)

50    continue

      if(up) then
c        ray is upgoing
c        set number of intersections
         n = slayer - 1
         np1 = n + 1

c        set order, velocities, etc.
         do 10 i = 1,  n
            k = slayer - i
            norder(i) = k
            sign(i) = 1.
            v(i) = vel(k+1)
10          continue
         v(n+1) = vel(1)
         norder(n+1) = 0

c        set this to an invalid reflector so that sub RAYDAT will
c        not compute a reflection coefficient
         irefl(ievent,1) = -1
      else
c        ray is going down
c        set number of intersections
         n = nint - slayer
         np1 = n + 1

c        set order, velocities, etc.
         do 20 i = 1,  n
            k = slayer + i - 1
            norder(i) = k
            sign(i) = -1.
            v(i) = vel(k)
20          continue
         v(n+1) = vel(nint)
         norder(n+1) = nint

c        set this to an invalid reflector so that sub RAYDAT will
c        not compute a reflection coefficient
         irefl(ievent,1) = -1
      end if

      return
      end
c----------------------------------------------------------------

      subroutine chkref(is,ifirst,ilast,nrefls,valid)

c     Checks that reflection event read from param1 is valid.

      integer  is,    ifirst,   ilast,   nrefls
      logical  valid

cc    Local variables
      integer  nby2,  n

      if(ilast.eq.0) then
         nby2 = ( nrefls - 1 ) / 2
      else
         nby2 = nrefls / 2
      end if
      n = 2 * nby2
      if(n.eq.nrefls) then
c        even number of reflections
         if(is.gt.ifirst) then
            valid = .true.
         else
            valid = .false.
         end if
      else
c        odd number of reflections
         if(is.le.ifirst) then
            valid = .true.
         else
            valid = .false.
         end if
      end if

      return
      end
c------------------------------------------------------------------

      subroutine wcoord(w0,w1,w2,w3,xr1,zr1,xr2,zr2,xw1,zw1,
     :           xw2,zw2,zwell,nwell,x1,z1,fail,
     :           zmin,zmax,deltax,deltaz,d)

c     Determines coordinates where ray intersects well.

      integer  nwell
      real     zwell(0:nwell-1),
     :         w0(nwell), w1(nwell), w2(nwell), w3(nwell),
     :         xr1,    xr2,     zr1,   zr2,  xw1,  xw2,
     :         zw1,    zw2,     x1,    z1,   zmin, zmax,
     :         deltax, deltaz,  d

      logical fail

c     Local variables
      real     soln,   small,   eps,   sr,   sw,   cr,   cw,
     :         x0,     z0,      fz,    dfdz

      integer   maxit,  j,       iter

      parameter(soln  = 1.,
     :          maxit = 10,
     :          small = .1,
     :          eps   = .00001)

      fail = .false.


      if(abs(zr2-zr1).le.small) then
c        ray is horizontal
c        evaluate x-coord. of well at this depth
         z1 = zr2
c        find out which segment of well this point lies on
         J = 1
10       IF(z1.ge.zwell(J-1)) THEN
            J = J + 1
            GO TO 10
         END IF
         J = J - 1
         x1 = w0(j) + w1(j)*z1 + w2(j)*z1*z1 + w3(j)*z1*z1*z1
         deltax = x1 - xr1
         deltaz = z1 - zr1
         d = sqrt( deltax*deltax + deltaz*deltaz )
         return
      end if


c     calculate eqn of ray segment
c     first the slope...
      sr = ( xr2 - xr1 ) / ( zr2 - zr1 )
c     intercept...  
      cr = ( xr1*zr2 - xr2*zr1 ) / ( zr2 - zr1 ) 

c     now do straight line that cuts interfaces where well does...
c     slope
      sw = ( xw2 - xw1 ) / ( zw2 - zw1 )
c     intercept
      cw = ( xw1*zw2 - xw2*zw1 ) / ( zw2 - zw1 )

c     where these two lines intersect will be first guess in newton's mthd.
c     if well is a straight line then this will be the true intersection

      if((sr-sw).eq.0.) then
c        lines are parallel
         fail = .true.
         return
      end if

      z0 = ( cw - cr ) / ( sr - sw )
      x0 = sr * z0 + cr
c     evaluate the function and its derivative
      z1 = z0
      call fwell(z1,zwell,w0,w1,w2,w3,nwell,sr,cr,fz,dfdz,fail)
      if(fail) return

c     use newton's method to converge on soln
      iter = 1
100   if(abs(fz).gt.soln.and.abs(dfdz).gt.eps) then
         if(iter.le.maxit) then
            z1 = z0 - fz / dfdz
            call fwell(z1,zwell,w0,w1,w2,w3,nwell,sr,cr,fz,dfdz,
     :      fail)
            if(fail)return
            iter = iter + 1
            z0 = z1
         else
            fail = .true.
            return
         end if
         go to 100
      end if

      if(z1.lt.zmin.or.z1.gt.zmax) then
c        intersection outside well limits
         fail = .true.
      else
         x1 = sr * z1 + cr
         deltax = x1 - xr1
         deltaz = z1 - zr1
         d = sqrt( deltax*deltax + deltaz*deltaz )
      end if
 
      return
      end

*-----------------------------------------------------------------

      subroutine fwell(z0,zwell,w0,w1,w2,w3,nwell,sr,cr,fz,dfdz,
     :                 fail)

      integer  nwell

      real     zwell(0:nwell-1),  w0(nwell), w1(nwell), 
     :         w2(nwell),         w3(nwell),
     :         z0,   sr,   cr,   fz,   dfdz

      logical fail

cc    Local variables
      integer j

     
      if(z0.lt.zwell(0).or.z0.gt.zwell(nwell-1)) then
         fail = .true.
         return
      end if

c     find out which segment of well this point lies on
      J = 1
10    IF(z0.ge.zwell(J-1)) THEN
         J = J + 1
         GO TO 10
      END IF
      J = J - 1

c     now evaluate the function and its derivative
      fz   =  w0(j) + w1(j)*z0 + w2(j)*z0*z0 + w3(j)*z0*z0*z0
     :     -  cr    -    sr*z0

      dfdz =       w1(j)
     :     +  2. * w2(j) * z0
     :     +  3. * w3(j) * z0**2
     :     -  sr
  
      return
      end

*-----------------------------------------------------------------

      subroutine xzout(x,z,n,iunit)

c     Writes ray coordinates to listing file

      integer   n,       iunit
      real      x(0:n),  z(0:n)

cc    Local variables:
c     I     Counter

      integer i

      DO 10 I = 0,  N
         WRITE(iunit,'(2f10.2)') X(I),Z(I)
10       CONTINUE

      return
      end
c------------------------------------------------------

      subroutine output(firstr,lastr,zrec,nrec,trec,zend,t,nt,
     :           nrlayr,rayout,isrc,ievent)

      integer   firstr,      lastr,   nrec   nt,   rayout
      real      zrec(nrec),  trec(nrlayr),   zend(nt),  t(nt)

      integer   i,     ic
      real      fdummy

      do 10 i = 1,  nt
         write(rayout,*)isrc,firstr,lastr,t(i),
     :   fdummy,ievent,zend(i)
10       continue

      ic = 1
      do 987 i = firstr, lastr
         write(rayout,*)isrc,firstr,lastr,trec(ic),
     :   fdummy,ievent+5,zrec(i)
         ic=ic+1
987      continue


      return
      end

c-----------------------------------------------------------------
      subroutine wrtsht(firstr,lastr,zrec,nrec,trec,amprec,
     :           phsrec,caustc,nrlayr,shtout,isrc,ievent,unform,
     :           hdwave)

      integer   firstr,   lastr,   nrec,     shtout,
     :          nrlayr,   isrc,    ievent

      real      zrec(nrec),  trec(nrlayr),   amprec(nrlayr),
     :          phsrec(nrlayr)

      logical   caustc,   unform,   hdwave

      integer   irecv,   i
      real      fdummy

      fdummy = 0.0

      irecv = 1
      if(unform) then
         do 10 i = firstr, lastr
            write(shtout)isrc,i,i,trec(irecv),
     :      fdummy,ievent,zrec(i),
     :      amprec(irecv),phsrec(irecv),caustc,hdwave
            irecv=irecv+1
10          continue
      else
         do 20 i = firstr, lastr
            write(shtout,*)isrc,i,i,trec(irecv),
     :      fdummy,ievent,zrec(i),
     :      amprec(irecv),phsrec(irecv),caustc,hdwave
            irecv=irecv+1
20          continue
      end if


      return
      end

c------------------------------------------------------------------
      subroutine xzwell(x,z,xcross,zcross,lref,norder,n,nnew,nint,fail,
     :           icross,iint,iintp1,laysrc,left,right,
     :           zwell,nwell,w0,w1,w2,w3,xw,zw,deltax,deltaz,d,icp1)

c     Checks to see if ray intersects well and, if so, calcuates
c     the coordinates of the intersection point.

      integer  n,  nnew,   nint,  icross,  iint,  iintp1,  
     :         lref,       nwell,  laysrc, icp1,  norder(n+1)

      real     x(0:n+1),   z(0:n+1),  xcross(0:nint), zcross(0:nint),
     :         zwell(0:*), w0(*),     w1(*),   w2(*), w3(*),
     :         deltax(*),  deltaz(*), d(*)

      logical  fail,       left,      right

      logical  cross

      if(nnew.le.lref) then
c        ray did not reach target reflection
         fail = .true.
         return
      end if

c     last intersection occurred after reflection from target
c     look to see if ray intersects well

      call wellx(x,z,xcross,lref,norder,n,nnew,nint,
     :cross,icross,iint,iintp1,laysrc,left,right,
     :zwell,nwell,w0,w1,w2,w3)

      if(.not.cross) then
c        ray does not cross well
         fail = .true.
         return
      end if

c     ray crosses well, now look for coordinates of the crossing
      icp1 = icross + 1
      call wcoord(w0,w1,w2,w3,x(icross),z(icross),
     :x(icp1),z(icp1),xcross(iint),zcross(iint),xcross(iintp1),
     :zcross(iintp1),zwell,nwell,xw,zw,fail,zwell(0),zcross(nint),
     :deltax(icp1),deltaz(icp1),d(icp1))

      return
      end

c----------------------------------------------------------------------
      subroutine tinteg(x1in,z1in,irfrct,vref,x2in,z2in,t,xint,
     :           a0,a1,a2,a3,maxint,maxspl,mxspm1)

c     Integrates traveltime along refractor.

      real  XINT(0:MAXINT,MAXSPL),     
     :      A0(0:MAXINT,MXSPM1),       A1(0:MAXINT,MXSPM1),
     :      A2(0:MAXINT,MXSPM1),       A3(0:MAXINT,MXSPM1)

cc    Local variables
      real  ztrak,    xtrak,  x1,  z1,  x2,  z2,  dxsqd,
     :      dx1,      dx2,    dx,  dxby10,   dz,  zold,   d

      integer  j1,  j2,  j

      t = 0.

      if(x2in.eq.x1in) return

c     work with x2>x1
      if(x2in.lt.x1in) then
         x1 = x2in
         x2 = x1in
         z1 = z2in
         z2 = z1in
      else
         x2 = x2in
         x1 = x1in
         z2 = z2in
         z1 = z1in
      end if

        

c     find which section of spline x1 and x2 are on
      J1 = 1
50    IF(x1.gt.XINT(irfrct,J1)) THEN
         J1 = J1 + 1
         GO TO 50 
      END IF
      J1 = J1 - 1

      J2 = J1
60    IF(x2.gt.XINT(irfrct,J2)) THEN
         J2 = J2 + 1
         GO TO 60 
      END IF
      J2 = J2 - 1

c     use about 10 points per spline section for integration...
      dx1 = 0.1 * ( x2 - x1 ) / ( J2 - J1 + 1 )

c     but don't use less than 10 points
      dx2 = 0.1 * (x2 - x1)
      dx = min(dx1,dx2)
      dxby10 = dx / 10.
      dxsqd = dx * dx

      xtrak = x1 + dx
      j = j1
      d = 0.
      zold = z1
100   if(xtrak.le.(x2+dxby10)) then

110      IF(xtrak.gt.XINT(irfrct,J)) THEN
            J = J + 1
            GO TO 110
         END IF
         J = J - 1

         ztrak = a0(irfrct,j) + a1(irfrct,j) * xtrak  
     :                        + a2(irfrct,j) * xtrak**2
     :                        + a3(irfrct,j) * xtrak**3

         dz = ztrak - zold
         d = d + sqrt( dxsqd + dz*dz )

         xtrak = xtrak + dx

         zold = ztrak
         go to 100

      end if

      t = d / vref

      return
      end

c------------------------------------------------------------------
@
