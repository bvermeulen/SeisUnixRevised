head	1.12;
access;
symbols;
locks; strict;
comment	@ * @;


1.12
date	2011.11.16.16.42.16;	author john;	state Exp;
branches;
next	1.11;

1.11
date	2011.10.20.21.08.50;	author john;	state Exp;
branches;
next	1.10;

1.10
date	2003.08.19.21.24.44;	author john;	state Exp;
branches;
next	1.9;

1.9
date	2001.11.12.18.03.40;	author john;	state Exp;
branches;
next	1.8;

1.8
date	2001.07.27.19.59.43;	author john;	state Exp;
branches;
next	1.7;

1.7
date	96.09.06.17.30.40;	author john;	state Exp;
branches;
next	1.6;

1.6
date	96.04.28.01.23.18;	author jkc;	state Exp;
branches;
next	1.5;

1.5
date	95.10.25.14.38.19;	author john;	state Exp;
branches;
next	1.4;

1.4
date	95.04.25.15.15.27;	author john;	state Exp;
branches;
next	1.3;

1.3
date	95.01.19.11.46.11;	author john;	state Exp;
branches;
next	1.2;

1.2
date	94.02.03.13.10.43;	author john;	state Exp;
branches;
next	1.1;

1.1
date	94.01.31.11.01.30;	author john;	state Exp;
branches;
next	;


desc
@swap bytes of various data types.
@


1.12
log
@checkpar() added
@
text
@/* Copyright (c) Colorado School of Mines, 2011.*/
/* All rights reserved.                       */

/* SWAPBYTES: $Revision: 1.10 $ ; $Date: 2003/08/19 21:24:44 $	*/

#include "par.h"

/*********************** self documentation **********************/
char *sdoc[] = {
" 									",
" SWAPBYTES - SWAP the BYTES of various  data types			",
" 									",
" swapbytes <stdin [optional parameters]  >stdout 			",
" 									",
" Required parameters:							",
" 	none								",
" 									",
" Optional parameters:							",
" in=float	input type	(float)					",
" 		=double		(double)				",
" 		=short		(short)					",
" 		=ushort		(unsigned short)			",
" 		=long		(long)					",
" 		=ulong		(unsigned long)				",
" 		=int		(int)					",
" 									",
" outpar=/dev/tty		output parameter file, contains the	",
"				number of values (n1=)			",
" 			other choices for outpar are: /dev/tty,		",
" 			/dev/stderr, or a name of a disk file		",
" 									",
" Notes:								",
" The byte order of the mantissa of binary data values on PC's and DEC's",
" is the reverse of so called \"big endian\" machines (IBM RS6000, SUN,etc.)",
" hence the need for byte-swapping capability. The subroutines in this code",
" have been tested for swapping between PCs and	big endian machines, but",
" have not been tested for DEC products.				",
" 									",
" Caveat:								",
" 2 byte short, 4 byte long, 4 byte float, 4 byte int,			",
" and 8 bit double assumed.						",
" 									",
NULL};

/* Credits:
 *	CWP: John Stockwell (Jan 1994)
 * Institut fur Geophysik, Hamburg: Jens Hartmann supplied byte swapping
 *					subroutines
 */


/**************** end self doc ***********************************/

int
main(int argc, char **argv)
{
	char *in;		/* input data type			*/
	char *outpar;		/* name of file holding output parfile	*/
	FILE *outparfp;		/* ... its file pointer			*/
	int n = 0;		/* number of input points	 	*/

	/* Hook up getpar */
	initargs(argc, argv);
	requestdoc(1);

	/* Get parameters and do set up */
	if (!getparstring("outpar", &outpar))	outpar = "/dev/tty" ;
	outparfp = efopen(outpar, "w");

	/* Get input and output data types */
	if (!getparstring("in", &in))		in = "float" ;
        checkpars();
	
	/* Check in and out to see if types supported */
	if ( !(	STREQ(in,"float") 
		|| STREQ(in,"double") 
		|| STREQ(in,"short") 
		|| STREQ(in,"ushort") 
		|| STREQ(in,"long")
		|| STREQ(in,"ulong")
		|| STREQ(in,"int")
		) 
	) err("%s is an unsupported type",in);
	
	/* Read floats, swap bytes */
	if (STREQ(in,"float"))  {
		float xf;

		/* Loop over data swapping bytes  */
		while (efread(&xf,FSIZE, 1, stdin)) {
			++n;
			swap_float_4(&xf);
			efwrite(&xf, FSIZE, 1, stdout);
		}

	/* Read doubles, swap bytes */
	} else if (STREQ(in,"double")) {
		double xd;

		/* Loop over data swapping bytes */
		while (efread(&xd, DSIZE, 1, stdin)) {
			++n;
			swap_double_8(&xd);
			efwrite(&xd, DSIZE, 1, stdout);
		}

	/* Read shorts, swap bytes */
	} else if (STREQ(in,"short")) {
		short xs;

		/* Loop over data converting integer to float */
		while (efread(&xs, sizeof(short), 1, stdin)) {
			++n;
			swap_short_2(&xs);
			efwrite(&xs, sizeof(short), 1, stdout);
		}

	/* Read unsigned shorts, swap bytes */
	} else if (STREQ(in,"ushort")) {
		unsigned short xus;

		/* Loop over data converting integer to float */
		while (efread(&xus, sizeof(unsigned short), 1, stdin)) {
			++n;
			swap_u_short_2(&xus);
			efwrite(&xus, sizeof(unsigned short), 1, stdout);
		}

	/* read longs; swap bytes */
	} else if (STREQ(in,"long")) {
		long xl;

		/* Loop over data converting integer to float */
		while (efread(&xl, sizeof(long), 1, stdin)) {
			++n;
			swap_long_4(&xl);
			efwrite(&xl, sizeof(long), 1, stdout);
		}
	
	/* read unsigned longs; swap bytes */
	} else if (STREQ(in,"ulong")) {
		unsigned long xul;

		/* Loop over data converting integer to float */
		while (efread(&xul, sizeof(unsigned long), 1, stdin)) {
			++n;
			swap_u_long_4(&xul);
			efwrite(&xul, sizeof(unsigned long), 1, stdout);
		}

	} else if (STREQ(in,"int")) {
		int xi;

		/* Loop over data converting integer to float */
		while (efread(&xi, sizeof(int), 1, stdin)) {
			++n;
			swap_int_4(&xi);
			efwrite(&xi, sizeof(int), 1, stdout);
		}
	
	}

	/* Make par file */
	fprintf(outparfp, "n=%d\n", n);

	return(CWP_Exit());
}
@


1.11
log
@added copyright statement
@
text
@d72 1
@


1.10
log
@19 Aug 2003
@
text
@d1 4
a4 1
/* SWAPBYTES: $Revision: 1.9 $ ; $Date: 2001/11/12 18:03:40 $	*/
@


1.9
log
@changed /dev/null /dev/tty
@
text
@d1 1
a1 1
/* SWAPBYTES: $Revision: 1.8 $ ; $Date: 2001/07/27 19:59:43 $	*/
d162 1
a162 1
	return EXIT_SUCCESS;
@


1.8
log
@27 July revision
@
text
@d1 1
a1 1
/* SWAPBYTES: $Revision: 1.7 $ ; $Date: 1996/09/06 17:30:40 $	*/
d24 1
a24 1
" outpar=/dev/null		output parameter file, contains the	",
d64 1
a64 1
	if (!getparstring("outpar", &outpar))	outpar = "/dev/null" ;
@


1.7
log
@fixed -Wall complaint
@
text
@d1 1
a1 1
/* SWAPBYTES: $Revision: 1.6 $ ; $Date: 1996/04/28 01:23:18 $	*/
d24 1
a24 1
" outpar=/dev/tty		output parameter file, contains the	",
d26 2
d64 1
a64 1
	if (!getparstring("outpar", &outpar))	outpar = "/dev/tty" ;
@


1.6
log
@Toralf's lint turned up:
"swapbytes.c", line 65: warning: outparfp set but not used in function main
"swapbytes.c", line 152: warning: n set but not used in function main
The reason for this is that the paragraph actually making the par file
was missing!
@
text
@d1 1
a1 1
/* SWAPBYTES: $Revision: 1.5 $ ; $Date: 1995/10/25 14:38:19 $	*/
d49 1
@


1.5
log
@changed bits to bytes in selfdoc.
@
text
@d1 1
a1 1
/* SWAPBYTES: $Revision: 1.4 $ ; $Date: 1995/04/25 15:15:27 $	*/
d155 5
a159 1
		return EXIT_SUCCESS;
@


1.4
log
@fixed RCS label
@
text
@d1 1
a1 1
/* SWAPBYTES: $Revision: 1.8 $ ; $Date: 94/08/25 15:00:32 $	*/
d35 2
a36 1
" 2 bit short, 4 bit long, 4 bit float, and 8 bit double assumed.	",
@


1.3
log
@small
@
text
@d1 1
a1 1
/* SWAPBYTES - swap the bytes of binary data */
@


1.2
log
@3 feb 94
@
text
@d22 1
d73 1
d141 10
@


1.1
log
@Initial revision
@
text
@d19 1
d21 1
a53 5
	float xf;		/* binary float				*/
	double xd;		/* binary double			*/
	short xs;		/* binary short int			*/
	long xl;		/* binary long int			*/

d69 1
d71 1
d77 1
d88 1
d99 1
d108 3
d112 7
d121 1
a128 2
		return EXIT_SUCCESS;
	}
d130 10
d141 2
@
