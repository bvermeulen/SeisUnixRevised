head	1.14;
access;
symbols;
locks; strict;
comment	@ * @;


1.14
date	2011.11.16.16.42.16;	author john;	state Exp;
branches;
next	1.13;

1.13
date	2011.10.20.21.08.50;	author john;	state Exp;
branches;
next	1.12;

1.12
date	2006.11.07.23.06.16;	author john;	state Exp;
branches;
next	1.11;

1.11
date	2006.06.21.17.46.22;	author john;	state Exp;
branches;
next	1.10;

1.10
date	2005.10.25.17.59.13;	author john;	state Exp;
branches;
next	1.9;

1.9
date	2005.04.08.19.26.22;	author john;	state Exp;
branches;
next	1.8;

1.8
date	2005.04.08.18.07.41;	author john;	state Exp;
branches;
next	1.7;

1.7
date	2005.04.06.18.05.05;	author john;	state Exp;
branches;
next	1.6;

1.6
date	2005.04.06.18.02.44;	author john;	state Exp;
branches;
next	1.5;

1.5
date	2005.03.15.16.44.11;	author john;	state Exp;
branches;
next	1.4;

1.4
date	2003.08.19.21.24.44;	author john;	state Exp;
branches;
next	1.3;

1.3
date	2001.11.12.18.03.40;	author john;	state Exp;
branches;
next	1.2;

1.2
date	2001.07.27.19.59.43;	author john;	state Exp;
branches;
next	1.1;

1.1
date	99.09.02.17.21.36;	author sbrands;	state Exp;
branches;
next	;


desc
@@


1.14
log
@checkpar() added
@
text
@/* Copyright (c) Colorado School of Mines, 2011.*/
/* All rights reserved.                       */

/* VEL2STIFF	version 1.0 Date: 8/3 1999				*/

#include "par.h"
#include "anisotropy.h"

/*********************** self documentation ******************************/
char *sdoc[] = {
" 									",
" VEL2STIFF - Transforms VELocities, densities, and Thomsen or Sayers   ",
"		parameters to elastic STIFFnesses 			",
" 									",
" vel2stiff  [Required parameters] [Optional Parameters] > stdout	",
" 									",
" Required parameters:							",
" vpfile=	file with P-wave velocities				",
" vsfile=	file with S-wave velocities				",
" rhofile=	file with densities					",
"									",
" Optional Parameters:							",
" epsfile=	file with Thomsen/Sayers epsilon			",
" deltafile=	file with Thomsen/Sayers delta			 	",
" gammafile=	file with Thomsen/Sayers gamma			 	",
" phi_file=	angle of axis of symmetry from vertical (radians)	",
"									",
" c11_file=c11_file     output filename for c11 values                  ",
" c13_file=c13_file     output filename for c13 values                  ",
" c15_file=c15_file     output filename for c15 values                  ",
" c33_file=c33_file     output filename for c33 values                  ",
" c35_file=c35_file     output filename for c35 values                  ",
" c44_file=c44_file     output filename for c44 values                  ",
" c55_file=c55_file     output filename for c55 values                  ",
" c66_file=c66_file     output filename for c66 values                  ",
" 									",
" paramtype=1  (1) Thomsen parameters, (0) Sayers parameters(see below) ",
" 									",
" nx=101	number of x samples 2nd (slow) dimension		",
" nz=101	number of z samples 1st (fast) dimension		",
" 									",
" Notes: 								",
" Transforms velocities, density and Thomsen/Sayers parameters		",
" epsilon, delta, and gamma into elastic stiffness coefficients.	",
" 									",
" If only P-wave, S-wave velocities and density is given as input,	",
" the model is assumed to be isotropic.					",
" 									",
" If files containing Thomsen/Sayers parameters are given, the model	",
" will be assumed to have VTI symmetry.		 			",
" 									",
" All input files  vpfile, vsfile, rhofile etc. are assumed to consist  ",
" only of C style binary floating point numbers representing the        ",
" corresponding  material values of vp, vs, rho etc. Similarly, the output",
" files consist of the coresponding stiffnesses as C style binary floats. ",
" If the output files are to be used as input for a modeling program,   ",
" such as suea2df, then further, the contents are assumed be arrays of  ",
" floating point numbers of the form of   Array[n2][n1], where the fast ",
" dimension, dimension 1, represents depth.                             ",

NULL};

/*
 *  Author:
 *  CWP: Sverre Brandsberg-Dahl 1999
 *
 *  Extended:
 *  CWP: Stig-Kyrre Foss 2001
 *  - to include the option to use the parameters by Sayers (1995) 
 *  instead of the Thomsen parameters
 *
 * Technical reference:
 * Sayers, C. M.: Simplified anisotropy parameters for transversely 
 * isotropic sedimentary rocks. Geophysics 1995, pages 1933-1935.
 *
 */
/**************** end self doc *******************************************/

Stiff2D spar;           /* stiffness tensor                     */

int
main(int argc, char **argv)
{
	int nx;			/* size of 2nd (slow) dimension */
	int nz;			/* size of 1st (fast) dimension */
	int ix,iz;		/* counters			*/
	int verbose;		/* verbose flag			*/
	int paramtype;		/* =1 Thomsen, =0 Sayers params	*/

        /* .. stiffness values */
        float **c11=NULL;       /* stiffness c11                */
        float **c13=NULL;       /* stiffness c13                */
        float **c33=NULL;       /* stiffness c33                */
        float **c44=NULL;       /* stiffness c44                */
        float **c66=NULL;       /* stiffness c66                */
        float **c15=NULL;       /* stiffness c15                */
        float **c35=NULL;       /* stiffness c15                */
        float **c55=NULL;       /* stiffness c15                */

	float **vp=NULL;	/* P-wave speed			*/	
	float **vs=NULL;	/* S-wave speed			*/
	float **rho=NULL;	/* density			*/

	float **eps=NULL;	/* Thomson/Sayers epsilon	*/ 
	float **delta=NULL;	/* Thomson/Sayers delta		*/
	float **gamma=NULL;	/* Thomsen/Sayers gamma		*/	
	double **phi=NULL;	/* angles of axis of symmetry	*/	


	/* Input files */
	char *vpfile="";	/* P-wavespeed filename */
	FILE *vpfp=NULL;	/* ... its file pointer */
	char *vsfile="";	/* S-wavespeed filename */
	FILE *vsfp=NULL;	/* ... its file pointer */
	char *rhofile="";	/* density filename	*/
	FILE *rhofp=NULL;	/* ... its file pointer */
	char *epsfile="";	/* epsilon filename 	*/
	FILE *epsfp=NULL;	/* ... its file pointer */
	char *deltafile="";	/* delta filename	*/
	FILE *deltafp=NULL;	/* ... its file pointer */
	char *gammafile="";	/* gamma filename	*/
	FILE *gammafp=NULL;	/* ... its file pointer */
	char *phifile="";	/* phi filename	*/
	FILE *phifp=NULL;	/* ... its file pointer */


        /* ... output files */
        char *c11_file;         /* c11 filename         */
        FILE *c11fp=NULL;       /* ... its file pointer */
        char *c13_file;         /* c13 filename         */
        FILE *c13fp=NULL;       /* ... its file pointer */
        char *c33_file;         /* c33 filename         */
        FILE *c33fp=NULL;       /* ... its file pointer */
        char *c44_file;         /* c44 filename         */
        FILE *c44fp=NULL;       /* ... its file pointer */
        char *c66_file;         /* c66 filename         */
        FILE *c66fp=NULL;       /* ... its file pointer */
        char *c15_file;         /* c15 filename         */
        FILE *c15fp=NULL;       /* ... its file pointer */
        char *c35_file;         /* c35 filename         */
        FILE *c35fp=NULL;       /* ... its file pointer */
        char *c55_file;         /* c55 filename         */
        FILE *c55fp=NULL;       /* ... its file pointer */


	/* Hook up getpar */
	initargs(argc, argv);
	requestdoc(1);


	/* Get required parameters */
	MUSTGETPARSTRING("vpfile",  &vpfile );
	MUSTGETPARSTRING("vsfile",  &vsfile );
	MUSTGETPARSTRING("rhofile", &rhofile);


	/* Get parameters */
	if (!getparint("nx",	&nx))	nx = 101;
	if (!getparint("nz",	&nz))	nz = 101;
	if (!getparint("verbose", &verbose)) verbose = 1;
	if (!getparint("paramtype",&paramtype)) paramtype = 1;
	getparstring("epsfile",  &epsfile);
	getparstring("deltafile",&deltafile);
	getparstring("gammafile",&gammafile);
	getparstring("phifile",&phifile);
	

	/* Allocate space */
	vp = alloc2float(nz,nx);
	vs = alloc2float(nz,nx);
	rho = alloc2float(nz,nx);
	eps = alloc2float(nz,nx);
	delta = alloc2float(nz,nx);
	gamma = alloc2float(nz,nx);
	phi = alloc2double(nz,nx);

	/* Output arrays */
        c11 = ealloc2float(nz,nx);
        c13 = ealloc2float(nz,nx);
        c33 = ealloc2float(nz,nx);
        c44 = ealloc2float(nz,nx);
        c66 = ealloc2float(nz,nx);
        c15 = ealloc2float(nz,nx);
        c35 = ealloc2float(nz,nx);
        c55 = ealloc2float(nz,nx);

	/* Read mandatory input files */
	vpfp = efopen(vpfile,"r");
	if (efread(*vp, sizeof(float), nz*nx, vpfp)!=nz*nx)
	  err("error reading vpfile=%s!\n",vpfile);

	vsfp = efopen(vsfile,"r");
	if (efread(*vs, sizeof(float), nz*nx, vsfp)!=nz*nx)
	  err("error reading vsfile=%s!\n",vsfile);

	rhofp = efopen(rhofile,"r");
	if (efread(*rho, sizeof(float), nz*nx, rhofp)!=nz*nx)
	  err("error reading rhofile=%s!\n",rhofile);

	fclose(vpfp);
	fclose(vsfp);
	fclose(rhofp);


	/* Optional files if anisotropic model */
	/* See if there is an input file for epsilon */
	if (*epsfile!='\0') {
	  if((epsfp=fopen(epsfile,"r"))==NULL)
		err("cannot open epsfile=%s",epsfile);
	  if (fread(eps[0],sizeof(float),nx*nz,epsfp)!=nx*nz)
		err("error reading epsilonfile=%s",epsfile);
	  fclose(epsfp);
	} else {
		if(verbose)
		  warn("No input file for epsilon, setting epsilon to zero!!!");

		/* set epsilon to zero */
		memset((void *) eps[0], 0 , nx*nz*FSIZE);
	}


	/* see if there is an input file for delta */
	if (*deltafile!='\0') {
	  if((deltafp=fopen(deltafile,"r"))==NULL)
		err("cannot open deltafile=%s",deltafile);
	  if (fread(delta[0],sizeof(float),nx*nz,deltafp)!=nx*nz)
		err("error reading deltafile=%s",deltafile);
	  fclose(deltafp);
	} else {
	  if(verbose) warn("No input file for delta, setting delta to zero!!!");

		/* Setting delta to zero */
		memset((void *) delta[0], 0 , nx*nz*FSIZE);
	}


	/* see if there is an input file for gamma */
	if (*gammafile!='\0') {
	  if((gammafp=fopen(gammafile,"r"))==NULL)
		err("cannot open gammafile=%s",gammafile);
	  if (fread(gamma[0],sizeof(float),nx*nz,gammafp)!=nx*nz)
		err("error reading gammafile=%s",gammafile);
	  fclose(gammafp);
	} else {
	  if(verbose) warn("No input file for gamma, setting gamma to zero!!!");
		/* Setting gamma to zero */
		memset((void *) gamma[0], 0 , nx*nz*FSIZE);
	}

	/* see if there is an input file for phi */
	if (*phifile!='\0') {
	  if((phifp=fopen(phifile,"r"))==NULL)
		err("cannot open phifile=%s",phifile);
	  if (fread(phi[0],sizeof(float),nx*nz,phifp)!=nx*nz)
		err("error reading phifile=%s",phifile);
	  fclose(phifp);
	} else {
	  if(verbose) warn("No input file for phi, setting phi to zero!!!");
		/* Setting phi to zero */
		memset((void *) phi[0], 0 , nx*nz*DSIZE);
	}

        /* Open output files */
        if( !getparstring("c11_file",&c11_file)) c11_file = "c11_file";
        c11fp = efopen(c11_file,"w");
        if( !getparstring("c13_file",&c13_file)) c13_file = "c13_file";
        c13fp = efopen(c13_file,"w");
        if( !getparstring("c33_file",&c33_file)) c33_file = "c33_file";
        c33fp = efopen(c33_file,"w");
        if( !getparstring("c44_file",&c44_file)) c44_file = "c44_file";
        c44fp = efopen(c44_file,"w");
        if( !getparstring("c66_file",&c66_file)) c66_file = "c66_file";
        c66fp = efopen(c66_file,"w");
        if( !getparstring("c15_file",&c15_file)) c15_file = "c15_file";
        c15fp = efopen(c15_file,"w");
        if( !getparstring("c35_file",&c35_file)) c35_file = "c35_file";
        c35fp = efopen(c35_file,"w");
        if( !getparstring("c55_file",&c55_file)) c55_file = "c55_file";
        c55fp = efopen(c55_file,"w");


        checkpars();
	/* Loop over gridpoints and do calculations */
	if (paramtype==1) {
		for(ix=0; ix<nx; ++ix){
			float b=0.0,c=0.0;	/* temporary variables */ 

			for(iz=0; iz<nz; ++iz){
				c33[ix][iz] = vp[ix][iz]*vp[ix][iz]*rho[ix][iz];
				c44[ix][iz] = vs[ix][iz]*vs[ix][iz]*rho[ix][iz];
				c11[ix][iz] = c33[ix][iz]*(1+2*eps[ix][iz]);
				c66[ix][iz] = c44[ix][iz]*(1+2*gamma[ix][iz]);
				c = c33[ix][iz]*(2*c44[ix][iz]*(1+delta[ix][iz])
					- c33[ix][iz]*(1+2*delta[ix][iz]));
				b = 2*c44[ix][iz];
				c13[ix][iz] = (-b+sqrt(b*b-4*c))/2;
                                c15[ix][iz] = 0.0;
                                c35[ix][iz] = 0.0;
                                c55[ix][iz] = c44[ix][iz];

			}

			for(iz=0; iz<nz; ++iz) { /* compute rotation */

				spar.a1111 = (double) c11[ix][iz];
                               	spar.a1133 = (double) c13[ix][iz];
                               	spar.a3333 = (double) c33[ix][iz];
                               	spar.a2323 = (double) c44[ix][iz];
                               	spar.a1212 = (double) c66[ix][iz];
                               	spar.a1113 = (double) c15[ix][iz];
                               	spar.a3313 = (double) c35[ix][iz];
                               	spar.a1313 = (double) c55[ix][iz];


                               	rottens2D(&spar,phi[ix][iz]);


                                c11[ix][iz] = (float) spar.a1111;
                                c13[ix][iz] = (float) spar.a1133;
                                c33[ix][iz] = (float) spar.a3333;
                                c44[ix][iz] = (float) spar.a2323;
                                c66[ix][iz] = (float) spar.a1212;
                                c15[ix][iz] = (float) spar.a1113;
                                c35[ix][iz] = (float) spar.a3313;
                                c55[ix][iz] = (float) spar.a1313;

                	}



		}


	} else {
		for(ix=0; ix<nx; ++ix){
			for(iz=0; iz<nz; ++iz){
				c33[ix][iz] = vp[ix][iz]*vp[ix][iz]*rho[ix][iz];
				c44[ix][iz] = vs[ix][iz]*vs[ix][iz]*rho[ix][iz];
				c11[ix][iz] = c33[ix][iz]*(1+2*eps[ix][iz]);
				c66[ix][iz] = c44[ix][iz]*(1+2*gamma[ix][iz]);
				c13[ix][iz] = (delta[ix][iz]+1)*c33[ix][iz]
							-2*c44[ix][iz];
                                c15[ix][iz] = 0.0;
                                c35[ix][iz] = 0.0;
                                c55[ix][iz] = c44[ix][iz];

			}

			for(iz=0; iz<nz; ++iz) { /* compute rotation */

                               	spar.a1111 = (double) c11[ix][iz];
                               	spar.a1133 = (double) c13[ix][iz];
                               	spar.a3333 = (double) c33[ix][iz];
                               	spar.a2323 = (double) c44[ix][iz];
                               	spar.a1212 = (double) c66[ix][iz];
                               	spar.a1113 = (double) c15[ix][iz];
                               	spar.a3313 = (double) c35[ix][iz];
                               	spar.a1313 = (double) c55[ix][iz];

                               	rottens2D(&spar,phi[ix][iz]);

				c11[ix][iz] = (float) spar.a1111;
                                c13[ix][iz] = (float) spar.a1133;
                                c33[ix][iz] = (float) spar.a3333;
                                c44[ix][iz] = (float) spar.a2323;
                                c66[ix][iz] = (float) spar.a1212;
                                c15[ix][iz] = (float) spar.a1113;
                                c35[ix][iz] = (float) spar.a3313;
                                c55[ix][iz] = (float) spar.a1313;
                	}


		}
	}

	/* Write the output files to disk */
        efwrite(*c11,sizeof(float),nz*nx,c11fp);
        efwrite(*c13,sizeof(float),nz*nx,c13fp);
        efwrite(*c33,sizeof(float),nz*nx,c33fp);
        efwrite(*c44,sizeof(float),nz*nx,c44fp);
        efwrite(*c66,sizeof(float),nz*nx,c66fp);
        efwrite(*c15,sizeof(float),nz*nx,c15fp);
        efwrite(*c35,sizeof(float),nz*nx,c35fp);
        efwrite(*c55,sizeof(float),nz*nx,c55fp);

	if(verbose){
		  warn("Output file for c11 parameter plane : %s ",c11_file);
	  	  warn("Output file for c13 parameter plane : %s ",c13_file);
	          warn("Output file for c33 parameter plane : %s ",c33_file);
	          warn("Output file for c44 parameter plane : %s ",c44_file);
	          warn("Output file for c66 parameter plane : %s ",c66_file);
	}


	/* Free workspace */
	free2float(vp);
	free2float(vs);
	free2float(rho);
	free2float(eps);
	free2float(delta);
	free2float(gamma);
	free2float(c11);
	free2float(c13);
	free2float(c33);
	free2float(c44);
	free2float(c66);

	return(CWP_Exit());	
}
@


1.13
log
@added copyright statement
@
text
@d282 1
@


1.12
log
@changed   memset(..., (int) '\0',...) to memset( ..., 0,...) on
the suggestion of Marion Zhu and Reg Beardsley
@
text
@d1 3
@


1.11
log
@clarification added to selfdoc regarding input and output data
formats.
@
text
@d215 1
a215 1
		memset((void *) eps[0], (int) '\0' , nx*nz*FSIZE);
d230 1
a230 1
		memset((void *) delta[0], (int) '\0' , nx*nz*FSIZE);
d244 1
a244 1
		memset((void *) gamma[0], (int) '\0' , nx*nz*FSIZE);
d257 1
a257 1
		memset((void *) phi[0], (int) '\0' , nx*nz*DSIZE);
@


1.10
log
@added anisotropy angle
@
text
@d49 9
d69 1
@


1.9
log
@mre
another cosmetic
@
text
@d4 1
d23 10
a32 5
" c11_file=c11_file	output filename for c11 values	 		",
" c13_file=c13_file	output filename for c13 values	 		",
" c33_file=c33_file	output filename for c33 values	 		",
" c44_file=c44_file	output filename for c44 values	 		",
" c66_file=c66_file	output filename for c66 values	 		",
d34 1
a34 1
" paramtype=1  (1) Thomsen parameters, (0) Sayers parameters(see below)",
d66 2
d77 9
a85 5
	float **c11=NULL;	/* stiffness c11		*/
	float **c13=NULL;	/* stiffness c13		*/
	float **c33=NULL;	/* stiffness c33		*/
	float **c44=NULL;	/* stiffness c44		*/
	float **c66=NULL;	/* stiffness c66		*/
d94 1
d110 2
d114 17
a130 11
	/* Output files */
	char *c11_file;		/* c11 filename		*/
	FILE *c11fp=NULL;	/* ... its file pointer */
	char *c13_file;		/* c13 filename		*/
	FILE *c13fp=NULL;	/* ... its file pointer */
	char *c33_file;		/* c33 filename		*/
	FILE *c33fp=NULL;	/* ... its file pointer */
	char *c44_file;		/* c44 filename		*/
	FILE *c44fp=NULL;	/* ... its file pointer */
	char *c66_file;		/* c66 filename		*/
	FILE *c66fp=NULL;	/* ... its file pointer */
d152 1
d162 1
a162 5
	c11 = alloc2float(nz,nx);
	c13 = alloc2float(nz,nx);
	c33 = alloc2float(nz,nx);
	c44 = alloc2float(nz,nx);
	c66 = alloc2float(nz,nx);
d164 9
d237 12
d250 17
a266 11
	/* open output file: */
	if( !getparstring("c11_file",&c11_file)) c11_file = "c11_file";
	c11fp = fopen(c11_file,"w");
	if( !getparstring("c13_file",&c13_file)) c13_file = "c13_file";
	c13fp = fopen(c13_file,"w");
	if( !getparstring("c33_file",&c33_file)) c33_file = "c33_file";
	c33fp = fopen(c33_file,"w");
	if( !getparstring("c44_file",&c44_file)) c44_file = "c44_file";
	c44fp = fopen(c44_file,"w");
	if( !getparstring("c66_file",&c66_file)) c66_file = "c66_file";
	c66fp = fopen(c66_file,"w");
d269 1
a269 1
	/* loop over gridpoints and do calculations */
d282 5
a286 1
			c13[ix][iz] = (-b+sqrt(b*b-4*c))/2;
d288 29
d318 2
d329 4
d334 25
d363 9
a371 5
	efwrite(*c11,sizeof(float),nz*nx,c11fp);
	efwrite(*c13,sizeof(float),nz*nx,c13fp);
	efwrite(*c33,sizeof(float),nz*nx,c33fp);
	efwrite(*c44,sizeof(float),nz*nx,c44fp);
	efwrite(*c66,sizeof(float),nz*nx,c66fp);
@


1.8
log
@added stuff to selfdoc
@
text
@d28 1
a28 1
" parameters=1  (1) Thomsen parameters, (0) Sayers parameters(see below)",
d67 1
a67 1
	int parameters;		/* =1 Thomsen, =0 Sayers params	*/
d127 1
a127 1
	if (!getparint("parameters",&parameters)) parameters = 1;
d225 1
a225 1
	if (parameters==1) {
@


1.7
log
@a
cosmetic
@
text
@d22 5
@


1.6
log
@cosmetic additional comments
@
text
@d29 3
a31 2
" Transforms velocities, density and Thomsen/Sayers parameters			",
" epsilon,delta and gamma into elastic stiffness coefficients.		",
d34 1
d62 1
a62 1
	int parameters;		/* additional parameters	*/
@


1.5
log
@vell2hh
vell
small typo.
@
text
@d9 1
a9 1
"              parameters to elastic STIFFnesses 			",
d11 1
a11 3
" vel2stiff  nx=  nz=  vpfile= vsfile= rhofile=  epsfile= 		",
"		deltafile= gammafile=  c11_file= c13_file= c33_file= 	",
"		c44_file=[] c66_file=[]					",
d19 3
a21 3
" epsfile=	file with Thomsen/Sayers epsilon		       	",
" deltafile=	file with Thomsen/Sayers delta		       	 	",
" gammafile=	file with Thomsen/Sayers gamma	       		 	",
d25 2
a26 2
" nx=101	number of x samples (2nd dimension)			",
" nz=101	number of z samples (1st dimension)			",
d29 1
a29 1
" Transforms velocities, density and Thomsen/Sayers parameters	      	",
d33 1
a33 1
" If files containing Thomsen/Sayers parameters are given, the model    ",
d39 1
a39 1
 *  Coded:
d56 47
a102 5
	int nx,nz,ix,iz,verbose;
	int parameters;
	float b,c;
	float **c11,**c13,**c33,**c44,**c66,**vp,**vs,**rho,
		**eps, **delta, **gamma;
d105 1
a105 12
	/* input files */
	char *vpfile="",  *vsfile="", *rhofile="", *epsfile="",
		*deltafile="", *gammafile="";
	FILE *vpfp,*vsfp,*rhofp,*epsfp,*deltafp,*gammafp;


	/* output files */
	char *c11_file, *c13_file, *c33_file, *c44_file, *c66_file;
	FILE *c11fp=NULL, *c13fp=NULL, *c33fp=NULL, *c44fp=NULL, *c66fp=NULL;


	/* hook up getpar */
d110 1
a110 1
	/* get required parameters */
d116 1
a116 1
	/* get parameters */
d126 12
a137 12
	/* allocate space */
	vp	= alloc2float(nz,nx);
	vs	= alloc2float(nz,nx);
	rho	= alloc2float(nz,nx);
	eps	= alloc2float(nz,nx);
	delta  = alloc2float(nz,nx);
	gamma  = alloc2float(nz,nx);
	c11	= alloc2float(nz,nx);
	c13	= alloc2float(nz,nx);
	c33	= alloc2float(nz,nx);
	c44	= alloc2float(nz,nx);
	c66	= alloc2float(nz,nx);
d140 1
a140 1
	/* read mandatory input files */
d158 2
a159 2
	/* optional files if aniostropic model */
	/* see if there is an input file for epsilon */
d218 27
a244 27
	if (parameters==1)
	  {
	    for(ix=0; ix<nx; ++ix){
	      for(iz=0; iz<nz; ++iz){
		c33[ix][iz] = vp[ix][iz]*vp[ix][iz]*rho[ix][iz];
		c44[ix][iz] = vs[ix][iz]*vs[ix][iz]*rho[ix][iz];
		c11[ix][iz] = c33[ix][iz]*(1+2*eps[ix][iz]);
		c66[ix][iz] = c44[ix][iz]*(1+2*gamma[ix][iz]);
		c = c33[ix][iz]*(2*c44[ix][iz]*(1+delta[ix][iz])-
				 c33[ix][iz]*(1+2*delta[ix][iz]));
		b = 2*c44[ix][iz];
		c13[ix][iz] = (-b+sqrt(b*b-4*c))/2;
	      }
	    }
	  }
	else
	  {
	    for(ix=0; ix<nx; ++ix){
	      for(iz=0; iz<nz; ++iz){
		c33[ix][iz] = vp[ix][iz]*vp[ix][iz]*rho[ix][iz];
		c44[ix][iz] = vs[ix][iz]*vs[ix][iz]*rho[ix][iz];
		c11[ix][iz] = c33[ix][iz]*(1+2*eps[ix][iz]);
		c66[ix][iz] = c44[ix][iz]*(1+2*gamma[ix][iz]);
		c13[ix][iz] = (delta[ix][iz]+1)*c33[ix][iz]-2*c44[ix][iz];
	      }
	    }
	  }
d246 1
a246 1
	/* write the output files to disk */
d252 6
a257 6
		if(verbose){
	  warn("Output file for c11 parameter plane : %s ",c11_file);
	  warn("Output file for c13 parameter plane : %s ",c13_file);
	  warn("Output file for c33 parameter plane : %s ",c33_file);
	  warn("Output file for c44 parameter plane : %s ",c44_file);
	  warn("Output file for c66 parameter plane : %s ",c66_file);
d261 1
a261 1
	/* free workspace */
@


1.4
log
@19 Aug 2003
@
text
@d8 1
a8 1
" VEL2STIFFb - Transforms VELocities, densities, and Thomsen or Sayers   ",
d11 1
a11 1
" vel2stiffb  nx=  nz=  vpfile= vsfile= rhofile=  epsfile= 		",
@


1.3
log
@changed /dev/null /dev/tty
@
text
@d245 1
a245 1
	return EXIT_SUCCESS;	
@


1.2
log
@27 July revision
@
text
@d8 2
a9 2
" VEL2STIFF - Transforms VELocities, densities, and Thomsen parameters	",
"		to elastic STIFFnesses 					",
d11 1
a11 1
" vel2stiff  nx=  nz=  vpfile= vsfile= rhofile=  epsfile= 		",
d21 6
a26 4
" epsfile=	file with Thomsen epsilon				",
" deltafile=	file with Thomsen delta				 	",
" gammafile=	file with Thomsen gamma				 	",
"									",
d31 1
a31 1
" Transforms velocities, density and Thomsen parameters			",
d35 2
a36 3
" If files containing Thomsen parameters are given, the model will be	",
" assumed to have VTI symmetry.		 				",
" 									",
d44 8
d59 1
d91 1
d95 1
a95 1

d189 4
a192 2
	for(ix=0; ix<nx; ++ix){
	  for(iz=0; iz<nz; ++iz){
d198 1
a198 1
				c33[ix][iz]*(1+2*delta[ix][iz]));
d201 14
a215 2
	}

@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/* VEL2STIFF    version 1.0 Date: 8/3 1999                               */
d7 8
a14 12
" 								        ",
" vel2stiff  nx=  nz=  vpfile=[] vsfile=[] rhofile=[]                   ",
"         epsfile=[] deltafile=[] gammafile=[]			        ",
" 	  c11_file=[] c13_file=[] c33_file=[] c44_file=[] c66_file=[]   ",
" 								        ",
" Transforms velocities, density and Thomsen parameters                 ",
" epsilon,delta and gamma into elastic stiffness coefficients.          ",
" If only P-wave, S-wave velocities and density is given as input,      ",
" the model is assumed to be isotropic.                                 ",
" If files containing Thomsen parameters are given the model will be    ",
" assumed to have VTI symmetry.                 		        ",
" 								        ",
d16 3
a18 3
" vpfile        file with P-wave velocities                             ",
" vsfile        file with S-wave velocities                             ",
" rhofile       file with densities                                     ",
d21 3
a23 3
" epsfile       file with Thomsen epsilon                               ",
" deltafile     file with Thomsen delta                                 ",
" gammafile     file with Thomsen gamma                                 ",
d28 9
a38 2
/**************** end self doc *******************************************/

d41 1
a41 1
 *  Sverre Brandsberg-Dahl 1999
d44 1
d52 1
a52 1
	       **eps, **delta, **gamma;
d57 1
a57 1
	     *deltafile="", *gammafile="";
d78 2
a79 2
	if (!getparint("nx",      &nx))      nx = 101;
	if (!getparint("nz",      &nz))      nz = 101;
d87 4
a90 4
	vp     = alloc2float(nz,nx);
	vs     = alloc2float(nz,nx);
	rho    = alloc2float(nz,nx);
	eps    = alloc2float(nz,nx);
d93 5
a97 5
	c11    = alloc2float(nz,nx);
	c13    = alloc2float(nz,nx);
	c33    = alloc2float(nz,nx);
	c44    = alloc2float(nz,nx);
	c66    = alloc2float(nz,nx);
d122 1
a122 1
	    err("cannot open epsfile=%s",epsfile);
d124 1
a124 1
	    err("error reading epsilonfile=%s",epsfile);
d127 5
a131 6
	  if(verbose) warn("No input file for epsilon, setting epsilon to zero!!!");
	  for(ix=0; ix<nx; ++ix){
	    for(iz=0; iz<nz; ++iz){
	      eps[ix][iz] = 0.0;
	    }
	  }
d138 1
a138 1
	    err("cannot open deltafile=%s",deltafile);
d140 1
a140 1
	    err("error reading deltafile=%s",deltafile);
d144 3
a146 5
	  for(ix=0; ix<nx; ++ix){
	    for(iz=0; iz<nz; ++iz){
	      delta[ix][iz] = 0.0;
	    }
	  }
d153 1
a153 1
	    err("cannot open gammafile=%s",gammafile);
d155 1
a155 1
	    err("error reading gammafile=%s",gammafile);
d159 2
a160 5
	  for(ix=0; ix<nx; ++ix){
	    for(iz=0; iz<nz; ++iz){
	      gamma[ix][iz] = 0.0;
	    }
	  }
d180 8
a187 8
	    c33[ix][iz] = vp[ix][iz]*vp[ix][iz]*rho[ix][iz];
	    c44[ix][iz] = vs[ix][iz]*vs[ix][iz]*rho[ix][iz];
	    c11[ix][iz] = c33[ix][iz]*(1+2*eps[ix][iz]);
	    c66[ix][iz] = c44[ix][iz]*(1+2*gamma[ix][iz]);
	    c = c33[ix][iz]*(2*c44[ix][iz]*(1+delta[ix][iz])-
			     c33[ix][iz]*(1+2*delta[ix][iz]));
	    b = 2*c44[ix][iz];
	    c13[ix][iz] = (-b+sqrt(b*b-4*c))/2;
d198 1
a198 1
    	if(verbose){
@
