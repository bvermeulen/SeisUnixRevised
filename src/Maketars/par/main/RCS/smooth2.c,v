head	1.17;
access;
symbols;
locks; strict;
comment	@ * @;


1.17
date	2011.11.16.16.42.16;	author john;	state Exp;
branches;
next	1.16;

1.16
date	2011.10.20.21.08.50;	author john;	state Exp;
branches;
next	1.15;

1.15
date	2010.01.25.21.05.26;	author john;	state Exp;
branches;
next	1.14;

1.14
date	2003.08.19.21.24.44;	author john;	state Exp;
branches;
next	1.13;

1.13
date	98.05.18.20.37.19;	author john;	state Exp;
branches;
next	1.12;

1.12
date	96.09.06.17.25.47;	author john;	state Exp;
branches;
next	1.11;

1.11
date	95.09.27.20.38.59;	author john;	state Exp;
branches;
next	1.10;

1.10
date	95.04.25.15.15.16;	author john;	state Exp;
branches;
next	1.9;

1.9
date	95.01.19.11.45.57;	author john;	state Exp;
branches;
next	1.8;

1.8
date	94.02.10.13.43.04;	author john;	state Exp;
branches;
next	1.7;

1.7
date	93.02.25.14.58.54;	author john;	state Exp;
branches;
next	1.6;

1.6
date	92.11.16.10.40.30;	author john;	state Exp;
branches;
next	1.5;

1.5
date	92.11.16.10.22.12;	author john;	state Exp;
branches;
next	1.4;

1.4
date	92.10.28.15.50.12;	author john;	state Exp;
branches;
next	1.3;

1.3
date	92.10.28.14.38.59;	author john;	state Exp;
branches;
next	1.2;

1.2
date	92.10.28.14.36.59;	author john;	state Exp;
branches;
next	1.1;

1.1
date	92.10.02.09.16.54;	author john;	state Exp;
branches;
next	;


desc
@smooth2.c --- smooth uniformly sampled data
@


1.17
log
@checkpar() added
@
text
@/* Copyright (c) Colorado School of Mines, 2011.*/
/* All rights reserved.                       */

/* SMOOTH2: $Revision: 1.15 $ ; $Date: 2010/01/25 21:05:26 $	*/

#include "par.h"

/*********************** self documentation ******************************/
char *sdoc[] = {
"									",
" SMOOTH2 --- SMOOTH a uniformly sampled 2d array of data, within a user-",
"		defined window, via a damped least squares technique	",
"									",
" smooth2 < stdin n1= n2= [optional parameters ] > stdout		",
"									",
" Required Parameters:							",
" n1=			number of samples in the 1st (fast) dimension	",
" n2=			number of samples in the 2nd (slow) dimension	",
"									",
" Optional Parameters:							",
" r1=0			smoothing parameter in the 1 direction		",
" r2=0			smoothing parameter in the 2 direction		",
" win=0,n1,0,n2		array for window range				",
" rw=0			smoothing parameter for window function		",
" efile=                 =efilename if set write relative error(x1) to	",
"				efilename				",
"									",
" Notes:								",
" Larger r1 and r2 result in a smoother data. Recommended ranges of r1 	", 
" and r2 are from 1 to 20.						",
"									",
" The file verror gives the relative error between the original velocity ",
" and the smoothed one, as a function of depth. If the error is		",
" between 0.01 and 0.1, the smoothing parameters are suitable. Otherwise,",
" consider increasing or decreasing the smoothing parameter values.	",
"									",
" Smoothing can be implemented in a selected window. The range of 1st   ",
" dimension for window is from win[0] to win[1]; the range of 2nd   	",
" dimension is from win[2] to win[3]. 					",
"									",
" Smoothing the window function (i.e. blurring the edges of the window)	",
" may be done by setting a nonzero value for rw, otherwise the edges	",
" of the window will be sharp.						",
" 									",
NULL};

/*
 *	Credits: 
 *		CWP: Zhen-yue Liu,
 *			adapted for par/main by John Stockwell 1 Oct 92
 *		Windowing feature added by Zliu on 16 Nov 1992
 */
/**************** end self doc *******************************************/

/* local definition */
#define EPS FLT_MIN

int
main(int argc, char **argv)
{
	int n1;		/* number of points in x1 (fast) dimension */
	int n2;		/* number of points in x1 (fast) dimension */
	int nmax;	/* max of n1 and n2 */
	int ix, iz;	/* counters */
	int *win=NULL;	/* 1d array defining the corners of smoothing window */
	float **v0=NULL;	/* array of input velocities */
	float **v=NULL;	/* array of output velocities */
	float **w=NULL;	/* intermediate array */
	float *errz=NULL;/* array of error estimates as a function of x1 */
	float *d=NULL, *e=NULL;	/* input arrays for subroutine tripd */
	float *f=NULL;	/* intermediate array */
	float r1;	/* smoothing parameter for x1 direction */
	float r2;	/* smoothing parameter for x2 direction */
	float rw;	/* smoothing parameter for window */
	float err0;	/* error variable */
	float vrms;	/* rms velocity */
	FILE *infp=stdin;	/* input file pointer */
	FILE *outfp=stdout;	/* output file pointer */
	FILE *errorfp=NULL;	/* error file pointer */
	char *efile="";	/* name of error file */
	
	/* hook up getpar */
	initargs(argc, argv);
	requestdoc(0);
	
	/* get parameters */
	if (!getparint("n1",&n1)) err("must specify n1!\n");
	if (!getparint("n2",&n2)) err("must specify n2!\n");
	if (!getparfloat("r1",&r1)) r1 = 0.;
	if (!getparfloat("r2",&r2)) r2 = 0.;
	
	/* scale the smoothing parameter */
	r1 = r1*r1*0.25;
	r2 = r2*r2*0.25;

	/* allocate space */
	nmax = (n1<n2)?n2:n1;
	win = alloc1int(4);
	v = alloc2float(n1,n2);
	v0 = alloc2float(n1,n2);
	w = alloc2float(n1,n2);
	errz = alloc1float(nmax);
	d = alloc1float(nmax);
	e = alloc1float(nmax);
	f = alloc1float(nmax);

	/* read velocities */
	fread(v[0],sizeof(float),n2*n1,infp);
 
	/* save the original velocity */
        for(ix=0; ix<n2; ++ix)
	 	for(iz=0; iz<n1; ++iz)
			v0[ix][iz]=v[ix][iz];

	/* get parameters for window function */
	if (!getparint("win",win)) {
		win[0] = 0;
		win[1] = n1;
		win[2] = 0;
		win[3] = n2;
		}
	if (!getparfloat("rw",&rw)) rw = 0.;
	rw = rw*rw*0.25;
 
	/* define the window function */
	for(ix=0; ix<n2; ++ix)
	 	for(iz=0; iz<n1; ++iz)
			w[ix][iz] = 0;	
	for(ix=win[2]; ix<win[3]; ++ix)
	 	for(iz=win[0]; iz<win[1]; ++iz)
			w[ix][iz] = 1;	

	if(win[0]>0 || win[1]<n1 || win[2]>0 || win[3]<n2){
	/*	smooth the window function */
         	for(iz=0; iz<n1; ++iz){
	 		for(ix=0; ix<n2; ++ix){
				d[ix] = 1.0+2.0*rw;
				e[ix] = -rw;
				f[ix] = w[ix][iz];
			}
        		d[0] -= rw;
         		d[n2-1] -= rw;
         		tripd(d,e,f,n2);
	 		for(ix=0; ix<n2; ++ix)
				w[ix][iz] = f[ix];
		}
         	for(ix=0; ix<n2; ++ix){
	 		for(iz=0; iz<n1; ++iz){
				d[iz] = 1.0+2.0*rw;
				e[iz] = -rw;
				f[iz] = w[ix][iz];
		}
        		d[0] -= rw;
         		d[n1-1] -= rw;
         		tripd(d,e,f,n1);
	 		for(iz=0; iz<n1; ++iz)
				w[ix][iz] = f[iz];
		}
	}

	/*      solving for the smoothing velocity */
        for(iz=0; iz<n1; ++iz){
	 	for(ix=0; ix<n2-1; ++ix){
			d[ix] = 1.0+r2*(w[ix][iz]+w[ix+1][iz]);
			e[ix] = -r2*w[ix+1][iz];
			f[ix] = v[ix][iz];
		}
        	d[0] -= r2*w[0][iz];
         	d[n2-1] = 1.0+r2*w[n2-1][iz];
		f[n2-1] = v[n2-1][iz];
         	tripd(d,e,f,n2);
	 	for(ix=0; ix<n2; ++ix)
			v[ix][iz] = f[ix];
	}
         for(ix=0; ix<n2; ++ix){
	 	for(iz=0; iz<n1-2; ++iz){
			d[iz] = 1.0+r1*(w[ix][iz+1]+w[ix][iz+2]);
			e[iz] = -r1*w[ix][iz+2];
			f[iz] = v[ix][iz+1];
		}
		f[0] += r1*w[ix][1]*v[ix][0];
         	d[n1-2] = 1.0+r1*w[ix][n1-1];
		f[n1-2] = v[ix][n1-1];
         	tripd(d,e,f,n1-1);
	 	for(iz=0; iz<n1-1; ++iz)
			v[ix][iz+1] = f[iz];
	}
	/* write smoothed data */
	fwrite(v[0],sizeof(float),n1*n2,outfp);

	/* if the user specifies the name of a an error file*/
	getparstring("efile", &efile);
        checkpars();

	if (*efile!='\0') {
		if((errorfp=efopen(efile,"w"))==NULL)
			err("cannot open efile=%s\n",efile);

		/*calculate the RMS error of velocity */
		err0 = 0.;
		vrms = 0;
      	 	 for(iz=0; iz<n1; ++iz){
		     for(ix=0; ix<n2; ++ix){
			  err0 += (v0[ix][iz]-v[ix][iz])*(v0[ix][iz]-v[ix][iz]);
			  vrms += v0[ix][iz]*v0[ix][iz];
		     }
			if (vrms != 0.0)
		 		errz[iz] = sqrt(err0/vrms);
			else
		 		errz[iz] = sqrt(err0/EPS);
		}
		fwrite(errz,sizeof(float),n1,errorfp);
		fclose(errorfp);
	}

	return(CWP_Exit());
}
        
@


1.16
log
@added copyright statement
@
text
@d193 2
@


1.15
log
@put =NULL for pointer values in declarations.
@
text
@d1 4
a4 1
/* SMOOTH2: $Revision: 1.14 $ ; $Date: 2003/08/19 21:24:44 $	*/
@


1.14
log
@19 Aug 2003
@
text
@d1 1
a1 1
/* SMOOTH2: $Revision: 1.13 $ ; $Date: 1998/05/18 20:37:19 $	*/
d62 7
a68 7
	int *win;	/* 1d array defining the corners of smoothing window */
	float **v0;	/* array of input velocities */
	float **v;	/* array of output velocities */
	float **w;	/* intermediate array */
	float *errz;	/* array of error estimates as a function of x1 */
	float *d, *e;	/* input arrays for subroutine tripd */
	float *f;	/* intermediate array */
d76 1
a76 1
	FILE *errorfp;		/* error file pointer */
@


1.13
log
@added a fix for small vms
@
text
@d1 1
a1 1
/* SMOOTH2: $Revision: 1.12 $ ; $Date: 1996/09/06 17:25:47 $	*/
d211 1
a211 1
	return EXIT_SUCCESS;
@


1.12
log
@fixed -Wall complaint
@
text
@d1 1
a1 1
/* SMOOTH2: $Revision: 1.11 $ ; $Date: 1995/09/27 20:38:59 $	*/
a42 1
/**************** end self doc *******************************************/
d50 1
d52 2
d202 4
a205 1
		errz[iz] = sqrt(err0/vrms);
@


1.11
log
@added   return EXIT_SUCCESS;
@
text
@d1 1
a1 1
/* SMOOTH2: $Revision: 1.10 $ ; $Date: 1995/04/25 15:15:16 $	*/
d46 5
a50 6
	Credits: 
		CWP: Zhen-yue Liu,
			adapted for par/main by John Stockwell 1 Oct 92
		Windowing feature added by Zliu on 16 Nov 1992
*/

d53 1
@


1.10
log
@fixed RCS label
@
text
@d1 1
a1 1
/* SMOOTH2: $Revision: 1.8 $ ; $Date: 94/08/25 15:00:32 $	*/
a54 1

d206 1
@


1.9
log
@cosmetic
@
text
@d1 1
a1 1
/* SMOOTH2 --- smooths uniformly sampled 2D arrays of data */
@


1.8
log
@changed error file handling to no file if efile=  not set.
@
text
@a52 1
void tripd(float *d, float *e, float *b, int n);
a208 26
	void tripd(float *d, float *e, float *b, int n)
/*****************************************************************************
Given an n-by-n symmetric, tridiagonal, positive definite matrix A and
 n-vector b, following algorithm overwrites b with the solution to Ax = b

  d() the diagonal of A 
  e() the superdiagonal of A
*****************************************************************************/
{
	int k; 
	float temp;
	
	/* decomposition */
	for(k=1; k<n; ++k){
           temp = e[k-1];
           e[k-1] = temp/d[k-1];
           d[k] -= temp*e[k-1];
	}

	/* substitution	*/
        for(k=1; k<n; ++k)  b[k] -= e[k-1]*b[k-1];
	
        b[n-1] /=d[n-1];
        for(k=n-1; k>0; --k)  b[k-1] = b[k-1]/d[k-1] - e[k-1]*b[k]; 
	
 }
@


1.7
log
@changed n2-1 to n1-1
@
text
@d22 2
a23 1
" errfile=verror		name of file containing relative error(x1)",
d77 1
a77 1
	char *errfile="";	/* name of error file */
a87 1
	if (!getparstring("errfile",&errfile)) errfile = "verror";
d188 15
a202 8
	/*	calculate the RMS error of velocity */
	errorfp = fopen(errfile,"w");
	err0 = 0.;
	vrms = 0;
        for(iz=0; iz<n1; ++iz){
	 	for(ix=0; ix<n2; ++ix){
		    err0 += (v0[ix][iz]-v[ix][iz])*(v0[ix][iz]-v[ix][iz]);
		    vrms += v0[ix][iz]*v0[ix][iz];
d204 2
a205 1
	errz[iz] = sqrt(err0/vrms);
a206 2
	fwrite(errz,sizeof(float),n1,errorfp);
	fclose(errorfp);
@


1.6
log
@cosmetic change .
@
text
@d151 1
a151 1
         		d[n2-1] -= rw;
@


1.5
log
@windowing feature added by Zhenyue.
@
text
@d46 1
a46 1
		CWP: Zhen-uye Liu,
@


1.4
log
@begin selfdoc end selfdoc lines added
@
text
@d8 2
a9 2
" SMOOTH2 --- SMOOTH a uniformly sampled 2d array of data		",
"		via a damped least squares technique			",
d20 3
d24 3
a26 3
" Note:									",
" The larger the values	of r1 and r2, the smoother the data.		", 
" Recommended range of r1 and r2 is 1 to 20.				",
d28 13
d48 1
d55 1
d57 20
a76 3
	int n1, n2, ix, iz, nmax;
	float **v,*d,*e,*f,r1,r2;
	FILE *in_file=stdin,*out_file=stdout;
d87 1
d89 1
a89 1
	/* compute the regularizing parameter */
d95 1
d97 3
d105 1
a105 1
	fread(v[0],sizeof(float),n1*n2,in_file);
d107 56
a162 5
	/* solving for the smoothing curve */
         for(iz=0; iz<n1; ++iz){
	 	for(ix=0; ix<n2; ++ix){
			d[ix] = 1.0+2.0*r2;
			e[ix] = -r2;
d165 3
a167 2
        	d[0] -= r2;
         	d[n2-1] -= r2;
d173 3
a175 3
	 	for(iz=0; iz<n1-1; ++iz){
			d[iz] = 1.0+2.0*r1;
			e[iz] = -r1;
d178 3
a180 2
         	d[n1-2] -= r1;
		f[0] += r1*v[ix][0];
d185 2
d188 13
a200 2
	/* write smoothed data */
	fwrite(v[0],sizeof(float),n2*n1,out_file);
@


1.3
log
@new selfdoc installed
@
text
@@


1.2
log
@smooth2.c
@
text
@d3 2
d6 20
a25 19
char *sdoc =
"									\n"
" SMOOTH2 --- SMOOTH a uniformly sampled 2d array of data		\n"
"		via a damped least squares technique			\n"
"									\n"
" smooth2 < stdin n1= n2= [optional parameters ] > stdout		\n"
"									\n"
" Required Parameters:							\n"
" n1=			number of samples in the 1st (fast) dimension	\n"
" n2=			number of samples in the 2nd (slow) dimension	\n"
"									\n"
" Optional Parameters:							\n"
" r1=0			smoothing parameter in the 1 direction		\n"
" r2=0			smoothing parameter in the 2 direction		\n"
"									\n"
" Note:									\n"
" The larger the values	of r1 and r2, the smoother the data.		\n" 
" Recommended range of r1 and r2 is 1 to 20.				\n"
"\n";
a33 1
#include "par.h"
d45 1
a45 1
	askdoc(0);
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/* SMOOTH2 */
d16 2
a17 2
" r1=0			smooth parameter in the 1 direction		\n"
" r2=0			smooth parameter in the 2 direction		\n"
d20 2
a21 2
" r1 and r2 control the smoothness of velocity. The larger the values	\n"
" of velocity is. A recommendable range is from 1 to 20.		\n"
@
