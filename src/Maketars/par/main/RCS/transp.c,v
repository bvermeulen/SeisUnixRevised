head	1.10;
access;
symbols;
locks; strict;
comment	@ * @;


1.10
date	2011.11.16.16.42.16;	author john;	state Exp;
branches;
next	1.9;

1.9
date	2011.10.20.21.08.50;	author john;	state Exp;
branches;
next	1.8;

1.8
date	2003.08.19.21.24.44;	author john;	state Exp;
branches;
next	1.7;

1.7
date	97.07.16.22.23.34;	author john;	state Exp;
branches;
next	1.6;

1.6
date	96.04.27.03.56.21;	author jkc;	state Exp;
branches;
next	1.5;

1.5
date	95.09.27.20.38.59;	author john;	state Exp;
branches;
next	1.4;

1.4
date	95.04.25.15.15.29;	author john;	state Exp;
branches;
next	1.3;

1.3
date	92.10.28.15.50.19;	author john;	state Exp;
branches;
next	1.2;

1.2
date	92.10.28.14.47.07;	author john;	state Exp;
branches;
next	1.1;

1.1
date	92.10.28.14.44.04;	author john;	state Exp;
branches;
next	;


desc
@transp.c
@


1.10
log
@checkpar() added
@
text
@/* Copyright (c) Colorado School of Mines, 2011.*/
/* All rights reserved.                       */

/* TRANSP: $Revision: 1.8 $ ; $Date: 2003/08/19 21:24:44 $	*/

#include "par.h"

/*********************** self documentation **********************/
char *sdoc[] = {
" 									",
" TRANSP - TRANSPose an n1 by n2 element matrix				",
" 									",
" transp <infile >outfile n1= [optional parameters]			",
" 									",
" Required Parameters:							",
" n1                     number of elements in 1st (fast) dimension of matrix",
" 									",
" Optional Parameters:							",
" n2=all                 number of elements in 2nd (slow) dimension of matrix",
" nbpe=sizeof(float)     number of bytes per matrix element		",
" verbose=0              =1 for diagnostic information			",
" 									",
NULL};
/**************** end self doc ********************************/

/*
 * AUTHOR:  Dave Hale, Colorado School of Mines, 07/07/89
 */

int
main (int argc, char **argv)
{
	int n1,n2,nbpe,i1,i2,verbose;
	char *v;
	void *state;
	FILE *infp=stdin,*outfp=stdout;

	/* hook up getpar */
	initargs(argc,argv);
	requestdoc(1);

	/* get parameters */
	if (!getparint("n1",&n1)) err("must specify n1!\n");
	if (!getparint("nbpe",&nbpe)) nbpe = sizeof(float);
	if (!getparint("n2",&n2)) {
		if (efseeko(infp,(off_t) 0,SEEK_END)==-1)
			err("input file size unknown; specify n2\n");
		n2 = (int) (eftello(infp)/(n1*nbpe));
		efseeko(infp, (off_t) 0,SEEK_SET);
	}
	verbose = 0;  getparint("verbose",&verbose);
	if (verbose) fprintf(stderr,"n1=%d  n2=%d  nbpe=%d\n",n1,n2,nbpe);

        checkpars();

	/* allocate space for a single vector in either dimension */
	v = ealloc1(((n1>n2)?n1:n2),nbpe);

	/* allocate big matrix state */
	state = bmalloc(nbpe,n1,n2);

	/* put vectors along 1st dimension to big matrix */
	if (verbose) fprintf(stderr,"Reading input file\n");
	for (i2=0; i2<n2; i2++) {
		if (fread(v,1,nbpe*n1,infp)!=nbpe*n1)
			err("Error reading input file:  i2=%d\n",i2);
		bmwrite(state,1,0,i2,n1,v);
	}

	/* get vectors along 2nd dimension from big matrix */
	if (verbose) fprintf(stderr,"Writing output file\n");
	for (i1=0; i1<n1; i1++) {
		bmread(state,2,i1,0,n2,v);
		if (fwrite(v,1,nbpe*n2,outfp)!=nbpe*n2)
			err("Error writing output file:  i1=%d\n",i1);
	}

	/* free big matrix state */
	bmfree(state);
	if (verbose) fprintf(stderr,"Transpose done!\n");

	return(CWP_Exit());
}
@


1.9
log
@added copyright statement
@
text
@d54 2
@


1.8
log
@19 Aug 2003
@
text
@d1 4
a4 1
/* TRANSP: $Revision: 1.7 $ ; $Date: 1997/07/16 22:23:34 $	*/
@


1.7
log
@Stew Levin suggestion, explicit cast on output from eftell
@
text
@d1 1
a1 1
/* TRANSP: $Revision: 1.6 $ ; $Date: 1996/04/27 03:56:21 $	*/
d43 1
a43 1
		if (fseek(infp,0L,2)==-1)
d45 2
a46 2
		n2 = (int) (eftell(infp)/(n1*nbpe));
		efseek(infp,0L,0);
d77 1
a77 1
	return EXIT_SUCCESS;
@


1.6
log
@./main/transp.c
"transp.c", line 30: warning: old style argument declaration
"transp.c", line 33: warning: nread unused in function main
"transp.c", line 33: warning: nwrite unused in function main
@
text
@d1 1
a1 1
/* TRANSP: $Revision: 1.5 $ ; $Date: 1995/09/27 20:38:59 $	*/
d45 1
a45 1
		n2 = eftell(infp)/(n1*nbpe);
@


1.5
log
@added   return EXIT_SUCCESS;
@
text
@d1 1
a1 1
/* TRANSP: $Revision: 1.4 $ ; $Date: 1995/04/25 15:15:29 $	*/
d27 2
a28 2
main (argc,argv)
int argc; char **argv;
d30 1
a30 1
	int n1,n2,nbpe,i1,i2,nread,nwrite,verbose;
@


1.4
log
@fixed RCS label
@
text
@d1 1
a1 1
/* TRANSP: $Revision: 1.8 $ ; $Date: 94/08/25 15:00:32 $	*/
d76 2
a77 1
	return 0;
@


1.3
log
@begin selfdoc end selfdoc lines added
@
text
@d1 1
a1 1
/* transp -- transpose an n1 by n2 element file */
@


1.2
log
@new selfdoc installed
@
text
@d5 1
d21 1
@


1.1
log
@Initial revision
@
text
@d1 1
a1 15
char *sdoc =
"TRANSP - TRANSPose an n1 by n2 element matrix\n"
"\n"
"transp <infile >outfile n1= [optional parameters]\n"
"\n"
"Required Parameters:\n"
"n1                     number of elements in 1st (fast) dimension of matrix\n"
"\n"
"Optional Parameters:\n"
"n2=all                 number of elements in 2nd (slow) dimension of matrix\n"
"nbpe=sizeof(float)     number of bytes per matrix element\n"
"verbose=0              =1 for diagnostic information\n"
"\n"
"AUTHOR:  Dave Hale, Colorado School of Mines, 07/07/89\n"
"\n";
d5 20
d35 1
a35 1
	askdoc(1);
@
