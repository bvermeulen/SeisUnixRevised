head	1.21;
access;
symbols;
locks; strict;
comment	@ * @;


1.21
date	2015.02.19.18.25.06;	author john;	state Exp;
branches;
next	1.20;

1.20
date	2011.11.16.16.42.16;	author john;	state Exp;
branches;
next	1.19;

1.19
date	2011.10.20.21.08.50;	author john;	state Exp;
branches;
next	1.18;

1.18
date	2007.04.09.21.56.22;	author john;	state Exp;
branches;
next	1.17;

1.17
date	2004.12.23.21.58.56;	author john;	state Exp;
branches;
next	1.16;

1.16
date	2002.10.28.19.12.03;	author john;	state Exp;
branches;
next	1.15;

1.15
date	2000.09.22.20.57.32;	author john;	state Exp;
branches;
next	1.14;

1.14
date	97.07.16.22.03.24;	author john;	state Exp;
branches;
next	1.13;

1.13
date	97.02.17.16.59.55;	author john;	state Exp;
branches;
next	1.12;

1.12
date	96.10.03.16.33.18;	author john;	state Exp;
branches;
next	1.11;

1.11
date	96.09.06.17.08.28;	author john;	state Exp;
branches;
next	1.10;

1.10
date	95.09.27.20.38.59;	author john;	state Exp;
branches;
next	1.9;

1.9
date	95.04.25.15.14.50;	author john;	state Exp;
branches;
next	1.8;

1.8
date	95.04.20.09.53.20;	author john;	state Exp;
branches;
next	1.7;

1.7
date	95.03.03.09.38.18;	author john;	state Exp;
branches;
next	1.6;

1.6
date	95.01.19.11.45.34;	author john;	state Exp;
branches;
next	1.5;

1.5
date	94.03.03.13.24.01;	author john;	state Exp;
branches;
next	1.4;

1.4
date	94.03.03.13.20.12;	author john;	state Exp;
branches;
next	1.3;

1.3
date	92.10.28.15.48.50;	author john;	state Exp;
branches;
next	1.2;

1.2
date	92.10.28.14.24.06;	author john;	state Exp;
branches;
next	1.1;

1.1
date	92.10.28.14.16.11;	author john;	state Exp;
branches;
next	;


desc
@farith.c
@


1.21
log
@added sloth parameter
@
text
@/* Copyright (c) Colorado School of Mines, 2011.*/
/* All rights reserved.                       */

/* FARITH: $Revision: 1.20 $ ; $Date: 2011/11/16 16:42:16 $	*/

#include "par.h"

/*********************** self documentation **********************/
char *sdoc[] = {
" 									",
" FARITH - File ARITHmetic -- perform simple arithmetic with binary files",
" 									",
" farith <infile >outfile [optional parameters]				",
" 									",
" Optional Parameters:							",
" in=stdin	input file						",
" out=stdout	output file						",
" in2=	   second input file (required for binary operations)		",
"		   if it can't be opened as a file, it might be a scalar",
" n=size_of_in,  fastest dimension (used only for op=cartprod is set)	",
" isig=		 index at which signum function acts (used only for 	",
"			op=signum)					",
" scale=	value to scale in by, used only for op=scale)		",
" bias=		value to bias in by, used only for op=bias)		",
"  									",
" op=noop   noop for out = in						",
"	   neg  for out = -in						",
"	   abs  for out = abs(in)					",
"	   scale for out = in *scale					",
"	   bias for out = in + bias 					",
"	   exp  for out = exp(in)					",
"	   sin  for out = sin(in)					",
"	   cos  for out = cos(in)					",
"	   log  for out = log(in)					",
"	   sqrt for out = (signed) sqrt(in)				",
"	   sqr  for out = in*in						",
"	   degrad  for out = in*PI/180					",
"	   raddeg  for out = in*180/PI					",
"	   pinv  for out = (punctuated) 1 / in   			",
"	   pinvsqr  for out = (punctuated) 1 /in*in 			",
"	   pinvsqrt for out = (punctuated signed) 1 /sqrt(in) 		",
"	   add  for out = in + in2					",
"	   sub  for out = in - in2					",
"	   mul  for out = in * in2					",
"	   div  for out = in / in2					",
"		cartprod for out = in x in2					",
"		requires: n=size_of_in, fastest dimension in output	",
"		signum for out[i] = in[i] for i< isig  and			",
"				= -in[i] for i>= isig			",
"		requires: isig=point where signum function acts		",
" Seismic operations:							",
"	   sloth   for  out =  1/in^2		Sloth from velocity in	",
"	   slowp   for  out =  1/in - 1/in2	Slowness perturbation	",
"	   slothp  for  out =  1/in^2 - 1/in2^2   Sloth perturbation	",
"									",
" Notes:								",
" op=sqrt takes sqrt(x) for x>=0 and -sqrt(ABS(x)) for x<0 (signed sqrt)",
"									",
" op=pinv takes y=1/x for x!=0,  if x=0 then y=0. (punctuated inverse)	",
"									",
" The seismic operations assume that in and in2 are wavespeed profiles.	",
" \"Slowness\" is 1/wavespeed and \"sloth\" is  1/wavespeed^2.		",
" Use \"suop\" and \"suop2\" to perform unary and binary operations on	",
" data in the SU (SEGY trace) format.					",
"									",
" The options \"pinvsq\" and \"pinvsqrt\" are also useful for seismic	",
" computations involving converting velocity to sloth and vice versa.	",
"									",
" The option \"cartprod\" (cartesian product) requires also that the	",
" parameter n=size_of_in be set. This will be the fastest dimension	",
" of the rectangular array that is output.				",
"									",
" The option \"signum\" causes a flip in sign for all values with index	",
" greater than \"isig\"	(really -1*signum(index)).			",
"									",
" For file operations on SU format files, please use:  suop, suop2	",
"									",
NULL};

/*
 *   AUTHOR:  Dave Hale, Colorado School of Mines, 07/07/89
 *	Zhaobo Meng added scale and cartprod, 10/01/96
 *	Zhaobo Meng added signum, 9 May 1997
 *	Tony Kocurko added scalar operations, August 1997
 *      John Stockwell added bias option 4 August 2004
 */
/**************** end self doc ********************************/

int
main(int argc, char **argv)
{
	float x;		/* input data values		*/
	float x2;		/* second input data values	*/
	float y;		/* output value 		*/
	float *y1;		/* array of inputs for cartprod */
	float scale;		/* value of scale		*/
	float bias;		/* value of bias		*/
	float scalar=0.0;	/* scalar value interpreted in2 */
	int i1;			/* counter			*/
	int n;
	int isig;
	char *in;		/* input filename		*/
	char *in2;		/* name of second input file	*/
	char *out;		/* output filename		*/
	char *op="noop";	/* operation			*/
 	char *endptr;		/* end of file pointer		*/
	FILE *infp;		/* input file pointer		*/
	FILE *in2fp=NULL;	/* second input file pointer	*/
	FILE *outfp;		/* output file pointer		*/
	cwp_Bool isscalar=cwp_false; /* is scalar ? 		*/

	/* hook up getpar */
	initargs(argc,argv);
	requestdoc(0);

	/* get parameters */
	if (getparstring("in",&in))
	{
		if ((infp=fopen(in,"r"))==NULL)
			err("Cannot open in=%s\n",in);
	}
	else
		infp = stdin;
	getparstring("op",&op);
	if (STREQ(op,"add") ||
		STREQ(op,"sub") ||
		STREQ(op,"mul") ||
		STREQ(op,"div") ||
		STREQ(op,"cartprod") ||
		STREQ(op,"slowp") ||
		STREQ(op,"slothp")) {
		if (!getparstring("in2",&in2))
			err("Must specify in2 for op=%s\n",op);
		if ((in2fp=fopen(in2,"r"))==NULL) {
				scalar = (float)strtod ((const char *)in2, (char **)(&endptr));
			if ( endptr == in2 )
			err("Can neither open in2=%s nor convert it to a scalar", in2);
			else if ( STREQ(op,"div") && scalar == 0.0 )
			err("Cannot divide by in2=%s", in2);
			else
			isscalar = cwp_true;
		}
	}
	if (getparstring("out",&out)){
		if ((outfp=fopen(out,"w"))==NULL)
			err("Cannot open out=%s",out);
	}
	else
		outfp = stdout;

	/* do the arithmetic operation */
	if (STREQ(op,"noop")) {
		while(efread(&x,sizeof(float),1,infp)!=0) {
			y = x;
			efwrite(&y,sizeof(float),1,outfp);
		}
	} else if (STREQ(op,"neg")) {
		while(efread(&x,sizeof(float),1,infp)!=0) {
			y = -x;
			efwrite(&y,sizeof(float),1,outfp);
		}
	} else if (STREQ(op,"abs")) {
		while(efread(&x,sizeof(float),1,infp)!=0) {
			y = fabs(x);
			efwrite(&y,sizeof(float),1,outfp);
		}
	} else if (STREQ(op,"scale")) {
		if (!getparfloat("scale",&scale))
			scale=1.0;
		while(efread(&x,sizeof(float),1,infp)!=0) {
			y = scale*x;
			efwrite(&y,sizeof(float),1,outfp);
		}
	} else if (STREQ(op,"bias")) {
		if (!getparfloat("bias",&bias))
			bias=0.0;
		while(efread(&x,sizeof(float),1,infp)!=0) {
			y = x + bias;
			efwrite(&y,sizeof(float),1,outfp);
		}
	} else if (STREQ(op,"signum")) {
		if (!getparint("isig",&isig))
			err("Must specify isig");
		i1=0;
		while(efread(&x,sizeof(float),1,infp)!=0) {
			if (i1>=isig) y = -x;
			else y=x;
			i1++;
			efwrite(&y,sizeof(float),1,outfp);
		} 
	} else if (STREQ(op,"exp")) {
		while(efread(&x,sizeof(float),1,infp)!=0) {
			y = exp(x);
			efwrite(&y,sizeof(float),1,outfp);
		}
	} else if (STREQ(op,"sin")) {
		while(efread(&x,sizeof(float),1,infp)!=0) {
			y = sin(x);
			efwrite(&y,sizeof(float),1,outfp);
		}
	} else if (STREQ(op,"cos")) {
		while(efread(&x,sizeof(float),1,infp)!=0) {
			y = cos(x);
			efwrite(&y,sizeof(float),1,outfp);
		}
	} else if (STREQ(op,"log")) {
		while(efread(&x,sizeof(float),1,infp)!=0) {
			y = log(x);
			efwrite(&y,sizeof(float),1,outfp);
		}
	} else if (STREQ(op,"sqrt")) {
		while(efread(&x,sizeof(float),1,infp)!=0) {
			if (x < 0) { 
				y = -sqrt(ABS(x));
			} else {
				y = sqrt(x);
			}
			efwrite(&y,sizeof(float),1,outfp);
		}
	} else if (STREQ(op,"sqr")) {
		while(efread(&x,sizeof(float),1,infp)!=0) {
			y = x*x;
			efwrite(&y,sizeof(float),1,outfp);
		}
	} else if (STREQ(op,"sloth")) {
		while(efread(&x,sizeof(float),1,infp)!=0) {
			if (x != 0) {
				y = 1.0/x*x;
			} else { 
				warn("zero value detected in input!");
				y = 0.0;
			}
			efwrite(&y,sizeof(float),1,outfp);
		}
	} else if (STREQ(op,"degrad")) {
		while(efread(&x,sizeof(float),1,infp)!=0) {
			y = x*PI/180.0;
			efwrite(&y,sizeof(float),1,outfp);
		}
	} else if (STREQ(op,"raddeg")) {
		while(efread(&x,sizeof(float),1,infp)!=0) {
			y = x*180.0/PI;
			efwrite(&y,sizeof(float),1,outfp);
		}
	} else if (STREQ(op,"pinv")) {
		while(efread(&x,sizeof(float),1,infp)!=0) {
			if (x != 0) {
				y = 1 / x;
			} else {
				y = 0.;
			}
			efwrite(&y,sizeof(float),1,outfp);
		}
	} else if (STREQ(op,"pinvsqr")) {
		while(efread(&x,sizeof(float),1,infp)!=0) {
			if (x != 0) {
				y = 1 / (x*x);
			} else {
				y = 0.;
			}
			efwrite(&y,sizeof(float),1,outfp);
		}
	} else if (STREQ(op,"pinvsqrt")) {
		while(efread(&x,sizeof(float),1,infp)!=0) {
			if (x < 0) { 
				y = -1/sqrt(ABS(x));
			} else if (x > 0) {
				y = 1/sqrt(x);
			} else {
				y = 0.0;
			}
			efwrite(&y,sizeof(float),1,outfp);
		}
	} else if (STREQ(op,"add")) {
		while(efread(&x,sizeof(float),1,infp)!=0) {
		if ( isscalar )
		y = x + scalar;
		else if (efread(&x2,sizeof(float),1,in2fp)==0)
				err("error or end of file reading in2 file");
			else
		y = x+x2;
			efwrite(&y,sizeof(float),1,outfp);
		}
	} else if (STREQ(op,"sub")) {
		while(efread(&x,sizeof(float),1,infp)!=0) {
		if (isscalar)
		y = x - scalar;
			else if (efread(&x2,sizeof(float),1,in2fp)==0)
				err("error or end of file reading in2 file");
		else
			  y = x-x2;
			efwrite(&y,sizeof(float),1,outfp);
		}
	} else if (STREQ(op,"mul")) {
		while(efread(&x,sizeof(float),1,infp)!=0) {
		if (isscalar)
		y = x * scalar;
			else if (efread(&x2,sizeof(float),1,in2fp)==0)
				err("error or end of file reading in2 file");
		else
			  y = x*x2;
			efwrite(&y,sizeof(float),1,outfp);
		}
	} else if (STREQ(op,"div")) {
		while(efread(&x,sizeof(float),1,infp)!=0) {
			if (isscalar)
				y = x / scalar;
			else if (efread(&x2,sizeof(float),1,in2fp)==0)
				err("error or end of file reading in2 file");
			else {
					if ( x2 == 0 ) {
					  warn("zero values detected in denominator!");
					  warn("outputting numerator*FLT_MAX");
					  y = x*FLT_MAX;
				} else {
					y = x/x2;
			}
		}
		efwrite(&y,sizeof(float),1,outfp);
	}

	} else if (STREQ(op,"cartprod")) {
		size_t nread;

		if (!getparint("n",&n))
			err("Must specify n=size_of_in\n");
		y1=alloc1float(n);

		if ((nread=efread(y1,sizeof(float),n,infp))!=n)
			err("Number of samples n_read=%d != n=%d",nread,n);
	
		while(efread(&x,sizeof(float),1,in2fp)!=0) {
			for (i1=0;i1<n;i1++) {
				y = x*y1[i1];
				efwrite(&y,sizeof(float),1,outfp);
			}
		}

	} else if (STREQ(op,"slowp")) {
		while(efread(&x,sizeof(float),1,infp)!=0) {
			if (efread(&x2,sizeof(float),1,in2fp)==0)
				err("error or end of file reading in2 file");
			if ( x <= 0 || x2 <= 0 ) 
				err ("zero value detected!");
			y = 1/x - 1/x2;
			efwrite(&y,sizeof(float),1,outfp);
		}
	} else if (STREQ(op,"slothp")) {
		while(efread(&x,sizeof(float),1,infp)!=0) {
			if (efread(&x2,sizeof(float),1,in2fp)==0)
				err("error or end of file reading in2 file");
			if ( x <= 0 || x2 <= 0 ) 
				err ("zero value detected!");
			y = 1/x*x - 1/x2*x2;
			efwrite(&y,sizeof(float),1,outfp);
		}
	} else {
		err("op=%s is not a valid operation",op);
	}
        checkpars();
	return(CWP_Exit());
}
@


1.20
log
@checkpar() added
@
text
@d4 1
a4 1
/* FARITH: $Revision: 1.18 $ ; $Date: 2007/04/09 21:56:22 $	*/
d52 1
d225 10
@


1.19
log
@added copyright statement
@
text
@d349 1
@


1.18
log
@added cos, sin, degrees to radians, radians to degrees
@
text
@d1 4
a4 1
/* FARITH: $Revision: 1.17 $ ; $Date: 2004/12/23 21:58:56 $	*/
@


1.17
log
@added bias option
@
text
@d1 1
a1 1
/* FARITH: $Revision: 1.16 $ ; $Date: 2002/10/28 19:12:03 $	*/
d29 2
d34 2
d192 10
d221 10
@


1.16
log
@added reference to suop and suop2 in selfdoc
@
text
@d1 1
a1 1
/* FARITH: $Revision: 1.15 $ ; $Date: 2000/09/22 20:57:32 $	*/
d20 3
d26 2
a27 1
"	   scale=1  for out = in * scale	 			",
d77 1
d89 1
d164 7
@


1.15
log
@additional arithmetical operations added
@
text
@d1 1
a1 1
/* FARITH: $Revision: 1.14 $ ; $Date: 1997/07/16 22:03:24 $	*/
d64 2
d309 1
a309 1
	return EXIT_SUCCESS;
@


1.14
log
@changed an int to a size_t at Stew Levin's suggestion
@
text
@d1 1
a1 1
/* FARITH: $Revision: 1.13 $ ; $Date: 1997/02/17 16:59:55 $	*/
d14 1
a14 1
" out=stdout     output file						",
d16 1
d23 1
a23 1
"	    scale=1  for out = in * scale	 			",
d35 1
a35 1
"	    cartprod for out = in x in2					",
d37 2
a38 2
"	    signum for out[i] = in[i] for i< isig  and			",
"			      = -in[i] for i>= isig			",
d42 1
a42 1
"	   slothp  for  out =  1/in^2 - 1/in2^2   Sloth perturbation    ",
d70 1
d77 18
a94 4
	float x,x2,y,scale,*y1;
	int i1,n,isig;
	char *in,*in2,*out,*op="noop";
	FILE *infp,*in2fp=NULL,*outfp;
d118 9
a126 2
		if ((in2fp=fopen(in2,"r"))==NULL)
			err("Cannot open in2=%s",in2);
d128 1
a128 2
	if (getparstring("out",&out))
	{
d223 3
a225 1
			if (efread(&x2,sizeof(float),1,in2fp)==0)
d227 2
a228 1
			y = x+x2;
d233 3
a235 1
			if (efread(&x2,sizeof(float),1,in2fp)==0)
d237 2
a238 1
			y = x-x2;
d243 3
a245 1
			if (efread(&x2,sizeof(float),1,in2fp)==0)
d247 2
a248 1
			y = x*x2;
d253 3
a255 1
			if (efread(&x2,sizeof(float),1,in2fp)==0)
d257 7
a263 6
			if ( x2 == 0 ) {
				warn("zero values detected in denominator!");
				warn("outputting numerator*FLT_MAX");
				y = x*FLT_MAX;
			} else {
				y = x/x2;
a264 1
			efwrite(&y,sizeof(float),1,outfp);
d266 2
@


1.13
log
@added Zhaobo Meng's cartesian product operation.
@
text
@d1 1
a1 1
/* FARITH: $Revision: 1.10 $ ; $Date: 1995/09/27 20:38:59 $	*/
d13 1
a13 1
" in=stdin       input file						",
d15 4
a18 1
" in2=           second input file (required for binary operations)	",
d20 14
a33 14
"           neg  for out = -in						",
"           abs  for out = abs(in)					",
"	    scale=1  for out = in * scale         			",
"           exp  for out = exp(in)					",
"           log  for out = log(in)					",
"           sqrt for out = (signed) sqrt(in)				",
"           sqr  for out = in*in					",
"           pinv  for out = (punctuated) 1 / in   			",
"           pinvsqr  for out = (punctuated) 1 /in*in 			",
"           pinvsqrt for out = (punctuated signed) 1 /sqrt(in) 		",
"           add  for out = in + in2					",
"           sub  for out = in - in2					",
"           mul  for out = in * in2					",
"           div  for out = in / in2					",
d36 3
d40 2
a41 2
"           slowp   for  out =  1/in - 1/in2       Slowness perturbation",
"           slothp  for  out =  1/in^2 - 1/in2^2   Sloth perturbation   ",
d59 4
d68 1
d76 1
a76 1
	int i1,n;
d129 1
a129 1
        } else if (STREQ(op,"scale")) {
d132 14
a145 4
                while(efread(&x,sizeof(float),1,infp)!=0) {
                        y = scale*x;
                        efwrite(&y,sizeof(float),1,outfp);
                }
d234 2
a235 2
        } else if (STREQ(op,"cartprod")) {
		int nread;
d244 1
a244 1
                while(efread(&x,sizeof(float),1,in2fp)!=0) {
d246 2
a247 2
                        	y = x*y1[i1];
                        	efwrite(&y,sizeof(float),1,outfp);
d249 1
a249 1
                }
@


1.12
log
@added Zhaobo Meng's cartprod and scale options
@
text
@d15 17
a31 17
" in2=	   second input file (required for binary operations)		",
" op=noop  noop for out = in						",
"	   neg  for out = -in						",
"	   abs  for out = abs(in)					",
"	   scale=1  for out = in * scale	 			",
"	   exp  for out = exp(in)					",
"	   log  for out = log(in)					",
"	   sqrt for out = (signed) sqrt(in)				",
"	   sqr  for out = in*in						",
"	   pinv  for out = (punctuated) 1 / in   			",
"	   pinvsqr  for out = (punctuated) 1 /in*in 			",
"	   pinvsqrt for out = (punctuated signed) 1 /sqrt(in) 		",
"	   add  for out = in + in2					",
"	   sub  for out = in - in2					",
"	   mul  for out = in * in2					",
"	   div  for out = in / in2					",
"	   cartprod for out = in x in2	(cartesian product)		",
d34 2
a35 2
"	   slowp   for  out =  1/in - 1/in2       Slowness perturbation	",
"	   slothp  for  out =  1/in^2 - 1/in2^2   Sloth perturbation   	",
d118 1
a118 1
	} else if (STREQ(op,"scale")) {
d121 4
a124 4
		while(efread(&x,sizeof(float),1,infp)!=0) {
			y = scale*x;
			efwrite(&y,sizeof(float),1,outfp);
		}
d213 1
a213 1
	} else if (STREQ(op,"cartprod")) {
d223 1
a223 1
		while(efread(&x,sizeof(float),1,in2fp)!=0) {
d225 2
a226 2
				y = x*y1[i1];
				efwrite(&y,sizeof(float),1,outfp);
d228 1
a228 1
		}
@


1.11
log
@quieted -Wall messages
@
text
@d15 18
a32 15
" in2=           second input file (required for binary operations)	",
" op=noop   noop for out = in						",
"           neg  for out = -in						",
"           abs  for out = abs(in)					",
"           exp  for out = exp(in)					",
"           log  for out = log(in)					",
"           sqrt for out = (signed) sqrt(in)				",
"           sqr  for out = in*in					",
"           pinv  for out = (punctuated) 1 / in   			",
"           pinvsqr  for out = (punctuated) 1 /in*in 			",
"           pinvsqrt for out = (punctuated signed) 1 /sqrt(in) 	",
"           add  for out = in + in2					",
"           sub  for out = in - in2					",
"           mul  for out = in * in2					",
"           div  for out = in / in2					",
d34 2
a35 2
"           slowp   for  out =  1/in - 1/in2       Slowness perturbation",
"           slothp  for  out =  1/in^2 - 1/in2^2   Sloth perturbation   ",
d50 3
a53 1
/**************** end self doc ********************************/
d57 1
d59 1
d64 2
a65 1
	float x,x2,y;
d74 2
a75 1
	if (getparstring("in",&in)) {
d78 2
a79 1
	} else
a80 1

d86 1
d118 7
d212 18
@


1.10
log
@added   return EXIT_SUCCESS;
@
text
@d1 1
a1 1
/* FARITH: $Revision: 1.9 $ ; $Date: 1995/04/25 15:14:50 $	*/
d54 1
d59 1
a59 1
	FILE *infp,*in2fp,*outfp;
d66 1
a66 2
	if (getparstring("in",&in))
	{
d69 1
a69 2
	}
	else
d71 1
@


1.9
log
@fixed RCS label
@
text
@d1 1
a1 1
/* FARITH: $Revision: 1.8 $ ; $Date: 94/08/25 15:00:32 $	*/
d216 1
@


1.8
log
@fixed a few bugs
@
text
@d1 1
a1 1
/* farith - file arithmetic */
@


1.7
log
@added pinvsqr and pinvsqrt options
@
text
@d154 1
a154 1
			} else if (x < 0) {
d186 7
a192 1
			y = x/x2;
d199 1
a199 1
			if ( x <= 0 || y <= 0 ) 
d208 1
a208 1
			if ( x <= 0 || y <= 0 ) 
@


1.6
log
@changed log -> sqrt, added additional functionality
@
text
@d21 1
a21 1
"           ssqrt for out = (signed) sqrt(in)				",
d24 2
d35 1
a35 1
" op=ssqrt takes sqrt(x) for x>=0 and -sqrt(ABS(x)) for x<0 (signed sqrt)",
d44 3
d138 20
@


1.5
log
@changed selfdoc
@
text
@d21 1
a21 1
"           sqrt for out = sqrt(in)					",
d23 1
d33 4
d115 5
a119 1
			y = log(x);
d125 9
@


1.4
log
@added slowp and slothp options.
@
text
@a21 1
" Binary operations:							",
@


1.3
log
@begin selfdoc end selfdoc lines added
@
text
@d16 22
a37 12
" op=noop        noop for out = in					",
"                neg  for out = -in					",
"                abs  for out = abs(in)					",
"                exp  for out = exp(in)					",
"                log  for out = log(in)					",
"                sqrt for out = sqrt(in)				",
"                sqr  for out = in*in					",
"                add  for out = in + in2				",
"                sub  for out = in - in2				",
"                mul  for out = in * in2				",
"                div  for out = in / in2				",
" 									",
d67 3
a69 1
		STREQ(op,"div")) {
d145 18
@


1.2
log
@new selfdoc installed.
@
text
@d5 1
d29 1
@


1.1
log
@Initial revision
@
text
@d1 1
a1 23
char *sdoc =
"FARITH - File ARITHmetic -- perform simple arithmetic with binary files\n"
"\n"
"farith <infile >outfile [optional parameters]\n"
"\n"
"Optional Parameters:\n"
"in=stdin       input file\n"
"out=stdout     output file\n"
"in2=           second input file (required for binary operations)\n"
"op=noop        noop for out = in\n"
"               neg  for out = -in\n"
"               abs  for out = abs(in)\n"
"               exp  for out = exp(in)\n"
"               log  for out = log(in)\n"
"               sqrt for out = sqrt(in)\n"
"               sqr  for out = in*in\n"
"               add  for out = in + in2\n"
"               sub  for out = in - in2\n"
"               mul  for out = in * in2\n"
"               div  for out = in / in2\n"
"\n"
"AUTHOR:  Dave Hale, Colorado School of Mines, 07/07/89\n"
"\n";
d5 28
d41 1
a41 1
	askdoc(0);
@
