head	1.38;
access
	jkc
	dhale
	john;
symbols;
locks
	john:1.38; strict;
comment	@ * @;


1.38
date	2011.11.16.16.40.46;	author john;	state Exp;
branches;
next	1.37;

1.37
date	2011.10.20.21.07.20;	author john;	state Exp;
branches;
next	1.36;

1.36
date	2011.09.09.22.26.31;	author john;	state Exp;
branches;
next	1.35;

1.35
date	2009.08.06.16.36.50;	author john;	state Exp;
branches;
next	1.34;

1.34
date	2004.12.23.22.23.20;	author john;	state Exp;
branches;
next	1.33;

1.33
date	98.08.31.21.16.23;	author john;	state Exp;
branches;
next	1.32;

1.32
date	98.08.31.17.42.57;	author john;	state Exp;
branches;
next	1.31;

1.31
date	98.04.01.16.35.10;	author john;	state Exp;
branches;
next	1.30;

1.30
date	97.10.22.16.55.57;	author john;	state Exp;
branches;
next	1.29;

1.29
date	97.05.16.20.14.51;	author john;	state Exp;
branches;
next	1.28;

1.28
date	96.08.11.20.03.50;	author jkc;	state Exp;
branches;
next	1.27;

1.27
date	96.07.30.18.07.15;	author john;	state Exp;
branches;
next	1.26;

1.26
date	95.08.07.10.07.02;	author john;	state Exp;
branches;
next	1.25;

1.25
date	94.07.27.09.15.25;	author john;	state Exp;
branches;
next	1.24;

1.24
date	94.03.03.15.28.00;	author jkc;	state Exp;
branches;
next	1.23;

1.23
date	94.03.01.12.26.59;	author jkc;	state Exp;
branches;
next	1.22;

1.22
date	93.08.13.10.17.18;	author john;	state Exp;
branches;
next	1.21;

1.21
date	93.06.25.15.49.56;	author john;	state Exp;
branches;
next	1.20;

1.20
date	93.02.26.14.14.10;	author john;	state Exp;
branches;
next	1.19;

1.19
date	91.11.15.15.31.43;	author jkc;	state Exp;
branches;
next	1.18;

1.18
date	91.09.25.13.34.54;	author jkcohen;	state Exp;
branches;
next	1.17;

1.17
date	91.09.04.14.33.53;	author jkcohen;	state Exp;
branches;
next	1.16;

1.16
date	91.08.28.13.35.50;	author jkcohen;	state Exp;
branches;
next	1.15;

1.15
date	91.08.20.13.45.57;	author jkcohen;	state Exp;
branches;
next	1.14;

1.14
date	91.08.06.10.39.32;	author jkcohen;	state Exp;
branches;
next	1.13;

1.13
date	90.12.17.12.17.19;	author jkc;	state Exp;
branches;
next	1.12;

1.12
date	90.11.03.15.30.35;	author jkc;	state Exp;
branches;
next	1.11;

1.11
date	90.10.25.09.21.20;	author jkc;	state Exp;
branches;
next	1.10;

1.10
date	90.08.11.10.34.27;	author dhale;	state Exp;
branches;
next	1.9;

1.9
date	90.08.01.08.00.39;	author jkc;	state Exp;
branches;
next	1.8;

1.8
date	90.05.30.16.06.52;	author jkc;	state Exp;
branches;
next	1.7;

1.7
date	90.05.29.13.13.44;	author dhale;	state Exp;
branches;
next	1.6;

1.6
date	90.05.29.13.07.15;	author dhale;	state Exp;
branches;
next	1.5;

1.5
date	90.04.29.08.50.17;	author jkc;	state Exp;
branches;
next	1.4;

1.4
date	90.04.24.14.55.43;	author jkc;	state Exp;
branches;
next	1.3;

1.3
date	90.04.24.14.53.13;	author jkc;	state Exp;
branches;
next	1.2;

1.2
date	90.04.21.14.04.48;	author jkc;	state Exp;
branches;
next	1.1;

1.1
date	90.04.21.13.51.24;	author jkc;	state Exp;
branches;
next	;


desc
@Include file for ...par/lib
@


1.38
log
@added Reg Beardsley's checkpar() routine
@
text
@/* Copyright (c) Colorado School of Mines, 2011.*/
/* All rights reserved.                       */

/* par.h - include file for getpar, selfdoc, and error handling functions */

#ifndef PAR_H
#define PAR_H


/* INCLUDES */

#include "cwp.h"

/* GLOBAL DECLARATIONS */
extern int xargc; extern char **xargv;

/* ssize_t does not exist on some systems */
#ifndef ssize_t
#define ssize_t int
#endif


/* TYPEDEFS */
typedef enum {cwp_false, cwp_true} cwp_Bool;
typedef char *cwp_String;

typedef enum {BADFILETYPE = -1,
	TTY, DISK, DIRECTORY, TAPE, PIPE, FIFO, SOCKET, SYMLINK} FileType;
	
/* define structures for Hale's modeling */
typedef struct ReflectorSegmentStruct {
	float x;	/* x coordinate of segment midpoint */
	float z;	/* z coordinate of segment midpoint */
	float s;	/* x component of unit-normal-vector */
	float c;	/* z component of unit-normal-vector */
} ReflectorSegment;
typedef struct ReflectorStruct {
	int ns;			/* number of reflector segments */
	float ds;		/* segment length */
	float a;		/* amplitude of reflector */
	ReflectorSegment *rs;	/* array[ns] of reflector segments */
} Reflector;
typedef struct WaveletStruct {
	int lw;			/* length of wavelet */
	int iw;			/* index of first wavelet sample */
	float *wv;		/* wavelet sample values */
} Wavelet;


/* DEFINES */

/* getpar macros */
#define MUSTGETPARINT(x,y) if(!getparint(x,y)) err("must specify %s=",x)
#define MUSTGETPARFLOAT(x,y) if(!getparfloat(x,y)) err("must specify %s=",x)
#define MUSTGETPARSTRING(x,y) if(!getparstring(x,y)) err("must specify %s=",x)
#define MUSTGETPARDOUBLE(x,y) if(!getpardouble(x,y)) err("must specify %s=",x)

#define STDIN (0)
#define STDOUT (1)
#define STDERR (2)


/* FUNCTION PROTOTYPES */

#ifdef __cplusplus  /* if C++, specify external C linkage */
extern "C" {
#endif

/* getpar parameter parsing */
void initargs (int argc, char **argv);
int getparint (char *name, int *p);
int getparuint (char *name, unsigned int *p);
int getparshort (char *name, short *p);
int getparushort (char *name, unsigned short *p);
int getparlong (char *name, long *p);
int getparulong (char *name, unsigned long *p);
int getparfloat (char *name, float *p);
int getpardouble (char *name, double *p);
int getparstring (char *name, char **p);
int getparstringarray (char *name, char **p);
int getnparint (int n, char *name, int *p);
int getnparuint (int n, char *name, unsigned int *p);
int getnparshort (int n, char *name, short *p);
int getnparushort (int n, char *name, unsigned short *p);
int getnparlong (int n, char *name, long *p);
int getnparulong (int n, char *name, unsigned long *p);
int getnparfloat (int n, char *name, float *p);
int getnpardouble (int n, char *name, double *p);
int getnparstring (int n, char *name, char **p);
int getnparstringarray (int n, char *name, char **p);
int getnpar (int n, char *name, char *type, void *ptr);
int countparname (char *name);
int countparval (char *name);
int countnparval (int n, char *name);
void checkpars( void );

/* For ProMAX */
void getPar(char *name, char *type, void *ptr);

/* errors and warnings */
void err (char *fmt, ...);
void syserr (char *fmt, ...);
void warn (char *fmt, ...);

/* self documentation */
void pagedoc (void);
void requestdoc (int i);

/* system calls with error trapping */
int ecreat(char *path, int perms);
int efork(void);
int eopen(char *path, int flags, int perms);
int eclose(int fd);
int eunlink(char *path);
off_t elseek(int fd, off_t offset, int origin);
int epipe(int fd[2]);

ssize_t eread(int fd, char *buf, size_t nbytes);
ssize_t ewrite(int fd, char *buf, size_t nbytes);

/* system subroutine calls with error trapping */
FILE *efopen(const char *file, const char *mode);
FILE *efreopen(const char *file, const char *mode, FILE *stream1);
FILE *efdopen(int fd, const char *mode);
FILE *epopen(char *command, char *type);
int efclose(FILE *stream);
int epclose(FILE *stream);
int efflush(FILE *stream);
int eremove(const char *file);
int erename(const char *oldfile, const char* newfile);
int efseeko(FILE *stream, off_t offset, int origin);
int efseek(FILE *stream, off_t offset, int origin);
long eftell(FILE *stream);
off_t eftello(FILE *stream);
void erewind(FILE *stream);
FILE *etmpstream(char *prefix); 
FILE *etmpfile(void);
char *emkstemp(char *namebuffer);
void *emalloc(size_t size);
void *erealloc(void *memptr, size_t size);
void *ecalloc(size_t count, size_t size);
size_t efread(void *bufptr, size_t size, size_t count, FILE *stream);
size_t efwrite(void *bufptr, size_t size, size_t count, FILE *stream);

/* some SUN users may need to comment out the next two items, */
/* if your system does not have "fgetpos()" and "fsetpos()" defined. */
/* You will also need to comment out the lines defining the functions */
/* efgetpos() and efsetpos() in CWPROOT/src/par/lib/subcalls.c */

/* Modified: 21 June 1995: */
/* so that setting -DSUN_A in Makefile.config should make this unnecessary */
/* CWP: John Stockwell */

#ifndef SUN_A
int efgetpos(FILE *stream, fpos_t *position);
int efsetpos(FILE *stream, const fpos_t *position);
#endif

/* allocation with error trapping */
void *ealloc1 (size_t n1, size_t size);
void *erealloc1 (void *v, size_t n1, size_t size);
void **ealloc2 (size_t n1, size_t n2, size_t size);
void ***ealloc3 (size_t n1, size_t n2, size_t n3, size_t size);
void ****ealloc4 (size_t n1, size_t n2, size_t n3, size_t n4, size_t size);
void ****ealloc4 (size_t n1, size_t n2, size_t n3, size_t n4, size_t size);
void *****ealloc5 (size_t n1, size_t n2, size_t n3, size_t n4, size_t n5, size_t size);
void ******ealloc6 (size_t n1, size_t n2, size_t n3, size_t n4, size_t n5,
                  size_t n6, size_t size);

int *ealloc1int(size_t n1);
int *erealloc1int(int *v, size_t n1);
int **ealloc2int(size_t n1, size_t n2);
int ***ealloc3int(size_t n1, size_t n2, size_t n3);
float *ealloc1float(size_t n1);
float *erealloc1float(float *v, size_t n1);
float **ealloc2float(size_t n1, size_t n2);
float ***ealloc3float(size_t n1, size_t n2, size_t n3);

int ****ealloc4int(size_t n1, size_t n2, size_t n3, size_t n4);
int *****ealloc5int(size_t n1, size_t n2, size_t n3, size_t n4, size_t n5);
float ****ealloc4float(size_t n1, size_t n2, size_t n3, size_t n4);
float *****ealloc5float(size_t n1, size_t n2, size_t n3, size_t n4, size_t n5);
float ******ealloc6float(size_t n1, size_t n2, size_t n3, size_t n4, size_t n5,
       size_t n6);

unsigned short *****ealloc5ushort(size_t n1, size_t n2,
		 size_t n3, size_t n4, size_t n5);
unsigned char *****ealloc5uchar(size_t n1, size_t n2,
		size_t n3, size_t n4, size_t n5);
unsigned short ******ealloc6ushort(size_t n1, size_t n2,
		 size_t n3, size_t n4, size_t n5, size_t n6);

double *ealloc1double(size_t n1);
double *erealloc1double(double *v, size_t n1);
double **ealloc2double(size_t n1, size_t n2);
double ***ealloc3double(size_t n1, size_t n2, size_t n3);
complex *ealloc1complex(size_t n1);
complex *erealloc1complex(complex *v, size_t n1);
complex **ealloc2complex(size_t n1, size_t n2);
complex ***ealloc3complex(size_t n1, size_t n2, size_t n3);

/* string to numeric conversion with error checking */
short eatoh(char *s);
unsigned short eatou(char *s);
int eatoi(char *s);
unsigned int eatop(char *s);
long eatol(char *s);
unsigned long eatov(char *s);
float eatof(char *s);
double eatod(char *s);

/* file type checking */
FileType filestat(int fd);
char *printstat(int fd);

/* Hale's modeling code */
void decodeReflectors (int *nrPtr,
	float **aPtr, int **nxzPtr, float ***xPtr, float ***zPtr);
int decodeReflector (char *string,
	float *aPtr, int *nxzPtr, float **xPtr, float **zPtr);
void breakReflectors (int *nr, float **ar, 
	int **nu, float ***xu, float ***zu);
void makeref (float dsmax, int nr, float *ar, 
	int *nu, float **xu, float **zu, Reflector **r);
void raylv2 (float v00, float dvdx, float dvdz,
	float x0, float z0, float x, float z,
	float *c, float *s, float *t, float *q);
void addsinc (float time, float amp,
	int nt, float dt, float ft, float *trace);
void makericker (float fpeak, float dt, Wavelet **w);

/* upwind eikonal stuff */
void eikpex (int na, float da, float r, float dr, 
	float sc[], float uc[], float wc[], float tc[],
	float sn[], float un[], float wn[], float tn[]);
void ray_theoretic_sigma (int na, float da, float r, float dr, 
	float uc[], float wc[], float sc[],
	float un[], float wn[], float sn[]);
void ray_theoretic_beta (int na, float da, float r, float dr, 
	float uc[], float wc[], float bc[],
	float un[], float wn[], float bn[]);
void eiktam (float xs, float zs, 
	int nz, float dz, float fz, int nx, float dx, float fx, float **vel,
	float **time, float **angle, float **sig, float **beta);

/* smoothing routines */
void dlsq_smoothing (int nt, int nx, int ift, int ilt, int ifx, int ilx,
        float r1, float r2, float rw, float **traces);
void SG_smoothing_filter (int np, int nl, int nr, int ld, int m, float *filter);
void rwa_smoothing_filter (int flag, int nl, int nr, float *filter);
void gaussian2d_smoothing (int nx, int nt, int nsx, int nst, float **data);
void gaussian1d_smoothing (int ns, int nsr, float *data);
void smooth_histogram (int nintlh, float *pdf);
void smooth_segmented_array(float *index,float *val,int n,int sm,int inc,int m);

/* function minimization */
void bracket_minimum(float *ax, float *bx, float *cx, float *fa,
                float *fb,float *fc, float (*func)(float));
float golden_bracket(float ax, float bx, float cx,
                        float (*f)(float), float tol,float *xmin);
float brent_bracket(float ax, float bx, float cx,
                float (*f)(float), float tol, float *xmin);

void linmin(float p[],float xi[],int n,float *fret, float (*func)());
void powell_minimization(float p[], float **xi, int n,
                float ftol,int *iter,float *fret,float (*func)());

/* fractals */
float hausdorff_dimension( float *ar, int n,int minl,int maxl,int dl);


/***** lincoeff -- linearized reflection coefficients */
/* type definitions */

typedef struct 
    {
      float iso[5];
      float upper[2];
      float lower[2];
      float global[4];
      float angle[4];
  } ErrorFlag;

/* prototypes for functions defined */

float lincoef_Rp(float ang, float azim, float kappa, float *rpp, ErrorFlag *rp_1st, ErrorFlag *rp_2nd, 
         int count);

float lincoef_Rs(float ang, float azim, float kappa, float *rps1, float *rps2, 
       float *sv, float *sh, float *cphi, float *sphi, int i_hsp,
       ErrorFlag *rsv_1st, ErrorFlag *rsv_2nd, ErrorFlag *rsh_1st, ErrorFlag *rsh_2nd, int count);

float Iso_exact(int type, float vp1, float vs1, float rho1, 
		  float vp2, float vs2, float rho2, float ang);  

int Phi_rot(float *rs1,float *rs2,int iso_plane,float pb_x,float pb_y,float pb_z,float gs1_x,float gs1_y,
       float gs1_z,float gs2_x,float gs2_y,float gs2_z,float *CPhi1,float *SPhi1,float *CPhi2,float
*SPhi2);

/* there are other functions involved. However, they are declared inside of the corresponding
   routines */
/*** end lincoeff */

#ifdef __cplusplus  /* if C++ (external C linkage is being specified) */
}
#endif

#endif /* PAR_H */
@


1.37
log
@added copyright statement
@
text
@d95 1
@


1.36
log
@*** empty log message ***
@
text
@d1 3
@


1.35
log
@added prototype for smooth_segmented_array by Balasz Nemeth
@
text
@d53 1
d132 1
d264 4
@


1.34
log
@numerous added prototypes
@
text
@d248 1
@


1.33
log
@added upwind eikonal routines
@
text
@a9 4
#include <fcntl.h>	/* non-ANSI */
#include <unistd.h>	/* non-ANSI */
#include <sys/types.h>	/* non-ANSI */

d110 1
a110 1
long elseek(int fd, long offset, int origin);
d126 4
a129 1
int efseek(FILE *stream, long offset, int origin);
a130 1
long eftell(FILE *stream);
d132 1
a132 1
char *etmpnam(char *namebuffer);
d230 1
a230 1
void sigma (int na, float da, float r, float dr, 
d233 1
a233 1
void beta (int na, float da, float r, float dr, 
d248 44
@


1.32
log
@Zhaobo's large allocs
@
text
@d228 13
@


1.31
log
@added alloc5 items
@
text
@d161 5
a174 2
void ****ealloc4 (size_t n1, size_t n2, size_t n3, size_t n4, size_t size);
void *****ealloc5 (size_t n1, size_t n2, size_t n3, size_t n4, size_t n5, size_t size);
d179 2
d186 2
@


1.30
log
@ssize_t, cwp_true and cwp_false .
@
text
@d177 5
@


1.29
log
@added Zhaobo Meng's ealloc4 and ealloc5 additions .
@
text
@d18 5
d25 1
a25 1
typedef enum {false, true} cwp_Bool;
d116 3
a118 2
int eread(int fd, char *buf, int nbytes);
int ewrite(int fd, char *buf, int nbytes);
@


1.28
log
@Added unistd.h (for access()).
@
text
@a0 3
/* Copyright (c) Colorado School of Mines, 1995.*/
/* All rights reserved.                       */

d163 8
@


1.27
log
@added smoothing routines
@
text
@d14 1
@


1.26
log
@added #ifdef SUN_A ... #ifndef  to make code hacking unnecessary
on SUN with GCC compiler, but no glibc libraries.  Added getparstringarray()
and getnparstringarray().  Made definitions of xargc and xargv
into external declarations.
@
text
@d204 10
@


1.25
log
@added SUN comment
@
text
@d1 3
d18 1
a19 1
int xargc;  char **xargv;
a20 1

d77 1
d87 1
d141 6
d149 1
@


1.24
log
@Added prototypes for getPar and getnpar (never there before?).
getPar is a hook to ProMAX invented by John E. Anderson.
@
text
@d130 7
a138 2
size_t efread(void *bufptr, size_t size, size_t count, FILE *stream);
size_t efwrite(void *bufptr, size_t size, size_t count, FILE *stream);
@


1.23
log
@Added typedefs and prototypes for modeling.c package (initially
has the Hale structures and subs used commonly in the susynlv clones.)
@
text
@d84 1
d88 3
@


1.22
log
@added cwp_Bool and cwp_String
@
text
@d26 18
d45 1
a96 6
/* obsolete self documentation */
void selfdoc (void);
void askdoc (int i);



d167 16
@


1.21
log
@*** empty log message ***
@
text
@d20 2
@


1.20
log
@added prototypes for pagedoc and requestdoc
@
text
@@


1.19
log
@changed proto of efdopen to const char to agree with usage in
subcalls.c.
@
text
@d73 4
d79 2
@


1.18
log
@Eliminated ; after a comment (Sun compiler objected!).
@
text
@d90 1
a90 1
FILE *efdopen(int fd, char *mode);
@


1.17
log
@FileType, STDIN, etc. from old cwp.h
Eliminated obsolete getpar macros and prototypes.  Also
junked the dubious pread, pfread prototypes.  syswarn is gone too.
@
text
@d87 1
a87 1
/* system subroutine calls with error trapping */;
@


1.16
log
@ushort -> unsigned short in obsolete ugetpar
@
text
@d10 2
a11 1
#include <errno.h>
d15 1
a15 1
 
d19 6
d32 3
a34 10
/* obsolute macros - do not use these! */
#define MUSTSGETPAR(x,y) if(!sgetpar(x,y)) err("need %s=",x)
#define MUSTHGETPAR(x,y) if(!hgetpar(x,y)) err("need %s=",x)
#define MUSTUGETPAR(x,y) if(!ugetpar(x,y)) err("need %s=",x)
#define MUSTLGETPAR(x,y) if(!lgetpar(x,y)) err("need %s=",x)
#define MUSTVGETPAR(x,y) if(!vgetpar(x,y)) err("need %s=",x)
#define MUSTIGETPAR(x,y) if(!igetpar(x,y)) err("need %s=",x)
#define MUSTPGETPAR(x,y) if(!pgetpar(x,y)) err("need %s=",x)
#define MUSTFGETPAR(x,y) if(!fgetpar(x,y)) err("need %s=",x)
#define MUSTZGETPAR(x,y) if(!zgetpar(x,y)) err("need %s=",x)
a66 11
/* obsolete getpar functions - do not use these! */
int hgetpar (char *s, short *p);
int ugetpar (char *s, unsigned short *p);
int igetpar (char *s, int *p);
int pgetpar (char *s, unsigned int *p);
int lgetpar (char *s, long *p);
int vgetpar (char *s, unsigned long *p);
int fgetpar (char *s, float *p);
int dgetpar (char *s, double *p);
int sgetpar (char *s, char **p);

d69 1
a71 4
/* these two are OBSOLESCENT */
void syserr (char *fmt, ...);
void syswarn (char *fmt, ...);

a85 1
int pread(int fd, char *buf, int nbytes); /* NOT a sys call; drop this? */
a108 1
size_t pfread(void *bufptr, size_t size, size_t count, FILE *stream);
d142 4
@


1.15
log
@elim const in mode for fdopen (to be consistent with subcalls).
@
text
@d69 1
a69 1
int ugetpar (char *s, ushort *p);
@


1.14
log
@Removed fcntl.h include (already in cwp.h)
@
text
@d105 1
a105 1
FILE *efdopen(int fd, const char *mode);
@


1.13
log
@Added proto for efork
@
text
@a10 1
#include <fcntl.h>
@


1.12
log
@Added etmpfile, etmpnam
@
text
@d93 1
@


1.11
log
@pread admitted, but probably should be dropped.
@
text
@d115 2
@


1.10
log
@modified for C++ (extern "C" {} added)
@
text
@d100 1
@


1.9
log
@ushort -> unsigned short
@
text
@d40 4
d70 1
a70 1
int ugetpar (char *s, unsigned short *p);
d155 4
@


1.8
log
@Marked syserr() and syswarn() as obsolescent
@
text
@d66 1
a66 1
int ugetpar (char *s, ushort *p);
@


1.7
log
@fixed declarations of getnpar<type> functions
@
text
@d76 4
a80 1
void err (char *fmt, ...);
a81 1
void warn (char *fmt, ...);
@


1.6
log
@labeled old igetpar(), fgetpar(), etc. as obsolete
added prototypes for getpar<type>(), getnpar<type>, and count functions
added MUSTGETPAR<TYPE> macros for common types
@
text
@d51 9
a59 9
int getnparint (char *name, int *p);
int getnparuint (char *name, unsigned int *p);
int getnparshort (char *name, short *p);
int getnparushort (char *name, unsigned short *p);
int getparlong (char *name, long *p);
int getnparulong (char *name, unsigned long *p);
int getnparfloat (char *name, float *p);
int getnpardouble (char *name, double *p);
int getnparstring (char *name, char **p);
@


1.5
log
@change type of syswarn
@
text
@d20 7
a26 1
 
d42 23
a64 1
unsigned int maxgetpar (void);
@


1.4
log
@abandon estrtod, etc. and zgetpar -> dgetpar
@
text
@d50 1
a50 1
int syswarn (char *fmt, ...);
@


1.3
log
@alloe -> ealloc
@
text
@d44 1
a44 1
int zgetpar (char *s, double *p);
a87 6
double estrtod(const char* string, char **tailptr);
long estrtol(const char* string, char **tailptr, int base);
unsigned long estrtoul(const char* string, char **tailptr, int base);
double eatof(const char* string);
int eatoi(const char* string);
long eatol(const char* string);
d111 10
@


1.2
log
@Settled on erealloc names, added estrtod, etc.  eatoi, etc.
Gave eopen an ellipsis third argument.
@
text
@a47 1
/*
a51 1
*/
d59 1
a59 1
int eopen(char *path, int flags, ...);
d83 2
a84 4
/*
	int efgetpos(FILE *stream, fpos_t *position);
	int efsetpos(FILE *stream, const fpos_t *position);
*/
d96 1
a96 1
void *alloe1 (size_t n1, size_t size);
d98 4
a101 4
void **alloe2 (size_t n1, size_t n2, size_t size);
void ***alloe3 (size_t n1, size_t n2, size_t n3, size_t size);
void ****alloe4 (size_t n1, size_t n2, size_t n3, size_t n4, size_t size);
int *alloe1int(size_t n1);
d103 3
a105 3
int **alloe2int(size_t n1, size_t n2);
int ***alloe3int(size_t n1, size_t n2, size_t n3);
float *alloe1float(size_t n1);
d107 3
a109 3
float **alloe2float(size_t n1, size_t n2);
float ***alloe3float(size_t n1, size_t n2, size_t n3);
double *alloe1double(size_t n1);
d111 3
a113 3
double **alloe2double(size_t n1, size_t n2);
double ***alloe3double(size_t n1, size_t n2, size_t n3);
complex *alloe1complex(size_t n1);
d115 2
a116 2
complex **alloe2complex(size_t n1, size_t n2);
complex ***alloe3complex(size_t n1, size_t n2, size_t n3);
@


1.1
log
@Initial revision
@
text
@d61 1
a61 1
int eopen(char *path, int flags, int perms);
d92 6
d101 1
a101 1
void *reloe1(void *v, size_t n1, size_t size);
d106 1
a106 1
int *reloe1int(int *v, size_t n1);
d110 1
a110 1
float *reloe1float(float *v, size_t n1);
d114 1
a114 1
double *reloe1double(double *v, size_t n1);
d118 1
a118 1
complex *reloe1complex(complex *v, size_t n1);
a120 8


/* Externs for non-ANSI ports */
void syserr ();
void err ();
int syswarn ();
void warn ();

@
