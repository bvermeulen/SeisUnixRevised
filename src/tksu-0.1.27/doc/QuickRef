
 Tksu Quick Reference Guide
 --------------------------


 Canvas Window
 -------------

    The canvas window is the main window of the application, containing the
    menu bar.  It is a graphical window that displays a `flowsheet'.  A
    flowsheet is a collection of modules (SU programs) optionally linked
    together by their input and output ports.  Tksu's primary functions are
    to (a) interactively build the flowsheet, (b) set parameters for each
    module in the flowsheet, and (c) create and run a shell script that
    performs the processing flow specified in the flowsheet.  The individual
    elements of the flowsheet are described below.

    Modules

    	A module is represented by a labeled box in the canvas window.  Each
	module is uniquely named by appending a numeric suffix to the SU
	program name, so that the same SU program can be used more than once
	in the flowsheet.  If a module is highlighted with a white border,
	it is `selected'.  Otherwise it is drawn with a black border.  If
	a module's background is diagonally striped, it is `disabled'.

    Ports

	Ports are the small boxes that line the upper and lower edges of a
	module.  They represent the possible input and output specs for an
	SU program.  Input ports line the upper edge and output ports line
	the lower edge of the module.  Ports are color coded as to the type
	of data that they read or write; normally, only ports with the same
	data type should be linked together.

	The border of an unconnected port may be black, white or blinking.
	If the border is black, the port is configured to read from or write
	to a file, so it does not have to be connected.  If the border is
	white, the port expects input/output via pipe and MUST be connected
	to another port for the flowsheet to be runnable.  A blinking white
	border indicates that the port is in the process of being connected
	to another port.

    Links

    	Links, or `pipes', connect ports together.  In the canvas window,
	a link is represented by a segmented line, color-coded by the data
	type of the output port it is connected to.  A link with a white
	border is `selected'; otherwise its border is black.  If a link is
	diagonally striped, it is `disabled'.

    Status Bar

    	The status bar along the bottom of the Canvas Window displays
	information about the object that the cursor is currently over,
	whether it be a module, port or link.  The status bar is also used
	at times to prompt the user, or to temporarily display information
	for a brief interval.


 Manipulating Modules in the Canvas Window
 -----------------------------------------

    Add Module

    	Use the Module List Window to add a new module to the canvas.  For
	details, see the Module List Window section below.

    Select Module

	Select a module by left-clicking on it.  Other modules and links are
	automatically deselected.  If the control key is held down while
	selecting, the other selected objects are NOT deselected.  Use the
	control key to toggle the selection state of any object.  Deselect
	all objects by left-clicking in an empty part of the canvas.

    Move Module

    	To move a module, left-click and drag it.  The module does not have
	to be selected to be moved.  To move a group of modules, first select
	them, then drag any one of them to the new location.  Any connected
	links will be dragged along with the module.

    Access Module Parameters

    	To view and modify the parameters of a module, right-click on the
	module.  The Parameter List Window for the module will be raised.
	See the Parameter List Window section below for details.

    Access Port Parameters

    	If you right-click on a module's port, the Parameter List Window
	is raised, showing the port settings in the Port Dialog section of
	the window.

    Disable/Enable Module

    	Modules may be `disabled'.  When disabled, a module is not
	technically part of the flowsheet, and will not be executed when the
	flowsheet is run.  It does remain in the canvas, however, and its
	parameters may still be examined and modified.  Use the disable
	feature to temporarily "switch out" a module or group of modules
	without losing the parameter settings for them.

	To disable modules:  select them, then apply the Disable command in
	the Edit Menu.  To reenable modules:  select them, then apply the
	Enable command.

	Disabling a module does not cause the links to that module to
	disappear.  However, any modules linked to the disabled module on
	the downstream side are implicitly disabled as well.  The modules
	that are explicitly disabled are drawn with diagonal stripes.
	The implicitly disabled modules are drawn normally, but the links
	leading to them are drawn with diagonal stripes, to remind the user
	that nothing will be passed through those pipes.

    Delete Module

    	To delete modules, first select them, then apply the Delete command
	in the Edit Menu.  All selected modules and links will be deleted.


 Manipulating Links in the Canvas Window
 ---------------------------------------

    Add Link

    	A link may be added in three ways:

	1) Left-click and drag from port A to port B.
	2) Click on port A.  The border of port A will begin to blink.
	   Next click on port B.  Port A's border will stop blinking and
	   a link will be drawn between the two.
	3) Select the destination module and port with the controls in the
	   Port Dialog (see the Port Dialog section below).

	There are some restrictions on which ports may be linked together.
	The main restriction is that an output port must link with an input
	port.  See the Port Dialog section below for more details.

    Select Link

    	Links are selected the same way that modules are:  by left-clicking
	on the link.  Multiple selections are made with Control-left-click.

    Move Link

    	Since a link is attached to a module at either end, the link
	automatically moves when either module does.

    Move Link Segment

    	A horizontal or vertical segment of a link may be moved by left-
	clicking and dragging it (the end segments are attached to modules
	and cannot be dragged).  Link corners may also be dragged.

    Add or Delete Link Segments

    	A link may be divided up into more segments, in order to reposition
	it for the sake of clarity.  To divide a segment (into three new
	segments), right-click on the segment, away from its endpoints.
	The appearance of the link does not change immediately, but you can
	now drag either side to a new position.

	To remove segments and simplify the link, right-click at a corner
	of the link.  If possible, the segments making up the corner are
	removed.

    Disable Link

    	Links are never explicitly disabled, only implicitly by disabling
	one of the attached modules.  See `Disable Modules' above.

    Delete Link

    	Links are deleted the same way that modules are:  select the link(s)
	to delete, then apply the Delete command in the Edit Menu.


 File Menu
 ---------

    The Canvas File Menu controls the creation of flowsheet files.  A
    flowsheet file (suffix .flo) is a Bourne shell script that will run a
    flowsheet made in the canvas.  Besides being executable, the flowsheet
    file may be read back into the canvas for further modifications.  The
    flowsheet does not need to be in a runnable state (all necessary links
    made, required parameters set, etc.) in order for it to be saved to
    file.  Any problems with the runnability of the file are reported when
    it is executed.

    New		Clear canvas and start a new flowsheet.
    Open	Read in an existing flowsheet file.
    Save	Save flowsheet in canvas to file.
    Save As	Save flowsheet to file, prompting for file name.
    Exit	Exit application, closing ALL windows of the application.

    If the current flowsheet in the canvas is to be cleared or replaced,
    and it has been modified, the user is prompted to save the flowsheet
    to file.  Saving the flowsheet is optional.


 Edit Menu
 ---------

    Undo, Redo

    	From the moment a flowsheet is begun or read into the canvas, all
	changes to it may be undone with the Undo command.  The changes may
	be reapplied with the Redo command, as long as the user has not made
	some new change to the flowsheet.  Undoable changes include any
	operation done in the Canvas Window, as well as any changes to a
	module's parameters done in the Parameter List Window.

    Enable, Disable

    	Enable or disable the selected modules.  See the section "Disable/
	Enable Module" above.  Only modules may be explicitly enabled or
	disabled; selected links are ignored.

    Add

    	Raise Module List Window, in order to add new modules to the canvas.

    Delete

    	Delete all selected objects.


 Canvas Window Mouse and Keyboard Commands
 -----------------------------------------

    Following is a summary of mouse commands and keyboard shortcuts for the
    Canvas Window.  Left click indicates mouse button 1 and right click
    indicates mouse button 3.

    Left click		Select single object:  module or link.
    Ctrl left click	Toggle selection state of object.
    Left click & drag	On module, move single module or selected modules.
    			On link, move link segment.
    Right click		On module, raise Parameter List.
    			On port, raise Parameter List to edit port.
			At center of link segment, divide the segment.
			At the corner of two link segments, remove segments
			(if possible).
    Tab, Shift-Tab	Scroll through objects (module or link) from top to
    			bottom, doing single selection on each.
    Alt-N		New
    Alt-S		Save
    Alt-A		Save As
    Alt-P		Print
    Alt-X		Exit
    Alt-U		Undo
    Alt-R		Redo
    Page Up		Enable
    Page Down		Disable
    Insert		Add
    Delete		Delete


 Module List Window
 ------------------

    Use the module list to browse modules (individual programs) in the SU
    package.  Modules are organized into categories, and may be listed
    under more than one category.  The special category `All Modules' is
    an alphabetical index to all available modules.

    The Module List Window may be raised with the `Add' button from the
    canvas Edit menu, or from the canvas Lists menu.

    Add Button

	The `Add' button adds the selected module to the canvas,
	automatically positioned below other modules present.  To place the
	module manually, click and drag from the Add button to any point in
	the canvas window.  When a module is added to the canvas, a unique
	numeric suffix is added to the module's name (for example,
	`segyread-1').  Any number of instances of a module may be added
	to the canvas.

    Param Button

	The `Param' button raises the Parameter List Window for the selected
	module.  If the selected module is instantiated (has a numeric
	suffix), the Parameter List modifies the parameters for just that
	module in the canvas.  If the selected module is not instantiated
	(no numeric suffix), the Parameter List changes the default values
	for the module.  The new default values are applied when a new
	instance of the module is added to the canvas.
    
    Help Button

	The `Help' button raises a Help Window for the selected module.

    Keyboard Shortcuts:

    	Up Arrow, Down Arrow	Browse modules in current category.
	Tab, Shift-Tab		Traverse items in window.
	Alt-<character>		Invoke button with underlined character.
	Space			Press highlighted button.
	Enter			Press Add button.
	Esc			Close window.


 Parameter List Window
 ---------------------

    The top half of the Parameter List Window shows a list of the possible
    parameters that may be set for the module, and their current values.
    Most parameters have defaults and do not have to be explicitly set.  A
    parameter is defined by a `key=value' pair, and if the parameter is set
    to its default, the value is enclosed in angle brackets (for example,
    `over=<1>').  If a parameter is defaulted, it is NOT placed on the
    command line of the SU module.

    The bottom half of the Parameter List Window is a dialog area used to
    edit the currently selected parameter.  The dialog area may be either a
    `Port Dialog' or a `Parameter Dialog', depending on whether the selected
    parameter is a port or not.  The two types of dialog are described
    separately below.

    The Parameter List Window may be raised by clicking on the `Param' button
    in the Module List Window, or by right-clicking on a module instance in
    the canvas.
    
    Keep Button
    
    	The window is modeless and stays on screen until the user closes it.
	If the user selects a different module, normally the contents of
	the window change to show the new module's parameters.  To keep the
	original contents up, toggle on the `Keep' button.

    Keyboard Shortcuts:

    	Up Arrow, Down Arrow	Select parameter/port from list.
	Tab, Shift-Tab		Traverse items in window.
	Alt-<character>		Invoke button with underlined character.
	Space			Press highlighted button.
	Enter			Press Enter button.
	Esc			Close window.


 Port Dialog
 -----------

    Parameters that name input and output files are called `ports', and are
    shown first in the parameter list, along with the standard I/O ports
    stdin and stdout (if used by the module).  A port is special in that it
    may be linked to the port of another module -- this applies to any port,
    not just stdin and stdout.

    The user has three choices for setting the port in the Port Dialog:

    1) Pipe
    
       Make a pipe by connecting the port to the port of another module.  A
       listbox lists the other modules to which it can be connected.  Once a
       module has been selected, a second listbox lists the available ports
       on that module.  Once the module and port have been selected, press
       the `Enter' button to make the connection.
       
       There are just a few restrictions on connecting ports: an input port
       may only be connected to an output port, and an input port may have
       no more than one connection.  A further restriction is that the data
       types of the two ports must match, however the user is given the
       opportunity to override this (when the warning dialog is posted).
       A port's data type is color-coded and shown in a box in the lower
       right corner of the dialog.

       Unlike an input port, an output port may have more than one connection.
       What this means is that the output from the module is replicated and
       sent to each of the other modules by use of Posix `tee' utility.

       The user may add, change or delete pipes by using the module and port
       listboxes.  To delete a pipe, select the blank entry in either listbox.
       To add a second pipe to an output port, just change the listbox entry.
       The first pipe will not be deleted in this case.

    2) File

       Assign the port to a file.  The file will be read, written, or accessed
       randomly depending on whether the port is (respectively) an input,
       output, or read-write port.  A file selection dialog may be raised by
       pressing the `File' button.  After a file name has been entered, press
       the `Enter' button to apply the change.  Any existing pipes connected
       to the port will be deleted.

    3) Other

       For an input port, zero values will be delivered to the port (via the
       Posix /dev/zero device).

       For an output port, the output will be discarded (by sending it to
       the Posix /dev/null device).

       For a read-write port, a temporary file will be created when the
       module is run.  The file is deleted when the module finishes.

    Enter Button

	Changes to a port value are applied when the `Enter' button (or key)
	is pressed.

    Default Button
    
    	The `Default' button clears the current value, reverting to the
	original default value.

    Undo and Redo Buttons
    
    	Use the `Undo' button to back out changes to ports, parameters, and
	to the canvas.  Use the `Redo' button to reapply the changes.  The
	action of the Undo or Redo button in the Parameter List Window is
	identical to the Undo/Redo action in the main canvas menu:  all
	modifications to the current flow are undone, in the order in which
	they were done, regardless of where they took place.


 Parameter Dialog
 ----------------

    Parameters that are not ports are edited in the Parameter Dialog (the
    lower half of the Parameter List Window).  The standard form for a
    parameter is `name=value' where name is normally fixed, and value may be
    modified by typing into the value entry field.  The `Enter' button must
    be pressed for the changes to take effect and to show the new value in the
    parameter list.

    Value List Button

	Some parameters require their value be one of a list of possible
	values (an `enumeration list').  Pressing the `List' button raises
	an Enumeration List Window from which a value can be chosen.  As
	long as the List button is latched down, any selection made in the
	List Window will be transferred to the entry field in the Parameter
	Dialog.  The List Window is modeless and may remain on the screen
	until the user dismisses it.  To "disconnect" the List Window from
	value selection in the Parameter Dialog, unlatch the List button.

    Value `<<' and `>>' Buttons

    	Some parameters allow multiple values to be assigned to the same
	name.  The values should be placed together in a comma-separated list
	with no embedded blanks, for example, "freq=0,10,50,60".  When such
	a combination value is present, use the `<<' (move left) and '>>'
	(move right) buttons to move among the individual values in the list.

    Name List Button

	Rarely, a module may accept a parameter having any name from an
	enumeration list.  These are called "variable-name" parameters.
	If a module has this capability, one of the lines in the parameter
	list will be labeled "CREATE PARAMETER".  When the parameter is
	selected, a name may be typed into the Parameter Name entry, or
	may be selected from an Enumeration List by pressing the `List'
	button.  The Name `List' button behaves in a manner identical to the
	Value `List' button:  it may be latched and unlatched.  After a new
	name and value are entered, press `Enter' to add the new parameter
	to the parameter list.

	An existing variable-name parameter may have both its name and value
	modified.  It can be told from a standard parameter by the fact that
	the name entry field and List button are enabled.

    Name Clear Button

    	Variable-name parameters are always optional and may be deleted from
	the parameter list.  To delete the parameter, press the Clear Button.

    Thumbwheel and 0/1 Buttons

	Normally, an integer or floating point value has to be typed into
	the value entry using the keyboard.  The thumbwheel and 0/1 buttons
	allow the user to enter a numeric value exclusively with the mouse.

	To change individual digits in the thumbwheel, click on a digit and
	drag the mouse vertically.  To change the sign of the value, click
	on the sign cell.  Floating point numbers may be entered either in
	fixed-point form or exponential form:  click on the `E' cell to
	toggle between the two forms.  In the exponential form, the sign and
	value of the exponent may be changed by clicking and/or dragging on
	it.  In the fixed-point form, the decimal point may be dragged left
	or right to change the precision of the number.

    Enter Button

	Changes to a parameter value are applied when the `Enter' button
	(or key) is pressed.

    Default Button
    
    	The `Default' button clears the current value, reverting to the
	original default value.

    Undo and Redo Buttons
    
    	Use the `Undo' button to back out changes to ports, parameters, and
	to the canvas.  Use the `Redo' button to reapply the changes.  The
	action of the Undo or Redo button in the Parameter List Window is
	identical to the Undo/Redo action in the main canvas menu.


 Enumeration List Window
 -----------------------

    An Enumeration List Window is raised when one value is to be selected
    from a list of possible values.  Like the Parameter List Window, it is
    modeless and may remain on the screen after the selection is made.

    Some enumerated lists are large.  For reference purposes the binary header
    (bhed) list and the trace header (thed) list may be displayed from the
    canvas Lists menu.

    Keep Button
    
    	The window is modeless and stays on screen until the user closes it.
	If the user selects a different enumeration list, normally the
	contents of the window change to show the new list.  To keep the
	original contents up, toggle on the `Keep' button.

    Enter Button
    Close Button

    	If a parameter value is being selected, update the parameter list
	and close this window.  The `Close' button closes the window without
	updating the parameter list.

    Keyboard Shortcuts:

    	Up Arrow, Down Arrow	Select item from list.
	Tab, Shift-Tab		Traverse items in window.
	Alt-<character>		Invoke button with underlined character.
	Space			Press highlighted button.
	Enter			Press Enter button.
	Esc			Close window.


 Help Window
 -----------

    A Help Window is raised with the `Help' button in either the Module
    List or Parameter List Window.  The online documentation for the
    selected module is shown in the window (i.e. the output of the command
    `sudoc <module>').

    Keep Button
    
    	The window is modeless and stays on screen until the user closes it.
	If the user requests help for a different module, the contents of
	the help window change.  To keep the original contents up, toggle on
	the `Keep' button.

    Keyboard Shortcuts:

    	Up Arrow, Down Arrow	Scroll document.
	Page Up, Page Down	Scroll document.
	Tab, Shift-Tab		Traverse items in window.
	Alt-<character>		Invoke button with underlined character.
	Space			Press highlighted button.
	Esc			Close window.


 Preferences
 -----------

    Upon exiting tksu, preference settings and positions of the various
    windows are remembered and saved to a Preferences file.  When the user
    next starts up tksu, the file is automatically read in and the preferences
    are restored.  The default location for the Preferences file is
    $(HOME)/.tksu.  It is safe to remove this file at any time in order to
    restore the defaults.


 Environment Variables
 ---------------------

    CWPROOT	The SU installation directory.  Required for running SU
    		modules.  Tksu uses it to verify that the SU package has
		been installed.

    HOME	The user's home directory.

    TKSU_LAYOUT	Full pathname of the Preferences file.  If not defined,
    		$(HOME)/.tksu is used as the Preferences file.

    TKSU_TMPDIR	Directory for temporary files and FIFOs.  If not defined
    		in the environment or in the Preferences file, it is set
		to /tmp/tksu.

    TKSU_PATH	Search path for custom tksu spec files (a colon-delimited
    		list of directories).  To add a custom module to tksu,
		create a "spec" entry for it in a file with suffix .spec,
		and place the file in a directory listed in TKSU_PATH.  On
		startup, tksu will scan every directory in the path, reading
		every *.spec file it finds.  See README.spec for a complete
		description of the spec file format.


 Running Flowsheets
 ------------------

    For the purposes of execution, a flowsheet is divided up into module
    groups.  By definition, the modules of a group are connected via links
    (directly or indirectly), and will run simultaneously.  Different module
    groups run sequentially, a module group waiting for the previous group
    to finish.  The order in which the groups are run depends on their top-
    to-bottom order in the flowsheet.
    
    Any disabled module is treated as if it and its links did not exist.  An
    enabled module that pipes data to a disabled module will actually send it
    to /dev/null.

    The first stage of a run is to check the module parameters for obvious
    errors or omissions.  The problems that tksu can check for are limited
    to (a) parameters out of range, and (b) required parameters that are
    missing.  Further parameter checks are done by the individual modules
    when they are run, so it is often the case that the flowsheet may pass
    the tksu check stage and fail when the modules are run.  The log files
    must then be examined to determine which module failed and what it
    reported the problem to be.

    The next stage of a run is to create named pipes (Posix FIFOs) in the
    directory `TempDir' (/tmp/tksu by default).  The FIFOs are automatically
    removed if the flowsheet script completes normally.  If the script is
    terminated manually, then the FIFO files should eventually be removed by
    hand, since it is possible for a large number of them to accumulate in a
    short time.  The FIFOs in TempDir have the script's process ID embedded
    in their names, so it is safe to remove those files corresponding to a
    process that is no longer running.

    The final stage is to start up all modules and set them communicating
    with each other through the named pipes.  SU modules typically use stdin
    and stdout for data ports and write their diagnostics to stderr.  The
    stderr output from all modules is collected by the flowsheet script and
    directed to its own stderr, which may be written to a log file.

    Since there are very few restrictions made by tksu on links between
    modules, it is easy in many cases to create a flowsheet which "locks up"
    when it runs.  An example may make this clear.  Suppose output ports 1
    and 2 of module A are connected to input ports 1 and 2 of module B,
    respectively.  If module A is designed to write to port 1 first, and
    module B is designed to read from port 2 first, the run will lock up
    when module A is blocked from making any further writes to port 1,
    which B never reads.  This requires the user to have a knowledge of how
    a module works, especially when multiple input links are made to it.
    It is known that segyread and segywrite will lock up in this way if
    their su, ahed and bhed ports are linked together.

    Feedback loops are also possible with tksu, in which the output of a
    later module may be fed back into an earlier module.  Whether this is
    a mistake or not depends entirely on the capabilities of the module
    accepting the input, not tksu.


 Canvas Go Menu
 --------------

    Flowsheet scripts may be run from inside tksu, using the commands in the
    Go Menu.  Since the flowsheet is an executable shell script, it may also
    be run outside of tksu.

    Check Flow

    	Run only the check stage of the current flowsheet.  Tksu-detected
	errors and warnings are reported in the log output.

    Run Flow

    	Run the check stage of the current flowsheet, and if it passes, start
	processing in the background.  The current flowsheet is the one shown
	in the canvas.

    Kill Flow

    	Tksu knows about the flows (processes) that are currently running by
	monitoring the contents of TempDir.  The Kill command raises a
	submenu listing the currently active flows, identified by flowsheet
	name and process ID.  Select the flow to be killed.

    Flowsheets

    	Flowsheet files (other than the current flowsheet) may be selected
	and run with this command.

    Log Files

    	Log files from previous runs may be browsed with this command.

    Show log during run

    	If this preference is enabled, the log output from a run is scrolled
	into a window as the run proceeds.  Currently the log browser is the
	utility `less' displaying into a dedicated xterm window.

    Save log to file

    	If this preference is enabled, the log output from a run is saved
	to a log file.  The log file is placed in the same directory as the
	flowsheet file, and has the same name except for the suffix being
	replaced with ".log".

 CVS: $id$

