#! /bin/sh
#
# tksu --
#
#	Startup script for tksu application.  Tksu is a graphical front end to
#	the SU seismic processing package.  It allows the user to create shell
#	scripts for running programs (or `modules') in the SU package.
#	Dialogs are available for selecting modules and for setting command
#	line parameters for each module.  Pipes may be established from any
#	output port of module A to any input port of module B, although tksu
#	will verify that the data types of the input and output ports are
#	consistent.  The user may notify tksu of new, customized SU modules
#	by providing a simple specification file that defines the command
#	line arguments and the I/O properties of the new module.  A flowsheet
#	may be graphically built that defines the processing flow within a
#	connected network of SU modules.  After a flowsheet is created and
#	saved, the associated shell script may be interactively run from tksu,
#	with the log output displayed to a window.
#
# Usage: tksu [--help] [--version] [--installdir] [--layout file] [flowsheet]
#
#	--help		Report usage line and exit.
#	--version	Report current version number and exit.
#	--installdir	Report installation directory and exit.
#
#	--layout file	The `file' specifies a Tcl script file that contains
#			program preferences saved from a previous session.
#			If not given, defaults to $HOME/.tksu.
#
#	`flowsheet'	The initial flowsheet (.flo) file to be displayed.
#
# Values that need to be configured in this file:
#
#	wish8.0		The version of wish to use.
#	tksuDir		Installation directory for tksu.
#
# Copyright (C) 2002 Henry Thorson Consulting.  All rights reserved.
#
# This program is licensed under the terms of the GNU General Public License,
# version 2 (or any later version).  See the file `COPYING' for full details,
# and for a DISCLAIMER OF ALL WARRANTIES.
#
# CVS: $Id: tksu.in,v 1.2 2002/09/20 02:43:33 jeff Exp $
#
# The next line restarts using wish \
exec wish8.0 "$0" "$@"

# Notify Tcl to search directory `tksuDir' for the package.
# Environment variable TCLLIBPATH could also be used.

set tksuDir @tksuDir@

global env auto_path
lappend auto_path $tksuDir

# Get the current version number, which is recorded in the file
# $tksuDir/VERSION.

if [catch {
    set fid [open [file join $tksuDir VERSION] r]
    set tksuVersion [string trim [gets $fid]]
    close $fid
}] {
    puts "tksu error: VERSION file not found"
    exit 1
}

# Load the package and invoke the main procedure.

package require tksu $tksuVersion
namespace import tksu::tksu

global argv
eval tksu $argv
