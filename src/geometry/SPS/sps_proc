#!/bin/nawk -f

#=======================================================================
#   This awk script reads an SPS location file named "sps.txt" from
#   the current directory and generates a table of source-receiver
#   coordinates to write into the headers using a2b and sushw.
#
#   Awk has the very useful property that it can use any arbitrary
#   string as an array index. This script relies on that property to
#   implement geometry processing w/ very little effort.
#
#   This was written w/ reference to a single SPS file and seismic
#   line so it is unlikely to work w/ any other data set. However,
#   it illustrates how to do this using the string indexed array
#   facility in awk. It should not be too hard to particularize the
#   script for another dataset.
#
#   Note: I use Sun's Solaris operating system (like God intended)
#   where the awk of "The Awk Programming Language" by Aho,
#   Kernighan and Weinberger resides as /bin/nawk. On other systems
#   this may be called /bin/awk. There is also a Gnu implementation
#   of awk which may be usable. Source code for "the one true awk" can
#   be found by using google on that phrase.
#
#   If you don't understand how to write a Unix script or don't have a
#   copy of "The Awk Programming Language" please don't ask me for
#   help with this script.  There are many other sources for basic 
#   information.
#
#   The input expected is an SPS file and the output from:
#       sugethw output=geometry key=.....
#
#   NB: the | in the debug printf statements are there because white
#   space matters.
#
#   Reginald H. Beardsley  
#=======================================================================

BEGIN{

#-----------------------------------------------------------------------
#   This segment parses the SPS file and extracts the source &
#   receiver coordinates and the cross reference table.  In this
#   instance, no interpolation of source or receiver positions is
#   needed, so all we need to do is build a table for later use.
#-----------------------------------------------------------------------

   while( getline < ARGV[1] > 0 ){

      # process the source coordinates

      if( $0 ~/^S/ ){
      
         # chop off leading whitespace from shot number

         Shot = sprintf( "%.1f" ,substr( $0 ,18 ,8 ) );
      
         # read the shot coordinate information

         Shot_I[Shot] = substr( $0 ,26 ,1 );
         Shot_X[Shot] = substr( $0 ,47 ,9  );
         Shot_Y[Shot] = substr( $0 ,56 ,10 );
         Shot_Z[Shot] = substr( $0 ,66 ,6  );
      
      # debug output I used while writing this
      #   printf( "|%s|"    ,Shot         );
      #   printf( "|%d|"     ,Shot_I[Shot] );
      #   printf( "|%10.1f|" ,Shot_X[Shot] );
      #   printf( "|%10.1f|" ,Shot_Y[Shot] );
      #   printf( "|%10.1f|" ,Shot_Z[Shot] );
      
      #   printf( "\n" );
      
      }

      
      # process the receiver coordinates

      if( $0 ~/^R/ ){
      
         
         # chop off leading whitespace

         Rcvr = sprintf( "%.1f" ,substr( $0 ,18 ,8 ) );
      
         # read the receiver coordinate information

         Rcvr_I[Rcvr] = substr( $0 ,26 ,1 );
         Rcvr_X[Rcvr] = substr( $0 ,47 ,9  );
         Rcvr_Y[Rcvr] = substr( $0 ,56 ,10 );
         Rcvr_Z[Rcvr] = substr( $0 ,66 ,6  );
      
      # debug output I used while writing this
      #   printf( "|%8s|"    ,Rcvr         );
      #   printf( "|%d|"     ,Rcvr_I[Rcvr] );
      #   printf( "|%10.1f|" ,Rcvr_X[Rcvr] );
      #   printf( "|%10.1f|" ,Rcvr_Y[Rcvr] );
      #   printf( "|%10.1f|" ,Rcvr_Z[Rcvr] );
      
      #   printf( "\n" );
      
      }
   
      # process the cross reference table

      if( $0 ~/^X/ ){
      
         # chop off leading whitespace

         fldr = sprintf( "%d" ,substr( $0 ,8 ,4 ) );
      
         # read the cross reference information

         ep[fldr]    = substr( $0 ,30 ,8 );
      
         rcvr_1[fldr]  = substr( $0 ,64 ,8 );
         rcvr_2[fldr]  = substr( $0 ,72 ,8 );

         ch_inc = substr( $0 , 47 ,1 );
      
      # debug output I used while writing this
      #   printf( "|%s|" ,fldr   );
      #   printf( "|%s|" ,ep[fldr]      );
      #   printf( "|%s|" ,rcvr_1[fldr]  );
      #   printf( "|%s|" ,rcvr_2[fldr]  );
      #   printf( "|%s|" ,ch_inc );
     
      #   printf( "\n" );
      }
   }

   ARGV[1] = "";
}


#-----------------------------------------------------------------------
# This segment processes the trace header table specified on the 
# commandline.  In my example, the shot gather index was the 3rd token
# and the receiver index was the 4th token.  It is highly unlikely that
# this will match your dataseet.
#-----------------------------------------------------------------------

{

   SP = $3;   # shot gather index 
   RC = $4;   # receiver index within gather

   printf( "%4d " ,SP  );
   printf( "%4d " ,RC  );

   # reformat to match SPS string used as array index and calculate Rcvr index string

   Shot = sprintf( "%.1f" ,ep[SP]                );
   Rcvr = sprintf( "%.1f" ,rcvr_1[SP] + RC - 1.0 );

   DX = (Shot_X[Shot] - Rcvr_X[Rcvr]);
   DY = (Shot_Y[Shot] - Rcvr_Y[Rcvr]);

   printf( "%8s " ,Shot );
   printf( "%8s " ,Rcvr );

   printf( "%10.1f " ,Shot_X[Shot] );
   printf( "%10.1f " ,Shot_Y[Shot] );
   printf( "%10.1f " ,Shot_Z[Shot] );

   printf( "%10.1f " ,Rcvr_X[Rcvr] );
   printf( "%10.1f " ,Rcvr_Y[Rcvr] );
   printf( "%10.1f " ,Rcvr_Z[Rcvr] );

   printf( "%10.1f " ,0.5*(Shot_X[Shot] + Rcvr_X[Rcvr]) );
   printf( "%10.1f " ,0.5*(Shot_Y[Shot] + Rcvr_Y[Rcvr]) );

   printf( "%10.1f " ,sqrt( DX*DX + DY*DY ));

   printf( "\n" );

}
