head	1.13;
access;
symbols;
locks; strict;
comment	@ * @;


1.13
date	2011.11.21.17.02.44;	author john;	state Exp;
branches;
next	1.12;

1.12
date	2011.11.12.00.47.45;	author john;	state Exp;
branches;
next	1.11;

1.11
date	2011.09.09.22.36.43;	author john;	state Exp;
branches;
next	1.10;

1.10
date	2001.12.05.17.14.15;	author john;	state Exp;
branches;
next	1.9;

1.9
date	97.07.29.15.42.23;	author john;	state Exp;
branches;
next	1.8;

1.8
date	96.07.01.15.56.55;	author jkc;	state Exp;
branches;
next	1.7;

1.7
date	95.03.10.15.35.33;	author jstockwe;	state Exp;
branches;
next	1.6;

1.6
date	94.11.29.13.24.08;	author jstockwe;	state Exp;
branches;
next	1.5;

1.5
date	94.04.13.18.08.35;	author jstockwe;	state Exp;
branches;
next	1.4;

1.4
date	94.03.22.10.23.03;	author jstockwe;	state Exp;
branches;
next	1.3;

1.3
date	91.09.25.08.13.09;	author jkcohen;	state Exp;
branches;
next	1.2;

1.2
date	90.06.08.15.04.34;	author dhale;	state Exp;
branches;
next	1.1;

1.1
date	90.05.25.15.13.04;	author dhale;	state Exp;
branches;
next	;


desc
@manipulate images with X
@


1.13
log
@copyright
@
text
@/* Copyright (c) Colorado School of Mines, 2011.*/
/* All rights reserved.                       */

/* Copyright (c) Colorado School of Mines, 2011.*/
/* All rights reserved.                       */

/* Copyright (c) Colorado School of Mines, 2001.*/
/* All rights reserved.                       */

/* Copyright (c) Colorado School of Mines, 1998.*/
/* All rights reserved.                       */

/*********************** self documentation **********************/
/*****************************************************************************
IMAGE - Function for making the image in an X-windows image plot

xNewImage	make a new image of pixels from bytes

******************************************************************************
Function Prototype:
XImage *xNewImage (Display *dpy, unsigned long pmin, unsigned long pmax,
	int width, int height, float blank, unsigned char *bytes);

******************************************************************************
Input:
dpy		display pointer
pmin		minimum pixel value (corresponding to byte=0)
pmax		maximum pixel value (corresponding to byte=255)
width		number of bytes in x dimension
height		number of bytes in y dimension
blank		portion for blanking (0 to 1)
bytes		unsigned bytes to be mapped to an image

******************************************************************************
Author:	  Dave Hale, Colorado School of Mines, 06/08/90
Revision: Brian Zook, Southwest Research Institute, 6/27/96 added blank option
	  This allows replacing the low end by the background.
*****************************************************************************/
/**************** end self doc ********************************/

#include "xplot.h"


XImage *xNewImage (Display *dpy, unsigned long pmin, unsigned long pmax,
	int width, int height, float blank, unsigned char *bytes)
/*****************************************************************************
make a new image of pixels from bytes
******************************************************************************
Input:
dpy		display pointer
pmin		minimum pixel value (corresponding to byte=0)
pmax		maximum pixel value (corresponding to byte=255)
width		number of bytes in x dimension
height		number of bytes in y dimension
blank		portion for blanking (0 to 1)
bytes		unsigned bytes to be mapped to an image
******************************************************************************
Author:		Dave Hale, Colorado School of Mines, 06/08/90
*****************************************************************************/
{
	int scr=DefaultScreen(dpy);
	int i,j,k,line,iline,jline,widthpad;
	float base,scale;
	unsigned long map[256],bkgnd;
	unsigned char *data;
	int byte_perpixel;
	unsigned int depth;
	XImage *xim;
	
	xim=(XImage *) NULL;

	depth=(unsigned int)DefaultDepth(dpy,scr);	
	byte_perpixel=4;
	if(depth<=8) byte_perpixel=1;
	else if(depth<=16) byte_perpixel=2;

/*	else if(depth<=24) byte_perpixel=3;*/



	/* build map for translating bytes to pixels */
	base = ((double) pmin)+0.499;
	scale = ((double) (pmax-pmin))/255.0;
	for (i=0; i<=255; ++i){
		map[i] = base+i*scale;
	}

	/* blanking */
	bkgnd = (unsigned long) WhitePixel(dpy,scr);
	j = MAX(0,MIN(256,(int)(256*blank)));
	for (i = 0; i < j; i++)
		map[255-i] = bkgnd;

	/* allocate memory for image data */
	widthpad = (1+(width-1)/(BitmapPad(dpy)/8))*BitmapPad(dpy)/8;
	data = ealloc1(widthpad*height,byte_perpixel);

	xim=XCreateImage(	(Display *) dpy,
				(Visual *) DefaultVisual(dpy,scr),
				(unsigned int) DefaultDepth(dpy,scr),
				(int) ZPixmap,
				(int) 0,
				(char *) data,
				(unsigned int) widthpad,
				(unsigned int) height,
/*				(int) BitmapPad(dpy),
				(int) widthpad*byte_perpixel
*/
				8,0);
	byte_perpixel=xim->bits_per_pixel/8;
/*	fprintf(stderr,"\nbyte_perpixel = %d, depth= %d\n", byte_perpixel,depth); */

	/* translate bytes to pixels, padding scanlines as necessary */
	for (line=0; line<height; line++) {
		iline = line*width;
		jline = line*widthpad;
		for (i=iline,j=jline,k=0; k<width; ++i,++j,++k)
		{       if(byte_perpixel==1)
			((unsigned char *)data)[j] =(unsigned char)map[bytes[i]];
			if(byte_perpixel==2)
			  {
			    int edn=xim->byte_order;
			    if(edn==LSBFirst){
			      ((unsigned char *)data)[j*2+0] =(unsigned char)(truecolor_pixel[bytes[i]]);
			      ((unsigned char *)data)[j*2+1] =(unsigned char)(truecolor_pixel[bytes[i]]>>8);
			    }else{
			      ((unsigned char *)data)[j*2+0] =(unsigned char)(truecolor_pixel[bytes[i]]>>24); 
			      ((unsigned char *)data)[j*2+1] =(unsigned char)(truecolor_pixel[bytes[i]]>>16);
			      }

			    /*((unsigned short *)data)[j] =(unsigned short)(truecolor_pixel[bytes[i]]);*/
			  }	
                        if(byte_perpixel==3){
			  int edn=xim->byte_order;
			  if(edn==LSBFirst){
			    ((unsigned char *)data)[j*3+0] =(unsigned char)(truecolor_pixel[bytes[i]]);
			    ((unsigned char *)data)[j*3+1] =(unsigned char)(truecolor_pixel[bytes[i]]>>8);
			    ((unsigned char *)data)[j*3+2] =(unsigned char)(truecolor_pixel[bytes[i]]>>16);
			  }else{
			    ((unsigned char *)data)[j*3+0] =(unsigned char)(truecolor_pixel[bytes[i]]>>24);   
			    ((unsigned char *)data)[j*3+1] =(unsigned char)(truecolor_pixel[bytes[i]]>>16); 
			    ((unsigned char *)data)[j*3+2] =(unsigned char)(truecolor_pixel[bytes[i]]>>8);
			  }
			  
			}	
			if(byte_perpixel==4){
			  int edn=xim->byte_order;
			  if(edn==LSBFirst){
			    ((unsigned char *)data)[j*4+0] =(unsigned char)(truecolor_pixel[bytes[i]]);
			    ((unsigned char *)data)[j*4+1] =(unsigned char)(truecolor_pixel[bytes[i]]>>8);
			    ((unsigned char *)data)[j*4+2] =(unsigned char)(truecolor_pixel[bytes[i]]>>16);
			    ((unsigned char *)data)[j*4+3] =(unsigned char)(truecolor_pixel[bytes[i]]>>24);
			  }else{
			    ((unsigned char *)data)[j*4+0] =(unsigned char)(truecolor_pixel[bytes[i]]>>24);
			    ((unsigned char *)data)[j*4+1] =(unsigned char)(truecolor_pixel[bytes[i]]>>16);   
			    ((unsigned char *)data)[j*4+2] =(unsigned char)(truecolor_pixel[bytes[i]]>>8); 
			    ((unsigned char *)data)[j*4+3] =(unsigned char)(truecolor_pixel[bytes[i]]);
			  }
			    /* ((unsigned long *)data)[j] =(unsigned long)truecolor_pixel[bytes[i]];*/
			}

		}
		for (j=jline+width,k=width; k<widthpad; ++j,++k)
		{

		       if(byte_perpixel==1)
                        ((unsigned char *)data)[j] =((unsigned char *)data)[jline+width-1];
                        if(byte_perpixel==2)
			{
                       /* ((unsigned short *)data)[j] =((unsigned short *)data)[jline+width-1];*/
			 ((unsigned char *)data)[j*2+0] =((unsigned char *)data)[(jline+width-1)*2+0];
                        ((unsigned char *)data)[j*2+1] =((unsigned char *)data)[(jline+width-1)*2+1];
			}
                        if(byte_perpixel==3){
                        ((unsigned char *)data)[j*3+0] =((unsigned char *)data)[(jline+width-1)*3+0];
                        ((unsigned char *)data)[j*3+1] =((unsigned char *)data)[(jline+width-1)*3+1];
                        ((unsigned char *)data)[j*3+2] =((unsigned char *)data)[(jline+width-1)*3+2];
			}
                        if(byte_perpixel==4)
			{
                       ((unsigned char *)data)[j*4+0] =((unsigned char *)data)[(jline+width-1)*4+0];
                        ((unsigned char *)data)[j*4+1] =((unsigned char *)data)[(jline+width-1)*4+1];
                        ((unsigned char *)data)[j*4+2] =((unsigned char *)data)[(jline+width-1)*4+2];
                        ((unsigned char *)data)[j*4+3] =((unsigned char *)data)[(jline+width-1)*4+3];    
			}
		}
	}
	
	/* create and return image structure */
	return xim;


}




@


1.12
log
@copyright
@
text
@d4 3
@


1.11
log
@*** empty log message ***
@
text
@d1 3
@


1.10
log
@5 Dec 2001
@
text
@d1 3
d115 12
a126 1
                        ((unsigned short *)data)[j] =(unsigned short)(truecolor_pixel[bytes[i]]);
d128 26
a153 9
			int edn=xim->byte_order;
			if(edn==LSBFirst){
                        ((unsigned char *)data)[j*3+0] =(unsigned char)(truecolor_pixel[bytes[i]]);
			((unsigned char *)data)[j*3+1] =(unsigned char)(truecolor_pixel[bytes[i]]>>8);
			((unsigned char *)data)[j*3+2] =(unsigned char)(truecolor_pixel[bytes[i]]>>16);
			}else{
			((unsigned char *)data)[j*3+0] =(unsigned char)(truecolor_pixel[bytes[i]]>>24);   
                        ((unsigned char *)data)[j*3+1] =(unsigned char)(truecolor_pixel[bytes[i]]>>16); 
                        ((unsigned char *)data)[j*3+2] =(unsigned char)(truecolor_pixel[bytes[i]]>>8);
a155 4
			}	
			if(byte_perpixel==4)
                        ((unsigned long *)data)[j] =(unsigned long)truecolor_pixel[bytes[i]];

d163 5
a167 1
                        ((unsigned short *)data)[j] =((unsigned short *)data)[jline+width-1];
d174 6
a179 2
                        ((unsigned long *)data)[j] =((unsigned long *)data)[jline+width-1];

@


1.9
log
@Levin fixes for SGI
@
text
@d1 3
d34 1
d55 1
a55 1
	unsigned char map[256],bkgnd;
d57 14
d75 1
a75 1
	for (i=0; i<=255; ++i)
d77 1
d80 1
a80 1
	bkgnd = (unsigned char) WhitePixel(dpy,scr);
d87 16
a102 1
	data = ealloc1(widthpad*height,sizeof(unsigned char));
d109 21
a129 1
			data[j] = map[bytes[i]];
d131 15
a145 1
			data[j] = data[jline+width-1];
d149 3
a151 10
	return XCreateImage(	(Display *) dpy,
				(Visual *) DefaultVisual(dpy,scr),
				(unsigned int) DefaultDepth(dpy,scr),
				(int) ZPixmap,
				(int) 0,
				(char *) data,
				(unsigned int) widthpad,
				(unsigned int) height,
				(int) BitmapPad(dpy),
				(int) widthpad);
d153 4
@


1.8
log
@Added Brian Zook's blank option.
@
text
@d55 2
a56 2
	base = pmin+0.499;
	scale = (pmax-pmin)/255.0;
d61 1
a61 1
	bkgnd = WhitePixel(dpy,scr);
@


1.7
log
@cosmetic
@
text
@d10 1
a10 1
	int width, int height, unsigned char *bytes);
d19 1
d23 3
a25 1
Author:		Dave Hale, Colorado School of Mines, 06/08/90
d32 1
a32 1
	int width, int height, unsigned char *bytes)
d42 1
d51 1
a51 1
	unsigned char map[256];
d59 6
@


1.6
log
@added explicit casts in call to arguments of XCreateImage
@
text
@d1 1
d24 1
@


1.5
log
@cleaned up includes
@
text
@d69 10
a78 3
	return XCreateImage(dpy,DefaultVisual(dpy,scr),
		DefaultDepth(dpy,scr),ZPixmap,
		0,data,widthpad,height,BitmapPad(dpy),widthpad);
@


1.4
log
@added dummy selfdoc
@
text
@a23 1
#include "par.h"
@


1.3
log
@Included par.h instead of cwp.h since ealloc1 is used.
@
text
@d1 23
@


1.2
log
@modified xNewImage function and deleted xDrawImage function
@
text
@d1 1
a1 1
#include "cwp.h"
@


1.1
log
@Initial revision
@
text
@d1 1
a2 2
#include "cwp.h"
#include <X11/Xatom.h>
d4 2
a5 2
XImage *
xNewImage (Display *dpy, int width, int height, signed char *bytes)
d7 1
a7 1
make a new image from bytes via a standard colormap
d11 2
d15 1
a15 1
bytes		bytes to be mapped to an image
d17 1
a17 4
Notes:
RGB_DEFAULT_MAP is used to translate bytes to image data.
******************************************************************************
Author:		Dave Hale, Colorado School of Mines, 01/28/90
a19 1
	XStandardColormap scmap;
d21 1
a21 1
	int i,j,k,line,iline,jline,widthpad,pmin,pmax;
d23 2
a24 3
	char map0[256],*map;
	char *data;
	XImage *image;
a25 7
	/* get standard colormap */
	if (!XGetStandardColormap(dpy,RootWindow(dpy,scr),
		&scmap,XA_RGB_DEFAULT_MAP)) {
		fprintf(stderr,"xNewImage:  RGB_DEFAULT_MAP does not exist\n");
		exit(-1);
	}

d27 3
a29 8
	pmin = scmap.base_pixel;
	pmax = scmap.base_pixel+scmap.red_max*scmap.red_mult +
		scmap.green_max*scmap.green_mult +
		scmap.blue_max*scmap.blue_mult;
	base = (pmax+pmin+1.0)/2.0;
	scale = (pmax-pmin+1.0)/256.0;
	map = map0+128;
	for (i= -128; i<=127; i++)
d34 1
a34 1
	data = (char*)malloc(widthpad*height);
d46 2
a47 2
	/* create image structure */
	image = XCreateImage(dpy,DefaultVisual(dpy,scr),
a49 65

	return image;
}

void
xDrawImage (Display *dpy, Window win,
	int x, int y, int width, int height,
	int n1, int n2, signed char *z)
/*****************************************************************************
draw image of a 2-D array of bytes
******************************************************************************
Input:
dpy		display
win		window
x		x coordinate of upper left corner of image
y		y coordinate of upper left corner of image
width		width of image
height		height of image
n1		1st (horizontal) dimension of array of bytes
ny		2nd (vertical) dimension of array of bytes
z		array[n1*n2] of bytes
******************************************************************************
Notes:
Bilinear interpolation is used to compute image pixels
******************************************************************************
Author:		Dave Hale, Colorado School of Mines, 01/28/90
*****************************************************************************/
{
	GC gc;
	XGCValues *values;
	XImage *image;
	int nxin,nyin,nxout,nyout;
	float dxin,fxin,dyin,fyin,fxout,dxout,fyout,dyout;
	signed char *zout;

	/* determine image sampling for interpolation */
	nxin = n1;
	nyin = n2;
	dxin = dyin = 1.0;
	fxin = fyin = fxout = fyout = 0.0;
	nxout = width;
	nyout = height;
	dxout = dxin*(float)(nxin-1)/(float)(nxout-1);
	dyout = dyin*(float)(nyin-1)/(float)(nyout-1);

	/* allocate space for interpolated bytes */
	zout = (signed char*)malloc(nxout*nyout);

	/* interpolate */
	intl2b(nxin,dxin,fxin,nyin,dyin,fyin,z,
		nxout,dxout,fxout,nyout,dyout,fyout,zout);

	/* make image */
	image = xNewImage(dpy,nxout,nyout,zout);

	/* make graphics context */
	gc = XCreateGC(dpy,win,0,values);

	/* put image to window */
	XPutImage(dpy,win,gc,image,0,0,x,y,image->width,image->height);

	/* free resources before returning */
	free(zout);
	XDestroyImage(image);
	XFreeGC(dpy,gc);
@
