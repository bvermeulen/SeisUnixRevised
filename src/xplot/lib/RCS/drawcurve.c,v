head	1.4;
access;
symbols;
locks
	john:1.4; strict;
comment	@ * @;


1.4
date	2011.11.21.17.02.44;	author john;	state Exp;
branches;
next	1.3;

1.3
date	2011.11.12.00.47.45;	author john;	state Exp;
branches;
next	1.2;

1.2
date	99.01.14.22.50.24;	author john;	state Exp;
branches;
next	1.1;

1.1
date	99.01.11.22.20.52;	author john;	state Exp;
branches;
next	;


desc
@Brian Macy's curve drawing routines
@


1.4
log
@copyright
@
text
@/* Copyright (c) Colorado School of Mines, 2011.*/
/* All rights reserved.                       */

/* Copyright (c) Colorado School of Mines, 2011.*/
/* All rights reserved.                       */

/* DRAWCURVE: $Revision: 1.3 $ ; $Date: 2011/11/12 00:47:45 $	*/

/*********************** self documentation **********************/
/*****************************************************************************
DRAWCURVE - Functions to draw a curve from a set of points

xDrawCurve	draw a curve from a set of points
*****************************************************************************
Function Prototypes:
void xDrawCurve(Display *dpy, Window win,
		int x, int y, int width, int height,
		float x1beg, float x1end, float p1beg, float p1end,
		float x2beg, float x2end, float p2beg, float p2end,
		float *x1curve, float *x2curve, int ncurve,
		char *curvecolor, int style);
*****************************************************************************
xDrawCurve:
Input:
dpy		display pointer
win		window
x		x coordinate of upper left corner of box
y		y coordinate of upper left corner of box
width		width of box
height		height of box
x1beg		axis value at beginning of axis 1
x1end		axis value at end of axis 1
p1beg		pad value at beginning of axis 1
p1end		pad value at end of axis 1
x2beg		axis value at beginning of axis 2
x2end		axis value at end of axis 2
p2beg		pad value at beginning of axis 2
p2end		pad value at end of axis 2
x1curve		vector of x1 coordinates for points along curve
x2curve		vector of x2 coordinates for points along curve
ncurve		number of points along curve
curvecolor	name of color to use for axes
int style	NORMAL (axis 1 on bottom, axis 2 on left)
		SEISMIC (axis 1 on left, axis 2 on top)

******************************************************************************
Author:		Brian Macy, Phillips Petroleum Co., 11/14/98
		(Adapted after Dave Hale's xDrawAxesBox routine)
*****************************************************************************/
/**************** end self doc ********************************/

#include "xplot.h"

void xDrawCurve(Display *dpy, Window win,
		int x, int y, int width, int height,
		float x1beg, float x1end, float p1beg, float p1end,
		float x2beg, float x2end, float p2beg, float p2end,
		float *x1curve, float *x2curve, int ncurve,
		char *curvecolor, int style)
/*****************************************************************************
draw a curve from a set of points
******************************************************************************
Input:
dpy		display pointer
win		window
x		x coordinate of upper left corner of box
y		y coordinate of upper left corner of box
width		width of box
height		height of box
x1beg		axis value at beginning of axis 1
x1end		axis value at end of axis 1
p1beg		pad value at beginning of axis 1
p1end		pad value at end of axis 1
x2beg		axis value at beginning of axis 2
x2end		axis value at end of axis 2
p2beg		pad value at beginning of axis 2
p2end		pad value at end of axis 2
x1curve		vector of x1 coordinates for points along curve
x2curve		vector of x2 coordinates for points along curve
ncurve		number of points along curve
curvecolor	name of color to use for axes
int style	NORMAL (axis 1 on bottom, axis 2 on left)
		SEISMIC (axis 1 on left, axis 2 on top)
******************************************************************************
Author:		Brian Macy, Phillips Petroleum Co., 11/14/98
		(Adapted after Dave Hale's xDrawAxesBox routine)
*****************************************************************************/
{
	GC gcc;
	XGCValues *values=NULL;
	XColor scolor,ecolor;
	XWindowAttributes wa;
	Colormap cmap;
	float xbase,ybase,xscale,yscale;
	float xamin,xamax,yamin,yamax;
	float *xcurve,*ycurve;
	XPoint *lpoints;   /* points for drawing line */
	XRectangle rectclip;
	int i;

	/* allocate memory for lpoints */
	if ((lpoints=(XPoint *)malloc(ncurve*sizeof(XPoint)))==NULL) {
		fprintf(stderr,"Cannot allocate memory for lpoints\n");
		exit(-1);
	}

	/* create graphics contexts */
	gcc = XCreateGC(dpy,win,0,values);

	/* determine window's current colormap */
	XGetWindowAttributes(dpy,win,&wa);
	cmap = wa.colormap;

	/* get and set colors */
	if (XAllocNamedColor(dpy,cmap,curvecolor,&scolor,&ecolor))
		XSetForeground(dpy,gcc,ecolor.pixel);
	else
		XSetForeground(dpy,gcc,1L);

	if (style==NORMAL) {
		xamin = (x1beg<x1end)?x1beg:x1end;
		xamax = (x1beg>x1end)?x1beg:x1end;
		xscale = width/(x1end+p1end-x1beg-p1beg);
		xbase = x-xscale*(x1beg+p1beg);
		yamin = (x2beg<x2end)?x2beg:x2end;
		yamax = (x2beg>x2end)?x2beg:x2end;
		yscale = -height/(x2end+p2end-x2beg-p2beg);
		ybase = y+height-yscale*(x2beg+p2beg);
		xcurve=x1curve;
		ycurve=x2curve;
	} else {
		xamin = (x2beg<x2end)?x2beg:x2end;
		xamax = (x2beg>x2end)?x2beg:x2end;
		xscale = width/(x2end+p2end-x2beg-p2beg);
		xbase = x-xscale*(x2beg+p2beg);
		yamin = (x1beg<x1end)?x1beg:x1end;
		yamax = (x1beg>x1end)?x1beg:x1end;
		yscale = height/(x1end+p1end-x1beg-p1beg);
		ybase = y-yscale*(x1beg+p1beg);
		ycurve=x1curve;
		xcurve=x2curve;
	}

	/* Set up clip rectangle (only allows drawing inside rect.) */
	rectclip.x = (short) x;
	rectclip.y = (short) y;
	rectclip.width  = (unsigned short) width;
	rectclip.height = (unsigned short) height;
	XSetClipRectangles(dpy,gcc,0,0,&rectclip,1,Unsorted);

	/*
	 * Draw a curve from the input data xcurve,ycurve.
	 */
	for (i=0; i<ncurve; ++i) {
		lpoints[i].x=(short) (xbase+xscale*xcurve[i]);
		lpoints[i].y=(short) (ybase+yscale*ycurve[i]);
	}
	if (ncurve==1)
		XDrawPoints(dpy,win,gcc,lpoints,ncurve,CoordModeOrigin);
	else if (ncurve > 1)
		XDrawLines(dpy,win,gcc,lpoints,ncurve,CoordModeOrigin);

	/* free resources before returning */
	XFreeGC(dpy,gcc);
	free(lpoints);
}
@


1.3
log
@copyright
@
text
@d4 4
a7 1
/* DRAWCURVE: $Revision: 1.2 $ ; $Date: 1999/01/14 22:50:24 $	*/
@


1.2
log
@Brian Macy's latest version
@
text
@d1 4
a4 1
/* DRAWCURVE: $Revision: 1.5 $ ; $Date: 1999/01/05 23:14:22 $	*/
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/* DRAWCURVE: $Revision: 1.4 $ ; $Date: 1998/12/07 23:56:43 $	*/
a7 1
lseg_intersect	determine the intersection of two line segments
a15 4
int lseg_intersect(float x1, float y1, float x2, float y2,
		   float x3, float y3, float x4, float y4,
		   float *xint, float *yint, float *lseg);

a40 17
lseg_intersect:
Input:
x1		x coordinate of point 1
y1		y coordinate of point 1
x2		x coordinate of point 2
y2		y coordinate of point 2
x3		x coordinate of point 3
y3		y coordinate of point 3
x4		x coordinate of point 4
y4		y coordinate of point 4

Output:
xint		x coordinate of intersection point
yint		y coordinate of intersection point
lseg		distance from (x1,y1) to (xint,yint)

******************************************************************************
a47 4
int lseg_intersect(float x1, float y1, float x2, float y2,
		   float x3, float y3, float x4, float y4,
		   float *xint, float *yint, float *lseg);

d92 2
a93 3
	int nlpoints;      /* number of points for line */
	float xint,yint,xintmp,yintmp,lseg,lsegtmp;
	int i,next,prev;
d96 1
a96 1
	if ((lpoints=(XPoint *)malloc(2*(ncurve-1)*sizeof(XPoint)))==NULL) {
d138 7
d146 1
a146 3
	 * Draw a curve from the input data xcurve,ycurve.  If a point
	 * lies outside the axes box, then call lseg_intersect to find
	 * the point along the line segment that intersects the axes box.
a147 1
	nlpoints=0;
d149 2
a150 96
		prev=((i-1)>0) ? i-1 : 0;
		next=((i+1)<ncurve) ? i+1 : ncurve-1;
		if ((xcurve[i]>=xamin) && (xcurve[i]<=xamax) &&
		    (ycurve[i]>=yamin) && (ycurve[i]<=yamax)) {
			lpoints[nlpoints].x=(short) (xbase+xscale*xcurve[i]);
			lpoints[nlpoints].y=(short) (ybase+yscale*ycurve[i]);
			nlpoints++;
		} else {     /* current point is outside of axesbox */
		    xint=0.0; yint=0.0;
		    if (i!=prev) {
			/* check line segment between current and prev */
			lseg=-1.0;
			if (lseg_intersect(xcurve[i],ycurve[i],xcurve[prev],
					   ycurve[prev],xamin,yamin,xamin,
					   yamax,&xintmp,&yintmp,&lsegtmp)) {
				xint=xintmp;
				yint=yintmp;
				lseg=lsegtmp;
			}
			if (lseg_intersect(xcurve[i],ycurve[i],xcurve[prev],
					   ycurve[prev],xamax,yamin,xamax,
					   yamax,&xintmp,&yintmp,&lsegtmp)) {
				if ((lseg==-1.0) || (lsegtmp<lseg)) {
					xint=xintmp;
					yint=yintmp;
					lseg=lsegtmp;
				}
			}
			if (lseg_intersect(xcurve[i],ycurve[i],xcurve[prev],
					   ycurve[prev],xamin,yamin,xamax,
					   yamin,&xintmp,&yintmp,&lsegtmp)) {
				if ((lseg==-1.0) || (lsegtmp<lseg)) {
					xint=xintmp;
					yint=yintmp;
					lseg=lsegtmp;
				}
			}
			if (lseg_intersect(xcurve[i],ycurve[i],xcurve[prev],
					   ycurve[prev],xamin,yamax,xamax,
					   yamax,&xintmp,&yintmp,&lsegtmp)) {
				if ((lseg==-1.0) || (lsegtmp<lseg)) {
					xint=xintmp;
					yint=yintmp;
					lseg=lsegtmp;
				}
			}
			if (lseg!=-1.0) {
				lpoints[nlpoints].x=(short)(xbase+xscale*xint);
				lpoints[nlpoints].y=(short)(ybase+yscale*yint);
				nlpoints++;
			}
		    }
		    if (i!=next) {
			/* check line segment between current and next */
			lseg=-1.0;
			if (lseg_intersect(xcurve[i],ycurve[i],xcurve[next],
					   ycurve[next],xamin,yamin,xamin,
					   yamax,&xintmp,&yintmp,&lsegtmp)) {
				xint=xintmp;
				yint=yintmp;
				lseg=lsegtmp;
			}
			if (lseg_intersect(xcurve[i],ycurve[i],xcurve[next],
					   ycurve[next],xamax,yamin,xamax,
					   yamax,&xintmp,&yintmp,&lsegtmp)) {
				if ((lseg==-1.0) || (lsegtmp<lseg)) {
					xint=xintmp;
					yint=yintmp;
					lseg=lsegtmp;
				}
			}
			if (lseg_intersect(xcurve[i],ycurve[i],xcurve[next],
					   ycurve[next],xamin,yamin,xamax,
					   yamin,&xintmp,&yintmp,&lsegtmp)) {
				if ((lseg==-1.0) || (lsegtmp<lseg)) {
					xint=xintmp;
					yint=yintmp;
					lseg=lsegtmp;
				}
			}
			if (lseg_intersect(xcurve[i],ycurve[i],xcurve[next],
					   ycurve[next],xamin,yamax,xamax,
					   yamax,&xintmp,&yintmp,&lsegtmp)) {
				if ((lseg==-1.0) || (lsegtmp<lseg)) {
					xint=xintmp;
					yint=yintmp;
					lseg=lsegtmp;
				}
			}
			if (lseg!=-1.0) {
				lpoints[nlpoints].x=(short)(xbase+xscale*xint);
				lpoints[nlpoints].y=(short)(ybase+yscale*yint);
				nlpoints++;
			}
		    }
		}
d152 4
a155 4
	if (nlpoints==1)
		XDrawPoints(dpy,win,gcc,lpoints,nlpoints,CoordModeOrigin);
	else if (nlpoints > 1)
		XDrawLines(dpy,win,gcc,lpoints,nlpoints,CoordModeOrigin);
a159 102
}



int lseg_intersect(float x1, float y1, float x2, float y2,
		   float x3, float y3, float x4, float y4,
		   float *xint, float *yint, float *lseg)
/*****************************************************************************
Determine intersection of line segment (x1,y1)---(x2,y2) and line segment
(x3,y3)---(x4,y4), and find the length from (x1,y1) to the intersection point.
******************************************************************************
Input:
x1		x coordinate of point 1
y1		y coordinate of point 1
x2		x coordinate of point 2
y2		y coordinate of point 2
x3		x coordinate of point 3
y3		y coordinate of point 3
x4		x coordinate of point 4
y4		y coordinate of point 4

Output:
xint		x coordinate of intersection point
yint		y coordinate of intersection point
lseg		distance from (x1,y1) to (xint,yint)
******************************************************************************
Author:		Brian Macy, Phillips Petroleum Co., 11/12/98
*****************************************************************************/
{
	float m12,m34;  /* slopes between pt1 and pt2, and pt3 and pt4 */
	int found;
	float eps;

	found=0;

	/* Find the intersection of the two line segments */
	if ((x1!=x2) && (x3!=x4)) {
		m12=(y1-y2)/(x1-x2);
		m34=(y3-y4)/(x3-x4);
		if (m12==m34) return found;
		*xint=(m12*x1-y1-m34*x3+y3)/(m12-m34);
		*yint=m12*(*xint-x1)+y1;
	} else if ((y1!=y2) && (y3!=y4)) {
		m12=(x1-x2)/(y1-y2);
		m34=(x3-x4)/(y3-y4);
		if (m12==m34) return found;
		*yint=(m12*y1-x1-m34*y3+x3)/(m12-m34);
		*xint=m12*(*yint-y1)+x1;
	} else if ((x1==x2) && (y1!=y2) && (x3!=x4) && (y3==y4)) {
		*xint=x1;
		*yint=y3;
	} else if ((x1!=x2) && (y1==y2) && (x3==x4) && (y3!=y4)) {
		*xint=x3;
		*yint=y1;
	} else if ((x1==x2) && (y1==y2)) {
		return found;
	} else if ((x3==x4) && (y3==y4)) {
		if (x1==x2) {
			if (x3==x1) {
				*xint=x3;
				*yint=y3;
			} else {
				return found;
			}
		} else {
			m12=(y1-y2)/(x1-x2);
			if (0==(y3-m12*(x3-x1)-y1)) {
				*xint=x3;
				*yint=y3;
			} else {
				return found;
			}
		}
	} else {
		return found;
	}

	/*
	 * Ensure that the intersection point is part of both line
	 * segments within a tolerance equal to eps.
	 */
	eps=-1.0e-5*sqrt((x1*x1+x2*x2)/2.0);
	if (((fabs(x1-x2)-fabs(x1-*xint))>=eps) &&
	    ((fabs(x1-x2)-fabs(x2-*xint))>=eps)) {
		eps=-1.0e-5*sqrt((y1*y1+y2*y2)/2.0);
		if (((fabs(y1-y2)-fabs(y1-*yint))>=eps) &&
		    ((fabs(y1-y2)-fabs(y2-*yint))>=eps)) {
			eps=-1.0e-5*sqrt((x3*x3+x4*x4)/2.0);
			if (((fabs(x3-x4)-fabs(x3-*xint))>=eps) &&
			    ((fabs(x3-x4)-fabs(x4-*xint))>=eps)) {
				eps=-1.0e-5*sqrt((y3*y3+y4*y4)/2.0);
				if (((fabs(y3-y4)-fabs(y3-*yint))>=eps) &&
				    ((fabs(y3-y4)-fabs(y4-*yint))>=eps)) {
					*lseg=sqrt((*xint-x1)*(*xint-x1)+
						   (*yint-y1)*(*yint-y1));
					found=1;
				}
			}
		}
	}

	return found;
@
