head	1.10;
access;
symbols;
locks; strict;
comment	@ * @;


1.10
date	2011.10.20.21.06.38;	author john;	state Exp;
branches;
next	1.9;

1.9
date	2003.12.16.19.21.42;	author john;	state Exp;
branches;
next	1.8;

1.8
date	2003.09.04.17.15.54;	author john;	state Exp;
branches;
next	1.7;

1.7
date	2003.09.04.17.09.09;	author john;	state Exp;
branches;
next	1.6;

1.6
date	96.10.24.16.33.09;	author john;	state Exp;
branches;
next	1.5;

1.5
date	96.04.26.20.10.35;	author jkc;	state Exp;
branches;
next	1.4;

1.4
date	96.04.26.20.06.26;	author jkc;	state Exp;
branches;
next	1.3;

1.3
date	93.06.16.13.57.05;	author john;	state Exp;
branches;
next	1.2;

1.2
date	92.06.12.10.24.26;	author john;	state Exp;
branches;
next	1.1;

1.1
date	92.06.12.10.23.39;	author john;	state Exp;
branches;
next	;


desc
@fcat.c
@


1.10
log
@added copyright statement
@
text
@/* Copyright (c) Colorado School of Mines, 2011.*/
/* All rights reserved.                       */


/*********************** self documentation **********************/
/* 
 * FCAT - fast cat with 1 read per file 
 *	
 * Usage: fcat file1 file2 ... > file3
 *	
 */

/*
 * Credits:
 *	Shuki
 *
 * This program belongs to the Center for Wave Phenomena
 * Colorado School of Mines
*/
/**************** end self doc ********************************/

#include <fcntl.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/stat.h>
#include "cwp.h"

#define MAXSIZE	(8*1024*1024)
char x[MAXSIZE];

int
main(int ac, char **av)
{
	register int fd, ic, n;
	struct stat buf;

	if (ac < 2) {
		fprintf(stderr,"usage: fcat file1 file2 ... > file3\n");
		return EXIT_FAILURE;
	}

	for (ic = 1; ic < ac; ic++) {
		fd = open(av[ic], O_RDONLY);
		if (fd == -1) fprintf(stderr, "can't open %s\n", av[ic]);
		fstat(fd, &buf);
		n = (int) buf.st_size;
		if (n > MAXSIZE) {
			fprintf(stderr, "%s is too big\n", av[ic]);
			return EXIT_FAILURE;
		}
		if (read(fd, x, n) != n) {
			fprintf(stderr, "read error from %s\n", av[ic]);
			return EXIT_FAILURE;
		}
		close(fd);
		if (write(1, x, n) != n) {
			fprintf(stderr, "write error from %s\n", av[ic]);
			return EXIT_FAILURE;
		}
	}
	return EXIT_SUCCESS;
}
@


1.9
log
@reversed order of include files
@
text
@d1 3
@


1.8
log
@moved #include "cwp.h" to its correct location.
@
text
@a18 1
#include "cwp.h"
d23 1
a23 1

@


1.7
log
@changed order of includes
@
text
@d19 1
a23 1
#include "cwp.h"
@


1.6
log
@updated to ANSI
@
text
@a18 1
#include "cwp.h"
d23 1
@


1.5
log
@-wall int main declaration.
@
text
@a8 2
/**************** end self doc ********************************/

d17 1
d19 1
a19 1
#include <stdio.h>
d21 1
d25 1
d37 1
a37 1
		exit(1);
d44 1
a44 1
		n = buf.st_size;
d47 1
a47 1
			exit(1);
d51 1
a51 1
			exit(1);
d56 1
a56 1
			exit(1);
d59 1
a59 1
	exit(0);
@


1.4
log
@Had old K&R main declaration! (Toralf's lint)
@
text
@d28 1
@


1.3
log
@added dummy "selfdoc" for updatedoc to find
@
text
@d28 1
a28 2
main(ac,av)
int ac; char **av;
@


1.2
log
@*** empty log message ***
@
text
@d1 12
a12 2
/* fcat - fast cat with 1 read per file
 *
@


1.1
log
@Initial revision
@
text
@@
