head	1.6;
access;
symbols;
locks; strict;
comment	@ * @;


1.6
date	2011.10.20.21.06.38;	author john;	state Exp;
branches;
next	1.5;

1.5
date	97.07.14.20.05.20;	author john;	state Exp;
branches;
next	1.4;

1.4
date	96.10.24.16.33.09;	author john;	state Exp;
branches;
next	1.3;

1.3
date	93.06.16.16.22.38;	author john;	state Exp;
branches;
next	1.2;

1.2
date	93.06.16.13.57.09;	author john;	state Exp;
branches;
next	1.1;

1.1
date	92.06.12.10.27.58;	author john;	state Exp;
branches;
next	;


desc
@maxinit.c
@


1.6
log
@added copyright statement
@
text
@/* Copyright (c) Colorado School of Mines, 2011.*/
/* All rights reserved.                       */


/*********************** self documentation **********************/
/* 
 * MAXINTS - Compute maximum and minimum sizes for integer types 
 *	(quick and dirty)
 *
 * Usage:  maxints
 *
 * Note: These results will be in limits.h on most systems
 *
 */

/*
 * Credits:
 *	CWP: Jack K. Cohen
 *
 * This program belongs to the Center for Wave Phenomena
 * Colorado School of Mines
 */
/**************** end self doc ********************************/

#include "cwp.h"

/* Prototype of function used internally */
short maxshort(void);
long maxlong(void);
int maxint(void);
unsigned short maxushort(void);
unsigned long maxulong(void);
unsigned int maxuint(void);

int
main()
{
	printf("max short =  %d\n", maxshort());
	printf("min short = %d\n", -(1 + maxshort()));

	printf("max long =  %ld\n", maxlong());
	printf("min long = %ld\n", -(1 + maxlong()));

	printf("max int =  %d\n", maxint());
	printf("min int = %d\n", -(1 + maxint()));

	printf("max unsigned short = %u\n", maxushort());

	printf("max unsigned long = %lu\n", maxulong());

	printf("max unsigned int = %u\n", maxuint());

	return EXIT_SUCCESS;
}

short maxshort(void)
{
	short i = 1, j;
	while (i > 0) {
		j = i;
		i <<= 1;
	}
	return(j - 1 + j);
}

long maxlong(void)
{
	long i = 1, j;
	while (i > 0) {
		j = i;
		i <<= 1;
	}
	return(j - 1 + j);
}

int maxint(void)
{
	int i = 1, j;
	while (i > 0) {
		j = i;
		i <<= 1;
	}
	return(j - 1 + j);
}

unsigned short maxushort(void)
{
	unsigned short i = 1, j = 0;
	while (i > j) {
		j = i;
		i <<= 1;
	}
	return(j - 1 + j);
}

unsigned long maxulong(void)
{
	unsigned long i = 1, j = 0;
	while (i > j) {
		j = i;
		i <<= 1;
	}
	return(j - 1 + j);
}

unsigned int maxuint(void)
{
	unsigned int i = 1, j = 0;
	while (i > j) {
		j = i;
		i <<= 1;
	}
	return(j - 1 + j);
}
@


1.5
log
@added Stew Levin's ansi updates
@
text
@d1 3
@


1.4
log
@updated to ANSI
@
text
@a1 1

d25 6
a30 1
short maxshort();
a34 7
	short maxshort();
	long maxlong();
	int maxint();
	unsigned short maxushort();
	unsigned long maxulong();
	unsigned int maxuint();

d53 1
a53 1
short maxshort()
d63 1
a63 1
long maxlong()
d73 1
a73 1
int maxint()
d83 1
a83 1
unsigned short maxushort()
d93 1
a93 1
unsigned long maxulong()
d103 1
a103 1
unsigned int maxuint()
@


1.3
log
@*** empty log message ***
@
text
@d2 1
a12 1
/**************** end self doc ********************************/
d16 1
a16 1
 *	CWP: Jack
d21 1
d23 6
d52 2
@


1.2
log
@added dummy "selfdoc" for updatedoc to find
@
text
@d3 2
a4 1
/* MAXINTS - Compute maximum and minimum sizes for integer types 
@


1.1
log
@Initial revision
@
text
@d1 4
a4 2
/* Compute maximum and minimum sizes for integer types (quick and dirty)
 * These results will be in limits.h on most systems
d6 8
d19 1
a19 1
*/
@
