head	1.8;
access;
symbols;
locks; strict;
comment	@ * @;


1.8
date	2011.10.20.21.05.20;	author john;	state Exp;
branches;
next	1.7;

1.7
date	2004.12.23.22.19.00;	author john;	state Exp;
branches;
next	1.6;

1.6
date	97.02.27.22.10.33;	author john;	state Exp;
branches;
next	1.5;

1.5
date	94.03.14.08.41.40;	author john;	state Exp;
branches;
next	1.4;

1.4
date	92.09.02.13.19.33;	author cartley;	state Exp;
branches;
next	1.3;

1.3
date	91.06.07.08.31.57;	author dhale;	state Exp;
branches;
next	1.2;

1.2
date	90.05.30.13.21.28;	author dhale;	state Exp;
branches;
next	1.1;

1.1
date	90.05.30.07.35.56;	author dhale;	state Exp;
branches;
next	;


desc
@interpolation (linear) of a 2-D array of bytes
@


1.8
log
@added copyright statement
@
text
@/* Copyright (c) Colorado School of Mines, 2011.*/
/* All rights reserved.                       */

/*********************** self documentation **********************/
/*****************************************************************************
INTL2B - bilinear interpolation of a 2-D array of bytes

intl2b		bilinear interpolation of a 2-D array of bytes

******************************************************************************
Function Prototype:
void intl2b (int nxin, float dxin, float fxin,
	int nyin, float dyin, float fyin, unsigned char *zin,
	int nxout, float dxout, float fxout,
	int nyout, float dyout, float fyout, unsigned char *zout);

******************************************************************************
Input:
nxin		number of x samples input (fast dimension of zin)
dxin		x sampling interval input
fxin		first x sample input
nyin		number of y samples input (slow dimension of zin)
dyin		y sampling interval input
fyin		first y sample input
zin		array[nyin][nxin] of input samples (see notes)
nxout		number of x samples output (fast dimension of zout)
dxout		x sampling interval output
fxout		first x sample output
nyout		number of y samples output (slow dimension of zout)
dyout		y sampling interval output
fyout		first y sample output

Output:
zout		array[nyout][nxout] of output samples (see notes)

******************************************************************************
Notes:
The arrays zin and zout must passed as pointers to the first element of
a two-dimensional contiguous array of unsigned char values.

Constant extrapolation of zin is used to compute zout for
output x and y outside the range of input x and y.
 
For efficiency, this function builds a table of interpolation
coefficents pre-multiplied by byte values.  To keep the table
reasonably small, the interpolation does not distinguish
between x and y values that differ by less than dxin/ICMAX
and dyin/ICMAX, respectively, where ICMAX is a parameter
defined above.

******************************************************************************
Author:  Dave Hale, Colorado School of Mines, c. 1989-1991.
*****************************************************************************/
/**************** end self doc ********************************/

#include "cwp.h"

/* number of tabulated interpolation coefficients */
#define ICMAX 99 /* must be odd, so that ICMAC-ic!=ic, for ic=0 to ICMAX/2! */
#define NTABLE (ICMAX+1)

/* functions defined and used internally */
static void intl2bx(int, int*, int*, int,
	unsigned char[][256], unsigned char*, unsigned char*);
static void intl2by(int, int, int, unsigned char[][256],
	unsigned char*, unsigned char*, unsigned char*);

void intl2b(int nxin, float dxin, float fxin,
	int nyin, float dyin, float fyin, unsigned char *zin,
	int nxout, float dxout, float fxout,
	int nyout, float dyout, float fyout, unsigned char *zout)
/*****************************************************************************
bilinear interpolation of a 2-D array of bytes
******************************************************************************
Input:
nxin		number of x samples input (fast dimension of zin)
dxin		x sampling interval input
fxin		first x sample input
nyin		number of y samples input (slow dimension of zin)
dyin		y sampling interval input
fyin		first y sample input
zin		array[nyin][nxin] of input samples (see notes)
nxout		number of x samples output (fast dimension of zout)
dxout		x sampling interval output
fxout		first x sample output
nyout		number of y samples output (slow dimension of zout)
dyout		y sampling interval output
fyout		first y sample output

Output:
zout		array[nyout][nxout] of output samples (see notes)
******************************************************************************
Notes:
The arrays zin and zout must passed as pointers to the first element of
a two-dimensional contiguous array of unsigned char values.

Constant extrapolation of zin is used to compute zout for
output x and y outside the range of input x and y.
 
For efficiency, this function builds a table of interpolation
coefficents pre-multiplied by byte values.  To keep the table
reasonably small, the interpolation does not distinguish
between x and y values that differ by less than dxin/ICMAX
and dyin/ICMAX, respectively, where ICMAX is a parameter
defined above.
******************************************************************************
Author:  Dave Hale, Colorado School of Mines, 07/02/89
Modified:  Dave Hale, Colorado School of Mines, 05/30/90
	Changed function to interpolate unsigned char 
	instead of signed char, since many color tables and 
	image processing functions (e.g., PostScript) require 
	bytes with a maximum range of 0 to 255.
Modified:  Dave Hale, Colorado School of Mines, 06/01/91
	Changed computation of coefficient table to avoid
	errors due to truncation in float to fix.  Old code
	sometimes caused interpolated values to be less than
	the minimum of the byte values being interpolated or 
	greater than the maximum of the values being interpolated.
*****************************************************************************/
{         
	int ixout,iyout,ic,ib,iyin,iyinl=1;
	float xout,yout,rxin,ryin,frac;
	int *kzin,*kic;
	unsigned char *temp1,*temp2,*temp;
	static unsigned char table[NTABLE][256];
	static int tabled=0;

	/* if not already built, build byte multiplication table */
	if (!tabled) {
		for (ic=0; ic<=ICMAX/2; ++ic) {
			frac = (float)(ic)/(float)ICMAX;
			for (ib=0; ib<256; ++ib) {
				table[ic][ib] = frac*ib;
				table[ICMAX-ic][ib] = ib-table[ic][ib];
			}
		}
		tabled = 1;
	}                                              

	/* get workspace */
	kzin = (int*)malloc(nxout*sizeof(int));
	kic = (int*)malloc(nxout*sizeof(int));
	temp1 = (unsigned char*)malloc(nxout*sizeof(unsigned char));
	temp2 = (unsigned char*)malloc(nxout*sizeof(unsigned char));

	/* pre-compute indices for fast 1-D interpolation along x axis */
	for (ixout=0,xout=fxout; ixout<nxout; ixout++,xout+=dxout) {
		rxin = (xout-fxin)/dxin;
		if (rxin<=0) {
		 	kzin[ixout] = 0;
		 	kic[ixout] = 0;
		} else if (rxin>=nxin-1) {
		 	kzin[ixout] = nxin-2;
		 	kic[ixout] = ICMAX*256;
		} else {
		 	kzin[ixout] = (int)rxin;
		 	frac = rxin-(int)rxin;
			ic = frac*ICMAX+0.5;
		 	kic[ixout] = ic*256;
		}
	}

	/* loop over output y */
	for (iyout=0,yout=fyout; iyout<nyout; iyout++,yout+=dyout) {

		/* compute index of input y, clipped to range of input y */
		ryin = MAX(0,MIN(nyin-1,(yout-fyin)/dyin));
		iyin = MAX(0,MIN(nyin-2,ryin));

		/* if output y is not between current input y */
		if (iyin!=iyinl || iyout==0) {

			/* if 2nd temporary vector is still useful */
			if (iyin==iyinl+1 && iyout!=0) {              

				/* swap 2nd and 1st temp; compute 2nd temp */
				temp = temp1;
				temp1 = temp2;
				temp2 = temp;
				intl2bx(nxout,kzin,kic,ICMAX,
					table,zin+(iyin+1)*nxin,temp2);

			/* else if 1st temporary vector is still useful */
			} else if (iyin==iyinl-1 && iyout!=0) {

				/* swap 1st and 2nd temp; compute 1st temp */
				temp = temp1;
				temp1 = temp2;
				temp2 = temp;
				intl2bx(nxout,kzin,kic,ICMAX,
					table,zin+iyin*nxin,temp1);

			/* else if neither 1st or 2nd temp is useful */
			} else {

				/* compute 1st and 2nd temporary vectors */
				intl2bx(nxout,kzin,kic,ICMAX,
					table,zin+iyin*nxin,temp1);
				intl2bx(nxout,kzin,kic,ICMAX,
					table,zin+(iyin+1)*nxin,temp2);
			}                 

			/* remember last index of input y */
			iyinl = iyin;
		}

		/* compute index of interpolation coefficient */
		frac = ryin-iyin;
		ic = frac*ICMAX+0.5;

		/* linearly interpolate output vector by table lookup */
		intl2by(nxout,ic,ICMAX,table,
  			temp1,temp2,zout+iyout*nxout);
	}                         

	/* free workspace before returning */
	free(kzin);
	free(kic);                     
	free(temp1);
	free(temp2);
}
   
static void intl2bx(int nxout, int *kzin, int *kic, int icmax, 
	unsigned char table[][256], unsigned char *zin, unsigned char *zout)
/****************************************************************************
 interpolate between input x values (FOR INTERNAL USE by intl2b) 
****************************************************************************/
{
	int ixout,jzin,jic;
  	unsigned char *tablel,*tableh;
	tablel = &table[0][0];
	tableh = &table[icmax][0];
	for (ixout=0; ixout<nxout; ixout++) {   
		jzin = kzin[ixout];
		jic = kic[ixout];
	 	zout[ixout] = tableh[(int)zin[jzin]-jic] 
				+ tablel[(int)zin[jzin+1]+jic];
	}
}   

static void intl2by(int nxout, int ic, int icmax, unsigned char table[][256],
	unsigned char *temp1, unsigned char *temp2, unsigned char *zout)
/****************************************************************************
 interpolate between input y values (FOR INTERNAL USE by intl2b) 
****************************************************************************/
{
	int ixout;
	unsigned char *tablel, *tableh;
	tablel = &table[ic][0];
	tableh = &table[icmax-ic][0];
	for (ixout=0; ixout<nxout; ixout++)
		zout[ixout] = tableh[temp1[ixout]]+tablel[temp2[ixout]];
}

#ifdef TEST
main()
{
	int nxin,nyin,nxout,nyout,ixout,iyout;
	float dxin,fxin,dyin,fyin,fxout,dxout,fyout,dyout;
	unsigned char zin[2][2],zout[4][4];
	
	zin[0][0] = 41;		zin[0][1] = 99;
	zin[1][0] = 99;		zin[1][1] = 99;
	nxin=2;  dxin=1.0;  fxin=0.0;
	nyin=2;  dyin=1.0;  fyin=0.0;
	nxout=4;  dxout=dxin*(nxin-1)/(nxout-1);  fxout=0.0;
	nyout=4;  dyout=dyin*(nyin-1)/(nyout-1);  fyout=0.0;
	intl2b(nxin,dxin,fxin,nyin,dyin,fyin,&zin[0][0],
		nxout,dxout,fxout,nyout,dyout,fyout,&zout[0][0]);
	for (iyout=0; iyout<nyout; iyout++)
		for (ixout=0; ixout<nxout; ixout++)
			printf("zout[%d][%d] = %d\n",
				iyout,ixout,zout[iyout][ixout]);
}
#endif
@


1.7
log
@explicit casts to prevent bombing on some systems
@
text
@d1 3
@


1.6
log
@possibly correct
@
text
@d233 2
a234 1
		zout[ixout] = tableh[zin[jzin]-jic] +tablel[zin[jzin+1]+jic];
@


1.5
log
@added dummy selfdoc
@
text
@d118 1
a118 1
	int ixout,iyout,ic,jc,ib,iyin,iyinl;
d233 1
a233 1
		zout[ixout] = tableh[zin[jzin]-jic]+tablel[zin[jzin+1]+jic];
@


1.4
log
@Added explicit type-casting to malloc calls.
@
text
@d1 52
@


1.3
log
@modified computation of coefficient table to avoid
errors due to truncation in float to fix.  Old code
sometimes caused interpolated values to be less than
the minimum of the byte values being interpolated or
greater than the maximum of the values being interpolated.
@
text
@d86 4
a89 4
	kzin = malloc(nxout*sizeof(int));
	kic = malloc(nxout*sizeof(int));
	temp1 = malloc(nxout*sizeof(unsigned char));
	temp2 = malloc(nxout*sizeof(unsigned char));
a167 1
/* for internal use by intl2b:  interpolate between input x values */
d170 3
a184 1
/* for internal use by intl2b:  interpolate between input y values */
d187 3
@


1.2
log
@changed to work with unsigned char instead of signed char
made lots of other simplifying changes
@
text
@d4 1
a4 1
#define ICMAX 100
d7 6
d58 6
a71 4
	static void intl2bx(int, int*, int*, int,
		unsigned char[][256], unsigned char*, unsigned char*);
	static void intl2by(int, int, int, unsigned char[][256],
		unsigned char*, unsigned char*, unsigned char*);
d75 1
a75 1
		for (ic=0; ic<=ICMAX; ++ic) {
d77 1
a77 1
			for (ib=0; ib<256; ++ib)
d79 2
d200 1
a200 1
	unsigned char zin[2][2],zout[3][3];
d202 2
a203 2
	zin[0][0] = 0;		zin[0][1] = 100;
	zin[1][0] = 100;	zin[1][1] = 200;
d206 2
a207 2
	nxout=3;  dxout=dxin*(nxin-1)/(nxout-1);  fxout=0.0;
	nyout=3;  dyout=dyin*(nyin-1)/(nyout-1);  fyout=0.0;
@


1.1
log
@Initial revision
@
text
@d1 1
a1 2
/*
FUNCTION:  bilinear interpolation of a 2-D array of bytes
d3 3
a5 15
PARAMETERS:
nxin		i	number of x samples input (fast dimension of zin)
dxin		i	x sampling interval input
fxin		i	first x sample input
nyin		i	number of y samples input (slow dimension of zin)
dyin		i	y sampling interval input
fyin		i	first y sample input
zin		i	array of input samples (zin[nyin][nxin])
nxout		i	number of x samples output (fast dimension of zout)
dxout		i	x sampling interval output
fxout		i	first x sample output
nyout		i	number of y samples output (slow dimension of zout)
dyout		i	y sampling interval output
fyout		i	first y sample output
zout		o	array of output samples (zout[nyout][nxout])
d7 29
a35 1
NOTES:
d42 11
a52 25
between x and y values that differ by less than dxin/NIC
and dyin/NIC, respectively, where NIC is the number of
coefficients (less 1) defined below.
                     
AUTHOR:  Dave Hale, Colorado School of Mines, 07/02/89
*/

#include "cwp.h"

/* number of interpolation coefficients must be odd */
#define NIC 101

/* forward declarations of functions defined and used here */
static void intl2bx(
	int nxout, int *kzin, int *kic,
	int nic, signed char *table, signed char *zin, signed char *zout);
static void intl2by(
	signed char *table1, signed char *table2, int nxout,
	signed char *temp1, signed char *temp2, signed char *zout);

void intl2b(
	int nxin, float dxin, float fxin,
	int nyin, float dyin, float fyin, signed char *zin,
	int nxout, float dxout, float fxout,
	int nyout, float dyout, float fyout, signed char *zout)
d54 1
a54 1
    int ixout,iyout,ic,jc,ib,iyin,iyinl;
d57 2
a58 3
	signed char *temp1,*temp2,*temp;
	signed char byteval;
	static signed char table[NIC+1][256];
d60 4
d67 4
a70 6
		for (ic=0,jc=NIC; ic<=NIC/2; ic++,jc--) {
			frac = (float)ic/(float)NIC;
			for (ib=0,byteval=(-128); ib<256; ib++,byteval++) {
				table[ic][ib] = frac*byteval;
				table[jc][ib] = byteval-table[ic][ib];
			}
d76 4
a79 4
	kzin = (int *)malloc(nxout*sizeof(int));
	kic = (int *)malloc(nxout*sizeof(int));
	temp1 = (signed char *)malloc(nxout);
	temp2 = (signed char *)malloc(nxout);
d81 1
a81 1
	/* compute indices for 1-d interpolation along x axis */
d86 1
a86 1
		 	kic[ixout] = 128+256*NIC;
d89 1
a89 1
		 	kic[ixout] = 128;
d93 2
a94 2
		 	ic = frac*NIC+0.5;
		 	kic[ixout] = 128+256*(NIC-ic);
d115 2
a116 2
				intl2bx(nxout,kzin,kic,NIC,&table[0][0],
					zin+(iyin+1)*nxin,temp2);
d125 2
a126 2
				intl2bx(nxout,kzin,kic,NIC,&table[0][0],
					zin+iyin*nxin,temp1);
d132 4
a135 4
				intl2bx(nxout,kzin,kic,NIC,&table[0][0],
					zin+iyin*nxin,temp1);
				intl2bx(nxout,kzin,kic,NIC,&table[0][0],
					zin+(iyin+1)*nxin,temp2);
d144 1
a144 1
		ic = frac*NIC+0.5;
d147 2
a148 2
		intl2by(&table[NIC-ic][128],&table[ic][128],
  			nxout,temp1,temp2,zout+iyout*nxout);
d159 2
a160 3
static void intl2bx(
	int nxout, int *kzin, int *kic,
	int nic, signed char *table, signed char *zin, signed char *zout)
d163 3
a165 3
  	signed char *tablel,*tableh;
	tablel = table;
	tableh = table+(nic+1)*256;
d169 1
a169 1
		zout[ixout] = tablel[zin[jzin]+jic]+tableh[zin[jzin+1]-jic];
d174 2
a175 3
static void intl2by(
	signed char *table1, signed char *table2, int nxout,
	signed char *temp1, signed char *temp2, signed char *zout)
d178 3
d182 1
a182 1
		zout[ixout] = table1[temp1[ixout]]+table2[temp2[ixout]];
d184 22
@
