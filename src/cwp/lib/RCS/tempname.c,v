head	1.8;
access;
symbols;
locks
	john:1.8; strict;
comment	@ * @;


1.8
date	2011.11.22.20.19.38;	author john;	state Exp;
branches;
next	1.7;

1.7
date	2011.11.22.17.48.34;	author john;	state Exp;
branches;
next	1.6;

1.6
date	2011.10.20.21.05.20;	author john;	state Exp;
branches;
next	1.5;

1.5
date	2011.09.09.22.25.49;	author john;	state Exp;
branches;
next	1.4;

1.4
date	97.07.14.18.14.46;	author john;	state Exp;
branches;
next	1.3;

1.3
date	96.08.01.16.05.25;	author jkc;	state Exp;
branches;
next	1.2;

1.2
date	95.12.12.19.55.26;	author jkc;	state Exp;
branches;
next	1.1;

1.1
date	95.12.12.19.53.08;	author jkc;	state Exp;
branches;
next	;


desc
@@


1.8
log
@reverted back to previous
@
text
@/* Copyright (c) Colorado School of Mines, 2011.*/
/* All rights reserved.                       */

/*********************** self documentation **********************/


#include "cwp.h"

/*****************************************************************************
TEMPORARY_FILENAME - Creates a file name in a user-specified directory.

******************************************************************************
Function prototypes:
FILE *temporary_stream (char *tempfile);
char *temporary_filename(char *tempfile);

******************************************************************************
temporary_stream:
Input:
tempfile	pointer to directory prefix string (eg. /usr/tmp/)

Output:
filestream	pointer to temporary file stream
******************************************************************************
temporary_filename:
Input:
tempfile	pointer to directory prefix string (eg. /usr/tmp/)

Output:
tempfile	pointer to filename string (eg. /usr/tmp/1206aaa)

******************************************************************************
Notes:
temporary_stream creates a file stream by appending a sequence of
numbers and letters (which is created by mkstemp) to the prefix string
passed as its argument. 

******************************************************************************
Author:  Andreas Klaedtke, 12/2/2009

******************************************************************************
temporary_filename creates a file name by appending a sequence of
numbers and letters (which is created by tmpnam) to the prefix string
passed as its argument.  On return the input argument points to the
(now augmented) prefix string.

It is duty of the calling program to provide room for the augmented
string.  The resulting string is typically used as a name for a
temporary file; in this case it is the calling program's job to make
sure that the supplied prefix ends with a slash.

This routine was written to supplement the ANSI C function tmpnam
which also creates a temporary filename, but within a fixed directory,
usually the /tmp directory.  Unfortunately, some /tmp directories are
too small to hold typical seismic data sets, so this routine allows
the user to specify a directory with sufficient capacity.  Also note
that on many systems, the tmpfile() call avoids this problem by
simulating a temporary file with a memory buffer.  However, this is
not a panacea as the file size might exceed available memory and on
some systems this call does actually create a file (again, usually in
/tmp).
******************************************************************************
Author:  Jack K. Cohen, Colorado School of Mines, 12/12/95

******************************************************************************/
/**************** end self doc ********************************/

FILE *temporary_stream (char const * const prefix) 
{
   int tfd = -1;
   FILE *tfp;
   char *buffer = NULL; 

   if (prefix != NULL) {
       buffer = (char*)malloc(strlen(prefix) + 11 + 1);
      if (0 == buffer) {
         return NULL;
      }
      strcpy(buffer, prefix);
      strcat(buffer, "/fileXXXXXX");
   }    
   else {
      buffer = (char*)malloc(11 + 1);
      if (0 == buffer) {
         return NULL;
      }
      strcpy(buffer, "/fileXXXXXX");
   }
  
   if ((tfd = mkstemp(buffer)) == -1 || (tfp = fdopen(tfd, "w+")) == NULL) {

#ifdef TEST
      printf("Temporary filename is %s\n", buffer);
#endif

      if (tfd != -1) {
         unlink(buffer);
         close(tfd);
      }

      free(buffer);
      return NULL;
   }

#ifdef TEST
   printf("Temporary filename is %s\n", buffer);
#endif

   /* remove temporary file when we close it */
   unlink(buffer); /* unlink immediately */
   free(buffer);

   return tfp;
}

char *temporary_filename(char *prefix) {
	char buffer[L_tmpnam];
	static char name[BUFSIZ];
        
        /* [ak] tmpnam is considered unsafe */
	char *tmp = strrchr(tmpnam(buffer), '/');

	strcpy(name, prefix);
	return strcat(name, tmp);
}


#ifdef TEST
main()
{
        FILE *fp;
	char tempfile[BUFSIZ] = "/usr/tmp";

	printf("Temporary filename is %s\n", temporary_filename(tempfile));

	/* or : */
	/*
        tfp = temporary_stream(tempfile);
        if (tfp != NULL) {
           fclose(tfp);
        }
        tfp = temporary_stream(NULL);
        if (tfp != NULL) {
           fclose(tfp);
        }
	*/

	return(EXIT_SUCCESS);
}
#endif
@


1.7
log
@added include <stdio.h>
@
text
@a5 1
#include <stdio.h>
@


1.6
log
@added copyright statement
@
text
@d6 2
@


1.5
log
@*** empty log message ***
@
text
@d1 3
@


1.4
log
@added Craig Artley's suggestion of  static char
@
text
@d2 3
d9 2
a10 1
Function prototype:
d14 8
d30 8
d60 1
d64 47
a110 1
#include "cwp.h"
d115 2
d132 12
@


1.3
log
@Now return leading slash in front of the temp file name.
Do not overwrite the prefix, so successive calls can be made.
@
text
@d47 1
a47 1
	char name[BUFSIZ];
@


1.2
log
@Only need cwp.h not par.h at cwp-level!
@
text
@d47 1
d50 2
a51 1
	return strcat(prefix, ++tmp);
d54 1
d59 1
a59 1
	char tempfile[BUFSIZ] = "/usr/tmp/";
@


1.1
log
@Initial revision
@
text
@d43 1
a43 1
#include "par.h"
@
