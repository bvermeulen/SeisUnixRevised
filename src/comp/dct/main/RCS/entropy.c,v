head	1.5;
access;
symbols;
locks; strict;
comment	@ * @;


1.5
date	2011.11.17.00.17.48;	author john;	state Exp;
branches;
next	1.4;

1.4
date	97.07.29.20.33.05;	author john;	state Exp;
branches;
next	1.3;

1.3
date	97.06.30.20.26.15;	author john;	state Exp;
branches;
next	1.2;

1.2
date	96.09.09.20.53.13;	author john;	state Exp;
branches;
next	1.1;

1.1
date	96.04.16.17.20.31;	author john;	state Exp;
branches;
next	;


desc
@entropy.c  find the entropy of a signal
@


1.5
log
@added copyright and Reg Beardsley's checkpar() (select codes)
@
text
@/* Copyright (c) Colorado School of Mines, 2011.*/
/* All rights reserved.                       */

/* ENTROPY: $Revision: 1.4 $ ; $Date: 1997/07/29 20:33:05 $	*/

#include "par.h"

/*********************** self documentation **********************/
char *sdoc[] = {
"								",
" ENTROPY - compute the ENTROPY of a signal			",
"								",
"  entropy < stdin n= > stdout					",
"								",
" Required Parameter:						",
"  n		number of values in data set			",
"								",
" Optional Parameters:						",
"  none								",
"  								",
NULL};

/*
 * Author: CWP: Tong Chen, 1995.
 * 
 */
/**************** end self doc ********************************/

int
main(int argc, char **argv)
{
	int i, j, n;
	float *f,  max, step, rstep;
	float fhist[1024], dev, rdev, ent, error; 
	int hist[1024];
	 
	initargs(argc, argv);
	requestdoc(1);

	MUSTGETPARINT("n",&n);

	f = alloc1float(n);

	fread(f,sizeof(float),n,stdin);
	
	for(i=0;i<1024;i++) hist[i] = 0;

	for(i=0,rdev=0.;i<n;i++)
	   rdev += f[i]*f[i]; 
	rdev = rdev/n;
	rdev = sqrt(rdev);

	if(!getparfloat("dev",&dev)) dev = rdev;

        checkpars();
	fprintf(stderr,"dev=%f\n", dev);

	step = dev*3.464*.01;

	rstep = 1./step;

	error = 0.;
	for(i=0;i<n;i++){
	    max = f[i]*rstep;
	    error += (NINT(max)*step - f[i])*(NINT(max)*step - f[i]);
	    hist[NINT(max)+512] ++;
	}

	error = error/n;
	error = sqrt(error);
	error = error/rdev;

	ent = 0.;
	for(j=0;j<1024;j++){
		fhist[j] = ((float) hist[j])/((float) n);
		if(hist[j])
		    ent += fhist[j]*log(fhist[j])/log(2.);
	}
	ent = -ent;

fprintf(stderr,"entropy of the signal is=%f, average error=%f\n",ent, error);

	fwrite(fhist,sizeof(float),1024,stdout);

	return EXIT_SUCCESS;
}
@


1.4
log
@removed unused variable.
@
text
@d1 4
a4 1
/* ENTROPY: $Revision: 1.3 $ ; $Date: 1997/06/30 20:26:15 $	*/
d55 1
@


1.3
log
@added Craig Artley's bug fixes
@
text
@d1 1
a1 1
/* ENTROPY: $Revision: 1.8 $ ; $Date: 1996/09/06 16:08:13 $	*/
d30 1
a30 1
	float *f, *g, max, step, rstep;
a39 1
	g = alloc1float(n);
@


1.2
log
@silenced -Wall complaints
@
text
@d1 1
d11 1
d27 1
a27 1
main(int argc, char *argv[])
d37 1
a37 1
	getparint("n",&n);
@


1.1
log
@Initial revision
@
text
@a0 3
/* Copyright (c) Colorado School of Mines, 1996.*/
/* All rights reserved.                       */

d4 1
d18 5
d24 1
d27 3
a29 3
	int i, j, n, nclip;
	float *f, *g, *tmp, max, step, rstep;
	float fhist[1024], clip, dev, rdev, ent, error; 
d80 1
@
