head	1.3;
access;
symbols;
locks; strict;
comment	@ * @;


1.3
date	2011.11.21.16.19.45;	author john;	state Exp;
branches;
next	1.2;

1.2
date	97.01.10.17.23.24;	author john;	state Exp;
branches;
next	1.1;

1.1
date	96.09.09.20.29.49;	author john;	state Exp;
branches;
next	;


desc
@quant.c
@


1.3
log
@copyright
@
text
@/* Copyright (c) Colorado School of Mines, 2011.*/
/* All rights reserved.                       */


/*********************** self documentation **********************/
/******************************************************************************
QUANT - QUANTization routines

uniQuant - uniform quantization with a given relative RMS error
uniDequant - uniform dequantization

*******************************************************************************
Function Prototypes:
void uniQuant(float *x, int n, float error, 
		float *ave, float *step, int *qx);
void uniDequant(float *x, int n, float ave, float step, int *qx)

*******************************************************************************
uniQuant:
Input:
x		array[] of input signal
n               length of the signal
error		relative RMS error
ave             average of the input signal
step            stepsize used in quantization
Output:
qx              array[] output integers

uniDequant:
Input:
n               length of the signal
ave             average of the signal
step            stepsize used in quantization
qx              array[] input integers
Output:
x		array[] of output signal

*******************************************************************************
Author:		Tong Chen, 07/15/94
Modifier:       Tong Chen, 05/30/95, for unified interface
******************************************************************************/

#include "comp.h"
#define ERRATIO 3.4641




void uniQuant(float *x, int n, float error, 
	      float *ave, float *step, int *qx)
/******************************************************************************
uniform quantization with a given relative RMS error
*******************************************************************************
x		array[] of input signal
n               length of the signal
error		relative RMS error
ave             average of the input signal
step            stepsize used in quantization
qx              array[] output integers
******************************************************************************/
{
   int i;
   float rn, atmp, dev, lave, lstep;
   float *g;

   /* allocate temporary space */
   g = alloc1float(n);
   
   rn = 1./n;
   
   lave = 0.;

   /* average, or mean-value */
   for(i=0; i<n; i++) lave += x[i];
   lave *= rn;
   lstep = *step;

/*
   fprintf(stderr,"average=%f\n", lave);

   for(i=0; i<n; i++)
      fprintf(stderr,"f[%d]=%f\n", i, x[i]);
*/

   /* if no deviation calculated */
   if(lstep < 0.)
   {
      
      dev = 0.;
      /* standard deviation, or RMS */
      for(i=0; i<n; i++)
      {
	 g[i] = x[i] - lave;
	 atmp = ABS(g[i]);
	 dev += atmp*atmp;
      }
   
      dev *= rn;
      dev = sqrt(dev);
   }
   
   /* else */
   else{ 
      for(i=0; i<n; i++)
	 g[i] = x[i] - lave;
      dev = lstep;
   }
   
   /* stepsize used in quantization */
   lstep = dev*error*ERRATIO;
   lstep = 1./lstep;

   fprintf(stderr,"lstep=%f\n", lstep);

   /* uniform quantization */
   for(i=0; i<n; i++)
   {
      
      atmp = g[i]*lstep;
/*
      qx[i] = NINT(atmp);
*/
      qx[i] = (atmp > 0.)? ((int) (atmp+.5)) : ((int) (atmp-.5)); 
   }

   fprintf(stderr,"after quantization\n");

   /* average and stepsize */
   *ave = lave;
   *step = lstep;
   
   /* free the workspace */
   free1float(g);
}


void uniDequant(float *x, int n, float ave, float step, int *qx)
/******************************************************************************
uniform quantization with a given relative RMS error
*******************************************************************************
x		array[] of output signal
n               length of the signal
ave             average of the signal
step            stepsize used in quantization
qx              array[] input integers
******************************************************************************/
{
   int i;
   float rstep;

   rstep = 1./step;
   
   for(i=0; i<n; i++) x[i] = ave + qx[i]*rstep;
}
@


1.2
log
@added dummy selfdoc
@
text
@d1 3
@


1.1
log
@Initial revision
@
text
@d2 12
d15 10
a24 2
#include "comp.h"
#define ERRATIO 3.4641
d26 8
a34 3
/******************************************************************************
uniQuant        uniform quantization
uniDequant      uniform dequantization
d39 5
@
