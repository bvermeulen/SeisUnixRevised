head     1.2;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


1.2
date     95.05.31.13.10.04;  author john;  state Exp;
branches ;
next     1.1;

1.1
date     95.05.30.16.06.35;  author john;  state Exp;
branches ;
next     ;


desc
@dvfm.c
@


1.2
log
@added documentation
@
text
@#include "Triangles/triP.h"

void deleteVertexFromModel (Model *m, Vertex *v)
/*****************************************************************************
deleteVertexFromModel - Delete a vertex from model
******************************************************************************
Input:
m	 	pointer to Model	
v		pointer to Vertex to be deleted

******************************************************************************
Author:  Dave Hale, Colorado School of Mines, 07/10/90
******************************************************************************/
{
	int containsv,containsb,edgedeleted;
	float x,y,xb,yb,xc,yc,rs;
	Vertex *v1,*v2,*v3;
	VertexUse *vu,*vub;
	Edge *e;
	Face *f,*fs;
	
	/* if vertex is fixed, simply return */
	if (v->fixed) return;
	
	/* if vertex is on boundary, make boundary edge and triangle */
	vu = v->vu;
	do {
		if (vu->eu->f==NULL) {
			makeBoundaryEdgeTri(v,&e,&f);
			break;
		}
		vu = vu->vuNext;
	} while (vu!=v->vu);
	
	/* if specified, do delete vertex function */
	if (m->vDel!=NULL) m->vDel(m,v);
	
	/* (x,y) coordinates of vertex */
	x = v->x;  y = v->y;
	
	/* start loop over edges (vertex-uses) with any edge */
	vu = v->vu;
	
	/* while vertex is used by more than three edges */
	while (vu->vuNext->vuNext->vuNext!=vu) {
	
		/* initially, assume no edge will be deleted */
		edgedeleted = 0;
		
		/* get 3 clockwise vertices opposite the current one */
		v1 = vu->eu->euMate->euCCW->vu->v;
		v2 = vu->eu->euMate->vu->v;
		v3 = vu->eu->euCCW->vu->v;
		
		/* compute circumcircle of (v1,v2,v3) */
		circum(v1->x,v1->y,v2->x,v2->y,v3->x,v3->y,&xc,&yc,&rs);

		/* if circumcircle of (v1,v2,v3) contains the vertex v to
		/* be deleted, and triangle (v1,v2,v3) does not contain v */
		if (containsv = inCircum(x,y,xc,yc,rs) && 
			!in3Vertices(x,y,v1,v2,v3)) {
			
			/* and if circumcircle of (v1,v2,v3) does not 
			/* contain any other vertices */
			vub = vu->eu->euCCW->euMate->euCCW->vu;
			do {
				xb = vub->v->x;  yb = vub->v->y;
				containsb = inCircum(xb,yb,xc,yc,rs);
				vub = vub->eu->euMate->euCCW->vu;
			} while(vub->v!=v1 && !containsb);
			if (!containsb) {
			
				/* 2 triangles will be deleted */
				if (m->tDel!=NULL) {
					m->tDel(m,vu->eu->f);
					m->tDel(m,vu->eu->euMate->f);
				}
			
				/* kill edge (v,v2) */
				killEdge(vu->eu->e,&fs);
			
				/* make edge (v1,v3) */
				makeEdgeFace(v1,v3,&e,&f);
			
				/* 2 triangles were created */
				if (m->tAdd!=NULL) {
					m->tAdd(m,e->eu->f);
					m->tAdd(m,e->eu->euMate->f);
				}
			
				/* compute circumcircles of 2 new triangles */
				circumTri(e->eu->f);
				circumTri(e->eu->euMate->f);
				
				/* remember that an edge was deleted */
				edgedeleted = 1;
			}
		}
		
		/* if this edge was deleted, try any edge that is left */
		if (edgedeleted)
			vu = v->vu;
		
		/* else, try any edge but this edge */
		else
			vu = vu->vuNext;
	}
	
	/* 3 triangles will be deleted */
	if (m->tDel!=NULL) {
		vu = v->vu;
		do {
			m->tDel(m,vu->eu->f);
			vu = vu->vuNext;
		} while (vu!=v->vu);
	}
	
	/* delete remaining 3 edges connected to vertex */
	killEdge(v->vu->eu->e,&fs);
	killEdge(v->vu->eu->e,&fs);
	killEdge(v->vu->eu->e,&fs);
	
	/* 1 triangle remains */
	if (m->tAdd!=NULL) m->tAdd(m,fs);
	
	/* compute circumcircle of remaining triangle */
	circumTri(fs);
	
	/* debug */
	/* checkModel(m); */
}
@


1.1
log
@Initial revision
@
text
@d5 1
a5 1
Delete a vertex from model
d8 3
a10 2
m		model
v		vertex to delete
@
