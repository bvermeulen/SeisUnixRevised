head     1.2;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


1.2
date     95.05.31.13.10.22;  author john;  state Exp;
branches ;
next     1.1;

1.1
date     95.05.30.16.07.19;  author john;  state Exp;
branches ;
next     ;


desc
@ke.c
@


1.2
log
@added documentation
@
text
@#include "Triangles/triP.h"

void killEdge (Edge *e, Face **fs)
/*****************************************************************************
killEdge -  Delete an edge
******************************************************************************
Input:
e	Edge to delete

Output:
fs	surviving Face

******************************************************************************
Notes:
For each vertex of the edge, if the edge is the last adjacent to the
vertex, then delete the vertex.  If different faces are adjacent to the
edge, then merge one face into the other. The surviving face (fs) is returned.
******************************************************************************
Author:  Dave Hale, Colorado School of Mines, 06/04/91
****************************************************************************/
{
	VertexUse *vu,*vum;
	EdgeUse *eu,*eum,*eut;
	Face *f,*fm;
	
	/* determine edge and vertex uses and faces */
	eu = e->eu;
	eum = eu->euMate;
	vu = eu->vu;
	vum = eum->vu;
	f = eu->f;
	fm = eum->f;
	
	/* if there are two faces */
	if (f!=fm) {
	
		/* delete the one owned by the edge-use mate */
		fm->m->f = f;
		fm->fPrev->fNext = fm->fNext;
		fm->fNext->fPrev = fm->fPrev;
		free(fm);
		
		/* edge-uses in deleted face are now owned by surviving face */
		for (eut=eum->euCW; eut->f!=f; eut=eut->euCW)
			eut->f = f;
		
		/* remember the surviving face */
		*fs = f;
	}
	
	/* ensure surviving face's edge-use is valid */
	f->eu = eu->euCW->euCW;
	
	/* hook up edge uses */
	eu->euCCW->euCW = eum->euCW;
	eum->euCCW->euCW = eu->euCW;
	eu->euCW->euCCW = eum->euCCW;
	eum->euCW->euCCW = eu->euCCW;
	
	/* delete edge uses */
	free(eu);
	free(eum);
	
	/* delete vertex-uses (and vertices if last use deleted) */
	if (vu->vuNext==vu)
		free(vu->v);
	else {
		vu->v->vu = vu->vuNext;
		vu->vuPrev->vuNext = vu->vuNext;
		vu->vuNext->vuPrev = vu->vuPrev;
		free(vu);
	}
	if (vum->vuNext==vum)
		free(vum->v);
	else {
		vum->v->vu = vum->vuNext;
		vum->vuPrev->vuNext = vum->vuNext;
		vum->vuNext->vuPrev = vum->vuPrev;
		free(vum);
	}
}
@


1.1
log
@Initial revision
@
text
@d4 17
a20 4
/* Delete an edge.  For each vertex of the edge, if the edge is 
/* the last adjacent to the vertex, then delete the vertex.  If different
/* faces are adjacent to the edge, then merge one face into the other. 
/* The surviving face (fs) is returned. */
a81 1

@
