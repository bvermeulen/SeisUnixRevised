head     1.2;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


1.2
date     95.05.31.13.10.45;  author john;  state Exp;
branches ;
next     1.1;

1.1
date     95.05.30.16.07.57;  author john;  state Exp;
branches ;
next     ;


desc
@ue.c
@


1.2
log
@added documentation
@
text
@#include "Triangles/triP.h"

/* functions declared and used internally */
static correctTrisAroundVertex(Vertex *v);

int unfixEdge(Edge *e)
/*****************************************************************************
unfixEdge - unfix edge 
******************************************************************************
Input:
e		edge to be unfixed

Returns:
0		if unable to unfix edge
1		otherwise
******************************************************************************
Notes:
Unfixes an edge that was fixed previously via fixEdgeBetweenVertices.
If unable to unfix edge, this function returns 0, otherwise returns 1.
******************************************************************************
Author:  Chris Elmer & Dave Hale, Colorado School of Mines, 06/04/91
******************************************************************************/
{
	/* if edge is on boundary, then cannot unfix it */
	if(e->eu->f==NULL || e->eu->euMate->f==NULL) return 0;

	/* unfix the edge */
	e->fixed = 0;

	/* correct triangles containing endpoints of edge */
	correctTrisAroundVertex(e->eu->vu->v);
	correctTrisAroundVertex(e->eu->euMate->vu->v);  
	
	/* success! */
	return 1;
}

static correctTrisAroundVertex (Vertex *v)
/******************************************************************************
correctTrisAroundVertex -
*******************************************************************************
Input:
v	pointer to Vertex

*******************************************************************************
Notes:
For each unfixed edge connected to a vertex, check to see if that edge should
be swapped, according to the Delaunay circumcircle test.  If necessary, swap
the edge, and then (recursively) call this function for each of the endpoints
of the old edge (which includes the vertex v passed as an argument).

Used internally in unfixEdge.
*******************************************************************************
Author:  Chris Elmer & Dave Hale, Colorado School of Mines, 06/04/91
******************************************************************************/
{
	Vertex *v2,*vtemp1,*vtemp2;
	VertexUse *vu;
	Edge *enew;
	Face *fnew,*fs,*t;
	Model *m;

	/* determine model */
	m = (v->vu->eu->f!=NULL)?v->vu->eu->f->m:v->vu->eu->euMate->f->m;

	/* loop over all edges connected to (vertex-uses of) this vertex */
	vu = v->vu;
	do {
		/* if edge is not fixed */
		if (!vu->eu->e->fixed) {

			/* find an adjoining triangle to this edge, and the
			/* vertex opposite this edge in the other triangle */
			t = vu->eu->f;
			vtemp1 = vu->eu->euMate->euCCW->vu->v;

			/* if vertex is inside triangle's circumcircle */
			if (inCircumTri(vtemp1->x,vtemp1->y,t)) {
			
				/* get the other two vertices in quad */
				vtemp2 = vu->eu->euCCW->vu->v;
				v2 = vu->eu->euMate->vu->v;

				/* 2 triangles will be deleted */
				if (m->tDel!=NULL) {
					m->tDel(m,t);
					m->tDel(m,vu->eu->euMate->f);
				}

				/* swap the edge */
				killEdge(vu->eu->e,&fs);
				makeEdgeFace(vtemp1,vtemp2,&enew,&fnew);
				circumTri(fs);
				circumTri(fnew);

				/* 2 triangles were added */
				if (m->tAdd!=NULL) {
					m->tAdd(m,fs);
					m->tAdd(m,fnew);
				}

				/* correct tris around endpoints of old edge */
				correctTrisAroundVertex(v);
				correctTrisAroundVertex(v2);
				break;
			}
		}

		/* next vertex-use */
		vu = vu->vuNext;

	} while (vu!=v->vu);
}
@


1.1
log
@Initial revision
@
text
@d8 1
a8 1
unfix edge (that was fixed previously via fixEdgeBetweenVertices)
d12 4
d18 1
d40 7
d51 4
@
