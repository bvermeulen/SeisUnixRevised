head     1.3;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


1.3
date     95.05.31.15.42.59;  author john;  state Exp;
branches ;
next     1.2;

1.2
date     95.05.31.13.10.18;  author john;  state Exp;
branches ;
next     1.1;

1.1
date     95.05.30.16.07.11;  author john;  state Exp;
branches ;
next     ;


desc
@itim.c
@


1.3
log
@*** empty log message ***
@
text
@#include "Triangles/triP.h"

Tri* insideTriInModel (Model *m, Tri *start, float x, float y)
/*****************************************************************************
insideTriInModel - return pointer to triangle in model containing
                   specified (x,y) coordinates
******************************************************************************
Input:
m		Model
start		triangle to look at first (NULL to begin looking anywhere)
x		x-coordinate
y		y-coordinate

******************************************************************************
Notes:
Points on an edge of a triangle are assumed to be inside that triangle.
An edge may be used by two triangles, so two triangles may "contain"
a point that lies on an edge.  The first triangle found to contain
the specified point is returned.
******************************************************************************
Author:  Dave Hale, Colorado School of Mines, 09/11/90
******************************************************************************/
{
	int inside=0;
	float x1,y1,x2,y2,x3,y3,s1,s2;
	Vertex *v1,*v2,*v3;
	EdgeUse *eu;
	Tri *t;
	
	/* start at some face in model */
	t = (start==NULL ? m->f : start);
	
	/* loop over triangles until point is inside */
	while (!inside) {
		
		/* loop over all edge-uses in triangle */
		eu = t->eu;
		do {
		
			/* vertices at ends of edge */
			v1 = eu->vu->v;  x1 = v1->x;  y1 = v1->y;
			v2 = eu->euCW->vu->v;  x2 = v2->x;  y2 = v2->y;
			
			/* other vertex */
			v3 = eu->euCCW->vu->v;  x3 = v3->x;  y3 = v3->y;
			
			/* cross-products */
			s1 = (x2-x1)*(y3-y1)-(x3-x1)*(y2-y1);
			s2 = (x2-x1)*(y-y1)-(x-x1)*(y2-y1);
			
			/* if cross-products have different sign */
			if (s1*s2<0.0) {
				
				/* if triangle opposite current edge exists */
				if (eu->euMate->f!=NULL) {
				
					/* look at that triangle next */
					t = eu->euMate->f;
					break;
				}
			}	
						
			/* next edge-use */
			eu = eu->euCW;
			
		} while (eu!=t->eu);
		
		/* if did not break, then point is inside triangle */
		if (eu==t->eu) inside = 1;
	}
	
	/* return pointer to triangle containing point */
	return t;
}
@


1.2
log
@added documentation
@
text
@@


1.1
log
@Initial revision
@
text
@d5 2
a6 1
Return pointer to triangle in model containing specified (x,y) coordinates
d9 1
a9 1
m		model
d13 1
@
