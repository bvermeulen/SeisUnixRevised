head     1.2;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


1.2
date     95.05.31.13.10.26;  author john;  state Exp;
branches ;
next     1.1;

1.1
date     95.05.30.16.07.26;  author john;  state Exp;
branches ;
next     ;


desc
@mbet.c
@


1.2
log
@added documentation
@
text
@#include "Triangles/triP.h"

void makeBoundaryEdgeTri (Vertex *v, Edge **enew, Tri **tnew)
/******************************************************************************
makeBoundaryEdgeTri - Create a boundary edge and triangle by connecting two 
                      vertices adjacent to the specified boundary vertex.
*******************************************************************************
Input:
v		specified boundary Vertex

Output:
enew		new boundary Edge
tnew		new boundary triangle

*******************************************************************************
Notes:
The specified vertex and the adjacent vertices on the boundary
are assumed to be colinear.  Therefore, the resulting
boundary triangle has zero area, and is intended to enable
deletion of the specified vertex from the boundary.
*******************************************************************************
Author:  Dave Hale, Colorado School of Mines, 07/09/90
******************************************************************************/
{
	Vertex *vi,*vo;
	VertexUse *vu,*vui,*vuo;
	Edge *e;
	EdgeUse *eu,*eui,*euo;
	Face *f;
	
	/* determine boundary edge use corresponding to boundary vertex */
	vu = v->vu;
	do {
		eu = vu->eu;
		vu = vu->vuNext;
	} while (eu->f!=NULL);
	
	/* make boundary edge and face, 2 edge uses, and 2 vertex uses */
	e = (Edge*)malloc(sizeof(Edge));  e->ea = NULL;
	f = (Face*)malloc(sizeof(Face));  f->fa = NULL;
	eui = (EdgeUse*)malloc(sizeof(EdgeUse));  eui->eua = NULL;
	euo = (EdgeUse*)malloc(sizeof(EdgeUse));  euo->eua = NULL;
	vui = (VertexUse*)malloc(sizeof(VertexUse));  vui->vua = NULL;
	vuo = (VertexUse*)malloc(sizeof(VertexUse));  vuo->vua = NULL;
	
	/* vertices corresponding to inner and outer vertex uses */
	vi = eu->euCW->vu->v;
	vo = eu->euCCW->vu->v;
	
	/* vertex uses inside and outside new boundary edge */
	vui->eu = eui;
	vui->vuPrev = vi->vu;
	vui->vuNext = vi->vu->vuNext;
	vui->vuPrev->vuNext = vui;
	vui->vuNext->vuPrev = vui;
	vui->v = vi;
	vuo->eu = euo;
	vuo->vuPrev = vo->vu;
	vuo->vuNext = vo->vu->vuNext;
	vuo->vuPrev->vuNext = vuo;
	vuo->vuNext->vuPrev = vuo;
	vuo->v = vo;
	
	/* new boundary edge */
	e->eu = eui;
	e->fixed = 1;
	
	/* edge uses inside and outside new boundary edge */
	eu->f = eu->euCCW->f = f;
	eui->f = f;
	eui->vu = vui;
	eui->euMate = euo;
	eui->euCW = eu->euCCW;
	eui->euCCW = eu;
	eui->e = e;
	euo->f = NULL;
	euo->vu = vuo;
	euo->euMate = eui;
	euo->euCW = eu->euCW;
	euo->euCCW = eu->euCCW->euCCW;
	euo->e = e;
	eui->euCW->euCCW = eui;
	eui->euCCW->euCW = eui;
	euo->euCW->euCCW = euo;
	euo->euCCW->euCW = euo;
	
	/* face */
	f->m = eu->euMate->f->m;
	f->fPrev = f->m->f;
	f->fNext = f->m->f->fNext;
	f->fPrev->fNext = f;
	f->fNext->fPrev = f;
	f->eu = eu;
	circumTri(f);
	
	/* return new edge and triangle */
	*enew = e;
	*tnew = f;
}
@


1.1
log
@Initial revision
@
text
@d4 20
a23 6
/* Create a boundary edge and triangle by connecting two 
/* vertices adjacent to the specified boundary vertex.
/* The specified vertex and the adjacent vertices on the boundary
/* are assumed to be colinear.  Therefore, the resulting
/* boundary triangle has zero area, and is intended to enable
/* deletion of the specified vertex from the boundary. */
@
