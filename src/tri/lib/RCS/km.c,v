head     1.2;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


1.2
date     95.05.31.13.10.24;  author john;  state Exp;
branches ;
next     1.1;

1.1
date     95.05.30.16.07.22;  author john;  state Exp;
branches ;
next     ;


desc
@km.c
@


1.2
log
@added documentation
@
text
@#include "Triangles/triP.h"

void killModel (Model *m)
/*****************************************************************************
killModel - Delete a model along with everything in it
******************************************************************************
Input:
m		model

******************************************************************************
Author:  Dave Hale, Colorado School of Mines, 07/09/90
******************************************************************************/
{
	Face *f,*fnext;
	EdgeUse *eu,*eunext;
	VertexUse *vu;

	/* loop over all faces in model */
	f = m->f;
	do {	

		/* determine next f before this one is deleted */
		fnext = f->fNext;
		
		/* loop over all edge-uses in face */
		eu = f->eu;
		do {
		
			/* determine next eu before deleting this one */
			eunext = eu->euCW;
				
			/* if only one vertex-use is left, delete vertex */
			if (eu->vu->vuNext==eu->vu) {
				free(eu->vu->v);
			
			/* else, unhook this vertex-use from linked list */
			} else {
				eu->vu->vuPrev->vuNext = eu->vu->vuNext;
				eu->vu->vuNext->vuPrev = eu->vu->vuPrev;
			}
			
			/* delete vertex-use */
			free(eu->vu);
		
			/* if edge-use has no mate, delete edge now */
			if (eu->euMate==NULL)
				free(eu->e);
				
			/* else, if edge-use has a mate, delete edge later */
			else
				eu->euMate->euMate = NULL;
			
			/* delete edge-use */
			free(eu);
			
			/* next edge-use */
			eu = eunext;
			
		} while (eu!=f->eu);
		
		/* delete face */
		free(f);
		
		/* next face */
		f = fnext;
		
	} while (f!=m->f);
	
	/* delete model */
	free(m);
}
@


1.1
log
@Initial revision
@
text
@d5 1
a5 1
Delete a model along with everything in it
d9 1
@
