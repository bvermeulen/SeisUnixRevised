head     1.2;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


1.2
date     95.05.31.13.10.10;  author john;  state Exp;
branches ;
next     1.1;

1.1
date     95.05.30.16.06.54;  author john;  state Exp;
branches ;
next     ;


desc
@i3v.c
@


1.2
log
@added documentation
@
text
@#include "Triangles/triP.h"

int in3Vertices (float x, float y, Vertex *v1, Vertex *v2, Vertex *v3)
/*****************************************************************************
in3Vertices -  determine whether or not a vertex is inside triangle (v1,v2,v3)
******************************************************************************
Input:
x	x-coordinate of vertex
y	y-coordinate of vertex
v1	pointer to first Vertex
v2	pointer to second Vertex
v3	pointer to third Vertex

Returns:
1	if x,y inside of v1,v2,v3
0	otherwise

******************************************************************************
Notes:
A vertex exactly on an edge of the triangle is taken as being inside
******************************************************************************
Author:  Dave Hale, Colorado School of Mines, 06/04/91
*****************************************************************************/
{
	float s1,s2,s3;
	float x1,y1,x2,y2,x3,y3;
	
	x1 = v1->x;  y1 = v1->y;
	x2 = v2->x;  y2 = v2->y;
	x3 = v3->x;  y3 = v3->y;	
	s1 = (x-x1)*(y2-y1)-(x2-x1)*(y-y1);
	s2 = (x-x2)*(y3-y2)-(x3-x2)*(y-y2);
	if (s1*s2<=0) return 0;
	s3 = (x-x3)*(y1-y3)-(x1-x3)*(y-y3);
	if (s2*s3<=0 || s1*s3<=0) return 0;
	return 1;
}
@


1.1
log
@Initial revision
@
text
@d4 20
a23 2
/* determine whether or not a vertex is inside triangle (v1,v2,v3);
/* a vertex exactly on a an edge of the triangle is not inside */
@
