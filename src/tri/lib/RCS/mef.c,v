head     1.2;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


1.2
date     95.05.31.13.10.29;  author john;  state Exp;
branches ;
next     1.1;

1.1
date     95.05.30.16.07.29;  author john;  state Exp;
branches ;
next     ;


desc
@mef.c
@


1.2
log
@added documentation
@
text
@#include "Triangles/triP.h"

void makeEdgeFace (Vertex *v1, Vertex *v2, Edge **enew, Face **fnew)
/******************************************************************************
makeEdgeFace - Create an edge by connecting two vertices.
*******************************************************************************
Input:
v1		First Vertex
v2		second Vertex

Output:
enew		new Edge
fnew		new Face

*******************************************************************************
Notes:
The vertices must be adjacent to a single common face.
This face is closed off by the new edge, and a new edge and
a new face are made and returned. 

*******************************************************************************
Author:  Dave Hale, Colorado School of Mines, 07/09/90
******************************************************************************/
{
	VertexUse *vu,*vum,*vu1,*vu2;
	Edge *e;
	EdgeUse *eu,*eum,*eu1,*eu2,*eut;
	Face *f,*fm;
	
	/* find vertex-use of v1 that shares a face with a vu of v2 */
	vu2 = NULL;
	vu1 = v1->vu;
	while (vu2==NULL) {
		for (vu = vu1->eu->euCW->vu; 
			vu!=vu1 && vu->eu->f!=NULL && vu->v!=v2;
			vu = vu->eu->euCW->vu);
		if (vu->v==v2)
			vu2 = vu;
		else
			vu1 = vu1->vuNext;
	}
	
	/* create two vertex-uses, one for each end of edge */
	vu = (VertexUse*)malloc(sizeof(VertexUse));  vu->vua = NULL;
	vu->v = v2;
	vu->vuPrev = vu2;
	vu->vuNext = vu2->vuNext;
	vu2->vuNext->vuPrev = vu;
	vu2->vuNext = vu;
	vum = (VertexUse*)malloc(sizeof(VertexUse));  vum->vua = NULL;
	vum->v = v1;
	vum->vuPrev = vu1;
	vum->vuNext = vu1->vuNext;
	vu1->vuNext->vuPrev = vum;
	vu1->vuNext = vum;
	
	/* create edge and two edge-uses, one for each side of edge */
	eu1 = vu1->eu;
	eu2 = vu2->eu;
	e = (Edge*)malloc(sizeof(Edge));  e->ea = NULL;
	e->eu = eu = (EdgeUse*)malloc(sizeof(EdgeUse));  eu->eua = NULL;
	e->fixed = 0;
	eum = (EdgeUse*)malloc(sizeof(EdgeUse));  eum->eua = NULL;
	eu->e = eum->e = e;
	eu->vu = vu;
	vu->eu = eu;
	eum->vu = vum;
	vum->eu = eum;
	eu->euMate = eum;
	eum->euMate = eu;
	eu->euCW = eu1;
	eu->euCCW = eu2->euCCW;
	eum->euCW = eu2;
	eum->euCCW = eu1->euCCW;
	eu1->euCCW->euCW = eum;
	eu2->euCCW->euCW = eu;
	eu1->euCCW = eu;
	eu2->euCCW = eum;
	
	/* create a face */
	f = eu1->f;
	fm = (Face*)malloc(sizeof(Face));  fm->fa = NULL;
	fm->eu = eum;
	fm->fPrev = f;
	fm->fNext = f->fNext;
	f->fNext->fPrev = fm;
	f->fNext = fm;
	fm->m = f->m;
	
	/* make all edge-uses owned by the appropriate faces */
	f->eu = eu1;
	eu->f = f;
	eum->f = fm;
	for (eut=eu2; eut->f!=fm; eut=eut->euCW)
		eut->f = fm;
	
	/* set output values */
	*enew = e;
	*fnew = fm;
}
@


1.1
log
@Initial revision
@
text
@d4 20
a23 4
/* Create an edge by connecting two vertices.
/* The vertices must be adjacent to a single common face.
/* This face is closed off by the new edge, and a new edge and
/* a new face are made and returned. */
@
