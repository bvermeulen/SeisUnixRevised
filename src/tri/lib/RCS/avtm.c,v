head     1.3;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


1.3
date     95.05.31.13.09.45;  author john;  state Exp;
branches ;
next     1.2;

1.2
date     95.05.30.16.10.35;  author john;  state Exp;
branches ;
next     1.1;

1.1
date     95.05.30.16.06.14;  author john;  state Exp;
branches ;
next     ;


desc
@avtm.c
@


1.3
log
@*** empty log message ***
@
text
@#include "Triangles/triP.h"

Vertex *addVertexToModel (Model *m, float x, float y)
/*****************************************************************************
addVertexToModel - Add a vertex to model, and return pointer to new vertex
******************************************************************************
Input:
m		model
x		x-coordinate of new vertex
y		y-coordinate of new vertex
******************************************************************************
Notes:
If the new vertex is close to an existing vertex, this function returns NULL.
******************************************************************************
Author:  Dave Hale, Colorado School of Mines, 07/09/90
******************************************************************************/
{
	int first,fixed=0;
	Vertex *v,*vo,*v1,*v2,*v3,*v1fixed,*v2fixed;
	VertexUse *vu;
	Edge *e,*e1,*e2,*e3,*eb=NULL;
	EdgeUse *eu,*euo;
	Face *f,*fs,*f1,*f2,*f3;
	
	/* find existing vertex nearest to new vertex */
	v = nearestVertexInModel(m,NULL,x,y);
	
	/* if new vertex is too close to existing vertex, return existing */
	if (sqrt((v->x-x)*(v->x-x)+(v->y-y)*(v->y-y))<m->eps) return NULL;
	
	/* find triangle that contains new vertex */
	f = (v->vu->eu->f!=NULL?v->vu->eu->f:v->vu->eu->euMate->f);
	f = insideTriInModel(m,f,x,y);
	
	/* if the edge nearest new vertex is a fixed edge and very nearby */
	e = nearestEdgeInModel(m,f->eu->e,x,y);
	if (e->fixed && distanceToEdge(e,x,y)<m->eps) {
		
		/* remember the endpoints of the fixed edge */
		v1fixed = e->eu->vu->v;
		v2fixed = e->eu->euCW->vu->v;
		
		/* unfix the fixed edge */
		e->fixed = 0;
		
		/* project new vertex onto edge */
		projectToEdge(e,&x,&y);
		
		/* remember edge was fixed */
		fixed = 1;
		
		/* if edge is on boundary, remember to delete it later */
		if (e->eu->f==NULL || e->eu->euMate->f==NULL) eb = e;
	}
	
	/* this triangle will be deleted */
	if (m->tDel!=NULL) m->tDel(m,f);
	
	/* make edges from new vertex to vertices of this triangle */
	vu = f->eu->vu;
	v1 = vu->v;
	v2 = vu->eu->euCW->vu->v;
	v3 = vu->eu->euCCW->vu->v;
	f1 = f;
	makeEdgeVertex(v1,x,y,f1,&e1,&v);
	makeEdgeFace(v2,v,&e2,&f2);
	makeEdgeFace(v3,v,&e3,&f3);
	
	/* 3 triangles were made */
	if (m->tAdd!=NULL) {
		m->tAdd(m,f1);
		m->tAdd(m,f2);
		m->tAdd(m,f3);
	}
	
	/* compute circumcircles of the 3 new triangles */
	vu = v->vu;
	do {
		circumTri(vu->eu->f);
		vu = vu->vuNext;
	} while (vu!=v->vu);
	
	/* loop over vertex-uses (triangles) in clockwise direction */
	vu = v->vu;
	first = 1;
	do {
		/* determine edge-uses and edge opposite new vertex */
		eu = vu->eu->euCW;
		euo = eu->euMate;
		e = eu->e;
		
		/* if opposite triangle's circumcircle contains new vertex */
		if (euo->f!=NULL && 
			!euo->e->fixed && 
			inCircumTri(x,y,euo->f)) {
			
			/* determine vertex opposite edge */
			vo = euo->euCCW->vu->v;
			
			/* 2 triangles will be deleted */
			if (m->tDel!=NULL) {
				m->tDel(m,e->eu->f);
				m->tDel(m,e->eu->euMate->f);
			}
			
			/* kill opposite edge */
			killEdge(e,&fs);
			
			/* make edge connecting new and opposite vertices */
			makeEdgeFace(v,vo,&e,&f);
			
			/* 2 triangles were created */
			if (m->tAdd!=NULL) {
				m->tAdd(m,e->eu->f);
				m->tAdd(m,e->eu->euMate->f);
			}
			
			/* compute circumcircles of 2 new triangles */
			circumTri(e->eu->f);
			circumTri(e->eu->euMate->f);
		
		/* else, go to next vertex-use (triangle) clockwise */
		} else {
			vu = vu->eu->euCCW->euMate->vu;
			first = 0;
		}
		
	} while (vu!=v->vu || first);
	
	/* if new vertex was added on an edge that was fixed */
	if (fixed) {
		
		/* loop over vertex uses of new vertex */
		vu = v->vu;
		do {
			/* edge use */
			eu = vu->eu;
			
			/* fix edge if it was part of fixed edge */
			if (eu->euCCW->vu->v==v1fixed)
				eu->euCCW->e->fixed = 1;
			if (eu->euCW->vu->v==v2fixed)
				eu->e->fixed = 1;
			
			/* next vertex use */
			vu = vu->vuNext;
			
		} while (vu!=v->vu);
	}
	
	/* if edge on boundary needs to be deleted, delete it */
	if (eb!=NULL) killBoundaryEdge(eb);
	
	/* if specified, do add vertex function */
	if (m->vAdd!=NULL) m->vAdd(m,v);
	
	/* debug */
	/* checkModel(m); */
	
	/* return pointer to vertex */
	return v;
}
@


1.2
log
@updated doc information
@
text
@@


1.1
log
@Initial revision
@
text
@d5 1
a5 1
Add a vertex to model, and return pointer to new vertex
@
