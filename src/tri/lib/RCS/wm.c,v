head     1.2;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


1.2
date     95.05.31.13.10.49;  author john;  state Exp;
branches ;
next     1.1;

1.1
date     95.05.30.16.08.04;  author john;  state Exp;
branches ;
next     ;


desc
@wm.c
@


1.2
log
@added documentation
@
text
@#include "Triangles/triP.h"

/* functions defined and used internally */
static void _writeModel (FILE *fp, Model *m, size_t sma);
static void writeFace (FILE *fp, Face *f, size_t sfa);
static void writeEdgeUse (FILE *fp, EdgeUse *eu, size_t seua);
static void writeEdge (FILE *fp, Edge *e, size_t sea);
static void writeVertexUse (FILE *fp, VertexUse *vu, size_t svua);
static void writeVertex (FILE *fp, Vertex *v, size_t sva);

void writeModel (Model *m, FILE *fp)
/*****************************************************************************
writeModel - Write a model to a file
******************************************************************************
Input:
m		pointer to Model
fp		file pointer

******************************************************************************
Author:    Jack K. Cohen, Center for Wave Phenomena, 09/15/90
Modified:  Dave Hale, Center for Wave Phenomena, 11/29/90
	Converted representation of model from ascii to binary for speed.
	Added code to write attributes.
Modified:  Craig Artley, Center for Wave Phenomena, 04/08/94
	Corrected bug;  previously the edgeuses and vertextuses of the
	exterior face were not written.
******************************************************************************/
{
	Face *f;
	EdgeUse *eu,*euFirst;
	Address *vhead=NULL,*ehead=NULL;
	int repeat;


	/* write the model data */
	_writeModel(fp,m,m->sma);

	/* loop over all faces in model */
	f = m->f;
	do {	

		writeFace(fp,f,m->sfa);

		/* loop over all edgeuses in face */
		eu = f->eu;
		do {
		
			/* write edgeuse, edge, vertexuse, and vertex */
			writeEdgeUse(fp,eu,m->seua);
			ehead = updateAddressTree(ehead,eu->e,&repeat);
			if (!repeat) writeEdge(fp,eu->e,m->sea);
			writeVertexUse(fp,eu->vu,m->svua);
			vhead = updateAddressTree(vhead,eu->vu->v,&repeat);
			if (!repeat) writeVertex(fp,eu->vu->v,m->sva);
				
			/* next edgeuse */
			eu = eu->euCW;

		} while (eu!=f->eu);
		
		/* next face */
		f = f->fNext;

	} while (f!=m->f);

	/* loop over all faces in model, looking for the exterior */
	f = m->f;
	do {

		/* find an edgeuse belonging to the exterior face */
		if (f->eu->euMate->f==NULL) {
			eu = f->eu->euMate;
			break;
		} else if (f->eu->euCW->euMate->f==NULL) {
			eu = f->eu->euCW->euMate;
			break;
		} else if (f->eu->euCCW->euMate->f==NULL) {
			eu = f->eu->euCCW->euMate;
			break;
		}

		/* next face */
		f = f->fNext;

	} while (f!=m->f);

	/* confirm the resulting edgeuse belongs to the exterior */
	if (eu->f!=NULL) {
		fprintf(stderr,"writeModel: can't find exterior face\n");
		exit(EXIT_FAILURE);
	}

	/* loop over all edgeuses in exterior face */
	euFirst = eu;
	do {
		/* write edgeuse and vertexuse (edges & vertices done above) */
		writeEdgeUse(fp,eu,m->seua);
		writeVertexUse(fp,eu->vu,m->svua);

		/* next edgeuse */
		eu = eu->euCW;

	} while (eu!=euFirst);
}

static void _writeModel(FILE *fp, Model *m, size_t sma)
{
	int type=MODELTYPE;
	fwrite(&type,sizeof(int),1,fp);
	fwrite(&m,sizeof(Model*),1,fp);
	fwrite(m,sizeof(Model),1,fp);
	if (m->ma!=NULL && sma!=0) fwrite(m->ma,sma,1,fp);
}

static void writeFace(FILE *fp, Face *f, size_t sfa)
{
	int type=FACETYPE;
	fwrite(&type,sizeof(int),1,fp);
	fwrite(&f,sizeof(Face*),1,fp);
 	fwrite(f,sizeof(Face),1,fp);
	if (f->fa!=NULL && sfa!=0) fwrite(f->fa,sfa,1,fp);
}

static void writeEdgeUse(FILE *fp, EdgeUse *eu, size_t seua)
{
	int type=EDGEUSETYPE;
	fwrite(&type,sizeof(int),1,fp);
	fwrite(&eu,sizeof(EdgeUse*),1,fp);
	fwrite(eu,sizeof(EdgeUse),1,fp);
	if (eu->eua!=NULL && seua!=0) fwrite(eu->eua,seua,1,fp);
}

static void writeEdge(FILE *fp, Edge *e, size_t sea)
{
	int type=EDGETYPE;
	fwrite(&type,sizeof(int),1,fp);
	fwrite(&e,sizeof(Edge*),1,fp);
	fwrite(e,sizeof(Edge),1,fp);
	if (e->ea!=NULL && sea!=0) fwrite(e->ea,sea,1,fp);
}

static void writeVertexUse(FILE *fp, VertexUse *vu, size_t svua)
{
	int type=VERTEXUSETYPE;
	fwrite(&type,sizeof(int),1,fp);
	fwrite(&vu,sizeof(VertexUse*),1,fp);
	fwrite(vu,sizeof(VertexUse),1,fp);
	if (vu->vua!=NULL && svua!=0) fwrite(vu->vua,svua,1,fp);
}

static void writeVertex(FILE *fp, Vertex *v, size_t sva)
{
	int type=VERTEXTYPE;
	fwrite(&type,sizeof(int),1,fp);
	fwrite(&v,sizeof(Vertex*),1,fp);
	fwrite(v,sizeof(Vertex),1,fp);
	if (v->va!=NULL && sva!=0) fwrite(v->va,sva,1,fp);
}


#ifdef TEST
main()
{
	Model *m;

	m = makeModel(1.0,2.0,5.0,6.0);
	writeModel(m,stdout);
}
#endif
@


1.1
log
@Initial revision
@
text
@d13 1
a13 1
Write a model to a file
d16 1
a16 1
m		model
d18 1
@
