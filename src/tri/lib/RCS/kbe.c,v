head     1.2;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


1.2
date     95.05.31.13.10.20;  author john;  state Exp;
branches ;
next     1.1;

1.1
date     95.05.30.16.07.16;  author john;  state Exp;
branches ;
next     ;


desc
@kbe.c
@


1.2
log
@added documentation
@
text
@#include "Triangles/triP.h"

void killBoundaryEdge (Edge *e)
/*****************************************************************************
killBoundaryEdge -  Kill a boundary edge
******************************************************************************
Input:
e 	boundary Edge

******************************************************************************
Notes:
Killing a boundary edge is typically done after a new boundary vertex
is inserted on an existing boundary edge.

******************************************************************************
Author:  Dave Hale, Colorado School of Mines, 06/04/91
*****************************************************************************/
{
	Face *f;
	EdgeUse *eu,*eui,*euo;
	VertexUse *vui,*vuo;
	
	/* determine edge uses and vertex uses inside and outside boundary */
	if (e->eu->f==NULL) {
		euo = e->eu;
		eui = euo->euMate;
	} else {
		eui = e->eu;
		euo = eui->euMate;
	}
	vui = eui->vu;
	vuo = euo->vu;
	
	/* delete face */
	f = eui->f;
	f->fNext->fPrev = f->fPrev;
	f->fPrev->fNext = f->fNext;
	f->m->f = f->fNext;
	free(f);
	
	/* loop over edge uses that will be outside */
	eu = eui->euCW;
	do {
		eu->f = NULL;
		eu->e->fixed = 1;
		eu = eu->euCW;		
	} while(eu!=eui);
	
	/* delete vertex uses */
	vui->vuNext->vuPrev = vui->vuPrev;
	vui->vuPrev->vuNext = vui->vuNext;
	vui->v->vu = vui->vuNext;
	free(vui);
	vuo->vuNext->vuPrev = vuo->vuPrev;
	vuo->vuPrev->vuNext = vuo->vuNext;
	vuo->v->vu = vuo->vuNext;
	free(vuo);
	
	/* delete edge uses */
	eui->euCW->euCCW = euo->euCCW;
	eui->euCCW->euCW = euo->euCW;
	euo->euCW->euCCW = eui->euCCW;
	euo->euCCW->euCW = eui->euCW;
	free(eui);
	free(euo);
	
	/* delete edge */
	free(e);
}
@


1.1
log
@Initial revision
@
text
@d4 14
a17 2
/* Kill a boundary edge, which is typically done after a new
/* boundary vertex is inserted on an existing boundary edge. */
@
