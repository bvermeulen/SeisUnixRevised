head     1.2;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


1.2
date     95.05.31.13.10.30;  author john;  state Exp;
branches ;
next     1.1;

1.1
date     95.05.30.16.07.33;  author john;  state Exp;
branches ;
next     ;


desc
@mev.c
@


1.2
log
@added documentation
@
text
@#include "Triangles/triP.h"

void makeEdgeVertex (Vertex *v1, float x, float y, Face *f, 
	Edge **enew, Vertex **vnew)
/******************************************************************************
makeEdgeVertex - Create an edge connecting an existing vertex (v1) to a
                 new vertex (with coordinates x,y) in a specified face f. 
                 Return the new edge and the new vertex.
*******************************************************************************
Input:
v1		existing Vertex
x		x-coordinate of new vertex
y		y-coordinate of new vertex
f		specified Face

Output:
enew		new Edge
vnew		new Vertex

*******************************************************************************
Author:  Dave Hale, Colorado School of Mines, 07/09/90
******************************************************************************/
{
	Vertex *v;
	VertexUse *vu,*vum,*vu1;
	Edge *e;
	EdgeUse *eu,*eum,*eu1;
	
	/* determine which use of vertex v1 is adjacent to face f */
	for (vu1=v1->vu; vu1->eu->f!=f; vu1=vu1->vuNext);
	
	/* create a new vertex and vertex-use */
	v = (Vertex*)malloc(sizeof(Vertex));  v->va = NULL;
	vu = (VertexUse*)malloc(sizeof(VertexUse));  vu->vua = NULL;
	v->x = x;
	v->y = y;
	v->fixed = 0;
	v->vu = vu;
	vu->v = v;
	vu->vuNext = vu->vuPrev = vu;
	
	/* create a new vertex-use for existing vertex */
	vum = (VertexUse*)malloc(sizeof(VertexUse));  vum->vua = NULL;
	vum->v = v1;
	vum->vuPrev = vu1;
	vum->vuNext = vu1->vuNext;
	vu1->vuNext->vuPrev = vum;
	vu1->vuNext = vum;
	
	/* create edge and two edge-uses, one for each side of edge */
	eu1 = vu1->eu;
	e = (Edge*)malloc(sizeof(Edge));  e->ea = NULL;
	e->eu = eu = (EdgeUse*)malloc(sizeof(EdgeUse));  eu->eua = NULL;
	e->fixed = 0;
	eum = (EdgeUse*)malloc(sizeof(EdgeUse));  eum->eua = NULL;
	eu->e = eum->e = e;
	eu->f = eum->f = f;
	eu->vu = vu;
	vu->eu = eu;
	eum->vu = vum;
	vum->eu = eum;
	eu->euMate = eum;
	eum->euMate = eu;
	eu->euCW = eu1;
	eu->euCCW = eum;
	eum->euCW = eu;
	eum->euCCW = eu1->euCCW;
	eu1->euCCW->euCW = eum;
	eu1->euCCW = eu;
	
	/* set output values */
	*enew = e;
	*vnew = v;
}
@


1.1
log
@Initial revision
@
text
@d5 18
a22 3
/* Create an edge connecting an existing vertex (v1) to a
/* new vertex (with coordinates x,y) in a specified face f. 
/* Return the new edge and the new vertex. */
@
