head	1.16;
access;
symbols;
locks; strict;
comment	@ * @;


1.16
date	2011.10.20.21.08.05;	author john;	state Exp;
branches;
next	1.15;

1.15
date	95.08.17.10.36.07;	author john;	state Exp;
branches;
next	1.14;

1.14
date	94.03.15.12.00.11;	author john;	state Exp;
branches;
next	1.13;

1.13
date	94.03.14.12.39.09;	author john;	state Exp;
branches;
next	1.12;

1.12
date	94.01.28.14.42.28;	author jkc;	state Exp;
branches;
next	1.11;

1.11
date	93.08.13.10.18.24;	author john;	state Exp;
branches;
next	1.10;

1.10
date	91.09.04.16.44.26;	author jkcohen;	state Exp;
branches;
next	1.9;

1.9
date	90.05.30.16.12.36;	author jkc;	state Exp;
branches;
next	1.8;

1.8
date	90.05.29.17.23.05;	author dhale;	state Exp;
branches;
next	1.7;

1.7
date	90.04.29.08.53.16;	author jkc;	state Exp;
branches;
next	1.6;

1.6
date	90.04.28.19.35.28;	author jkc;	state Exp;
branches;
next	1.5;

1.5
date	90.04.28.09.58.40;	author jkc;	state Exp;
branches;
next	1.4;

1.4
date	90.04.24.15.07.54;	author jkc;	state Exp;
branches;
next	1.3;

1.3
date	90.04.21.14.55.02;	author jkc;	state Exp;
branches;
next	1.2;

1.2
date	90.04.10.18.31.27;	author jkc;	state Exp;
branches;
next	1.1;

1.1
date	90.04.10.09.57.17;	author jkc;	state Exp;
branches;
next	;


desc
@Error handling package
@


1.16
log
@added copyright statement
@
text
@/* Copyright (c) Colorado School of Mines, 2011.*/
/* All rights reserved.                       */

/*********************** self documentation **********************/
/**************************************************************************
ERRPKGE - routines for reporting errors

err	print warning on application program error and die
warn	print warning on application program error
syserr	print warning on application program error using errno and die

***************************************************************************
Function Prototypes:
void err (char *fmt, ...);
void warn (char *fmt, ...);
void syserr (char *fmt, ...);

***************************************************************************
Return: void

***************************************************************************
Notes:
fmt		a printf format string ("\n" not needed)
...		the variables referenced in the format string

Examples:
	err("Cannot divide %f by %f", x, y);
	warn("fmax = %f exceeds half nyquist= %f", fmax, 0.25/dt);
 
	if (NULL == (fp = fopen(xargv[1], "r")))
 		err("can't open %s", xargv[1]);
 	...
 	if (-1 == close(fd))
 		err("close failed");

***************************************************************************
References:
Kernighan and Pike, "The UNIX Programming Environment", page 207.
Also Rochkind, "Advanced UNIX Programming", page 13.

***************************************************************************
Authors:SEP: Jeff Thorson, Stew Levin	CWP: Shuki Ronen, Jack Cohen
**************************************************************************/
/**************** end self doc ********************************/

#include <stdarg.h>
#include "par.h"

void err(char *fmt, ...)
{
	va_list args;

 
	if (EOF == fflush(stdout)) {
		fprintf(stderr, "\nerr: fflush failed on stdout");
	}
	fprintf(stderr, "\n%s: ", xargv[0]);
	va_start(args,fmt);
	vfprintf(stderr, fmt, args);
	va_end(args);
	fprintf(stderr, "\n");
	exit(EXIT_FAILURE);
}


void warn(char *fmt, ...)
{
	va_list args;

	if (EOF == fflush(stdout)) {
		fprintf(stderr, "\nwarn: fflush failed on stdout");
	}
	fprintf(stderr, "\n%s: ", xargv[0]);
	va_start(args,fmt);
	vfprintf(stderr, fmt, args);
	va_end(args);
	fprintf(stderr, "\n");
	return;
}


#ifndef SUN_A
#include <errno.h>
void syserr(char *fmt, ...)
{
	va_list args;

	if (EOF == fflush(stdout)) {
		fprintf(stderr, "\nsyserr: fflush failed on stdout");
	}
	fprintf(stderr, "\n%s: ", xargv[0]);
	va_start(args,fmt);
	vfprintf(stderr, fmt, args);
	va_end(args);
	fprintf(stderr, " (%s)\n", strerror(errno));
	exit(EXIT_FAILURE);
}
#else
void syserr(char *fmt, ...)
{
	va_list args;

	if (EOF == fflush(stdout)) {
		fprintf(stderr, "\nsyserr: fflush failed on stdout");
	}
	fprintf(stderr, "\n%s: ", xargv[0]);
	va_start(args,fmt);
	vfprintf(stderr, fmt, args);
	va_end(args);
	fprintf(stderr, " (%s)\n");
	exit(EXIT_FAILURE);
}
#endif /* end of SUN_A */

#ifdef TEST
main(int argc, char **argv)
{
	FILE *fp;
	float fmax, dt=0.004, nyq,  x=1.0, y=0.0;

	initargs(argc, argv);

	nyq = 1.0/(2.0*dt); fmax = nyq/2.0 + .01;

	fprintf(stderr, "\nTrue values:\n");
	fprintf(stderr, "fmax=%f, half nyquist=%f\n", fmax, 0.25/dt);
	fprintf(stderr, "filename=%s\n", xargv[1]);
	fprintf(stderr, "x=%f, y=%f\n\n", x, y);

 	warn("warn: fmax = %f exceeds half nyquist= %f", fmax, 0.25/dt);

 	warn("warn: Cannot divide x=%f by y=%f", x, y);
	
  	if (NULL == (fp = fopen(xargv[1], "r")))
		err("err: can't open %s", xargv[1]);

	return EXIT_SUCCESS;
}
#endif
@


1.15
log
@added SUN_A block for SUN installs with GCC but without GLIBC
@
text
@d1 3
@


1.14
log
@change to dummy selfdoc
@
text
@d78 2
a80 1

d95 16
@


1.13
log
@added dummy selfdocs
@
text
@d20 2
a21 13
err:
void err(format, args)
format		a printf format string ("\n" not needed)
args		the variables referenced in the format string

warn:
void warn(format, args)
format		a printf format string ("\n" not needed)
args		the variables referenced in the format string

void syserr(format, args)
format		a printf format string ("\n" not needed)
args		the variables referenced in the format string
@


1.12
log
@removed copyright statement, stray occurences of 'ushort'
@
text
@d1 53
a56 38
/* errpkge - routines for reporting errors
 *
 * err     - print warning on application program error and die
 * warn    - print warning on application program error
 *
 * Returns:
 *	err  - void
 *	warn - void
 *
 * Synopsis:
 *	void err(format, args)
 *	format - a printf format string ("\n" not needed)
 *      args   - the variables referenced in the format string
 *
 *	void warn(format, args)
 *	format - a printf format string ("\n" not needed)
 *      args   - the variables referenced in the format string
 *
 *
 * Credits: 
 *	Kernighan and Pike, "The UNIX Programming Environment", page 207.
 *	Also Rochkind, "Advanced UNIX Programming", page 13.
 *	SEP: Jeff Thorson, Stew
 *	CWP: Shuki, Jack
 *
 * Examples:
 *	err("Cannot divide %f by %f", x, y);
 *	warn("fmax = %f exceeds half nyquist= %f", fmax, 0.25/dt);
 *
 *	if (NULL == (fp = fopen(xargv[1], "r")))
 *		err("can't open %s", xargv[1]);
 *	...
 *	if (-1 == close(fd))
 *		err("close failed");
 *
 */


a71 1

@


1.11
log
@removed "extern int errno declaration"
@
text
@a0 13
/*----------------------------------------------------------------------
 * Copyright (c) Colorado School of Mines, 1989.
 * All rights reserved.
 *
 * This code is part of SU.  SU stands for Seismic Unix, a processing line
 * developed at the Colorado School of Mines, partially based on Stanford
 * Exploration Project (SEP) software.  Inquiries should be addressed to:
 *
 *  Jack K. Cohen, Center for Wave Phenomena, Colorado School of Mines,
 *  Golden, CO 80401  (jkc@@dix.mines.colorado.edu)
 *----------------------------------------------------------------------
 */

@


1.10
log
@syswarn is gone
no more echo of strerror from err()
Note: for the benefit of syscalls, still have syswarn;
might move it there from errpkge some day.  So errno.h, errno too.
@
text
@a88 1
extern int errno;
@


1.9
log
@Folded syserr into err and marked syserr & syswarn as obsolescent
@
text
@d46 1
a46 1
 *	if (-1 == (fd = open(xargv[1], O_RDONLY)))
a54 2
extern int errno;

a66 1
	if (errno) fprintf(stderr, " (%s)", strerror(errno));
d88 2
a90 4


/* The following two codes are OBSOLESCENT */

a105 16
void syswarn(char *fmt, ...)
{
	va_list args;

	if (EOF == fflush(stdout)) {
		fprintf(stderr, "\nsyswarn: fflush failed on stdout");
	}
	fprintf(stderr, "\n%s: ", xargv[0]);
	va_start(args,fmt);
	vfprintf(stderr, fmt, args);
	va_end(args);
	fprintf(stderr, " (%s)\n", strerror(errno));
	errno = 0;	/* having reported the error, reset errno */
	return;
}

d109 1
a109 1
	int fd;
d125 1
a125 1
  	if (-1 == (fd = open(xargv[1], O_RDONLY)))
@


1.8
log
@commented out the call to syserr in err()
@
text
@a20 2
 * syserr  - print warning on a system error and die
 * syswarn - print warning on a system error
a24 2
 *	syserr  - void
 *	syswarn - void
a34 5
 *	void syserr(format, args)
 *	format - a printf format string ("\n" not needed) usually
 *		 giving the name of the offending system call
 *      args   - the variables referenced in the format string, often
 *		 just an offending file name
a35 7
 *	void syswarn(format, args)
 *	format - a printf format string ("\n" not needed) usually
 *		 giving the name of the offending system call
 *      args   - the variables referenced in the format string, often
 *		 just an offending file name
 *
 *
d47 1
a47 1
 *		syserr("can't open %s", xargv[1]);
d50 1
a50 1
 *		syserr("close failed");
a51 8
 *	...
 *	if (-1 == (fd = open(xargv[j], O_RDONLY)))
 *		syswarn("can't open %s, processing next file",
 *			xargv[j]);
 *	continue;
 *	...
 *
 *
a54 1
/* For syserr() and syswarn() */
a61 2
 	/* if (errno) syserr(fmt, args); Dave and Jack don't know how. */
 
d69 1
d92 4
d144 2
d147 1
a147 3
  		syswarn("syswarn: can't open %s", xargv[1]);
  
 	err("err: Cannot divide x=%f by y=%f", x, y);
@


1.7
log
@changed type of syswarn to void (now unset errno)
@
text
@d87 1
a87 1
 	if (errno) syserr(fmt, args);
@


1.6
log
@Put back the lateral to syserr if errno is set.
Sigh.  This is a close call.
@
text
@d28 1
a28 1
 *	syswarn - int: errno
d45 1
a45 1
 *	int syswarn(format, args)
d133 1
a133 1
int syswarn(char *fmt, ...)
d145 2
a146 1
	return errno;
a168 1
	errno = 0;
@


1.5
log
@Using new ANSI C strerror routine.
Eliminated call of syserr from err when errno is set--will get erroneous
sys info more often than not.  But it is painful to not get it when
it's relevant.  Too bad.
@
text
@d86 3
d168 1
@


1.4
log
@ANSI C version using <stdarg.h>
@
text
@d80 1
a80 2
extern int errno, sys_nerr;
extern char *sys_errlist[];
a88 3

	if (errno) syserr(fmt, args);

d126 1
a126 4
	if (errno > 0 && errno < sys_nerr) { 
		fprintf(stderr, " (%s)", sys_errlist[errno]);
	}
	fprintf(stderr, "\n");
d141 1
a141 4
	if (errno > 0 && errno < sys_nerr) { 
		fprintf(stderr, " (%s)", sys_errlist[errno]);
	}
	fprintf(stderr, "\n");
d165 1
a165 1
 	err("err: Cannot divide %f by %f", x, y);
@


1.3
log
@No change
@
text
@d10 1
a10 1
 *  Golden, CO 80401  (isis!csm9a!jkcohen)
d14 1
a14 1
#include <varargs.h>
d83 1
a83 2
void err(va_alist)
va_dcl
a85 1
	char *format;
a86 1

d91 1
a91 1
	if (errno) syserr(va_alist);
d94 2
a95 3
	va_start(args);
	format = va_arg(args, char *);
	vfprintf(stderr, format, args);
d103 1
a103 2
void warn(va_alist)
va_dcl
a105 1
	char *format;
a106 1

d111 2
a112 3
	va_start(args);
	format = va_arg(args, char *);
	vfprintf(stderr, format, args);
d119 1
a119 2
void syserr(va_alist)
va_dcl
a121 1
	char *format;
a122 1

d124 1
a124 1
		err("syswarn: fflush failed on stdout");
d127 2
a128 3
	va_start(args);
	format = va_arg(args, char *);
	vfprintf(stderr, format, args);
d137 1
a137 2
int syswarn(va_alist)
va_dcl
a139 1
	char *format;
a140 1

d142 1
a142 1
		err("syswarn: fflush failed on stdout");
d145 2
a146 3
	va_start(args);
	format = va_arg(args, char *);
	vfprintf(stderr, format, args);
a153 1

@


1.2
log
@Added check in err() for non-zero errno (& then call syserr to get
full story).
@
text
@@


1.1
log
@Initial revision
@
text
@d93 3
@
