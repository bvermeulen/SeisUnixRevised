head	1.13;
access;
symbols;
locks; strict;
comment	@ * @;


1.13
date	2011.10.20.21.08.05;	author john;	state Exp;
branches;
next	1.12;

1.12
date	2003.08.19.21.15.57;	author john;	state Exp;
branches;
next	1.11;

1.11
date	98.04.01.16.38.51;	author john;	state Exp;
branches;
next	1.10;

1.10
date	97.05.16.20.15.14;	author john;	state Exp;
branches;
next	1.9;

1.9
date	97.01.13.21.41.33;	author john;	state Exp;
branches;
next	1.8;

1.8
date	94.03.14.12.39.06;	author john;	state Exp;
branches;
next	1.7;

1.7
date	90.04.24.15.03.05;	author jkc;	state Exp;
branches;
next	1.6;

1.6
date	90.04.21.21.54.05;	author jkc;	state Exp;
branches;
next	1.5;

1.5
date	90.04.10.18.33.37;	author jkc;	state Exp;
branches;
next	1.4;

1.4
date	90.04.10.18.32.32;	author jkc;	state Exp;
branches;
next	1.3;

1.3
date	90.04.07.08.39.00;	author jkc;	state Exp;
branches;
next	1.2;

1.2
date	90.04.07.08.19.07;	author jkc;	state Exp;
branches;
next	1.1;

1.1
date	90.04.05.21.02.49;	author jkc;	state Exp;
branches;
next	;


desc
@Routines that check for error returns from alloc routines.
@


1.13
log
@added copyright statement
@
text
@/* Copyright (c) Colorado School of Mines, 2011.*/
/* All rights reserved.                       */


#include "cwp.h"

/*********************** self documentation **********************/
/*****************************************************************************
EALLOC - Allocate and free multi-dimensional arrays with error reports.

ealloc1			allocate a 1d array
erealloc1		reallocate a 1d array
ealloc2			allocate a 2d array
ealloc3			allocate a 3d array
ealloc4			allocate a 4d array
ealloc5                 allocate a 5d array
ealloc6                 allocate a 6d array
ealloc1int		allocate a 1d array of ints
erealloc1int		reallocate a 1d array of ints
ealloc2int		allocate a 2d array of ints
ealloc3int		allocate a 3d array of ints
ealloc4int              allocate a 4d array of ints
ealloc5int              allocate a 5d array of ints
ealloc1float		allocate a 1d array of floats
erealloc1float		reallocate a 1d array of floats
ealloc2float		allocate a 2d array of floats
ealloc3float		allocate a 3d array of floats
ealloc4float            allocate a 4d array of floats
ealloc5float            allocate a 5d array of floats
ealloc6float            allocate a 6d array of floats
ealloc5ushort           allocate a 5d array of unsigned shorts
ealloc5uchar            allocate a 5d array of unsigned chars
ealloc6ushort           allocate a 6d array of unsigned shorts
ealloc6uchar            allocate a 6d array of unsigned chars
ealloc1double		allocate a 1d array of doubles
erealloc1double		reallocate a 1d array of doubles
ealloc2double		allocate a 2d array of doubles
ealloc3double		allocate a 3d array of doubles
ealloc1complex		allocate a 1d array of complex values	
erealloc1complex	reallocate a 1d array of complex values
ealloc2complex		allocate a 2d array of complex values
ealloc3complex		allocate a 3d array of complex values

*****************************************************************************
Function Prototypes:
void *ealloc1 (size_t n1, size_t size);
void *erealloc1 (void *v, size_t n1, size_t size);
void **ealloc2 (size_t n1, size_t n2, size_t size);
void ***ealloc3 (size_t n1, size_t n2, size_t n3, size_t size);
void ****ealloc4 (size_t n1, size_t n2, size_t n3, size_t n4, size_t size);
void *****ealloc5 (size_t n1, size_t n2, size_t n3, size_t n4, size_t n5, size_t size);
void ******ealloc6 (size_t n1, size_t n2, size_t n3, size_t n4, size_t n5, 
                   size_t n6, size_t size);

int *ealloc1int(size_t n1);
int *erealloc1int(int *v, size_t n1);
int **ealloc2int(size_t n1, size_t n2);
int ***ealloc3int(size_t n1, size_t n2, size_t n3);
int ****ealloc4int(size_t n1, size_t n2, size_t n3, size_t n4);
int *****ealloc5int(size_t n1, size_t n2, size_t n3, size_t n4, size_t n5);

float *ealloc1float(size_t n1);
float *erealloc1float(float *v, size_t n1);
float **ealloc2float(size_t n1, size_t n2);
float ***ealloc3float(size_t n1, size_t n2, size_t n3);
float ****ealloc4float(size_t n1, size_t n2, size_t n3, size_t n4);
float *****ealloc5float(size_t n1, size_t n2, size_t n3, size_t n4, size_t n5);
float ******ealloc6float(size_t n1, size_t n2, size_t n3, size_t n4, size_t n5, 
                        size_t n6);

unsigned short *****ealloc5ushort(size_t n1, size_t n2, size_t n3, size_t n4, size_t n5);
unsigned char *****ealloc5uchar(size_t n1, size_t n2, size_t n3, size_t n4, size_t n5);
unsigned short ******ealloc6ushort(size_t n1, size_t n2, size_t n3, size_t n4, 
      size_t n5, size_t n6);
unsigned char ******ealloc6uchar(size_t n1, size_t n2, size_t n3, size_t n4, 
      size_t n5, size_t n6);

double *ealloc1double(size_t n1);
double *erealloc1double(double *v, size_t n1);
double **ealloc2double(size_t n1, size_t n2);
double ***ealloc3double(size_t n1, size_t n2, size_t n3);
complex *ealloc1complex(size_t n1);
complex *erealloc1complex(complex *v, size_t n1);
complex **ealloc2complex(size_t n1, size_t n2);
complex ***ealloc3complex(size_t n1, size_t n2, size_t n3);

*****************************************************************************
Notes:
These routines simply call those in ../../cwp/lib/alloc.c and issue
an error message via the syserr routine if the underlying malloc
came up empty.  See alloc.c for notes on the routines.

The routines in ../../cwp/lib/alloc.c were written by Dave Hale
(Zhaobo Meng added 4d (except alloc4), 5d and 6d functions).

*****************************************************************************
Author: Jack Cohen, Center for Wave Phenomena
Zhaobo Meng added 4d (except ealloc4), 5d and 6d functions
*****************************************************************************/
/**************** end self doc ********************************/

#include "par.h"
#define ERROR	NULL

/* allocate a 1-d array */
void *ealloc1 (size_t n1, size_t size)
{
	void *p;

	if (ERROR == (p=alloc1(n1, size)))
		syserr("%s: malloc failed", __FILE__);
	return p;
}

/* re-allocate a 1-d array */
void *erealloc1 (void *v, size_t n1, size_t size)
{
	void *p;

	if (ERROR == (p=realloc1(v, n1, size)))
		syserr("%s: realloc failed", __FILE__);
	return p;
}

/* allocate a 2-d array */
void **ealloc2 (size_t n1, size_t n2, size_t size)
{
	void **p;

	if (ERROR == (p=alloc2(n1, n2, size)))
		syserr("%s: malloc failed", __FILE__);
	return p;
}

/* allocate a 3-d array */
void ***ealloc3 (size_t n1, size_t n2, size_t n3, size_t size)
{
	void ***p;

	if (ERROR == (p=alloc3(n1, n2, n3, size)))
		syserr("%s: malloc failed", __FILE__);
	return p;
}


/* allocate a 4-d array */
void ****ealloc4 (size_t n1, size_t n2, size_t n3, size_t n4, size_t size)
{
	void ****p;

	if (ERROR == (p=alloc4(n1, n2, n3, n4, size)))
		syserr("%s: malloc failed", __FILE__);
	return p;
}

/* allocate a 5-d array */
void *****ealloc5 (size_t n1, size_t n2, size_t n3, size_t n4, size_t n5, size_t size)
{
	void *****p;

	if (ERROR == (p=alloc5(n1, n2, n3, n4, n5, size)))
		syserr("%s: malloc failed", __FILE__);
	return p;
}

/* allocate a 6-d array */
void ******ealloc6 (size_t n1, size_t n2, size_t n3, size_t n4, size_t n5, 
                    size_t n6, size_t size)
{
	void ******p;

	if (ERROR == (p=alloc6(n1, n2, n3, n4, n5, n6, size)))
		syserr("%s: malloc failed", __FILE__);
	return p;
}

/* allocate a 1-d array of ints */
int *ealloc1int(size_t n1)
{
	int *p;

	if (ERROR == (p=alloc1int(n1)))
		syserr("%s: malloc failed", __FILE__);
	return p;
}


/* re-allocate a 1-d array of ints */
int *erealloc1int(int *v, size_t n1)
{
	int *p;

	if (ERROR == (p=realloc1int(v,n1)))
		syserr("%s: realloc failed", __FILE__);
	return p;
}


/* allocate a 2-d array of ints */
int **ealloc2int(size_t n1, size_t n2)
{
	int **p;

	if (ERROR == (p=alloc2int(n1, n2)))
		syserr("%s: malloc failed", __FILE__);
	return p;
}


/* allocate a 3-d array of ints */
int ***ealloc3int(size_t n1, size_t n2, size_t n3)
{
	int ***p;

	if (ERROR == (p=alloc3int(n1, n2, n3)))
		syserr("%s: malloc failed", __FILE__);
	return p;
}

/* allocate a 4-d array of ints */
int ****ealloc4int(size_t n1, size_t n2, size_t n3, size_t n4)
{
	int ****p;

	if (ERROR == (p=alloc4int(n1, n2, n3,n4)))
		syserr("%s: malloc failed", __FILE__);
	return p;
}

/* allocate a 5-d array of ints */
int *****ealloc5int(size_t n1, size_t n2, size_t n3, size_t n4, size_t n5)
{
	int *****p;

	if (ERROR == (p=alloc5int(n1, n2, n3, n4, n5)))
		syserr("%s: malloc failed", __FILE__);
	return p;
}


/* allocate a 1-d array of floats */
float *ealloc1float(size_t n1)
{
	float *p;

	if (ERROR == (p=alloc1float(n1)))
		syserr("%s: malloc failed", __FILE__);
	return p;
}


/* re-allocate a 1-d array of floats */
float *erealloc1float(float *v, size_t n1)
{
	float *p;

	if (ERROR == (p=realloc1float(v, n1)))
		syserr("%s: realloc failed", __FILE__);
	return p;
}


/* allocate a 2-d array of floats */
float **ealloc2float(size_t n1, size_t n2)
{
	float **p;

	if (ERROR == (p=alloc2float(n1, n2)))
		syserr("%s: malloc failed", __FILE__);
	return p;
}


/* allocate a 3-d array of floats */
float ***ealloc3float(size_t n1, size_t n2, size_t n3)
{
	float ***p;

	if (ERROR == (p=alloc3float(n1, n2, n3)))
		syserr("%s: malloc failed", __FILE__);
	return p;
}

/* allocate a 4-d array of floats */
float ****ealloc4float(size_t n1, size_t n2, size_t n3, size_t n4)
{
	float ****p;

	if (ERROR == (p=alloc4float(n1, n2, n3, n4)))
		syserr("%s: malloc failed", __FILE__);
	return p;
}

/* allocate a 5-d array of floats */
float *****ealloc5float(size_t n1, size_t n2, size_t n3, size_t n4, size_t n5)
{
	float *****p;

	if (ERROR == (p=alloc5float(n1, n2, n3, n4, n5)))
		syserr("%s: malloc failed", __FILE__);
	return p;
}

/* allocate a 6-d array of floats */
float ******ealloc6float(size_t n1, size_t n2, size_t n3, size_t n4, size_t n5,
                         size_t n6)
{
	float ******p;

	if (ERROR == (p=alloc6float(n1, n2, n3, n4, n5, n6)))
		syserr("%s: malloc failed", __FILE__);
	return p;
}

/* allocate a 5-d array of unsigned shorts */
unsigned short *****ealloc5ushort(size_t n1, size_t n2, size_t n3, size_t n4, size_t n5)
{
        unsigned short *****p;

        if (ERROR == (p=alloc5ushort(n1, n2, n3, n4, n5)))
                syserr("%s: malloc failed", __FILE__);
        return p;
}

/* allocate a 6-d array of unsigned shorts */
unsigned short ******ealloc6ushort(size_t n1, size_t n2, size_t n3, size_t n4, 
      size_t n5, size_t n6)
{
        unsigned short ******p;

        if (ERROR == (p=alloc6ushort(n1, n2, n3, n4, n5, n6)))
                syserr("%s: malloc failed", __FILE__);
        return p;
}

/* allocate a 5-d array of unsigned chars */
unsigned char *****ealloc5uchar(size_t n1, size_t n2, size_t n3, size_t n4, size_t n5)
{
        unsigned char *****p;

        if (ERROR == (p=alloc5uchar(n1, n2, n3, n4, n5)))
                syserr("%s: malloc failed", __FILE__);
        return p;
}

/* allocate a 1-d array of doubles */
double *ealloc1double(size_t n1)
{
	double *p;

	if (ERROR == (p=alloc1double(n1)))
		syserr("%s: malloc failed", __FILE__);
	return p;
}


/* re-allocate a 1-d array of doubles */
double *erealloc1double(double *v, size_t n1)
{
	double *p;

	if (ERROR == (p=realloc1double(v, n1)))
		syserr("%s: realloc failed", __FILE__);
	return p;
}


/* allocate a 2-d array of doubles */
double **ealloc2double(size_t n1, size_t n2)
{
	double **p;

	if (ERROR == (p=alloc2double(n1, n2)))
		syserr("%s: malloc failed", __FILE__);
	return p;
}


/* allocate a 3-d array of doubles */
double ***ealloc3double(size_t n1, size_t n2, size_t n3)
{
	double ***p;

	if (ERROR == (p=alloc3double(n1, n2, n3)))
		syserr("%s: malloc failed", __FILE__);
	return p;
}


/* allocate a 1-d array of complexs */
complex *ealloc1complex(size_t n1)
{
	complex *p;

	if (ERROR == (p=alloc1complex(n1)))
		syserr("%s: malloc failed", __FILE__);
	return p;
}


/* re-allocate a 1-d array of complexs */
complex *erealloc1complex(complex *v, size_t n1)
{
	complex *p;

	if (ERROR == (p=realloc1complex(v, n1)))
		syserr("%s: realloc failed", __FILE__);
	return p;
}


/* allocate a 2-d array of complexs */
complex **ealloc2complex(size_t n1, size_t n2)
{
	complex **p;

	if (ERROR == (p=alloc2complex(n1, n2)))
		syserr("%s: malloc failed", __FILE__);
	return p;
}


/* allocate a 3-d array of complexs */
complex ***ealloc3complex(size_t n1, size_t n2, size_t n3)
{
	complex ***p;

	if (ERROR == (p=alloc3complex(n1, n2, n3)))
		syserr("%s: malloc failed", __FILE__);
	return p;
}



#ifdef TEST
main()
{
	short   *hv, **hm;
	int     *iv, **im;
	float   *fv, **fm;
	double  *dv, **dm;
	size_t i1, i2;
	size_t n1, n2;

	scanf("%d %*[^\n]", &n1);
	scanf("%d %*[^\n]", &n2);

	/* Exercise 1-d routines */
	hv = (short *) ealloc1(n1, sizeof(short));
	iv = ealloc1int(n1);
	fv = ealloc1float(n1);
	dv = ealloc1double(n1);

	for (i1 = 0; i1 < n1; ++i1) {
		hv[i1] = i1;
		iv[i1] = i1;
		fv[i1]  = (float) i1;
		dv[i1] = (double) i1;
	}

	printf("short vector:\n");
	for (i1 = 0; i1 < n1; ++i1) {
		printf("hv[%d] = %hd\n", i1, hv[i1]);
	}
	putchar('\n');

	printf("int vector:\n");
	for (i1 = 0; i1 < n1; ++i1) {
		printf("iv[%d] = %d\n", i1, iv[i1]);
	}
	putchar('\n');

	printf("float vector:\n");
	for (i1 = 0; i1 < n1; ++i1) {
		printf("fv[%d] = %f\n", i1, fv[i1]);
	}
	putchar('\n');

	printf("double vector:\n");
	for (i1 = 0; i1 < n1; ++i1) {
		printf("dv[%d] = %lf\n", i1, dv[i1]);
	}
	putchar('\n');


	free1(hv);
	free1int(iv);
	free1float(fv);
	free1double(dv);


	/* Exercise 2-d routines */
	hm = (short **) ealloc2(n1, n2, sizeof(short));
	im = ealloc2int(n1, n2);
	fm = ealloc2float(n1, n2);
	dm = ealloc2double(n1, n2);

	for (i2 = 0; i2 < n2; ++i2) {
		for (i1 = 0; i1 < n1; ++i1) {
			hm[i2][i1] = i1 + 2*i2;
			im[i2][i1] = i1 + 2*i2;
			fm[i2][i1] = (float) (i1 + 2*i2);
			dm[i2][i1] = (double) (i1 + 2*i2);
		}
	}

	printf("short matrix:\n");
	for (i2 = 0; i2 < n2; ++i2) {
		for (i1 = 0; i1 < n1; ++i1) {
			printf("hm[%d, %d] = %hd ", i2, i1, hm[i2][i1]);
		}
		putchar('\n');
	}
	putchar('\n');

	printf("int matrix:\n");
	for (i2 = 0; i2 < n2; ++i2) {
		for (i1 = 0; i1 < n1; ++i1) {
			printf("im[%d, %d] = %d ", i2, i1, im[i2][i1]);
		}
		putchar('\n');
	}
	putchar('\n');

	printf("float matrix:\n");
	for (i2 = 0; i2 < n2; ++i2) {
		for (i1 = 0; i1 < n1; ++i1) {
			printf("fm[%d, %d] = %f ", i2, i1, fm[i2][i1]);
		}
		putchar('\n');
	}
	putchar('\n');

	printf("double matrix:\n");
	for (i2 = 0; i2 < n2; ++i2) {
		for (i1 = 0; i1 < n1; ++i1) {
			printf("dm[%d, %d] = %lf ", i2, i1, dm[i2][i1]);
		}
		putchar('\n');
	}
	putchar('\n');

	free2((void*)hm);
	free2int(im);
	free2float(fm);
	free2double(dm);

	return EXIT_SUCCESS;
}
#endif
@


1.12
log
@19 Aug 2003
@
text
@d1 3
@


1.11
log
@added Zhaobo's 5d ealloc routines
@
text
@d14 1
d27 1
d30 2
d49 2
d65 2
d70 4
d91 1
a91 1
(Zhaobo Meng added 4d (except alloc4) and 5d functions).
d95 1
a95 1
Zhaobo Meng added 4d (except ealloc4) and 5d functions
d163 11
d301 11
d322 11
@


1.10
log
@added Zhaobo Meng's ealloc4 and ealloc5 additions
@
text
@d1 3
d26 2
d60 3
d276 20
@


1.9
log
@fixed path information in sudoc
@
text
@d10 1
d15 2
d21 2
d39 2
d45 3
d52 3
d70 2
a71 1
The routines in ../../cwp/lib/alloc.c were written by Dave Hale.
d75 1
a91 1

a101 1

a111 1

d133 9
d186 20
d250 19
@


1.8
log
@added dummy selfdocs
@
text
@d53 1
a53 1
These routines simply call those in ...cwp/lib/alloc.c and issue
d57 1
a57 1
The routines in ...cwp/lib/alloc.c were written by Dave Hale.
@


1.7
log
@Corrected some mis-types and added mysterious cast for free2 in
the driver.
@
text
@d1 1
d3 50
a52 1
Allocate and free multi-dimensional arrays with error reports.
d57 4
a60 2
Author:    	Jack
Credit:		Dave for the underlying routines
d62 1
@


1.6
log
@alloe -> ealloc
@
text
@d204 1
a204 1
	double *p;
d215 1
a215 1
	double *p;
d226 1
a226 1
	double **p;
d237 1
a237 1
	double ***p;
d304 1
a304 1
	hm = (short *) ealloc2(n1, n2, sizeof(short));
d354 1
a354 1
	free2(hm);
@


1.5
log
@No change (broken -u option).
@
text
@d15 1
a15 1
void *alloe1 (size_t n1, size_t size)
d25 11
d37 1
a37 1
void **alloe2 (size_t n1, size_t n2, size_t size)
d48 1
a48 1
void ***alloe3 (size_t n1, size_t n2, size_t n3, size_t size)
d59 1
a59 1
void ****alloe4 (size_t n1, size_t n2, size_t n3, size_t n4, size_t size)
d70 1
a70 1
int *alloe1int(size_t n1)
d72 1
a72 1
	void *p;
d80 11
d92 1
a92 1
int **alloe2int(size_t n1, size_t n2)
d94 1
a94 1
	void **p;
d103 1
a103 1
int ***alloe3int(size_t n1, size_t n2, size_t n3)
d105 1
a105 1
	void ***p;
d114 1
a114 1
float *alloe1float(size_t n1)
d116 1
a116 1
	void *p;
d124 11
d136 1
a136 1
float **alloe2float(size_t n1, size_t n2)
d138 1
a138 1
	void **p;
d147 1
a147 1
float ***alloe3float(size_t n1, size_t n2, size_t n3)
d149 1
a149 1
	void ***p;
d158 1
a158 1
double *alloe1double(size_t n1)
d160 1
a160 1
	void *p;
d168 11
d180 1
a180 1
double **alloe2double(size_t n1, size_t n2)
d182 1
a182 1
	void **p;
d191 1
a191 1
double ***alloe3double(size_t n1, size_t n2, size_t n3)
d193 1
a193 1
	void ***p;
d202 1
a202 1
complex *alloe1complex(size_t n1)
d204 1
a204 1
	void *p;
d212 11
d224 1
a224 1
complex **alloe2complex(size_t n1, size_t n2)
d226 1
a226 1
	void **p;
d235 1
a235 1
complex ***alloe3complex(size_t n1, size_t n2, size_t n3)
d237 1
a237 1
	void ***p;
d260 4
a263 4
	hv = (short *) alloe1(n1, sizeof(short));
	iv = alloe1int(n1);
	fv = alloe1float(n1);
	dv = alloe1double(n1);
d304 4
a307 4
	hm = (short *) alloe2(n1, n2, sizeof(short));
	im = alloe2int(n1, n2);
	fm = alloe2float(n1, n2);
	dm = alloe2double(n1, n2);
@


1.4
log
@Blame failures on malloc instead of alloc.c subs.
@
text
@@


1.3
log
@Cosmetics:  use EROROR define
@
text
@d20 1
a20 1
		syserr("%s: alloe1 failed", __FILE__);
d31 1
a31 1
		syserr("%s: alloe2 failed", __FILE__);
d42 1
a42 1
		syserr("%s: alloe3 failed", __FILE__);
d53 1
a53 1
		syserr("%s: alloe4 failed", __FILE__);
d64 1
a64 1
		syserr("%s: alloe1int failed", __FILE__);
d75 1
a75 1
		syserr("%s: alloe2int failed", __FILE__);
d86 1
a86 1
		syserr("%s: alloe3int failed", __FILE__);
d97 1
a97 1
		syserr("%s: alloe1float failed", __FILE__);
d108 1
a108 1
		syserr("%s: alloe2float failed", __FILE__);
d119 1
a119 1
		syserr("%s: alloe3float failed", __FILE__);
d130 1
a130 1
		syserr("%s: alloe1double failed", __FILE__);
d141 1
a141 1
		syserr("%s: alloe2double failed", __FILE__);
d152 1
a152 1
		syserr("%s: alloe3double failed", __FILE__);
d163 1
a163 1
		syserr("%s: alloe1complex failed", __FILE__);
d174 1
a174 1
		syserr("%s: alloe2complex failed", __FILE__);
d185 1
a185 1
		syserr("%s: alloe3complex failed", __FILE__);
d304 1
a304 1
	exit(0);
@


1.2
log
@Did alloe1int and so on.
@
text
@d12 1
d19 1
a19 1
	if ((p=alloc1(n1, size)) == NULL)
d30 1
a30 1
	if ((p=alloc2(n1, n2, size)) == NULL)
d41 1
a41 1
	if ((p=alloc3(n1, n2, n3, size)) == NULL)
d52 1
a52 1
	if ((p=alloc4(n1, n2, n3, n4, size)) == NULL)
d63 1
a63 1
	if ((p=alloc1int(n1)) == NULL)
d74 1
a74 1
	if ((p=alloc2int(n1, n2)) == NULL)
d85 1
a85 1
	if ((p=alloc3int(n1, n2, n3)) == NULL)
d96 1
a96 1
	if ((p=alloc1float(n1)) == NULL)
d107 1
a107 1
	if ((p=alloc2float(n1, n2)) == NULL)
d118 1
a118 1
	if ((p=alloc3float(n1, n2, n3)) == NULL)
d129 1
a129 1
	if ((p=alloc1double(n1)) == NULL)
d140 1
a140 1
	if ((p=alloc2double(n1, n2)) == NULL)
d151 1
a151 1
	if ((p=alloc3double(n1, n2, n3)) == NULL)
d162 1
a162 1
	if ((p=alloc1complex(n1)) == NULL)
d173 1
a173 1
	if ((p=alloc2complex(n1, n2)) == NULL)
d184 1
a184 1
	if ((p=alloc3complex(n1, n2, n3)) == NULL)
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
Allocate and free multi-dimensional arrays with error reports  
d19 1
a19 1
		syserr("%s: alloc1 failed", __FILE__);
d25 1
a25 1
void **alloc2 (size_t n1, size_t n2, size_t size)
d30 1
a30 1
		syserr("%s: alloc2 failed", __FILE__);
d36 1
a36 1
void ***alloc3 (size_t n1, size_t n2, size_t n3, size_t size)
d41 1
a41 1
		syserr("%s: alloc3 failed", __FILE__);
d47 1
a47 1
void ****alloc4 (size_t n1, size_t n2, size_t n3, size_t n4, size_t size)
d52 1
a52 1
		syserr("%s: alloc4 failed", __FILE__);
d58 1
a58 1
int *alloc1int(size_t n1)
d60 1
a60 2
	return (int*)alloc1(n1,sizeof(int));
}
d62 3
a64 4
/* free a 1-d array of ints */
void free1int(int *p)
{
	free1(p);
d67 1
d69 1
a69 1
int **alloc2int(size_t n1, size_t n2)
d71 1
a71 2
	return (int**)alloc2(n1,n2,sizeof(int));
}
d73 3
a75 4
/* free a 2-d array of ints */
void free2int(int **p)
{
	free2((void**)p);
d78 1
d80 1
a80 1
int ***alloc3int(size_t n1, size_t n2, size_t n3)
d82 1
a82 2
	return (int***)alloc3(n1,n2,n3,sizeof(int));
}
d84 3
a86 4
/* free a 3-d array of ints */
void free3int(int ***p)
{
	free3((void***)p);
d89 1
d91 1
a91 1
float *alloc1float(size_t n1)
d93 1
a93 2
	return (float*)alloc1(n1,sizeof(float));
}
d95 3
a97 4
/* free a 1-d array of floats */
void free1float(float *p)
{
	free1(p);
d100 1
d102 1
a102 1
float **alloc2float(size_t n1, size_t n2)
d104 1
a104 2
	return (float**)alloc2(n1,n2,sizeof(float));
}
d106 3
a108 4
/* free a 2-d array of floats */
void free2float(float **p)
{
	free2((void**)p);
d111 1
d113 1
a113 1
float ***alloc3float(size_t n1, size_t n2, size_t n3)
d115 1
a115 2
	return (float***)alloc3(n1,n2,n3,sizeof(float));
}
d117 3
a119 4
/* free a 3-d array of floats */
void free3float(float ***p)
{
	free3((void***)p);
d122 1
d124 1
a124 1
double *alloc1double(size_t n1)
d126 1
a126 2
	return (double*)alloc1(n1,sizeof(double));
}
d128 3
a130 4
/* free a 1-d array of doubles */
void free1double(double *p)
{
	free1(p);
d133 1
d135 1
a135 1
double **alloc2double(size_t n1, size_t n2)
d137 1
a137 2
	return (double**)alloc2(n1,n2,sizeof(double));
}
d139 3
a141 4
/* free a 2-d array of doubles */
void free2double(double **p)
{
	free2((void**)p);
d144 1
d146 1
a146 1
double ***alloc3double(size_t n1, size_t n2, size_t n3)
d148 1
a148 2
	return (double***)alloc3(n1,n2,n3,sizeof(double));
}
d150 3
a152 4
/* free a 3-d array of doubles */
void free3double(double ***p)
{
	free3((void***)p);
d155 1
d157 1
a157 1
complex *alloc1complex(size_t n1)
d159 1
a159 2
	return (complex*)alloc1(n1,sizeof(complex));
}
d161 3
a163 4
/* free a 1-d array of complexs */
void free1complex(complex *p)
{
	free1(p);
d166 1
d168 1
a168 1
complex **alloc2complex(size_t n1, size_t n2)
d170 1
a170 2
	return (complex**)alloc2(n1,n2,sizeof(complex));
}
d172 3
a174 4
/* free a 2-d array of complexs */
void free2complex(complex **p)
{
	free2((void**)p);
d177 1
d179 1
a179 1
complex ***alloc3complex(size_t n1, size_t n2, size_t n3)
d181 1
a181 2
	return (complex***)alloc3(n1,n2,n3,sizeof(complex));
}
d183 3
a185 4
/* free a 3-d array of complexs */
void free3complex(complex ***p)
{
	free3((void***)p);
d204 4
a207 4
	hv = (short *) alloc1(n1, sizeof(short));
	iv = alloc1int(n1);
	fv = alloc1float(n1);
	dv = alloc1double(n1);
d248 4
a251 4
	hm = (short *) alloc2(n1, n2, sizeof(short));
	im = alloc2int(n1, n2);
	fm = alloc2float(n1, n2);
	dm = alloc2double(n1, n2);
@
