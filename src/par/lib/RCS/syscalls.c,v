head	1.14;
access;
symbols;
locks; strict;
comment	@ * @;


1.14
date	2011.10.20.21.08.05;	author john;	state Exp;
branches;
next	1.13;

1.13
date	2004.12.23.22.28.13;	author john;	state Exp;
branches;
next	1.12;

1.12
date	2003.08.19.21.15.57;	author john;	state Exp;
branches;
next	1.11;

1.11
date	97.10.15.22.23.00;	author john;	state Exp;
branches;
next	1.10;

1.10
date	96.04.26.20.22.53;	author jkc;	state Exp;
branches;
next	1.9;

1.9
date	94.03.14.12.39.22;	author john;	state Exp;
branches;
next	1.8;

1.8
date	94.01.28.14.42.41;	author jkc;	state Exp;
branches;
next	1.7;

1.7
date	93.08.13.10.19.12;	author john;	state Exp;
branches;
next	1.6;

1.6
date	91.09.04.16.39.37;	author jkcohen;	state Exp;
branches;
next	1.5;

1.5
date	90.12.17.12.14.06;	author jkc;	state Exp;
branches;
next	1.4;

1.4
date	90.04.21.14.54.33;	author jkc;	state Exp;
branches;
next	1.3;

1.3
date	90.04.17.13.55.17;	author jkc;	state Exp;
branches;
next	1.2;

1.2
date	90.04.11.20.40.21;	author jkc;	state Exp;
branches;
next	1.1;

1.1
date	90.04.11.20.29.53;	author jkc;	state Exp;
branches;
next	;


desc
@system calls with error checking
@


1.14
log
@added copyright statement
@
text
@/* Copyright (c) Colorado School of Mines, 2011.*/
/* All rights reserved.                       */

/*********************** self documentation **********************/
/*************************************************************************
SYSCALLS - routines for SYSTEM CALLs with error checking

ecreat		creat with error check
efork		fork with error check
eopen		open with error check
eclose		close with error check
eunlink		unlink with error check
elseek		lseek with error check
epipe		pipe with error check
eread		read with error check
ewrite		write with error check
 
**************************************************************************
Function Prototypes:
int ecreat(char *path, int perms);
int efork(void);
int eopen(char *path, int flags, int perms);
int eclose(int fd);
int eunlink(char *path);
off_t elseek(int fd, off_t offset, int origin);
int epipe(int fd[2]);
ssize_t eread(int fd, char *buf, size_t nbytes);
ssize_t ewrite(int fd, char *buf, size_t nbytes);

**************************************************************************
Returns:
ecreat returns a file descriptor
efork returns child pid to parent, 0 to child or -1 on error
eopen returns a file descriptor
eclose returns 0 on success or -1 on error
eunlink returns 0 on success or -1 on error
elseek returns number of bytes actually read
epipe returns 0 on success or -1 on error
eread returns number of bytes actually read
ewrite returns number of bytes actually written

**************************************************************************
Notes:
Last arg to read/write is unsigned int on some ANSI systems,
here we follow K&R, page 170.

Rochkind says creat is superfluous, K&R say its mandatory.
I think Rochkind is right--see TEST program below.

Getting less than the number of bytes asked for on a read
is *not* a system error--usually it just means end of file
has been reached.  However, it *might* be an error in some
application.  Similarly coming up empty is not a system error,
but might be an application error.  It is left to the user to
trap these instances.  Here is an example of the first situation
after Rochkind, page 43:

	#define SIZE sizeof(struct direct)
 	...
		while ((nread=eread(fd, &dlink, SIZE)) == SIZE) {
 			... (process dlink)
 		}
 		switch(nread) {
 		case 0:
 			return;
 		default:
 			err("partial read");
 		}
 
	In an application where end of file was an error, we could replace
 	case 0 by :
 		case 0:
 			err("EOF");

**************************************************************************
References: 
Rochkind, "Advanced UNIX Programming"
Kernighan and Pike, "The UNIX Programming Environment"
Kernighan and Ritchie, "The C Programming Language"
Mark Williams Company, "ANSI C--A Lexical Guide"

**************************************************************************
Authors: SEP: Rick Otolini, Ron, Jon Claerbout, Stew Levin
CWP: Shuki Ronen, Jack Cohen
*************************************************************************/
/**************** end self doc ********************************/

#include "par.h"
#define ERROR	-1

int ecreat(char *path, int perms)
{
	int fd;

	if (ERROR == (fd = creat(path, perms)))
		syserr("%s: ecreat: creat failed", __FILE__);
	
	return fd;
}

int efork(void)
{
	int fd;

	if (ERROR == (fd = fork()))
		syserr("%s: efork: fork failed", __FILE__);
	
	return fd;
}

int eopen(char *path, int flags, int perms)
{
	int fd;

	if (ERROR == (fd = open(path, flags, perms)))
		syserr("%s: eopen: open failed", __FILE__);
	
	return fd;
}

int eclose(int fd)
{
	int returnmode;

	if (ERROR == (returnmode = close(fd)))
		syserr("%s: eclose: close failed", __FILE__);
	
	return returnmode;
}

int eunlink(char *path)
{
	int returnmode;

	if (ERROR == (returnmode = unlink(path)))
		syserr("%s: eunlink: unlink failed", __FILE__);
	
	return returnmode;
}

off_t elseek(int fd, off_t offset, int origin)
{
	off_t position;

	if (ERROR == (position = lseek(fd, offset, origin)))
		syserr("%s: elseek: lseek failed", __FILE__);
	
	return position;
}


int epipe(int fds[2])
{
	int returnmode;

	if (ERROR == (returnmode = pipe(fds)))
		syserr("%s: epipe: pipe failed", __FILE__);
	
	return returnmode;
}


ssize_t eread(int fd, char *buf, size_t nbytes)
{
	
	ssize_t nread;	/* items actually read	*/

	if (ERROR == (nread = read(fd, buf, nbytes)))
		syserr("%s: eread: read failed", __FILE__);

	return nread;
}

#include <errno.h>

ssize_t ewrite(int fd, char *buf, size_t nbytes)
{
	ssize_t nwrite;	/* bytes actually written	*/

	if (nbytes != (nwrite = write(fd, buf, nbytes))) {
		if (nbytes != -1) errno = EFBIG;
		syserr("%s: ewrite: write failed", __FILE__);
	}

	return nwrite;
}


#ifdef TEST
main(int argc, char **argv)
{
	int fdr, fdw;
	char msg[BUFSIZ];
	char erbuf[BUFSIZ], ewbuf[BUFSIZ], rbuf[BUFSIZ], wbuf[BUFSIZ];
	char pbuf[1];
	int mbytes, rbytes, wbytes;
	int ritems, witems;

	initargs(argc, argv);

	/* Exercise eread and ewrite using other functions in the package */
  	fdw = eopen("junk.wr", O_RDWR | O_CREAT | O_TRUNC, 0666);
 	strcpy(ewbuf, "   Writing with ewrite\n");
	wbytes = strlen(ewbuf);
	ewrite(fdw, ewbuf, wbytes);

	elseek(fdw, 0, SEEK_SET);
	read(fdw, rbuf, wbytes);
	strcpy(msg, "***ewrite from file to buffer ...");
	mbytes = strlen(msg);
	write(STDOUT, msg, mbytes);
	write(STDOUT, rbuf, wbytes);

  	fdr = eopen("junk.rd", O_RDWR | O_CREAT | O_TRUNC, 0666);
 	strcpy(wbuf, "   Reading with eread\n");
	rbytes = strlen(wbuf);
	write(fdr, wbuf, rbytes);
	strcpy(wbuf, "eread saw zero bytes\n");
	wbytes = strlen(wbuf);

	strcpy(msg, "***eread from file to buffer ...");
	mbytes = strlen(msg);
	write(STDOUT, msg, mbytes);
	elseek(fdr, 0, SEEK_SET);
	if (!eread(fdr, erbuf, rbytes)) {
		write(STDOUT, wbuf, wbytes);
	} else {
		write(STDOUT, erbuf, rbytes);
	}

 	strcpy(wbuf, "");
	rbytes = strlen(wbuf);
	write(fdr, wbuf, rbytes);
	strcpy(wbuf, "   eread saw zero bytes\n");
	wbytes = strlen(wbuf);

	strcpy(msg, "***eread from EMPTY file to buffer ...");
	mbytes = strlen(msg);
	write(STDOUT, msg, mbytes);
	elseek(fdr, 0, SEEK_SET);
	if (!eread(fdr, erbuf, rbytes)) {
		write(STDOUT, wbuf, wbytes);
	} else {
		write(STDOUT, erbuf, rbytes);
	}

	eclose(fdw);
	eclose(fdr);
	eunlink("junk.rd");
	eunlink("junk.wr");

	return EXIT_SUCCESS;
}
#endif
@


1.13
log
@off_t cast put in
@
text
@d1 3
@


1.12
log
@19 Aug 2003
@
text
@d22 1
a22 1
long elseek(int fd, long offset, int origin);
a87 1

d138 1
a138 1
long elseek(int fd, long offset, int origin)
d140 1
a140 1
	long position;
@


1.11
log
@stew levin upgrades and some fixes.
@
text
@d24 2
a25 14

#ifdef ssize_t
ssize_t
#else
int
#endif
eread(int fd, char *buf, size_t nbytes);

#ifdef ssize_t
ssize_t
#else
int
#endif
ewrite(int fd, char *buf, size_t nbytes);
d163 1
@


1.10
log
@Made efork declaration ANSI per prototype (Toralf's lint).
@
text
@d24 14
a37 2
int eread(int fd, char *buf, int nbytes);
int ewrite(int fd, char *buf, int nbytes);
d173 1
a173 1
int eread(int fd, char *buf, int nbytes)
d175 1
a175 1
	int nread;	/* items actually read	*/
d185 1
a185 1
int ewrite(int fd, char *buf, int nbytes)
d187 1
a187 1
	int nwrite;	/* bytes actually written	*/
a195 1

@


1.9
log
@added dummy selfdocs
@
text
@d99 1
a99 1
int efork()
@


1.8
log
@removed copyright statement, stray occurences of 'ushort'
@
text
@d1 84
a87 94
/* syscalls - routines for system calls with error checking
 *
 * ecreat  - creat with error check
 * efork   - fork with error check
 * eopen   - open with error check
 * eclose  - close with error check
 * eunlink - unlink with error check
 * elseek  - lseek with error check
 * epipe   - pipe with error check
 * eread   - read with error check
 * ewrite  - write with error check
 *
 * Returns:
 *	ecreat returns a file descriptor
 *	efork returns child pid to parent, 0 to child or -1 on error
 *	eopen returns a file descriptor
 *	eclose returns 0 on success or -1 on error
 *	eunlink returns 0 on success or -1 on error
 *	elseek returns number of bytes actually read
 *	epipe returns 0 on success or -1 on error
 *	eread returns number of bytes actually read
 *	ewrite returns number of bytes actually written
 *
 * Synopsis:
 *	int ecreat(path, perms)
 *	char *path  - filename
 *	int perms   - mode
 *
 *	int efork()
 *
 *	int eclose(fd)
 *	int fd      - file descriptor of file to be read
 *
 *	int eunlink(path)
 *	char *path  - filename
 *
 *	int elseek(fd, offset, origin)
 *	int fd      - file descriptor of file to be read
 *	long offset - shift applied to "origin"
 *	int origin  - SEEK_SET, SEEK_CUR or SEEK_END
 *
 *	int epipe(fds)
 *	int fds[2] - fds[0] reading, fds[1] writing
 *
 *	int eread(fd, buf, nbytes)
 *	int fd      - file descriptor of file to be read
 *	char *buf   - buffer to store characters read
 *	int nbytes  - number of bytes to be read
 *
 *	int ewrite(fd, buf, nbytes)
 *	int fd      - file descriptor of file to be written
 *	char *buf   - buffer to store characters written
 *	int nbytes  - number of bytes to be written
 *
 * Credits: 
 *	Rochkind, "Advanced UNIX Programming"
 *	Kernighan and Pike, "The UNIX Programming Environment"
 *	Kernighan and Ritchie, "The C Programming Language"
 *	Mark Williams Company, "ANSI C--A Lexical Guide"
 *	SEP: Rick, Ron, Jon, Stew
 *	CWP: Shuki, Jack
 *
 * Notes:
 *	Last arg to read/write is unsigned int on some ANSI systems,
 *	here we follow K&R, page 170.
 *
 *	Rochkind says creat is superfluous, K&R say its mandatory.
 *	I think Rochkind is right--see TEST program below.
 *
 *	Getting less than the number of bytes asked for on a read
 *	is *not* a system error--usually it just means end of file
 *	has been reached.  However, it *might* be an error in some
 *	application.  Similarly coming up empty is not a system error,
 *	but might be an application error.  It is left to the user to
 *	trap these instances.  Here is an example of the first situation
 *	after Rochkind, page 43:
 *
 *	#define SIZE sizeof(struct direct)
 *	...
 *		while ((nread=eread(fd, &dlink, SIZE)) == SIZE) {
 *			... (process dlink)
 *		}
 *		switch(nread) {
 *		case 0:
 *			return;
 *		default:
 *			err("partial read");
 *		}
 *
 *	In an application where end of file was an error, we could replace
 *	case 0 by :
 *		case 0:
 *			err("EOF");
 */
@


1.7
log
@removed "extern int errno"
@
text
@a0 13
/*----------------------------------------------------------------------
 * Copyright (c) Colorado School of Mines, 1989.
 * All rights reserved.
 *
 * This code is part of SU.  SU stands for Seismic Unix, a processing line
 * developed at the Colorado School of Mines, partially based on Stanford
 * Exploration Project (SEP) software.  Inquiries should be addressed to:
 *
 *  Jack K. Cohen, Center for Wave Phenomena, Colorado School of Mines,
 *  Golden, CO 80401  (dix@@mines.colorado.edu)
 *----------------------------------------------------------------------
 */

@


1.6
log
@pread is gone.
Note: if we say we NEVER make direct (non-ansi) system calls,
we don't need this (eg. malloc!).  Still uses errno.h 
@
text
@d195 1
a195 1
extern int errno;
@


1.5
log
@Added efork; corrected typo in epipe.
@
text
@a27 1
 * pread   - read on pipe with error check
a38 1
 *	pread returns number of bytes actually read from pipe
a70 5
 *	int pread(fd, buf, nbytes)
 *	int fd;     - file descriptor of file to be read
 *	char *buf;  - pointer to buffer
 *	int nbytes; - number of bytes to be read
 *
d194 2
a195 1

a208 3
int pread(int fd, char *buf, int nbytes)
{
	int nread, ntotal = 0;
a209 19
	while (nbytes) {
		switch (nread = read(fd, buf, nbytes)) {
		case ERROR:
			syserr("%s: pread: read failed", __FILE__);
		case 0:	/* finished */
			return 0; /* must not default so return or break */
		default:
			ntotal += nread;
			nbytes -= nread;
			buf += nread;
		break;
		}
	}

	return ntotal;
}



a218 3
	int (*readptr) ();	/* pointer to eread() or pread()	*/
	int eread();		/* must be declared to use ptr		*/
	int pread();		/* must be declared to use ptr		*/
a271 29


	/* Exercise pread and eread--use < and | for input */
	/* Set appropriate read function for input filetype */
	switch(filestat(STDIN)) {
	case TTY:
		err("input can't be tty");
	break;
	case DISK:
	case TAPE:
		readptr = eread;
		strcpy(ewbuf, "***Disk stdin: use eread ...   ");
		wbytes = strlen(ewbuf);
		ewrite(STDOUT, ewbuf, wbytes);
	break;
	case PIPE:
		readptr = pread;
		strcpy(ewbuf, "***Pipe stdin: use pread ...   ");
		wbytes = strlen(ewbuf);
		ewrite(STDOUT, ewbuf, wbytes);
	break;
	default:
		err("undefined input filetype %s", printstat(STDIN));
	break;
	}

	while ((*readptr)(STDIN, pbuf, 1)) {
		ewrite(STDOUT, pbuf, 1);
	}
@


1.4
log
@No change
@
text
@d20 1
d32 1
d47 2
d129 10
d184 1
a184 1
	if (ERROR == (returnmode = pipe(fds[2])))
@


1.3
log
@added epipe
@
text
@@


1.2
log
@No change.
@
text
@d24 1
d35 1
d56 3
d164 12
@


1.1
log
@Initial revision
@
text
@@
