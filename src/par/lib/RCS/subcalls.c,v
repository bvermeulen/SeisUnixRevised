head	1.39;
access;
symbols;
locks; strict;
comment	@ * @;


1.39
date	2011.11.22.20.21.05;	author john;	state Exp;
branches;
next	1.38;

1.38
date	2011.11.22.16.53.05;	author john;	state Exp;
branches;
next	1.37;

1.37
date	2011.10.20.21.08.05;	author john;	state Exp;
branches;
next	1.36;

1.36
date	2011.09.09.22.26.43;	author john;	state Exp;
branches;
next	1.35;

1.35
date	2010.01.25.17.52.06;	author john;	state Exp;
branches;
next	1.34;

1.34
date	2007.05.03.19.24.57;	author john;	state Exp;
branches;
next	1.33;

1.33
date	2005.12.07.17.43.48;	author john;	state Exp;
branches;
next	1.32;

1.32
date	2005.12.07.17.42.08;	author john;	state Exp;
branches;
next	1.31;

1.31
date	2005.03.21.18.04.32;	author john;	state Exp;
branches;
next	1.30;

1.30
date	2004.12.23.22.26.47;	author john;	state Exp;
branches;
next	1.29;

1.29
date	2004.01.21.18.25.24;	author john;	state Exp;
branches;
next	1.28;

1.28
date	2003.08.19.21.15.57;	author john;	state Exp;
branches;
next	1.27;

1.27
date	96.09.06.18.06.51;	author john;	state Exp;
branches;
next	1.26;

1.26
date	95.08.17.10.36.28;	author john;	state Exp;
branches;
next	1.25;

1.25
date	95.05.03.10.47.10;	author john;	state Exp;
branches;
next	1.24;

1.24
date	94.10.13.11.28.43;	author john;	state Exp;
branches;
next	1.23;

1.23
date	94.08.02.16.03.13;	author jkc;	state Exp;
branches;
next	1.22;

1.22
date	94.03.21.08.52.19;	author john;	state Exp;
branches;
next	1.21;

1.21
date	94.03.14.12.39.19;	author john;	state Exp;
branches;
next	1.20;

1.20
date	94.01.28.14.42.38;	author jkc;	state Exp;
branches;
next	1.19;

1.19
date	91.09.04.16.41.24;	author jkcohen;	state Exp;
branches;
next	1.18;

1.18
date	90.11.04.09.07.10;	author jkc;	state Exp;
branches;
next	1.17;

1.17
date	90.11.03.15.05.30;	author jkc;	state Exp;
branches;
next	1.16;

1.16
date	90.11.03.14.53.54;	author jkc;	state Exp;
branches;
next	1.15;

1.15
date	90.11.03.14.04.59;	author jkc;	state Exp;
branches;
next	1.14;

1.14
date	90.08.08.21.34.36;	author jkc;	state Exp;
branches;
next	1.13;

1.13
date	90.05.24.08.26.12;	author jkc;	state Exp;
branches;
next	1.12;

1.12
date	90.04.24.15.40.54;	author jkc;	state Exp;
branches;
next	1.11;

1.11
date	90.04.24.15.28.55;	author jkc;	state Exp;
branches;
next	1.10;

1.10
date	90.04.21.16.58.08;	author jkc;	state Exp;
branches;
next	1.9;

1.9
date	90.04.17.13.42.11;	author jkc;	state Exp;
branches;
next	1.8;

1.8
date	90.04.11.22.00.10;	author jkc;	state Exp;
branches;
next	1.7;

1.7
date	90.04.11.21.45.34;	author jkc;	state Exp;
branches;
next	1.6;

1.6
date	90.04.11.20.29.21;	author jkc;	state Exp;
branches;
next	1.5;

1.5
date	90.04.10.18.30.17;	author jkc;	state Exp;
branches;
next	1.4;

1.4
date	90.04.10.10.14.00;	author jkc;	state Exp;
branches;
next	1.3;

1.3
date	90.04.10.10.05.04;	author jkc;	state Exp;
branches;
next	1.2;

1.2
date	90.04.09.23.30.24;	author jkc;	state Exp;
branches;
next	1.1;

1.1
date	90.04.09.21.22.34;	author jkc;	state Exp;
branches;
next	;


desc
@system subs (eg. fread) with error detection
@


1.39
log
@removed extraneous stdio
@
text
@/* Copyright (c) Colorado School of Mines, 2011.*/
/* All rights reserved.                       */


/*********************** self documentation **********************/
/***************************************************************************
SUBCALLS - routines for system functions with error checking
 
efopen		fopen with error check
efreopen	freopen with error check
efdopen		fdopen with error check
epopen		popen with error check
efclose		fclose with error check
epclose		pclose with error check
efflush		fflush with error check
eremove		remove with error check
erename		rename with error check
efseek		fseek with error check
efseeko		fseeko with error check
eftell		ftell with error check
eftello		ftello with error check
etmpfile	tmpfile with error check
erewind		rewind (dummy sub)
emkstemp	mkstemp with error check
emalloc		malloc with error check
erealloc	realloc with error check
ecalloc		calloc with error check
efgetpos	fgetpos with error check
efsetpos	fsetpos with error check
efread		fread with error check
efwrite		fwrite with error check

****************************************************************************
Function Prototypes:
FILE *efopen(const char *file, const char *mode);
FILE *efreopen(const char *file, const char *mode, FILE *stream1);
FILE *efdopen(int fd, const char *mode);
FILE *epopen(char *command, char *type);
int efclose(FILE *stream);
int epclose(FILE *stream);
int efflush(FILE *stream);
int eremove(const char *file);
int erename(const char *oldfile, const char* newfile);
int efseek(FILE *stream, off_t offset, int origin);
void erewind(FILE *stream);
long eftell(FILE *stream);
off_t eftello(FILE *streem);
int efseek(FILE *stream, off_t offset, int origin);
FILE *etmpfile(void);
void *emalloc(size_t size);
void *erealloc(void *memptr, size_t size);
void *ecalloc(size_t count, size_t size);
int efgetpos(FILE *stream, fpos_t *position);
int efsetpos(FILE *stream, const fpos_t *position);
size_t efread(void *bufptr, size_t size, size_t count, FILE *stream);
size_t efwrite(void *bufptr, size_t size, size_t count, FILE *stream);

****************************************************************************
Returns: All abort with message on error

efopen returns a FILE pointer
efreopen returns a FILE pointer
efdopen returns a FILE pointer
efclose returns 0
efflush returns 0
eremove returns 0
erename returns 0
efseek returns 0
efseeko returns 0
erewind is void
eftell returns file position indicator
eftello returns file position indicator
etmpfile returns a FILE pointer
emalloc returns void pointer to allocated memory
erealloc returns void pointer to allocated memory
ecalloc returns void pointer to allocated memory
efgetpos returns 0
efsetpos returns 0
efread returns number of items actually read
efwrite returns number of items actually written

****************************************************************************
Notes:
Getting less than the number of bytes asked for on a fread
is *not* a system subroutine error--usually it just means
end of file has been reached.  However, it *might* be an error
in some application.  Similarly coming up empty is not a system
error, but might be an application error.  It is left to the user
to trap these instances.  In particular, feof can be used to test
for end of file.

****************************************************************************
References: 
Rochkind, "Advanced UNIX Programming"
Kernighan and Pike, "The UNIX Programming Environment"
Kernighan and Ritchie, "The C Programming Language"
Mark Williams Company, "ANSI C--A Lexical Guide"

****************************************************************************
Authors: SEP: Rick Ottolini, Ron, Jon Claerbout, Stew Levin
CWP: Shuki Ronen, Jack Cohen
***************************************************************************/
/**************** end self doc ********************************/

#include "par.h"

#define ERROR	NULL

FILE *efopen(const char *file, const char *mode)
{
	FILE *stream;

	if (ERROR == (stream = fopen(file, mode)))
		err("%s: efopen: fopen failed", __FILE__);
	
	return stream;
}


FILE *efreopen(const char *file, const char *mode, FILE *stream1)
{
	FILE *stream2;

	if (ERROR == (stream2 = freopen(file, mode, stream1)))
			err("%s: efreopen: freopen failed", __FILE__);
	
	return stream2;
}

FILE *efdopen(int fd, const char *mode)
{
	FILE *stream;

	if (ERROR == (stream = (FILE *) fdopen(fd, mode)))
		      err("%s: efdopen: fdopen failed", __FILE__);
	
	return stream;
}


FILE *epopen(char *command, char *type)
{
	FILE *stream;

	if (ERROR == (stream = (FILE *) popen(command, type)))
		      err("%s: epopen: popen failed", __FILE__);
	
	return stream;
}


int efclose(FILE *stream)
{
	int status;

	if (EOF == (status = fclose(stream)))
		      err("%s: efclose: fclose failed", __FILE__);

	return status;
}


int epclose(FILE *stream)
{
	int status;

	if (EOF == (status = pclose(stream)))
		      err("%s: epclose: pclose failed", __FILE__);

	return status;
}


int efflush(FILE *stream)
{
	int status;

	if (EOF == (status = fflush(stream)))
		      err("%s: efflush: fflush failed", __FILE__);

	return status;
}


int eremove(const char *file)
{
	int status;

	if ((status = remove(file)))
		syserr("%s: eremove: remove failed", __FILE__);

	return status;
}


int erename(const char *oldfile, const char *newfile)
{
	int status;

	if ((status = rename(oldfile, newfile)))
		syserr("%s: erename: rename failed", __FILE__);

	return status;
}


int efseek(FILE *stream, off_t offset, int origin)
{
	if (fseek(stream, offset, origin))  /* non-zero => error */
		      err("%s: efseek: fseek failed", __FILE__);

	return 0;
}



void erewind(FILE *stream)	/* dummy function */
{
	rewind(stream);
	return;
}


long eftell(FILE *stream)
{
	long position;

	if (-1L == (position = ftell(stream)))
		syserr("%s: eftell: ftell failed", __FILE__);

	return position;
}

int efseeko(FILE *stream, off_t offset, int origin)
{

	/* non-zero => error */
	if (fseeko(stream, (off_t) offset, (int) origin))
		err("%s : efseeko: fseeko failed", __FILE__);

	return 0;
}

off_t eftello(FILE *streem)
{
	off_t eposition;
	off_t test=-1;

	eposition = ftello(streem);
	if (test == eposition) {
		fprintf(stderr,"sizeof(off_t)=%lu\n",
				(unsigned long) sizeof(eposition));
	}
	

	return eposition;
}

FILE * etmpstream (char * prefix) 
{
   	FILE * stream;

   	if (ERROR == (stream = temporary_stream(prefix)))
		err("%s: etmpstream: temporary_stream failed", __FILE__);

   	return stream;
}

FILE *etmpfile(void)
{
	FILE *stream;

	if (ERROR == (stream = tmpfile()))
		      err("%s: etmpfile: tmpfile failed", __FILE__);
	
	return stream;
}


void *emalloc(size_t size)
{
	void *memptr;

	if (ERROR == (memptr = malloc(size)))
		err("%s : emalloc: malloc failed", __FILE__);
	
	return memptr;
}


void *erealloc(void *memptr, size_t size)
{
	void *newptr;

	if (ERROR == (newptr = realloc(memptr, size)))
		err("%s : erealloc: realloc failed", __FILE__);
	
	return newptr;
}


void *ecalloc(size_t count, size_t size)
{
	void *memptr;

	if (ERROR == (memptr = calloc(count, size)))
		err("%s : ecalloc: calloc failed", __FILE__);
	
	return memptr;
}

/* fgetpos and fsetpos may not exist on some systems */
/* if you get error messages about these then comment out the next two */
/* subroutine definitions */
/* beginning of fgetpos  and fsetpos block */


#ifndef SUN_A
	int efgetpos(FILE *stream, fpos_t *position)
	{
		int status;

		if ((status = fgetpos(stream, position)))
			syserr("%s: efgetpos: fgetpos failed", __FILE__);

		return status;
	}


	int efsetpos(FILE *stream, const fpos_t *position)
	{
		int status;

		if ((status = fsetpos(stream, position)))
			syserr("%s: efsetpos: fsetpos failed", __FILE__);

		return status;
	}
#endif /* end of SUN_A */
/* end of fgetpos, fsetpos block */

size_t efread(void *bufptr, size_t size, size_t count, FILE *stream)
{
	size_t nread;

	if (!size) err("%s: efread: fread given 0 item size", __FILE__);

	nread = fread(bufptr, size, count, stream);

	if (nread != count && ferror(stream))
		      err("%s: efread: fread only %d items of %d",
				__FILE__, nread, count);

	return nread;
}


size_t efwrite(void *bufptr, size_t size, size_t count, FILE *stream)
{
	size_t nwrite;

	nwrite = fwrite(bufptr, size, count, stream);

	if (nwrite != count)
		      err("%s: efwrite: fwrite only %d items of %d",
				__FILE__, nwrite, count);

	return nwrite;
}




#ifdef TEST
main(int argc, char **argv)
{
	FILE *fpr, *fpw;
	char msg[BUFSIZ];
	char erbuf[BUFSIZ], ewbuf[BUFSIZ], rbuf[BUFSIZ], wbuf[BUFSIZ];
	char pbuf[1], pfbuf[1];
	size_t mbytes, rbytes, wbytes;
	size_t ritems, witems;

	initargs(argc, argv);

	/* Exercise efread and efwrite */
  	fpw = efopen("junk.fwr", "w+");
 	strcpy(ewbuf, "   Writing with efwrite\n");
	witems = strlen(ewbuf);
	efwrite(ewbuf, 1, witems, fpw);
	erewind(fpw);

	fread(rbuf, 1, witems, fpw);
	erewind(fpw);
	strcpy(msg, "***efwrite from file to buffer ...");
	mbytes = strlen(msg);
	fwrite(msg, 1, mbytes, stdout);
	fwrite(rbuf, 1, witems, stdout);

  	fpr = fopen("junk.frd", "w+");
 	strcpy(wbuf, "   Reading with efread\n");
	ritems = strlen(wbuf);
	fwrite(wbuf, 1, ritems, fpr);
	erewind(fpr);
	strcpy(wbuf, "   efread saw zero bytes\n");
	witems = strlen(wbuf);

	strcpy(msg, "***efread from file to buffer ...");
	mbytes = strlen(msg);
	fwrite(msg, 1, mbytes, stdout);
	if (!efread(erbuf, 1, ritems, fpr)) {
		fwrite(wbuf, 1, witems, stdout);
	} else {
		fwrite(erbuf, 1, ritems, stdout);
	}
	erewind(fpr);

 	strcpy(wbuf, "   Reading byte by byte with efread\n");
	ritems = strlen(wbuf);
	fwrite(wbuf, 1, ritems, fpr);
	erewind(fpr);
	strcpy(wbuf, "   exit loop: efread returned zero\n");
	witems = strlen(wbuf);

	strcpy(msg, "***efread file byte by byte to buffer ...");
	mbytes = strlen(msg);
	fwrite(msg, 1, mbytes, stdout);
	while (efread(erbuf, 1, 1, fpr)) {
		fwrite(erbuf, 1, 1, stdout);
	}
	erewind(fpr);
	fwrite(wbuf, 1, witems, stdout);

 	strcpy(wbuf, "");
	ritems = strlen(wbuf);
	fwrite(wbuf, 1, ritems, fpr);
	erewind(fpr);
	strcpy(wbuf, "   efread saw zero bytes\n");
	witems = strlen(wbuf);

	strcpy(msg, "***efread from EMPTY file to buffer ...");
	mbytes = strlen(msg);
	fwrite(msg, 1, mbytes, stdout);
	efread(erbuf, 1, ritems, fpr);
	erewind(fpr);
	fwrite(wbuf, 1, witems, stdout);

	efclose(fpw);
	efclose(fpr);
	eremove("junk.frd");
	eremove("junk.fwr");

	return EXIT_SUCCESS;
}
#endif
@


1.38
log
@include <stdio.h>
@
text
@a104 2
#include <stdio.h>

@


1.37
log
@added copyright statement
@
text
@d105 2
d108 1
@


1.36
log
@*** empty log message ***
@
text
@d1 3
@


1.35
log
@explicit cast put in.
@
text
@d1 1
d21 1
a21 1
emkstemp		mkstemp with error check
d255 10
@


1.34
log
@added explicit casts to popen calls
@
text
@d129 1
a129 1
	if (ERROR == (stream = fdopen(fd, mode)))
@


1.33
log
@Stew levins changes
@
text
@d140 1
a140 1
	if (ERROR == (stream = popen(command, type)))
@


1.32
log
@Stew levins changes
@
text
@d246 1
a246 1
		printf(stderr,"sizeof(off_t)=%lu\n",
@


1.31
log
@problem with "effseel..  pro... efseeko resulved
@
text
@d43 1
a43 1
off_t eftello(FILE *stream);
d109 1
a109 2
		      err("efopen: fopen failed\n file: %s mode: %s"
                          , file ,mode );
d120 1
a120 2
		      err("efreopen: freopen failed\n file: %s mode: %s"
                          , file ,mode );
d239 1
a239 1
off_t eftello(FILE *stream)
d241 1
a241 1
	off_t position;
d244 6
a249 2
	if (test == (position = ftello(stream)))
		syserr("%s: eftello: ftello failed", __FILE__);
d251 1
a251 1
	return position;
@


1.30
log
@additional info in error message
@
text
@d233 4
a236 2
	if (fseeko(stream, offset, origin))  /* non-zero => error */
		      err("%s: efseeko: fseeko failed", __FILE__);
@


1.29
log
@off_t put in
@
text
@d109 2
a110 1
		      err("%s: efopen: fopen failed", __FILE__);
d121 2
a122 1
		      err("%s: efreopen: freopen failed", __FILE__);
@


1.28
log
@19 Aug 2003
@
text
@d40 1
a40 1
int efseek(FILE *stream, long offset, int origin);
d202 1
a202 1
int efseek(FILE *stream, long offset, int origin)
@


1.27
log
@fixed -Wall complaints
@
text
@d15 1
a15 1
erewind		rewind (dummy sub)
d17 1
d19 2
a20 1
etmpnam		tmpnam with error check
d43 2
a45 1
char *etmpnam(char *namebuffer);
d65 1
d68 1
a69 1
etmpnam returns a char pointer
a124 1

d229 18
a258 14
char *etmpnam(char *namebuffer)
{
	char *filename;

	/* tmpnam almost surely gives its own error message, but */
	/* since this is not guaranteed by ANSI C we give one too */
	if (ERROR == (filename = tmpnam(namebuffer)))
		      err("%s: etmpnam: tmpnam failed", __FILE__);
	
	return filename;
}



@


1.26
log
@added SUN_A block for SUN installs with GCC but without GLIBC
@
text
@d181 1
a181 1
	if (status = remove(file))
d192 1
a192 1
	if (status = rename(oldfile, newfile))
d295 1
a295 1
		if (status = fgetpos(stream, position))
d306 1
a306 1
		if (status = fsetpos(stream, position))
@


1.25
log
@fixed a case where a comment /* was included inside of /* */
@
text
@d290 1
d311 1
a311 1

@


1.24
log
@added an endselfdoc line below the selfdoc
@
text
@d242 1
a242 1
	/* tmpnam almost surely gives its own error message, but
@


1.23
log
@typo
@
text
@d95 1
@


1.22
log
@put in a comment to fence off fgetpos fsetpos.
@
text
@d92 1
a92 1
Authors: SEP: Rick Otolinni, Ron, Jon Claerbout, Stew Levin
@


1.21
log
@added dummy selfdocs
@
text
@d283 4
d288 1
d310 1
@


1.20
log
@removed copyright statement, stray occurences of 'ushort'
@
text
@d1 95
a97 153

/* subcalls - routines for system functions with error checking
 *
 * efopen   - fopen with error check
 * efreopen - freopen with error check
 * efdopen  - fdopen with error check
 * epopen   - popen with error check
 * efclose  - fclose with error check
 * epclose  - pclose with error check
 * efflush  - fflush with error check
 * eremove  - remove with error check
 * erename  - rename with error check
 * efseek   - fseek with error check
 * erewind  - rewind (dummy sub)
 * eftell   - ftell with error check
 * etmpfile - tmpfile with error check
 * etmpnam  - tmpnam with error check
 * emalloc  - malloc with error check
 * erealloc - realloc with error check
 * ecalloc  - calloc with error check
 * efgetpos - fgetpos with error check
 * efsetpos - fsetpos with error check
 * efread   - fread with error check
 * efwrite  - fwrite with error check
 *
 * Returns: All abort with message on error
 *	efopen returns a FILE pointer
 *	efreopen returns a FILE pointer
 *	efdopen returns a FILE pointer
 *	efclose returns 0
 *	efflush returns 0
 *	eremove returns 0
 *	erename returns 0
 *	efseek returns 0
 *	erewind is void
 *	eftell returns file position indicator
 *	etmpfile returns a FILE pointer
 *	etmpnam returns a char pointer
 *	emalloc returns void pointer to allocated memory
 *	erealloc returns void pointer to allocated memory
 *	ecalloc returns void pointer to allocated memory
 *	efgetpos returns 0
 *	efsetpos returns 0
 *	efread returns number of items actually read
 *	efwrite returns number of items actually written
 *
 * Notes:
 *	Getting less than the number of bytes asked for on a fread
 *	is *not* a system subroutine error--usually it just means
 *	end of file has been reached.  However, it *might* be an error
 *	in some application.  Similarly coming up empty is not a system
 *	error, but might be an application error.  It is left to the user
 *	to trap these instances.  In particular, feof can be used to test
 *	for end of file.
 *
 * Synopsis:
 *	FILE *efopen(file, mode)
 *	const char *file - file to open
 *	const char *mode - access mode: "r", "w", ...
 *
 *	FILE *efreopen(file, mode, stream)
 *	const char *file - file to open
 *	const char *mode - access mode: "r", "w", ...
 *	FILE *stream     - stream to reopen
 *
 *	FILE *efdopen(fd, mode)
 *	int fd           - file descriptor of open file
 *	const char *mode - access mode: "r", "w", ...
 *
 *	FILE *popen(command, type)
 *	char *command - command to pipe from or to
 *	char *type    - "r" or "w"
 *
 *	int efclose(stream)
 *	FILE *stream - stream to close
 *
 *	int epclose(stream)
 *	FILE *stream - stream to close
 *
 *	int efflush(stream)
 *	FILE *stream - stream to flush
 *
 *	int eremove(file)
 *	const char *file - file to remove
 *
 *	int erename(file)
 *	const char *file - file to rename
 *
 *	int efseek(stream, offset, origin)
 *	FILE *stream - stream to examine
 *	long offset  - amount to move file pointer from origin
 *	int origin   - SEEK_SET, SEEK_CUR or SEEK_END
 *
 *	void erewind(stream)
 *	FILE *stream - stream to examine
 *
 *	long eftell(stream)
 *	FILE *stream - stream to examine
 *
 *	FILE *etmpfile(void)
 *
 *	char *etmpnam(namebuffer)
 *	char *namebuffer - buffer to hold name of file
 *
 *	void *emalloc(size)
 *	size_t size - size in bytes requested
 *	
 *	void *erealloc(memptr, size)
 *	void *memptr - pointer previously allocated
 *	size_t size  - size in bytes requested
 *	
 *	void *ecalloc(count, size)
 *	size_t count - number of units requested
 *	size_t size  - size of unit in bytes
 *	
 *	int eread(fd, buf, nbytes)
 *	int fd      - file descriptor of file to be read
 *
 *	int efgetpos(stream, position)
 *	FILE *stream     - stream to examine
 *	fpos_t *position - file position indicator
 *
 *	int efsetpos(stream, position)
 *	FILE *stream           - stream to examine
 *	const fpos_t *position - file position indicator
 *
 *	size_t efread(bufptr, size, count, stream)
 *	void *bufptr - pointer to buffer
 *	int size     - sizeof(*bufptr)
 *	int count    - number of items to be read
 *	FILE *stream - input stream
 *
 *	size_t efwrite(bufptr, size, count, stream)
 *	void *bufptr - pointer to buffer
 *	size_t size  - sizeof(*bufptr)
 *	size_t count - number of items to be written
 *	FILE *stream - output stream
 *
 *	void *bufptr - pointer to buffer
 *	size_t size  - sizeof(item pointed to)
 *	size_t count - number of items to be read
 *	FILE *stream - input stream
 *
 * Credits: 
 *	Rochkind, "Advanced UNIX Programming"
 *	Kernighan and Pike, "The UNIX Programming Environment"
 *	Kernighan and Ritchie, "The C Programming Language"
 *	Mark Williams Company, "ANSI C--A Lexical Guide"
 *	SEP: Rick, Ron, Jon, Stew
 *	CWP: Shuki, Jack
 *
 */

@


1.19
log
@pfread is gone
@
text
@a0 13
/*----------------------------------------------------------------------
 * Copyright (c) Colorado School of Mines, 1989.
 * All rights reserved.
 *
 * This code is part of SU.  SU stands for Seismic Unix, a processing line
 * developed at the Colorado School of Mines, partially based on Stanford
 * Exploration Project (SEP) software.  Inquiries should be addressed to:
 *
 *  Jack K. Cohen, Center for Wave Phenomena, Colorado School of Mines,
 *  Golden, CO 80401  (dix@@mines.colorado.edu)
 *----------------------------------------------------------------------
 */

@


1.18
log
@Corrected comment
@
text
@a39 1
 * pfread   - fread on pipe with error check
a60 1
 *	pfread returns number of items actually read from pipe
d83 1
a83 1
 *	char *mode - access mode: "r", "w", ...
a153 1
 *	size_t pfread(bufptr, size, count, stream)
d192 1
a192 1
FILE *efdopen(int fd, char *mode)
a300 2
	/* tmpfile almost surely gives its own error message, but
	/* since this is not guaranteed by ANSI C we give one too */
d312 2
a406 3
size_t pfread(void *bufptr, size_t size, size_t count, FILE *stream)
{
	size_t nread, ntotal = 0;
a407 1
	if (!size) err("%s: pfread: fread given 0 item size", __FILE__);
a408 18
	while (count) {
		nread = fread(bufptr, size, count, stream);
		if (ferror(stream)) {
			      err("%s: efread: fread failed", __FILE__);
		} else if (!nread || feof(stream)) {
			return 0;
		} else {
			ntotal += nread;
			count  -= nread;
			bufptr = (void*)((char*)bufptr+nread*size);
			/* bufptr += nread*size; */
		}
	}

	return ntotal;
}


a417 3
	size_t (*readptr) ();	/* pointer to efread() or pfread()	*/
	size_t efread();	/* must be declared to use ptr		*/
	size_t pfread();	/* must be declared to use ptr		*/
a486 29


	/* Exercise pfread and efread */
	/* Set appropriate read function for input filetype */
	switch(filestat(STDIN)) {
	case TTY:
		err("input can't be tty");
	break;
	case DISK:
	case TAPE:
		readptr = efread;
		strcpy(ewbuf, "***Disk stdin: use efread ...   ");
		witems = strlen(ewbuf);
		efwrite(ewbuf, 1, witems, stdout);
	break;
	case PIPE:
		readptr = pfread;
		strcpy(ewbuf, "***Pipe stdin: use pfread ...   ");
		witems = strlen(ewbuf);
		efwrite(ewbuf, 1, witems, stdout);
	break;
	default:
		err("undefined input filetype %s", printstat(STDIN));
	break;
	}

	while ((*readptr)(pfbuf, 1, 1, stdin)) {
		efwrite(pfbuf, 1, 1, stdout);
	}
@


1.17
log
@ANSI C tweak
@
text
@d304 2
a316 2
	/* tmpnam almost surely gives its own error message, but
	/* since this is not guaranteed by ANSI C we give one too */
@


1.16
log
@Fixed declaration of etmpnam
@
text
@d85 1
a85 1
 *	const char *mode - access mode: "r", "w", ...
d195 1
a195 1
FILE *efdopen(int fd, const char *mode)
@


1.15
log
@Added etmpfile, etmpnam
@
text
@d311 1
a311 1
FILE *etmpnam(char *namebuffer)
@


1.14
log
@Uncommented fgetpos, fsetpos.
@
text
@d31 2
d53 2
d117 5
d298 25
@


1.13
log
@Fix by Dave in pread which had illegal void pointer arithmetic.
@
text
@a323 1
/*
a343 1
*/
@


1.12
log
@Corrected typo in efreopen()
@
text
@d393 2
a394 1
			bufptr += nread*size;
@


1.11
log
@estrtod based routines removed + second test driver
@
text
@d179 1
a179 1
	if (ERROR == (stream2 = fopen(file, mode, stream1)))
@


1.10
log
@estrtod, estrol, estroul, eatoi, eatol, eatof
@
text
@a58 6
 *	estrtod returns double
 *	estrtol returns long
 *	estrtoul returns unsigned long
 *	eatof returns double
 *	eatoi returns int
 *	eatol returns long
a152 23
 *	double estrtod(string, tailptr)
 *	char *string   - ascii representation of number
 *	char **tailptr - tail pointer
 *
 *	long estrtol(string, tailptr, base)
 *	char *string   - ascii representation of number
 *	char **tailptr - tail pointer
 *	int base       - number base
 *
 *	unsigned long estrtoul(string, tailptr, base)
 *	char *string   - ascii representation of number
 *	char **tailptr - tail pointer
 *	int base       - number base
 *
 *	double eatof(string)
 *	char *string   - ascii representation of number
 *
 *	int eatoi(string)
 *	char *string   - ascii representation of number
 *
 *	long eatol(string)
 *	char *string   - ascii representation of number
 *
a400 71
double estrtod(char *string, char **tailptr)
{
	double number;

	number = strtod(string, tailptr);

	if (number == HUGE_VAL && errno == ERANGE)
		      err("%s: estrtod: can't convert: %s", string, __FILE__);

/* Don't abort on underflow
	if (number == 0.0 && errno == ERANGE)
		      err("%s: estrtod: can't convert: %s", string, __FILE__);
*/

	return number;
}


long estrtol(char *string, char **tailptr, int base)
{
	long number;

	number = strtol(string, tailptr, base);

	if (number == LONG_MAX && errno == ERANGE)
		      err("%s: estrtol: can't convert: %s", string, __FILE__);

	if (number == LONG_MIN && errno == ERANGE)
		      err("%s: estrtol: can't convert: %s", string, __FILE__);

	return number;
}


/* Not on PS/2
unsigned long estrtoul(char *string, char **tailptr, int base)
{
	unsigned long number;

	number = strtoul(string, tailptr, base);

	if (number == ULONG_MAX && errno == ERANGE)
		      err("%s: estrtoul: can't convert: %s", string, __FILE__);

	if (number == 0 && errno)
		      err("%s: estrtoul: can't convert: %s", string, __FILE__);

	return number;
}
*/


double eatof(char *string)
{
	return estrtod(string, (char**) NULL);
}


int eatoi(char *string)
{
	return (int)estrtol(string, (char**) NULL, 10);
}


long eatol(char *string)
{
	return estrtol(string, (char**) NULL, 10);
}



a510 101

	return EXIT_SUCCESS;
}
#endif


#ifdef TEST2
/* Exercise conversion routines */
main(int argc, char **argv)
{
	char s[BUFSIZ];
	int ni;
	long nl;
	unsigned long nv;
	double nd;


	initargs(argc, argv);


	/* Test code for estrtod */
	strcpy(s, "0.0");
	nd = estrtod(s, (char**) NULL);
	warn("estrtod(%s) = %e\n", s, nd);

	strcpy(s, "1.0e+37");
	nd = estrtod(s, (char**) NULL);
	warn("estrtod(%s) = %e\n", s, nd);

	strcpy(s, "-1.0e+37");
	nd = estrtod(s, (char**) NULL);
	warn("estrtod(%s) = %e\n", s, nd);


	/* Test code for eatof */
	strcpy(s, "0.0");
	nd = eatof(s);
	warn("eatof(%s) = %e\n", s, nd);

	strcpy(s, "1.0e+37");
	nd = eatof(s);
	warn("eatof(%s) = %e\n", s, nd);

	strcpy(s, "-1.0e+37");
	nd = eatof(s);
	warn("eatof(%s) = %e\n", s, nd);


	/* Test code for estrtol */
	strcpy(s, "0");
	nl = estrtol(s, (char**) NULL, 10);
	warn("estrtol(%s, (char**) NULL, 10) = %ld\n", s, nl);

	strcpy(s, "2147483647");
	nl = estrtol(s, (char**) NULL, 10);
	warn("estrtol(%s, (char**) NULL, 10) = %ld\n", s, nl);

	strcpy(s, "-2147483648");
	nl = estrtol(s, (char**) NULL, 10);
	warn("estrtol(%s, (char**) NULL, 10) = %ld\n", s, nl);


	/* Test code for eatoi */
	strcpy(s, "0");
	ni = eatoi(s);
	warn("eatoi(%s) = %d\n", s, ni);

	strcpy(s, "2147483647");
	ni = eatoi(s);
	warn("eatoi(%s) = %d\n", s, ni);

	strcpy(s, "-2147483648");
	ni = eatoi(s);
	warn("eatoi(%s) = %d\n", s, ni);


	/* Test code for eatol */
	strcpy(s, "0");
	nl = eatol(s);
	warn("eatol(%s) = %ld\n", s, nl);

	strcpy(s, "2147483647");
	nl = eatol(s);
	warn("eatol(%s) = %ld\n", s, nl);

	strcpy(s, "-2147483648");
	nl = eatol(s);
	warn("eatol(%s) = %ld\n", s, nl);


	/* Test code for estrtoul */
/* Not on PS/2
	strcpy(s, "0");
	nv = estrtoul(s, (char**) NULL, 10);
	warn("estrtoul(%s, (char**) NULL, 10) = %u\n", s, nv);

	strcpy(s, "4294967295");
	nv = estrtoul(s, (char**) NULL, 10);
	warn("estrtoul(%s, (char**) NULL, 10) = %u\n", s, nv);
*/

@


1.9
log
@epopen, epclose
@
text
@d40 1
a40 1
 * Returns:
d44 5
a48 5
 *	efclose returns 0 on success and EOF on failure
 *	efflush returns 0 on success and EOF on failure
 *	eremove returns 0 on success and non-zero on failure
 *	erename returns 0 on success and non-zero on failure
 *	efseek returns 0 on success and non-zero of failure
d50 1
a50 1
 *	eftell returns file position indicator or -1L on failure
d54 2
a55 2
 *	efgetpos returns 0 on success and non-zero on failure
 *	efsetpos returns 0 on success and non-zero on failure
d59 6
d132 1
d159 23
a189 1
 *
d430 3
d434 67
d611 101
@


1.8
log
@tweak doc
@
text
@d22 1
d24 1
d83 4
d90 3
d197 11
d214 11
@


1.7
log
@emalloc, erealloc, ecalloc (for completeness)
@
text
@d29 1
a29 1
 * emalloc  - malloc with error check (dummy sub)
@


1.6
log
@No change.
@
text
@d17 1
a17 1
/* subcalls - routines for FILE functions with error checking
d29 3
d49 3
d104 13
d258 35
@


1.5
log
@Use new "err" function to simplify codes.
Fix some tests that went in the wrong direction.
Fenced off fgetpos, fsetpos for PS/2.
@
text
@@


1.4
log
@added remove rename (even tho not FILE functions)
@
text
@d43 1
d141 1
a141 2
		errno ? syserr("%s: efopen: fopen failed", __FILE__)
		      :    err("%s: efopen: fopen failed", __FILE__);
d152 1
a152 2
		errno ? syserr("%s: efreopen: freopen failed", __FILE__)
		      :    err("%s: efreopen: freopen failed", __FILE__);
d163 1
a163 2
		errno ? syserr("%s: efdopen: fdopen failed", __FILE__)
		      :    err("%s: efdopen: fdopen failed", __FILE__);
d174 1
a174 2
		errno ? syserr("%s: efclose: fclose failed", __FILE__)
		      :    err("%s: efclose: fclose failed", __FILE__);
d185 1
a185 2
		errno ? syserr("%s: efflush: fflush failed", __FILE__)
		      :    err("%s: efflush: fflush failed", __FILE__);
d188 1
d195 1
a195 1
	if (!(status = remove(file)))
d206 1
a206 1
	if (!(status = rename(oldfile, newfile)))
d216 3
a218 4
		errno ? syserr("%s: efseek: fseek failed", __FILE__)
		      :    err("%s: efseek: fseek failed", __FILE__);
	else
		return 0;
d239 4
d244 2
a245 3
int efgetpos(FILE *stream, fpos_t *position)
{
	int status;
d247 2
a248 2
	if (!(status = fgetpos(stream, position)))
		syserr("%s: efgetpos: fgetpos failed", __FILE__);
a249 2
	return status;
}
d251 3
d255 2
a256 3
int efsetpos(FILE *stream, const fpos_t *position)
{
	int status;
d258 3
a260 2
	if (!(status = fsetpos(stream, position)))
		syserr("%s: efsetpos: fsetpos failed", __FILE__);
a261 2
	return status;
}
a262 1

d272 1
a272 4
		errno ? 
			syserr("%s: efread: fread only %d items of %d",
				__FILE__, nread, count)
		      :    err("%s: efread: fread only %d items of %d",
d286 1
a286 4
		errno ? 
			syserr("%s: efwrite: fwrite only %d items of %d",
				__FILE__, nwrite, count)
		      :    err("%s: efwrite: fwrite only %d items of %d",
d302 1
a302 3
			errno ? 
				syserr("%s: pfread: fread failed", __FILE__)
			      :    err("%s: efread: fread failed", __FILE__);
@


1.3
log
@added fclose fflush
@
text
@d24 2
d41 2
d80 6
d194 22
d407 2
a408 2
	eunlink("junk.frd");
	eunlink("junk.fwr");
@


1.2
log
@Full set of subs coded (I think).
@
text
@d22 2
a23 1
 * efclose  - fclose (dummy sub)
d38 1
d73 3
d77 1
a77 1
 *	FILE *stream - stream to close
d130 1
a130 1
		errno ? syserr("%s: efopen: fopen failed", __FILE__);
d142 1
a142 1
		errno ? syserr("%s: efreopen: freopen failed", __FILE__);
d154 1
a154 1
		errno ? syserr("%s: efdopen: fdopen failed", __FILE__);
d161 1
a161 1
int efclose(FILE *stream)	/* dummy function */
d163 7
a169 1
	return fclose(stream);
d173 11
d187 1
a187 1
		errno ? syserr("%s: efseek: fseek failed", __FILE__);
d245 1
a245 1
				__FILE__, nread, count);
d262 1
a262 1
				__FILE__, nwrite, count);
d280 1
a280 1
				syserr("%s: pfread: fread failed", __FILE__);
d299 1
a299 1
	int fdr, fdw;
d303 5
a307 6
	uint mbytes, rbytes, wbytes;
	FILE *fpr, *fpw;
	int ritems, witems;
	int (*readptr) ();	/* pointer to eread() or pread()	*/
	int eread();		/* must be declared to use ptr		*/
	int pread();		/* must be declared to use ptr		*/
d309 1
a309 1
	xargc = argc; xargv = argv;
d312 1
a312 3
  	if (NULL == (fpw = fopen("junk.fwr", "w+")))
  		syserr("can't open fwrite file");

d316 1
a316 1
	rewind(fpw);
d319 1
a319 1
	rewind(fpw);
d325 1
a325 3
  	if (NULL == (fpr = fopen("junk.frd", "w+")))
  		syserr("can't open fread file");

d329 1
a329 1
	rewind(fpr);
d341 1
a341 1
	rewind(fpr);
d346 1
a346 1
	rewind(fpr);
d356 1
a356 1
	rewind(fpr);
d362 1
a362 1
	rewind(fpr);
d370 1
a370 1
	rewind(fpr);
d373 4
a376 6
	if (EOF == fclose(fpw)) {
		syserr("fclose failed on fwrite file");
	}
	if (EOF == fclose(fpr)) {
		syserr("fclose failed on fread file");
	}
d381 1
a381 1
	switch(statfil(STDIN)) {
d399 1
a399 1
		err("undefined input filetype %s", statprint(STDIN));
@


1.1
log
@Initial revision
@
text
@d19 12
a30 4
 * efopen  - fopen with error check
 * efread  - fread with error check
 * efwrite - fwrite with error check
 * pfread  - fread on pipe with error check
d34 7
d46 7
a52 2
 *	Up to main to check for zero bytes read if special action is
 *	required for this case.
d55 1
a55 1
 *	FILE efopen(file, mode)
d59 35
a93 4
 *	int efread(ptr, itemsize, nitems, stream)
 *	char *ptr    - pointer to buffer
 *	int itemsize - sizeof(*ptr)
 *	int nitems   - number of items to be read
d96 4
a99 4
 *	int efwrite(ptr, itemsize, nitems, stream)
 *	char *ptr    - pointer to buffer
 *	int itemsize - sizeof(*ptr)
 *	int nitems   - number of items to be written
d102 5
a106 5
 *	int pfread(ptr, itemsize, nitems, stream)
 *	char *ptr;    - pointer to buffer
 *	int itemsize; - sizeof(item pointed to)
 *	int nitems;   - number of items to be read
 *	FILE *stream; - input stream
d110 3
d122 5
a126 2
	if (ERROR == (fp = fopen(file, mode)))
		syserr("%s: efopen: fopen failed", __FILE__);
d128 1
a128 1
	return fp;
d132 1
a132 5
int efread(ptr, itemsize, nitems, stream)
char *ptr;
int itemsize;
int nitems;
FILE *stream;
d134 1
a134 1
	int nread;	/* items actually read	*/
d136 6
a141 1
	nread = fread(ptr, itemsize, nitems, stream);
a142 1
	if (ferror(stream)) syserr("efread: fread failed"); 
d144 83
d231 1
a231 5
int efwrite(ptr, itemsize, nitems, stream)
char *ptr;
int itemsize;
int nitems;
FILE *stream;
d233 1
a233 1
	int nwrite;	/* items actually written	*/
d235 1
a235 6
	nwrite = fwrite(ptr, itemsize, nitems, stream);
	if (ferror(stream)) {
		syserr("efwrite: fwrite failed"); 
	} else if (nwrite != nitems) {
		err("efwrite: only %d items from %d", nwrite, nitems);
	}
d237 7
d248 1
a248 5
int pfread(ptr, itemsize, nitems, stream)
char *ptr;
int itemsize;
int nitems;
FILE *stream;
d250 1
a250 1
	int nread, ntotal = 0;
d252 4
a255 2
	while(nitems) {
		nread = fread(ptr, itemsize, nitems, stream);
d257 3
a259 1
			syserr("pfread: fread failed"); 
d264 2
a265 2
			nitems -= nread;
			ptr += nread*itemsize;
@
