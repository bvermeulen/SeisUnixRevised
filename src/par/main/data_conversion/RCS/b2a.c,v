head	1.16;
access;
symbols;
locks; strict;
comment	@ * @;


1.16
date	2012.10.09.18.33.44;	author john;	state Exp;
branches;
next	1.15;

1.15
date	2011.11.16.16.42.16;	author john;	state Exp;
branches;
next	1.14;

1.14
date	2011.10.20.21.08.50;	author john;	state Exp;
branches;
next	1.13;

1.13
date	2003.08.19.21.24.44;	author john;	state Exp;
branches;
next	1.12;

1.12
date	2003.03.04.23.01.08;	author john;	state Exp;
branches;
next	1.11;

1.11
date	2001.11.12.18.03.40;	author john;	state Exp;
branches;
next	1.10;

1.10
date	2000.09.22.20.42.20;	author john;	state Exp;
branches;
next	1.9;

1.9
date	99.10.13.18.20.48;	author john;	state Exp;
branches;
next	1.8;

1.8
date	97.07.16.22.00.56;	author john;	state Exp;
branches;
next	1.7;

1.7
date	96.09.06.16.09.54;	author john;	state Exp;
branches;
next	1.6;

1.6
date	95.08.01.18.34.53;	author jkc;	state Exp;
branches;
next	1.5;

1.5
date	95.04.25.15.14.48;	author john;	state Exp;
branches;
next	1.4;

1.4
date	92.10.28.15.49.57;	author john;	state Exp;
branches;
next	1.3;

1.3
date	92.10.28.14.15.54;	author john;	state Exp;
branches;
next	1.2;

1.2
date	91.09.04.16.49.34;	author jkcohen;	state Exp;
branches;
next	1.1;

1.1
date	91.04.29.12.37.12;	author jkcohen;	state Exp;
branches;
next	;


desc
@Convert binary floats to ascii floats in a rectangular format
@


1.16
log
@added decimal float format output selection
@
text
@/* Copyright (c) Colorado School of Mines, 2011.*/
/* All rights reserved.                       */

/* B2A: $Revision: 1.15 $ ; $Date: 2011/11/16 16:42:16 $	*/
#include "par.h"

/*********************** self documentation **********************/
char *sdoc[] = {
" 								",
" B2A - convert binary floats to ascii				",
" 								",
" b2a <stdin >stdout 						",
" 								",
" Required parameters:						",
" 	none							",
" 								",
" Optional parameters:						",
" 	n1=2		floats per line in output file 		",
"       format=0	scientific notation	 		",
" 			=1 long decimal float form		",
" 								",
" 	outpar=/dev/tty output parameter file, contains the	",
"			number of lines (n=)			",
"                       other choices for outpar are: /dev/tty, ",
"                       /dev/stderr, or a name of a disk file   ",
" 								",
" Note: 							",
" Parameter:							", 
"  format=0 uses printf(\"%15.10e \", x[i1])			",
"  format=1 uses printf(\"%15.15f \", x[i1])			",
NULL};

/* Credits:
 *	CWP: Jack K. Cohen
 */
/**************** end self doc ***********************************/


int
main(int argc, char **argv)
{
	char *outpar=NULL;	/* name of file holding output parfile	*/
	FILE *outparfp=NULL;	/* ... its file pointer			*/
	int n1;			/* number of floats per line		*/
	size_t n1read;		/* number of items read			*/
	int n2 = 0;		/* number of lines in input file 	*/
	float *x=NULL;		/* binary floats			*/
	int format=0;		/* notation =0 scientific =1 long decimal */


	/* Hook up getpar */
	initargs(argc, argv);
	requestdoc(1);


	/* Get parameters and do set up */
	if (!getparstring("outpar", &outpar))	outpar = "/dev/tty" ;
	outparfp = efopen(outpar, "w");
	if (!getparint("n1", &n1))		n1 = 2;
	if (!getparint("format", &format))		format = 0;
	x = ealloc1float(n1);


        checkpars();

	/* Loop over data converting to ascii */
	while ((n1read = efread(x, FSIZE, n1, stdin))) {
		register int i1;

		if (n1read != n1)
			err("out of data in forming line #%d", n2+1);
		if (!format){
			for (i1 = 0; i1 < n1; ++i1)  printf("%15.10e ", x[i1]);
		} else {
			for (i1 = 0; i1 < n1; ++i1)  printf("%20.20f ", x[i1]);
		}
			
		putchar('\n');
		++n2;
	}


	/* Make par file */
	fprintf(outparfp, "n=%d\n", n2);

	return(CWP_Exit());
}
@


1.15
log
@checkpar() added
@
text
@d4 1
a4 1
/* B2A: $Revision: 1.13 $ ; $Date: 2003/08/19 21:24:44 $	*/
d19 2
d27 4
d42 2
a43 2
	char *outpar;		/* name of file holding output parfile	*/
	FILE *outparfp;		/* ... its file pointer			*/
d47 2
a48 1
	float *x;		/* binary floats			*/
d60 1
d72 6
a77 1
		for (i1 = 0; i1 < n1; ++i1)  printf("%15.10e ", x[i1]);
@


1.14
log
@added copyright statement
@
text
@d56 2
@


1.13
log
@19 august
@
text
@d1 4
a4 1
/* B2A: $Revision: 36.2 $ ; $Date: 2003/03/04 22:03:12 $	*/
@


1.12
log
@*** empty log message ***
@
text
@d1 1
a1 1
/* B2A: $Revision: 1.11 $ ; $Date: 2001/11/12 18:03:40 $	*/
d59 1
a59 1
		for (i1 = 0; i1 < n1; ++i1)  printf("%15.7e ", x[i1]);
a67 1

@


1.11
log
@changed /dev/null /dev/tty
@
text
@d1 1
a1 1
/* B2A: $Revision: 1.10 $ ; $Date: 2000/09/22 20:42:20 $	*/
d69 1
a69 1
	return EXIT_SUCCESS;
@


1.10
log
@fixed outpar
@
text
@d1 1
a1 1
/* B2A: $Revision: 1.9 $ ; $Date: 1999/10/13 18:20:48 $	*/
d17 1
a17 1
" 	outpar=/dev/null output parameter file, contains the	",
d47 1
a47 1
	if (!getparstring("outpar", &outpar))	outpar = "/dev/null" ;
@


1.9
log
@changed /dev/tty to /dev/null for the outpar= default
@
text
@d1 1
a1 1
/* B2A: $Revision: 1.8 $ ; $Date: 1997/07/16 22:00:56 $	*/
d17 1
a17 1
" 	outpar=/dev/null	output parameter file, contains the	",
d19 2
@


1.8
log
@added more decimal places in ascii printout and changed int to size_t
as per Stew Levin's suggestion.
@
text
@d1 1
a1 1
/* B2A: $Revision: 1.7 $ ; $Date: 1996/09/06 16:09:54 $	*/
d17 1
a17 1
" 	outpar=/dev/tty	output parameter file, contains the	",
d45 1
a45 1
	if (!getparstring("outpar", &outpar))	outpar = "/dev/tty" ;
@


1.7
log
@added () around argument of while() to make -Wall happy
@
text
@d1 1
a1 1
/* B2A: $Revision: 1.6 $ ; $Date: 1995/08/01 18:34:53 $	*/
a20 1
/**************** end self doc ***********************************/
d23 1
a23 1
 *	CWP: Jack
d25 1
d34 1
a34 1
	int n1read;		/* number of items read			*/
d57 1
a57 1
		for (i1 = 0; i1 < n1; ++i1)  printf("%11.4e ", x[i1]);
@


1.6
log
@For big negative numbers, the printf format chosen concatenated
the two numbers in one string and resulted in a crash. Alexander Koek
@
text
@d1 1
a1 1
/* B2A: $Revision: 1.5 $ ; $Date: 1995/04/25 15:14:48 $	*/
d28 1
d52 1
a52 1
	while (n1read = efread(x, FSIZE, n1, stdin)) {
@


1.5
log
@fixed RCS label
@
text
@d1 1
a1 1
/* B2A: $Revision: 1.8 $ ; $Date: 94/08/25 15:00:32 $	*/
d56 1
a56 1
		for (i1 = 0; i1 < n1; ++i1)  printf("%11.4e", x[i1]);
@


1.4
log
@begin selfdoc end selfdoc lines added
@
text
@d1 1
a1 2
/* b2a - convert binary floats to ascii */

@


1.3
log
@new selfdoc installed
@
text
@@


1.2
log
@string -> char*
@
text
@d6 16
a21 16
char *sdoc =
" 								\n"
" B2A - convert binary floats to ascii				\n"
" 								\n"
" b2a <stdin >stdout 						\n"
" 								\n"
" Required parameters:						\n"
" 	none							\n"
" 								\n"
" Optional parameters:						\n"
" 	n1=2		floats per line in output file 		\n"
" 								\n"
" 	outpar=/dev/tty	output parameter file, contains the	\n"
"			number of lines (n=)			\n"
" 								\n"
;
d41 1
a41 1
	askdoc(1);
@


1.1
log
@Initial revision
@
text
@d6 1
a6 1
string sdoc =
d31 1
a31 1
	string outpar;		/* name of file holding output parfile	*/
@
