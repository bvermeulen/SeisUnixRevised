head	1.25;
access;
symbols;
locks; strict;
comment	@ * @;


1.25
date	2011.11.16.16.42.16;	author john;	state Exp;
branches;
next	1.24;

1.24
date	2011.10.20.21.08.50;	author john;	state Exp;
branches;
next	1.23;

1.23
date	2003.08.19.21.24.44;	author john;	state Exp;
branches;
next	1.22;

1.22
date	2001.11.12.18.03.40;	author john;	state Exp;
branches;
next	1.21;

1.21
date	2001.07.27.19.59.43;	author john;	state Exp;
branches;
next	1.20;

1.20
date	99.08.31.20.41.20;	author john;	state Exp;
branches;
next	1.19;

1.19
date	97.07.16.22.06.55;	author john;	state Exp;
branches;
next	1.18;

1.18
date	96.08.20.16.38.49;	author jkc;	state Exp;
branches;
next	1.17;

1.17
date	96.04.12.16.22.22;	author john;	state Exp;
branches;
next	1.16;

1.16
date	96.04.03.23.20.12;	author john;	state Exp;
branches;
next	1.15;

1.15
date	96.03.18.21.35.14;	author jkc;	state Exp;
branches;
next	1.14;

1.14
date	96.03.16.15.58.46;	author jkc;	state Exp;
branches;
next	1.13;

1.13
date	96.03.16.14.50.39;	author jkc;	state Exp;
branches;
next	1.12;

1.12
date	96.03.15.22.37.21;	author jkc;	state Exp;
branches;
next	1.11;

1.11
date	96.03.15.20.51.33;	author jkc;	state Exp;
branches;
next	1.10;

1.10
date	95.04.25.15.15.12;	author john;	state Exp;
branches;
next	1.9;

1.9
date	94.02.03.13.10.34;	author john;	state Exp;
branches;
next	1.8;

1.8
date	93.09.13.13.42.45;	author john;	state Exp;
branches;
next	1.7;

1.7
date	93.06.16.13.06.26;	author john;	state Exp;
branches;
next	1.6;

1.6
date	93.06.03.16.25.26;	author john;	state Exp;
branches;
next	1.5;

1.5
date	92.11.16.11.02.52;	author john;	state Exp;
branches;
next	1.4;

1.4
date	92.10.28.15.50.03;	author john;	state Exp;
branches;
next	1.3;

1.3
date	92.10.28.14.31.55;	author john;	state Exp;
branches;
next	1.2;

1.2
date	92.09.15.12.53.36;	author john;	state Exp;
branches;
next	1.1;

1.1
date	92.09.15.12.52.25;	author john;	state Exp;
branches;
next	;


desc
@RECAST change type of data
@


1.25
log
@checkpar() added
@
text
@/* Copyright (c) Colorado School of Mines, 2011.*/
/* All rights reserved.                       */

/* RECAST: $Revision: 1.23 $ ; $Date: 2003/08/19 21:24:44 $	*/

#include "par.h"

/*********************** self documentation **********************/
char *sdoc[] = {
" 									",
" RECAST - RECAST data type (convert from one data type to another)	",
" 									",
" recast <stdin [optional parameters]  >stdout 				",
" 									",
" Required parameters:							",
" 	none								",
" 									",
" Optional parameters:							",
" in=float	input type	(float)					",
" 		=double		(double)				",
" 		=int		(int)					",
" 		=char		(char)					",
"		=uchar		(unsigned char)				",
" 		=short		(short)					",
" 		=long		(long)					",
" 		=ulong		(unsigned long)				",
" 									",
" out=double	output type	(double)				",
" 		=float		(float)					",
" 		=int		(int)					",
" 		=char		(char)					",
" 		=uchar		(unsigned char)				",
" 		=short		(short)					",
" 		=long		(long)					",
" 		=ulong		(unsigned long)				",
" 									",
" outpar=/dev/tty	output parameter file, contains the		",
"				number of values (n1=)			",
" 			other choices for outpar are: /dev/tty,		",
" 			/dev/stderr, or a name of a disk file		",
" 									",
" Notes: Converting bigger types to smaller is hazardous. For float	",
"	 or double conversions to integer types, the results are 	",
"	 rounded to the nearest integer.				",
" 									",
NULL};

/* Credits:
 *
 *	CWP: John Stockwell, Jack K. Cohen
 *
 */
/**************** end self doc ***********************************/

/* macros to do the recasting */
#define RECAST(intype, outtype)						\
{									\
	intype xin;							\
	outtype xout;							\
	while (efread(&xin, sizeof(intype), 1, stdin)) {		\
			++n;						\
			xout = (outtype) (xin);				\
			efwrite(&xout, sizeof(outtype), 1, stdout);	\
		}							\
}									\

#define RECAST_NLONG(intype,outtype)					\
{									\
	intype xin;							\
	outtype xout;							\
	while (efread(&xin, sizeof(intype), 1, stdin)) {		\
			++n;						\
			xout = (outtype) (NLONG(xin));			\
			efwrite(&xout, sizeof(outtype), 1, stdout);	\
		}							\
}									\
/* Don't use NINT which casts to int and could lose precision */
#define NLONG(x) ((long)(((double)(x))>0.0?((double)(x))+0.5:((double)(x))-0.5))

#define RECAST_NULONG(intype,outtype)					\
{									\
	intype xin;							\
	outtype xout;							\
	while (efread(&xin, sizeof(intype), 1, stdin)) {		\
			++n;						\
			xout = (outtype) (NULONG(xin));			\
			efwrite(&xout, sizeof(outtype), 1, stdout);	\
		}							\
}									\
/* Don't use NINT which casts to int and could lose precision */
#define NULONG(x) ((unsigned long)(((double)(x))>0.0?((double)(x))+0.5:((double)(x))-0.5))

int
main(int argc, char **argv)
{
	char *in;		/* input data type			*/
	char *out;		/* output data type			*/
	char *outpar;		/* name of file holding output parfile	*/
	FILE *outparfp;		/* ... its file pointer			*/
	int n = 0;		/* number of input points	 	*/

	/* Hook up getpar */
	initargs(argc, argv);
	requestdoc(1);


	/* Get parameters and do set up */
	if (!getparstring("outpar", &outpar))	outpar = "/dev/tty" ;
	outparfp = efopen(outpar, "w");

	/* Get input and output data types */
	if (!getparstring("in", &in))		in = "float" ;
	if (!getparstring("out", &out))		out = "double" ;
	
        checkpars();

	/* Check in and out to see if types supported */
	if ( !(	STREQ(in,"float") 
		|| STREQ(in,"double") 
		|| STREQ(in,"int") 
		|| STREQ(in,"char")
		|| STREQ(in,"uchar")
		|| STREQ(in,"short") 
		|| STREQ(in,"long") 
		|| STREQ(in,"ulong") 
       		|| STREQ(out,"float") 
		|| STREQ(out,"double") 
		|| STREQ(out,"int")
		|| STREQ(out,"char") 
		|| STREQ(out,"uchar") 
		|| STREQ(out,"short") 
		|| STREQ(out,"long") 
		|| STREQ(out,"ulong") 
		) 
	) err("%s or %s is an unsupported type",in,out);

	/* Read floats, write doubles */
	if (STREQ(in,"float") && STREQ(out,"double")) {
		RECAST(float, double);

	/* Read floats, write nearest integers */
	} else if (STREQ(in,"float") && STREQ(out,"int")) {
		RECAST_NLONG(float, int);
	
	/* Read floats, write nearest signed chars */
	} else if (STREQ(in,"float") && STREQ(out,"char")) {
		RECAST_NLONG(float, signed char);

	/* Read floats, write nearest unsigned chars */
	} else if (STREQ(in,"float") && STREQ(out,"uchar")) {
		RECAST_NLONG(float, unsigned char);
	
	/* Read floats, write nearest shorts */
	} else if (STREQ(in,"float") && STREQ(out,"short")) {
		RECAST_NLONG(float, short);
	
	/* Read floats, write nearest longs */
	} else if (STREQ(in,"float") && STREQ(out,"long")) {
		RECAST_NLONG(float, long);

	/* Read floats, write nearest unsigned longs */
	} else if (STREQ(in,"float") && STREQ(out,"ulong")) {
		RECAST_NULONG(float, unsigned long);
	
	/* Read doubles, write floats */
	} else if (STREQ(in,"double") && STREQ(out,"float")) {
		RECAST(double, float);

	/* Read doubles, write nearest integers */
	} else if (STREQ(in,"double") && STREQ(out,"int")) {
		RECAST_NLONG(double,int);

	/* Read doubles, write nearest signed chars */
	} else if (STREQ(in,"double") && STREQ(out,"char")) {
		RECAST_NLONG(double, signed char);

	/* Read doubles, write nearest unsigned chars */
	} else if (STREQ(in,"double") && STREQ(out,"uchar")) {
		RECAST_NLONG(double, unsigned char);

	/* Read doubles, write nearest shorts */
	} else if (STREQ(in,"double") && STREQ(out,"short")) {
		RECAST_NLONG(double, short);

	/* Read doubles, write nearest longs */
	} else if (STREQ(in,"double") && STREQ(out,"long")) {
		RECAST_NLONG(double, long);

	/* Read doubles, write nearest unsigned longs */
	} else if (STREQ(in,"double") && STREQ(out,"ulong")) {
		RECAST_NULONG(double, unsigned long);

	/* Read integers, write floats */
	} else if (STREQ(in,"int") && STREQ(out,"float")) {
		RECAST(int, float);

	/* Read integers, write doubles */
	} else if (STREQ(in,"int") && STREQ(out,"double")) {
		RECAST(int, double);

	/* Read integers, write chars */
	} else if (STREQ(in,"int") && STREQ(out,"char")) {
		RECAST(int, signed char);

	/* Read integers, write unsigned chars */
	} else if (STREQ(in,"int") && STREQ(out,"uchar")) {
		RECAST(int, unsigned char);

	/* Read integers, write shorts */
	} else if (STREQ(in,"int") && STREQ(out,"short")) {
		RECAST(int, short);

	/* Read integers, write longs */
	} else if (STREQ(in,"int") && STREQ(out,"long")) {
		RECAST_NLONG(long, long);

	/* Read integers, write unsigned longs */
	} else if (STREQ(in,"int") && STREQ(out,"ulong")) {
		RECAST(long, unsigned long);

	/* Read chars, write doubles */
	} else if (STREQ(in,"char") && STREQ(out,"double")) {
		RECAST(signed char, double);

	/* Read chars, write floats */
	} else if (STREQ(in,"char") && STREQ(out,"float")) {
		RECAST(signed char, float);

	/* Read chars, write integers */
	} else if (STREQ(in,"char") && STREQ(out,"int")) {
		RECAST(signed char, int);

	/* Read chars, write shorts */
	} else if (STREQ(in,"char") && STREQ(out,"short")) {
		RECAST(signed char, short);

	/* Read chars, write longs */
	} else if (STREQ(in,"char") && STREQ(out,"long")) {
		RECAST(signed char, long);

	/* Read chars, write unsigned longs */
	} else if (STREQ(in,"char") && STREQ(out,"ulong")) {
		RECAST(signed char, long);

	/* Read unsigned chars, write doubles */
	} else if (STREQ(in,"uchar") && STREQ(out,"double")) {
		RECAST(unsigned char, double);

	/* Read unsigned chars, write floats */
	} else if (STREQ(in,"uchar") && STREQ(out,"float")) {
		RECAST(unsigned char, float);

	/* Read unsigned chars, write integers */
	} else if (STREQ(in,"uchar") && STREQ(out,"int")) {
		RECAST(unsigned char, int);

	/* Read unsigned chars, write shorts */
	} else if (STREQ(in,"uchar") && STREQ(out,"short")) {
		RECAST(unsigned char, short);

	/* Read unsigned chars, write longs */
	} else if (STREQ(in,"uchar") && STREQ(out,"long")) {
		RECAST(unsigned char, long);

	/* Read unsigned chars, write unsigned longs */
	} else if (STREQ(in,"uchar") && STREQ(out,"ulong")) {
		RECAST(unsigned char, long);

	/* Read shorts, write doubles */
	} else if (STREQ(in,"short") && STREQ(out,"double")) {
		RECAST(short, double);

	/* Read shorts, write floats */
	} else if (STREQ(in,"short") && STREQ(out,"float")) {
		RECAST(short, float);

	/* Read shorts, write integers */
	} else if (STREQ(in,"short") && STREQ(out,"int")) {
		RECAST(short, int);

	/* Read shorts, write chars */
	} else if (STREQ(in,"short") && STREQ(out,"char")) {
		RECAST(short, signed char);

	/* Read shorts, write longs */
	} else if (STREQ(in,"short") && STREQ(out,"long")) {
		RECAST(short, long);

	/* Read longs, write doubles */
	} else if (STREQ(in,"long") && STREQ(out,"double")) {
		RECAST(long, double);

	/* Read longs, write floats */
	} else if (STREQ(in,"long") && STREQ(out,"float")) {
		RECAST(long, float);

	/* Read longs, write integers */
	} else if (STREQ(in,"long") && STREQ(out,"int")) {
		RECAST(long, int);

	/* Read longs, write chars */
	} else if (STREQ(in,"long") && STREQ(out,"char")) {
		RECAST(long, signed char);
	
	/* Read longs, write shorts */
	} else if (STREQ(in,"long") && STREQ(out,"short")) {
		RECAST(long, short);

	/* Read unsigned longs, write doubles */
	} else if (STREQ(in,"ulong") && STREQ(out,"double")) {
		RECAST(unsigned long, double);

	/* Read unsigned longs, write floats */
	} else if (STREQ(in,"ulong") && STREQ(out,"float")) {
		RECAST(unsigned long, float);

	/* Read unsigned longs, write integers */
	} else if (STREQ(in,"ulong") && STREQ(out,"int")) {
		RECAST(unsigned long, int);

	/* Read unsigned longs, write chars */
	} else if (STREQ(in,"ulong") && STREQ(out,"char")) {
		RECAST(unsigned long, signed char);
	
	/* Read unsigned longs, write shorts */
	} else if (STREQ(in,"ulong") && STREQ(out,"short")) {
		RECAST(unsigned long, short);

	/* in and out the same */
	} else if (STREQ(in,out)) {
		err("intype and outtype are the same (%s).",in);
	} else  err("Unsupported pair in=%s out=%s",in,out);
	

	/* Make par file */
	fprintf(outparfp, "n=%d\n", n);


	return(CWP_Exit());
}
@


1.24
log
@added copyright statement
@
text
@d115 2
@


1.23
log
@19 Aug 2003
@
text
@d1 4
a4 1
/* RECAST: $Revision: 1.22 $ ; $Date: 2001/11/12 18:03:40 $	*/
@


1.22
log
@changed /dev/null /dev/tty
@
text
@d1 1
a1 1
/* RECAST: $Revision: 1.21 $ ; $Date: 2001/07/27 19:59:43 $	*/
d334 1
a334 1
	return EXIT_SUCCESS;
@


1.21
log
@27 July revision
@
text
@d1 1
a1 1
/* RECAST: $Revision: 1.20 $ ; $Date: 1999/08/31 20:41:20 $	*/
d34 1
a34 1
" outpar=/dev/null	output parameter file, contains the		",
d105 1
a105 1
	if (!getparstring("outpar", &outpar))	outpar = "/dev/null" ;
@


1.20
log
@small cosmetic change
@
text
@d1 1
a1 1
/* RECAST: $Revision: 1.19 $ ; $Date: 1997/07/16 22:06:55 $	*/
d34 1
a34 1
" outpar=/dev/tty		output parameter file, contains the	",
d36 2
d105 1
a105 1
	if (!getparstring("outpar", &outpar))	outpar = "/dev/tty" ;
@


1.19
log
@Stew Levin changes
@
text
@d1 1
a1 1
/* RECAST: $Revision: 1.18 $ ; $Date: 1996/08/20 16:38:49 $	*/
a47 2


@


1.18
log
@Got phrase "convert" in title line to help sufind
@
text
@d1 1
a1 1
/* RECAST: $Revision: 1.17 $ ; $Date: 1996/04/12 16:22:22 $	*/
d59 1
a59 1
			xout = xin;					\
d70 1
a70 1
			xout = NLONG(xin);				\
d75 1
a75 1
#define NLONG(x) ((long)((x)>0.0?(x)+0.5:(x)-0.5))
d83 1
a83 1
			xout = NULONG(xin);				\
d88 1
a88 1
#define NULONG(x) ((unsigned long)((x)>0.0?(x)+0.5:(x)-0.5))
@


1.17
log
@added uchar options at request of Mikki Hand of Engineering
@
text
@d1 1
a1 1
/* RECAST: $Revision: 1.16 $ ; $Date: 1996/04/03 23:20:12 $	*/
d8 1
a8 1
" RECAST - RECAST data type						",
@


1.16
log
@added unsigned long items, as well as fixed a few bugs.
@
text
@d1 1
a1 1
/* RECAST: $Revision: 1.15 $ ; $Date: 1996/03/18 21:35:14 $	*/
d20 1
d29 1
d44 1
d46 1
d117 1
d125 1
d140 1
a140 1
	/* Read floats, write nearest chars */
d143 4
d168 1
a168 1
	/* Read doubles, write nearest chars */
d172 4
d200 4
d229 1
a229 1
	} else if (STREQ(in,"long") && STREQ(out,"short")) {
d239 24
@


1.15
log
@Now always round on converting floats/doubles to integer types.
@
text
@d1 1
a1 1
/* RECAST: $Revision: 1.14 $ ; $Date: 1996/03/16 15:58:46 $	*/
d22 1
d30 1
d42 1
a42 1
 *	CWP: John,Jack
d73 13
d115 1
d122 1
d131 1
a131 1
	} else if (STREQ(in,"float") && STREQ(out,"NLONG")) {
d135 1
a135 1
	} else if (STREQ(in,"float") && STREQ(out,"nchar")) {
d139 1
a139 1
	} else if (STREQ(in,"float") && STREQ(out,"nshort")) {
d143 1
a143 1
	} else if (STREQ(in,"float") && STREQ(out,"nlong")) {
d145 4
d155 1
a155 1
	} else if (STREQ(in,"double") && STREQ(out,"NLONG")) {
d159 1
a159 1
	} else if (STREQ(in,"double") && STREQ(out,"nchar")) {
d163 1
a163 1
	} else if (STREQ(in,"double") && STREQ(out,"nshort")) {
d167 1
a167 1
	} else if (STREQ(in,"double") && STREQ(out,"nlong")) {
d170 4
d192 5
a196 1
		RECAST(int, long);
d215 5
a219 1
	} else if (STREQ(in,"long") && STREQ(out,"long")) {
d261 20
@


1.14
log
@Use macro NLONG in place of NINT to preserve precision in
nlong output.
@
text
@d1 1
a1 1
/* RECAST: $Revision: 1.12 $ ; $Date: 1996/03/15 22:37:21 $	*/
a25 1
" 		=nint		nearest (int) (for input float/double)	",
a26 1
" 		=nchar		nearest (char) (for input float/double)	",
a27 1
" 		=nshort		nearest (short) (for input float/double)",
a28 1
" 		=nlong		nearest (long) (for input float/double)	",
d33 3
a35 1
" Note: Converting bigger types to smaller is hazardous.		",
d68 1
a68 1
/* Don't use NINT which casts to int and loses more precision */
a102 1
		|| STREQ(out,"NLONG") 
a103 1
		|| STREQ(out,"nchar") 
a104 1
		|| STREQ(out,"nshort") 
a105 1
		|| STREQ(out,"nlong") 
a112 4
	/* Read floats, write integers */
	} else if (STREQ(in,"float") && STREQ(out,"int")) {
		RECAST(float, int);

a116 4
	/* Read floats, write chars */
	} else if (STREQ(in,"float") && STREQ(out,"char")) {
		RECAST(float, signed char);

a120 4
	/* Read floats, write shorts */
	} else if (STREQ(in,"float") && STREQ(out,"short")) {
		RECAST(float, short);

a124 4
	/* Read floats, write longs */
	} else if (STREQ(in,"float") && STREQ(out,"long")) {
		RECAST(float, long);

a132 4
	/* Read doubles, write integers */
	} else if (STREQ(in,"double") && STREQ(out,"int")) {
		RECAST(double, int);

a136 4
	/* Read doubles, write chars */
	} else if (STREQ(in,"double") && STREQ(out,"char")) {
		RECAST(double, signed char);

a140 4
	/* Read doubles, write shorts */
	} else if (STREQ(in,"double") && STREQ(out,"short")) {
		RECAST(double, short);

a143 4

	/* Read doubles, write longs */
	} else if (STREQ(in,"double") && STREQ(out,"long")) {
		RECAST(double, long);
@


1.13
log
@Added more types, updated self-doc, imposed logical order
in branches.  Question: Can the "ifs" be absorbed in a
macro too? (JWS)
@
text
@d60 1
a60 1
#define RECAST_NINT(intype,outtype)					\
d66 1
a66 1
			xout = NINT(xin);				\
d70 2
a71 1

d105 1
a105 1
		|| STREQ(out,"nint") 
d124 2
a125 2
	} else if (STREQ(in,"float") && STREQ(out,"nint")) {
		RECAST_NINT(float, int);
d133 1
a133 1
		RECAST_NINT(float, signed char);
d141 1
a141 1
		RECAST_NINT(float, short);
d149 1
a149 1
		RECAST_NINT(float, long);
d160 2
a161 2
	} else if (STREQ(in,"double") && STREQ(out,"nint")) {
		RECAST_NINT(double,int);
d169 1
a169 1
		RECAST_NINT(double, signed char);
d177 1
a177 1
		RECAST_NINT(double, short);
d185 1
a185 1
		RECAST_NINT(double, long);
@


1.12
log
@Using macros to avoid repeated paragraphs;
filled in some missing cases;
removed a repeated case.
@
text
@d1 1
a1 1
/* RECAST: $Revision: 1.11 $ ; $Date: 1996/03/15 20:51:33 $	*/
d26 1
a26 1
" 		=nint		nearest (int)				",
d28 1
d30 1
d32 1
d37 1
a37 1
" Note: in=nint is the same as in=int 					",
d60 1
a60 1
#define RECAST_NINT(intype)						\
d63 1
a63 1
	int xout;							\
d67 1
a67 1
			efwrite(&xout, sizeof(int), 1, stdout);		\
a97 1
		|| STREQ(in,"nint")
d99 3
a101 1
		|| STREQ(out,"float") 
d106 1
d108 1
d110 1
a113 4
	/* Using nint as an input makes no sense set in=int */
	if (STREQ(in,"nint") )	in="int";

	
a121 8
	/* Read floats, write long integers */
	} else if (STREQ(in,"float") && STREQ(out,"long")) {
		RECAST(float, long);

	/* Read floats, write short integers */
	} else if (STREQ(in,"float") && STREQ(out,"short")) {
		RECAST(float, short);

d124 1
a124 1
		RECAST_NINT(float);
d130 20
d160 9
a168 1
		RECAST_NINT(double);
d174 4
d182 3
a184 3
	/* Read doubles, write chars */
	} else if (STREQ(in,"double") && STREQ(out,"char")) {
		RECAST(double, signed char);
d194 4
d206 19
a224 3
	/* Read integers, write chars */
	} else if (STREQ(in,"int") && STREQ(out,"char")) {
		RECAST(int, signed char);
d238 4
a245 4
	/* Read shorts, write chars */
	} else if (STREQ(in,"short") && STREQ(out,"char")) {
		RECAST(short, signed char);

a257 4
	/* Read longs, write shorts */
	} else if (STREQ(in,"long") && STREQ(out,"short")) {
		RECAST(long, short);

d262 1
a262 17
	/* Read char, write doubles */
	} else if (STREQ(in,"char") && STREQ(out,"double")) {
		RECAST(signed char, double);

	/* Read char, write floats */
	} else if (STREQ(in,"char") && STREQ(out,"float")) {
		RECAST(signed char, float);

	/* Read char, write integers */
	} else if (STREQ(in,"char") && STREQ(out,"int")) {
		RECAST(signed char, int);

	/* Read char, write longs */
	} else if (STREQ(in,"long") && STREQ(out,"long")) {
		RECAST(signed char, long);

	/* Read char, write shorts */
d264 1
a264 1
		RECAST(signed char, short);
@


1.11
log
@Corrected declaration of cx from float to signed char.
@
text
@d1 1
a1 1
/* RECAST: $Revision: 1.10 $ ; $Date: 1995/04/25 15:15:12 $	*/
d45 25
a77 7
	float xf;		/* binary float				*/
	double xd;		/* binary double			*/
	signed char xc;		/* binary char				*/
	short xsi;		/* binary short int			*/
	int xi;			/* binary integer			*/
	long xli;		/* binary long int			*/

d108 1
a108 1
	if (	STREQ(in,"nint") )	in="int";
d112 2
a113 8
	if (STREQ(in,"float") && STREQ(out,"double") ) {

		/* Loop over data converting float to double */
		while (efread(&xf,FSIZE, 1, stdin)) {
			++n;
			xd = xf;
			efwrite(&xd, DSIZE, 1, stdout);
		}
d116 2
a117 8
	} else if (STREQ(in,"float") && STREQ(out,"int") ) {

		/* Loop over data converting float to integer */
		while (efread(&xf,FSIZE, 1, stdin)) {
			++n;
			xi = xf;
			efwrite(&xi, ISIZE, 1, stdout);
		}
d120 2
a121 8
	} else if (STREQ(in,"float") && STREQ(out,"long") ) {

		/* Loop over data converting float to integer */
		while (efread(&xf,FSIZE, 1, stdin)) {
			++n;
			xli = xf;
			efwrite(&xli, sizeof(long), 1, stdout);
		}
d124 2
a125 9
	} else if (STREQ(in,"float") && STREQ(out,"short") ) {

		/* Loop over data converting float to integer */
		while (efread(&xf,FSIZE, 1, stdin)) {
			++n;
			xsi = xf;
			efwrite(&xsi, sizeof(short), 1, stdout);
		}

d128 3
a130 9
	} else if (STREQ(in,"float") && STREQ(out,"nint") ) {

		/* Loop over data converting float to nearest integer */
		while (efread(&xf,FSIZE, 1, stdin)) {
			++n;
			xi = NINT(xf);
			efwrite(&xi, ISIZE, 1, stdout);
		}

d132 2
a133 9
	} else if (STREQ(in,"float") && STREQ(out,"char") ) {

		/* Loop over data converting signed char to float */
		while (efread(&xf, FSIZE, 1, stdin)) {
			++n;
			xc = xf;
			efwrite(&xc, sizeof(char), 1, stdout);
		}

d136 2
a137 8
	} else if (STREQ(in,"double") && STREQ(out,"float") ) {

		/* Loop over data converting double to float */
		while (efread(&xd, DSIZE, 1, stdin)) {
			++n;
			xf = xd;
			efwrite(&xf, FSIZE, 1, stdout);
		}
d140 2
a141 8
	} else if (STREQ(in,"double") && STREQ(out,"int") ) {

		/* Loop over data converting float to integer */
		while (efread(&xd,DSIZE, 1, stdin)) {
			++n;
			xi = xd;
			efwrite(&xi, ISIZE, 1, stdout);
		}
d144 2
a145 11
	} else if (STREQ(in,"double") && STREQ(out,"nint") ) {

		/* Loop over data converting float to nearest integer */
		while (efread(&xd,DSIZE, 1, stdin)) {
			++n;
			xi = NINT(xd);
			efwrite(&xi, ISIZE, 1, stdout);
		}

	/* Read doubles, write chars */
	} else if (STREQ(in,"double") && STREQ(out,"char") ) {
d147 7
a153 6
		/* Loop over data converting float to integer */
		while (efread(&xd,DSIZE, 1, stdin)) {
			++n;
			xc = xd;
			efwrite(&xc, sizeof(char), 1, stdout);
		}
d156 2
a157 9
	} else if (STREQ(in,"double") && STREQ(out,"char") ) {

		/* Loop over data converting float to integer */
		while (efread(&xd,DSIZE, 1, stdin)) {
			++n;
			xc = xd;
			efwrite(&xc, sizeof(char), 1, stdout);
		}

d160 2
a161 1
	} else if (STREQ(in,"int") && STREQ(out,"float") ) {
d163 59
a221 46
		/* Loop over data converting integer to float */
		while (efread(&xi, ISIZE, 1, stdin)) {
			++n;
			xf = xi;
			efwrite(&xf, FSIZE, 1, stdout);
		}

	/* read integers, write doubles */
	} else if (STREQ(in,"int") && STREQ(out,"double") ) {

		/* Loop over data converting integer to double */
		while (efread(&xi, ISIZE, 1, stdin)) {
			++n;
			xd = xi;
			efwrite(&xd, DSIZE, 1, stdout);
		}

	/* read integers, write chars */
	} else if (STREQ(in,"int") && STREQ(out,"char") ) {

		/* Loop over data converting char to float */
		while (efread(&xi, sizeof(int), 1, stdin)) {
			++n;
			xc = xi;
			efwrite(&xf, sizeof(char), 1, stdout);
		}

	/* read shorts, write floats */
	} else if (STREQ(in,"short") && STREQ(out,"float") ) {

		/* Loop over data converting integer to float */
		while (efread(&xsi, sizeof(short), 1, stdin)) {
			++n;
			xf = xsi;
			efwrite(&xf, FSIZE, 1, stdout);
		}

	/* read longs, write floats */
	} else if (STREQ(in,"long") && STREQ(out,"float") ) {

		/* Loop over data converting integer to float */
		while (efread(&xli, sizeof(long), 1, stdin)) {
			++n;
			xf = xli;
			efwrite(&xf, FSIZE, 1, stdout);
		}
d224 2
a225 8
	} else if (STREQ(in,"char") && STREQ(out,"float") ) {

		/* Loop over data converting signed char to float */
		while (efread(&xc, sizeof(char), 1, stdin)) {
			++n;
			xf = xc;
			efwrite(&xf, FSIZE, 1, stdout);
		}
d228 2
a229 28
	} else if (STREQ(in,"char") && STREQ(out,"int") ) {

		/* Loop over data converting float to integer */
		while (efread(&xc,sizeof(char), 1, stdin)) {
			++n;
			xi = xc;
			efwrite(&xi, ISIZE, 1, stdout);
		}

	/* Read char, write nearest integers */
	} else if (STREQ(in,"char") && STREQ(out,"nint") ) {

		/* Loop over data converting float to nearest integer */
		while (efread(&xc,sizeof(char), 1, stdin)) {
			++n;
			xi = NINT(xc);
			efwrite(&xi, ISIZE, 1, stdout);
		}

	/* Read char, write doubles */
	} else if (STREQ(in,"char") && STREQ(out,"double") ) {

		/* Loop over data converting float to integer */
		while (efread(&xc,DSIZE, 1, stdin)) {
			++n;
			xd = xc;
			efwrite(&xd, sizeof(char), 1, stdout);
		}
d231 7
d240 3
a242 47
	} else if (STREQ(in,out) ) {
		if (STREQ(in,"float")) {
			/* Loop over data write float to float */
			while (efread(&xf, FSIZE, 1, stdin)) {
				++n;
				efwrite(&xf, FSIZE, 1, stdout);
			}

		} else if (STREQ(in,"double") ) {
			/* Loop over data write double to double */
			while (efread(&xd, DSIZE, 1, stdin)) {
				++n;
				efwrite(&xd, DSIZE, 1, stdout);
			}

		} else if (STREQ(in,"int") ) {
			/* Loop over data write int to int */
			while (efread(&xi, ISIZE, 1, stdin)) {
				++n;
				efwrite(&xi, ISIZE, 1, stdout);
			}

		} else if (STREQ(in,"short") ) {
			/* Loop over data write short to short */
			while (efread(&xsi, sizeof(short), 1, stdin)) {
				++n;
				efwrite(&xsi, sizeof(short), 1, stdout);
			}

		} else if (STREQ(in,"short") ) {
			/* Loop over data write long to long */
			while (efread(&xli, sizeof(long), 1, stdin)) {
				++n;
				efwrite(&xli, sizeof(long), 1, stdout);
			}

		} else if (STREQ(in,"char") ) {
			/* Loop over data write char to char */
			while (efread(&xc, sizeof(char), 1, stdin)) {
				++n;
				efwrite(&xc, sizeof(char), 1, stdout);
			}
		
		}
	} else {
		err("Unsupported pair in=%s out=%s",in,out);
	}
@


1.10
log
@fixed RCS label
@
text
@d1 1
a1 1
/* RECAST: $Revision: 1.8 $ ; $Date: 94/08/25 15:00:32 $	*/
a52 1
	float xc;		/* binary char				*/
d55 2
a57 1
	short xsi;		/* binary short int			*/
d147 1
a147 1
		/* Loop over data converting char to float */
d259 1
a259 1
		/* Loop over data converting double to float */
@


1.9
log
@3 feb 94
@
text
@d1 1
a1 1
/* RECAST - recast binary data from type in to type out */
@


1.8
log
@cosmetic change
@
text
@d20 2
d28 2
a41 1
/* Caveat: still need to do short int, long int, long double  */
d57 2
d84 2
d113 21
d195 11
d236 20
d320 14
d342 2
@


1.7
log
@cleaning up a bit.
@
text
@d16 12
a27 10
" 	in=float		input type	(float)			",
" 				=double		(double)		",
" 				=int		(int)			",
" 				=char		(char)			",
" 	out=double		output type	(double)		",
" 				=float		(float)			",
" 				=int		(int)			",
" 				=nint		nearest (int)		",
" 				=char		(char)			",
" 	outpar=/dev/tty		output parameter file, contains the	",
a32 1
/**************** end self doc ***********************************/
d39 2
@


1.6
log
@added char to float and float to char feature
@
text
@d47 1
d113 12
a124 1
	/* read doubles, write floats */
d154 11
a164 1
	/* read integers, write floats */
d174 2
a175 2
	/* read chars, write floats */
	} else if (STREQ(in,"char") && STREQ(out,"float") ) {
d177 2
a178 2
		/* Loop over data converting char to float */
		while (efread(&xi, sizeof(char), 1, stdin)) {
d180 2
a181 2
			xf = xi;
			efwrite(&xf, FSIZE, 1, stdout);
d184 2
a185 2
	/* read floats, write chars */
	} else if (STREQ(in,"float") && STREQ(out,"char") ) {
d188 1
a188 1
		while (efread(&xi, FSIZE, 1, stdin)) {
d190 1
a190 1
			xf = xi;
d194 2
a195 2
	/* read integers, write doubles */
	} else if (STREQ(in,"int") && STREQ(out,"double") ) {
d197 2
a198 2
		/* Loop over data converting integer to double */
		while (efread(&xi, ISIZE, 1, stdin)) {
d200 2
a201 2
			xd = xi;
			efwrite(&xd, DSIZE, 1, stdout);
d204 2
d207 29
d245 1
a245 1
			/* Loop over data write float to float */
d252 1
a252 1
			/* Loop over data write float to float */
d256 7
@


1.5
log
@cosmetic change
@
text
@d19 1
d24 1
d69 1
d74 1
d150 20
@


1.4
log
@begin selfdoc end selfdoc lines added
@
text
@d23 1
a23 1
" 	outpar=/dev/tty		output parameter file, contains the	", 
@


1.3
log
@new selfdoc installed
@
text
@@


1.2
log
@rcs hoseup.
@
text
@d1 1
a1 1
/* recast - recast binary data from type in to type out */
d6 23
a28 18
char *sdoc =
" 								\n"
" RECAST - RECAST binary INput type to binary OUTput type	\n"
" 								\n"
" recast <stdin [optional parameters]  >stdout 			\n"
" 								\n"
" Required parameters:						\n"
" 	none							\n"
" 								\n"
" Optional parameters:						\n"
" 	in=float		input type			\n"
" 				=double				\n"
" 	out=double		output type			\n"
" 				=float				\n"
" 	outpar=/dev/tty	output parameter file, contains the	\n"
"			number of doubles (n1=)			\n"
" 								\n"
;
d35 1
a35 1
/* Caveat: This was done for an immediate need; it should be generalized. */
d43 1
a43 3
	int n = 0;		/* number of floats/doubles	 	*/
	float x;		/* binary float				*/
	double y;		/* binary double			*/
d45 3
d51 1
a51 1
	askdoc(1);
d63 10
a72 4
	if ( !STREQ(in,"float") && !STREQ(in,"double") )
			err("%s is an unsupported type",in);
	if ( !STREQ(out,"float") && !STREQ(out,"double") )
			err("%s is an unsupported type",out);
d74 4
d82 1
a82 1
		while (efread(&x,FSIZE, 1, stdin)) {
d84 2
a85 2
			y = x;
			efwrite(&y, DSIZE, 1, stdout);
d88 20
d112 1
a112 1
		while (efread(&y, DSIZE, 1, stdin)) {
d114 2
a115 2
			x = y;
			efwrite(&x, FSIZE, 1, stdout);
d118 5
a122 3
	} else if (STREQ(in,"float") && STREQ(out,"float") ) {
		/* Loop over data write float to float */
		while (efread(&x, DSIZE, 1, stdin)) {
d124 2
a125 2
			efwrite(&x, FSIZE, 1, stdout);
			warn("writing %s to %s",in,out);
d128 5
a132 3
	} else if (STREQ(in,"double") && STREQ(out,"double") ) {
		/* Loop over data write float to float */
		while (efread(&y, DSIZE, 1, stdin)) {
d134 2
a135 2
			efwrite(&y, FSIZE, 1, stdout);
			warn("writing %s to %s",in,out);
d137 45
d183 1
a183 1

@


1.1
log
@Initial revision
@
text
@@
