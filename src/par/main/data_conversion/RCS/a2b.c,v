head	1.16;
access;
symbols;
locks; strict;
comment	@ * @;


1.16
date	2011.11.16.16.42.16;	author john;	state Exp;
branches;
next	1.15;

1.15
date	2011.10.20.21.08.50;	author john;	state Exp;
branches;
next	1.14;

1.14
date	2003.08.19.21.24.44;	author john;	state Exp;
branches;
next	1.13;

1.13
date	2002.10.04.18.49.57;	author john;	state Exp;
branches;
next	1.12;

1.12
date	2002.09.05.20.37.08;	author john;	state Exp;
branches;
next	1.11;

1.11
date	2001.11.12.18.03.40;	author john;	state Exp;
branches;
next	1.10;

1.10
date	2000.09.22.20.42.07;	author john;	state Exp;
branches;
next	1.9;

1.9
date	99.10.13.18.20.48;	author john;	state Exp;
branches;
next	1.8;

1.8
date	96.09.06.16.08.13;	author john;	state Exp;
branches;
next	1.7;

1.7
date	96.07.29.15.20.56;	author jkc;	state Exp;
branches;
next	1.6;

1.6
date	95.04.25.15.14.40;	author john;	state Exp;
branches;
next	1.5;

1.5
date	92.12.02.14.21.00;	author john;	state Exp;
branches;
next	1.4;

1.4
date	92.10.28.15.49.35;	author john;	state Exp;
branches;
next	1.3;

1.3
date	92.10.28.14.14.31;	author john;	state Exp;
branches;
next	1.2;

1.2
date	91.09.04.16.49.20;	author jkcohen;	state Exp;
branches;
next	1.1;

1.1
date	91.04.29.12.36.30;	author jkcohen;	state Exp;
branches;
next	;


desc
@Convert ascii floats in rectangular format to binary
@


1.16
log
@checkpar() added
@
text
@/* Copyright (c) Colorado School of Mines, 2011.*/
/* All rights reserved.                       */

/* A2B: $Revision: 1.14 $ ; $Date: 2003/08/19 21:24:44 $	*/

#include "par.h"

/*********************** self documentation **********************/
char *sdoc[] = {
" 								",
" A2B - convert ascii floats to binary 				",
" 								",
" a2b <stdin >stdout outpar=/dev/null 				",
" 								",
" Required parameters:						",
" 	none							",
" 								",
" Optional parameters:						",
" 	n1=2		floats per line in input file		",
" 								",
" 	outpar=/dev/null output parameter file, contains the	",
"			number of lines (n=)			",
" 			other choices for outpar are: /dev/tty,	",
" 			/dev/stderr, or a name of a disk file	",
NULL};

/* Credits:
 *	CWP: Jack K. Cohen, Dave Hale
 *	Hans Ecke 2002: Replaced line-wise file reading via gets() with 
 *			float-wise reading via fscanf(). This makes it 
 *			much more robust: it does not impose a specific 
 *			structure on the input file.
 */

/**************** end self doc ***********************************/

#define N1_DEFAULT 2
#define OUTPAR_DEFAULT "/dev/null"

int
main(int argc, char **argv)
{
	char *outpar;		  /* name of file holding output parfile   */
	FILE *outparfp;		  /* ... its file pointer		   */
	int n1;			  /* number of floats per line	   	   */
	float *x;		  /* binary floats			   */
	int ret;		  /* fscanf() return value		 */
	unsigned long int vnum;   /* how many floats we have filled in the */
				  /*  current vector already */
	unsigned long int vec;    /* number of vector we are reading	*/
 

	/* Hook up getpar */
	initargs(argc, argv);
	requestdoc(1);

	switch(filestat(STDOUT)) { /* Prevent floats from dumping on screen */
	case BADFILETYPE:
		warn("stdout is illegal filetype");
		pagedoc();
	break;
	case TTY:
		warn("stdout can't be tty");
		pagedoc();
	break; 
	default:			   /* rest are OK */
	break;

	}


	/* Get parameters and do set up */
	if (!getparstring("outpar", &outpar))  outpar = OUTPAR_DEFAULT;
	outparfp = efopen(outpar, "w");

	if (!getparint("n1", &n1))		n1 = N1_DEFAULT;
	x = ealloc1float(n1);

	checkpars();


	vnum=0;		/* offset inside vector, in range 0->n1 */
	vec =0;		/* vector number, ends up as n2	 */
	while(1) {	
	   ret=fscanf(stdin," %f ",x+vnum);
	/*  fscanf returns: 0   : characters there, but no conversion (error)
	*		  EOF : eof before conversion
	*		  else: number of conversions 
	*/
	   if(ret == EOF) {
		if(vnum != 0) 
		err("vector #%lu, float #%lu: we encountered an EOF but the vector has not been read in completely",vec+1,vnum+1);
		break;  /* else everything is okay: get out of the loop */
		} 
	   if(ret == 0)	
		err("could not read float in vector #%lu, float #%lu",vec+1,vnum+1);
	   vnum++;
	   if(vnum == n1) {
		vnum=0;
		fwrite(x, FSIZE, n1, stdout);
		vec++;
		}
	   }
	
	fprintf(outparfp, "n2=%lu\n", vec);/* Make par file */

	return EXIT_SUCCESS;
}
@


1.15
log
@added copyright statement
@
text
@d79 2
@


1.14
log
@19 august
@
text
@d1 4
a4 1
/* A2B: $Revision: 1.10 $ ; $Date: 2000/09/22 20:42:07 $	*/
@


1.13
log
@*** empty log message ***
@
text
@d26 4
a29 3
 *      Hans Ecke 2002: replaced gets() with the get_long_line() function 
 *                      which provides save reading of unlimited 
 *                      length lines
d34 2
a35 4

/* Prototype of function used internally */
long int
get_long_line (char **lineptr, size_t *n, FILE *stream);
d40 9
a48 9
	char *outpar;		/* name of file holding output parfile	   */
	FILE *outparfp;		/* ... its file pointer			   */
	int n1;			/* number of floats per line	   	   */
	int n2 = 0;		/* number of lines in input file 	   */
	float *x;		/* binary floats			   */
	char *buf;   	        /* buffer for the ascii floats		   */
        size_t buf_s;           /* current size of the buffer              */
        long int ret;           /* get_long_line() return value            */

d54 1
a54 3

	/* Prevent floats from dumping on screen */
	switch(filestat(STDOUT)) {
d63 1
a63 1
	default: /* rest are OK */
d70 1
a70 1
	if (!getparstring("outpar", &outpar))  outpar = "/dev/null" ;
d73 1
a73 1
	if (!getparint("n1", &n1))  n1 = 2;
d77 20
a96 13
	/* Loop over data, converting to binary */
        buf=NULL;
        buf_s=0;
	while ((ret=get_long_line(&buf,&buf_s,stdin)) > 0) {
		register int i1;
                char *p=buf;

		for (i1 = 0; i1 < n1; ++i1) {
			while (*p == ' ' || *p == '\t' || *p == '\n')  ++p;
			if (1 != sscanf(p, "%f", x+i1))
				err("line #%d: scan failed on float #%d:\n%s",
					n2+1, i1+1, buf);
			while (*p != ' ' && *p != '\t' && *p != '\n' && *p != '\0')  ++p;
d98 3
a100 7
		efwrite(x, FSIZE, n1, stdout);
		++n2;
	}
        if(buf != NULL) free(buf);

	/* Make par file */
	fprintf(outparfp, "n=%d\n", n2);
a103 114




#define START_SIZE 1024
#define TERMINATOR '\n'

long int
get_long_line (char **lineptr, size_t *n, FILE *stream) 

/************************************************************************
get_long_line - get long lines of characters
*************************************************************************

Input:

lineptr		pointer to a line buffer that may be pre-allocated or not
n		size of that buffer: 0 if not allocated, >0 if already allocated
stream		file pointer to input data stream

*************************************************************************

Action:

* reads stream into *lineptr till it encounters an error, EOF or a newline \n
* unlike gets(), the \n is copied into the string as well
* null-terminates *lineptr
* allocates *lineptr or increases its size as necessary
* adjusts *n to the new size

*************************************************************************

Output:

* returns -1 on error or EOF
* else returns number of characters read

*************************************************************************

Notes:

* it is the callers responsibility to free() *lineptr

* example of usage:

	char *buf;   	      
        size_t buf_s;         
        long int ret;         

        buf=NULL;
        buf_s=0;
	while ((ret=get_long_line(&buf,&buf_s,stdin)) > 0) {

           ... do something with the string in buf

	}
        if(buf != NULL) free(buf);

*************************************************************************
Author: CWP: Hans Ecke  September 2002.
*************************************************************************/
{

  char *line, *p;
  size_t size, copy;

  if (ferror (stream))  return -1;

  /* Make sure we have a line buffer to start with.  */
  if (*lineptr == NULL || *n < 2)  {
      line = realloc (*lineptr, START_SIZE);
      if (line == NULL)	return -1;
      *lineptr = line;
      *n = START_SIZE;
    }

  line = *lineptr;
  size = *n;

  copy = size;
  p = line;

  while (1) {
      size_t len;

      while (--copy > 0) {
          register int c = getc (stream);
          if      (c == EOF) {
             if (p == *lineptr)  return -1;
             *p = '\0';
             return p - *lineptr;
             }
          else if ((*p++ = c) == TERMINATOR) {
             *p = '\0';
             return p - *lineptr;
             }
          }

      /* Need to enlarge the line buffer.  */
      len = p - line;
      size *= 2;
      line = realloc (line, size);
      if (line == NULL) {
          if (p == *lineptr)  return -1;
          *p = '\0';
          return p - *lineptr;
         }
      *lineptr = line;
      *n = size;
      p = line + len;
      copy = size - len;
      }
}

@


1.12
log
@*** empty log message ***
@
text
@d1 1
a1 1
/* A2B: $Revision: 1.11 $ ; $Date: 2001/11/12 18:03:40 $	*/
a3 1
#define ASCII_LINE 131072  /* 2^17 */
d10 1
a10 1
" a2b <stdin >stdout outpar=/dev/tty 				",
d18 1
a18 1
" 	outpar=/dev/tty	output parameter file, contains the	",
d20 2
a21 1
" 								",
a22 1
/**************** end self doc ***********************************/
d26 3
d31 6
d41 8
a48 6
	char *outpar;		/* name of file holding output parfile	*/
	FILE *outparfp;		/* ... its file pointer			*/
	int n1;			/* number of floats per line		*/
	int n2 = 0;		/* number of lines in input file 	*/
	char buf[ASCII_LINE];	/* buffer for the ascii floats		*/
	float *x;		/* binary floats			*/
d73 1
a73 1
	if (!getparstring("outpar", &outpar))  outpar = "/dev/tty" ;
d81 3
a83 2
	while (gets(buf)) {
		char *p = buf;
d85 1
d88 1
a88 1
			while (*p == ' ' || *p == '\t')  ++p;
d92 1
a92 1
			while (*p != ' ' && *p != '\t' && *p != '\0')  ++p;
d97 1
a97 1

d102 31
d134 82
a215 1
	return(CWP_Exit());
d217 1
@


1.11
log
@changed /dev/null /dev/tty
@
text
@d1 1
a1 1
/* A2B: $Revision: 1.8 $ ; $Date: 1996/09/06 16:08:13 $	*/
d91 1
a91 1
	return EXIT_SUCCESS;
@


1.10
log
@fixed outpuar
@
text
@d1 1
a1 1
/* A2B: $Revision: 1.9 $ ; $Date: 1999/10/13 18:20:48 $	*/
d11 1
a11 1
" a2b <stdin >stdout outpar=/dev/null 				",
d19 1
a19 1
" 	outpar=/dev/null output parameter file, contains the	",
d21 1
a21 2
" 			other choices for outpar are: /dev/tty,	",
" 			/dev/stderr, or a name of a disk file	",
d23 1
a27 1
/**************** end self doc ***********************************/
d63 1
a63 1
	if (!getparstring("outpar", &outpar))  outpar = "/dev/null" ;
@


1.9
log
@changed /dev/tty to /dev/null for the outpar= default
@
text
@d1 1
a1 1
/* A2B: $Revision: 1.8 $ ; $Date: 1996/09/06 16:08:13 $	*/
d19 1
a19 1
" 	outpar=/dev/null	output parameter file, contains the	",
d21 2
a22 1
" 								",
a23 1
/**************** end self doc ***********************************/
d28 1
@


1.8
log
@fixed -Wall complaints
@
text
@d1 1
a1 1
/* A2B: $Revision: 1.7 $ ; $Date: 1996/07/29 15:20:56 $	*/
d11 1
a11 1
" a2b <stdin >stdout outpar=/dev/tty 				",
d19 1
a19 1
" 	outpar=/dev/tty	output parameter file, contains the	",
d63 1
a63 1
	if (!getparstring("outpar", &outpar))  outpar = "/dev/tty" ;
@


1.7
log
@Enlarged buffer size per Toralf
@
text
@d1 1
a1 1
/* A2B: $Revision: 1.6 $ ; $Date: 1995/04/25 15:14:40 $	*/
d26 1
a26 1
 *	CWP: Jack, Dave
d30 1
d55 2
d58 1
@


1.6
log
@fixed RCS label
@
text
@d1 1
a1 1
/* A2B: $Revision: 1.8 $ ; $Date: 94/08/25 15:00:32 $	*/
d4 1
d36 1
a36 1
	char buf[BUFSIZ];	/* buffer for the ascii floats		*/
@


1.5
log
@selfdoc changed to pagedoc
@
text
@d1 1
a1 1
/* a2b - convert ascii floats to binary */
@


1.4
log
@begin selfdoc end selfdoc lines added
@
text
@d48 1
a48 1
		selfdoc();
d52 1
a52 1
		selfdoc();
@


1.3
log
@new selfdoc installed
@
text
@@


1.2
log
@string -> char*
@
text
@d6 16
a21 16
char *sdoc =
" 								\n"
" A2B - convert ascii floats to binary 				\n"
" 								\n"
" a2b <stdin >stdout outpar=/dev/tty 				\n"
" 								\n"
" Required parameters:						\n"
" 	none							\n"
" 								\n"
" Optional parameters:						\n"
" 	n1=2		floats per line in input file		\n"
" 								\n"
" 	outpar=/dev/tty	output parameter file, contains the	\n"
"			number of lines (n=)			\n"
" 								\n"
;
d41 1
a41 1
	askdoc(1);
@


1.1
log
@Initial revision
@
text
@d6 1
a6 1
string sdoc =
d31 1
a31 1
	string outpar;		/* name of file holding output parfile	*/
@
