head	1.7;
access;
symbols;
locks; strict;
comment	@ * @;


1.7
date	2011.11.16.16.42.16;	author john;	state Exp;
branches;
next	1.6;

1.6
date	2011.10.20.21.08.50;	author john;	state Exp;
branches;
next	1.5;

1.5
date	2005.02.07.21.39.24;	author john;	state Exp;
branches;
next	1.4;

1.4
date	2003.08.19.21.24.44;	author john;	state Exp;
branches;
next	1.3;

1.3
date	96.09.06.17.14.38;	author john;	state Exp;
branches;
next	1.2;

1.2
date	95.04.25.15.15.05;	author john;	state Exp;
branches;
next	1.1;

1.1
date	94.01.31.11.03.55;	author john;	state Exp;
branches;
next	;


desc
@make par file
@


1.7
log
@checkpar() added
@
text
@/* Copyright (c) Colorado School of Mines, 2011.*/
/* All rights reserved.                       */

/* MKPARFILE: $Revision: 1.5 $ ; $Date: 2005/02/07 21:39:24 $	*/

#include "par.h"

/*********************** self documentation ******************************/
char *sdoc[] = {
" 									",
" MKPARFILE - convert ascii to par file format 				",
" 									",
" mkparfile <stdin >stdout 						",
" 									",
" Optional parameters:							",
" 	string1=\"par1\"	first par string			",
" 	string2=\"par2\"	second par string			",
" 									",
" This is a tool to convert values written line by line to parameter 	",
" vectors in the form expected by getpar.  For example, if the input	",
" file looks like:							",
" 	t0 v0								",
" 	t1 v1								",
"	...								",
" then									",
"	mkparfile <input >output string1=tnmo string2=vnmo		",
" yields:								",
"	tnmo=t0,t1,...							",
"	vnmo=v0,v1,...							",
" 									",
NULL};
/**************** end self doc *******************************************/

/* Credits:
 *	CWP: Jack K. Cohen
 */


/* Caveat: A more general tool allowing n1 strings would be desirable. */

int
main(int argc, char **argv)
{
	int i2, n2 = 0;
	float x1, x2;
	char *string1;
	char *string2;
	char buf[BUFSIZ];
	FILE *datafp;


	/* Hook up getpar */
	initargs(argc, argv);
	requestdoc(1);


	/* Get parameters and set up tmpfile */
	if (!getparstring("string1", &string1))	string1 = "par1";
	if (!getparstring("string2", &string2))	string2 = "par2";
	datafp = etmpfile();


        checkpars();

	/* Extract x1's from data and save data for later pass over x2's */
	if (!fgets(buf,sizeof(buf),stdin))  err("no data found");
	if (2 == sscanf(buf, "%f %f", &x1, &x2)) { /* no comma first time */
		printf("%s=%g", string1, x1);
		efwrite(&x2, FSIZE, 1, datafp);
	} else  err("line #%d: scan failed:\n%s", n2+1, buf);
	++n2;

	while (fgets(buf,sizeof(buf),stdin)) {
		if (2 == sscanf(buf, "%f %f", &x1, &x2)) {
			printf(",%g", x1);
			efwrite(&x2, FSIZE, 1, datafp);
		} else  err("line #%d: scan failed:\n%s", n2+1, buf);
		++n2;
	}
	putchar('\n');

	/* Rewind and get the x2's */
	rewind(datafp);

	efread(&x2, FSIZE, 1, datafp);
	printf("%s=%g", string2, x2);

	for (i2 = 1; i2 < n2; ++i2) {
		efread(&x2, FSIZE, 1, datafp);
		printf(",%g", x2);
	}
	putchar('\n');

	return(CWP_Exit());
}
@


1.6
log
@added copyright statement
@
text
@d63 2
@


1.5
log
@Reg Beardsley's fix with "gets" changed to "fgets".
@
text
@d1 4
a4 1
/* MKPARFILE: $Revision: 1.4 $ ; $Date: 2003/08/19 21:24:44 $	*/
@


1.4
log
@19 Aug 2003
@
text
@d1 1
a1 1
/* MKPARFILE: $Revision: 1.3 $ ; $Date: 1996/09/06 17:14:38 $	*/
d13 2
a14 2
" 	string1=\"par1=\"	first par string			",
" 	string2=\"par2=\"	second par string			",
d32 1
a32 1
 *	CWP: Jack
d61 1
a61 1
	if (!gets(buf))  err("no data found");
d68 1
a68 1
	while (gets(buf)) {
@


1.3
log
@quieted -Wall message
@
text
@d1 1
a1 1
/* MKPARFILE: $Revision: 1.2 $ ; $Date: 1995/04/25 15:15:05 $	*/
d89 1
a89 1
	return EXIT_SUCCESS;
@


1.2
log
@fixed RCS label
@
text
@d1 1
a1 1
/* MKPARFILE: $Revision: 1.8 $ ; $Date: 94/08/25 15:00:32 $	*/
d38 1
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/* MKPARFILE - convert ascii file to par file format */
@
