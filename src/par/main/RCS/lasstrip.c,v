head	1.2;
access;
symbols;
locks; strict;
comment	@ * @;


1.2
date	2006.03.09.20.10.21;	author john;	state Exp;
branches;
next	1.1;

1.1
date	2006.03.09.20.05.49;	author john;	state Exp;
branches;
next	;


desc
@Werner Heigl's LAS log stripping program.
@


1.2
log
@added initialization of variable c in subroutine
@
text
@/* LASSTRIP: $Revision: 1.1 $ ; $Date: 2006/03/09 20:05:49 $	*/

#include "par.h"
#include "string.h"

/*********************** self documentation **********************/
char *sdoc[] = {
" 								",
" LASSTRIP - strip off header from a LAS file and write header	",
"	     and data into two separate files:			",
"	     las_header.ascii and las_data.ascii		",
"								",
" lasstrip <stdin outhdr= outdata= 				",
" 								",
" Required parameters:						",
" 	none							",
" 								",
" Optional parameters:						",
"	outhdr=las_header.asc		output file containing	",
"					LAS header		",
"	outdata=las_data.asc		output file containing	",
"					LAS data channels	",
"			-> all output files are in ASCII	",
" 								",
NULL};

/* Credits:
 *	CWP: John Stockwell
 *	CENPET: Werner M. Heigl
 */

/**************** end self doc ***********************************/

#define OUTHDR_DEFAULT "las_header.asc"
#define OUTDATA_DEFAULT "las_data.asc"
#define MAXLINE 1000

int getnewline(char line[], int maxline);

int
main(int argc, char **argv)
{
	char *outhdr;		  /* name of file holding LAS header	*/
	FILE *outhdrfp;		  /* ... its file pointer		*/
	char *outdata;		  /* name of file holding LAS data	*/
	FILE *outdatafp;	  /* ... its file pointer		*/
	int i,c;
	int len=0;		  /* length of char line[]		*/
	char line[MAXLINE];	  /* current input line	                */
 

	/* Hook up getpar */
	initargs(argc, argv);
	requestdoc(1);

	
	/* Get parameters and do set up */
	if (!getparstring("outhdr", &outhdr))  outhdr = OUTHDR_DEFAULT;
	outhdrfp = efopen(outhdr, "w");

	if (!getparstring("outdata", &outdata))  outdata = OUTDATA_DEFAULT;
	outdatafp = efopen(outdata, "w");

	/* copy LAS header to outhdr */
	do {
		len = getnewline(line,MAXLINE);	/* len not really necessary */
		i = 0;
		while (line[i]!='\0') {
			fputc(line[i],outhdrfp);
			++i;
		}
		fputc('\n',outhdrfp);
	} while ( strncmp("~A",line,2)!=0 );
	efclose(outhdrfp);
		
	/* copy remaining LAS data to outdata */
	while ( (c=getchar())!=EOF)
		fputc(c,outdatafp);
	efclose(outdatafp);
	
	printf("LAS file succesfully separated into header and data\n");
	printf("LAS header is in las_header.asc\n");
	printf("LAS data channels are in las_data.asc\n");
	
	return EXIT_SUCCESS;
}


/* getline: read a line from stdin into s[] and return length of line */
int getnewline(char s[], int lim)
{
	int c=0,i;
	
	for (i=0; i<lim-1 && (c=getchar())!=EOF && c!='\n'; ++i)
		s[i] = c;
	if (c=='\n') {
		s[i] = c;
		++i;
	}
	s[i] = '\0';
	return i;
}
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/* LASSTRIP: $Revision: 1.1 $ ; $Date: 2006/03/09 20:05:08 $	*/
d92 1
a92 1
	int c,i;
@
