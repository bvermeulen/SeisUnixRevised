head	1.12;
access;
symbols;
locks; strict;
comment	@ * @;


1.12
date	2011.11.16.16.42.16;	author john;	state Exp;
branches;
next	1.11;

1.11
date	2011.10.20.21.08.50;	author john;	state Exp;
branches;
next	1.10;

1.10
date	2007.12.03.17.36.53;	author john;	state Exp;
branches;
next	1.9;

1.9
date	2007.12.03.17.34.18;	author john;	state Exp;
branches;
next	1.8;

1.8
date	2003.08.19.21.24.44;	author john;	state Exp;
branches;
next	1.7;

1.7
date	97.07.16.22.18.31;	author john;	state Exp;
branches;
next	1.6;

1.6
date	96.09.06.17.29.41;	author john;	state Exp;
branches;
next	1.5;

1.5
date	95.09.27.20.38.59;	author john;	state Exp;
branches;
next	1.4;

1.4
date	95.04.25.15.15.25;	author john;	state Exp;
branches;
next	1.3;

1.3
date	92.10.28.15.50.16;	author john;	state Exp;
branches;
next	1.2;

1.2
date	92.10.28.14.43.37;	author john;	state Exp;
branches;
next	1.1;

1.1
date	92.10.28.14.39.15;	author john;	state Exp;
branches;
next	;


desc
@subset.c
@


1.12
log
@checkpar() added
@
text
@/* Copyright (c) Colorado School of Mines, 2011.*/
/* All rights reserved.                       */

/* SUBSET: $Revision: 1.10 $ ; $Date: 2007/12/03 17:36:53 $	*/

#include "par.h"

/*********************** self documentation **********************/
char *sdoc[] = {
" 									",
" SUBSET - select a SUBSET of the samples from a 3-dimensional file	",
" 									",
" subset <infile >outfile [optional parameters]				",
" 									",
" Optional Parameters:							",
" n1=nfloats             number of samples in 1st dimension		",
" n2=nfloats/n1          number of samples in 2nd dimension		",
" n3=nfloats/(n1*n2)     number of samples in 3rd dimension		",
" id1s=1                 increment in samples selected in 1st dimension	",
" if1s=0                 index of first sample selected in 1st dimension",
" n1s=1+(n1-if1s-1)/id1s number of samples selected in 1st dimension	",
" ix1s=if1s,if1s+id1s,...indices of samples selected in 1st dimension	",
" id2s=1                 increment in samples selected in 2nd dimension	",
" if2s=0                 index of first sample selected in 2nd dimension",
" n2s=1+(n2-if2s-1)/id2s number of samples selected in 2nd dimension	",
" ix2s=if2s,if2s+id2s,...indices of samples selected in 2nd dimension	",
" id3s=1                 increment in samples selected in 3rd dimension	",
" if3s=0                 index of first sample selected in 3rd dimension",
" n3s=1+(n3-if3s-1)/id3s number of samples selected in 3rd dimension	",
" ix3s=if3s,if3s+id3s,...indices of samples selected in 3rd dimension	",
" 									",
" For the 1st dimension, output is selected from input as follows:	",
"       output[i1s] = input[ix1s[i1s]], for i1s = 0 to n1s-1		",
" Likewise for the 2nd and 3rd dimensions.				",
" 									",
NULL};

/*
 * AUTHOR:  Dave Hale, Colorado School of Mines, 07/07/89
 */
/**************** end self doc ********************************/

int
main (int argc, char **argv)
{
	int n1,n2,n3,
		n1s,n2s,n3s,
		id1s,id2s,id3s,
		if1s,if2s,if3s,
		*ix1s,*ix2s,*ix3s,
		i1s,i2s,i3s,
		i1,i2,i3;
	off_t offset;
	float *p,*ps;
	FILE *infp=stdin,*outfp=stdout;

	/* hook up getpar to handle the parameters */
	initargs(argc,argv);
	requestdoc(0);

	/* get optional parameters */
	if (!getparint("n1",&n1)) {
		if (efseeko(infp,(off_t) 0,SEEK_END)==-1)
			err("input file size unknown; specify n1\n");
		n1 = (int) (eftello(infp)/sizeof(float));
	}
	if (!getparint("n2",&n2)) {
		if (efseeko(infp,(off_t) 0,SEEK_END)==-1)
			err("input file size unknown; specify n2\n");
		n2 = (int) (eftello(infp)/(n1*sizeof(float)));
	}
	if (!getparint("n3",&n3)) {
		if (efseeko(infp,(off_t) 0,SEEK_END)==-1)
			err("input file size unknown; specify n3\n");
		n3 = (int) (eftello(infp)/(n2*n1*sizeof(float)));
	}
	ix1s = alloc1int(countparval("ix1s"));
	if ((n1s=getparint("ix1s",ix1s))==0) {
		free1int(ix1s);
		if (!getparint("id1s",&id1s)) id1s = 1;
		if (!getparint("if1s",&if1s)) if1s = 0;
		if (!getparint("n1s",&n1s)) n1s = 1+(n1-if1s-1)/id1s;
		ix1s = alloc1int(n1s);
		for (i1s=0,i1=if1s; i1s<n1s; i1s++,i1+=id1s)
			ix1s[i1s] = i1;
	}
	ix2s = alloc1int(countparval("ix2s"));
	if ((n2s=getparint("ix2s",ix2s))==0) {
		free1int(ix2s);
		if (!getparint("id2s",&id2s)) id2s = 1;
		if (!getparint("if2s",&if2s)) if2s = 0;
		if (!getparint("n2s",&n2s)) n2s = 1+(n2-if2s-1)/id2s;
		ix2s = alloc1int(n2s);
		for (i2s=0,i2=if2s; i2s<n2s; i2s++,i2+=id2s)
			ix2s[i2s] = i2;
	}
	ix3s = alloc1int(countparval("ix3s"));
	if ((n3s=getparint("ix3s",ix3s))==0) {
		free1int(ix3s);
		if (!getparint("id3s",&id3s)) id3s = 1;
		if (!getparint("if3s",&if3s)) if3s = 0;
		if (!getparint("n3s",&n3s)) n3s = 1+(n3-if3s-1)/id3s;
		ix3s = alloc1int(n3s);
		for (i3s=0,i3=if3s; i3s<n3s; i3s++,i3+=id3s)
			ix3s[i3s] = i3;
	}
        checkpars();


	/* check parameters */
	for (i1s=0; i1s<n1s; i1s++)
		if (ix1s[i1s]<0 || ix1s[i1s]>n1-1)
			err("ix1s[%d]=%d is out of bounds!\n",i1s,ix1s[i1s]);
	for (i2s=0; i2s<n2s; i2s++)
		if (ix2s[i2s]<0 || ix2s[i2s]>n2-1)
			err("ix2s[%d]=%d is out of bounds!\n",i2s,ix2s[i2s]);
	for (i3s=0; i3s<n3s; i3s++)
		if (ix3s[i3s]<0 || ix3s[i3s]>n3-1)
			err("ix3s[%d]=%d is out of bounds!\n",i3s,ix3s[i3s]);

	/* allocate space for input and output arrays */
	p = ealloc1float(n1);
	ps = ealloc1float(n1s);

	/* loop over 3rd dimension */
	for (i3s=0; i3s<n3s; i3s++) {

		/* loop over 2nd dimension */
		for (i2s=0; i2s<n2s; i2s++) {

			/* find beginning of input array */
/*			offset = (off_t) ((ix2s[i2s]+ix3s[i3s]*n2)*n1*sizeof(float));
	*/

		/* fix supplied by Raoul Beauduin */
			offset = (
					((off_t) ix2s[i2s])+
					((off_t) ix3s[i3s])*((off_t) n2))*((off_t) n1)*((off_t) sizeof(float));
		efseeko(infp,offset,SEEK_SET);

			/* read input array, if it exists */
			if (fread(p,sizeof(float),n1,infp)==n1) {

				/* loop over 1st dimension */
				for (i1s=0; i1s<n1s; i1s++) {
					ps[i1s] = p[ix1s[i1s]];
				}

			/* if input does not exist */
			} else {
				err("no input for ix2s[%d]=%d ix3s[%d]=%d!\n",
				i2s,ix2s[i2s],
				i3s,ix3s[i3s]);
			}

			/* write trace to output file */
			efwrite(ps,sizeof(float),n1s,outfp);
		}
	}
	return(CWP_Exit());
}
@


1.11
log
@added copyright statement
@
text
@d107 2
@


1.10
log
@cosmetic
@
text
@d1 4
a4 1
/* SUBSET: $Revision: 1.9 $ ; $Date: 2007/12/03 17:34:18 $	*/
@


1.9
log
@Raoul Beauduin found that subset broke at 8GB file size. The off_t casts
improve matters.
@
text
@d1 1
a1 1
/* SUBSET: $Revision: 1.8 $ ; $Date: 2003/08/19 21:24:44 $	*/
d130 1
@


1.8
log
@19 Aug 2003
@
text
@d1 1
a1 1
/* SUBSET: $Revision: 1.7 $ ; $Date: 1997/07/16 22:18:31 $	*/
d127 7
a133 2
			offset = (off_t) ((ix2s[i2s]+ix3s[i3s]*n2)*n1*sizeof(float));
			efseeko(infp,offset,SEEK_SET);
@


1.7
log
@Stew Levin fixes, a type change and an explicit cast of eftell
@
text
@d1 1
a1 1
/* SUBSET: $Revision: 1.6 $ ; $Date: 1996/09/06 17:29:41 $	*/
d50 1
a50 1
	long offset;
d60 1
a60 1
		if (fseek(infp,0L,2)==-1)
d62 1
a62 1
		n1 = (int) (eftell(infp)/sizeof(float));
d65 1
a65 1
		if (fseek(infp,0L,2)==-1)
d67 1
a67 1
		n2 = (int) (eftell(infp)/(n1*sizeof(float)));
d70 1
a70 1
		if (fseek(infp,0L,2)==-1)
d72 1
a72 1
		n3 = (int) (eftell(infp)/(n2*n1*sizeof(float)));
d127 2
a128 2
			offset = (long) ((ix2s[i2s]+ix3s[i3s]*n2)*n1*sizeof(float));
			efseek(infp,offset,0);
d149 1
a149 1
	return EXIT_SUCCESS;
@


1.6
log
@quieted -Wall complaint
@
text
@d1 1
a1 1
/* SUBSET: $Revision: 1.5 $ ; $Date: 1995/09/27 20:38:59 $	*/
d49 2
a50 2
		i1,i2,i3,
		offset;
d62 1
a62 1
		n1 = eftell(infp)/sizeof(float);
d67 1
a67 1
		n2 = eftell(infp)/(n1*sizeof(float));
d72 1
a72 1
		n3 = eftell(infp)/(n2*n1*sizeof(float));
d127 1
a127 1
			offset = (ix2s[i2s]+ix3s[i3s]*n2)*n1*sizeof(float);
@


1.5
log
@added   return EXIT_SUCCESS;
@
text
@d1 1
a1 1
/* SUBSET: $Revision: 1.4 $ ; $Date: 1995/04/25 15:15:25 $	*/
a33 1
/**************** end self doc ********************************/
d38 1
d40 1
@


1.4
log
@fixed RCS label
@
text
@d1 1
a1 1
/* SUBSET: $Revision: 1.8 $ ; $Date: 94/08/25 15:00:32 $	*/
d148 1
@


1.3
log
@begin selfdoc end selfdoc lines added
@
text
@d1 1
a1 1
/* subset - select a subset of sample from a 3D file */
@


1.2
log
@new selfdoc installed
@
text
@d5 1
d34 1
@


1.1
log
@Initial revision
@
text
@d1 1
a1 28
char *sdoc =
"SUBSET - select a SUBSET of the samples from a 3-dimensional file\n"
"\n"
"subset <infile >outfile [optional parameters]\n"
"\n"
"Optional Parameters:\n"
"n1=nfloats             number of samples in 1st dimension\n"
"n2=nfloats/n1          number of samples in 2nd dimension\n"
"n3=nfloats/(n1*n2)     number of samples in 3rd dimension\n"
"id1s=1                 increment in samples selected in 1st dimension\n"
"if1s=0                 index of first sample selected in 1st dimension\n"
"n1s=1+(n1-if1s-1)/id1s number of samples selected in 1st dimension\n"
"ix1s=if1s,if1s+id1s,...indices of samples selected in 1st dimension\n"
"id2s=1                 increment in samples selected in 2nd dimension\n"
"if2s=0                 index of first sample selected in 2nd dimension\n"
"n2s=1+(n2-if2s-1)/id2s number of samples selected in 2nd dimension\n"
"ix2s=if2s,if2s+id2s,...indices of samples selected in 2nd dimension\n"
"id3s=1                 increment in samples selected in 3rd dimension\n"
"if3s=0                 index of first sample selected in 3rd dimension\n"
"n3s=1+(n3-if3s-1)/id3s number of samples selected in 3rd dimension\n"
"ix3s=if3s,if3s+id3s,...indices of samples selected in 3rd dimension\n"
"\n"
"For the 1st dimension, output is selected from input as follows:\n"
"      output[i1s] = input[ix1s[i1s]], for i1s = 0 to n1s-1\n"
"Likewise for the 2nd and 3rd dimensions.\n"
"\n"
"AUTHOR:  Dave Hale, Colorado School of Mines, 07/07/89\n"
"\n";
d5 33
d53 1
a53 1
	askdoc(0);
@
