.TH sub 1  "Tue Jul 27 1993" "Seismic Unix"
.ad b
.SH NAME
sub \ - examine and modify an SEGY data stream
.SH SYNOPSIS
.B sub \fIscript\fR
.SH DESCRIPTION

.B Sub
accepts as input an SEGY data stream
(available at \fBstdin\fR) and a file containing
programming commands for \fBsub\fR's internal scripting language,
\fBshuffle\fR.
.B Sub
usually produces as output an SEGY data which has been modified
in accordance with the script program
(but see \fBTYPICAL USAGE\fR, below).

.SH "STRUCTURE OF THIS MANUAL PAGE"

.B Sub
is a relatively complex program and has a relatively complex
manual "page."
The remainder of this document is divided into
.TP 10
TYPICAL USAGE
.TP 10
SCRIPT STRUCTURE
The major features of a \fBsub\fR script.
.TP 10
SHUFFLE
The syntax and semantics of \fBsub\fR's internal
scripting language,
.TP
\fRSome Administrative Sections\fR
Notes on bugs and planned improvements,
acknowledgements,
\fIetc\fR.


.SH "OTHER AVAILABLE DOCUMENTATION"

We have compiled a set of tutorial examples.
Look in \fI~usp/doc/sub\fR or ask your local \fBUSP\fR guru.
A set of sample scripts:
we strongly recommend that you look at these.

.SH "TYPICAL USAGE"

One use of \fBsub\fR is as a data \fIfilter\fR in an SEGY data stream.
In this role,
.B sub
accepts an SEGY data element (either a line header or a record),
alters it as instructed by a \fBshuffle\fR script,
and sends the data onward via \fBstdout\fR
to either another process or a file.

A somewhat different role is as the \fIend\fR
of an SEGY data stream.
In this mode,
.B sub
reads an SEGY data stream but it emits some other kind
of information,
typically formatted text and numbers.

It is also, of course, practicable to use \fBsub\fR
as a sort of C-like \fIbasic\fR interpreter.

Each of these usages is demonstrated by an example
in the example collection mentioned above.

.SH "SCRIPT STRUCTURE"

The contents of a script file is a series of function definitions
written in \fBshuffle\fR,
an internal C-like language.
Each function definition has the structure
.RS
.na
.nf
\fBfunc\fR \fIFunctionName\fB() {
	\fI ... \fBshuffle\fI statements ...
\fB}\fR

\fBfunc\fR \fIAnotherFunctionName\fB() {
	\fI ... \fBshuffle\fI statements ...
\fB}\fR
.ad
.fi
.RE
where \fIFunctionName\fR is the function's name.
Functions can return values of any type.
There can be any number of functions in a script.

.B Sub
recognizes three special function names,
each of which is called in response to some state of
the data read from standard input.
.RS
.TP 20
.B Begin()
is called before anything is read from standard input.
.TP 20
.B OnTrace()
is called whenever a trace has been read
(a \fItrace\fR consists of a trace header
and the trace time series).
The contents of the trace
are available in the global
variable \fBTr\fR.
.TP 20
.B End()
is called after end-of-file has been encountered
on standard input.
.RE

.SH SHUFFLE

.SS "Names in Shuffle"

Variable and function names are limited by the same
restrictions as \fBC\fR.
Names are case-independent.
The only time \fBshuffle\fR retains alphabetic case
is in the contents of \fIstrings\fR.

.SS "Variables and Types"

.B Shuffle
variables are always regular (named) variables.
\fBRegular variables are always global\fR
and are created simply
by being assigned to.

The type of a variable is simply the type of
whatever was last assigned to it.
The possible contents of a variable are:
.RS
.TP 15
.I Nothing
a value and a type; it is
the value of a variable which has not been given a value,
.TP 15
.I double
a double-precision floating-point value
(the only kind of number),
.TP 15
.I string
a sequence of ASCII characters
(internally terminated by an ASCII zero),
.TP 15
.I LineHeader
an SEGY line header,
.TP 15
.I Trace
an SEGY trace
(consisting of a trace header and a trace time series)
.TP 15
.I stream
a pointer to an input or output stream
(such as \fBstdout\fR or a value returned
by \fBfopen()\fR or \fBpopen()\fR)
or
.TP 15
.I array
an array of values of any of these types.
.RE
.LP
An array's elements need not all have the same type.
An array element may itself contain an array.
Array subscripts start at zero (like C) and go up
(although you are free to pretend that they start at one).
Referring to a subscripted element
(such as \fIx[10]\fR or \fIz[i][j][k]\fR)
causes all intermediate elements which do not
already exist to be created
and assigned the empty type, \fBNothing\fR.

.SS "Function Arguments"

\fBFunction arguments are disabled\fR at present.
We have the necessary mechanisms in place but have not yet
settled on a syntax.
This shortcoming will be rectified
and \fBshuffle\fR will support argument-passing
in a versatile, simple way.

.SS "Comments"

.B Shuffle
supports three styles of comments:
.RS
.TP 10
shell
from \fB#\fR to end-of-line,
.TP 10
C
everything from \fB/*\fR to \fB*/\fR,
and
.TP 10
C++
everything from \fB//\fR to end-of-line.
.RE
Comments cannot be nested.
Don't look for trouble.

.SS "Syntax"

.B Shuffle
uses semicolons and curly braces in the same way C does.
All simple statements should end with semicolons.
Block statements should be wrapped in curly braces
(and do not have a teminating semicolon).
.I "Block statements"
includes function definitions.

The operators `=', `*', `/', `-', and `+'
are available for operating on numeric values.
Also available are `%' (for modulo) and `^'
(for raised-to-the-power-of).
The increment and decrement operators, `++' and `--',
are available in both their postfix and prefix forms.

Only `=' and `+' are available for strings,
with `+' denoting concatenation.
Strings cannot be mixed with other types
at present;
thus the expression "3" + 7 is illegal
(and will be caught by the compiler whenever possible).

The comparison operators
`==', `>', `<', `>=', `<=', and `!='
are implemented for numeric comparisons.
No other types may be used as arguments to these operators
at present.

There is no comma operator.
There are no pointers
and there are no address-related operators.

.SS "Function Definition"

Functions are identified by a leading \fBfunc\fR.
Functions must be defined before they are used.
There are three different ways to return from a function
(same as \fBC\fR):
.RS
.TP 20
\fBreturn(\fIexpr\fB)\fR
return the value \fIexpr\fR,
.TP 20
\fBreturn\fR
return the value 0, or
.TP 20
\fIfall off the end\fR
equivalent to \fBreturn(0)\fR.
.RE

.SS "Control Flow"

.B Shuffle
supports C's \fBif(\fItest\fB)\fR and \fBif(\fItest\fB)...else\fR
constructs.
Conditionals may be nested and stacked exactly as in C.

.B Shuffle
also supports \fBwhile(\fItest\fR)\fR
and the three-element \fBfor(\fIinit\fB;\fItest\fB;\fIincr\fB)\fR
looping control constructs.

.B Break
and
.B continue
are not yet supported.

.SS "Storage Management"

Storage is managed automatically
and all assignments are
\fIassignments by value\fR,
which means that a new copy of the data is used.
There is no notion of pointers or of explicit memory management
by the user.

.SS "Member Access"

The \fBLineHeader\fR and \fBTrace\fR types support
a structure-like convention for access to their individual
data elements (including the trace data samples).
If, for example, \fIlineH\fR holds a line header,
\fIlineH.\fBNumSmp\fR provides (read or write) access
to the number-of-samples field.

String-valued entries are accessible just as numeric ones are,
with the qualification that assignment \fIinto\fR a header field
occurs from right-to-left.
If, for example, we assign a string shorter than the SEGY field
into that field,
the string will appear
right-adjusted and padded on the left with blanks.
(This unusual convention is ransom to history.)

In addition to the header fields,
the trace samples can be accessed through a pseudo-array.
If \fItrace\fR holds a trace,
\fItrace.\fBSeries[\fIi\fB]\fR
will access the \fIi\fRth sample.

See the example collection mentioned earlier.

.SS "Built-in Elementary Functions"
.TP 10
.B sin(x)
.TP 10
.B cos(x)
.TP 10
.B atan(x)
.TP 10
.B log(x)
.TP 10
.B log10(x)
.TP 10
.B exp(x)
.TP 10
.B sqrt(x)
.TP 10
.B int(x)
.TP 10
.B nint(x)
.TP 10
.B abs(x)
.SS "Miscellaneous Functions"
.TP 10
.B time()
returns the current wall clock time in (double) seconds
since 0:00 GMT, January 1, 1970.
Granularity is system dependent
(see \fBgettimeofday(2)\fR).
.TP 10
.B random()
returns a random number in (I think)
the half-open interval [0,1)
(see \fBrandom(3)\fR).
.TP 10
.B sbreak()
returns the top of the process' data area (as a number).
(Only useful purpose known to me is to check for memory leaks
while debugging \fBsub\fR.)
.TP 10
.B exit(x)
causes \fBsub\fR to teminate and return the value \fIx\fR
to the shell that invoked it.
(By convention \fBexit(0)\fR denotes success and
any other value indicates failure.
A script which exits by falling off the end
returns \fB0\fR.)
.TP 10
.B strlen(s)
returns the number of characters in the string \fIs\fR
(actually a synonym for \fBsize()\fR).
.TP 10
.B size(x)
returns the size of \fIx\fR
(this might be useful in detecting bad header sizes, \fIetc\fR).
If \fIx\fR is a string
the returned value is the length of the string
(the trailing nul is not counted).
If \fIx\fR is an SEGY object
the returned value is the size in bytes.
If \fIx\fR is an array of floating-point numbers
(such as an SEGY trace)
the returned value is the number of entries in the array.
If \fIx\fR is an array
the returned value is the number of elements.
Otherwise,
the returned value is 0 if \fIx\fR has the type \fBNothing\fR
and 1 in all the remaining cases..
.TP 10
.B strtonum(s)
interprets the contents of \fIs\fR
(which had better be a string)
as a number and returns its value.
If \fIs\fR does not at least begi with a legitimitate numeric value,
this function will break the program.
.TP 10
.B "floattostr(f, fmt)"
converts the value of \fIf\fR,
as a floating-point number,
into a string using the \fBprintf(3)\fR format
in the string \fIfmt\fR.
\fIFmt\fR should contain a floating-point format
string such as "%g", \fIetc\fR.
.TP 10
.B "inttostr(i, fmt)"
converts the value of \fIf\fR,
as n integer,
into a string using the \fBprintf(3)\fR format
in the string \fIfmt\fR.
\fIFmt\fR should contain an integer format
string such as "%d", \fIetc\fR.
.SS "Input/Output"
.TP 10
.B output(obj)
writes \fIobj\fR to \fBstdout\fR:
\fIobj\fR must be either a LineHeader or a Trace.
.TP 10
.B print(a,b,...)
writes formatted forms of the arguments \fIa\fR, \fIb\fR,
\fIetc\fR to \fBstderr\fR.
.TP 10
.B "popen(cmd, mode)"
opens a pipeline to the process \fIcmd\fR
in the direction (reading or writing) specified by \fImode\fR,
and returns a file pointer value suitable for passing to
\fBfprint\fR, \fIetc\fR.
.I Cmd
is executed to create the target process and can be any legal
\fBsh\fR(1) command string.
.I Mode
should be "w" for writing to the \fIcmd\fR
and "r" for reading from the \fIcmd\fR
(the quotes are required).
.TP 10
.B pclose(stream)
closes \fIstream\fR
(which must be a value returned by an earlier call of \fBpopen()\fR).
This call closes the i/o stream and waits for the remote process
to exit
(see \fBpopen\fR(3)).
.TP 10
.B "fopen(filename, mode)"
opens the file specified by the path \fIfilename\fR
for i/o in the direction specified by the string \fImode\fR
and returns a file pointer value suitable for passing to
\fBfprint\fR (below).
\fIMode\fR should be one of "r", "w", "a", "r+", "w+",
or "a+" where the quotes are required
(the first two are by far the most common);
see \fBfopen(3)\fR for more details.
.TP 10
.B fclose(stream)
closes \fIstream\fR
(which must be a value returned by an earlier call of \fBfopen\fR).
.TP 10
.B fflush(stream)
writes any buffered data to \fIstream\fR.
.TP 10
.B "fprint(stream, a, b, ...)"
writes formatted forms of \fIa\fR, \fIb\fR, \fIetc\fR,
to \fIstream\fR.
.LP
.B Popen()
and
.B pclose()
provide very substantial flexibility to scripts.
The user should carefully note, however,
that many programs
(such as \fBxgraph(1)\fR which is used in one of the examples)
do not do anything interesting until they have read everything
available from \fBstdin\fR.
These programs will not see end-of-file on \fBstdin\fR
until the \fBshuffle\fR script has called \fBpclose()\fR.
.LP
A child process which is \fBpopen\fR'd in mode "w" shares
\fBstdout\fR with the parent process
(\fBsub\fR in this case).
Thus a child process invoked in this manner can be used as
an output filter for the parent process.
Values written by the child process to its \fBstdout\fR
will emerge \fIas though\fR from the parent process' \fBstdout\fR.
A similar mechanism works for read pipelines.
.SS "Built-in Trace Operations"
.TP 10
.B "trstats(tr)"
computes some useful statistics about the trace \fItr\fR.
.B Trstats
return value is an array of values.
Starting with the \fB0\fRth member,
this arrays holds
the minimum of the sample values,
the maximum of the sample values,
the average of the sample values,
and 
the average of the squares of the sample values.
.TP 10
.B "tradd(tr, offset)"
returns a new trace which differs from the input trace, \fItr\fR,
by having the value \fIoffset\fR added to all of its samples.
The contents of \fItr\fR are not changed.
.TP 10
.B "trset(tr, value)"
returns a new trace which differs from the input trace, \fItr\fR,
by having the value \fIvalue\fR or all of its samples.
The contents of \fItr\fR are not changed.
.SS "Predefined Values"
.TP 10
.B pi
3.14159265358979323846
.TP 10
.B enatural
2.71828182845904523636
.TP 10
.B gamma
0.57721566490153286060
(Euler's constant - for the snobs in the audience)
.TP 10
.B rad2deg
57.29577951308232087860
(degrees per radian)
.TP 10
.B golden
1.61803398874989484820
(the golden mean - for the esthetes)
.TP 10
.B nothing
the empty value, a pile of ashes,
an Amoco career.
.TP 10
.B hardware
a string name for the hardware upon which we are running
(such as "sun", "cray").

.SH "MISSING FEATURES THAT WILL BE SUPPLIED SOMEDAY"
.LP
.B Shuffle
has no access to command line arguments.

There is no file-include mechanism.
There should be one that searchs default directories, etc.

The \fIop=\fR operators are missing.

\fBBreak\fR and \fBcontinue\fR are missing.

Function arguments are not available.

There is no provision for user error handling.

There is no way to access the historical line header.

Comparison operators should be extended to string and empty
types.

.SH ACKNOWLEDGEMENTS

.B Sub
is descended from a programmable calculator, \fBhoc\fR,
discussed in
\fIThe Unix Programming Environment\fR
by Brian W. Kernighan and Rob Pike
(1984, Prentice-Hall).
Using \fBhoc\fR as a starting point was
very helpful.

.SH BUGS
.LP
Is it better to have a script language that is very similar to
a language one knows (like \fBC\fR) but not identical,
or is it better to have something entirely different
(like \fBlisp\fR)?
.LP
.B Sub
won't do everything anyone can dream up.
.SH SEE ALSO
scan(1)
.SH AUTHOR
.nf
Martin L. Smith
New England Research, Inc.
martin@ner.com
.fi
