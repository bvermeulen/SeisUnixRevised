
Dear Jack.

I have been using SU extensively for processing deep seismic data. I have also developed a few programs
than can be usefull. I have also included a few modifications to existting SU modules which you might consider.
The data I have been dealing with required crooked line processing. Therefore I have develloped a small
package to deal with this problem. 
In the development of some of my complementary software to SU, I included 5 new headers in the segy.h
the following.


        short ifflg;    /* amplitude recovery method code:
                                code    flag a trace to avoid processing
                                0       process this trace      
                                1       Do not prcess this trace*/

        int  cdpx;      /* X cdp coordinate */

        int  cdpy;      /* Y cdp coordinate */

        int  nstatsrc;  /* station number of source */

        int  nstatrec;  /* station number of receiver */



the last 2 are usefull, because they speed up the process of geometry building. Some recording systems like
SERCEL include the station number of the receiver and the source in the segy headers. The the coordinates
can be incorporated in the headers just by reading the topographers data logs. I did code a small program
that does this taking into  account that nstatsrc  and nstatrec aree defined. The program: susetxyz is included.

My experience with suwind, when one deals with large data sets is that the selectively reading ensambles using 
suwind is slow. SU is much faster if the seismic data is stored as one file, one gather (ensamble). The files can be labeled by their ffid (fldr in  SU), or by their cdp number. susplit breaks up a dataset into files acoording to a
key which is  specified by the user.

Note that I have included a short ifflg trace header in the segy.h the reason is that this header allows to 
use a suIF and suENDIF for selectively processing traces, without the need of extracting them from  the data file. 
This suIF and suENDIF work similar to the IF statements of  PROMAX. 

suIF sets the flag (trace header ifflg) this is passed  to thee following module, which can be sugain, 
sufilter, etc. The only drawbackk is that this module needs to have an if statment before the main 
trace  do loop.


        /* Main loop over traces */
        do {
             if ( !tr.ifflg ) {

                /* trace processing  */

             }
             puttr(&tr);
        } while (gettr(&tr));


I have already introduced this in sugain and sufilter which I include in the atached packet.

A few modifications which I found usefull. 

1) For deep seismic data itt is useful that the gain fuction be constant after a certain time, otherwise the 
   amplitudes become unreasonably high. A tw parameter has been included so that beyond this time the gain is 
   constant.
2) To atenuate localized noise within a certain time window (like the harmonics of Vibroseis). A 
   starting and ending time parameters have been included in the code the t0 and t1. 
3) sunmo requires that the parameters tnmo, vnmo and cdp be specified. This can be done alternatively using
   by using a velocity file in su format. The  velocity stored in a su file has the cdp values in the headers.
   The ntr header value of the sufile needs to be defined because it iss used to alocate memory.
   Therefore a velfile parameter has been added to the  sunmo.

As part of quality control trace editing is useful, thus, a moddule suomit is included. It uses a text (ascii) file
where traces are  addressed by two keywords (headers).

format of  the ascii file:

   suomit <stdin >stdout key0=fldr key1=tracf iomit=0 infile=ascii_file  

  key1  key2  num traces                                    
   21     22       1                 trace 22 of fldr 12 is omited from the dataset 
   22     23       140               from trace 23 to trace 163 (23+140) of fldr 22 aree omited  
   31     15       4                 in fldr 31 traces 15,16,17 and 18 are omited.


In some cases NaN are introduced in the data by the recording system. suNaN takes care of this problem.
hope these few point are  useful for SU.

Best wishes

Ramon

Dr. Ramon Carbonell
Dept. of Geophysics
CSIC-Inst. of Earth  Sciences "Jaume Almera"
Lluís Solé i Sabarís s/n
08028 Barcelona

Tel: 3493 4095410
Fax: 3403 4110012
email: rcarbo@ija.csic.es

 






 Makefile

 segy-barna.h

Modified su segy.h file that includes definitions for   


        int ifflg;      /* code flag a trace to avoid processing
                                0       process this trace      
                                1       Do not process this trace */

        int  cdpx;      /* X cdp coordinate */

        int  cdpy;      /* Y cdp coordinate */

        int  nstatsrc;  /* station number of source */

        int  nstatrec;  /* station number of receiver */



******* suIF.c  **************************************************************

This is an equivalent moddule to the IF in Promax. It marks traces that aree specified by one or two 
trace header words. It sets a trace header called ifflg (if flag) to 1 which means, pass the trace one, but don't processed.
However, the modules called inbetween suIF  and suENDIF need to have within the trace processing loop 
the following:

        /* Main loop over traces */
        do {
             if ( !tr.ifflg ) {

                /* trace processing  */
            
             }
             puttr(&tr);
        } while (gettr(&tr));



suIF  - Marks the traces identifiedd by the values of the key0, key1            
         headers which are specified by ky0, ky1                                      
            

 suIF <stdin >stdout [optional parameters]                                            
      

 Rquired parameters:
       key0=fldr           Primary key to select  traces                              
           
       key1=offset       Secondary key to select the traces                           
     
       ifmode=0            0=include  1=exclude                                       
                
       lstfl=0                 0=range 1=list                                         
                        
       ky0=112,134       Values of the key0 header of traces                          
    
       ky1=10000,20000   Values of the key1 header of traces                          


********* suENDIF.c

 SUENDIF  - Closes the IF opened by SUIF resseting the processing header   
         tr.ifflg to 0                                                               
                                

 suENDIF <stdin >stdout [no parameters]                                             

********* suNaN.c

           
 SUNaN - Check for unreasonable values of amplitudes           
         Edits traces that have amplittudes that a not finite  

 sunrm <stdin >stdout                                          
 
 Required parameters:
        NONE                                            


********* sufilter.c

This is  a  modified version of sufilter which checks if traces have been marked by suIF. This means
that the trace.ifflg trace header equals 1. It only processes (filters) traces that have trace.ifflg=0. Traces with
trc.ifflg=0 are passed on without processing. 

I have also included t0 and t1 in case one would like to filter only a window of the data

 SURFILTER - applies a zero-phase, sine-squared tapered filter

 suRfilter <stdin >stdout [optional parameters]         

 Required parameters:                                         
       if dt is not set in header, then dt is mandatory        

 Optional parameters:
       t0=0                    Starting of the  window to filter    ! to apply a filter  to a time window      
       t1=TMAX                 Ending time  window                  ! to apply a filter  to a time window
       f=f1,f2,...             array of filter frequencies(HZ) 
       amps=a1,a2,...          array of filter amplitudes
       dt = (from header)      time sampling interval (sec)        

 Defaults:f=.10*(nyquist),.15*(nyquist),.45*(nyquist),.50*(nyquist)
                        (nyquist calculated internally)
          amps=0.,1.,...,1.,0.  trapezoid-like bandpass filter

 Examples of filters:
 Bandpass:   sufilter <data f=10,20,40,50 | ...
 Bandreject: sufilter <data f=10,20,30,40 amps=1.,0.,0.,1. | ..
 Lowpass:    sufilter <data f=10,20,40,50 amps=1.,1.,0.,0. | ...
 Highpass:   sufilter <data f=10,20,40,50 amps=0.,0.,1.,1. | ...
 Notch:      sufilter <data f=10,12.5,35,50,60 amps=1.,.5,0.,.5,1. |..

 Notes: If ky1=0 tthe module filters all the traces in the file, What  
        the original sufilter did.
        If t0 and t1 are not speciffied, the module filters the entire
        trace                                                          

********* sugain.c


I have also included a maximum time to gain beyond it the gain is constant.  This is specially handy when processing
log data (deep  seismix).

 SUGAIN - apply various types of gain to display traces                
                                                                       
 sugain <stdin >stdout [optional parameters]                           
                                                                       
 Required parameters:                                                  
       none (no-op)                                                    
                                                                       
 Optional parameters:                                                  
       panel=0         =1 gain whole data set (vs. trace by trace)
       tpow=0.0        multiply data by t^tpow                         
       tw=tmax        limit tpow, epow to a maximum time       ! Beyond this time the gain is constant and equal to the last one computted
       epow=0.0        multiply data by exp(epow*t)                    
       gpow=1.0        take signed gpowth power of scaled data         
       agc=0           flag; 1 = do automatic gain control             
       gagc=0          flag; 1 = ... with gaussian taper               
       wagc=0.5        agc window in seconds (use if agc=1 or gagc=1)  
       trap=none       zero any value whose magnitude exceeds trapval  
       clip=none       clip any value whose magnitude exceeds clipval  
       qclip=1.0       clip by quantile on absolute values on trace    
       qbal=0          flag; 1 = balance traces by qclip and scale     
       pbal=0          flag; 1 = bal traces by dividing by rms value   
       mbal=0          flag; 1 = bal traces by subtracting the mean    
       scale=1.0       multiply data by overall scale factor           
       bias=0.0        bias data by adding an overall bias value
       jon=0           flag; 1 means tpow=2, gpow=.5, qclip=.95        
        verbose=0       verbose = 1 echoes info
                                                                       
        tmpdir=  if non-empty, use the value as a directory path
                 prefix for storing temporary files; else if the
                 the CWP_TMPDIR environment variable is set use
                 its value for the path; else use tmpfile()
                                                                       
 Operation order:                                                      
                                                                       
 out(t) = scale * BAL{CLIP[AGC{[t^tpow * exp(epow * t) * ( in(t)-bias )]^gpow}]}
                                                                       
 Notes:                                                                
        The jon flag selects the parameter choices discussed in
        Claerbout's Imaging the Earth, pp 233-236.

        Extremely large/small values may be lost during agc. Windowing  
        these off and applying a scale in a preliminary pass through
        sugain may help.

        Sugain only applies gain to traces with tr.mark=0. Use sushw,
        suchw, suedit, or suxedit to mark traces you do not want gained.
        See the selfdocs of sushw, suchw, suedit, and suxedit for more
        information about setting header fields. Use "sukeyword mark" 
        for more information about the mark header field.


********* sunmo.c

The modification I have done is to include a  velfile parameter, a velocity file in su 
format can specifiied taking into acount that the cdp fields have to be specified



 NMO - NMO for an arbitrary velocity function of time and CDP        
                                                                             
 nmo <stdin >stdout [optional parameters]                                    
                                                                             
 Optional Parameters:                                                        
 tnmo=0         NMO times corresponding to velocities in vnmo        
 vnmo=2000              NMO velocities corresponding to times in tnmo        
 velfile=              Velocity file name in su format (see notes)          !  su velocity file
 anis1=0                two anisotropy coefficients making up quartic term   
 anis2=0                in traveltime curve, corresponding to times in tnmo  
 cdp=                   CDPs for which vnmo & tnmo are specified (see Notes) 
 smute=1.5              samples with NMO stretch exceeding smute are zeroed  
 lmute=25               length (in samples) of linear ramp for stretch mute  
 sscale=1               =1 to divide output samples by NMO stretch factor    
 invert=0               =1 to perform (approximate) inverse NMO              
 ixoffset=0             do not consider cross-line offset                    
                       =1 read cross-line offset from trace header          
                                                                           

********* suomit.c

A small program to edit traces from a dataset so that bbad traces can be omited.
Requires an imput ascii file 

 SUOMIT - omit traces from the file                                           
                                                                               
 suomit <stdin >stdout key0=fldr key1=tracf iomit=0 infile=ascii_file         
                                                                               
 iomit=0       0=omit traces  1=pass traces                                   
 infile=        ascii file of values    with the following format              
                                                                               
  hey1  key2  num traces                                    
   21     22       130                             
   22     23       140                                       
   24     25       140                                      
{mongo} /usr/local > 


********* susetheader.c

 SUSETHEADER - sets the value of a headerword  (key2) if the headers key0 and 
               key1 correspods to the specified in the file                   
                                                                               
  susetheader <stdin >stdout key0=fldr key1=tracf key2=cdp infile=ascfl       
                                                                               
 infile=        ascii file of header  values                                   
                                                                               
  hey0  key1       key2                                                       
   21     22       130                                                        
   22     23       140                                                        
   24     25       140                                                        
  Notes:   This programs works like:                                          
           If the incoming trace hase the header valuess of key0 and key1     
           equal  to the ones specified in the infile sets key2 to the value  
           specified in the file                                              


********* susetxyz.c

 SUSETGEOM - Incorporates to the headers the coordinates for the source   
         and the receiver station location.                                
                                                                           
   sushw <stdin > stdout     infile=ascii_file                             
                                                                           
 infile=        ascii file of values    with the following format          
                                                                           
                                                                          
 station number       x            y          z                           
        1     647346.81250    4123017.25000  51.66930                     
        2     647358.03750    4123050.00000  52.23436                     


********* susplit.c

This program splits a file into several files. For example:

susplit <data.su  key=fldr

This creates one  file for each fldr. The file name is the fldr number. 
It is specially usefull, when dealing with large data sets. Having the shots separattedd in to 
files, makes processing faster as one does not require to use suwind.  However,
it requires somee bookeeping.

It can be also use for sorting, because it would separate each cdp into a different file.

 SUSPLIT - Creates files with traces containing the same header word specified    
                                                                               
   susplit <stdin                                     
                                                                               
  key=fldr             

