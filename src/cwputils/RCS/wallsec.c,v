head	1.3;
access;
symbols;
locks; strict;
comment	@ * @;


1.3
date	2001.07.13.15.59.53;	author john;	state Exp;
branches;
next	1.2;

1.2
date	95.06.01.13.39.46;	author john;	state Exp;
branches;
next	1.1;

1.1
date	95.02.14.10.38.58;	author john;	state Exp;
branches;
next	;


desc
@wallsec.c
@


1.3
log
@added Tony Kocurko's fix.
@
text
@/*********************** self documentation **********************/
/*****************************************************************************
WALLSEC - Functions to time processes

wallsec		return elapsed time (wall clock time) in seconds

******************************************************************************
Returned:	elapsed time in seconds

******************************************************************************
Notes:
wallsec:
Uses UNIX system calls


******************************************************************************
Author:  Dave Hale, Colorado School of Mines, 04/29/89
*****************************************************************************/
/**************** end self doc ********************************/

#ifdef __GNUC__
#	include <time.h>
#else
#	include <sys/time.h>
#endif

float
wallsec()
/*****************************************************************************
return elapsed time (wall clock time) in seconds
******************************************************************************
Returned:	elapsed time in seconds
******************************************************************************
Author:  Dave Hale, Colorado School of Mines, 04/29/89
*****************************************************************************/
{
#ifdef __GNUC__
	static int    firsttime = 1;
	static time_t firstsec     ;

	if ( firsttime ) {
		firsttime = 0;
		firstsec  = time ((time_t *)NULL);
		return (0.0);
	} else
		return ((float)(time((time_t *)NULL) - firstsec));
#else
	struct timeval tp;
	struct timezone tzp;
	static int firsttime=1;
	static long firstsec,firstusec;
	long sec,usec;

	gettimeofday(&tp,&tzp);
	if (firsttime) {
		firsttime=0;
		firstsec = tp.tv_sec;
		firstusec = tp.tv_usec;
		return(0.0);
	} else {
		sec = tp.tv_sec-firstsec;
		usec = tp.tv_usec-firstusec;
		return((float)sec+1.0e-6*(float)usec);
	}
#endif
}
@


1.2
log
@changed documentation
@
text
@d21 5
a25 1
#include <sys/time.h>
d37 11
d65 1
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
TIME - Functions to time processes
@
