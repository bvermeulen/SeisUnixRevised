 
RGPS: Reflection Geometry Parameter Solver
Copyright (c) Shelby Worley 1991
All rights reserved.
 
-----------------------------------------------------------------------------
I. What is the program for?
 
    This program was written to implement a new approach to the most simple
non-trivial reflection problem - a dipping plane reflector with separated
source and receiver on a horizontal surface.  The user specifies values for
four of the following eleven parameters, which are divided into two
categories:
 
Circle Parameters
alpha:  the dipping angle of the reflector. By convention, it is positive
        if the z-coordinate increases as the x-coordinate increases along
        the reflector. Alpha will be in the range (-90,90).
phi:    the angle between the raypath and a normal to the reflector.
        Phi will be in the range [0,90).
h:      One half the separation between the source and receiver.
        H will always be positive.
dx:     The offset of the x-coordinate of the specular reflection point
        and the x-coordinate of the midpoint between source and receiver.
        Dx will be positive if the x-coordinate of the specular point
        is smaller than the x-coordinate of the source-receiver midpoint.
z:      The depth of the specular reflection point.
vt:     The length of the specular reflection path between source and
        receiver.
 
Shift Parameters
xs:     The location of the "source".  For convenience, this is assumed to
        have a smaller x-coordinate than the receiver.
xg:     The location of the "receiver".  This value will always be larger
        than xs, so that  the equation  2h=xg-xs  is always true.
y:      The source-receiver midpoint.
x:      The x-coordinate of the specular reflection point.
z0:     The depth (z-coordinate) of the reflector under the origin
        of the x-coordinates.  Thus, the equation of the reflector is
        z = z0 + x*tan(alpha). Z0 may be negative if the plane of the
        reflector extends above the surface at the origin.
 
    With these 11 parameters, 330 possible sets of four parameters could
be chosen. The program will attempt to calculate the value for the other
seven parameters.
    It may fail for one of several reasons:
 
1. The selected input parameters may not be independent.
    For example, the equation above shows that the set {z,z0,x,alpha} cannot
be independent.  This will occur for 56 sets of four parameters.
 
2. The values specified may represent an impossible situation.
    For example, h=100 vt=50 is impossible.  It says that there is a path
of length 50 between two points 200 feet apart!  In this case, an error
message will be generated.
 
3. The problem for the parameters specified has not yet been solved.
    This will occur only for 7 cases out of a possible 274.  These case
will be discussed below.
 
    This means that for 267 cases, if the data is good, the program will
print out one (or more) sets of values for all parameters consistent with
the input values.
    For further information see section IX below.
 
---------------------------------------------------------------------------
II. How do you use the program?
 
    Calling the program with no arguments will produce a syntax summary.
At the least, you can just specify values for four parameters.
WARNING:  Do not put spaces around the equal sign, as that will confuse
the command line parser. For example:
 
        rgps alpha=10 phi=45 y=500 z0=200
 
    You may vary one parameter in a loop in one of two ways.  The first is to
list the values you wish to use separated by commas (only!).  The line below
will produce three outputs:
 
        rgps z0=0 phi=80 vt=200,2000,6000 h=50
 
    The second is to designate a variable parameter "varparm", and give it
values for any three loop specifiers: fp=first parameter value,
lp=last parameter value, np=number of values to output, dp=fixed increment
at each step.  The line below will produce 5 outputs:
 
        rgps xs=100 vt=6000 alpha=22 varparm=xg fp=400 np=5 dp=200
 
    You may specify angles in radians by setting the 'alfu' and 'phiu'
variable equal to 'rad'.
 
        rgps alpha=.1 xs=100 z0=200 h=40 alfu=rad
 
    You may restrict the list of output variables by listing the variables
you want to be on you output after 'outp'.  The line below will cause only
the variables x, phi, and z0 to be printed out.
 
        rgps alpha=10 h=50 z=300 dx=40 outp=x,z0,phi
 
    Finally, since command lines may be long and you may notice a typographical
error earlier in the line.  An earlier parameter my be despecified by setting
it to 'null'.  The uses of 'null' are specified in the syntax summary.
Any later value of a parameter will override an earlier value.  For example,
 
        rgps alpha=20 varparm=alpha dp=3 np=10 fp=10 alpha=null varparm=phi
xs=100 z0=200 h=50 z0=300
 
        is equivalent to
 
        rgps xs=100 z0=300 h=50 varparm=phi dp=3 np=10 fp=10
 
---------------------------------------------------------------------------
III.  How does one compile the source code?
 
    RGPS is a self contained ANSI C program.  It has been compiled on a
NEXT workstation and an IBM-AT compatible personal computer.  For a
UNIX system,
 
    % cc rgps.c
 
will create it.
    Compiling on an MS-DOS machine requires a little more care. Due to it's
length, the Medium model will be required if a numeric coprocessor is not
available and an emulator must be attached to the code.  If a numerical
coprocessor is available, the program will fit into into the Small model.
 
---------------------------------------------------------------------------
IV. Can I change the output?
 
    Yes, the user may wish to substitute for the function output_result()
which is in the file RGPS.C .  This function is passed a pointer to a
'problem' structure which contains all the information about the geometry
and the original problem.  The 'problem' structure is defined in the
header file CRFC.H .
    Although written as a demonstration project, the author feels that the
program may be useful in modelling applications.
 
---------------------------------------------------------------------------
V. What are the legitimate problems whose solution is not implemented.
 
    The following 7 sets of parameters generate still unsolved problems.
Continuity arguments indicate that these problems have solutions.
The author has not been able to solve them.  Please inform him of any
solutions!
 
    phi, vt, xs, z0
    phi, vt, xg, z0
    z, vt, xs, z0
    z, vt, xg, z0
    z, vt, y, z0
    vt, xs, x, z0
    vt, xg, x, z0
 
---------------------------------------------------------------------------
VI.  How were the solution algorithms found.
 
    The methodology of the algorithms is described in "The Geometry
of Reflection", a paper by the author of this program.  This paper is
available from:
 
                Center for Wave Phenomena
                Colorado School of Mines
                Golden, Colorado  80401
                (303) 273-3557
 
    Any further inquiries about these ideas may be addressed via Internet
to the author at 'shelby@mines.colorado.edu' .  He will be willing to
supply more detailed information if requested.  In particular, if anybody
comes up with solutions to the problems listed above, please let me know!
I DO expect bugs to show up, so please inform me of any problem.  I will
correct the problem.
 
---------------------------------------------------------------------------
VII.  What use may I make of this source code.
 
    Reputation being a professional's stock in trade, the author is releasing
this code to public domain, but courtesy, at least, demands that his work
be acknowledged in any repackaging or redistribution of this code.
    Furthermore, the user interface in this code was liberally borrowed from
others and these workers should also be cited.  (See documentation in the
files CWPAR.H and CWPAR.C .)
 
---------------------------------------------------------------------------
VIII.  What are the files in this package?
 
    Source codes:           Miscellaneous:
        crfc.h                  readme.rgps  (this file)
        cwpar.h                 mk.rgps
        rgps.c
        cwpar.c
        crmisc.c
        crfc.c
        exotic.c
 
---------------------------------------------------------------------------
IX.  Does the author make the usual disclaimers?
 
    Of course!  This code was developed to determine how are certain ideas
could be applied.  Although the author cannot envision any circumstances
in which application of the code would be critical, should such circumstances
arise, prudence will dictate that RGPS not be considered the final authority.
    The code was tested by creating several reflection models, and applying
the code to every possible set of four parameters.  For all models tested,
the original model was reproduced, and any further solution reproduced the
original values of the input parameters.
 
    Shelby C. Worley - October 1991
 
