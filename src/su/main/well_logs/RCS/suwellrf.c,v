head	1.14;
access;
symbols;
locks; strict;
comment	@ * @;


1.14
date	2011.11.16.23.59.55;	author john;	state Exp;
branches;
next	1.13;

1.13
date	2011.11.12.00.43.53;	author john;	state Exp;
branches;
next	1.12;

1.12
date	2006.11.07.22.58.42;	author john;	state Exp;
branches;
next	1.11;

1.11
date	2005.10.04.16.42.43;	author john;	state Exp;
branches;
next	1.10;

1.10
date	2005.03.04.21.48.02;	author john;	state Exp;
branches;
next	1.9;

1.9
date	2004.12.23.23.50.19;	author john;	state Exp;
branches;
next	1.8;

1.8
date	2004.08.04.19.24.00;	author john;	state Exp;
branches;
next	1.7;

1.7
date	2004.08.04.18.41.02;	author john;	state Exp;
branches;
next	1.6;

1.6
date	2003.06.09.16.17.07;	author john;	state Exp;
branches;
next	1.5;

1.5
date	2002.10.03.16.09.46;	author john;	state Exp;
branches;
next	1.4;

1.4
date	2002.09.20.17.08.42;	author john;	state Exp;
branches;
next	1.3;

1.3
date	2001.10.24.18.18.45;	author john;	state Exp;
branches;
next	1.2;

1.2
date	2001.06.22.15.53.48;	author john;	state Exp;
branches;
next	1.1;

1.1
date	2001.06.21.21.18.23;	author john;	state Exp;
branches;
next	;


desc
@suwellrf.c --- read a welllog and compute its reflectivity function
@


1.14
log
@added Reg Beardsley's checkpar()
@
text
@/* Copyright (c) Colorado School of Mines, 2011.*/
/* All rights reserved.                       */

/* SUWELLRF: $Revision: 1.12 $ ; $Date: 2006/11/07 22:58:42 $	*/

#include "par.h"
#include "su.h"
#include "segy.h"

/*********************** self documentation **********************/
char *sdoc[] = {
" 									",
" SUWELLRF - convert WELL log depth, velocity, density data into a	",
"	uniformly sampled normal incidence Reflectivity Function of time",
" 									",
" suwellrf [required parameters] [optional parameters] > [stdout]	",
" 									",
" Required Parameters:							",
" dvrfile=	file containing depth, velocity, and density values	",
" ...or...								",
" dvfile=	file containing depth and velocity values		",
" drfile=	file containing depth and density values		",
" ...or...								",
" dfile=	file containing depth values				",
" vfile=	file containing velocity log values			",
" rhofile=	file containing density log values			",
" nval= 	number of triplets of d,v,r values if dvrfile is set,	",
" 		number of pairs of d,v and d,r values dvfile and drfile	",
"		are set, or number of values if dfile, vfile, and rhofile",
"		are set.						",
" 									",
" Optional Parameters:							",
" dtout=.004	desired time sampling interval (sec) in output		",
" ntr=1         number of traces to output 				",
" 									",
" Notes:								",
" The format of the input file(s) is C-style binary float. These files	",
" may be constructed from ascii file via:   				",
" 									",
"       a2b n1=3 < dvrfile.ascii > dvrfile.bin				",
" ...or...								",
"       a2b n1=2 < dvfile.ascii > dvfile.bin				",
"       a2b n1=2 < drfile.ascii > drfile.bin				",
" ...or...								",
"       a2b n1=1 < dfile.ascii > dfile.bin				",
"       a2b n1=1 < vfile.ascii > dfile.bin				",
"       a2b n1=1 < rhofile.ascii > rhofile.bin				",
" 									",
" A raw normal-incidence impedence reflectivity as a function of time is",
" is generated using the smallest two-way traveltime implied by the	",
" input velocities as the time sampling interval. This raw reflectivity	",
" trace is then resampled to the desired output time sampling interval	",
" via 8 point sinc interpolation. If the number of samples on the output",
" exceeds SU_NFLTS the output trace will be truncated to that value.	",
"  									",
" Caveat: 								",
" This program is really only a first rough attempt at creating a well	",
" log utility. User input and modifications are welcome.		",
" 									",
" See also:  suresamp 							",
" 									",
NULL};

/*
 * Author:  CWP: John Stockwell, Summer 2001, updated Summer 2002.
 * inspired by a project by GP grad student Leo Brown
 */
/**************** end self doc ********************************/


segy tr;	/* output trace of reflectivity spikes */

int
main(int argc, char **argv)
{

	int i=0;		/* counter				*/
	int ntr=1;		/* number of output traces		*/
	int nval;		/* number of values			*/
	int ntmax;		/* number of samples on maxtrace trace	*/
	int ntout;		/* number of samples on output trace	*/
	int ndvr;		/* number of samples in dvrfile		*/
	int dvrbytes;		/* size of dvrinput in bytes		*/
	int itempt=0;		/* integerized traveltime		*/

	float dtmin=FLT_MAX;	/* minimum delta t			*/
	float dtout=0.0;	/* time sampling interval on output	*/
	float tmax=0.0;		/* maximum traveltime on output		*/
	float ttotal=0.0;	/* maximum traveltime on output		*/
	float tempdt=0.0;	/* temporary dt				*/

	float *t=NULL;		/* array of output times for interp	*/
	float *tempd=NULL;	/* temporary data vector		*/
	float *tempv=NULL;	/* temporary data vector		*/
	float *tempr=NULL;	/* temporary data vector		*/
	float *maxtrace=NULL;	/* maxtrace data trace 			*/
	float **dvrinput=NULL;	/* array of depths,velocities,densities	*/

	/* Input file names */
	char *dvrfile="";	/* depth, velocity, density file name	*/
	char *dvfile="";	/* depth, velocity file name		*/
	char *drfile="";	/* depth, density file  name		*/
	char *dfile="";		/* depth file name			*/
	char *vfile="";		/* velocity file  name			*/
	char *rhofile="";	/* density file name			*/

	/* Input file pointers */
	FILE *dfp=NULL;		/* pointer to depth file		*/
	FILE *vfp=NULL;		/* pointer to velocity file		*/
	FILE *rfp=NULL;		/* pointer to density file		*/
	FILE *dvfp=NULL;	/* pointer to depth, velocity file	*/
	FILE *drfp=NULL;	/* pointer to depth, density file	*/
	FILE *dvrfp=NULL;	/* pointer to depth, velocity, density file  */	

	/* Hook up getpar to handle the parameters */
	initargs(argc,argv);
	requestdoc(0);
	
	/* Get required parameters */
	MUSTGETPARINT("nval",&nval);
	getparstring("dfile",&dfile);
	getparstring("vfile",&vfile);
	getparstring("rhofile",&rhofile);
	getparstring("dvfile",&dvfile);
	getparstring("drfile",&drfile);
	getparstring("dvrfile",&dvrfile);

	if (!getparint("ntr",&ntr)) ntr=1;;

	/* Allocate space for d,v,r values */
	dvrinput = ealloc2float(3,nval);
	ndvr = 3*nval;
	dvrbytes = ndvr*sizeof(float);

	/* Zero out  d,v,r array */
	memset((void *) dvrinput[0],0,dvrbytes);
	
	/* Open input files and read values */
	if ( (*dvrfile!='\0')) {

		/* Open  file */
		if((dvrfp=efopen(dvrfile,"r"))==NULL)
                        err("cannot open dvrfile=%s",dvrfile); 

		/* Read d,v,r values */
		efread(dvrinput[0],sizeof(float),ndvr,dvrfp);
		
	} else if ( (*dvfile!='\0') && (*dvfile!='\0') ) {

		float **temp1=NULL;
		float **temp2=NULL;
		float nvtemp=2*nval;

		/* Allocate space for temporary arrays */
		temp1 = ealloc2float(2,nval);
		temp2 = ealloc2float(2,nval);
	
		/* Open files */
		if((dvfp=efopen(dvfile,"r"))==NULL)
                        err("cannot open dvfile=%s\n",dvfile); 

		if((drfp=efopen(drfile,"r"))==NULL)
                        err("cannot open drfile=%s\n",drfile); 

		/* Read d,v,r values */
		efread(temp1[0],sizeof(float),nvtemp,dvfp);
		efread(temp2[0],sizeof(float),nvtemp,drfp);

		/* Read values from temp1 and temp2 into dvrinput */
		for (i=0; i<nval; ++i) {
			dvrinput[i][0] = temp1[i][0];
			dvrinput[i][1] = temp1[i][1];
			dvrinput[i][2] = temp2[i][1];
		}
		free2float(temp1);
		free2float(temp2);
			
		
	} else if ( (*dfile!='\0') && (*vfile!='\0') && (*rhofile!='\0') ) {
		float *temp1=NULL;
		float *temp2=NULL;
		float *temp3=NULL;

		temp1 = ealloc1float(nval);
		temp2 = ealloc1float(nval);
		temp3 = ealloc1float(nval);

		/* open files */
		if((dfp=efopen(dfile,"r"))==NULL)
                        err("cannot open dfile=%s\n",dfile); 

		if((vfp=efopen(vfile,"r"))==NULL)
                        err("cannot open vfile=%s\n",vfile); 

		if((rfp=efopen(rhofile,"r"))==NULL)
                        err("cannot open rhofile=%s\n",rhofile); 

		/* Read d,v,r values */
		efread(temp1,sizeof(float),nval,dfp);
		efread(temp2,sizeof(float),nval,vfp);
		efread(temp3,sizeof(float),nval,rfp);

		/* Read values from temp1, temp2, and temp3 into dvrinput */
		for (i=0; i<nval; ++i) {
			dvrinput[i][0] = temp1[i];
			dvrinput[i][1] = temp2[i];
			dvrinput[i][2] = temp3[i];
		}
		free1float(temp1);
		free1float(temp2);
		free1float(temp3);
	}

	/* Store values in a temporary arrays */
	tempd=ealloc1float(nval);
	tempv=ealloc1float(nval);
	tempr=ealloc1float(nval);

	for (i=0; i<nval; ++i) {

		tempd[i] = dvrinput[i][0];
		tempv[i] = dvrinput[i][1];
		tempr[i] = dvrinput[i][2];
		
		/* compute min(dt) */
		if (i>0) {
			if ((tempd[i] - tempd[i-1]) < 0)
				err("depth not monotonically increasing!");

			tempdt = 2.0*(tempd[i]-tempd[i-1])/tempv[i-1];
			dtmin = MIN(dtmin,tempdt);
			tmax+=tempdt;
		}
	}

	/* Set output dt, ns */
	if (!getparfloat("dtout", &dtout))            dtout = dtmin/2.0;
	tr.dt = NINT(dtout*1000000.0);

        checkpars();

	/* maxtrace trace */
	ntmax = NINT(tmax/dtmin);
	maxtrace = ealloc1float(ntmax);
	memset((void *) maxtrace,0,ntmax*FSIZE);

	/* set number of samples on output trace */
	ntout = NINT(tmax/dtout);
	if (ntout>SU_NFLTS) {
		warn("ntout=%d too big! Setting ntout to SU_NFLTS=%d",ntout,SU_NFLTS);
		ntout=SU_NFLTS;
	}
	tr.ns = ntout;


	/* Convert depth values to traveltimes and reflectivities */
	for (i=1; i<nval; ++i) {

		/* Nearest neighbor */
		/* Compute integerized traveltime and set output data to reflectivity */
		ttotal += 2.0*(tempd[i]-tempd[i-1])/tempv[i-1];
		itempt=NINT(ntmax*ttotal/tmax);

		/* Compute impedence reflection coefficient */
		maxtrace[itempt] = ( tempv[i]*tempr[i] - tempv[i-1]*tempr[i-1])/
					( tempv[i]*tempr[i] + tempv[i-1]*tempr[i-1]);

	}

	/* Compute output times */
	t = ealloc1float(ntout);	
	memset((void *) t,0,ntout*FSIZE);

	{ register int itime;
 	  register float tvalue;
          for (itime=0,tvalue=0.0; itime<ntout; itime++,tvalue+=dtout)
                        t[itime] = tvalue;
         }

	/* Resample maxtrace via 8 point sinc interpolation to desired */
	/* output dt */
	ints8r(ntmax, dtmin, 0, maxtrace, 
			0.0, 0.0, ntout, t, tr.data);

	/* Free space */
	free1float(maxtrace);
	free1float(t);

	/* Output traces */
	for(i=0; i<ntr; ++i) puttr(&tr);

	return(CWP_Exit());
	
}

@


1.13
log
@copyright
@
text
@d240 1
@


1.12
log
@changed    memset( .., (int) '\0',...) to memset( .., 0,..) as per suggestion of Marion Zhu and Reg Beardsley
@
text
@d1 4
a4 1
/* SUWELLRF: $Revision: 1.11 $ ; $Date: 2005/10/04 16:42:43 $	*/
@


1.11
log
@4 Oct 2005
@
text
@d1 1
a1 1
/* SUWELLRF: $Revision: 1.10 $ ; $Date: 2005/03/04 21:48:02 $	*/
d133 1
a133 1
	memset((void *) dvrinput[0],(int) '\0',dvrbytes);
d241 1
a241 1
	memset((void *) maxtrace,(int) '\0',ntmax*FSIZE);
d268 1
a268 1
	memset((void *) t,(int) '\0',ntout*FSIZE);
@


1.10
log
@put in an error trapping to make sure dethHHpth is monotonically
increasing.
@
text
@d1 1
a1 1
/* SUWELLRF: $Revision: 1.9 $ ; $Date: 2004/12/23 23:50:19 $	*/
d225 1
a225 1
				err("depth not monotonically increasing!);
@


1.9
log
@reflection coefficient calculation corrected
@
text
@d1 1
a1 1
/* SUWELLRF: $Revision: 1.6 $ ; $Date: 2003/06/09 16:17:07 $	*/
d224 3
@


1.8
log
@further improvements.
@
text
@d76 5
a80 5
	int nval=0;		/* number of values			*/
	int ntmax=0;		/* number of samples on maxtrace trace	*/
	int ntout=0;		/* number of samples on output trace	*/
	int ndvr=0;		/* number of samples in dvrfile		*/
	int dvrbytes=0;		/* size of dvrinput in bytes		*/
a131 4
	/* allocate space for output times */
	t = ealloc1float(SU_NFLTS);	
	memset((void *) t,(int) '\0',SU_NFLTS*FSIZE);

d224 1
a224 1
			tempdt = 2.0*ABS(tempd[i]-tempd[i-1])/ABS(tempv[i-1]);
a228 2
	/* Free space */
	free2float(dvrinput);
d234 1
d254 1
a254 1
		ttotal += 2.0*ABS(tempd[i]-tempd[i-1])/ABS(tempv[i-1]);
d264 3
d279 1
@


1.7
log
@some hardening against stupid input
@
text
@d132 4
d233 2
a239 1

a268 3
	t = ealloc1float(ntout);	
	memset((void *) t,(int) '\0',ntout*FSIZE);

a280 1
	free1float(maxtrace);
@


1.6
log
@9 June 2003
@
text
@d1 1
a1 1
/* SUWELLRF: $Revision: 1.5 $ ; $Date: 2002/10/03 16:09:46 $	*/
d76 5
a80 5
	int nval;		/* number of values			*/
	int ntmax;		/* number of samples on maxtrace trace	*/
	int ntout;		/* number of samples on output trace	*/
	int ndvr;		/* number of samples in dvrfile		*/
	int dvrbytes;		/* size of dvrinput in bytes		*/
d224 1
a224 1
			tempdt = 2.0*(tempd[i]-tempd[i-1])/tempv[i-1];
d254 1
a254 1
		ttotal += 2.0*(tempd[i]-tempd[i-1])/tempv[i-1];
@


1.5
log
@modified to include sinc interpolation
@
text
@d1 1
a1 1
/* SUWELLRF: $Revision: 1.4 $ ; $Date: 2002/09/20 17:08:42 $	*/
d11 1
a11 1
"		uniformly sampled Reflectivity Function in time		",
a23 1
" 									",
d30 2
a31 1
" dtout=.004 desired time sampling interval (sec) in output		",
d46 7
a52 7
" A raw impedence reflectivity as a function of time is generated using ",
" the smallest two-way traveltime implied by the input velocities as the",
" time sampling interval. This raw reflectivity trace is then resampled ",
" to the desired output time sampling interval via 8 point sinc		",
" interpolation. If the number of samples on the output exceeds SU_NFLTS",
" the output trace will be truncated to that value.			",
" 									",
d62 2
a63 1
 * Author:  CWP: John Stockwell, Summer 2001
d75 1
d125 2
d282 2
a283 2
	/* Output trace */
	puttr(&tr);
@


1.4
log
@*** empty log message ***
@
text
@d1 1
a1 1
/* SUWELLRF: $Revision: 1.3 $ ; $Date: 2001/10/24 18:18:45 $	*/
d46 6
a51 9
" Notes: 								",
" Data are processed in the following fashion. Given dtout, we compute	",
" the reflectivity using nearest neighbor velocities and densities. No	",
" attempt at interpolation is made beyond this.				",
" 									",
" Caveat: 									",
" Because the maximum number of samples on an SU trace is given ",
" by SHRT_MAX on your system, output will be truncated to this value, if",
" nout exceeds this. 							",
d53 1
d56 3
d66 1
d75 2
a76 1
	int nsout;		/* number of samples on output		*/
d87 1
d91 1
d230 11
a240 4
	nsout = NINT(tmax/dtout);
	if (nsout>SU_NFLTS) {
		warn("nsout=%d too big! Setting nsout to SU_NFLTS=%d",nsout,SU_NFLTS);
		nsout=SU_NFLTS;
d242 1
a242 1
	tr.ns = nsout;
d251 1
a251 1
		itempt=NINT(nsout*ttotal/tmax);
d254 1
a254 1
		tr.data[itempt] = ( tempv[i]*tempr[i] - tempv[i-1]*tempr[i-1])/
d259 20
d284 1
@


1.3
log
@24 October 2001 version
@
text
@d1 1
a1 1
/* SUWELLRF: $Revision: 1.2 $ ; $Date: 2001/06/22 15:53:48 $	*/
d249 1
a249 1
	return EXIT_SUCCESS;
@


1.2
log
@suwellrf  -- reflectivity function from well log data
@
text
@d1 1
a1 1
/* SUWELLRF: $Revision: 1.10 $ ; $Date: 2000/09/22 20:42:07 $	*/
d215 1
a215 1
			tempdt = (tempd[i]-tempd[i-1])/tempv[i-1];
d238 1
a238 1
		ttotal += (tempd[i]-tempd[i-1])/tempv[i-1];
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/* SUWELLRF - convert well log data into a reflectivity function */
d46 9
a54 2
" Data are interpolated in the following fashion. Given dtout, we compute",
" the 									",
d56 2
d87 1
a87 1
	float **dvrinput=NULL;	/* array of depths, velocities, densities, impedences */
d89 1
a89 1
	/* File names */
a100 1

a102 1

@
