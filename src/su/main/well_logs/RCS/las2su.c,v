head	1.9;
access;
symbols;
locks
	john:1.9; strict;
comment	@ * @;


1.9
date	2011.11.16.17.43.20;	author john;	state Exp;
branches;
next	1.8;

1.8
date	2011.11.12.00.01.45;	author john;	state Exp;
branches;
next	1.7;

1.7
date	2011.02.08.22.14.13;	author john;	state Exp;
branches;
next	1.6;

1.6
date	2010.01.20.23.11.14;	author john;	state Exp;
branches;
next	1.5;

1.5
date	2008.05.05.20.37.08;	author john;	state Exp;
branches;
next	1.4;

1.4
date	2006.11.22.19.37.51;	author john;	state Exp;
branches;
next	1.3;

1.3
date	2006.11.22.16.07.03;	author john;	state Exp;
branches;
next	1.2;

1.2
date	2006.11.07.22.58.42;	author john;	state Exp;
branches;
next	1.1;

1.1
date	2006.10.31.18.26.29;	author john;	state Exp;
branches;
next	;


desc
@Authors Chris Liner, with stuff from Werner Heigl's program lasstrip.c
@


1.9
log
@added Reg Beardsley's checkpar()
@
text
@/* Copyright (c) Colorado School of Mines, 2011.*/
/* All rights reserved.                       */

/* LAS2SU: $Revision: 1.7 $ ; $Date: 2011/02/08 22:14:13 $	*/

#include "par.h"
#include "su.h"
#include "segy.h"

/*********************** self documentation **********************/
char *sdoc[] = {
"								",
" LAS2SU - convert las2 format well log curves to su traces	",
"								",
"  las2su <stdin nskip= ncurve= >stdout [optional params]	",
"								",
" Required parameters:						",
" none								",
" Optional parameters:						",
" ncurve=automatic	number of log curves in the las file	",
" dz=0.5		input depth sampling (ft)		",
" m=0			output (d1,f1) in feet			",
"			=1 output (d1,f1) in meters		",
" ss=0			do not subsample (unless nz > 32767 )	",
"			=1 pass every other sample		",
" verbose=0		=1 to echo las header lines to screen	",
" outhdr=las_header.asc	name of file for las headers		",
"								",
" Notes:							",
" 1. It is recommended to run LAS_CERTIFY available from CWLS	",
"    at http://cwls.org.					",
" 2. First log curve MUST BE depth.				",
" 3. If number of depth levels > 32767 (segy NT limit)		",
"    then input is subsampled by factor of 2 or 4 as needed	",
" 4. Logs may be isolated using tracl header word (1,2,...,ncurve) ",
"    tracl=1 is depth						",
"								",
NULL};

/* Credits:
  *	Chris Liner based on code by Ferhan Ahmed and a2b.c (June 2005)
  *            (Based on code by Ferhan Ahmed and a2b.c)
  *            I gratefully acknowledge Saudi Aramco for permission
  *            to release this code developed while I worked for the
  *            EXPEC-ARC research division.
  *	CWP: John Stockwell 31 Oct 2006, combining lasstrip and
  *	CENPET: lasstrip 2006 by Werner Heigl
  *
  *     Rob Hardy: allow the ncurve parameter to work correctly if set
  *    - change string length to 400 characters to allow more curves
  *    - note nskip in header is totally ignored !
  *
  * Ideas for improvement:
  *	add option to chop off part of logs (often shallow
  *	   portions are not of interest
  *	cross check sampling interval from header against
  *	   values found from first log curve (=depth)
  *
  */

/**************** end self doc ***********************************/

/* defined quantities */
#define LAS_MAXLINE 1000
#define LAS_HDR_DEF "las_header.asc"

/* function prototype for subroutine used internally */
int las_getnewline(char line[], int maxline);

segy tr;	/* output trace structure */

int
main(int argc, char **argv)
{
	int ncurve=0;		/* number of log curves in las file */
	int discard=1;		/* count to discard */
	float **x=NULL;		/* binary floats */
	float len=0;		/* line length			*/
	char string[300];	/* one line of input ascii file	*/
	char c1[30];		/* ascii form of log value */
	int m;			/* flag for metric (d1,f1) output     */
	int nzmax;	 	/* max number of depth levels	*/
	int nz,nzold;	 	/* actual number of depth levels */
	int iz,izz,icurve,i;	/* counters */
	int  verbose;	/* if 1(yes) echo las header lines to stderr */
	float dz;	/* depth sample rate */
	int ss;		/* subsample flag */
	char line[LAS_MAXLINE];
	 char *outhdr=NULL;	/* name of file holding LAS header */
	 FILE *outhdrfp=NULL;    /* ... its file pointer */

	/* booleans for curve portion */
	cwp_Bool is_ncurve_set=cwp_false;	/* is ncurve set manually?*/
	cwp_Bool in_tilde_C_block=cwp_false;	/* are we inside the ~C block?*/


	/* Hook up getpar */
	initargs(argc, argv);
	requestdoc(1);

	/* get parameters */
	if (!getparint("verbose", &verbose))  verbose = 0;
	if (!getparint("m", &m)) 	m = 0;
	if (!getparint("ss", &ss)) 	ss = 0;
	if (!getparfloat("dz", &dz)) 	dz = 0.5;
	if (!getparstring("outhdr", &outhdr))  outhdr = LAS_HDR_DEF;
	outhdrfp = efopen(outhdr, "w");

	/* WMH: read LAS header, extract ncurve, and copy to outhdr */
	/* hardyr: flip the booleans here */
	if (!getparint("ncurve",&ncurve)) {
		is_ncurve_set=cwp_true;
		ncurve = 0;
	} else {
		is_ncurve_set=cwp_false;
	}

        checkpars();

	do {
		len = las_getnewline(line,LAS_MAXLINE);
		i = 0;
				while (line[i]!='\0') {
					 fputc(line[i],outhdrfp);
					 ++i;
		}
				fputc('\n',outhdrfp);

		/* have we reached the curve section yet? */
		if (strncmp("~C",line,2)==0) {
			in_tilde_C_block=cwp_true;
		} else if(strncmp("~P",line,2)==0)  {
			in_tilde_C_block=cwp_false;
		}

		/* count discards */
		/* hardyr: if ncurve not set */
		if ((strncmp("#",line,1)==0) && (in_tilde_C_block) ) ++discard;

		/* count lines */
		/* hardyr: if ncurve not set */
		if ((in_tilde_C_block) && (is_ncurve_set) ) ++ncurve;

	/* are we through the curve section? */
	} while (strncmp("~A",line,2)!=0 );

	/* discard # and ~ line counts */
		/* hardyr: if ncurve not set */
	if ((is_ncurve_set)) ncurve = ncurve - discard;

	/* close output file */
	efclose(outhdrfp);

	/* max depth levels: 32767 (segy limit) */
	nzmax = SU_NFLTS;

	if (verbose) warn("ncurve %d nzmax %d",ncurve,nzmax);

	/* alloc array to hold float log values */
	x = ealloc2float(nzmax,ncurve);

	/* zero array */
	memset((void *) x[0], 0, ncurve*nzmax*FSIZE);

	/* initialize depth counter */
	nz = 0;
	iz = 0;

	/* get each line as a string */
	/* hardyr change line length max to 400 characters */
	while(fgets(string,400,stdin) != NULL) {

		/* read first token */
		strcpy(c1,strtok(string,"    \n\t"));

		/* load log value into float array */
		x[0][iz] = atof(c1);

		for (icurve = 1; icurve < ncurve; ++icurve) {
			/* read next token get ascii log value */
			strcpy(c1,strtok(NULL,"    \n\t"));

			/* load this log value into float array */
			x[icurve][iz] = atof(c1);
		}

		/* bump depth counter */
		++iz;

	}

	/* number of depth values in log */
	nz = iz;
	warn("nz=%i",nz);

	/* check that nz limit is not exceeded, or subsampling requested */
	if ( nz > nzmax || ss == 1 ) {
		nzold = nz;
		/* reset number of depth samples and sample rate */
		nz = nz/2;
		dz = 2.0 * dz;
		/* subsample */
		for (icurve=0 ; icurve < ncurve ; ++icurve) {
			for (iz = 0 ; iz < nz ; ++iz){
				izz = 2*iz;
				x[icurve][iz] = x[icurve][izz];
			}
		}
		if (verbose) warn("New: nz=%i dz=%g ft\n",nz,dz);
	}

	/* check again (possible deep well with 0.25 ft sampling) */
	if ( nz > nzmax || ss == 1 ) {
		nzold = nz;
		/* reset number of depth samples and sample rate */
		nz = nz/2;
		dz = 2.0 * dz;
		/* subsample */
		for (icurve=0 ; icurve < ncurve ; ++icurve){
			for (iz = 0 ; iz < nz ; ++iz){
				izz = 2*iz;
				x[icurve][iz] = x[icurve][izz];
			}
		}
		if (verbose) warn("New: nz=%i dz=%g ft\n",nz,dz);
	}

	/* set up output trace headers */
	tr.trid = 1;		/* su time traces (trick) */
	tr.ns = nz;		/* samples per trace */
	tr.dt = 1000*dz;	/* time sample rate (trick) */
	if (m == 0) {
		tr.d1 = dz;		/* actual dz (in ft) */
		tr.f1 = x[0][0];	/* first depth value (in ft) */
	} else {
		tr.d1 = dz/3.28084;		/* actual dz (in m) */
		tr.f1 = x[0][0]/3.28084;	/* first depth value (in m) */
	}

	for (icurve=0 ; icurve < ncurve ; ++icurve){
		tr.tracl = icurve+1;

		for (iz = 0 ; iz < nz ; ++iz){
			tr.data[iz] = x[icurve][iz];
		}

		puttr(&tr);
	}


	return EXIT_SUCCESS;
}

int las_getnewline(char s[], int lim)
/***************************************************************************
las_getnewline: read a line from stdin into s[] and return length of line 
****************************************************************************
Input:
s[]	input string
lim	maximum length of line
Returns:
i	length of line 
****************************************************************************
Author: CENPET: Werner Heigl  2005
****************************************************************************/
{
	 int c=0,i;

	 for (i=0; i<lim-1 && (c=getchar())!=EOF && c!='\n'; ++i)
		 s[i] = c;
	 if (c=='\n') {
		 s[i] = c;
		 ++i;
	 }
	 s[i] = '\0';
	 return i;
}
@


1.8
log
@copyright
@
text
@d118 1
@


1.7
log
@added Chris Liner permission statement
@
text
@d1 4
a4 1
/* LAS2SU: $Revision: 1.6 $ ; $Date: 2010/01/20 23:11:14 $	*/
@


1.6
log
@Rob Hardy's changes
@
text
@d1 1
a1 1
/* LAS2SU: $Revision: 1.5 $ ; $Date: 2008/05/05 20:37:08 $	*/
d39 4
@


1.5
log
@ 5 May version
@
text
@d1 1
a1 1
/* LAS2SU: $Revision: 1.3 $ ; $Date: 2006/11/22 16:07:03 $	*/
d42 4
d102 2
a103 1
	/* WMH: read LAS header, extract ncurves, and copy to outhdr */
d105 1
a105 1
		is_ncurve_set=cwp_false ;
d108 1
a108 1
		is_ncurve_set=cwp_true;
d129 1
d133 2
a134 1
		if ((in_tilde_C_block)) ++ncurve;
d140 2
a141 1
	ncurve = ncurve - discard;
d162 2
a163 1
	while(fgets(string,200,stdin) != NULL) {
a171 1

a176 1

@


1.4
log
@updated to count number of curves
@
text
@d9 1
a9 1
" 								",
d11 3
a13 3
" 								",
"  las2su <stdin nskip= ncurve= >stdout [optional params] 	",
" 								",
d15 1
a15 1
" none 								",
d19 4
a22 4
" m=0			output (d1,f1) in feet 			",
" 			=1 output (d1,f1) in meters 		",
" ss=0			do not subsample (unless nz > 32767 ) 	",
" 			=1 pass every other sample 		",
d25 1
a25 1
" 								",
d33 1
a33 1
"    tracl=1 is depth 						",
d38 11
a48 11
 *	Chris Liner based on code by Ferhan Ahmed and a2b.c (June 2005)
 *	CWP: John Stockwell 31 Oct 2006, combining lasstrip and 
 *      CENPET: lasstrip 2006 by Werner Heigl
 * 						
 * Ideas for improvement:				
 * 	add option to chop off part of logs (often shallow
 *	   portions are not of interest		
 *	cross check sampling interval from header against
 *	   values found from first log curve (=depth)	
 * 						
 */
d59 1
a59 1
segy tr;	/* output trace structure */ 
d64 3
a66 3
	int ncurve=0;		/* number of log curves in las file  	*/
	int discard=1;		/* count to discard		  	*/
	float **x=NULL;		/* binary floats		   	*/
d69 1
a69 1
	char c1[30];		/* ascii form of log value 		*/
d71 6
a76 6
	int nzmax;	  	/* max number of depth levels 	*/
	int nz,nzold;	  	/* actual number of depth levels 	*/
	int iz,izz,icurve,i;	/* counters 				*/
	short verbose; 	  /* if 1(yes) echo las header lines to stderr  */
	float dz;		/* depth sample rate */
	int ss;			/* subsample flag 			*/
d78 2
a79 2
        char *outhdr=NULL;      /* name of file holding LAS header    */
        FILE *outhdrfp=NULL;    /* ... its file pointer               */
d91 6
a96 6
	if (!getparshort("verbose", &verbose))  verbose = 0;
	if (!getparint("m", &m))  	m = 0;
	if (!getparint("ss", &ss))  	ss = 0;
	if (!getparfloat("dz", &dz))  	dz = 0.5;
        if (!getparstring("outhdr", &outhdr))  outhdr = LAS_HDR_DEF;
        outhdrfp = efopen(outhdr, "w");
d98 1
a98 1
        /* WMH: read LAS header, extract ncurves, and copy to outhdr */
d105 2
a106 2
			
	
d108 5
a112 5
	        len = las_getnewline(line,LAS_MAXLINE);
	        i = 0;
       	       	while (line[i]!='\0') {
       	       		 fputc(line[i],outhdrfp);
       	      		 ++i;
d114 1
a114 1
       	       	fputc('\n',outhdrfp);
d130 1
a130 1
       	} while (strncmp("~A",line,2)!=0 );
d134 1
a134 1
	
d136 1
a136 1
        efclose(outhdrfp);
d154 1
a154 1
        while(fgets(string,200,stdin) != NULL) {
d157 1
a157 1
    	 	strcpy(c1,strtok(string,"    \n\t"));
d160 1
a160 1
    	 	x[0][iz] = atof(c1);
d165 1
a165 1
    	 		strcpy(c1,strtok(NULL,"    \n\t"));
d168 1
a168 1
    	 		x[icurve][iz] = atof(c1);
d170 1
a170 1
  		}
d173 1
a173 1
		iz += 1;
d188 1
a188 1
		for (icurve=0 ; icurve < ncurve ; ++icurve){
d194 1
a194 1
		warn("New: nz=%i dz=%g ft\n",nz,dz);
d214 3
a216 3
	tr.trid = 1;			/* su time traces (trick) */
	tr.ns = nz;			/* samples per trace */
	tr.dt = 1000*dz;		/* time sample rate (trick) */
d218 2
a219 2
		tr.d1 = dz;			/* actual dz (in ft) */
		tr.f1 = x[0][0];		/* first depth value (in ft) */
d231 1
a231 1
			
d252 1
a252 1
        int c=0,i;
d254 8
a261 8
        for (i=0; i<lim-1 && (c=getchar())!=EOF && c!='\n'; ++i)
                s[i] = c;
        if (c=='\n') {
                s[i] = c;
                ++i;
        }
        s[i] = '\0';
        return i;
a262 1

@


1.3
log
@werner's latest version
@
text
@d1 263
a263 251
/* LAS2SU: $Revision: 1.11 $ ; $Date: 2006/07/18 06:23:22 $	*/

#include "par.h"
#include "su.h"
#include "segy.h"

/*********************** self documentation **********************/
char *sdoc[] = {
" 								",
" LAS2SU - convert las2 format well log curves to su traces	",
" 								",
" las2su <stdin nskip= ncurve= >stdout [optional params] 	",
" 								",
" Required parameters:						",
" ncurve=		number of log curves in the las file	",
" 								",
" Optional parameters:						",
" dz=0.5		input depth sampling (ft)		",
" m=0			output (d1,f1) in feet 			",
" 			=1 output (d1,f1) in meters 		",
" ss=0			do not subsample (unless nz > 32767 ) 	",
" 			=1 pass every other sample 		",
" verbose=0		=1 to echo las header lines to screen	",
" outhdr=las_hdr.asc	name of file for las headers		",
" 								",
" Notes:							",
" 1. It is recommended to run LAS_CERTIFY available from CWLS	",
"    at http://cwls.org.					",
" 2. First log curve MUST BE depth.				",
" 3. If number of depth levels > 32767 (segy NT limit)		",
"    then input is subsampled by factor of 2 or 4 as needed	",
" 4. Logs may be isolated using tracl header word (1,2,...,ncurve) ",
"    tracl=1 is depth 						",
" 								",
" Ideas for improvement:					",
" 	add option to chop off part of logs (often shallow	",
"	   portions are not of interest				",
"	cross check sampling interval from header against	",
"	   values found from first log curve (=depth)		",
"								",
" WMH added the following:					",
"  - added flag csec						",
"  - commented out MUSTGETPARINT at line 88			",
"  - replaced (int) '0' by '0' in line 130 (recent email by RGB)",
"  - added line 98-120: obtain number of curves from LAS header	",
"								",
NULL};

/* Credits:
 *	Chris Liner based on code by Ferhan Ahmed and a2b.c (June 2005)
 *	CWP: John Stockwell 31 Oct 2006, combining lasstrip and 
 *      CENPET: lasstrip 2006 by Werner Heigl
 */

/**************** end self doc ***********************************/

/* defined quantities */
#define LAS_MAXLINE 1000
#define LAS_HDR_DEF "las_header.asc"

/* function prototype for subroutine used internally */
int las_getnewline(char line[], int maxline);

segy tr;	/* output trace structure */ 

int
main(int argc, char **argv)
{
	int nskip;		/* number of header lines to skip    	*/
	int ncurve=0;		/* number of log curves in las file  	*/
	float **x=NULL;		/* binary floats		   	*/
	float len=0;		/* line length			*/
	char string[300];	/* one line of input ascii file	*/
	char c1[30];		/* ascii form of log value 		*/
	int csec;		/* WMH: flag for curve section in las header */
	int m;			/* flag for metric (d1,f1) output     */
	int nzmax;	  	/* max number of depth levels 	*/
	int nz,nzold;	  	/* actual number of depth levels 	*/
	int iz,izz,icurve,i;	/* counters 				*/
	short verbose; 	  /* if 1(yes) echo las header lines to stderr  */
	float dz;		/* depth sample rate */
	int ss;			/* subsample flag 			*/
	char line[LAS_MAXLINE];
        char *outhdr=NULL;      /* name of file holding LAS header    */
        FILE *outhdrfp=NULL;    /* ... its file pointer               */


	/* Hook up getpar */
	initargs(argc, argv);
	requestdoc(1);

	/* get parameters */
	/* WMH: MUSTGETPARINT("ncurve",&ncurve);*/
	if (!getparshort("verbose", &verbose))  verbose = 0;
	if (!getparint("m", &m))  	m = 0;
	if (!getparint("ss", &ss))  	ss = 0;
	if (!getparfloat("dz", &dz))  	dz = 0.5;
        if (!getparstring("outhdr", &outhdr))  outhdr = LAS_HDR_DEF;
        outhdrfp = efopen(outhdr, "w");

        /* WMH: read LAS header, extract ncurves, and copy to outhdr */
        if (!getparint("ncurve",&ncurve)) { /* WMH: manual override by user */

		do {
	                len = las_getnewline(line,LAS_MAXLINE);
		        i = 0;
       	         	while (line[i]!='\0') {
       	                fputc(line[i],outhdrfp);
       	                ++i;
			}
       	        	fputc('\n',outhdrfp);

			/* have we reached the curve section yet? */
			if (strncmp("~C",line,2)!=0 )	csec = 1;

			/* if yes, count number of curves */
			if (csec) {
				if (!strncmp("~",line,1) && !strncmp("#",line,1))
					ncurve +=1;
			}

		/* are we through the curve section? */
       		} while (strncmp("~A",line,2)!=0 );
	}
        efclose(outhdrfp);


	/* max depth levels: 32767 (segy limit) */
	nzmax = SU_NFLTS;

	/* alloc array to hold float log values */
	x = ealloc2float(nzmax,ncurve);

	/* zero array */
	memset((void *) x[0], 0, ncurve*nzmax*FSIZE);

	/* initialize depth counter */
	nz = 0;
	iz = 0;

	/* get each line as a string */
        while(fgets(string,200,stdin) != NULL) {

		/* read first token */
    	 	strcpy(c1,strtok(string,"    \n\t"));

		/* load log value into float array */
    	 	x[0][iz] = atof(c1);

		for (icurve = 1; icurve < ncurve; ++icurve) {

			/* read next token get ascii log value */
    	 		strcpy(c1,strtok(NULL,"    \n\t"));

			/* load this log value into float array */
    	 		x[icurve][iz] = atof(c1);

  		}

		/* bump depth counter */
		iz += 1;

	}

	/* number of depth values in log */
	nz = iz;
	warn("nz=%i",nz);

	/* check that nz limit is not exceeded, or subsampling requested */
	if ( nz > nzmax || ss == 1 ) {
		nzold = nz;
		/* reset number of depth samples and sample rate */
		nz = nz/2;
		dz = 2.0 * dz;
		/* subsample */
		for (icurve=0 ; icurve < ncurve ; ++icurve){
			for (iz = 0 ; iz < nz ; ++iz){
				izz = 2*iz;
				x[icurve][iz] = x[icurve][izz];
			}
		}
		warn("New: nz=%i dz=%g ft\n",nz,dz);
	}

	/* check again (possible deep well with 0.25 ft sampling) */
	if ( nz > nzmax || ss == 1 ) {
		nzold = nz;
		/* reset number of depth samples and sample rate */
		nz = nz/2;
		dz = 2.0 * dz;
		/* subsample */
		for (icurve=0 ; icurve < ncurve ; ++icurve){
			for (iz = 0 ; iz < nz ; ++iz){
				izz = 2*iz;
				x[icurve][iz] = x[icurve][izz];
			}
		}
		warn("New: nz=%i dz=%g ft\n",nz,dz);
	}

	/* set up output trace headers */
	tr.trid = 1;			/* su time traces (trick) */
	tr.ns = nz;			/* samples per trace */
	tr.dt = 1000*dz;		/* time sample rate (trick) */
	if (m == 0) {
		tr.d1 = dz;			/* actual dz (in ft) */
		tr.f1 = x[0][0];		/* first depth value (in ft) */
	} else {
		tr.d1 = dz/3.28084;		/* actual dz (in m) */
		tr.f1 = x[0][0]/3.28084;	/* first depth value (in m) */
	}

	for (icurve=0 ; icurve < ncurve ; ++icurve){
		tr.tracl = icurve+1;

		for (iz = 0 ; iz < nz ; ++iz){
			tr.data[iz] = x[icurve][iz];
		}
			
		puttr(&tr);
	}


	return EXIT_SUCCESS;
}

int las_getnewline(char s[], int lim)
/***************************************************************************
las_getnewline: read a line from stdin into s[] and return length of line 
****************************************************************************
Input:
s[]	input string
lim	maximum length of line
Returns:
i	length of line 
****************************************************************************
Author: CENPET: Werner Heigl  2005
****************************************************************************/
{
        int c,i;

        for (i=0; i<lim-1 && (c=getchar())!=EOF && c!='\n'; ++i)
                s[i] = c;
        if (c=='\n') {
                s[i] = c;
                ++i;
        }
        s[i] = '\0';
        return i;
}

@


1.2
log
@changed    memset( .., (int) '\0',...) to memset( .., 0,..) as per suggestion of Marion Zhu and Reg Beardsley
@
text
@d1 251
a251 221
/* LAS2SU: $Revision: 1.1 $ ; $Date: 2006/10/31 18:26:29 $	*/

#include "par.h"
#include "su.h"
#include "segy.h"

/*********************** self documentation **********************/
char *sdoc[] = {
" 								",
" LAS2SU - convert las2 format well log curves to su traces	",
" 								",
" las2su <stdin nskip= nlogs= >stdout [optional params] 	",
" 								",
" Required parameters:						",
" nlogs=		number of well log curves in the LAS file",
" 								",
" Optional parameters:						",
" dz=0.5		input depth sampling (ft)		",
" m=0			output (d1,f1) in feet 			",
" 			=1 output (d1,f1) in meters 		",
" ss=0			do not subsample (unless nz > 32767 ) 	",
" 			=1 pass every other sample 		",
" verbose=0		=1 to echo las header lines to screen	",
" outhdr=las_hdr.asc	name of file for las headers		",
" 								",
" Notes:							",
" 1. First log curve MUST BE depth.				",
" 2. If number of depth levels > 32767 (segy NT limit)		",
"    then input is subsampled by factor of 2 or 4 as needed	",
" 3. Logs may be isolated using tracl header word (1,2,...,nlogs) ",
"    tracl=1 is depth 						",
" 									",
NULL};

/* Credits:
 *	Chris Liner based on code by Ferhan Ahmed and a2b.c (June 2005)
 *	CWP: John Stockwell 31 Oct 2006, combining lasstrip and 
 *      CENPET: lasstrip 2006 by Werner Heigl
 */

/**************** end self doc ***********************************/

/* defined quantities */
#define LAS_MAXLINE 1000
#define LAS_HDR_DEF "las_header.asc"

/* function prototype for subroutine used internally */
int las_getnewline(char line[], int maxline);

segy tr;	/* output trace structure */ 

int
main(int argc, char **argv)
{
	int nlogs;		  /* number of log curves in las file  	*/
	float **x=NULL;		  /* binary floats		   	*/
	float len=0;		  /* line length			*/
	char string[300];	  /* one line of input ascii file	*/
	char c1[30];		  /* ascii form of log value 		*/
	int m;			  /* flag for metric (d1,f1) output     */
	int nzmax;	  	  /* max number of depth levels 	*/
	int nz,nzold;	  	  /* actual number of depth levels 	*/
	int iz,izz,icurve,i;	 /* counters 				*/
	short verbose; 	  /* if 1(yes) echo las header lines to stderr  */
	float dz;		/* depth sample rate */
	int ss;			/* subsample flag 			*/
	char line[LAS_MAXLINE];
	char *outhdr;	     /* name of file holding LAS header    */
	FILE *outhdrfp;	   /* ... its file pointer	       */


	/* Hook up getpar */
	initargs(argc, argv);
	requestdoc(1);

	/* get parameters */
	MUSTGETPARINT("nlogs",&nlogs);
	if (!getparshort("verbose", &verbose))  verbose = 0;
	if (!getparint("m", &m))  	m = 0;
	if (!getparint("ss", &ss))  	ss = 0;
	if (!getparfloat("dz", &dz))  	dz = 0.5;
	if (!getparstring("outhdr", &outhdr))  outhdr = LAS_HDR_DEF;
	outhdrfp = efopen(outhdr, "w");


	/* max depth levels: 32767 (segy limit) */
	nzmax = SU_NFLTS;

	/* alloc array to hold float log values */
	x = ealloc2float(nzmax,nlogs);

	/* zero array */
	memset((void *) x[0], 0, nlogs*nzmax*FSIZE);
		
	/* copy LAS header to outhdr */
	do {
		len = las_getnewline(line,LAS_MAXLINE);
		i = 0;
		while (line[i]!='\0') {
			fputc(line[i],outhdrfp);
			++i;
		}
		fputc('\n',outhdrfp);
	} while (strncmp("~A",line,2)!=0 );
	efclose(outhdrfp);


	/* initialize depth counter */
	nz = 0;
	iz = 0;

	/* get each line as a string */
	while(fgets(string,200,stdin) != NULL) {

		/* read first token */
    	 	strcpy(c1,strtok(string,"    \n\t"));

		/* load log value into float array */
    	 	x[0][iz] = atof(c1);

		for (icurve = 1; icurve < nlogs; ++icurve) {

			/* read next token get ascii log value */
    	 		strcpy(c1,strtok(NULL,"    \n\t"));

			/* load this log value into float array */
    	 		x[icurve][iz] = atof(c1);

  		}

		/* bump depth counter */
		iz += 1;

	}

	/* number of depth values in log */
	nz = iz;
	warn("nz=%i",nz);

	/* check that nz limit is not exceeded, or subsampling requested */
	if ( nz > nzmax || ss == 1 ) {
		nzold = nz;
		/* reset number of depth samples and sample rate */
		nz = nz/2;
		dz = 2.0 * dz;
		/* subsample */
		for (icurve=0 ; icurve < nlogs ; ++icurve){
			for (iz = 0 ; iz < nz ; ++iz){
				izz = 2*iz;
				x[icurve][iz] = x[icurve][izz];
			}
		}
		warn("New: nz=%i dz=%g ft\n",nz,dz);
	}

	/* check again (possible deep well with 0.25 ft sampling) */
	if ( nz > nzmax || ss == 1 ) {
		nzold = nz;
		/* reset number of depth samples and sample rate */
		nz = nz/2;
		dz = 2.0 * dz;
		/* subsample */
		for (icurve=0 ; icurve < nlogs ; ++icurve){
			for (iz = 0 ; iz < nz ; ++iz){
				izz = 2*iz;
				x[icurve][iz] = x[icurve][izz];
			}
		}
		warn("New: nz=%i dz=%g ft\n",nz,dz);
	}

	/* set up output trace headers */
	tr.trid = 1;			/* su time traces (trick) */
	tr.ns = nz;			/* samples per trace */
	tr.dt = 1000*dz;		/* time sample rate (trick) */
	if (m == 0) {
		tr.d1 = dz;			/* actual dz (in ft) */
		tr.f1 = x[0][0];		/* first depth value (in ft) */
	} else {
		tr.d1 = dz/3.28084;		/* actual dz (in m) */
		tr.f1 = x[0][0]/3.28084;	/* first depth value (in m) */
	}

	for (icurve=0 ; icurve < nlogs ; ++icurve){
		tr.tracl = icurve+1;

		for (iz = 0 ; iz < nz ; ++iz){
			tr.data[iz] = x[icurve][iz];
		}
			
		puttr(&tr);
	}


	return EXIT_SUCCESS;
}
int las_getnewline(char s[], int lim)
/***************************************************************************
las_getnewline: read a line from stdin into s[] and return length of line 
****************************************************************************
Input:
s[]	input string
lim	maximum length of line
Returns:
i	length of line 
****************************************************************************
Author: CENPET: Werner Heigl
****************************************************************************/
{
	int c=0,i;

	for (i=0; i<lim-1 && (c=getchar())!=EOF && c!='\n'; ++i)
		s[i] = c;
	if (c=='\n') {
		s[i] = c;
		++i;
	}
	s[i] = '\0';
	return i;
}

@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/* LAS2SU: $Revision: 1.11 $ ; $Date: 2006/07/18 06:23:22 $	*/
d93 1
a93 1
	memset((void *) x[0], (int) '0', nlogs*nzmax*FSIZE);
@
