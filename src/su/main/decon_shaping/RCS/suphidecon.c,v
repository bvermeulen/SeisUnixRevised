head	1.9;
access;
symbols;
locks
	john:1.9; strict;
comment	@ * @;


1.9
date	2015.11.18.23.14.03;	author john;	state Exp;
branches;
next	1.8;

1.8
date	2011.12.21.23.23.59;	author john;	state Exp;
branches;
next	1.7;

1.7
date	2011.11.22.20.08.10;	author john;	state Exp;
branches;
next	1.6;

1.6
date	2011.11.22.18.06.04;	author john;	state Exp;
branches;
next	1.5;

1.5
date	2011.11.22.17.53.49;	author john;	state Exp;
branches;
next	1.4;

1.4
date	2011.11.16.17.47.47;	author john;	state Exp;
branches;
next	1.3;

1.3
date	2011.11.12.00.07.16;	author john;	state Exp;
branches;
next	1.2;

1.2
date	2010.01.20.23.16.20;	author john;	state Exp;
branches;
next	1.1;

1.1
date	2009.07.24.22.46.46;	author john;	state Exp;
branches;
next	;


desc
@phase inverse decon  - balasz nemeth
@


1.9
log
@returned to some of Balaczs Nemeth's code. My bad. Still don't know if it works.
@
text
@/* SUPHIDECON: $Revision: 1.8 $ ; $Date: 2011/12/21 23:23:59 $	*/


#include "su.h"
#include "segy.h"
#include "header.h"

/*********************** self documentation *****************************/
char *sdoc[] = {
"									",
" SUPHIDECON - PHase Inversion Deconvolution				",
"									",
"    suphidecon < stdin > stdout					",
"									",
" Required parameters:						  	",
"	none							   	",
" Optional parameters:							",
" ... time range used for wavelet extraction:			   	",
" tm=-0.1	Pre zero time (maximum phase component )		",
" tp=+0.4	Post zero time (minimum phase component + multiples)    ",
" pad=.1	percentage padding for nt prior to cepstrum calculation	",
"									",
" pnoise=0.001	Pre-withening (assumed noise to prevent division by zero)",
"									",
" Notes:								",
" The wavelet is separated from the reflectivity and noise based on	",
" their different 'smoothness' in the pseudo cepstrum domain.		",
" The extracted wavelet also includes multiples. 			",
" The wavelet is reconstructed in frequency domain, end removed		", 
" from the trace. (Method by Lichman and Northwood, 1996.)		",
NULL};

/*
 *
 * Credits: Potash Corporation, Saskatechwan  Balasz Nemeth 
 * given to CWP by Potash Corporation 2008 (originally as supid.c)
 *
 * Reference:
 * Lichman,and Northwood, 1996; Phase Inversion deconvolution for
 * long and short period multiples attenuation, in
 * SEG Deconvolution 2, Geophysics reprint Series No. 17
 * p. 701-718, originally presented at the 54th EAGE meeting, Paris,
 * June 1992, revised March 1993, revision accepted September 1994.
 * 
 *
 */

/**************** end self doc ********************************/
#define LOOKFAC 4       /* Look ahead factor for npfaro   */
#define PFA_MAX 720720  /* Largest allowed nfft	   */

/* Segy data constans */
segy tr;				/* SEGY trace */
segy trout;

int computePseudoCepstrum(int *nt,float *x,complex *c,int init);

int main( int argc, char *argv[] )
{
	
	int nt;			/* number of time samples per trace	*/
	int it;			/* counter				*/
	float dt;		/* time sampling interval		*/
	int nfft;		/* number of points in fft		*/
	float tm;		/* maximum phase component		*/
	float tp;		/* minimum phase component + multiples	*/
	int itmin,itmax;	/* min and max time samples 		*/
	int nwind;		/* number of windows 			*/
	float *window=NULL;	/* hanning window function		*/
	int index;		/* index				*/
	
	float pad;		/* pad nt by percpad percentage prior	*/
				/* to npfa padding calculation		*/
	
	complex *c=NULL;	/* complex array			*/
	complex *ct=NULL;	/* complex array			*/

	initargs(argc, argv);
   	requestdoc(1);	
	
	if (!getparfloat("tm", &tm)) tm=-0.1;
	if (!getparfloat("tp", &tp)) tp=0.4;
	if (!getparfloat("pad",&pad)) pad=0.1;
	
	/* get information from the first header */
	if (!gettr(&tr)) err("can't get first trace");
	nt = tr.ns;
	dt = (double)tr.dt/1000000.0;
	
	itmin=-tp/dt;
	itmax=-tm/dt;
	nwind = itmax-itmin+1;
	window = ealloc1float(nwind);
	hanningnWindow(nwind,window);
	
	
	nfft = computePseudoCepstrum(&nt,tr.data,c,1);
	
	c = ealloc1complex(nfft);
	ct = ealloc1complex(nfft);
		
	do {

			computePseudoCepstrum(&nt,tr.data,c,0);	
			
			/* non-symetrical linear filter 
			   from itmin to itmax; Hanning window */
			
			/* wrap array so memory is aligned from itmin to itmax */
			wrapArray(c,nfft,sizeof(complex),itmax+1);
			
			/* Apply hanning window */
			for(it=0,index=0;it<nwind;it++,index++)
				c[it] = crmul(c[it],window[index]);
			memset((void *) &c[nwind],0 , (nfft-nwind)*sizeof(complex));
				
			/* Unwrapp array */
			wrapArray(c,nfft,sizeof(complex),-(itmax+1));
			


			pfacc(-1, nfft,c); 
			sscal(nfft*2,1.0/nfft,(float*)c,1); 
			
			
			/* remove log ; exponentiate */
			{ complex tmpc;
				for(it=0;it<nfft;it++) {
					tmpc = cwp_cexp(c[it]);
					if(finite(tmpc.r) && finite(tmpc.i)) {
						c[it] = tmpc;
					} else {
						c[it] = cmplx(0.0,0.0);
					}	
				}	
			}
			
			
			/* Shift it to the central location */
			/*for(it=1;it<nfft;it+=2) {
				c[it].r = -c[it].r;
				c[it].i = -c[it].i;
			  } */

			
			/* Deconvolution */
			/* Fourier transform trace */
			memset((void *) &tr.data[nt],(int) '\0', (nfft-nt)*FSIZE);
			
			pfarc(-1, nfft,tr.data,ct);
			sscal(nfft*2,1.0/nfft,(float*)ct,1); 
			
			/* Pre-whiten */
			{ float Spsum=0.0;
			  int nf=nfft/2+1;
			
				for(it=0;it<nf;it++)
					Spsum += rcabs(c[it]);
				pad = pad/100.0*(Spsum/nf);
			
				/* create full spectrum */
				for(it=0;it<nf-2;it++) {
					ct[nf+it].r = ct[nf-it-2].r;
					ct[nf+it].i = -ct[nf-it-2].i;
				}
			}
			
			/* Deconvolve */
			for(it=0;it<nfft;it++)
				ct[it] = cdiv(ct[it],cmplx(c[it].r+pad,c[it].i));
			
			pfacr(1, nfft,ct,trout.data);
			
			/*for(it=0;it<nfft;it++) {
				trout.data[it] = c[it].r;
			} */
			
			memcpy((void *) &trout, (const void *) &tr, HDRBYTES);
			
			puttr(&trout);
			
	}while(gettr(&tr));
	
	free1complex(c);
	
	return EXIT_SUCCESS;
}

int computePseudoCepstrum(int *nt,float *x,complex *c,int init)
/* Compute the pseudo cepstrum */
{	
	int nfftc;
	int nf;
	float snfftc;
	complex *w;
	float *a;
	float *p;
	int iw;
	int ntp;
	
	float fftpadd=50;
	
	/* Set up pfa fft */
	ntp = NINT(*nt*(1.0+fftpadd/100.0));
	nfftc = npfao(ntp,LOOKFAC*ntp); 
	if (nfftc >= SU_NFLTS || nfftc >= PFA_MAX)
	       	err("Padded nt=%d--too big", nfftc);
	nf = nfftc/2 + 1;
	snfftc=1.0/nfftc;
	
	if (init)
		return(nfftc);
		
	w = ealloc1complex(nfftc);
	a = ealloc1float(nfftc);
	p = ealloc1float(nfftc);
		
	memset( (void *) &a[*nt], 0, (nfftc-*nt)*FSIZE);
	memcpy( (void *) a, (const void *) x, *nt*FSIZE);
		
	/* FFT */			
	sscal(*nt,snfftc,a,1);
	pfarc(-1, nfftc,a,w);
	
	for(iw=0;iw<nf;iw++) {
		a[iw] = w[iw].r;
	}
	
	hilbert(nf,a,p);

	for(iw=0;iw<nf;iw++) {
		w[iw].i=(-1.0/PI)*p[iw];
	}
	
	for(iw=0;iw<nf;iw++) {
		if(!CLOSETO(rcabs(w[iw]),0.0)) {
			/*w[iw] = crmul(cwp_clog(w[iw]),0.5); */
			w[iw] = cwp_clog(w[iw]);
		} else {
			w[iw].r=0.0;
			w[iw].i=0.0;
		}
	}
	
	/* prepare it for in place complex transform */

	for(iw=0;iw<nf-2;iw++) {
		w[nf+iw].r = w[nf-iw-2].r;
		w[nf+iw].i = -w[nf-iw-2].i;
	}
	
	/* Shift it to the central location */
	/*for(iw=0;iw<nfftc;iw+=2) {
		w[iw].r = -w[iw].r;
		w[iw].i = -w[iw].i;
	} */


	pfacc(1, nfftc,w);
					
	for(iw=0;iw<nfftc;iw++) {
		c[iw] = w[iw];
	/*	c[iw] = cmul(w[iw],cmplx(-1.0,-1.0)); */
	}
	
	free1float(a);
	free1float(p);
	free1complex(w);
	
	return(nfftc);
}

@


1.8
log
@Reg Beardsley's C99 compliance   clog -> cwp_clog,  and isfinite replacdes finite
@
text
@d1 1
a1 1
/* SUPHIDECON: $Revision: 1.7 $ ; $Date: 2011/11/22 20:08:10 $	*/
d21 1
a21 1
" percpad=50	percentage padding for nt prior to cepstrum calculation	",
d49 1
a49 2

#define LOOKFAC 4	 /* Look ahead factor for npfaro   */
d52 1
a52 1
/* Segy data constants */
d54 1
d56 1
a56 2
/* function prototype of routine used internally */
int computePseudoCepstrum(int *nt,float *percpad, float *x,complex *c,int init);
d58 1
a58 2
int
main( int argc, char **argv)
d60 1
d72 1
a72 2
	float pnoise;		/* prewitening to prevent division by 0	*/
	float percpad;		/* pad nt by percpad percentage prior	*/
a76 1
	float *rt=NULL;		/* input (real) data			*/
a77 1
	
d83 1
a83 1
	if (!getparfloat("pnoise",&pnoise)) pnoise=0.1;
a91 1

a92 2

	/* allocate space for hanning window */
a93 2

	/* compute hanning window */
d96 3
a98 4
	/* get nfft as required for cepstrem */
	nfft = computePseudoCepstrum(&nt,&percpad,rt,c,1);	

	/* allocate space */
a100 2
	rt = ealloc1float(nfft);

d104 1
a104 8
			memset((void *)rt, 0, nfft*FSIZE);
			memset((void *)ct, 0, nfft*sizeof(complex));
			memset((void *)c, 0, nfft*sizeof(complex));

                       /* copy traces from data */
                        memcpy(( void *) rt, (const void *) tr.data, nt*FSIZE);

			computePseudoCepstrum(&nt,&percpad,rt,c,0);	
d109 1
a109 1
		/* wrap array so memory is aligned from itmin to itmax */
d113 1
a113 1
			for(it=0,index=0;it<nwind;++it,++index)
d115 1
d121 1
d130 1
a130 1
					if(isfinite(tmpc.r) && isfinite(tmpc.i)) {
d140 1
a140 1
		/*	for(it=1;it<nfft;it+=2) {
d143 1
a143 3
			  }
		*/

d148 3
a150 1
			pfarc(-1, nfft,rt,ct);
d159 1
a159 1
				pnoise = pnoise/10000.0*(Spsum/nf);
d170 1
a170 2
				ct[it] = cdiv(ct[it],cmplx(c[it].r+pnoise,c[it].i));
			pfacr(1, nfft,ct,rt);
d172 7
a178 3
			for(it=0;it<nfft;it++) {
				tr.data[it] = rt[it];
			}
d180 1
a180 1
			puttr(&tr);
d182 1
a182 1
	} while(gettr(&tr));
a183 1
/*
a184 2
	free1complex(ct);
	free1float(rt);
a185 1
*/
d189 2
a190 4
int computePseudoCepstrum(int *nt,float *percpad,float *x,complex *c,int init)
/*********************************************************************
 computePseudoCepstrum  - compute the pseudo cepstrum
*/
d192 6
a197 6
	int nfftc;		/* nfft for the cepstrum */
	int nf;			/* number of frequencies */
	float snfftc;		/* 1.0/nfftc 		*/		
	complex *w=NULL;
	float *a=NULL;
	float *p=NULL;
d201 1
d204 1
a204 1
	ntp = NINT(*nt*(1.0+ *percpad/100.0));
d207 1
a207 1
		 	err("Padded nt=%d--too big", nfftc);
d218 1
a218 1
	memset( (void *) &a[*nt],0, (nfftc-*nt)*FSIZE);
a265 1
/*
a268 1
*/
@


1.7
log
@added a fenced off ieeefp.h include
@
text
@d1 1
a1 1
/* SUPHIDECON: $Revision: 1.6 $ ; $Date: 2011/11/22 18:06:04 $	*/
a7 5
#ifdef SUN
#include <ieeefp.h>
#endif


d146 2
a147 2
					tmpc = cexp(c[it]);
					if(finite(tmpc.r) && finite(tmpc.i)) {
d256 2
a257 2
			/*w[iw] = crmul(clog(w[iw]),0.5); */
			w[iw] = clog(w[iw]);
@


1.6
log
@removed ieeefp.h as this does not appear to exist in linux
@
text
@d1 1
a1 1
/* SUPHIDECON: $Revision: 1.5 $ ; $Date: 2011/11/22 17:53:49 $	*/
d8 3
@


1.5
log
@checkpars();
@
text
@d1 1
a1 1
/* SUPHIDECON: $Revision: 1.2 $ ; $Date: 2010/01/20 23:16:20 $	*/
a2 1
#include <ieeefp.h>
@


1.4
log
@added Reg Beardsley's checkpar()
@
text
@d1 1
a1 2
/* Copyright (c) Colorado School of Mines, 2011.*/
/* All rights reserved.                       */
d3 1
a3 1
/* SUPHIDECON: $Revision: 1.2 $ ; $Date: 2010/01/20 23:16:20 $	*/
a90 1
        checkpars();
@


1.3
log
@copyright
@
text
@d92 1
@


1.2
log
@small changes
@
text
@d1 4
a4 1
/* SUPHIDECON: $Revision: 1.1 $ ; $Date: 2009/07/24 22:46:46 $	*/
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/* SUPHIDECON: $Revision: 1.8 $ ; $Date: 2006/11/07 22:58:42 $	*/
d22 1
d24 1
a24 1
" prw=0.1	Pre-withening					   	",
d28 4
a31 4
" their different 'smoothness' in pseudo cepstrum domain.		",
" The extracted wavelet includes multiples too.				",
" The wavelet is reconstructed in frequency domain, end removed		",
" from the trace. (Method by Lichman and Norwood, 1996.)		",
d40 2
a41 1
 * Lichman,and Northwood, 1996; Phase Inversion deconvolution,
d43 3
a55 1
segy trout;
d58 1
a58 1
int computePseudoCepstrum(int *nt,float *x,complex *c,int init);
d60 2
a61 1
int main( int argc, char *argv[] )
d63 19
a81 13
	int nt,it;
	float dt;
	int nfft;
	float tm,tp;
	int itmin,itmax;
	int nwind;
	float *window;
	int indx;
	
	float prw;
	
	complex *c=NULL;
	complex *ct;
d88 1
a88 1
	if (!getparfloat("prw",&prw)) prw=0.1;
d97 1
d99 2
d102 2
d106 4
a109 3
	
	nfft = computePseudoCepstrum(&nt,tr.data,c,1);
	
d112 2
d117 8
a124 1
			computePseudoCepstrum(&nt,tr.data,c,0);	
d129 1
a129 1
			/* wrap array so memory is aligned from itmin to itmax */
d133 2
a134 3
			for(it=0,indx=0;it<nwind;it++,indx++)
				c[it] = crmul(c[it],window[indx]);
			memset((void *) &c[nwind],(int) '\0', (nfft-nwind)*sizeof(complex));
a139 1

d158 1
a158 1
			/*for(it=1;it<nfft;it+=2) {
d161 3
a163 1
			  } */
d168 1
a168 3
			memset((void *) &tr.data[nt],(int) '\0', (nfft-nt)*FSIZE);
			
			pfarc(-1, nfft,tr.data,ct);
d177 1
a177 1
				prw = prw/100.0*(Spsum/nf);
d188 2
a189 1
				ct[it] = cdiv(ct[it],cmplx(c[it].r+prw,c[it].i));
d191 3
a193 5
			pfacr(1, nfft,ct,trout.data);
			
			/*for(it=0;it<nfft;it++) {
				trout.data[it] = c[it].r;
			} */
d195 1
a195 1
			memcpy((void *) &trout, (const void *) &tr, HDRBYTES);
d197 1
a197 3
			puttr(&trout);
			
	}while(gettr(&tr));
d199 1
d201 2
d204 1
d208 1
a208 1
int computePseudoCepstrum(int *nt,float *x,complex *c,int init)
d213 6
a218 6
	int nfftc;
	int nf;
	float snfftc;
	complex *w;
	float *a;
	float *p;
a221 1
	float fftpadd=50;
d224 1
a224 1
	ntp = NINT(*nt*(1.0+fftpadd/100.0));
d238 1
a238 1
	memset( (void *) &a[*nt], (int) '\0', (nfftc-*nt)*FSIZE);
d286 1
d290 1
@
