head	1.16;
access;
symbols;
locks; strict;
comment	@ * @;


1.16
date	2015.08.07.22.00.45;	author john;	state Exp;
branches;
next	1.15;

1.15
date	2011.11.16.17.47.47;	author john;	state Exp;
branches;
next	1.14;

1.14
date	2011.11.12.00.07.16;	author john;	state Exp;
branches;
next	1.13;

1.13
date	2011.09.09.22.30.20;	author john;	state Exp;
branches;
next	1.12;

1.12
date	2003.02.17.16.06.26;	author john;	state Exp;
branches;
next	1.11;

1.11
date	97.07.28.22.36.46;	author john;	state Exp;
branches;
next	1.10;

1.10
date	97.03.21.16.29.09;	author john;	state Exp;
branches;
next	1.9;

1.9
date	96.09.13.21.49.05;	author john;	state Exp;
branches;
next	1.8;

1.8
date	96.02.05.20.39.01;	author jkc;	state Exp;
branches;
next	1.7;

1.7
date	95.08.04.15.27.43;	author jkc;	state Exp;
branches;
next	1.6;

1.6
date	94.08.25.15.00.48;	author jkc;	state Exp;
branches;
next	1.5;

1.5
date	93.11.24.16.06.34;	author john;	state Exp;
branches;
next	1.4;

1.4
date	92.10.26.14.12.16;	author john;	state Exp;
branches;
next	1.3;

1.3
date	91.09.05.08.51.44;	author jkcohen;	state Exp;
branches;
next	1.2;

1.2
date	91.03.20.07.18.51;	author jkc;	state Exp;
branches;
next	1.1;

1.1
date	91.03.17.10.05.34;	author jkc;	state Exp;
branches;
next	;


desc
@Shape input wavelet to desired wavelet
@


1.16
log
@changed "conv" to "convolve_cwp"
@
text
@/* Copyright (c) Colorado School of Mines, 2011.*/
/* All rights reserved.                       */

/* SUSHAPE: $Revision: 1.15 $ ; $Date: 2011/11/16 17:47:47 $		*/

#include "su.h"
#include "segy.h"
#include "header.h"

/*********************** self documentation ******************************/
char *sdoc[] = {
" 									",
" SUSHAPE - Wiener shaping filter					",
" 									",
"  sushape <stdin >stdout  [optional parameters]			",
" 									",
" Required parameters:							",
" w=		vector of input wavelet to be shaped or ...		",
" ...or ... 								",
" wfile=        ... file containing input wavelet in SU (SEGY trace) format",
" d=		vector of desired output wavelet or ...			",
" ...or ... 								",
" dfile=        ... file containing desired output wavelet in SU format	",
" dt=tr.dt		if tr.dt is not set in header, then dt is mandatory",
" 									",
" Optional parameters:							",
" nshape=trace		length of shaping filter			",
" pnoise=0.001		relative additive noise level			",
" showshaper=0		=1 to show shaping filter 			",
" 									",
" verbose=0		silent; =1 chatty				",
" 									",
"Notes:									",
" 									",
" Example of commandline input wavelets: 				",
"sushape < indata  w=0,-.1,.1,... d=0,-.1,1,.1,... > shaped_data	",
" 									",
"sushape < indata  wfile=inputwavelet.su dfile=desire.su > shaped_data	",
" 									",
" To get the shaping filters into an ascii file:			",
" ... | sushape ... showwshaper=1 2>file | ...   (sh or ksh)		",
" (... | sushape ... showshaper=1 | ...) >&file  (csh)			",
" 									",
NULL};

/* Credits:
 *	CWP: Jack Cohen
 *	CWP: John Stockwell, added wfile and dfile  options
 *
 * Trace header fields accessed: ns, dt
 * Trace header fields modified: none
 *
 */
/**************** end self doc *******************************************/


#define PNOISE	0.001


segy intrace, outtrace;
segy dtr, wtr;

int
main(int argc, char **argv)
{
	int nt;			/* number of points on trace		*/

	float dt;		/* time sample interval (sec)		*/
	float *shaper;		/* shaping filter coefficients		*/
	float *spiker;		/* spiking decon filter (not used)	*/
	float *w;		/* input wavelet			*/

	int nw;			/* length of input wavelet in samples	*/
	float *d;		/* desired output wavelet		*/

	int nd;			/* length of desired wavelet in samples	*/
	int nshape;		/* length of shaping filter in samples	*/

	float pnoise;		/* pef additive noise level		*/
	float *crosscorr;	/* right hand side of Wiener eqs	*/
	float *autocorr;	/* vector of autocorrelations		*/
	int showshaper;		/* flag to display shaping filter	*/
        float f_zero=0.0;       /* zero valued item for comparison      */

	cwp_String wfile="";	/* input wavelet file name		*/
	cwp_String dfile="";	/* desired output wavelet file name	*/
	FILE *wfp;		/* input wavelet file pointer 		*/
	FILE *dfp;		/* desired wavelet file pointer		*/
	int verbose=0;		/* =0 silent; =1 chatty			*/


	/* Initialize */
	initargs(argc, argv);
	requestdoc(1);


	/* Get info from first trace */ 
	if (!gettr(&intrace)) err("can't get first trace");
	nt = intrace.ns;
	dt = intrace.dt/1000000.0;	if (!dt) MUSTGETPARFLOAT ("dt", &dt);


	/* Get parameters */
	if (!getparint("showshaper",  &showshaper))	showshaper = 0;
	if (!getparint("nshape",  &nshape))		nshape = nt;
	if (!getparfloat("pnoise",  &pnoise))		pnoise = PNOISE;
	if (!getparint("verbose", &verbose))		verbose = 0;

	/* Open dfile and wfile if they have been getparred */
	getparstring("dfile",&dfile);	
	getparstring("wfile",&wfile);	

	if ((*dfile=='\0')) { /* if no dfile, then get from command line */
		if (!(nd = countparval("d")))
			err("must specify d= desired wavelet");
		d = ealloc1float(nd);	getparfloat("d", d);

	} else { /* read from dfile  */

                if((dfp=fopen(dfile,"r"))==NULL)
                        err("cannot open dfile=%s\n",dfile);

        	if (!fgettr(dfp,&dtr))  err("can't get input wavelet");
        		nd = (int) dtr.ns;
		d = ealloc1float(nd);
		memcpy((void *) d, (const void *) dtr.data, nd*FSIZE);
	}
		
	if ((*wfile=='\0')) { /* then get w from command line */
		if (!(nw = countparval("w")))
			err("must specify w= desired wavelet");
		w = ealloc1float(nw);	getparfloat("w", w);

	} else { /* read from wfile  */

                if((wfp=fopen(wfile,"r"))==NULL)
                        err("cannot open wfile=%s\n",wfile);

        	if (!fgettr(wfp,&wtr))  err("can't get desired output wavelet");
        		nw = (int) wtr.ns;
		w = ealloc1float(nw);
		memcpy((void *) w, (const void *) wtr.data, nw*FSIZE);
	}

        checkpars();

	/* Get shaping filter by Wiener-Levinson */
	shaper	  = ealloc1float(nshape);
	spiker 	  = ealloc1float(nshape);	/* not used */
	crosscorr = ealloc1float(nshape);
	autocorr  = ealloc1float(nshape);
	xcor(nw, 0, w, nw, 0, w, nshape, 0, autocorr);  /* for matrix */
	xcor(nw, 0, w, nd, 0, d, nshape, 0, crosscorr); /* right hand side */
        if (CLOSETO(autocorr[0],f_zero))  err("can't shape with zero wavelet");
	autocorr[0] *= (1.0 + pnoise);			/* whiten */
	stoepf(nshape, autocorr, crosscorr, shaper, spiker);
		

	/* Show shaper on request */
	if (showshaper) {
		register int i;
		if (verbose) warn("Shaping filter:");
		for (i = 0; i < nshape; ++i)
			fprintf(stderr, "%10g%c", shaper[i],
				(i%6==5 || i==nshape-1) ? '\n' : ' ');
	}



	/* Main loop over traces */
	do {
		/* Center and convolve shaping filter with trace */
		convolve_cwp(nshape, (nw-nd)/2, shaper,
		     nt, 0, intrace.data, 
                     nt, 0, outtrace.data);        


		/* Output filtered trace */
		memcpy( (void *) &outtrace, (const void *) &intrace, HDRBYTES);
		puttr(&outtrace);

	} while (gettr(&intrace));


	return(CWP_Exit());
}
@


1.15
log
@added Reg Beardsley's checkpar()
@
text
@d4 1
a4 1
/* SUSHAPE: $Revision: 1.13 $ ; $Date: 2011/09/09 22:30:20 $		*/
d173 1
a173 1
		conv(nshape, (nw-nd)/2, shaper,
@


1.14
log
@copyright
@
text
@d145 1
@


1.13
log
@*** empty log message ***
@
text
@d1 4
a4 1
/* SUSHAPE: $Revision: 1.12 $ ; $Date: 2003/02/17 16:06:26 $		*/
@


1.12
log
@*** empty log message ***
@
text
@d1 1
a1 1
/* SUSHAPE: $Revision: 1.5 $ ; $Date: 93/11/24 16:06:34 $		*/
d28 1
d64 1
d69 1
d72 1
d75 1
d86 1
d104 1
d158 1
a158 1
		warn("Shaping filter:");
@


1.11
log
@changes suggested by Stew Levin to silence SGI compiler warnings, etc
@
text
@d1 1
a1 1
/* SUSHAPE: $Revision: 1.10 $ ; $Date: 1997/03/21 16:29:09 $		*/
d12 1
a12 1
" sushape <stdin >stdout  d= [optional parameters]			",
d15 7
a21 3
" w=vector of input wavelet to be shaped				",
" d=vector of desired output wavelet					",
" dt=tr.dt     (if dt header field is not set, then dt is a mandatory	",
d28 11
a38 3
" 	To get the shaping filters into an ascii file:			",
" 	... | sushape ... showwshaper=1 2>file | ...   (sh or ksh)	",
" 	(... | sushape ... showshaper=1 | ...) >&file  (csh)		",
d43 2
a44 1
 *	CWP: Jack K. Cohen
d46 4
a49 1
 * Trace header fields accessed: ns, dt */
d57 1
d75 1
a75 1
	float f_zero=0.0;	/* zero valued item for comparison	*/
d77 4
d91 1
a91 2
	dt = ((double) intrace.dt)/1000000.0;
	if (!dt) MUSTGETPARFLOAT ("dt", &dt);
d97 1
a97 3
	if (!getparfloat("pnoise",  &pnoise))	pnoise = PNOISE;
	if (!(nw = countparval("w")))  err("must specify w= desired wavelet");
	w = ealloc1float(nw);	getparfloat("w", w);
d99 35
a133 2
	if (!(nd = countparval("d")))  err("must specify d= desired wavelet");
	d = ealloc1float(nd);	getparfloat("d", d);
d143 1
a143 1
	if (CLOSETO(autocorr[0],f_zero))  err("can't shape with zero wavelet");
d174 1
a174 1
	return EXIT_SUCCESS;
@


1.10
log
@small change so the pnoise parameter does something
@
text
@d1 1
a1 1
/* SUSHAPE: $Revision: 1.9 $ ; $Date: 1996/09/13 21:49:05 $		*/
d58 1
d92 1
a92 1
	if (CLOSETO(autocorr[0], 0.0))  err("can't shape with zero wavelet");
@


1.9
log
@silenced -Wall messages
@
text
@d1 1
a1 1
/* SUSHAPE: $Revision: 1.8 $ ; $Date: 1996/02/05 20:39:01 $		*/
d15 3
a17 5
"	w= vector of input wavelet to be shaped				",
" 									",
"	d= vector of desired output wavelet				",
" 									",
" 	dt is a mandatory getpar if not set in header	 		",
d20 3
a22 6
" 									",
"      nshape=trace	length of shaping filter			",
" 									",
"      pnoise=0.001	relative additive noise level			",
" 									",
"      showshaper=0	=1 to show shaping filter 			",
d31 1
a31 1
 *	CWP: Jack
a74 1

a75 1
	
a76 1

a88 1
	autocorr[0] *= 1.0 + pnoise;			/* whiten */
d92 1
@


1.8
log
@*** empty log message ***
@
text
@d1 1
a1 1
/* SUSHAPE: $Revision: 1.7 $ ; $Date: 1995/08/04 15:27:43 $		*/
d47 1
@


1.7
log
@Cast tr.dt to signed data type.
@
text
@d1 1
a1 1
/* SUSHAPE: $Revision: 1.6 $ ; $Date: 1994/08/25 15:00:48 $		*/
a28 3
" Trace header fields accessed: ns, dt					",
" Trace header fields modified: none					",
" 									",
d38 1
a38 1
 */
@


1.6
log
@Removed copyright statement from codes that had it.
Moved self-doc line for sudoc.
@
text
@d1 1
a1 1
/* SUSHAPE: $Revision: 1.5 $ ; $Date: 93/11/24 16:06:34 $		*/
d76 2
a77 1
	dt = intrace.dt/1000000.0;	if (!dt) MUSTGETPARFLOAT ("dt", &dt);
@


1.5
log
@added explicit casts to memcpy
@
text
@d1 1
a1 1
/* SUSHAPE: $Revision: 1.4 $ ; $Date: 92/10/26 14:12:16 $		*/
a2 13
/*----------------------------------------------------------------------
 * Copyright (c) Colorado School of Mines, 1990.
 * All rights reserved.
 *
 * This code is part of SU.  SU stands for Seismic Unix, a processing line
 * developed at the Colorado School of Mines, partially based on Stanford
 * Exploration Project (SEP) software.  Inquiries should be addressed to:
 *
 *  Jack K. Cohen, Center for Wave Phenomena, Colorado School of Mines,
 *  Golden, CO 80401  (jkc@@dix.mines.colorado.edu)
 *----------------------------------------------------------------------
 */

a36 1
/**************** end self doc *******************************************/
d42 1
@


1.4
log
@new selfdoc installed
@
text
@d1 1
a1 1
/* SUSHAPE: $Revision: 1.3 $ ; $Date: 91/09/05 08:51:44 $		*/
d138 1
a138 1
		memcpy(&outtrace, &intrace, HDRBYTES);
@


1.3
log
@string -> String and so forth
@
text
@d1 1
a1 1
/* SUSHAPE: $Revision: 1.2 $ ; $Date: 91/03/20 07:18:51 $		*/
d21 29
a49 29
String sdoc =
" 									\n"
" SUSHAPE - Wiener shaping filter					\n"
" 									\n"
" sushape <stdin >stdout  d= [optional parameters]			\n"
" 									\n"
" Required parameters:							\n"
"	w= vector of input wavelet to be shaped				\n"
" 									\n"
"	d= vector of desired output wavelet				\n"
" 									\n"
" 	dt is a mandatory getpar if not set in header	 		\n"
" 									\n"
" Optional parameters:							\n"
" 									\n"
"      nshape=trace	length of shaping filter			\n"
" 									\n"
"      pnoise=0.001	relative additive noise level			\n"
" 									\n"
"      showshaper=0	=1 to show shaping filter 			\n"
" 									\n"
" Trace header fields accessed: ns, dt					\n"
" Trace header fields modified: none					\n"
" 									\n"
" 	To get the shaping filters into an ascii file:			\n"
" 	... | sushape ... showwshaper=1 2>file | ...   (sh or ksh)	\n"
" 	(... | sushape ... showshaper=1 | ...) >&file  (csh)		\n"
" 									\n"
;
d83 1
a83 1
	askdoc(1);
@


1.2
log
@Restored pnoise per Ken
Adjusted center for convolving operation
@
text
@d1 1
a1 1
/* SUSHAPE: $Revision: 1.1 $ ; $Date: 91/03/17 10:05:34 $		*/
d21 1
a21 1
string sdoc =
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/* SUSHAPE: $Revision: 1.4 $ ; $Date: 91/03/14 07:53:01 $		*/
d38 2
d58 1
d60 1
d74 1
d97 2
d111 1
d132 1
a132 1
		conv(nshape, -nd/2, shaper,
@
