head	1.18;
access;
symbols;
locks; strict;
comment	@ * @;


1.18
date	2011.11.16.23.09.52;	author john;	state Exp;
branches;
next	1.17;

1.17
date	2011.11.12.00.23.17;	author john;	state Exp;
branches;
next	1.16;

1.16
date	2004.12.24.00.01.07;	author john;	state Exp;
branches;
next	1.15;

1.15
date	2003.06.09.16.17.07;	author john;	state Exp;
branches;
next	1.14;

1.14
date	2000.09.22.16.41.30;	author john;	state Exp;
branches;
next	1.13;

1.13
date	96.09.13.21.49.05;	author john;	state Exp;
branches;
next	1.12;

1.12
date	96.02.07.16.01.04;	author jkc;	state Exp;
branches;
next	1.11;

1.11
date	96.01.12.20.41.51;	author jkc;	state Exp;
branches;
next	1.10;

1.10
date	96.01.04.16.58.04;	author john;	state Exp;
branches;
next	1.9;

1.9
date	94.11.28.15.47.37;	author john;	state Exp;
branches;
next	1.8;

1.8
date	94.08.25.15.01.36;	author jkc;	state Exp;
branches;
next	1.7;

1.7
date	93.11.24.16.56.45;	author john;	state Exp;
branches;
next	1.6;

1.6
date	93.08.13.10.28.32;	author john;	state Exp;
branches;
next	1.5;

1.5
date	92.11.16.08.32.28;	author jkc;	state Exp;
branches;
next	1.4;

1.4
date	92.11.10.12.38.10;	author jkc;	state Exp;
branches;
next	1.3;

1.3
date	92.10.26.11.32.10;	author john;	state Exp;
branches;
next	1.2;

1.2
date	91.09.05.08.52.27;	author jkcohen;	state Exp;
branches;
next	1.1;

1.1
date	91.06.28.09.45.48;	author jkcohen;	state Exp;
branches;
next	;


desc
@Append one data set to another using the headers of the first set.
@


1.18
log
@added Reg Beardsley's checkpar()
@
text
@/* Copyright (c) Colorado School of Mines, 2011.*/
/* All rights reserved.                       */

/* SUVCAT: $Revision: 1.16 $ ; $Date: 2004/12/24 00:01:07 $	*/

#include "su.h"
#include "segy.h"

/*********************** self documentation **********************/
char *sdoc[] = {
" 								",
" SUVCAT -  append one data set to another, with or without an  ", 
"           overlapping	region.  Data in the overlap may be     ",
"           determined by one of several methods.               ",
" 								",
" suvcat data1 data2 >stdout					",
" 								",
" Required parameters:						",
"        none							",
"                                                               ",
" Optional parameters for overlapping sections:			",
"                                                               ",
"  taplen=0    Length of overlap in integer number of           ",
"                  samples.(Default is 0.)                      ",
"                                                               ",
"  taptype=0    Type of taper or combination method in the	",
"                  overlap region.  0 - average                 ",
"                                   1 - maximum magnitude       ",
"                                   2 - cosine scaled           ",
"                                   3 - summation               ",
"                                                               ",
" Computational Notes:						",
"                                                               ", 
" This program vertically concatenates traces from data2 onto   ",
" the end of the corresponding traces in data1, with a region   ",
" of overlap, defined by taplen.  Data in the overlapping       ", 
" region is combined by the method specified by taptype. The    ",
" currently available methods are:                              ",
"                                                               ",
"     taptype=0    output is assigned the unweighted average of ",
"                  each point in the overlap                    ",
"     taptype=1    output is assigned the value of the maximum  ",
"                  absolute value of each point in the overlap  ",
"     taptype=2    output is assigned the weighted average of   ",
"                  each point in the overlap, where the output  ",
"                  is the sum of cos(x) times the values on the ",
"                  first section, and 1-cos(x) times the values ",
"                  on the second section, where x is factor that",
"                  goes from 0 to pi/2 across the overlap. This ",
"                  favors the upper section in the upper part of",
"                  the overlap, and favors the lower section in ",
"                  the lower part of the overlap.               ",
"     taptype=3    output is assigned the sum of the amplitudes ",
"                  at each sample in the overlap                ",
" 								",
NULL};

/* Credits:
 *	CWP: Jack K. Cohen, Michel Dietrich (Original SUVCAT)
 *	     Steven D. Sheaffer (modifed to include overlap) 
 * IfG Kiel: Thies Beilecke (added taptype=3)
 *
 * Trace header fields accessed:  ns
 * Trace header fields modified:  ns
 */
/**************** end self doc ***********************************/

segy intrace1, intrace2;

int
main(int argc, char **argv)
{
	FILE *fp1;	/* file pointer for first file		*/
	FILE *fp2;	/* file pointer for second file		*/
	int data2flag=0;/* return from gettr on data set #2	*/
	int itr = 0;	/* number of trace being processed	*/
	int taplen;     /* length of overlap in samples         */
	int taptype;    /* flag for type of averaging           */
	float hold;     /* temporary variable                   */
	float *outtrace;/* temporary space for output trace     */
	int i;          /* counter                              */
        float s1,s2;    /* scale factors                        */

	/* Initialize */
	initargs(argc, argv);
	requestdoc(2); /* two file args required */

	/* Get parameters  */
	if(!getparint("taplen", &taplen))   taplen=0 ;
	if(!getparint("taptype", &taptype))   taptype=0 ;

        checkpars();
	if(taptype > 3) err("taptype must be 0, 1, 2, or 3!\n");

	/* Open two files given as arguments for reading */
	fp1 = efopen(argv[1], "r");
	fp2 = efopen(argv[2], "r");

	/* Loop over the traces */
	while (fgettr(fp1, &intrace1) &&
				(data2flag = fgettr(fp2, &intrace2))) {
	        int nt1 = intrace1.ns;
		int nt2 = intrace2.ns;
		int nt  = nt1+nt2-taplen;
		outtrace = alloc1float(nt);

		if (nt > SU_NFLTS)
			err("nt=%d exceeds SU_NFLTS=%d", nt, SU_NFLTS);

	/* Copy data from 1 to output trace up to the start of overlap */

		for(i=0; i<nt1-taplen; i++){
		    outtrace[i] = intrace1.data[i];
		} 

	/* Combine data in the overlapping region by the average */

	        if(taptype==0){

  		for(i=0; i<taplen; i++){                                   
  		    hold=intrace1.data[nt1-taplen+i]+intrace2.data[i];     
  		    outtrace[nt1-taplen+i]=hold*0.5;                       
  		}                                                          
		}

	/* Combine data in the overlapping region by using the maximum */

		if(taptype==1){

	  	for(i=0; i<taplen; i++){
	    	  if(abs(intrace1.data[nt1-taplen+i])>
					abs(intrace2.data[i])){
			hold = intrace1.data[nt1-taplen+i];
	    	  }else{
		        hold = intrace2.data[i];
	    	} 
	    	outtrace[nt1-taplen+i] = hold; 
          	}
		}

	/* Combine data in overlap using a cosine scale */

		if(taptype==2){

                for(i=0; i<taplen; i++){                                   
		  s1 = cos((PI/2)*(i/(taplen-1)));
		  s2 = 1-s1;
                  hold = s1*intrace1.data[nt1-taplen+i] + s2*intrace2.data[i];     
                  outtrace[nt1-taplen+i]=hold;                       
                }                                                          
                }

	/* Combine data in overlap using a simple summation */

		if(taptype==3){

                for(i=0; i<taplen; i++){
                  hold = intrace1.data[nt1-taplen+i] + intrace2.data[i];     
                  outtrace[nt1-taplen+i]=hold;                       
                }                                                          
                }

	/* Copy data from 2 to fill up remaining output trace  */

		for(i=0; i<nt2-taplen; i++){
		    outtrace[nt1+i]=intrace2.data[i+taplen];
		};

	/* modify header and put outtrace into old data1  */

		intrace1.ns = nt;

		for(i=0; i<nt; i++){
		  intrace1.data[i] = outtrace[i];
		};
		puttr(&intrace1); 
		++itr;
	}

	/* See if both files exhausted; notice if fd1 exhausted, then
	   we don't do an fgettr on fd2 on the final pass above */
	if (!data2flag) {
		warn("%s still had traces when %s was exhausted",
						argv[1], argv[2]);
		warn("processed %d pairs of traces before EOF", itr);
	} else if (fgettr(fp2, &intrace2)) {
		warn("%s still had traces when %s was exhausted",
						argv[2], argv[1]);
		warn("processed %d pairs of traces before EOF", itr);
	}


	return(CWP_Exit());
}
@


1.17
log
@copyright
@
text
@d92 1
@


1.16
log
@Thies Beilecke (added taptype=3) option added
@
text
@d1 4
a4 1
/* SUVCAT: $Revision: 1.15 $ ; $Date: 2003/06/09 16:17:07 $	*/
@


1.15
log
@9 June 2003
@
text
@d1 1
a1 1
/* SUVCAT: $Revision: 1.14 $ ; $Date: 2000/09/22 16:41:30 $	*/
d27 1
d50 2
d58 1
d89 1
a89 1
	if(taptype > 2) err("taptype must be 0, 1, or 2!\n");
d145 10
@


1.14
log
@Steve Sheaffer's extension to allow overlap
@
text
@d1 1
a1 1
/* SUVCAT: $Revision: 2.00 $ ; $Date: 1997/09/26 $	*/
d175 1
a175 1
	return EXIT_SUCCESS;
@


1.13
log
@silenced -Wall messages
@
text
@d1 1
a1 1
/* SUVCAT: $Revision: 1.12 $ ; $Date: 1996/02/07 16:01:04 $	*/
d9 3
a11 1
" SUVCAT - append one data set to another			",
d16 33
a48 1
" 	none							",
a49 13
" Optional parameters:						",
" 	none							",
" 								",
" Notes:							",
" Output = modified header of data1 then data1 then data2	",
" 								",
" This program vertically concatenates data2 onto data1, meaning",
" that each trace of data2 is appended to the corresponding	",
" trace of data1. To do a simple or horizontal concatenation,	",
" so that the traces of data2 simply follow the traces of data1,",
" use the Unix commmand						",
" 								",
"       cat data1 data2 > sdtout				",
d53 2
a54 1
 *	CWP: Jack K. Cohen, Michel Dietrich
a60 1

d70 6
a75 1

d81 5
a90 1

d94 1
a94 1
		int nt1 = intrace1.ns;
d96 2
a97 1
		int nt  = nt1+nt2;
d101 52
a152 3
		
		memcpy( (void *) (intrace1.data + nt1),
				(const void *) intrace2.data, nt2*FSIZE); 
d154 5
a158 1
		puttr(&intrace1);
@


1.12
log
@Deal with header fields accessed/modified down to sudoc.
@
text
@d1 1
a1 1
/* SUVCAT: $Revision: 1.11 $ ; $Date: 1996/01/12 20:41:51 $	*/
d42 1
d47 1
a47 1
	int data2flag;	/* return from gettr on data set #2	*/
@


1.11
log
@Per Stew's support of multiple file streams in fgettr/fputtr, removed
the calls to vgettr/vputtr.
@
text
@d1 1
a1 1
/* SUVCAT: $Revision: 1.10 $ ; $Date: 1996/01/04 16:58:04 $	*/
a28 4
" 								",
" Trace header fields accessed:  ns				",
" Trace header fields modified:  ns				",
" 								",
d33 3
@


1.10
log
@changed nt1 to nt2 for the number of floats in memcpy, added
an error trapping to prevent outputting traces longer than
SU_NFLTS, and added more explanation in the selfdoc--- thanks
to Gonzalo Perez of the University of Chile for first bug
fix. Thanks to Mikki Hand of CSM for prompting the last change.
@
text
@d1 1
a1 1
/* SUVCAT: $Revision: 1.9 $ ; $Date: 1994/11/28 15:47:37 $	*/
a18 3
" Trace header fields accessed:  ns				",
" Trace header fields modified:  ns				",
" 								",
d24 1
a24 1
" trace of data1. To perform a simple or horizontal concatenation,",
d30 3
d62 2
a63 2
	while (fvgettr(fp1, &intrace1) &&
				(data2flag = fvgettr(fp2, &intrace2))) {
d68 1
a68 1
		if ( nt > SU_NFLTS)
d79 1
a79 1
	   we don't do an fvgettr on fd2 on the final pass above */
d84 1
a84 1
	} else if (fvgettr(fp2, &intrace2)) {
@


1.9
log
@moved fvgettr definition to libsu.a and added vgettr macro
@
text
@d1 1
a1 1
/* SUVCAT: $Revision: 1.8 $ ; $Date: 94/08/25 15:01:36 $	*/
d22 10
a31 1
" Note: Output = modified header of data1 then data1 then data2	",
d36 1
a36 1
 *	CWP: Jack, Michel
d66 4
d72 2
a73 2
				(const void *) intrace2.data, nt1*FSIZE); 
		intrace1.ns = nt1 + nt2;
a92 1

@


1.8
log
@Removed copyright statement from codes that had it.
Moved self-doc line for sudoc.
@
text
@d1 1
a1 1
/* SUVCAT: $Revision: 1.7 $ ; $Date: 93/11/24 16:56:45 $	*/
a30 2
/* prototype */
int fvgettr(FILE *fp, segy *tp);
a80 73

#include "header.h"

/* fvgettr - get a segy trace from a file by file pointer (nt can vary)
 *
 * Returns:
 *	int: number of bytes read on current trace (0 after last trace)
 *
 * Synopsis:
 *	int fvgettr(FILE *fp, segy *tp)
 *
 *
 * Credits:
 *	Cloned from .../su/lib/fgettr.c
 *
 */


int fvgettr(FILE *fp, segy *tp)
{
	static unsigned long itr = 0;	/* number of traces read	*/
	static cwp_Bool first = true;	/* to check if first entry	*/
	static FileType ftype;		/* file type of input *fp	*/
	static unsigned short bytesper;	/* bytes per datum (packed?)	*/
	int databytes;			/* data bytes on current segy	*/
	int nt;				/* samples on trace (can vary)	*/
	int nsegy; 			/* total bytes on current segy	*/
	int nread;			/* bytes seen by fread calls	*/


	if (first) {
		first = false;

		switch (ftype = filestat(fileno(fp))) {
		case DIRECTORY:
			err("%s: stdin can't be a directory", __FILE__);
		case TTY:
			err("%s: stdin can't be tty", __FILE__);
		default:
			if      (tp->trid==CHARPACK)   bytesper=sizeof(char);
			else if (tp->trid==SHORTPACK)  bytesper=sizeof(short);
			else			       bytesper=sizeof(float);
		}
	}

	/* Get the header */
	switch (nread = efread(tp, 1, HDRBYTES, fp)) {
	case 0:   return 0; /* no more traces */
	default:  if (nread != HDRBYTES)
			err("%s: bad header, trace #%ld", __FILE__, itr);
	break;
	}

	/* Have the header, now for the data */
	nt = tp->ns;
	if (nt > SU_NFLTS)
		err("%s: unable to handle %d > %d "
			"samples per trace", __FILE__, nt, SU_NFLTS);

	databytes = bytesper * nt;
	nsegy = HDRBYTES + databytes;

	switch (nread = efread(tp->data, 1, databytes, fp)) {
	case 0:   err("%s: no data on trace #%ld, itr", __FILE__);
	default:  if (nread != databytes)
			 err("%s: trace #%ld, read only %d bytes of %u",
				__FILE__, itr, nread, databytes);
	break;
	}

	++itr;
	return nsegy;
}
@


1.7
log
@added explicit casts to memcpy
@
text
@d1 1
a1 1
/* SUVCAT: $Revision: 1.6 $ ; $Date: 93/08/13 10:28:32 $	*/
a2 13
/*----------------------------------------------------------------------
 * Copyright (c) Colorado School of Mines, 1990.
 * All rights reserved.
 *
 * This code is part of SU.  SU stands for Seismic Unix, a processing line
 * developed at the Colorado School of Mines, partially based on Stanford
 * Exploration Project (SEP) software.  Inquiries should be addressed to:
 *
 *  Jack K. Cohen, Center for Wave Phenomena, Colorado School of Mines,
 *  Golden, CO 80401  (jkc@@dix.mines.colorado.edu)
 *----------------------------------------------------------------------
 */

a24 1
/**************** end self doc ***********************************/
d29 1
@


1.6
log
@changed Bool to cwp_Bool
@
text
@d1 1
a1 1
/* SUVCAT: $Revision: 1.5 $ ; $Date: 92/11/16 08:32:28 $	*/
d73 2
a74 1
		memcpy(intrace1.data + nt1, intrace2.data, nt1*FSIZE); 
@


1.5
log
@Added prototype.
@
text
@d1 1
a1 1
/* SUVCAT: $Revision: 1.4 $ ; $Date: 92/11/10 12:38:10 $	*/
d116 1
a116 1
	static Bool first = true;	/* to check if first entry	*/
@


1.4
log
@make fvgettr an internal sub since this is only program using
variable length traces.
@
text
@d1 1
a1 1
/* SUVCAT: $Revision: 1.3 $ ; $Date: 92/10/26 11:32:10 $	*/
d43 3
@


1.3
log
@new selfdoc installed
@
text
@d1 1
a1 1
/* SUVCAT: $Revision: 1.2 $ ; $Date: 91/09/05 08:52:27 $	*/
d90 74
@


1.2
log
@string -> String and so forth
@
text
@d1 1
a1 1
/* SUVCAT: $Revision: 1.4 $ ; $Date: 90/12/26 00:04:40 $	*/
d20 18
a37 18
String sdoc =
" 								\n"
" SUVCAT - append one data set to another			\n"
" 								\n"
" suvcat data1 data2 >stdout					\n"
" 								\n"
" Required parameters:						\n"
" 	none							\n"
" 								\n"
" Optional parameters:						\n"
" 	none							\n"
" 								\n"
" Trace header fields accessed:  ns				\n"
" Trace header fields modified:  ns				\n"
" 								\n"
" Note: Output = modified header of data1 then data1 then data2	\n"
" 								\n"
;
d56 1
a56 1
	askdoc(2); /* two file args required */
@


1.1
log
@Initial revision
@
text
@d20 1
a20 1
string sdoc =
@
