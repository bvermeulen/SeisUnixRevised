head	1.25;
access;
symbols;
locks; strict;
comment	@ * @;


1.25
date	2015.05.22.18.31.12;	author john;	state Exp;
branches;
next	1.24;

1.24
date	2011.11.17.22.38.18;	author john;	state Exp;
branches;
next	1.23;

1.23
date	2011.11.16.23.09.52;	author john;	state Exp;
branches;
next	1.22;

1.22
date	2011.11.12.00.23.17;	author john;	state Exp;
branches;
next	1.21;

1.21
date	2006.06.30.17.38.30;	author john;	state Exp;
branches;
next	1.20;

1.20
date	2006.06.30.17.32.09;	author john;	state Exp;
branches;
next	1.19;

1.19
date	2003.10.09.16.19.38;	author john;	state Exp;
branches;
next	1.18;

1.18
date	2003.08.04.17.37.31;	author john;	state Exp;
branches;
next	1.17;

1.17
date	2003.08.04.17.34.42;	author john;	state Exp;
branches;
next	1.16;

1.16
date	2003.08.04.17.33.37;	author john;	state Exp;
branches;
next	1.15;

1.15
date	2002.10.28.19.11.09;	author john;	state Exp;
branches;
next	1.14;

1.14
date	2002.10.28.19.09.36;	author john;	state Exp;
branches;
next	1.13;

1.13
date	96.09.18.19.04.39;	author jkc;	state Exp;
branches;
next	1.12;

1.12
date	96.09.13.21.49.05;	author john;	state Exp;
branches;
next	1.11;

1.11
date	96.02.05.16.06.35;	author jkc;	state Exp;
branches;
next	1.10;

1.10
date	95.10.23.16.41.51;	author john;	state Exp;
branches;
next	1.9;

1.9
date	94.08.25.15.00.18;	author jkc;	state Exp;
branches;
next	1.8;

1.8
date	93.08.09.15.19.45;	author john;	state Exp;
branches;
next	1.7;

1.7
date	92.10.23.15.38.02;	author john;	state Exp;
branches;
next	1.6;

1.6
date	91.10.17.13.33.43;	author jkc;	state Exp;
branches;
next	1.5;

1.5
date	91.09.05.08.51.23;	author jkcohen;	state Exp;
branches;
next	1.4;

1.4
date	90.12.26.00.04.40;	author jkc;	state Exp;
branches;
next	1.3;

1.3
date	90.12.23.16.35.16;	author jkc;	state Exp;
branches;
next	1.2;

1.2
date	90.07.21.18.44.24;	author jkc;	state Exp;
branches;
next	1.1;

1.1
date	90.07.21.12.37.28;	author jkc;	state Exp;
branches;
next	;


desc
@Do the 4 common binary ops.  Should replace sudiff, susum, ...
@


1.25
log
@ Florian Bleibinhaus re addition of zippol option
@
text
@/* Copyright (c) Colorado School of Mines, 2015.*/
/* All rights reserved.			*/

/* SUOP2: $Revision: 1.25 $ ; $Date: 2015/05/22 12:38:18 $	*/

#include "su.h"
#include "segy.h"

/*********************** self documentation **********************/
char *sdoc[] = {
" 									",
" SUOP2 - do a binary operation on two data sets			",
" 									",
" suop2 data1 data2 op=diff [trid=111] >stdout				",
" 									",
" Required parameters:							",
" 	none								",
" 									",
" Optional parameter:							",
" 	op=diff		difference of two panels of seismic data	",
" 			=sum  sum of two panels of seismic data		",
" 			=prod product of two panels of seismic data	",
" 			=quo quotient of two panels of seismic data	",
" 			=ptdiff differences of a panel and single trace	",
" 			=ptsum sum of a panel and single trace		",
" 			=ptprod product of a panel and single trace	",
" 			=ptquo quotient of a panel and single trace	",
" 			=zipper do \"zipper\" merge of two panels	",
"			=zippol convert polar to rectangular and then zip",
" 									",
"  trid=FUNPACKNYQ	output trace identification code. (This option  ",
" 			is active only for op=zipper)			",
"			For SU version 39-43 FUNPACNYQ=111		",
" 			(See: sukeyword trid     for current value)	",
" 									",
" 									",
" Note1: Output = data1 \"op\" data2 with the header of data1		",
" 									",
" Note2: For convenience and backward compatibility, this		",
" 	program may be called without an op code as:			",
" 									",
" For:  panel \"op\" panel  operations: 				",
" 	susum  file1 file2 == suop2 file1 file2 op=sum			",
" 	sudiff file1 file2 == suop2 file1 file2 op=diff			",
" 	suprod file1 file2 == suop2 file1 file2 op=prod			",
" 	suquo  file1 file2 == suop2 file1 file2 op=quo			",
" 									",
" For:  panel \"op\" trace  operations: 				",
" 	suptsum  file1 file2 == suop2 file1 file2 op=ptsum		",
" 	suptdiff file1 file2 == suop2 file1 file2 op=ptdiff		",
" 	suptprod file1 file2 == suop2 file1 file2 op=ptprod		",
" 	suptquo  file1 file2 == suop2 file1 file2 op=ptquo		",
" 									",
" Note3: If an explicit op code is used it must FOLLOW the		",
"	filenames.							",
" 									",
" Note4: With op=quo and op=ptquo, divide by 0 is trapped and 0 is returned.",
" 									",
" Note5: Weighted operations can be specified by setting weighting	",
"	coefficients for the two datasets:				",
"	w1=1.0								",
"	w2=1.0								",
" 									",
" Note6: With op=zipper, it is possible to set the output trace id code ",
" 		(See: sukeyword trid)					",
"  This option processes the traces from two files interleaving its samples.",
"  Both files must have the same trace length and must not longer than	",
"  SU_NFLTS/2  (as in SU 39-42  SU_NFLTS=32768).			",
"			  						",
"  Being \"tr1\" a trace of data1 and \"tr2\" the corresponding trace of",
"  data2, The merged trace will be :					",
"			  						",
"  tr[2*i]= tr1[i]							",
"  tr[2*i+1] = tr2[i]							",
" 									",
"  The default value of output tr.trid is that used by sufft and suifft,",
"  which is the trace id reserved for the complex traces obtained through",
"  the application of sufft. See also, suamp.				",
" 									",
" Note 7: op=zippol is like op=zipper, but the input samples are polar	",
"	(amplitude and phase) and are converted to cartesian (real, imag)",
"	before interleaving them.					",
" 									",
" For operations on non-SU binary files  use:farith 			",
NULL};

/* Credits:
 *	SEP: Shuki Ronen
 *	CWP: Jack K. Cohen
 *	CWP: John Stockwell, 1995, added panel op trace options.
 *	: Fernando M. Roxo da Motta <petro@@roxo.org> - added zipper op
 *
 * Notes:
 *	If efficiency becomes important consider inverting main loop
 *	and repeating operation code within the branches of the switch.
 */
/**************** end self doc ***********************************/

#define	ADD	1
#define	SUB	2
#define	MUL	3
#define	DIV	4
#define	ZIPPER	5
#define	ZIPPOL	6
#define	TPANOP	7
#define	PTADD	7
#define	PTSUB	8
#define	PTMUL	9
#define	PTDIV	10

segy intrace1, intrace2;

int
main(int argc, char **argv)
{
	FILE *fp1=NULL;		/* file pointer for first file	*/
	FILE *fp2=NULL;		/* file pointer for second file	*/
	cwp_String op="diff";	/* operation: add, sub, mul, div*/
	int iop=SUB;		/* integer abbrev. for op in switch	*/
	int nt=0;		/* number of sample points on trace	*/
	int nbytes=0;		/* number of bytes on traces		*/
	int itr=0;		/* number of trace being processed	*/
	int trid=0;  		 /* number of trace being processed	*/

	float w1=0.0;	/* weighting function for first file*/
	float w2=0.0;	/* weighting function for second file  */

	/* Initialize */
	initargs(argc, argv);
	requestdoc(2); /* two file args required */


	/* Open two files given as arguments for reading */
	fp1 = efopen(argv[1], "r");
	fp2 = efopen(argv[2], "r");


	getparfloat( "w1" ,&w1 );
	getparfloat( "w2" ,&w2 );

	/* Get operation , recall iop initialized to the default SUB*/
	getparstring("op", &op);
	if	(STREQ(op, "sum"))	iop = ADD;
	else if (STREQ(op, "prod"))	iop = MUL;
	else if (STREQ(op, "quo"))	iop = DIV;
	else if (STREQ(op, "ptdiff"))	iop = PTSUB;
	else if (STREQ(op, "ptsum"))	iop = PTADD;
	else if (STREQ(op, "ptprod"))	iop = PTMUL;
	else if (STREQ(op, "ptquo"))	iop = PTDIV;
	else if (STREQ(op, "zipper"))	iop = ZIPPER;
	else if (STREQ(op, "zippol"))	iop = ZIPPOL;
	else if (!STREQ(op, "diff"))
		err("unknown operation=\"%s\", see self-doc", op);

	/* getpar trid if set */
	if ( iop == ZIPPER || iop == ZIPPOL ) {
		/* Get optional parameter trid */
		if (!getparint( "trid" ,&trid ))	trid = FUNPACKNYQ;

	}

	checkpars();

	/* panel operations */
	if (iop <= TPANOP) { /* do panel op panel operations */
		/* Loop over the traces */
		while (fgettr(fp1, &intrace1) &&
					(nbytes = fgettr(fp2, &intrace2))) {

			/* verify that ns is the same in both files */
			if ((nt = intrace1.ns) != intrace2.ns) {
				warn("trace %d:", itr);
				err("%s and %s have different ns (%d vs %d)",
				argv[1], argv[2], intrace1.ns, intrace2.ns);
			}
			if( intrace1.trid == FUNPACKNYQ && intrace2.trid == FUNPACKNYQ ){
			   warn( "performing complex arithmetic" );
			}

			/* apply scaling factors */
			if( w1 != 0.0 && w2 != 0.0 ){
				int i;
				for (i = 0; i < nt; ++i){
					intrace1.data[i] *= w1;
					intrace2.data[i] *= w2;
				}
	 		}
					
			/* Do the desired binary operation */
			switch(iop) { register int i;
			case SUB:
				for (i = 0; i < nt; ++i)
					intrace1.data[i] -= intrace2.data[i];
			break;
			case ADD:
				for (i = 0; i < nt; ++i)
					intrace1.data[i] += intrace2.data[i];
			break;
			case MUL:
				if( intrace1.trid == FUNPACKNYQ && intrace2.trid == FUNPACKNYQ  ){
				   float a,b ,c ,d;
   				   for (i = 2; i < nt-2; i+=2 ) {
					 a = intrace1.data[i];
					 b = intrace1.data[i+1];
					 c = intrace2.data[i];
					 d = intrace2.data[i+1];
					 intrace1.data[i] = a*c - b*d; 
					 intrace1.data[i+1] = a*d + b*c;
				   
				   }
				}else{
				   for (i = 0; i < nt; ++i){
					   intrace1.data[i] *= intrace2.data[i];
				   }
				}
			break;
			case DIV:

				if( intrace1.trid == FUNPACKNYQ && intrace2.trid == FUNPACKNYQ ){
				   float a,b ,c ,d;
   				   for (i = 2; i < nt; i+=2 ) {
				      a = intrace1.data[i];
				      b = intrace1.data[i+1];
				      c = intrace2.data[i];
				      d = intrace2.data[i+1];
				      if( c == 0.0 && d == 0.0 ){
					 intrace1.data[i] = 0.0;
					 intrace1.data[i+1] = 0.0;
				      }else if( c == 0.0 ){
					 intrace1.data[i] =  - b/d;
				      }else if( d == 0.0 ){
					 intrace1.data[i+1] = b/c;
				      }else{
					 intrace1.data[i] = a/c - b/d; 
					 intrace1.data[i+1] = a/d + b/c;
				   
				      }
				   }
				}else{
				   for (i = 0; i < nt; ++i) {
					   float denom = intrace2.data[i];
					   if (!denom) intrace1.data[i] = 0.0;
					   else	intrace1.data[i] /= denom;
				   }
				}
			break;
			case ZIPPER:
				for (i = nt-1; i >= 0; --i) {
					intrace1.data[2*i] = intrace1.data[i];
					intrace1.data[2*i+1] = intrace2.data[i];
				}

				/* update output trace header */
				intrace1.trid = trid;
				intrace1.ns= 2*nt;
			break;
			case ZIPPOL:
				for (i = nt-1; i >= 0; --i) {
					intrace1.data[2*i+1] = intrace1.data[i]
							*sin(intrace2.data[i]);
					intrace1.data[2*i] = intrace1.data[i]
							*cos(intrace2.data[i]);
				}
				/* update output trace header */
				intrace1.trid = trid;
				intrace1.ns= 2*nt;
			break;
			default:  /* defensive programming */
				err("mysterious operation=\"%s\"", op);
			}

			puttr(&intrace1);
			++itr;
		}

		/* See if both files exhausted; note if fd1 exhausted, then */
		/* we don't do an fgettr on fd2 on the final pass above */
		if (!nbytes) {
			warn("%s still had traces when %s was exhausted",
						argv[1], argv[2]);
			warn("processed %d pairs of traces before EOF", itr);
		} else if (fgettr(fp2, &intrace2)) {
			warn("%s still had traces when %s was exhausted",
						argv[2], argv[1]);
			warn("processed %d pairs of traces before EOF", itr);
		}
	} else { /* do panel op trace operations */

		/* get single seismic trace from file2 */
		fgettr(fp2,&intrace2);

		/* apply scaling factor for trace 2 */
		if(w2!=0.0){
 			int i;
	 		for (i = 0; i < nt; ++i){
				intrace2.data[i] *= w2;
	 		}
		}

		/* Loop over the traces */
		while (fgettr(fp1, &intrace1)) {

			/* apply scaling factor for trace 1 */
	 		if(w1!=0.0) {
				int i;
	  			for (i = 0; i < nt; ++i) {
					intrace1.data[i] *= w1;
	  			}
			}

			/* check that the number of samples is same on both */
			if ((nt = intrace1.ns) != intrace2.ns) {
				warn("trace %d:", itr);
				err("%s and %s have different ns (%d vs %d)",
				argv[1], argv[2], intrace1.ns, intrace2.ns);
			}

			/* Do the desired binary operation */
			switch(iop) { register int i;
			case PTSUB:
				for (i = 0; i < nt; ++i)
					intrace1.data[i] -= intrace2.data[i];
			break;
			case PTADD:
				for (i = 0; i < nt; ++i)
					intrace1.data[i] += intrace2.data[i];
			break;
			case PTMUL:
				if( intrace1.trid == FUNPACKNYQ && intrace2.trid == FUNPACKNYQ ){
				   float a,b ,c ,d;
   				   for (i = 0; i < nt; i+=2 ) {
					 a = intrace1.data[i];
					 b = intrace1.data[i+1];
					 c = intrace2.data[i];
					 d = intrace2.data[i+1];
					 intrace1.data[i] = a*c - b*d; 
					 intrace1.data[i+1] = a*d + b*c;
				   
				   }
				}else{
				   for (i = 0; i < nt; ++i)
					   intrace1.data[i] *= intrace2.data[i];
				}
			break;
			case PTDIV:
				if( intrace1.trid == FUNPACKNYQ  && intrace2.trid == FUNPACKNYQ ){
				   float a,b ,c ,d;
   				   for (i = 0; i < nt; i+=2 ) {
				      a = intrace1.data[i];
				      b = intrace1.data[i+1];
				      c = intrace2.data[i];
				      d = intrace2.data[i+1];
				      if( c == 0.0 && d == 0.0 ){
					 intrace1.data[i] = 0.0;
					 intrace1.data[i+1] = 0.0;
				      }else if( c == 0.0 ){
					 intrace1.data[i] =  - b/d;
				      }else if( d == 0.0 ){
					 intrace1.data[i+1] = b/c;
				      }else{
					 intrace1.data[i] = a/c - b/d; 
					 intrace1.data[i+1] = a/d + b/c;
				   
				      }
				   }
				}else{
				   for (i = 0; i < nt; ++i) {
					   float denom = intrace2.data[i];
					   if (!denom) intrace1.data[i] = 0.0;
					   else	intrace1.data[i] /= denom;
				   }
				}
			break;
			default:  /* defensive programming */
				err("mysterious operation=\"%s\"", op);
			}

			puttr(&intrace1);
			++itr;
		}

	}


	return(CWP_Exit());
}

@


1.24
log
@small typo fix.
@
text
@d1 1
a1 1
/* Copyright (c) Colorado School of Mines, 2011.*/
d4 1
a4 1
/* SUOP2: $Revision: 1.23 $ ; $Date: 2011/11/16 23:09:52 $	*/
d29 1
d80 4
d104 6
a109 5
#define	TPANOP	6
#define	PTADD	6
#define	PTSUB	7
#define	PTMUL	8
#define	PTDIV	9
d151 1
d156 1
a156 1
	if ( iop == ZIPPER ) {
d248 1
a248 1
				for (i = nt; i > 0; --i) {
a251 1
				intrace1.data[1] = intrace2.data[0];
d257 11
d387 1
@


1.23
log
@added Reg Beardsley's checkpar() and put in support for
complex arithmetic operations
@
text
@d4 1
a4 1
/* SUOP2: $Revision: 1.21 $ ; $Date: 2006/06/30 17:38:30 $	*/
d169 1
a169 1
			if( intrace1.trid == FUNPACKNYQ && intrace2.trid == FUNBACKNYQ ){
@


1.22
log
@copyright
@
text
@d2 1
a2 1
/* All rights reserved.                       */
d32 2
a33 2
"			For SU version 39 FUNPACNYQ=111			",
" 			(See: sukeyword trid)				",
d60 1
a60 1
"	w1=1.0							 ",
d67 1
a67 1
"  SU_NFLTS/2  (as in SU 39  SU_NFLTS=32768).				",
d155 1
d169 3
d193 16
a208 2
				for (i = 0; i < nt; ++i)
					intrace1.data[i] *= intrace2.data[i];
d211 27
a237 4
				for (i = 0; i < nt; ++i) {
					float denom = intrace2.data[i];
					if (!denom) intrace1.data[i] = 0.0;
					else	intrace1.data[i] /= denom;
d312 15
a326 2
				for (i = 0; i < nt; ++i)
					intrace1.data[i] *= intrace2.data[i];
d329 26
a354 4
				for (i = 0; i < nt; ++i) {
					float denom = intrace2.data[i];
					if (!denom) intrace1.data[i] = 0.0;
					else	intrace1.data[i] /= denom;
@


1.21
log
@small changes
@
text
@d1 4
a4 1
/* SUOP2: $Revision: 1.20 $ ; $Date: 2006/06/30 17:32:09 $	*/
@


1.20
log
@small cleanup
@
text
@d1 1
a1 1
/* SUOP2: $Revision: 1.1 $ ; $Date: 2006/06/30 17:15:30 $	*/
d95 6
a100 6
#define	TPANOP	5
#define	PTADD	5
#define	PTSUB	6
#define	PTMUL	7
#define	PTDIV	8
#define	PZIPPER	9
d141 1
a141 1
	else if (STREQ(op, "zipper"))	iop = PZIPPER;
d146 1
a146 1
	if ( iop == PZIPPER ) {
d196 1
a196 1
			case PZIPPER:
d202 1
@


1.19
log
@weighting added by Reg Beardsley
@
text
@d1 1
a1 1
/* SUOP2: $Revision: 36.2 $ ; $Date: 2003/10/08 21:59:10 $	*/
d11 1
a11 1
" suop2 data1 data2 op=diff >stdout					",
d25 7
d55 20
a74 4
" Note5: Weighted operations can be specified by setting weighting      ",
"        coefficients for the two datasets:                             ",
"        w1=1.0                                                         ",
"        w2=1.0                                                 ",
d76 1
a76 1
" For operations on non-SU binary files  use:   farith 		",
d83 1
d87 1
a87 1
 *      and repeating operation code within the branches of the switch.
d95 1
d100 1
d107 3
a109 3
	FILE *fp1=NULL;		/* file pointer for first file		*/
	FILE *fp2=NULL;		/* file pointer for second file		*/
	cwp_String op="diff";	/* operation: add, sub, mul, div	*/
d111 1
a111 1
	int nt=0;		/* number of sample points on traces	*/
d114 1
d116 2
a117 3
        float w1=0.0;         /* weighting function for first file */

        float w2=0.0;         /* weighting function for second file */
d129 2
a130 2
        getparfloat( "w1" ,&w1 );
        getparfloat( "w2" ,&w2 );
d134 1
a134 1
	if      (STREQ(op, "sum"))	iop = ADD;
d141 1
d145 7
d153 2
a154 1
	if (iop <= 4) { /* do panel op panel operations */
d159 1
d167 3
a169 4

                        if( w1 != 0.0 && w2 != 0.0 ){
 				int i;
                                for (i = 0; i < nt; ++i){
d172 3
a174 3
                                }
                        }
                                    
d193 7
a199 1
					else	    intrace1.data[i] /= denom;
d201 4
a204 1
					  
d215 1
a215 1
	   	/* we don't do an fgettr on fd2 on the final pass above */
d230 2
a231 3
                /* apply scaling factor for trace 2 */

                if( w2 != 0.0 ){
d233 1
a233 1
                        for (i = 0; i < nt; ++i){
d235 2
a236 2
                        }
                }
d242 1
a242 2

                	if( w1 != 0.0 ){
d244 1
a244 1
                        	for (i = 0; i < nt; ++i){
d246 2
a247 2
                        	}
                	}
d249 1
d274 1
a274 1
					else	    intrace1.data[i] /= denom;
a275 1
					  
@


1.18
log
@added verbiage in the selfdoc about - for stdin.
@
text
@d1 1
a1 1
/* SUOP2: $Revision: 1.17 $ ; $Date: 2003/08/04 17:34:42 $	*/
a11 2
"   If you wish so, one of the files data1 and data2 can be stdin.",
"   Indicate this by giving a - instead of a file-name",
a46 2
" Note5: The hyphen - may be used to indicate stdin as one of the input",
"  files. 								",
d48 6
d81 1
a81 1
	FILE *fp1;		/* file pointer for first file		*/
d85 1
a85 1
	int nt;			/* number of sample points on traces	*/
d89 3
d99 2
a100 11
	if (strcmp(argv[1],"-")!=0)
		fp1 = efopen(argv[1], "r");
	else
		fp1 = stdin;

	if (strcmp(argv[2],"-")!=0)
		fp2 = efopen(argv[2], "r");
	else if (strcmp(argv[1],"-")==0)
		err("Only one data set can be read from stdin");
	else
		fp2 = stdin;
d103 3
d130 10
d186 9
d197 9
@


1.17
log
@added NULL
@
text
@d1 1
a1 1
/* SUOP2: $Revision: 1.16 $ ; $Date: 2003/08/04 17:33:37 $	*/
d11 1
a11 1
" mysuop2 data1 data2 op=diff >stdout					",
d34 4
a37 4
" 	susum  file1 file2 == mysuop2 file1 file2 op=sum		",
" 	sudiff file1 file2 == mysuop2 file1 file2 op=diff		",
" 	suprod file1 file2 == mysuop2 file1 file2 op=prod		",
" 	suquo  file1 file2 == mysuop2 file1 file2 op=quo		",
d40 4
a43 4
" 	suptsum  file1 file2 == mysuop2 file1 file2 op=ptsum		",
" 	suptdiff file1 file2 == mysuop2 file1 file2 op=ptdiff		",
" 	suptprod file1 file2 == mysuop2 file1 file2 op=ptprod		",
" 	suptquo  file1 file2 == mysuop2 file1 file2 op=ptquo		",
d49 2
@


1.16
log
@added Martijn Frijlink
extension to allow input from stdin for one file
@
text
@d1 1
a1 1
/* SUOP2: $Revision: 1.13 $ ; $Date: 1996/09/18 19:04:39 $	*/
d78 1
a78 1
	FILE *fp2;		/* file pointer for second file		*/
@


1.15
log
@added reference to farith
@
text
@d1 1
a1 1
/* SUOP2: $Revision: 1.14 $ ; $Date: 2002/10/28 19:09:36 $	*/
d11 3
a13 1
" suop2 data1 data2 op=diff >stdout					",
d34 4
a37 4
" 	susum  file1 file2 == suop2 file1 file2 op=sum			",
" 	sudiff file1 file2 == suop2 file1 file2 op=diff			",
" 	suprod file1 file2 == suop2 file1 file2 op=prod			",
" 	suquo  file1 file2 == suop2 file1 file2 op=quo			",
d40 4
a43 4
" 	suptsum  file1 file2 == suop2 file1 file2 op=ptsum		",
" 	suptdiff file1 file2 == suop2 file1 file2 op=ptdiff		",
" 	suptprod file1 file2 == suop2 file1 file2 op=ptprod		",
" 	suptquo  file1 file2 == suop2 file1 file2 op=ptquo		",
a49 1
" For operations on non-SU binary files  use:   farith 		",
d92 11
a102 2
	fp1 = efopen(argv[1], "r");
	fp2 = efopen(argv[2], "r");
@


1.14
log
@*** empty log message ***
@
text
@d1 1
a1 1
/* SUOP2: $Revision: 1.13 $ ; $Date: 1996/09/18 19:04:39 $	*/
d48 1
@


1.13
log
@Used "missing" initialization in code.
@
text
@d1 1
a1 1
/* SUOP2: $Revision: 1.12 $ ; $Date: 1996/09/13 21:49:05 $	*/
d206 1
a206 1
	return EXIT_SUCCESS;
@


1.12
log
@silenced -Wall messages
@
text
@d1 1
a1 1
/* SUOP2: $Revision: 1.11 $ ; $Date: 1996/02/05 16:06:35 $	*/
d75 7
a81 7
	FILE *fp1;	/* file pointer for first file		*/
	FILE *fp2;	/* file pointer for second file		*/
	cwp_String op;	/* operation: add, sub, mul, div	*/
	int iop=0;	/* integer abbrev. for op in switch	*/
	int nt;		/* number of sample points on traces	*/
	int nbytes=0;	/* number of bytes on traces		*/
	int itr=0;	/* number of trace being processed	*/
d94 3
a96 7
	/* Get operation */
	if (!getparstring("op", &op))	op = "diff";



	if      (STREQ(op, "diff"))	iop = SUB;
	else if (STREQ(op, "sum"))	iop = ADD;
d103 2
a104 1
	else     err("unknown operation=\"%s\", see self-doc", op);
@


1.11
log
@Cosmetics.
@
text
@d1 1
a1 1
/* SUOP2: $Revision: 1.10 $ ; $Date: 1995/10/23 16:41:51 $	*/
d72 1
d78 1
a78 1
	int iop;	/* integer abbrev. for op in switch	*/
d80 2
a81 2
	int nbytes;	/* number of bytes on traces		*/
	int itr = 0;	/* number of trace being processed	*/
@


1.10
log
@added  panel "op" trace  operations
@
text
@d1 1
a1 1
/* SUOP2: $Revision: 1.9 $ ; $Date: 94/08/25 15:00:18 $	*/
d31 1
a31 1
" For:  panel \"op\" panel  operations: 									",
d37 1
a37 1
" For:  panel \"op\" trace  operations: 									",
d150 1
a150 1
		/* See if both files exhausted; notice if fd1 exhausted, then *\
@


1.9
log
@Removed copyright statement from codes that had it.
Moved self-doc line for sudoc.
@
text
@d1 1
a1 1
/* SUOP2: $Revision: 1.8 $ ; $Date: 93/08/09 15:19:45 $	*/
d8 40
a47 27
" 								",
" SUOP2 - do a binary operation on two data sets		",
" 								",
" suop2 data1 data2 op=diff >stdout				",
" 								",
" Required parameters:						",
" 	none							",
" 								",
" Optional parameter:						",
" 	op=diff		binary operation: sum, prod, quo,	",
" 	       		default is diff				",
" 								",
" Note1: Output = data1 op data2 with the header of data1	",
" 								",
" Note2: For convenience and backward compatibility, this	",
" 	program may be called without an op code as:		",
" 								",
" 	susum  file1 file2 == suop2 file1 file2 op=sum		",
" 	sudiff file1 file2 == suop2 file1 file2 op=diff		",
" 	suprod file1 file2 == suop2 file1 file2 op=prod		",
" 	suquo  file1 file2 == suop2 file1 file2 op=quo		",
" 								",
" Note3: If an explicit op code is used it must FOLLOW the	",
"	filenames.						",
" 								",
" Note4: With op=quo, divide by 0 is trapped and 0 is returned.	",
" 								",
d51 3
a53 2
 *	SEP: Shuki
 *	CWP: Jack
d65 4
d102 4
d109 8
a116 7
	/* Loop over the traces */
	while (fgettr(fp1, &intrace1) &&
				(nbytes = fgettr(fp2, &intrace2))) {

		if ((nt = intrace1.ns) != intrace2.ns) {
			warn("trace %d:", itr);
			err("%s and %s have different ns (%d vs %d)",
d118 42
d161 1
d163 10
a172 19
		/* Do the desired binary operation */
		switch(iop) { register int i;
		case SUB:
			for (i = 0; i < nt; ++i)
				intrace1.data[i] -= intrace2.data[i];
		break;
		case ADD:
			for (i = 0; i < nt; ++i)
				intrace1.data[i] += intrace2.data[i];
		break;
		case MUL:
			for (i = 0; i < nt; ++i)
				intrace1.data[i] *= intrace2.data[i];
		break;
		case DIV:
			for (i = 0; i < nt; ++i) {
				float denom = intrace2.data[i];
				if (!denom) intrace1.data[i] = 0.0;
				else	    intrace1.data[i] /= denom;
d174 21
d196 7
a202 3
		break;
		default:  /* defensive programming */
			err("mysterious operation=\"%s\"", op);
a204 14
		puttr(&intrace1);
		++itr;
	}

	/* See if both files exhausted; notice if fd1 exhausted, then
	   we don't do an fgettr on fd2 on the final pass above */
	if (!nbytes) {
		warn("%s still had traces when %s was exhausted",
						argv[1], argv[2]);
		warn("processed %d pairs of traces before EOF", itr);
	} else if (fgettr(fp2, &intrace2)) {
		warn("%s still had traces when %s was exhausted",
						argv[2], argv[1]);
		warn("processed %d pairs of traces before EOF", itr);
@


1.8
log
@changed String to cwp_String
@
text
@d1 1
a1 1
/* SUOP2: $Revision: 1.7 $ ; $Date: 92/10/23 15:38:02 $	*/
a2 13
/*----------------------------------------------------------------------
 * Copyright (c) Colorado School of Mines, 1990.
 * All rights reserved.
 *
 * This code is part of SU.  SU stands for Seismic Unix, a processing line
 * developed at the Colorado School of Mines, partially based on Stanford
 * Exploration Project (SEP) software.  Inquiries should be addressed to:
 *
 *  Jack K. Cohen, Center for Wave Phenomena, Colorado School of Mines,
 *  Golden, CO 80401  (jkc@@dix.mines.colorado.edu)
 *----------------------------------------------------------------------
 */

a35 1
/**************** end self doc ***********************************/
d45 1
@


1.7
log
@new selfdoc installed
@
text
@d1 1
a1 1
/* SUOP2: $Revision: 1.6 $ ; $Date: 91/10/17 13:33:43 $	*/
d71 1
a71 1
	String op;	/* operation: add, sub, mul, div	*/
@


1.6
log
@Elim CLOSETO from divide by zero test.  (???)
@
text
@d1 1
a1 1
/* SUOP2: $Revision: 1.5 $ ; $Date: 91/09/05 08:51:23 $	*/
d20 29
a48 29
String sdoc =
" 								\n"
" SUOP2 - do a binary operation on two data sets		\n"
" 								\n"
" suop2 data1 data2 op=diff >stdout				\n"
" 								\n"
" Required parameters:						\n"
" 	none							\n"
" 								\n"
" Optional parameter:						\n"
" 	op=diff		binary operation: sum, prod, quo,	\n"
" 	       		default is diff				\n"
" 								\n"
" Note1: Output = data1 op data2 with the header of data1	\n"
" 								\n"
" Note2: For convenience and backward compatibility, this	\n"
" 	program may be called without an op code as:		\n"
" 								\n"
" 	susum  file1 file2 == suop2 file1 file2 op=sum		\n"
" 	sudiff file1 file2 == suop2 file1 file2 op=diff		\n"
" 	suprod file1 file2 == suop2 file1 file2 op=prod		\n"
" 	suquo  file1 file2 == suop2 file1 file2 op=quo		\n"
" 								\n"
" Note3: If an explicit op code is used it must FOLLOW the	\n"
"	filenames.						\n"
" 								\n"
" Note4: With op=quo, divide by 0 is trapped and 0 is returned.	\n"
" 								\n"
;
d80 1
a80 1
	askdoc(2); /* two file args required */
@


1.5
log
@string -> String and so forth
@
text
@d1 1
a1 1
/* SUOP2: $Revision: 1.4 $ ; $Date: 90/12/26 00:04:40 $	*/
d127 2
a128 3
				if (CLOSETO(denom, 0.0))
					 intrace1.data[i] = 0.0;
				else	intrace1.data[i] /= denom;
@


1.4
log
@Better doc and trap divide by zero
@
text
@d1 1
a1 1
/* SUOP2: $Revision: 1.3 $ ; $Date: 90/12/23 16:35:16 $	*/
d20 1
a20 1
string sdoc =
d71 1
a71 1
	string op;	/* operation: add, sub, mul, div	*/
d127 2
a128 1
				if (CLOSETO(denom, 0.0)) intrace1.data[i] = 0.0;
@


1.3
log
@fp -> fd
@
text
@d1 1
a1 1
/* SUOP2: $Revision: 1.2 $ ; $Date: 90/07/21 18:44:24 $	*/
d33 1
a33 1
" Note1:	Output = data1 op data2 with the header of data1\n"
d35 1
a35 5
" Note2:	This command violates the usual SU syntax, since\n"
" 	it accepts the two filenames as arguments instead of	\n"
" 	using getpar.  Thus, no input redirect is used.		\n"
" 								\n"
" Note3:	For convenience and backward compatibility, this\n"
d43 5
a57 1
 *
d69 2
a70 2
	FILE *fp1;	/* file pointer for first input trace	*/
	FILE *fp2;	/* file pointer for second input trace	*/
d91 2
d125 6
a130 2
			for (i = 0; i < nt; ++i)
				intrace1.data[i] /= intrace2.data[i];
d132 1
a132 1
		default:
@


1.2
log
@Mention shell interface via sudiff etc.
@
text
@d1 1
a1 1
/* SUOP2: $Revision: 1.1 $ ; $Date: 90/07/21 12:37:28 $	*/
d20 28
a47 28
string sdoc = "\
								\n\
SUOP2 - do a binary operation on two data sets			\n\
								\n\
suop2 data1 data2 op=diff >stdout				\n\
								\n\
Required parameters:						\n\
	none							\n\
								\n\
Optional parameter:						\n\
	op=diff		binary operation: sum, prod, quo,	\n\
	       		default is diff				\n\
								\n\
Note1:	Output = data1 op data2 with the header of data1	\n\
								\n\
Note2:	This command violates the usual SU syntax, since	\n\
	it accepts the two filenames as arguments instead of	\n\
	using getpar.  Thus, no input redirect is used.		\n\
								\n\
Note3:	For convenience and backward compatibility, this	\n\
	program may be called without an op code as:		\n\
								\n\
	susum  file1 file2 == suop2 file1 file2 op=sum		\n\
	sudiff file1 file2 == suop2 file1 file2 op=diff		\n\
	suprod file1 file2 == suop2 file1 file2 op=prod		\n\
	suquo  file1 file2 == suop2 file1 file2 op=quo		\n\
								\n\
";
d69 2
a70 2
	int fd1;	/* file descriptor of first input trace	*/
	int fd2;	/* file descriptor of second input trace*/
d84 2
a85 2
	fd1 = eopen(argv[1], O_RDONLY, 0444);
	fd2 = eopen(argv[2], O_RDONLY, 0444);
d89 1
a89 1
	if (!sgetpar("op", &op))	op = "diff";
d99 2
a100 3
	while (fgettr(fd1, &intrace1) &&
				(nbytes = fgettr(fd2, &intrace2))) {
		register int i;
d109 1
a109 1
		switch(iop) {
d131 1
a131 1
		itr++;
d140 1
a140 1
	} else if (fgettr(fd2, &intrace2)) {
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/* SUOP2: $Revision: 1.3 $ ; $Date: 90/06/05 15:51:18 $	*/
d38 8
@
