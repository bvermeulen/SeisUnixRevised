head	1.18;
access;
symbols;
locks; strict;
comment	@ * @;


1.18
date	2011.11.16.23.33.10;	author john;	state Exp;
branches;
next	1.17;

1.17
date	2011.11.12.00.41.35;	author john;	state Exp;
branches;
next	1.16;

1.16
date	2005.12.06.20.04.52;	author john;	state Exp;
branches;
next	1.15;

1.15
date	2004.07.21.17.07.05;	author john;	state Exp;
branches;
next	1.14;

1.14
date	2004.07.21.17.05.06;	author john;	state Exp;
branches;
next	1.13;

1.13
date	2003.08.20.18.32.49;	author john;	state Exp;
branches;
next	1.12;

1.12
date	2003.06.09.16.17.07;	author john;	state Exp;
branches;
next	1.11;

1.11
date	2002.10.28.19.05.51;	author john;	state Exp;
branches;
next	1.10;

1.10
date	96.09.13.21.49.05;	author john;	state Exp;
branches;
next	1.9;

1.9
date	96.02.07.15.46.50;	author jkc;	state Exp;
branches;
next	1.8;

1.8
date	94.08.25.15.01.27;	author jkc;	state Exp;
branches;
next	1.7;

1.7
date	92.10.26.13.42.32;	author john;	state Exp;
branches;
next	1.6;

1.6
date	91.09.05.08.52.17;	author jkcohen;	state Exp;
branches;
next	1.5;

1.5
date	90.12.23.16.37.29;	author jkc;	state Exp;
branches;
next	1.4;

1.4
date	90.12.21.21.01.22;	author jkc;	state Exp;
branches;
next	1.3;

1.3
date	90.06.05.15.51.38;	author jkc;	state Exp;
branches;
next	1.2;

1.2
date	90.06.04.23.25.53;	author jkc;	state Exp;
branches;
next	1.1;

1.1
date	90.05.25.19.26.16;	author jkc;	state Exp;
branches;
next	;


desc
@Taper a data set
@


1.18
log
@added Reg Beardsley's checkpar()
@
text
@/* Copyright (c) Colorado School of Mines, 2011.*/
/* All rights reserved.                       */

/* SUTAPER: $Revision: 1.16 $ ; $Date: 2005/12/06 20:04:52 $	*/

#include "su.h"
#include "segy.h"

#define TWOPI 2.0*PI

/*********************** self documentation **********************/
char *sdoc[] = {
"								",
" SUTAPER - Taper the edge traces of a data panel to zero.	",
"								",
"								",
" sutaper <stdin >stdout [optional parameters]		  ",
"								",
" Optional Parameters:					  ",
" ntr=tr.ntr	number of traces. If tr.ntr is not set, then	",
" 		ntr is mandatory				",
" tr1=0	 number of traces to be tapered at beginning	",
" tr2=tr1	number of traces to be tapered at end		",
" min=0.		minimum amplitude factor of taper		",
" tbeg=0		length of taper (ms) at trace start		",
" tend=0		length of taper (ms) at trace end		",
" taper=1	taper type					",
"		 =1 linear (default)			   ",
"		 =2 sine					",
"		 =3 cosine					",
"		 =4 gaussian (+/-3.8)			  ",
"		 =5 gaussian (+/-2.0)			  ",
"								",
" Notes:							",
"   To eliminate the taper, choose tbeg=0. and tend=0. and tr1=0",
"								",
NULL};

/* Credits:
 *
 *	CWP: Chris Liner, Jack K. Cohen
 *
 * Trace header fields accessed: ns, ntr
 * 
 * Rewrite: Tagir Galikeev, October 2002
 */
/**************** end self doc ***********************************/

segy tr;

/* Prototypes for functions used internally */
void taper( float t1, float t2, int tap_type, float T, float dt, 
		float *trace );

void weights ( int tr1, int tr2, float max, float min, int type, float *w);

int
main(int argc, char **argv)
{
  float t1, t2;
  float dt, tlen;
  float *taperv=NULL;	/* vector of taper weights  */
  int   ntap;		/* dimension of taper array */
  float min;	
  float max=1.;	
  int   tr1, tr2; 	/* traces to be tapered	*/
  int   nt, ntr, ttaper; 
  int   itr=0;  		/* trace counter */
  short verbose;  /* if 1(yes) echo parameters to stderr  */  
  cwp_Bool have_ntr=cwp_false;/* is ntr known from header or user?*/
  
  /* Initialize */
  initargs(argc, argv);
  requestdoc(0);

  if (!getparshort("verbose", &verbose))  verbose = 0;
  
  /* get minimum amplitude parameter */ 
  if (!getparfloat("min", &min)) 	min = 0.;
	if (min > 1.0) err("min must be less than 1");

  /* get parameters for time domain taper */
  if (!getparfloat("tbeg", &t1)) 	t1 = 0.;
  if (!getparfloat("tend", &t2)) 	t2 = 0.;
  if (!getparint("taper", &ttaper)) 	ttaper = 1;

  /* get trace parameters */
  if (!getparint("tr1", &tr1))   	tr1 = 0;
  if (!getparint("tr2", &tr2))   	tr2 = tr1;

  /* define taper weights for trace tapering */
  ntap = ( (tr1-tr2) ? tr1+tr2+2 : tr1+1 ) ;
  taperv = ealloc1float(ntap);
  weights(tr1,tr2,max,min,ttaper,taperv);
  
  if (verbose) { register int i;	/* output taper weights */
	fprintf(stderr,"print %i taper weights: \n",ntap);
	for (i=0;i<ntap;i++) 
	   fprintf(stderr,"Taper %i = %g \n",i,taperv[i]);
  }	   
   
  /* Get info from first trace */
  if (!gettr(&tr))  err("can't get first trace");
  nt = tr.ns;
  dt = tr.dt / 1000.; /* in ms */	
  /* Get or set ntr */
  ntr = tr.ntr;
  if (ntr) have_ntr = cwp_true;
  if (getparint("n2", &ntr) || 
	getparint("ntr", &ntr)) have_ntr = cwp_true;
  if (!have_ntr) err ("ntr neither set nor getparred");
  checkpars();

  tlen=(nt-1)*dt; /* trace length, ms */
  if (t1 + t2 > tlen)
	err("sum of tapers tbeg=%f, tend=%f exceeds trace length(%f ms)", 
	t1,t2,tlen);
  
  do { float fac=1. ;		/* trace weighting factor */
	
	/* factor for first traces */
	fac*=( itr < tr1 ? *taperv++ : 1. );

	/* add (tr2+1)-1 to the array pointer if assymetric tapering is required 
	 * tr1=tr2  : ntap-tr1-2 = -1
	 * tr1!=tr2 : ntap-tr1-2 = tr2 */
	if ( itr++ == tr1 ) taperv+=ntap-tr1-2; 
	
	/* factor for last traces */
	fac*=( itr > (ntr-tr2) ? *taperv-- : 1. );
	
	if (verbose && 
	 (tr1+tr2) && 
	 (fac < 1.) ) fprintf(stderr,"trace %i factor %g \n",itr,fac);
	
	if ( tr1 || tr2 ) { register int i;	
	   for (i=0;i<nt;i++)
		tr.data[i]*=fac;
	}
	  
	if ( (t1!=0.) || (t2!=0.) )
	  taper( t1, t2, ttaper, tlen, dt, tr.data );
	puttr(&tr); 	 	
	} while (gettr(&tr));

  return(CWP_Exit());
}


#define EPS	3.8090232	/* exp(-EPS*EPS) = 5e-7, "noise" level  */
				/* see sugain.c				*/
void taper ( float t1, float t2, int tap_type, float T, float dt, 
		float *trace )
/*********************************************************************
sweep taper - tapers the sweep
**********************************************************************
Input: 
t1	  start taper in ms
t2	  end taper in ms
tap_type  type of taper to apply: 1 linear, 2 sine, 3 cosine
T	  trace duration in ms
dt	  sample rate in ms
 
Output:
trace	  array of tapered samples
*********************************************************************
This subroutine tapers a sweep mainly to reduce Gibbs phenomena.
Taper coulld be one of the specified above.
*********************************************************************
References:
Any book on Vibroseis.
*********************************************************************
Author: Tagir Galikeev				  Date:7 Oct 1994
Rewrite: Tagir Galikeev				  Date:  Oct 2002
*********************************************************************/
{
	int nt, i, nt1, nt2;
	float env=0.0, f, x;

	nt = (int)(T / dt + 1);
	nt1 = (int)(t1 / dt + 1);
	nt2 = (int)(t2 / dt + 1);
	/* apply start taper */
	if( nt1 > 1 ) {
		for (i=0; i<nt1; i++) {
	  		f = (float)i / (float)nt1;
	  		switch ((char) tap_type)	{
	  			case 1: env=f;
	  				break;
	  			case 2: env=sin(PI*f/2.);
	  				break;
	  			case 3: env=0.5*(1.0-cos(PI*f));
	  				break;
	  			case 4: x=EPS*(1-f);
	  				env=exp(-(x*x));
	  				break;
	  			case 5: x=2.0*(1-f);
	  				env=exp(-(x*x));
	  				break;
	  			default:err (" taper ?!");
	  		}
	  		trace[i] *= env;
		}
	}
	/* apply end taper */
	if( nt2 > 1 ) {
		for (i=0; i<nt2; i++) {
	  		f = (float)i / (float)nt2;
			switch ((char) tap_type)	{
	  			case 1: env=f;
	  				break;
	  			case 2: env=sin(PI*f/2.);
	  				break;
	  			case 3: env=0.5*(1.0-cos(PI*f));
	  				break;
	  			case 4: x=EPS*(1-f);
	  				env=exp(-(x*x));
	  				break;
	  			case 5: x=2.0*(1-f);
	  				env=exp(-(x*x));
	  				break;
	  			default:err (" taper ?!");
	  		}
			trace[nt-i]  *= env;
		}
	}
}


void weights ( int tr1, int tr2, float max, float min, int type, float *w)
/*********************************************************************
sweep taper - tapers the sweep
**********************************************************************
Input: 
tr1	  number of traces to apply begin taper
tr2	  number of traces to apply end taper 
max	maximum amplitude factor (=1.)
min	  minimum amplitude factor (=0.)
type	  type of taper to apply: 1 linear, 2 sine, 3 cosine
 
Output:
w	  array of taper weights 
*********************************************************************
This subroutine computes the taper weights 
*********************************************************************
Author: Tagir Galikeev				  Date:7 Oct 1994
Rewriten: Gerald Klein				  Date:31 Mar 2004
*********************************************************************/
{ 
   if ( tr2 && (tr1-tr2) ) { /* end taper differs from begin taper */
		register int i;
		float env=0.0, f, x;
		/* set taper weights for last traces; fill array from end */
		for (i = 0; i <= tr2; ++i) {
			f = (float) (i)/tr2;
			switch ((char) type)	{
	  			case 1: env = min + (max - min) * f;
	  				break;
	  			case 2: env=sin(PI*f/2.);
	  				break;
	  			case 3: env=0.5*(1.0-cos(PI*f));
	  				break;
	  			case 4: x=EPS*(1-f);
	  				env=exp(-(x*x));
	  				break;
	  			case 5: x=2.0*(1-f);
	  				env=exp(-(x*x));
	  				break;
	  			default:err (" taper ?!");
	  		}
			w[1+tr1+i] = env ;
		} 		
   } 	
   if (tr1) { 	/* set taper weights for first traces */
		register int i;
		float env=0.0, f, x;
		   for (i = 0; i <= tr1; i++) {
			f = (float) (i)/tr1;
			switch ((char) type)	{
	  			case 1: env = min + (max - min) * f;
	  				break;
	  			case 2: env=sin(PI*f/2.);
	  				break;
	  			case 3: env=0.5*(1.0-cos(PI*f));
	  				break;
	  			case 4: x=EPS*(1-f);
	  				env=exp(-(x*x));
	  				break;
	  			case 5: x=2.0*(1-f);
	  				env=exp(-(x*x));
	  				break;
	  			default:err (" taper ?!");
	  		}
			  w[i] = env ;
		}
   }
   return;
}
@


1.17
log
@copyright
@
text
@d112 1
@


1.16
log
@put ntr in selfdoc explicitly
@
text
@d1 4
a4 1
/* SUTAPER: $Revision: 1.15 $ ; $Date: 2004/07/21 17:07:05 $	*/
@


1.15
log
@Gerald Klein's updates
@
text
@d1 1
a1 1
/* SUTAPER: $Revision: 1.5 $ ; $Date: 2004/04/23 08:56:44 $	*/
d10 22
a31 20
"                                                               ",
" SUTAPER - Taper the edge traces of a data panel to zero.      ",
"                                                               ",
"                                                               ",
" sutaper <stdin >stdout [optional parameters]                  ",
"                                                               ",
" Optional Parameters:                                          ",
" tr1=0         number of traces to be tapered at beg		",
" tr2=tr1       number of traces to be tapered at end      	",
" min=0.    	minimum amplitude factor of taper		",
" tbeg=0    	length of taper (ms) at trace start		",
" tend=0     	length of taper (ms) at trace end		",
" taper=1       taper type                                      ",
"                 =1 linear (default)                           ",
"                 =2 sine                                       ",
"                 =3 cosine                                     ",
"                 =4 gaussian (+/-3.8)                          ",
"                 =5 gaussian (+/-2.0)                          ",
"                                                               ",
" Notes:                                                        ",
d33 1
a33 1
"                                                               ",
d38 1
a38 1
 *	CWP: Chris, Jack
d40 1
a40 1
 * Trace header fields accessed: ns
d50 1
a50 1
	    float *trace );
d77 1
a77 1
     if (min > 1.0) err("min must be less than 1");
d93 4
a96 4
  if (verbose) { register int i;       /* output taper weights */
     fprintf(stderr,"print %i taper weights: \n",ntap);
       for (i=0;i<ntap;i++) 
           fprintf(stderr,"Taper %i = %g \n",i,taperv[i]);
d107 1
a107 1
      getparint("ntr", &ntr)) have_ntr = cwp_true;
d112 1
a112 1
    err("sum of tapers tbeg=%f, tend=%f exceeds trace length(%f ms)", 
d116 1
a116 1
        
d128 2
a129 2
      if (verbose && 
         (tr1+tr2) && 
d131 10
a140 10
       
       if ( tr1 || tr2 ) { register int i;       
           for (i=0;i<nt;i++)
	        tr.data[i]*=fac;
       }
          
       if ( (t1!=0.) || (t2!=0.) )
          taper( t1, t2, ttaper, tlen, dt, tr.data );
       puttr(&tr); 	 	
     } while (gettr(&tr));
d146 1
a146 1
#define EPS     3.8090232       /* exp(-EPS*EPS) = 5e-7, "noise" level  */
d149 1
a149 1
	     float *trace )
d233 1
a233 1
max       maximum amplitude factor (=1.)
d247 1
a247 1
                register int i;
d250 1
a250 1
                for (i = 0; i <= tr2; ++i) {
d267 2
a268 2
                        w[1+tr1+i] = env ;
	        } 		
d271 1
a271 1
                register int i;
d273 1
a273 1
	           for (i = 0; i <= tr1; i++) {
d290 2
a291 2
                          w[i] = env ;
	        }
@


1.14
log
@*** empty log message ***
@
text
@d1 1
a1 1
/* SUTAPER: $Revision: 1.13 $ ; $Date: 2003/08/20 18:32:49 $	*/
d13 1
d17 5
a21 2
" tbeg=500      length of taper (ms) at trace start             ",
" tend=500      length of taper (ms) at trace end               ",
d30 1
a30 1
"   To eliminate the taper, choose tbeg=0. and tend=0.          ",
d50 1
d57 9
a65 1
  int nt, ttaper;
d70 20
d91 6
a96 5
  /* set parameters and fill header fields */
  if (!getparfloat("tbeg", &t1)) t1 = 500.;
  if (!getparfloat("tend", &t2)) t2 = 500.;
  if (!getparint("taper", &ttaper)) ttaper = 1;

d101 6
d113 26
a138 5
  do {
    if ( (t1!=0.) || (t2!=0.) )
      taper( t1, t2, ttaper, tlen, dt, tr.data );
    puttr(&tr); 	 	
  } while (gettr(&tr));
d140 1
a140 1
	return(CWP_Exit());
d221 71
@


1.13
log
@large file support and cwp exit function
@
text
@d1 1
a1 1
/* SUTAPER: $Revision: 1.12 $ ; $Date: 2003/06/09 16:17:07 $	*/
d52 1
a52 1
  int i, nt, ttaper;
@


1.12
log
@9 June 2003
@
text
@d1 1
a1 1
/* SUTAPER: $Revision: 1.11 $ ; $Date: 1997/10/20 15:18:18 $	*/
d79 1
a79 1
  return EXIT_SUCCESS; 
@


1.11
log
@*** empty log message ***
@
text
@d1 1
a1 1
/* SUTAPER: $Revision: 1.10 $ ; $Date: 1996/09/13 21:49:05 $	*/
d6 2
d10 18
a27 8
" 								",
" SUTAPER - Taper the edge traces of a data panel to zero.	",
" 								",
" sutaper <diskfile >stdout [ntaper=5]				",
" 								",
" The taper is an \"ntaper\" point sine-squared taper 		",
" symmetrically applied at each end of the data set.		",
" 								",
d35 2
d40 1
d42 3
a44 1
#define NTAPER	5
a45 1
segy tr;
d50 62
a111 21
	int nt;		/* number of sample points on traces	*/
	int itr, ntr;	/* trace counter and total 		*/
	float *taper;	/* vector of taper weights		*/
	int ntaper;	/* number of taper weights		*/


	/* Initialize */
	initargs(argc, argv);
	requestdoc(1);


	/* Get info from first trace */
	if (!(ntr = gettra(&tr, 0)))  err("can't get first trace");
	nt = (int) tr.ns;	/* disaster to pass &ushort */


	/* Get parameter */
	if (!getparint("ntaper", &ntaper))	ntaper = NTAPER;
	if (ntaper > ntr/2)
	    err("taper vector length, %d, exceeds ntr/2 = %d", ntaper, ntr/2);

d113 24
a136 7
	/* Set up taper weights */
	taper = ealloc1float(ntaper);
	{ register int k;
	  for (k = 0; k < ntaper; ++k) {
		float s = sin(k*PI/(2*ntaper));
		taper[k] = s*s;
	  }
d138 21
a158 18
						


	/* Loop over the traces, tapering those at the ends */

	/* Take care of the trace already read (taper[0] = 0.0) */
	{ register int i;
	  for (i = 0; i < nt; ++i)  tr.data[i] = 0.0;
	}
	puttr(&tr);

	/* Taper at the left end of the data set */
	for (itr = 1; itr < ntaper; ++itr) {
		register int i;

		gettr(&tr);
		for (i = 0; i < nt; ++i)  tr.data[i] *= taper[itr];
		puttr(&tr);
a159 18

	/* Pass on traces in the middle of the data set */
	for ( ; itr < ntr - ntaper; ++itr) {
		gettr(&tr);
		puttr(&tr);
	}
	
	/* Taper at the right end of the data set */
	for ( ; itr < ntr; ++itr) {
		register int i;

		gettr(&tr);
		for (i = 0; i < nt; ++i)  tr.data[i] *= taper[ntr - itr - 1];
		puttr(&tr);
	}


	return(CWP_Exit());
@


1.10
log
@silenced -Wall messages
@
text
@d1 1
a1 1
/* SUTAPER: $Revision: 1.9 $ ; $Date: 1996/02/07 15:46:50 $	*/
d100 1
a100 1
	return EXIT_SUCCESS;
@


1.9
log
@Deal with header fields accessed/modified down to sudoc.
@
text
@d1 1
a1 1
/* SUTAPER: $Revision: 1.8 $ ; $Date: 1994/08/25 15:01:27 $	*/
d31 1
@


1.8
log
@Removed copyright statement from codes that had it.
Moved self-doc line for sudoc.
@
text
@d1 1
a1 1
/* SUTAPER: $Revision: 1.7 $ ; $Date: 92/10/26 13:42:32 $	*/
d21 2
@


1.7
log
@new selfdoc installed
@
text
@d1 1
a1 1
/* SUTAPER: $Revision: 1.6 $ ; $Date: 91/09/05 08:52:17 $	*/
a2 13
/*----------------------------------------------------------------------
 * Copyright (c) Colorado School of Mines, 1990.
 * All rights reserved.
 *
 * This code is part of SU.  SU stands for Seismic Unix, a processing line
 * developed at the Colorado School of Mines, partially based on Stanford
 * Exploration Project (SEP) software.  Inquiries should be addressed to:
 *
 *  Jack K. Cohen, Center for Wave Phenomena, Colorado School of Mines,
 *  Golden, CO 80401  (jkc@@dix.mines.colorado.edu)
 *----------------------------------------------------------------------
 */

a16 1
/**************** end self doc ***********************************/
d22 1
@


1.6
log
@string -> String and so forth
@
text
@d1 1
a1 1
/* SUTAPER: $Revision: 1.5 $ ; $Date: 90/12/23 16:37:29 $	*/
d20 10
a29 10
String sdoc =
" 								\n"
" SUTAPER - Taper the edge traces of a data panel to zero.	\n"
" 								\n"
" sutaper <diskfile >stdout [ntaper=5]				\n"
" 								\n"
" The taper is an \"ntaper\" point sine-squared taper 		\n"
" symmetrically applied at each end of the data set.		\n"
" 								\n"
;
d52 1
a52 1
	askdoc(1);
@


1.5
log
@Using fp gettra macro
@
text
@d1 1
a1 1
/* SUTAPER: $Revision: 1.4 $ ; $Date: 90/12/21 21:01:22 $	*/
d20 1
a20 1
string sdoc =
@


1.4
log
@Give sine-squared taper of user-specified length
@
text
@d1 1
a1 1
/* SUTAPER: $Revision: 1.3 $ ; $Date: 90/06/05 15:51:38 $	*/
d56 1
a56 1
	if (!(ntr = gettra(STDIN, &tr, 0))) err("can't get first trace");
@


1.3
log
@Eliminated veclib routines.
@
text
@d1 1
a1 1
/* SUTAPER: $Revision: 1.2 $ ; $Date: 90/06/04 23:25:53 $	*/
d20 10
a29 11
string sdoc = "\
								\n\
SUTAPER - Taper the edge traces of a data panel to zero.	\n\
								\n\
sutaper <stdin >stdout [taper=wt1,wt2,...wtn]			\n\
								\n\
The taper parameter is an (usually) increasing sequence	of	\n\
weights; default is a five point sine-squared taper.		\n\
The taper is symmetrically applied at each end of the data set.	\n\
								\n\
";
d33 1
a34 1
 *
a37 6
/* Default taper weights; Wk = sin^2(k/6 * pi/2)	*/
#define W1	0.06699
#define W2	0.25
#define W3	0.5
#define W4	0.75
#define W5	0.933
a47 1
	register int i;	/* counter				*/
d60 4
a63 14
	/* Get user's weights; if none install default taper */
	if (!(ntaper = countparval("taper"))) { /* default */
		ntaper = NTAPER;
		taper = ealloc1float(ntaper);
		taper[0] = W1;
		taper[1] = W2;
		taper[2] = W3;
		taper[3] = W4;
		taper[4] = W5;
	} else { /* user gave weights */
		taper = ealloc1float(ntaper);
		fgetpar("taper", taper);
	}
	
d65 8
a72 4
	/* Exact ntaper value now known, check not too big */
	if (ntaper > ntr/2) {
		err("taper vector length, %d, exceeds ntr/2 = %d",
					ntaper,              ntr/2);
d79 4
a82 3
	/* Take care of the trace already read */
	for (i = 0; i < nt; ++i)
		tr.data[i] *= taper[0];
d87 2
d90 1
a90 2
		for (i = 0; i < nt; ++i)
			tr.data[i] *= taper[itr];
d102 2
d105 1
a105 2
		for (i = 0; i < nt; ++i)
			tr.data[i] *= taper[ntr - itr - 1];
@


1.2
log
@ANSI C, etc
@
text
@d1 1
a1 1
/* SUTAPER: $Revision: 1.1 $ ; $Date: 90/05/25 19:26:16 $	*/
a17 1
#include "fconst.h"
d55 1
d94 2
a95 1
	vsmul(tr.data, ONE, taper, tr.data, ONE, &nt);
d101 2
a102 1
		vsmul(tr.data, ONE, taper + itr, tr.data, ONE, &nt);
d115 2
a116 1
		vsmul(tr.data, ONE, taper + ntr - itr - 1, tr.data, ONE, &nt);
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/* SUTAPER: $Revision: 1.10 $ ; $Date: 89/09/20 19:37:38 $	*/
a67 5
	/* Allocate room for taper vector */
	ntaper = MAX(NTAPER, maxgetpar());  /* upper bound refined later */
	taper = ealloc1float(ntaper);


d69 1
a69 1
	if (!(ntaper = fgetpar("taper", taper))) {
d71 1
d77 3
d81 1
a81 1

@
