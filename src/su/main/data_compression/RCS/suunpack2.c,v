head	1.18;
access;
symbols;
locks; strict;
comment	@ * @;


1.18
date	2011.11.12.00.01.04;	author john;	state Exp;
branches;
next	1.17;

1.17
date	2003.06.09.16.17.07;	author john;	state Exp;
branches;
next	1.16;

1.16
date	97.07.28.22.36.46;	author john;	state Exp;
branches;
next	1.15;

1.15
date	96.09.13.21.49.05;	author john;	state Exp;
branches;
next	1.14;

1.14
date	96.02.07.15.59.57;	author jkc;	state Exp;
branches;
next	1.13;

1.13
date	95.08.04.19.01.49;	author jkc;	state Exp;
branches;
next	1.12;

1.12
date	95.01.19.11.45.01;	author john;	state Exp;
branches;
next	1.11;

1.11
date	94.08.25.15.01.35;	author jkc;	state Exp;
branches;
next	1.10;

1.10
date	93.08.13.10.28.30;	author john;	state Exp;
branches;
next	1.9;

1.9
date	92.10.23.16.09.23;	author john;	state Exp;
branches;
next	1.8;

1.8
date	91.09.05.08.52.24;	author jkcohen;	state Exp;
branches;
next	1.7;

1.7
date	90.10.29.18.04.46;	author jkc;	state Exp;
branches;
next	1.6;

1.6
date	90.10.29.17.59.21;	author jkc;	state Exp;
branches;
next	1.5;

1.5
date	90.10.29.17.48.58;	author jkc;	state Exp;
branches;
next	1.4;

1.4
date	90.10.27.08.28.57;	author jkc;	state Exp;
branches;
next	1.3;

1.3
date	90.10.26.20.27.42;	author jkc;	state Exp;
branches;
next	1.2;

1.2
date	90.10.26.17.58.42;	author dhale;	state Exp;
branches;
next	1.1;

1.1
date	90.10.23.18.28.08;	author dhale;	state Exp;
branches;
next	;


desc
@unpacks shorts to floats
@


1.18
log
@copyright
@
text
@/* Copyright (c) Colorado School of Mines, 2011.*/
/* All rights reserved.                       */

/* SUUNPACK2: $Revision: 1.17 $ ; $Date: 2003/06/09 16:17:07 $	*/

#include "su.h"
#include "segy.h"

/*********************** self documentation **********************/
char *sdoc[] = {
"								",
" SUUNPACK2 - unpack segy trace data from shorts to floats	",
"								",
"    suunpack2 <packed_file >unpacked_file			",
"								",
" suunpack2 is the approximate inverse of supack2		",
"								",
NULL};

/* Credits:
 *	CWP: Jack K. Cohen, Shuki Ronen, Brian Sumner
 *
 * Revised:  7/4/95 Stewart A. Levin  Mobil
 *          Changed decoding to parallel 2 byte encoding of supack2
 *
 * Caveats:
 *	This program is for single site use with supack2.  See the
 *	supack2 header comments.
 *
 * Notes:
 *	ungpow and unscale are defined in segy.h
 *	trid = SHORTPACK is defined in su.h and segy.h
 *
 * Trace header fields accessed: ns, trid, ungpow, unscale
 * Trace header fields modified:     trid, ungpow, unscale
 */
/**************** end self doc ***********************************/

segy tr;	/* on input: SEGY hdr & (short) trace data */
		/* on output: data is floats */

int
main(int argc, char **argv)
{
	float ungpow;
	int nt;
	cwp_Bool isone, istwo;
	float f_one = 1.0;
	float f_two = 2.0;
	

	/* Initialize */
	initargs(argc, argv);
	requestdoc(1);


	/* Get info from first trace */
	if (!gettr(&tr)) err("can't get first trace");
	if (tr.trid != SHORTPACK) err("Not short packed traces");
	nt = tr.ns;
	ungpow = tr.ungpow;
	isone = CLOSETO(ungpow, f_one);
	istwo = CLOSETO(ungpow, f_two);


	/* Main loop over segy traces */
	do {
		/* Point input short trace at the trace data and unpack.
		 * Since the floats take more room than the shorts,
		 * we load in from back end.
		 *
		 * Note that the segy field tr.data is declared as
		 * floats, so we need to invent a pointer for the
		 * 2 byte short array which is actually there.
		 * The essence of the code in the for loops below is:
		 * for (i = nt-1; i >= 0; --i) { 
                 *      val = (float) itr[i];
		 *      val *= tr.unscale;
		 *	tr.data[i] = ... ;
		 * }
		 * but, as in supack2, this isn't portable */
		register int i, j;
		register signed int si;
		register unsigned int ui;
		register float val;
		register unsigned char *itr = (unsigned char *) tr.data;

		if (istwo) {
			for (i = nt-1, j=2*nt-1; i >= 0; --i) { 
				ui = itr[j--];
				ui |= (itr[j--])<<8;
				si = (ui>32767)?ui-65536:ui;
				val = (float) si;
				val *= tr.unscale;
				tr.data[i] = val * ABS(val);
			}
		} else if (isone) {
			for (i = nt-1, j=2*nt-1; i >= 0; --i) { 
				ui = itr[j--];
				ui |= (itr[j--])<<8;
				si = (ui>32767)?ui-65536:ui;
				val = (float) si;
				val *= tr.unscale;
				tr.data[i] = val;
			}
		} else {
			for (i = nt-1, j=2*nt-1; i >= 0; --i) { 
				ui = itr[j--];
				ui |= (itr[j--])<<8;
				si = (ui>32767)?ui-65536:ui;
				val = (float) si;
				val *= tr.unscale;
				tr.data[i] = (val >= 0.0) ?
					pow(val, ungpow) : -pow(-val, ungpow);
			}
		}


		/* Mark as seismic data and remove now unnecessary fields */
		tr.trid = 1;
		tr.ungpow = 0.0;
		tr.unscale = 0.0;


		/* Write out restored (unpacked) segy */
		puttr(&tr);


	} while (gettr(&tr));


	return(CWP_Exit());
}
@


1.17
log
@9 June 2003
@
text
@d1 4
a4 1
/* SUUNPACK2: $Revision: 1.16 $ ; $Date: 1997/07/28 22:36:46 $	*/
@


1.16
log
@changes suggested by Stew Levin to silence SGI compiler warnings, etc
@
text
@d1 1
a1 1
/* SUUNPACK2: $Revision: 1.15 $ ; $Date: 1996/09/13 21:49:05 $	*/
d129 1
a129 1
	return EXIT_SUCCESS;
@


1.15
log
@silenced -Wall messages
@
text
@d1 1
a1 1
/* SUUNPACK2: $Revision: 1.14 $ ; $Date: 1996/02/07 15:59:57 $	*/
d11 1
a11 1
" suunpack2 <packed_file >unpacked_file				",
d18 1
a18 1
 *	CWP: Jack, Shuki, Brian
d45 3
d59 2
a60 2
	isone = CLOSETO(ungpow, 1.0);
	istwo = CLOSETO(ungpow, 2.0);
@


1.14
log
@Deal with header fields accessed/modified down to sudoc.
@
text
@d1 1
a1 1
/* SUUNPACK2: $Revision: 1.13 $ ; $Date: 1995/08/04 19:01:49 $	*/
d36 1
a36 1
segy tr;	/* on input: SEGY hdr & (short) trace data
d39 1
@


1.13
log
@Made portable to machines where shorts are not 2 bytes.
By Stew Levin.
@
text
@d1 1
a1 1
/* SUUNPACK2: $Revision: 1.11 $ ; $Date: 94/08/25 15:01:35 $	*/
d31 2
@


1.12
log
@cosmetic
@
text
@d20 3
d34 1
a34 2

segy tr;	/* on input: SEGY hdr & (short) trace data */
d60 16
a75 9
		   Since the floats take more room than the shorts,
		   we load in from back end.
	
		   Note that the segy field tr.data is declared as
		   floats, so we need to invent a pointer for the
		  short array which is actually there.
		*/

		register int i;
d77 1
a77 1
		register short *itr = (short *) tr.data;
d80 5
a84 2
			for (i = nt-1; i >= 0; --i) { 
				val = (float) itr[i];
d89 5
a93 2
			for (i = nt-1; i >= 0; --i) { 
				val = (float) itr[i];
d98 5
a102 2
			for (i = nt-1; i >= 0; --i) { 
				val = (float) itr[i];
@


1.11
log
@Removed copyright statement from codes that had it.
Moved self-doc line for sudoc.
@
text
@d1 1
a1 1
/* SUUNPACK2: $Revision: 1.10 $ ; $Date: 93/08/13 10:28:30 $	*/
d32 1
a32 1
segy tr;	/* on input: SEGY hdr & (short) trace data
d58 7
a64 6
		/* Since the floats take more room than the shorts,
		/* we load in from back end.
		/*
		/* Note that the segy field tr.data is declared as
		/* floats, so we need to invent a pointer for the
		/* short array which is actually there. */
@


1.10
log
@changed Bool to cwp_Bool
@
text
@d1 1
a1 1
/* SUUNPACK2: $Revision: 1.9 $ ; $Date: 92/10/23 16:09:23 $	*/
a2 13
/*----------------------------------------------------------------------
 * Copyright (c) Colorado School of Mines, 1990.
 * All rights reserved.
 *
 * This code is part of SU.  SU stands for Seismic Unix, a processing line
 * developed at the Colorado School of Mines, partially based on Stanford
 * Exploration Project (SEP) software.  Inquiries should be addressed to:
 *
 *  Jack K. Cohen, Center for Wave Phenomena, Colorado School of Mines,
 *  Golden, CO 80401  (jkc@@dix.mines.colorado)
 *----------------------------------------------------------------------
 */

a15 1
/**************** end self doc ***********************************/
d29 1
@


1.9
log
@new selfdoc installed
@
text
@d1 1
a1 1
/* SUUNPACK2: $Revision: 1.8 $ ; $Date: 91/09/05 08:52:24 $	*/
d52 1
a52 1
	Bool isone, istwo;
@


1.8
log
@string -> String and so forth
@
text
@d1 1
a1 1
/* SUUNPACK2: $Revision: 1.7 $ ; $Date: 90/10/29 18:04:46 $	*/
d20 9
a28 9
String sdoc = "\
								\n\
SUUNPACK2 - unpack segy trace data from shorts to floats	\n\
								\n\
suunpack2 <packed_file >unpacked_file				\n\
								\n\
suunpack2 is the approximate inverse of supack2			\n\
								\n\
";
d56 1
a56 1
	askdoc(1);
@


1.7
log
@Tweak
@
text
@d1 1
a1 1
/* SUUNPACK2: $Revision: 1.6 $ ; $Date: 90/10/29 17:59:21 $	*/
d20 1
a20 1
string sdoc = "\
d52 1
a52 1
	bool isone, istwo;
@


1.6
log
@Tweaks
@
text
@d1 1
a1 1
/* SUUNPACK2: $Revision: 1.5 $ ; $Date: 90/10/29 17:48:58 $	*/
d98 1
a98 1
				tr.data[i] = (val >=0) ?
@


1.5
log
@Some efficiencies, in particular handle ungpow=2 default case without pow.
@
text
@d1 1
a1 1
/* SUUNPACK2: $Revision: 1.6 $ ; $Date: 90/10/28 08:18:38 $	*/
d51 1
d62 1
d83 1
a83 1
			for (i = tr.ns - 1; i >= 0; --i) { 
d89 1
a89 1
			for (i = tr.ns - 1; i >= 0; --i) { 
d95 1
a95 1
			for (i = tr.ns - 1; i >= 0; --i) { 
@


1.4
log
@Unset tr.ungpow and tr.unscale after unpacking traces.
@
text
@d1 1
a1 1
/* SUUNPACK2: $Revision: 1.3 $ ; $Date: 90/10/26 20:27:42 $	*/
d22 1
a22 1
SUUNPACK2 - unpack segy trace data from short ints to floats	\n\
d26 1
a26 1
suunpack2 is the approximate inverse of sypack2			\n\
d32 1
a32 1
 *	CWP: Jack, Shuki
d41 1
d46 1
a46 1
		   on output: data is floats */
d50 2
a51 2
	short *itr;	/* temp to hold a packed datum		*/
	register int i;	/* counter over samples on a trace	*/
a52 1

d58 6
a63 2
	/* Main loop over segy traces */
	while (gettr(&tr)) { 	/* variant of gettr for shorts */
a64 4
		/* Make sure this is short int packed trace */
		if (tr.trid != SHORTPACK) { 
			err("Not short packed trace at #%d", tr.tracl);
		}
d66 2
d69 6
a74 2
		   Since the floats take more room than the shorts,
		   we load in from back end.
d76 23
a98 10
		   Note that the segy field tr.data is declared as
		   floats, so we need to invent a pointer for the
		   short array which is actually there.
		*/
		itr = (short *) tr.data;
		for (i = tr.ns - 1; i >= 0; i--) { 
			tr.data[i] = (float) itr[i];
			tr.data[i] *= tr.unscale;
			tr.data[i] = (float) (SGN(tr.data[i]) *
			  pow((double) ABS(tr.data[i]),(double) tr.ungpow));
d101 1
d107 1
d111 2
a112 1
	}
@


1.3
log
@Revised for all-purpose fgettr,fputtr
@
text
@d1 1
a1 1
/* SUUNPACK2: $Revision: 1.2 $ ; $Date: 90/10/26 17:58:42 $	*/
d82 1
a82 1
		/* Mark as seismic data */
d84 2
@


1.2
log
@Set tr.trid to seismic after unpacking (by dave).
@
text
@d1 1
a1 1
/* SUUNPACK2: $Revision: 1.1 $ ; $Date: 90/10/23 18:28:08 $	*/
d59 1
a59 1
	while (gettr2(&tr)) { 	/* variant of gettr for shorts */
a65 3
		/* Converting to seismic data */
		tr.trid = 1;

d81 3
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/* SUUNPACK2: $Revision: 2.5 $ ; $Date: 89/05/25 16:54:52 $	*/
d65 3
@
