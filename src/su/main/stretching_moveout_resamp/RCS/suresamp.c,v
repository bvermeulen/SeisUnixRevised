head	1.16;
access;
symbols;
locks; strict;
comment	@ * @;


1.16
date	2011.11.16.23.21.55;	author john;	state Exp;
branches;
next	1.15;

1.15
date	2011.11.12.00.39.02;	author john;	state Exp;
branches;
next	1.14;

1.14
date	2006.09.04.19.29.32;	author john;	state Exp;
branches;
next	1.13;

1.13
date	2006.09.04.19.24.52;	author john;	state Exp;
branches;
next	1.12;

1.12
date	2006.03.09.20.00.59;	author john;	state Exp;
branches;
next	1.11;

1.11
date	2002.09.20.17.08.29;	author john;	state Exp;
branches;
next	1.10;

1.10
date	97.10.20.15.30.28;	author john;	state Exp;
branches;
next	1.9;

1.9
date	96.02.22.15.56.21;	author jkc;	state Exp;
branches;
next	1.8;

1.8
date	96.02.05.19.40.37;	author jkc;	state Exp;
branches;
next	1.7;

1.7
date	96.02.02.16.05.43;	author john;	state Exp;
branches;
next	1.6;

1.6
date	96.01.31.22.12.55;	author john;	state Exp;
branches;
next	1.5;

1.5
date	95.08.04.15.21.39;	author jkc;	state Exp;
branches;
next	1.4;

1.4
date	94.08.25.15.00.44;	author jkc;	state Exp;
branches;
next	1.3;

1.3
date	92.10.22.16.50.49;	author john;	state Exp;
branches;
next	1.2;

1.2
date	92.04.23.15.18.39;	author john;	state Exp;
branches;
next	1.1;

1.1
date	91.09.28.09.04.28;	author jkcohen;	state Exp;
branches;
next	;


desc
@Resampling of time dimension
@


1.16
log
@added Reg Beardsley's checkpar()
@
text
@/* Copyright (c) Colorado School of Mines, 2011.*/
/* All rights reserved.                       */

/* SURESAMP: $Revision: 1.14 $ ; $Date: 2006/09/04 19:29:32 $        */

#include "su.h"
#include "segy.h"
#include "header.h"

/*********************** self documentation **********************/
char *sdoc[] = {
"                                                                   ",
" SURESAMP - Resample in time                                       ",
"                                                                   ",
" suresamp <stdin >stdout  [optional parameters]                    ",
"                                                                   ",
" Required parameters:                                              ",
"     none                                                          ",
"                                                                   ",
" Optional Parameters:                                              ",
"    nt=tr.ns    number of time samples on output                   ",
"    dt=         time sampling interval on output                   ",
"                default is:                                        ",
"                tr.dt/10^6     seismic data                        ",
"                tr.d1          non-seismic data                    ",
"    tmin=       time of first sample in output                     ",
"                default is:                                        ",
"                tr.delrt/10^3  seismic data                        ",
"                tr.f1          non-seismic data                    ",
"    rf=         resampling factor;                                 ",
"                if defined, set nt=nt_in*rf and dt=dt_in/rf        ",
"    verbose=0   =1 for advisory messages                           ",
"                                                                   ",
"                                                                   ",
" Example 1: (assume original data had dt=.004 nt=256)              ",
"    sufilter <data f=40,50 amps=1.,0. |                            ",
"    suresamp nt=128 dt=.008 | ...                                  ",
" Using the resampling factor rf, this example translates to:       ",
"    sufilter <data f=40,50 amps=1.,0. | suresamp rf=0.5 | ...      ",
"                                                                   ",
" Note the typical anti-alias filtering before sub-sampling!        ",
"                                                                   ",
" Example 2: (assume original data had dt=.004 nt=256)              ",
"    suresamp <data nt=512 dt=.002 | ...                            ",
" or use:                                                           ",
"    suresamp <data rf=2 | ...                                      ",
"                                                                   ",
" Example 3: (assume original data had d1=.1524 nt=8192)            ",
"    sufilter <data f=0,1,3,3.28 amps=1,1,1,0 |                     ",
"    suresamp <data nt=4096 dt=.3048 | ...                          ",
"                                                                   ",
" Example 4: (assume original data had d1=.5 nt=4096)               ",
"    suresamp <data nt=8192 dt=.25 | ...                            ",
"                                                                   ",
NULL};

/* Credits:
 *    CWP: Dave (resamp algorithm), Jack (SU adaptation)
 *    CENPET: Werner M. Heigl - modified for well log support
 *    RISSC: Nils Maercklin 2006 - minor fixes, added rf option
 *
 * Algorithm:
 *    Resampling is done via 8-coefficient sinc-interpolation.
 *    See "$CWPROOT/src/cwp/lib/intsinc8.c" for technical details.
 *
 * Trace header fields accessed:  ns, dt, delrt, d1, f1, trid
 * Trace header fields modified:  ns, dt, delrt (only when set tmin)
 *                                d1, f1 (only when set tmin)
 */
/************************ end self doc ***************************/


segy intrace, outtrace;

int
main(int argc, char **argv)
{
    int nt;            /* number of samples on output trace */
    int nt_in;         /* ... on input trace */
    float dt;          /* sample rate on output trace */
    int idt;           /* ... as integer */
    float dt_in;       /* ... on input trace */
    float tmin;        /* first time sample on output trace */
    float tmin_in;     /* ... on input trace */
    float *t;          /* array of output times */
    int tmin_is_set=0; /* flag for user-defined tmin */
    float rf;          /* resampling factor */
                       /* (rf>1 means down- and rf<1 up-sampling) */ 
    int verbose;       /* if 1(yes) display advisory messages */
    cwp_Bool seismic;  /* flag: is this seismic data? */
 
    
    /* Hook up getpar */
    initargs(argc, argv);
    requestdoc(1);

    /* Get verbose parameter */
    if (!getparint("verbose", &verbose)) verbose = 0;

    /* Get information from first trace */
    if (!gettr(&intrace)) err("can't get first trace");
    nt_in = intrace.ns;
    if (!nt_in)  err("ns not set in header");

    /* check for seismic or well log data */
    seismic = ISSEISMIC(intrace.trid);        
    if (seismic) {
        if (verbose)
            warn("input is seismic data, trid=%d",intrace.trid);
        dt_in   = ((double) intrace.dt)/1000000.0;
        tmin_in = ((double) intrace.delrt)/1000.0;  
    }
    else {
        if (verbose)
            warn("input is not seismic data, trid=%d",intrace.trid);
        dt_in   = intrace.d1;
        tmin_in = intrace.f1;
    }
    
    /* check input times */
    if (!dt_in) getparfloat("dt_in", &dt_in);
    if (!dt_in) err("dt or d1 not set in header or not getparred");
    if (!tmin_in && verbose) warn("delrt or f1 not set in header");

    /* Get parameters */
    if (!getparfloat("rf", &rf)) rf=0.0;
    if (rf<0.0) err("factor rf=%g must be positive", rf);

    if (rf) {
        if (!getparint("nt", &nt)) nt = NINT( ((float)nt_in)*rf);
        if (!getparfloat("dt", &dt)) dt = dt_in/rf;
    }
    else {
        if (!getparint("nt", &nt)) nt = nt_in;
        if (!getparfloat("dt", &dt)) dt = dt_in;
    }
    if (getparfloat("tmin", &tmin)) tmin_is_set = 1;
    checkpars();

    /* Validate user input nt and dt */
    CHECK_NT("nt",nt);
    idt = NINT(dt * 1000000.0);
        
    /* Allocate vector of output times */
    t = ealloc1float(nt);

    /* Loop over traces */    
    do {
        if (!tmin_is_set)    tmin = tmin_in;
            
        /* Compute output times */
        { register int itime;
          register float tvalue;
          for (itime=0,tvalue=tmin; itime<nt; itime++,tvalue+=dt)
              t[itime] = tvalue;
        }
    
        /* copy and adjust header */
        memcpy(&outtrace, &intrace, HDRBYTES);
        outtrace.ns = nt;
        if (seismic)
            outtrace.dt = idt;
        else
            outtrace.d1 = dt;

        if (tmin_is_set) {
            if (seismic)
                outtrace.delrt = NINT(tmin * 1000.0);
            else
                outtrace.f1 = tmin;
        }
        
        /* sinc interpolate new data */
        ints8r(nt_in, dt_in, tmin_in, intrace.data, 
                0.0, 0.0, nt, t, outtrace.data);
        
        puttr(&outtrace);
    } while (gettr(&intrace));


    return(CWP_Exit());
}
@


1.15
log
@copyright
@
text
@d138 1
a138 1

@


1.14
log
@Nils Maerklin's update, includes a resampling factor
@
text
@d1 4
a4 1
/* SURESAMP: $Revision: 1.21 $ ; $Date: 2006/04/13 17:26:28 $        */
@


1.13
log
@latest repair
@
text
@d1 1
a1 1
/* SURESAMP: $Revision: 1.12 $ ; $Date: 2006/03/09 20:00:59 $	*/
d9 43
a51 35
"								",
" SURESAMP - Resample in time					",
"								",
" suresamp <stdin >stdout  [optional parameters]		",
"								",
" Required parameters:						",
"	none							",
"								",
" Optional Parameters:						",
"	nt=tr.ns	    number of time samples on output	",
"	dt=		    time sampling interval on output	",
"			    default is:				",
"				tr.dt/10^6  seismic data	",
"				tr.d1       non-seismic data	",
"	tmin=		    time of first sample in output	",
"			    default is:				",
"				tr.delrt/10^6  seismic data	",
"				tr.f1       non-seismic data	",
"	verbose=0	    =1 for advisory messages		",
"								",
" Example 1: (assume original data had dt=.004 nt=256)		",
" 	sufilter <data f=40,50 amps=1.,0. | 			",
" 	suresamp nt=128 dt=.008 | ...		 		",
" Note the typical anti-alias filtering before sub-sampling.	",
"								",
" Example 2: (assume original data had dt=.004 nt=256)		",
" 	suresamp <data nt=512 dt=.002 | ...	 		",
"								",
" Example 3: (assume original data had d1=.1524 nt=8192)	",
" 	sufilter <data f=0,1,3,3.28 amps=1,1,1,0 | 		",
" 	suresamp <data nt=4096 dt=.3048 | ...	 		",
"								",
" Example 4: (assume original data had d1=.5 nt=4096)		",
" 	suresamp <data nt=8192 dt=.25 | ...	 		",
"								",
d55 3
a57 2
 *	CWP: Dave (resamp algorithm), Jack (SU adaptation)
 *	CENPET: Werner M. Heigl - modified for well log support
d59 5
a63 1
 * Trace header fields accessed:  ns, dt, delrt, d1, f1
d65 1
a65 1
 *				      d1, f1 (only when set tmin)
d75 93
a167 35
	int nt;		/* number of samples on output trace	*/
	int nt_in;	/* ... on input trace			*/
	float dt;	/* sample rate on output trace		*/
	int idt;	/* ... as integer			*/
	float dt_in;	/* ... on input trace			*/
	float tmin;	/* first time sample on output trace	*/
	float tmin_in;	/* ... on input trace			*/
	float *t;	/* array of output times		*/
	int verbose; 	/* if 1(yes) display advisory messages  */
	cwp_Bool seismic;	/* is this seismic data?	*/
	
	int	tmin_is_set = 0;
	
	/* Hook up getpar */
	initargs(argc, argv);
	requestdoc(1);

	if (!getparint("verbose", &verbose))	verbose = 0;

	/* Get information from first trace */
	if (!gettr(&intrace)) err("can't get first trace");

	/* check for seismic or well log data */
	seismic = ISSEISMIC(intrace.trid);		
	if (seismic) {
		if (verbose)
			warn("input is seismic data, trid=%d",intrace.trid);
		dt_in   = ((double) intrace.dt)/1000000.0;
		tmin_in = ((double) intrace.delrt)/1000.0;  
	}
	else {
		if (verbose)
			warn("input is not seismic data, trid=%d",intrace.trid);
		dt_in   = intrace.d1;
		tmin_in = intrace.f1;
d169 7
a175 46
	if (!dt_in)  warn("dt or d1 not set in header or not getparred");
	if (!tmin_in)  warn("delrt or f1 not set in header or not getparred");
	nt_in   = intrace.ns;
	if (!nt_in)  err("ns not set in header or not getparred");
	
	/* Get parameters */
	if (!getparint("nt", &nt))	 nt = nt_in;
	CHECK_NT("nt",nt);
	
	if (!getparfloat("dt", &dt))	 dt = dt_in;
	idt = NINT(dt * 1000000.0);
	
	if (getparfloat("tmin", &tmin))		tmin_is_set = 1;
	
	/* Allocate vector of output times */
	t = ealloc1float(nt);

	/* Loop over traces */	
	do {
		if (!tmin_is_set)	tmin = tmin_in;
			
		/* Compute output times */
		{ register int itime;
		  register float tvalue;
		  for (itime=0,tvalue=tmin; itime<nt; itime++,tvalue+=dt)
			t[itime] = tvalue;
		}
	
		/* copy and adjust header */
		memcpy(&outtrace, &intrace, HDRBYTES);
		outtrace.ns = nt;
		if (seismic)	outtrace.dt = idt;
		else 		outtrace.d1 = dt;
		if (tmin_is_set) {
			if (seismic)
				outtrace.delrt = NINT(tmin * 1000.0);
			else
				outtrace.f1 = tmin;
		}
		
		/* sinc interpolate new data */
		ints8r(nt_in, dt_in, tmin_in, intrace.data, 
				0.0, 0.0, nt, t, outtrace.data);
		
		puttr(&outtrace);
	} while (gettr(&intrace));
d178 1
a178 1
	return(CWP_Exit());
@


1.12
log
@Werner Heigel's fixes
@
text
@d1 1
a1 1
/* SURESAMP: $Revision: 1.11 $ ; $Date: 2002/09/20 17:08:29 $	*/
d98 2
a99 2
	if (!dt_in)  err("dt or d1 not set in header or not getparred");
	if (!tmin_in)  err("delrt or f1 not set in header or not getparred");
@


1.11
log
@*** empty log message ***
@
text
@d1 1
a1 1
/* SURESAMP: $Revision: 1.10 $ ; $Date: 1997/10/20 15:30:28 $	*/
d19 9
a27 2
"	dt=tr.dt/10^6	    time sampling interval on output	",
"	tmin=tr.delrt/10^3  first time sample on output		",
d33 1
d36 8
d48 1
d50 3
a52 2
 * Trace header fields accessed:  ns, dt, delrt
 * Trace header fields modified:  ns, dt, delrt(only, when set tmin)
d70 2
d79 2
d83 17
d101 1
a101 1
	dt_in   = ((double) intrace.dt)/1000000.0;
d110 1
a110 2
	if (getparfloat("tmin", &tmin))
		tmin_is_set = 1;
d115 1
a115 1
	/* Loop on traces */	
d117 1
a117 3
		tmin_in = intrace.delrt/1000.0;
		if (tmin_is_set == 0)
			tmin = tmin_in;
d128 9
a136 4
		outtrace.ns    = nt;
		outtrace.dt    = idt;
		if (tmin_is_set == 1)
			outtrace.delrt = NINT(tmin * 1000.0);
@


1.10
log
@added Toralf's fix
@
text
@d1 1
a1 1
/* SURESAMP: $Revision: 1.9 $ ; $Date: 1996/02/22 15:56:21 $	*/
d105 1
a105 1
	return EXIT_SUCCESS;
@


1.9
log
@Using CHECK_NT to check output number of samples against SU_NFLTS.
@
text
@d1 1
a1 1
/* SURESAMP: $Revision: 1.8 $ ; $Date: 1996/02/05 19:40:37 $	*/
d34 1
a34 1
 * Trace header fields modified:  ns, dt, delrt
a49 1
	int itmin;	/* ... as integer			*/
d53 2
a61 1
	tmin_in = intrace.delrt/1000.0;
d65 3
a67 2
	if (!getparint("nt", &nt))	 nt = nt_in;     CHECK_NT("nt",nt);
	if (!getparfloat("tmin", &tmin)) tmin = tmin_in;
a68 1

d70 4
a73 2
	itmin = NINT(tmin * 1000.0);

a76 8
	/* Compute output times */
	{ register int itime;
	  register float tvalue;
	  for (itime=0,tvalue=tmin; itime<nt; itime++,tvalue+=dt)
		t[itime] = tvalue;
	}


d79 11
a89 1
		
d94 2
a95 1
		outtrace.delrt = itmin;
@


1.8
log
@Deal with header words accessed/modified down to sudoc.
@
text
@d1 1
a1 1
/* SURESAMP: $Revision: 1.7 $ ; $Date: 1996/02/02 16:05:43 $	*/
d41 1
d65 3
a67 3
	if (!getparint("nt", &nt))		nt = nt_in;
	if (!getparfloat("tmin", &tmin))	tmin = tmin_in;
	if (!getparfloat("dt", &dt))		dt = dt_in;
@


1.7
log
@added NINT in definition of idt
@
text
@d1 1
a1 1
/* SURESAMP: $Revision: 1.6 $ ; $Date: 1996/01/31 22:12:55 $	*/
a27 3
"								",
" Trace header fields accessed:  ns, dt, delrt			",
" Trace header fields modified:  ns, dt, delrt			",
d32 3
@


1.6
log
@put a NINT on the computation for delrt from tmin
@
text
@d1 1
a1 1
/* SURESAMP: $Revision: 1.5 $ ; $Date: 1995/08/04 15:21:39 $	*/
d68 1
a68 1
	idt = dt * 1000000.0;
@


1.5
log
@Cast tr.dt to signed data type.
@
text
@d1 1
a1 1
/* SURESAMP: $Revision: 1.4 $ ; $Date: 1994/08/25 15:00:44 $	*/
d69 1
a69 1
	itmin = tmin * 1000.0;
@


1.4
log
@Removed copyright statement from codes that had it.
Moved self-doc line for sudoc.
@
text
@d1 1
a1 1
/* SURESAMP: $Revision: 1.3 $ ; $Date: 92/10/22 16:50:49 $	*/
d61 1
a61 1
	dt_in   = intrace.dt/1000000.0;
@


1.3
log
@new selfdoc installed
@
text
@d1 1
a1 1
/* SURESAMP: $Revision: 1.2 $ ; $Date: 92/04/23 15:18:39 $	*/
a2 13
/*----------------------------------------------------------------------
 * Copyright (c) Colorado School of Mines, 1990.
 * All rights reserved.
 *
 * This code is part of SU.  SU stands for Seismic Unix, a processing line
 * developed at the Colorado School of Mines, partially based on Stanford
 * Exploration Project (SEP) software.  Inquiries should be addressed to:
 *
 *  Jack K. Cohen, Center for Wave Phenomena, Colorado School of Mines,
 *  Golden, CO 80401  (jkc@@dix.mines.colorado)
 *----------------------------------------------------------------------
 */

a31 1
/************************ end self doc ***************************/
d36 1
@


1.2
log
@changed selfdoc reference to suband to sufilter
@
text
@d1 1
a1 1
/* SURESAMP: $Revision: 1.1 $ ; $Date: 91/09/28 09:04:28 $	*/
d21 24
a44 24
String sdoc = "\
								\n\
SURESAMP - Resample in time					\n\
								\n\
suresamp <stdin >stdout  [optional parameters]		 	\n\
								\n\
Required parameters:						\n\
	none							\n\
								\n\
Optional Parameters:						\n\
	nt=tr.ns	    number of time samples on output	\n\
	dt=tr.dt/10^6	    time sampling interval on output	\n\
	tmin=tr.delrt/10^3  first time sample on output		\n\
								\n\
Example 1: (assume original data had dt=.004 nt=256)		\n\
 	sufilter <data f=40,50 amps=1.,0. | 			\n\
 	suresamp nt=128 dt=.008 | ...		 		\n\
Note the typical anti-alias filtering before sub-sampling.	\n\
Example 2: (assume original data had dt=.004 nt=256)		\n\
 	suresamp <data nt=512 dt=.002 | ...	 		\n\
								\n\
Trace header fields accessed:  ns, dt, delrt			\n\
Trace header fields modified:  ns, dt, delrt			\n\
";
d68 1
a68 1
	askdoc(1);
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/* SURESAMP: $Revision: 1.3 $ ; $Date: 90/11/15 10:43:44 $	*/
d36 1
a36 1
 	suband <data f1=0 f2=0 f3=40 f4=50 | 			\n\
@
