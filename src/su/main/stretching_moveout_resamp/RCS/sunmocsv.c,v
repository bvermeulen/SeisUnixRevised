head	1.1;
access;
symbols;
locks
	john:1.1; strict;
comment	@ * @;


1.1
date	2021.10.04.00.56.30;	author john;	state Exp;
branches;
next	;


desc
@sunmocsv by Andre Latour
@


1.1
log
@Initial revision
@
text
@/* Copyright (c) Colorado School of Mines, 2021.*/
/* All rights reserved.                       */

/* SUNMOCSV: $Revision: 1.01 $ ; $Date: 2021/08/28 00:00:01 $		*/
 
#include "su.h"
#include "segy.h" 
#include "gridread.h"
#include "gridxy.h"

/*********************** self documentation ******************************/
char *sdoc[] = {
"									     ",
" SUNMOCSV - NMO for an arbitrary velocity function of time and 3D or 2D CDP ",
"									     ",
"  sunmocsv <stdin >stdout [optional parameters]			     ",
"									     ",
" Optional Parameters:							     ",
" tnmo=0,...		NMO times corresponding to velocities in vnmo	     ",
" vnmo=1500,...		NMO velocities corresponding to times in tnmo	     ",
" cdp=			CDPs for which vnmo & tnmo are specified.            ",
" smute=1.5		samples with NMO stretch exceeding smute are zeroed  ",
" lmute=25		length (in samples) of linear ramp for stretch mute  ",
" sscale=1		=1 to divide output samples by NMO stretch factor    ",
" invert=0		=1 to perform (approximate) inverse NMO		     ",
" upward=0		=1 to scan upward to find first sample to kill	     ",
" voutfile=		if set, interplolated velocity function v[cdp][t] is ",
"			output to named file.			     	     ",
"									     ",
" rfile=                If set, read a K-file containing 3D grid definition. ", 
"                       Assume 2D if no K-file and no grid definition is     ", 
"                       supplied via command line parameters. The required   ", 
"                       command line parameters are: grid_xa,grid_ya,        ", 
"                       grid_xb,grid_yb, grid_xc,grid_yc, grid_wb, grid_wc.  ", 
"                       (See program SUBINCSV for 3D grid details).          ", 
"                       If this is a 3D then the input CDPs for the velocity ", 
"                       functions and the seismic trace CDP key should be    ", 
"                       3D grid cell numbers as produced by SUBINCSV.        ", 
"                       A 3D also forces restrictions on the locations of the", 
"                       input velocity functions. Their CDP locations must   ", 
"                       form aligned rectangles (see Notes).                 ", 
"									     ",
" check=0               Do not print grid checking and function locations.   ",
"                       =1 If grid definition input, run some grid functions ",
"                          on the 4 grid corner points and print results.    ",
"                          Also print input velocity function location       ",
"                          information by using the grid definition and      ",
"                          the input cdp= values. The format and values are: ",
"                            G,cdp,igi,igc,xgrid,ygrid,xworld,yworld.        ",
"                          (The format is intended to make it easy to see    ",
"                          and also to make it easy to load to spreadsheets).",
"                          This information can be written to a file by      ",
"                          putting 2>yourfile on the command line.           ",
"									     ",
" Notes:								     ",
" For constant-velocity NMO, specify only one vnmo=constant and omit tnmo.   ",
"									     ",
" NMO interpolation error is less than 1% for frequencies less than 60% of   ",
" the Nyquist frequency.						     ",
"									     ",
" Exact inverse NMO is impossible, particularly for early times at large     ",
" offsets and for frequencies near Nyquist with large interpolation errors.  ",
" 								     	     ",
" The \"offset\" header field must be set.				     ",
" Use suazimuth to set offset header field when sx,sy,gx,gy are all	     ",
" nonzero. 							   	     ",
"									     ",
" For NMO with a velocity function of time only, specify the arrays	     ",
"	   vnmo=v1,v2,... tnmo=t1,t2,...				     ",
" where v1 is the velocity at time t1, v2 is the velocity at time t2, ...    ",
" The times specified in the tnmo array must be monotonically increasing.    ",
" Linear interpolation and constant extrapolation of the specified velocities",
" is used to compute the velocities at times not specified.		     ",
" The same holds for the anisotropy coefficients as a function of time only. ",
"									     ",
" For NMO with a velocity function of time and CDP, specify the array	     ",
"	   cdp=cdp1,cdp2,...						     ",
" and, for each CDP specified, specify the vnmo and tnmo arrays as described ",
" above. The first (vnmo,tnmo) pair corresponds to the first cdp, and so on. ",
"									     ",
" For 3D, the user needs to input velocity functions which form aligned      ",
" rectangles. That is, how-ever-many grid inlines the user chooses to put    ",
" velocity functions on, there must always be the same number of functions   ",
" on each inline and those functions must be located at same grid crosslines.",
" For instance, if user inputs functions for inline 7 at crosslines 15,25,40 ",
" then the user must input the functions at crosslines 15,25,40 for any other",
" inlines that the user wants to supply functions for. (If user is lucky     ",
" enough that the grid has 100 inlines, then the input functions could be at ",
" CDPs 715,725,740 and 1115,1125,1140 and 2015,2025,2040 and 2515,2525,2540. ",
" Note that the CDP numbers specified on the cdp= parameter and also in the  ",
" input seismic trace cdp key are translated to inline and crossline numbers ",
" using the input 3D grid definition - so those cdp numbers need to          ",
" correspond to the input 3D grid definition.                                ",
"									     ",
" For CDPs not specified in the input cdp= parameter, bilinear interpolation ",
" of 1/velocity_squared is done if CDP is surrounded by 4 input functions,   ",
" linear interpolation of 1/velocity_squared is done if the CDP is outside   ",
" the sides of fully surrounded area, constant extrapolation if the CDP is   ",
" outside the corners of fully surrounded area. If functions are only input  ",
" along 1 inline (or 1 crossline) then the result is linear interpolation    ",
" of 1/velocity_squared along that direction (and constant beyond ends).     ",
"									     ",
" The format of the output interpolated velocity file is unformatted C floats",
" with vout[cdp][t], with time as the fast dimension and may be used as an   ",
" input velocity file for further processing.				     ",
"									     ",
" Note this version of sunmocsv does not attempt to deal with anisotropy.    ",
"									     ",
NULL};

/* Credits:
 *	SEP: Shuki Ronen, Chuck Sword
 *	CWP: Shuki Ronen, Jack, Dave Hale, Bjoern Rommel
 *      Modified: 08/08/98 - Carlos E. Theodoro - option for lateral offset
 *      Modified: 07/11/02 - Sang-yong Suh -
 *	  added "upward" option to handle decreasing velocity function.
 *      CWP: Sept 2010: John Stockwell
 *	  1. replaced Carlos Theodoro's fix 
 *	  2. added  the instruction in the selfdoc to use suazimuth to set 
 *	      offset so that it accounts for lateral offset. 
 *        3. removed  Bjoren Rommel's anisotropy stuff. sunmo_a is the 
 *           version with the anisotropy parameters left in.
 *        4. note that scalel does not scale the offset field in
 *           the segy standard.
 *        Modified Sept 2021: Andre Latour   
 *	  1. added 3D option (bilinear interpolation of velocity functions).
 *           This is activated by input of a 3D grid definition.                   
 *           See the SUBINCSV program for grid definition details.               
 * Technical Reference:
 *	The Common Depth Point Stack
 *	William A. Schneider
 *	Proc. IEEE, v. 72, n. 10, p. 1238-1254
 *	1984
 *
 * Trace header fields accessed: ns, dt, delrt, offset, cdp, scalel
 */
/**************** end self doc *******************************************/

segy tr;

/* Structure for velocity information */
struct  VelInfo {
     int *kinf;
     float *ovv;
};

struct VelInfo *RecInfo; /* Storage for all vel location value pointers */
struct VelInfo  guy;     /* Storage for one vel location value pointers */

static void binterpovv(int nt, struct VelInfo *RecInfo,   /* bilinear interpolation of vels */ 
            int kigi, int *mgi, int mgi_tot, int igimin, int igimax,
            int kigc, int *mgc, int mgc_tot, int igcmin, int igcmax, float *ovvt) ;

int compSort2 (const void * q1, const void * q2) ; /* comparison function for qsort  */

int bhighi(int *all, int last, int iguy) ;         /* binary search */

int
main(int argc, char **argv)
{
	int nt;			/* number of time samples per trace */
	float dt;		/* time sampling interval */
	float ft;		/* time of first sample */
	int it;			/* time sample index */

	int ncdp;		/* number of cdps specified */
  	int *cdp=NULL;	        /* array[ncdp] of cdps */
	int icdp;		/* index into cdp array */
	int jcdp;		/* index into cdp array */

	int nvnmo;		/* number of vnmos specified */
	float *vnmo=NULL;	/* array[nvnmo] of vnmos */
	int ntnmo;		/* number of tnmos specified */
	float *tnmo=NULL;	/* array[ntnmo] of tnmos */
	float *ovvt=NULL;	/* array[nt] of sloth for a particular trace */

	float smute;		/* zero samples with NMO stretch exceeding */
				/*  smute */
	float osmute;		/* 1/smute */
	int lmute;		/* length in samples of linear ramp for mute */
	int itmute=0;		/* zero samples with indices less than itmute */
	int sscale;		/* if non-zero, apply NMO stretch scaling */
	int invert;		/* if non-zero, do inverse NMO */
	
	long oldoffset;		/* offset of previous trace */
	long oldcdp;		/* cdp of previous trace */

	int newsloth;		/* if non-zero, new sloth function was */
				/* computed */

	float tn;		/* NMO time (time after NMO correction) */
	float v;		/* velocity */
	float *qtn=NULL;	/* NMO-corrected trace q(tn) */
	float *ttn=NULL;	/* time t(tn) for NMO */
	float *atn=NULL;	/* amplitude a(tn) for NMO */
	float *qt=NULL;		/* inverse NMO-corrected trace q(t) */
	float *tnt=NULL;	/* time tn(t) for inverse NMO */
	float *at=NULL;		/* amplitude a(t) for inverse NMO */

	float temp;		/* temporary float */
	float tsq;		/* temporary float */
	int upward;		/* scans upward if it's nonzero. */

	float offset;		/* value of offset honoring scalel */

	char *voutfile="";	/* name of interpolated output vel file */
	FILE *voutfp=NULL;	/* ... its file pointer */
	cwp_Bool isvoutfile=cwp_false; /* is output vel file specified? */
	float voutt[1];	/* output velocities */

        cwp_String Rname=NULL;  /* text file name for values            */
        FILE *fpR=NULL;         /* file pointer for Rname input file    */
        double gvals[999];      /* to contain the grid definition       */

	int n=0;
	
	/* hook up getpar */
	initargs(argc, argv);
	requestdoc(1);

/* NOTE: In this main code I make an effort to conform to the          */
/*       original indentation style (even tho I find it awkward).      */

/* ------------------------------------------------------------------- */
/* Process and set the grid definition values?                         */

        getparstring("rfile", &Rname);
      
        int maygrid;;
        gridcommand(&maygrid);
      
        int is3d = 1;
        if(maygrid==1  && Rname != NULL) err("error: input k-file not allowed when full grid on command line.");
        if(maygrid==-1 && Rname == NULL) err("error: input k-file required when partial grid on command line.");
        if(maygrid==0  && Rname == NULL) is3d = 0;

        int icheck;
        if (!getparint("check", &icheck)) icheck = 0;

        if(is3d==1) {

                if(maygrid!=1) { /* open if not full grid on command line (else pass fpR still NULL) */
                        fpR = fopen(Rname, "r");
                        if(fpR==NULL) err("error: input K-file did not open correctly.");
                }

                int errwarn = 1; /* print if error or unusual thing inside gridread */
                gridread(fpR,gvals,&errwarn); 
                if(errwarn>0) err("error reading grid (from K-file or command line parameters)");

                gridset(gvals,&errwarn); 

                if(errwarn==1) err ("gridset error: grid_wb cell width must be positive.");
                else if(errwarn==2) err ("gridset error: grid_wc cell width must be positive.");
                else if(errwarn==3) err ("gridset error: corner B is within grid_wb cell width of corner A.");
                else if(errwarn>0) err ("gridset error: returned with some unrecognized error code.");
                else if(errwarn==-1) warn ("gridset warning: corner C is near A and is reset to A.");
 
                gridcheck(gvals,icheck,&errwarn); 
                if(errwarn>0) err ("gridcheck error: returned with some unrecognized error code.");
        }

	/* get information from the first header */
	if (!gettr(&tr)) err("error: can't get first trace");
	nt = tr.ns;
	dt = ((double) tr.dt)/1000000.0;
	ft = tr.delrt/1000.0;

	/* if specified, open output velocity file */
	getparstring("voutfile",&voutfile);
	if (*voutfile!='\0') {
		isvoutfile=cwp_true;
		
		if((voutfp=fopen(voutfile,"w"))==NULL)
                        err("error: cannot open voutfile=%s\n",voutfile);
	}

	/* get velocity functions, linearly interpolated in time */
	ncdp = countparval("cdp");
	if (ncdp>0) {
		if (countparname("vnmo")!=ncdp)
			err("error: a vnmo array must be specified for each cdp");
		if (countparname("tnmo")!=ncdp)
			err("error: a tnmo array must be specified for each cdp");
	} else {
		ncdp = 1;
		if (countparname("vnmo")>1)
			err("error: only one (or no) vnmo array must be specified");
		if (countparname("tnmo")>1)
			err("error: only one (or no) tnmo array must be specified");
	}
  	cdp = ealloc1int(ncdp); /* changed type to int */
        if (!getparint("cdp",cdp)) cdp[0] = tr.cdp;

/* The values from each record are going to be stored.              */
/* For quick "finding" we will sort by igi,igc (or icdp for 2d).    */
/* But we are only going to sort the pointers to the record values, */
/* not the record values themselves. The record values will stay    */
/* where they were stored during read-in.                           */
/* Allocate the memory in big chunks, then use pointer arithmatic   */
/* to divide that memory amoung the individual record pointers.     */
/* (We could, of course, simply allocate record-by-record but that  */
/*  means the memory could be spangled around - usually faster to   */
/*  keep values near each other).                                   */

        RecInfo = ealloc1(ncdp,sizeof(struct VelInfo)); 

        int *tinf = ealloc1int(ncdp*3);
        for(n=0; n<ncdp; n++) RecInfo[n].kinf = tinf + n*3;

        float *tvel = ealloc1float(ncdp*nt);
        for(n=0; n<ncdp; n++) RecInfo[n].ovv = tvel + n*nt;

        guy.kinf = ealloc1int(3);
/*      guy.ovv  = ealloc1float(nt);  */

        int ierr = 0;
        if(is3d==1 && icheck>0) 
                warn("Velocity location information follows: G,cdp,igi,igc,  xgrid,ygrid,  xworld,yworld");

	for (icdp=0; icdp<ncdp; ++icdp) {

		nvnmo = countnparval(icdp+1,"vnmo");
		ntnmo = countnparval(icdp+1,"tnmo");

		if (nvnmo!=ntnmo && !(ncdp==1 && nvnmo==1 && ntnmo==0))
			err("error: number of vnmo and tnmo values must be equal");

		if (nvnmo==0) nvnmo = 1;
		if (ntnmo==0) ntnmo = nvnmo;

		/* equal numbers of parameters vnmo, tnmo */
		vnmo = ealloc1float(nvnmo);
		tnmo = ealloc1float(nvnmo);

		if (!getnparfloat(icdp+1,"vnmo",vnmo)) vnmo[0] = 1500.0;
		if (!getnparfloat(icdp+1,"tnmo",tnmo)) tnmo[0] = 0.0;
		for (it=1; it<ntnmo; ++it)
			if (tnmo[it]<=tnmo[it-1])
				err("error: tnmo values must increase monotonically");
		for (it=0,tn=ft; it<nt; ++it,tn+=dt) {
			intlin(ntnmo,tnmo,vnmo,vnmo[0],vnmo[nvnmo-1],1,&tn,&v);
			RecInfo[icdp].ovv[it] = 1.0/(v*v);
		}

		free1float(vnmo);
		free1float(tnmo);

                RecInfo[icdp].kinf[0] = cdp[icdp];
                if(is3d==1) {
                        gridcdpic(gvals,RecInfo[icdp].kinf[0],RecInfo[icdp].kinf+1,RecInfo[icdp].kinf+2);

                        if(RecInfo[icdp].kinf[1] < -2147483644) ierr = 1;

                        if(icheck>0) {
                                double xg;
                                double yg;
                                double xw;
                                double yw;
                                gridicgridxy(gvals,RecInfo[icdp].kinf[1],RecInfo[icdp].kinf[2],&xg,&yg);
                                gridicrawxy(gvals,RecInfo[icdp].kinf[1],RecInfo[icdp].kinf[2],&xw,&yw);
                                warn("G,%12d,%12d,%12d,  %.20g,%.20g,  %.20g,%.20g",
                                RecInfo[icdp].kinf[0],RecInfo[icdp].kinf[1],RecInfo[icdp].kinf[2],xg,yg,xw,yw);
                        }
                }
                else { /* if no 3d grid input, set inline to cdp and crossline to 1 */ 
                        RecInfo[icdp].kinf[1] = RecInfo[icdp].kinf[0];
                        RecInfo[icdp].kinf[2] = 1;
                }

	}

        if(ierr>0) err("error: At least one Input Velocity function cdp is not in grid");

        qsort(RecInfo,ncdp,sizeof(struct VelInfo),compSort2);

        for (jcdp=1; jcdp<ncdp; ++jcdp) {
                if(RecInfo[jcdp-1].kinf[1] == RecInfo[jcdp].kinf[1] &&
                   RecInfo[jcdp-1].kinf[2] == RecInfo[jcdp].kinf[2]) {
                        err("error: Two velocity functions input for cdp,igi,igc = %d %d %d",
                            RecInfo[jcdp].kinf[0],RecInfo[jcdp].kinf[1],RecInfo[jcdp].kinf[2]);
                }
        }

/* For bilinear interpolation the user needs to input velocity functions which form aligned rectangles. */
/* That is, howevermany inlines the user chooses to put velocity function on, there must always be the  */
/* same number of functions on each inline and those functions must be located at the same crosslines.  */
/* For instance, if user inputs velocity functions for inline 7 at crosslines 15,25,40 then the user    */
/* must input the functions at crosslines 15,25,40 for any other inlines that the user wants to supply  */
/* functions for. The following code enforces that restriction on the user input.                       */

        int mgi_tot = -1;
        int igc_low = RecInfo[0].kinf[2]; 
        for (jcdp=0; jcdp<ncdp; ++jcdp) {
                if(RecInfo[jcdp].kinf[2] != igc_low) {
                        mgi_tot = jcdp; /* since jcdp starts at 0 */
                        break;
                }
        }
        if(mgi_tot==-1) mgi_tot = ncdp; /* if all kinf[2] are the same value */

        int igc_set = RecInfo[0].kinf[2]; /* igc value of first set, so cannot match next set */
        int iset_tot = mgi_tot;
        for (jcdp=mgi_tot; jcdp<ncdp; ++jcdp) {
                if(RecInfo[jcdp-mgi_tot].kinf[1] != RecInfo[jcdp].kinf[1]) {
                        err("error: Input velocity functions are irregularly spaced (at cdp= %d)",jcdp);
                }
                if(igc_set == RecInfo[jcdp].kinf[2]) iset_tot++;
                else {
                        if(iset_tot != mgi_tot) {
                                err("error: Not same number of input velocity functions as first set (at cpd= %d)",jcdp);
                        }
                        igc_set = RecInfo[jcdp].kinf[2];
                        iset_tot = 1;
                }
        }

        int mgc_tot = ncdp/mgi_tot;

/* Now, set the inline and crossline ranges (easy after sort). To understand how these are used,    */
/* note that the input function locations cover one large rectangular area. But input traces will   */
/* still have some cdps outside of that area. We want the interpolation to change from bilinear to  */
/* linear for points outside the sides of that area (and to constant for points outside the corners */
/* of that area). This is accomplished by resetting outside cdps to be ON the edge, which basically */
/* means that 2 of the 4 functions in the computation get zero weights (for corners it means that   */
/* 3 of the 4 functions get zero weights). It only LOOKS like 4 input functions always contribute.  */

        int igimin = RecInfo[0].kinf[1];
        int igimax = RecInfo[ncdp-1].kinf[1];
        int igcmin = RecInfo[0].kinf[2];
        int igcmax = RecInfo[ncdp-1].kinf[2];

/* OK, a brief review so as not to get confused here. We sorted on 2 values (inline and crossline   */
/* numbers of each cdp). Then we checked/enforced the restriction that there always be the same     */
/* number of crossline locations specified for every specified inline. That is, we made sure that   */
/* we always have things like 5inlines by 3crosslines or 17inlines by 12crosslines or whatever.     */
/* We have effectively forced the users to specify a 2-dimensional array. Now we are going to take  */
/* advantage of that fact within binterpovv by binary-searching each dimension separately in order  */
/* to find the 4 surrounding locations that we need for bilinear interpolation.                     */
/* So, allocate and copy the inline and crossline numbers from the sorted RecInfo.                  */

        int *mgi = ealloc1int(mgi_tot);
        int *mgc = ealloc1int(mgc_tot);

        for (jcdp=0; jcdp<mgi_tot; ++jcdp) mgi[jcdp] = RecInfo[jcdp].kinf[1];
        for (jcdp=0; jcdp<mgc_tot; ++jcdp) mgc[jcdp] = RecInfo[jcdp*mgi_tot].kinf[2];

	/* get other optional parameters */
	if (!getparfloat("smute",&smute)) smute = 1.5;
	if (smute<=0.0) err("error: smute must be greater than 0.0");
	if (!getparint("lmute",&lmute)) lmute = 25;
	if (!getparint("sscale",&sscale)) sscale = 1;
	if (!getparint("invert",&invert)) invert = 0;
	if (!getparint("upward",&upward)) upward = 0;
        checkpars();

	/* allocate workspace */
	ovvt = ealloc1float(nt);
	ttn = ealloc1float(nt);
	atn = ealloc1float(nt);
	qtn = ealloc1float(nt);
	tnt = ealloc1float(nt);
	at = ealloc1float(nt);
	qt = ealloc1float(nt);

        int kigi;
        int kigc = 1; /* set to 1 in case this is a 2D */ 

	/* interpolate sloth and anis function for first trace */
        if(is3d==1) { 
                gridcdpic(gvals,tr.cdp,&kigi,&kigc);
                if(kigi<-2147483644) err("Error: input cdp= %d not in grid.",tr.cdp); 
        }
        else kigi = tr.cdp;

        binterpovv(nt,RecInfo, kigi,mgi,mgi_tot,igimin,igimax,
                               kigc,mgc,mgc_tot,igcmin,igcmax, ovvt);

	/* if specified output output velocity for first trace */
	if(isvoutfile) {
			for (it=0; it<nt; ++it) {	
				float veltemp=ovvt[it];
				voutt[0]=sqrt(1.0/veltemp);
				efwrite(voutt,FSIZE,1,voutfp);
			}
	}

	/* set old cdp and old offset for first trace */
	oldcdp = tr.cdp;
	oldoffset = tr.offset-1; /* here offset is used as a marker */
				 /* there is no need to have it honor scalel */

	/* loop over traces */

	do {
		/* if necessary, compute new sloth and anis function */
		if (tr.cdp!=oldcdp && ncdp>1) {

                        if(is3d==1) { 
                                gridcdpic(gvals,tr.cdp,&kigi,&kigc);
                                if(kigi<-2147483644) err("Error: input cdp= %d not in grid.",tr.cdp); 
                        }
                        else kigi = tr.cdp;

                        binterpovv(nt,RecInfo, kigi,mgi,mgi_tot,igimin,igimax,
                                               kigc,mgc,mgc_tot,igcmin,igcmax, ovvt);

			newsloth = 1;
			/* if specified output output velocity */
			if(isvoutfile) {
				for (it=0; it<nt; ++it) {	
					float veltemp=ovvt[it];
					voutt[0]=sqrt(1.0/veltemp);
					efwrite(voutt,FSIZE,1,voutfp);
				}
			}
		} else {
			newsloth = 0;
		}

		/* if sloth function or offset has changed */
		if (newsloth || tr.offset!=oldoffset) {

			offset = (float) (tr.offset);
			

			/* compute time t(tn) (normalized) */
			temp = ((float) offset*offset)/(dt*dt);
			for (it=0,tn=ft/dt; it<nt; ++it,tn+=1.0) {
				tsq = temp*ovvt[it];
				ttn[it] = sqrt (tn*tn + tsq);

	
			}
			/* compute inverse of stretch factor a(tn) */
			atn[0] = ttn[1]-ttn[0];
			for (it=1; it<nt; ++it)
				atn[it] = ttn[it]-ttn[it-1];
			
			/* determine index of first sample to survive mute */
			osmute = 1.0/smute;
			if(!upward) {
				for (it=0; it<nt-1 && atn[it]<osmute; ++it);
			} else {
				/* scan samples from bottom to top */
				for (it=nt-1; it>0 && atn[it]>=osmute; --it);
			}
			itmute = it;


			/* if inverse NMO will be performed */
			if (invert) {
							
				/* compute tn(t) from t(tn) */
				yxtoxy(nt-itmute,1.0,ft/dt+itmute,&ttn[itmute],
					nt-itmute,1.0,ft/dt+itmute,
					ft/dt-nt,ft/dt+nt,&tnt[itmute]);
			
				/* adjust mute time */
				itmute = 1.0+ttn[itmute]-ft/dt;
				itmute = MIN(nt-2,itmute);
								
				/* compute a(t) */
				if (sscale) {
					for (it=itmute+1; it<nt; ++it)
						at[it] = tnt[it]-tnt[it-1];
					at[itmute] = at[itmute+1];
				}
			}
		}
		
		/* if forward (not inverse) nmo */
		if (!invert) {
	
			/* do nmo via 8-point sinc interpolation */
			ints8r(nt,1.0,ft/dt,tr.data,0.0,0.0,
				nt-itmute,&ttn[itmute],&qtn[itmute]);
			
			/* apply mute */
			for (it=0; it<itmute; ++it)
				qtn[it] = 0.0;
			
			/* apply linear ramp */
			for (it=itmute; it<itmute+lmute && it<nt; ++it)
				qtn[it] *= (float)(it-itmute+1)/(float)lmute;
			
			/* if specified, scale by the NMO stretch factor */
			if (sscale)
				for (it=itmute; it<nt; ++it)
					qtn[it] *= atn[it];
			
			/* copy NMO corrected trace to output trace */
			memcpy( (void *) tr.data,
					(const void *) qtn, nt*sizeof(float));
		
		/* else inverse nmo */
		} else {
	
			/* do inverse nmo via 8-point sinc interpolation */
			ints8r(nt,1.0,ft/dt,tr.data,0.0,0.0,
				nt-itmute,&tnt[itmute],&qt[itmute]);
			
			/* apply mute */
			for (it=0; it<itmute; ++it)
				qt[it] = 0.0;
			
			/* if specified, undo NMO stretch factor scaling */
			if (sscale)
				for (it=itmute; it<nt; ++it)
					qt[it] *= at[it];
			
			/* copy inverse NMO corrected trace to output trace */
			memcpy( (void *) tr.data,
					(const void *) qt,nt*sizeof(float));
		}

		/* write output trace */
		puttr(&tr);

		/* remember offset and cdp */
		oldoffset = tr.offset;
		oldcdp = tr.cdp;

	} while (gettr(&tr));

	if (isvoutfile) efclose(voutfp);
	return(CWP_Exit());
}

/* bilinearly interpolate/extrapolate sloth between 4 surrounding functions. Note input traces can  */
/* still have cdps outside of the covered area. The interpolation herein changes from bilinear to   */
/* linear for points outside the edges of that area (and to constant for points outside the corners */
/* of that area). This is accomplished here by resetting outside cdps to be ON edge, which basically*/
/* means that 2 of the 4 functions in the computation get zero weights (for corners it means that   */
/* 3 of the 4 functions get zero weights). It only LOOKS like 4 input functions always contribute.  */


static void binterpovv(int nt, struct VelInfo *RecInfo,
                       int kigi, int *mgi, int mgi_tot, int igimin, int igimax,
                       int kigc, int *mgc, int mgc_tot, int igcmin, int igcmax, float * ovvt) {

  int jt=0;

  if(mgi_tot==1 && mgc_tot==1) {
    for (jt=0; jt<nt; ++jt) ovvt[jt] = RecInfo[0].ovv[jt];
    return;
  }

  int mgix;
  if(kigi<=igimin) {
    mgix = 1;
    kigi = igimin;
  }
  else if(kigi>=igimax) { 
    mgix = mgi_tot - 1; /* yes, this works for off-edge at the top        */
    kigi = igimax;      /* since it gives 0 weight for the other 2 points */
  }
  else {
    mgix = bhighi(mgi, mgi_tot, kigi);
  }

  if(mgc_tot==1) {
    float wi = ((float)(mgi[mgix]-kigi)) / ((float)(mgi[mgix]-mgi[mgix-1]));
    for (jt=0; jt<nt; ++jt) ovvt[jt] = wi*RecInfo[mgix-1].ovv[jt] + (1.0-wi)*RecInfo[mgix].ovv[jt];  
    return;
  }

  int mgcx;
  if(kigc<=igcmin) {
    mgcx = 1;
    kigc = igcmin;
  }
  else if(kigc>=igcmax) {
    mgcx = mgc_tot - 1; /* yes, this works for off-edge at the right      */
    kigc = igcmax;      /* since it gives 0 weight for the other 2 points */
  }
  else {
    mgcx = bhighi(mgc, mgc_tot, kigc);
  }

  if(mgi_tot==1) { /* andre, weight might be applied backwards */
    float wc = ((float)(mgc[mgcx]-kigc)) / ((float)(mgc[mgcx]-mgc[mgcx-1]));
    for (jt=0; jt<nt; ++jt) ovvt[jt] = wc*RecInfo[mgcx-1].ovv[jt] + (1.0-wc)*RecInfo[mgcx].ovv[jt];  
    return;
  }

  float wi = ((float)(mgi[mgix]-kigi)) / ((float)(mgi[mgix]-mgi[mgix-1]));
  float wc = ((float)(mgc[mgcx]-kigc)) / ((float)(mgc[mgcx]-mgc[mgcx-1]));
  int ndxi = mgix-1 + mgi_tot * (mgcx-1); 
  int ndxc = ndxi   + mgi_tot;


  for (jt=0; jt<nt; ++jt) {
    ovvt[jt] =  wc      * (wi*RecInfo[ndxi].ovv[jt] + (1.0-wi)*RecInfo[ndxi+1].ovv[jt])  
             + (1.0-wc) * (wi*RecInfo[ndxc].ovv[jt] + (1.0-wi)*RecInfo[ndxc+1].ovv[jt]);
  }

  return;
}

/* -----------------------------------------------------------         */
/* Specify compare function for qsort.                                 */

int compSort2 (const void * q1, const void * q2) {

  struct VelInfo* p1 = (struct VelInfo*) q1;
  struct VelInfo* p2 = (struct VelInfo*) q2;

/* Note I decided so sort to igc,igi order (kinf[2], then kinf[1])     */

  if(p1->kinf[2] < p2->kinf[2]) return (-1);
  if(p1->kinf[2] > p2->kinf[2]) return (1); 
  if(p1->kinf[1] < p2->kinf[1]) return (-1);
  if(p1->kinf[1] > p2->kinf[1]) return (1); 

  return (0); 

}

/* Standard binary search. But which side includes equal value */
/* is an important detail for other code in this program.      */

int bhighi(int *all, int last, int iguy) {
  int mid;
  int low = 0;
  int high = last;
  while (low < high) {
    mid = low + (high - low) / 2;
    if (iguy >= all[mid]) low = mid +1;
    else high = mid;
  }
  return low;
}
@
