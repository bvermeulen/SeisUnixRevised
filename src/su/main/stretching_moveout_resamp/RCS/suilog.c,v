head	1.17;
access;
symbols;
locks; strict;
comment	@ * @;


1.17
date	2011.11.16.23.21.55;	author john;	state Exp;
branches;
next	1.16;

1.16
date	2011.11.12.00.39.02;	author john;	state Exp;
branches;
next	1.15;

1.15
date	2003.06.09.16.17.07;	author john;	state Exp;
branches;
next	1.14;

1.14
date	97.07.28.22.36.46;	author john;	state Exp;
branches;
next	1.13;

1.13
date	96.02.21.23.39.07;	author jkc;	state Exp;
branches;
next	1.12;

1.12
date	96.02.21.22.59.51;	author jkc;	state Exp;
branches;
next	1.11;

1.11
date	96.01.30.15.30.13;	author jkc;	state Exp;
branches;
next	1.10;

1.10
date	96.01.25.20.32.58;	author jkc;	state Exp;
branches;
next	1.9;

1.9
date	95.08.02.20.03.15;	author jkc;	state Exp;
branches;
next	1.8;

1.8
date	93.06.07.16.35.15;	author john;	state Exp;
branches;
next	1.7;

1.7
date	93.06.07.16.27.10;	author john;	state Exp;
branches;
next	1.6;

1.6
date	92.10.26.10.56.49;	author john;	state Exp;
branches;
next	1.5;

1.5
date	91.09.17.13.16.37;	author jkcohen;	state Exp;
branches;
next	1.4;

1.4
date	91.09.05.08.50.48;	author jkcohen;	state Exp;
branches;
next	1.3;

1.3
date	90.11.15.10.43.30;	author jkc;	state Exp;
branches;
next	1.2;

1.2
date	90.05.25.19.25.54;	author jkc;	state Exp;
branches;
next	1.1;

1.1
date	90.04.18.20.34.51;	author jkc;	state Exp;
branches;
next	;


desc
@Inverse log stretch
@


1.17
log
@added Reg Beardsley's checkpar()
@
text
@/* Copyright (c) Colorado School of Mines, 2011.*/
/* All rights reserved.                       */

/* SUILOG: $Revision: 1.15 $ ; $Date: 2003/06/09 16:17:07 $	*/

#include "su.h"
#include "segy.h"

/*********************** self documentation **********************/
char *sdoc[] = {
"								",
" SUILOG -- time axis inverse log-stretch of seismic traces	",
"								",
" suilog nt= ntmin=  <stdin >stdout 				",
"								",
" Required parameters:						",
" 	nt= 	nt output from sulog prog			",
" 	ntmin= 	ntmin output from sulog prog			",
" 	dt= 	dt output from sulog prog			",
" Optional parameters:						",
" 	none							",
"								",
" NOTE:  Parameters needed by suilog to reconstruct the 	",
"	original data may be input via a parameter file.	",
" 								",
" EXAMPLE PROCESSING SEQUENCE:					",
" 		sulog outpar=logpar <data1 >data2		",
" 		suilog par=logpar <data2 >data3			",
" 								",
" 	where logpar is the parameter file			",
" 								",
NULL};

/* 
 * Credits:
 *	CWP: Shuki Ronen, Chris Liner
 *
 * Caveats:
 * 	amplitudes are not well preserved
 *
 * Trace header fields accessed: ns, dt
 * Trace header fields modified: ns, dt
 */
/**************** end self doc ********************************/


/* prototypes of functions used internally */
int nextpower(int p, int n); /* function for padding to power of 2 */
void stretch(float *q, float *p, float *w, int *it, int lq, int nw);
void lintrp(float *q, float *w, int *it, int lp, int lq);

segy tr;

int
main(int argc, char **argv)
{
	float *buf;	/* temp repository of unstretched data		*/
	float dt;	/* sampling interval on original data		*/
	float dtau;	/* sampling interval on stretched data		*/
	float *tau;	/* fractional sample number on input data	*/
	float *w;	/* Interpolation weights 			*/
	int it;		/* output time sample counter			*/
	int *itau;	/* Interpolation locations			*/
	int nt;		/* samples in reconstructed outdata		*/
	size_t ntsize;	/*  ... in bytes				*/
	int ntau;	/* samples in input log-stretch data		*/
	int ntmin;	/* minumum time of interest (from par)		*/
	int nw;		/* Number of interpolation weights (2=linear)	*/


	/* Initialize */
	initargs(argc, argv);
	requestdoc(1);


	/* Get information from the first header */
	if (!gettr(&tr)) err("can't get first trace");
	ntau = tr.ns;
	dtau = ((double) tr.dt)/1000000.0;

	/* Must get nt and ntmin for reconstruction of t-data */
	MUSTGETPARINT("nt", &nt); CHECK_NT("nt",nt);
	MUSTGETPARINT("ntmin", &ntmin); 
	MUSTGETPARFLOAT("dt", &dt); 
        checkpars();
	ntsize = nt * FSIZE;

	/* 2 weights for linear interpolation */
	nw = 2;
	
	/* Allocate space for stretching operation */
	tau = ealloc1float(nt);
	itau = ealloc1int(nt);
	w = ealloc1float(nw * nt);
	buf = ealloc1float(nt);


/* 	The inverse log-stretch from 'tau' to 't' is given mathematically by 
 *  								
 * 		t = tmin exp (tau + taumin)            
 *  							
 * 	taumin is arbitrary and taken to be taumin=0	
 */

	/* Calculate fractional tau-sample that each t-sample maps to; */
	/* [ it=itmin --> 0 ..&.. it=nt --> ntau ]  */
	for (it = 0; it < ntmin; ++it) {
		tau[it] = -1;	/* neg flag for zero value */
	}
	for (it = ntmin; it < nt; ++it) {
		tau[it] = log((float) it/ntmin) / dtau;
	}

	/* Calculate the interpolation coefficients */
	lintrp (tau, w, itau, ntau, nt);

	/* Main loop over traces */
	do {
		/* Perform the stretch; put new data into buf */
		stretch (buf, tr.data, w, itau, nt, nw);

		/* Overwrite the segy data */
		memcpy(tr.data, buf, ntsize);

		tr.ns = nt;
		tr.dt = dt;

		puttr(&tr);

	} while ( gettr(&tr) );


	return(CWP_Exit());
}

void stretch(float *q, float *p, float *w, int *it, int lq, int nw)
/*
 *  General coordinate stretch with predetermined coefficients
 *
 *         NW-1
 * Q(T) =  SUM W(T,J)*P(IT(T)), FOR T=0,LQ-1
 *         J=0
 */
{
	int j, i;

	for (i = 0; i < lq; ++i) {
		q[i] = 0.0;
		for (j = 0; j < nw; ++j) {
			q[i] += w[i*nw+j] * p[it[i]+j];
		}
	}
	return;
}

void lintrp (float *q, float *w, int *it, int lp, int lq)
{
	int i;
	float delta;

	for (i = 0; i < lq; ++i) {
		if (q[i] >= 0.0 && q[i] < lp - 1) {
			it[i] = q[i]; 
			delta = q[i] - it[i];
			w[i*2] = 1.0 - delta;
			w[i*2+1] = delta;
		} else {
			it[i] = 0;
			w[i*2] = 0.0;
			w[i*2+1] = 0.0;
		}
	}
	return;
}
@


1.16
log
@copyright
@
text
@d85 1
@


1.15
log
@9 June 2003
@
text
@d1 4
a4 1
/* SUILOG: $Revision: 1.14 $ ; $Date: 1997/07/28 22:36:46 $	*/
@


1.14
log
@changes suggested by Stew Levin to silence SGI compiler warnings, etc
@
text
@d1 1
a1 1
/* SUILOG: $Revision: 1.13 $ ; $Date: 1996/02/21 23:39:07 $	*/
d129 1
a129 1
	return EXIT_SUCCESS;
@


1.13
log
@Using two argument CHECK_NT macro to check the relevant time sample
quantity.
@
text
@d1 1
a1 14
/* SUILOG: $Revision: 1.12 $ ; $Date: 1996/02/21 22:59:51 $	*/

/*----------------------------------------------------------------------
 * Copyright (c) Colorado School of Mines, 1990.
 * All rights reserved.
 *
 * This code is part of SU.  SU stands for Seismic Unix, a processing line
 * developed at the Colorado School of Mines, partially based on Stanford
 * Exploration Project (SEP) software.  Inquiries should be addressed to:
 *
 *  Jack K. Cohen, Center for Wave Phenomena, Colorado School of Mines,
 *  Golden, CO 80401  (jkc@@dix.mines.colorado)
 *----------------------------------------------------------------------
 */
d33 1
a33 1
 *	CWP: Shuki, Chris
d62 1
a62 2
	unsigned
	 int ntsize;	/*  ... in bytes				*/
@


1.12
log
@Using CHECK_NT(nt) macro.
@
text
@d1 1
a1 1
/* SUILOG: $Revision: 1.11 $ ; $Date: 1996/01/30 15:30:13 $	*/
d93 1
a93 1
	MUSTGETPARINT("nt", &nt); CHECK_NT(nt);
@


1.11
log
@Supplied missing prototype and documentation details.
@
text
@d1 1
a1 1
/* SUILOG: $Revision: 1.10 $ ; $Date: 1996/01/25 20:32:58 $	*/
d64 1
d93 1
a93 1
	MUSTGETPARINT("nt", &nt); 
@


1.10
log
@Deal with specifying header fields accessed/modified in sudoc.
@
text
@d1 1
a1 1
/* SUILOG: $Revision: 1.9 $ ; $Date: 1995/08/02 20:03:15 $	*/
d56 6
d67 2
a68 2
	float dt;	/* sample rate on original data			*/
	float dtau;	/* sample rate on stretched data		*/
d72 1
a72 1
	int *itau;	/* ????						*/
a78 2
	void stretch();
	void lintrp();
@


1.9
log
@Cast the integers tr.dt and/or tr.delrt and/or clones to double before
division with floating constant (which is implicitly double
precision).  Casting is needed to make some compilers happy and if we
cast to float then there will be an extra conversion to double because
of the floating constant (casting to float and writing 1000000.0F
would save a conversion, but most people find that F yucky and
efficiency is not an issue here).
Motivated by examples from Stew Levin.
@
text
@d1 1
a1 1
/* SUILOG: $Revision: 1.8 $ ; $Date: 1993/06/07 16:35:15 $	*/
a42 1
/**************** end self doc ********************************/
d50 3
d54 1
a54 1

d103 1
a103 1
/* 	The inverse log-stretch from 'tau' to 't' is given mathematically by  	
d112 1
a112 1
	for (it = 0; it < ntmin; it++) {
d115 1
a115 1
	for (it = ntmin; it < nt; it++) {
d152 1
a152 1
	for (i = 0; i < lq; i++) {
d154 1
a154 1
		for (j = 0; j < nw; j++) {
d166 1
a166 1
	for (i = 0; i < lq; i++) {
@


1.8
log
@cosmetic
@
text
@d1 1
a1 1
/* SUILOG: $Revision: 1.7 $ ; $Date: 93/06/07 16:27:10 $	*/
d83 1
a83 1
	dtau = tr.dt/1000000.0;
@


1.7
log
@cosmetic
@
text
@d1 1
a1 1
/* SUILOG: $Revision: 1.6 $ ; $Date: 92/10/26 10:56:49 $	*/
d44 3
a46 2
 
/* Credits:
@


1.6
log
@new selfdoc installed 
@
text
@d1 1
a1 1
/* SUILOG: $Revision: 1.5 $ ; $Date: 91/09/17 13:16:37 $	*/
d43 1
a43 1
/**************** end self doc ***********************************/
@


1.5
log
@Eliminated ushort, etc.
@
text
@d1 1
a1 1
/* SUILOG: $Revision: 1.4 $ ; $Date: 91/09/05 08:50:48 $	*/
d20 23
a42 23
String sdoc = "\
								\n\
SUILOG -- time axis inverse log-stretch of seismic traces	\n\
								\n\
suilog nt= ntmin=  <stdin >stdout 				\n\
								\n\
Required parameters:						\n\
	nt= 	nt output from sulog prog			\n\
	ntmin= 	ntmin output from sulog prog			\n\
	dt= 	dt output from sulog prog			\n\
Optional parameters:						\n\
	none							\n\
								\n\
NOTE:  Parameters needed by suilog to reconstruct the 		\n\
       original data may be input via a parameter file.		\n\
								\n\
EXAMPLE PROCESSING SEQUENCE:					\n\
		sulog outpar=logpar <data1 >data2		\n\
		suilog par=logpar <data2 >data3			\n\
								\n\
	where logpar is the parameter file			\n\
								\n\
";
d44 1
a44 1

d76 1
a76 1
	askdoc(1);
@


1.4
log
@string -> String and so forth
@
text
@d1 1
a1 1
/* SUILOG: $Revision: 1.3 $ ; $Date: 90/11/15 10:43:30 $	*/
d65 2
a66 1
	uint ntsize;	/*  ... in bytes				*/
@


1.3
log
@bcopy -> memcpy
@
text
@d1 1
a1 1
/* SUILOG: $Revision: 1.2 $ ; $Date: 90/05/25 19:25:54 $	*/
d20 1
a20 1
string sdoc = "\
d84 3
a86 3
	MUSTIGETPAR("nt", &nt); 
	MUSTIGETPAR("ntmin", &ntmin); 
	MUSTFGETPAR("dt", &dt); 
@


1.2
log
@vec --> ealloc1float, etc.
@
text
@d1 1
a1 1
/* SUILOG: $Revision: 1.1 $ ; $Date: 90/04/18 20:34:51 $	*/
d124 1
a124 1
		bcopy(buf, tr.data, (int) ntsize);
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/* SUILOG: $Revision: 1.23 $ ; $Date: 89/09/20 19:36:17 $	*/
d93 4
a96 4
	tau = vec(nt);
	itau = ivec(nt);
	w = vec(nw * nt);
	buf = vec(nt);
@
