head	1.19;
access;
symbols;
locks; strict;
comment	@ * @;


1.19
date	2011.11.16.23.21.55;	author john;	state Exp;
branches;
next	1.18;

1.18
date	2011.11.12.00.39.02;	author john;	state Exp;
branches;
next	1.17;

1.17
date	2003.06.09.16.17.07;	author john;	state Exp;
branches;
next	1.16;

1.16
date	97.07.28.22.36.46;	author john;	state Exp;
branches;
next	1.15;

1.15
date	96.09.13.21.49.05;	author john;	state Exp;
branches;
next	1.14;

1.14
date	96.03.15.20.04.02;	author jkc;	state Exp;
branches;
next	1.13;

1.13
date	96.02.21.23.39.07;	author jkc;	state Exp;
branches;
next	1.12;

1.12
date	96.01.30.15.26.06;	author jkc;	state Exp;
branches;
next	1.11;

1.11
date	95.08.02.20.25.18;	author jkc;	state Exp;
branches;
next	1.10;

1.10
date	95.08.02.10.36.16;	author john;	state Exp;
branches;
next	1.9;

1.9
date	95.08.02.10.17.29;	author john;	state Exp;
branches;
next	1.8;

1.8
date	94.08.25.14.59.55;	author jkc;	state Exp;
branches;
next	1.7;

1.7
date	93.11.24.15.47.21;	author john;	state Exp;
branches;
next	1.6;

1.6
date	93.08.09.15.19.40;	author john;	state Exp;
branches;
next	1.5;

1.5
date	92.10.26.11.18.45;	author john;	state Exp;
branches;
next	1.4;

1.4
date	91.09.05.08.51.01;	author jkcohen;	state Exp;
branches;
next	1.3;

1.3
date	90.11.15.10.43.34;	author jkc;	state Exp;
branches;
next	1.2;

1.2
date	90.05.25.19.26.07;	author jkc;	state Exp;
branches;
next	1.1;

1.1
date	90.04.19.09.12.39;	author jkc;	state Exp;
branches;
next	;


desc
@Log stretch
@


1.19
log
@added Reg Beardsley's checkpar()
@
text
@/* Copyright (c) Colorado School of Mines, 2011.*/
/* All rights reserved.                       */

/* SULOG: $Revision: 1.17 $ ; $Date: 2003/06/09 16:17:07 $		*/

#include "su.h"
#include "segy.h"

/*********************** self documentation **********************/
char *sdoc[] = {
"								",
" SULOG -- time axis log-stretch of seismic traces		",
"								",
" sulog [optional parameters] <stdin >stdout 			",
"								",
" Required parameters:						",
"	none				 			",
"								",
" Optional parameters:						",
"	ntmin= .1*nt		minimum time sample of interest	",
"	outpar=/dev/tty		output parameter file, contains:",
"				number of samples (nt=)		",
"				minimum time sample (ntmin=)	",
"				output number of samples (ntau=)",
"	m=3			length of stretched data	",
"				is set according to		",
"					ntau = nextpow(m*nt)	",
"	ntau= pow of 2		override for length of stretched",
"				data (useful for padding zeros	",
"				to avoid aliasing)		",
"								",
" NOTES:							",
"	ntmin is required to avoid taking log of zero and to 	",
"	keep number of outsamples (ntau) from becoming enormous.",
"        Data above ntmin is zeroed out.			",
"								",
"	The output parameters will be needed by suilog to 	",
"	reconstruct the original data. 				",
"								",
" EXAMPLE PROCESSING SEQUENCE:					",
"		sulog outpar=logpar <data1 >data2		",
"		suilog par=logpar <data2 >data3			",
"								",
NULL};

/* Credits:
 *	CWP: Shuki, Chris
 *
 * Caveats:
 * 	Amplitudes are not well preserved.
 *
 * Trace header fields accessed: ns, dt
 * Trace header fields modified: ns, dt
 */
/**************** end self doc ***********************************/


/* prototypes of functions used internally */
int nextpower(int p, int n); /* function for padding to power of 2 */
void stretch(float *q, float *p, float *w, int *it, int lq, int nw);
void lintrp(float *q, float *w, int *it, int lp, int lq);

segy tr;

int
main(int argc, char **argv)
{
	float *buf;	/* temporary repository of log stretched data 	*/
	float dt;	/* input time sampling interval			*/
	float dtau;	/* output time sampling interval 		*/
	float *t;	/* fractional sample number on input data	*/
	float *w;	/* Interpolation weights 			*/
	int *it;	/* Interpolation locations			*/
	int itau;	/* tau sample counter				*/
	int m;		/* m*nt=ntau 					*/
	int nt;		/* time samples on input data			*/
	int ntau;	/* pow of 2 >= ntautemp  ==  samples in outdata	*/
	size_t ntausize;/*  ... in bytes				*/
	int ntautemp;	/* tau sample corresponding to nt	 	*/
	int ntmin;	/* minimum input time of interest		*/
	int nw;		/* Number of interpolation weights (2=linear)	*/
	cwp_String outpar;/* name of file holding output parfile	*/
	FILE *outparfp;	/* ... its file pointer				*/

	/* Initialize */
	initargs(argc, argv);
	requestdoc(1);


	/* Get information from the first header */
	if (!gettr(&tr)) err("can't get first trace");
	nt = tr.ns;
	dt = ((double) tr.dt)/1000000.0;

	/* Minimum sample of interest (data above tmin is lost) */
	if (!getparint("ntmin", &ntmin))	ntmin = 0.1 * nt;
	if (!getparstring("outpar", &outpar))	outpar = "/dev/tty";

	/* Open file to save parameters */
	outparfp = efopen(outpar, "w");

	/* 2 weights for linear interpolation */
	nw = 2;
	
	/* fix length of stretched data (but will be padded) */
	if (!getparint("m", &m))	 m = 3;
	ntautemp = m*nt;  

	/* find dtau, dt in log argument cancels */ 
	dtau = log((float) nt/ntmin) / ntautemp;
	if (!getparint("ntau", &ntau))	 ntau = nextpower(2, ntautemp);
        checkpars();
	CHECK_NT("ntau",ntau);
	ntausize = ntau * FSIZE;
	
	/* Put out enough parameters to reconstruct original data */
	/* (ntau for reassurance to user, also in tr.ns of output) */
	(void) fprintf(outparfp,
		       "nt=%d ntmin=%d dt=%g ntau=%d\nt=%d n1=%d d1=%g", 
		       nt, ntmin, dt*1000000.0, ntau, nt, nt, dt*1000000.0);

	/* Allocate space for stretching operation */
	t   = ealloc1float(ntau);
	it  = ealloc1int(ntau);
	w   = ealloc1float(nw * ntau);
	buf = ealloc1float(ntau);


/* 	The log-stretch from 't' to 'tau' is given mathematically by  	
 *  								
 * 		tau = log( t / tmin ) + taumin           
 *  							
 * 	taumin is arbitrary and taken to be taumin=0	
 */
  					
	/* Calculate fractional t-sample that each tau-sample maps to;  */
	/* [ itau=0 --> (float)itmin ..&.. itau=ntau --> (float)itmax ] */
	for (itau = 0; itau < ntau; itau++) {
		t[itau] = (float) ntmin * exp((float) itau*dtau);
	}

	/* Calculate the linear interpolation coefficients */
	lintrp (t, w, it, nt, ntau);

	/* Main loop over traces */
	do {
		/* Perform the stretch; put new data into buf */
		stretch (buf, tr.data, w, it, ntau, nw);

		/* Overwrite the segy data */
		memcpy( (void *) tr.data, (const void *) buf, ntausize);

		tr.ns = ntau;
		tr.dt = dtau*1000000.;

		puttr(&tr);

	} while (gettr(&tr));

	
	return(CWP_Exit());
}

void stretch(float *q, float *p, float *w, int *it, int lq, int nw)
/*
 *  General coordinate stretch with predetermined coefficients
 *
 *         NW-1
 * Q(T) =  SUM W(T,J)*P(IT(T)), FOR T=0,LQ-1
 *         J=0
 */
{
	int j, i;

	for (i = 0; i < lq; i++) {
		q[i] = 0.0;
		for (j=0; j<nw; j++) {
			q[i] += w[i*nw+j] * p[it[i]+j];
		}
	}
	return;
}

void lintrp (float *q, float *w, int *it, int lp, int lq)
{
	int i;
	float delta;

	for (i = 0; i < lq; i++) {
		if (q[i] >= 0.0 && q[i] < lp - 1) {
			it[i] = q[i]; 
			delta = q[i] - it[i];
			w[i*2] = 1.0 - delta;
			w[i*2+1] = delta;
		} else {
			it[i] = 0;
			w[i*2] = 0.0;
			w[i*2+1] = 0.0;
		}
	}
	return;
}

int nextpower(int p, int n)
{
	int nn;
	if (!n) return 0;
	for (nn = 1; nn < n; nn *= p);
	return nn;
}
@


1.18
log
@copyright
@
text
@d112 1
@


1.17
log
@9 June 2003
@
text
@d1 4
a4 1
/* SULOG: $Revision: 1.16 $ ; $Date: 1997/07/28 22:36:46 $		*/
@


1.16
log
@changes suggested by Stew Levin to silence SGI compiler warnings, etc
@
text
@d1 1
a1 1
/* SULOG: $Revision: 1.15 $ ; $Date: 1996/09/13 21:49:05 $		*/
d157 1
a157 1
	return EXIT_SUCCESS;
@


1.15
log
@silenced -Wall messages
@
text
@d1 1
a1 1
/* SULOG: $Revision: 1.14 $ ; $Date: 1996/03/15 20:04:02 $		*/
d75 1
a75 2
	unsigned
	 int ntausize;	/*  ... in bytes				*/
@


1.14
log
@Added alternative parameter names to output parfile so more programs
can use the parfile.
@
text
@d1 1
a1 1
/* SULOG: $Revision: 1.13 $ ; $Date: 1996/02/21 23:39:07 $		*/
d62 1
@


1.13
log
@Using two argument CHECK_NT macro to check the relevant time sample
quantity.
@
text
@d1 1
a1 1
/* SULOG: $Revision: 1.12 $ ; $Date: 1996/01/30 15:26:06 $		*/
d114 3
a116 2
	(void) fprintf(outparfp, "nt=%d ntmin=%d dt=%g ntau=%d\n", 
					nt, ntmin, dt*1000000.0, ntau);
@


1.12
log
@Deal with header fields accessed/modified in sudoc.
Supplied missing prototype and documentation details.
@
text
@d1 1
a1 1
/* SULOG: $Revision: 1.11 $ ; $Date: 1995/08/02 20:25:18 $		*/
d109 1
@


1.11
log
@Cast the integers tr.dt and/or tr.delrt and/or clones to double before
division with floating constant (which is implicitly double
precision).  Casting is needed to make some compilers happy and if we
cast to float then there will be an extra conversion to double because
of the floating constant (casting to float and writing 1000000.0F
would save a conversion, but most people find that F yucky and
efficiency is not an issue here).
Motivated by examples from Stew Levin.
@
text
@d1 1
a1 1
/* SULOG: $Revision: 1.10 $ ; $Date: 1995/08/02 10:36:16 $		*/
d48 3
d55 5
d65 2
a66 2
	float dt;	/*  			*/
	float dtau;	/*  			*/
d69 1
a69 1
	int *it;	/*	??????					*/
a80 4
	int nextpower();/* function for padding to power of 2		*/
	void stretch();
	void lintrp();

d103 1
a103 1
	if (!getparint("m", &m))		 m = 3;
d198 1
a198 2
int nextpower(p, n)
int p, n;
@


1.10
log
@changed (double) tr.dt to  (float) tr.dt
@
text
@d1 1
a1 1
/* SULOG: $Revision: 1.9 $ ; $Date: 95/08/02 10:17:29 $		*/
d86 1
a86 1
	dt = (float) tr.dt/1000000.0;
d89 2
a90 2
	if (!getparint("ntmin", &ntmin))		 ntmin = 0.1 * nt;
	if (!getparstring("outpar", &outpar))	 outpar = "/dev/tty";
@


1.9
log
@changed (float) tr.dt to (double) tr.dt to make SUN and Stew Levin happy
@
text
@d1 1
a1 1
/* SULOG: $Revision: 1.8 $ ; $Date: 94/08/25 14:59:55 $		*/
d86 1
a86 1
	dt = (double) tr.dt/1000000.0;
@


1.8
log
@Removed copyright statement from codes that had it.
Moved self-doc line for sudoc.
@
text
@d1 1
a1 1
/* SULOG: $Revision: 1.7 $ ; $Date: 93/11/24 15:47:21 $		*/
d86 1
a86 1
	dt = (float) tr.dt/1000000.0;
@


1.7
log
@added explicit casts
@
text
@d1 1
a1 1
/* SULOG: $Revision: 1.6 $ ; $Date: 93/08/09 15:19:40 $		*/
a2 13
/*----------------------------------------------------------------------
 * Copyright (c) Colorado School of Mines, 1990.
 * All rights reserved.
 *
 * This code is part of SU.  SU stands for Seismic Unix, a processing line
 * developed at the Colorado School of Mines, partially based on Stanford
 * Exploration Project (SEP) software.  Inquiries should be addressed to:
 *
 *  Jack K. Cohen, Center for Wave Phenomena, Colorado School of Mines,
 *  Golden, CO 80401  (jkc@@dix.mines.colorado)
 *----------------------------------------------------------------------
 */

a41 1
/**************** end self doc ***********************************/
d49 1
d71 1
a71 1
	cwp_String outpar;	/* name of file holding output parfile		*/
@


1.6
log
@changed String to cwp_String
@
text
@d1 1
a1 1
/* SULOG: $Revision: 1.5 $ ; $Date: 92/10/26 11:18:45 $		*/
d99 1
a99 1
	dt = tr.dt/1000000.0;
d154 1
a154 1
		memcpy(tr.data, buf, ntausize);
@


1.5
log
@new selfdoc installed
@
text
@d1 1
a1 1
/* SULOG: $Revision: 1.4 $ ; $Date: 91/09/05 08:51:01 $		*/
d84 1
a84 1
	String outpar;	/* name of file holding output parfile		*/
@


1.4
log
@string -> String and so forth
@
text
@d1 1
a1 1
/* SULOG: $Revision: 1.3 $ ; $Date: 90/11/15 10:43:34 $		*/
d20 35
a54 35
String sdoc = "\
								\n\
SULOG -- time axis log-stretch of seismic traces		\n\
								\n\
sulog [optional parameters] <stdin >stdout 			\n\
								\n\
Required parameters:						\n\
	none				 			\n\
								\n\
Optional parameters:						\n\
	ntmin= .1*nt		minimum time sample of interest	\n\
	outpar=/dev/tty		output parameter file, contains:\n\
				number of samples (nt=)		\n\
				minimum time sample (ntmin=)	\n\
				output number of samples (ntau=)\n\
	m=3			length of stretched data	\n\
				is set according to		\n\
					ntau = nextpow(m*nt)	\n\
	ntau= pow of 2		override for length of stretched\n\
				data (useful for padding zeros	\n\
				to avoid aliasing)		\n\
								\n\
NOTES:								\n\
	ntmin is required to avoid taking log of zero and to 	\n\
	keep number of outsamples (ntau) from becoming enormous.\n\
        Data above ntmin is zeroed out.				\n\
								\n\
	The output parameters will be needed by suilog to 	\n\
	reconstruct the original data. 				\n\
								\n\
EXAMPLE PROCESSING SEQUENCE:					\n\
		sulog outpar=logpar <data1 >data2		\n\
		suilog par=logpar <data2 >data3			\n\
								\n\
";
d93 1
a93 1
	askdoc(1);
@


1.3
log
@bcopy -> memcpy
@
text
@d1 1
a1 1
/* SULOG: $Revision: 1.2 $ ; $Date: 90/05/25 19:26:07 $		*/
d20 1
a20 1
string sdoc = "\
d79 2
a80 1
	uint ntausize;	/*  ... in bytes				*/
d84 1
a84 1
	string outpar;	/* name of file holding output parfile		*/
d102 2
a103 2
	if (!igetpar("ntmin", &ntmin))		 ntmin = 0.1 * nt;
	if (!sgetpar("outpar", &outpar))	 outpar = "/dev/tty";
d112 1
a112 1
	if (!igetpar("m", &m))		 m = 3;
d117 1
a117 1
	if (!igetpar("ntau", &ntau))	 ntau = nextpower(2, ntautemp);
@


1.2
log
@vec --> ealloc1float, etc.
@
text
@d1 1
a1 1
/* SULOG: $Revision: 1.1 $ ; $Date: 90/04/19 09:12:39 $		*/
d153 1
a153 1
		bcopy(buf, tr.data, (int) ntausize);
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/* SULOG: $Revision: 2.8 $ ; $Date: 89/09/20 19:36:41 $		*/
d12 1
a12 1
 *  Golden, CO 80401  (isis!csm9a!jkcohen)
d30 2
a31 2
	ntmin 	= .1*nt		minimum time sample of interest	\n\
	outpar 	= /dev/tty	output parameter file, contains:\n\
d35 1
a35 1
	m 	= 3		length of stretched data	\n\
d38 1
a38 1
	ntau 	= pow of 2	override for length of stretched\n\
a61 2
 *
 *
a63 5
/* Embed Revision Control System identifier strings */
static string progid =
	"   $Source: /src/su/src/RCS/sulog.c,v $";
static string revid =
	"   $Revision: 2.8 $ ; $Date: 89/09/20 19:36:41 $";
d65 1
d67 1
a67 5

segy tr;	/* A SEGY trace structure */

main(argc,argv)
int argc; char **argv;
a91 5
	if (!igetpar("ID", &ID)) ID = 0;
	if (ID) {
		(void) fprintf(stderr, "%s\n", progid);
		(void) fprintf(stderr, "%s\n", revid);
	}
d105 1
a105 3
	if (NULL == (outparfp = fopen(outpar, "w"))) {
		err("can't open outpar=\"%s\"", outpar);
	}
d125 4
a128 4
	t   = vec(ntau);
	it  = ivec(ntau);
	w   = vec(nw * ntau);
	buf = vec(ntau);
d166 1
a166 3
void stretch(q, p, w, it, lq, nw)
int lq, nw, *it;
float *p, *q, *w;
d186 1
a186 3
void lintrp (q, w, it, lp, lq)
int *it, lp, lq;
float *q,*w;
@
