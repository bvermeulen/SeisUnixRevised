head     1.13;
branch   ;
access   jkc john cartley dhale;
symbols  ;
locks    ; strict;
comment  @ * @;


1.13
date     94.04.06.10.31.58;  author jkc;  state Exp;
branches ;
next     1.12;

1.12
date     94.04.05.15.11.47;  author jkc;  state Exp;
branches ;
next     1.11;

1.11
date     94.04.05.10.50.21;  author jkc;  state Exp;
branches ;
next     1.10;

1.10
date     94.04.02.12.37.00;  author jkc;  state Exp;
branches ;
next     1.9;

1.9
date     93.11.24.15.44.50;  author john;  state Exp;
branches ;
next     1.8;

1.8
date     92.10.26.11.04.37;  author john;  state Exp;
branches ;
next     1.7;

1.7
date     91.09.05.08.50.53;  author jkcohen;  state Exp;
branches ;
next     1.6;

1.6
date     90.11.15.10.43.33;  author jkc;  state Exp;
branches ;
next     1.5;

1.5
date     90.06.12.10.36.15;  author jkc;  state Exp;
branches ;
next     1.4;

1.4
date     90.06.12.10.27.34;  author jkc;  state Exp;
branches ;
next     1.3;

1.3
date     90.06.12.10.17.19;  author jkc;  state Exp;
branches ;
next     1.2;

1.2
date     90.05.25.19.25.58;  author jkc;  state Exp;
branches ;
next     1.1;

1.1
date     90.04.18.20.35.22;  author jkc;  state Exp;
branches ;
next     ;


desc
@Create synthetic traces for point scatterer
@


1.13
log
@Fixed setting of trace fields tr.selev, tr.gelev and commented
obscure int truncation.
@
text
@/* SUIMP3D: $Revision: 1.12 $ ; $Date: 94/04/05 15:11:47 $	*/

/*----------------------------------------------------------------------
 * Copyright (c) Colorado School of Mines, 1990.
 * All rights reserved.
 *
 * This code is part of SU.  SU stands for Seismic Unix, a processing line
 * developed at the Colorado School of Mines, partially based on Stanford
 * Exploration Project (SEP) software.  Inquiries should be addressed to:
 *
 *  Jack K. Cohen, Center for Wave Phenomena, Colorado School of Mines,
 *  Golden, CO 80401  (jkc@@dix.mines.colorado)
 *----------------------------------------------------------------------
 */

#include "su.h"
#include "segy.h"

/*********************** self documentation **************/
char *sdoc[] = {
"							",
"SUIMP3D - generate inplane shot records for a point 	",
"          scatterer embedded in three dimensions using	",
"          the Born integral equation			",							
"							",
"suimp3d [optional parameters] >stdout 			",
"							",
"Optional parameters					",
"	nshot=1		number of shots			",
"	nrec=1		number of receivers		",
"	c=5000		speed				",
"	dt=.004		sampling rate			",
"	nt=256		number of samples		",
"	x0=1000		point scatterer location	",
"	z0=1000		point scatterer location	",
"	sxmin=0		first shot location		",
"	szmin=0		first shot location		",
"	gxmin=0		first receiver location		",
"	gzmin=0		first receiver location		",
"	dsx=100		x-step in shot location		",
"	dsz=0	 	z-step in shot location		",
"	dgx=100		x-step in receiver location	",
"	dgz=0		z-step in receiver location	",
"							",
NULL};

/* Credits:
 *	CWP: Norm, Jack
 *
 */
 
/* Theory: Use the 3D Born integral equation (e.g., Geophysics,
 * v51, n8, p1554(7)). Use 3-D delta function for alpha.
 */
/**************** end self doc ***************************/


#define LOOKFAC	2	/* Look ahead factor for npfao	  */
#define PFA_MAX	720720	/* Largest allowed nfft	          */


segy tr;

main(int argc, char **argv)
{
	float c;		/* speed			*/
	float dt;		/* sampling rate		*/
	int nt;			/* number of samples		*/
	int ntsize;		/* ... in bytes			*/
	int nshot;		/* number of shots		*/
	int nrec;		/* number of receivers		*/
	float x0, z0;		/* point scatterer location	*/
	float sxmin, szmin;	/* first shot location		*/
	float gxmin, gzmin;	/* first receiver location	*/
	float dsx;		/* x-step in shot location	*/
	float dsz;		/* z-step in shot location	*/
	float dgx;		/* x-step in receiver location	*/
	float dgz;		/* z-step in receiver location	*/

	float sx, sz;		/* shot location		*/
	float gx, gz;		/* receiver location		*/
	float rs;		/* distance to shot		*/
	float rg;		/* distance to receiver		*/
	float d;		/* rs + rg			*/
	float t;		/* total travel time		*/
	int jt;			/* (int) arrival time on trace	*/
	float k;		/* constant part of response	*/

	register float *rt;	/* real trace			*/
	register complex *ct;	/* complex transformed trace	*/
	int nfft;		/* size of fft 			*/
	int nfby2;		/* nfft/2			*/
	int nfby2p1;		/* nfft/2 + 1			*/
	int nzeros;		/* padded zeroes in bytes	*/
	float spread;		/* 3-D spreading factor		*/
	float isq;		/* temp for omega squared	*/

	register int i;		/* counter			*/
	register int s;		/* shot counter			*/
	register int g;		/* receiver counter		*/



	/* Initialize */
	initargs(argc, argv);
	requestdoc(0);


	/* Get parameters */
	if (!getparint("nshot", &nshot))	nshot = 1;
	if (!getparint("nrec", &nrec))		nrec  = 1;
	if (!getparint("nt", &nt))		nt    = 256;
	if (!getparfloat("c", &c))		c     = 5000.0;
	if (!getparfloat("dt", &dt))		dt    = 0.004;
	if (!getparfloat("x0", &x0))		x0    = 1000.0;
	if (!getparfloat("z0", &z0))		z0    = 1000.0;
	if (!getparfloat("sxmin", &sxmin))	sxmin = 0.0;
	if (!getparfloat("szmin", &szmin))	szmin = 0.0;
	if (!getparfloat("gxmin", &gxmin))	gxmin = 0.0;
	if (!getparfloat("gzmin", &gzmin))	gzmin = 0.0;
	if (!getparfloat("dsx", &dsx))		dsx   = 100.0;
	if (!getparfloat("dsz", &dsz))		dsz   = 0.0;
	if (!getparfloat("dgx", &dgx))		dgx   = 100.0;
	if (!getparfloat("dgz", &dgz))		dgz   = 0.0;


	/* Set the constant header fields */
	tr.ns = nt;
	tr.dt = dt * 1000000.0;
	ntsize = nt * FSIZE;


	/* Set up for fft */
	nfft = npfaro(nt, LOOKFAC * nt);
	if (nfft >= MIN(SU_NFLTS, PFA_MAX))
		err("Padded nt=%d -- too big", nfft);

	nfby2 = nfft / 2;
	nfby2p1 = nfby2 + 1;
	nzeros = (nfft - nt) * FSIZE;


	/* Allocate fft arrays */
	rt   = ealloc1float(nfft);
	ct   = ealloc1complex(nfby2p1);


	/* Set the constant in the response amplitude
	   including scale for inverse fft below      */
	k = 1.0 / (4.0 * c * c * dt * dt * dt * nfft * nfft * nfft);


	/* Create the traces */
	for (s = 0; s < nshot; ++s) {	/* loop over shots */
		sx = sxmin + s * dsx;
		sz = szmin + s * dsz;
		tr.sx = sx;
		tr.selev = -sz; /* above sea level is positive */
		rs = sqrt((sx - x0)*(sx - x0) + (sz - z0)*(sz - z0));

		for (g = 0; g < nrec; ++g) {	/* loop over receivers */
			memset( (void *) tr.data, (int) '\0', ntsize);
			gx = gxmin + g * dgx;
			gz = gzmin + g * dgz;
			tr.gx = gx;
			tr.gelev = -gz; /* above sea level is positive */
			rg = sqrt((gx - x0)*(gx - x0) + (gz - z0)*(gz - z0));
			d = rs + rg;
			t = d/c;
			jt = (int) t/dt; /* truncate to mesh */
			spread = rs*rg;

			/* Distribute response over two surrounding samples */
			tr.data[jt] = k * ((jt + 1)*dt - t)/spread;
			tr.data[jt + 1] = k * (t - jt*dt)/spread;

			/* Load trace into rt (zero-padded) */
			memcpy( (void *) rt, (const void *) tr.data, ntsize);
			memset( (void *) (rt + nt), (int) '\0', nzeros);

			/* FFT */
			pfarc(1, nfft, rt, ct);

			/* Multiply by omega^2 */
			for (i = 0; i < nfby2p1; ++i)
				ct[i] = crmul(ct[i], i*i);

			/* Invert and take real part */
			pfacr(-1, nfft, ct, rt);

			/* Load traces back in */
			memcpy( (void *) tr.data, (const void *) rt, ntsize);

			tr.gx = gx;
			tr.gy = gz;
			tr.tracl = s*nrec + g + 1;
			tr.offset = gx - sx;	/* for surface surveys */
			tr.cdp = 0.5*(gx + sx);	/* for surface surveys */

			puttr(&tr);
		} /* end loop on receivers */
	} /* end loop on shots */

	return EXIT_SUCCESS;
}
@


1.12
log
@Apparently the powers of nfft were wrong.  Fixed to the correct(?)
values.
@
text
@d1 1
a1 1
/* SUIMP3D: $Revision: 1.11 $ ; $Date: 94/04/05 10:50:21 $	*/
d158 1
a158 1
		tr.sy = sz;
d165 2
d170 1
a170 1
			jt = t/dt;
@


1.11
log
@Added better description of what the code does.
@
text
@d1 1
a1 1
/* SUIMP3D: $Revision: 1.10 $ ; $Date: 94/04/02 12:37:00 $	*/
d150 1
a150 1
	k = (double) nfft / (4.0 * c * c * dt * dt * dt);
@


1.10
log
@cosmetics
@
text
@d1 1
a1 1
/* SUIMP3D: $Revision: 1.9 $ ; $Date: 93/11/24 15:44:50 $	*/
d22 3
a24 1
"SUIMP3D - generate shot records for a point scatterer	",
a45 1
/**************** end self doc ***************************/
d51 5
@


1.9
log
@added explicit casts to memcpy ; changed bzero to memset
@
text
@d1 1
a1 1
/* SUIMP3D: $Revision: 1.8 $ ; $Date: 92/10/26 11:04:37 $	*/
d104 1
a104 1
	if (!getparint("nshot", &nshot))		nshot = 1;
d107 1
a107 1
	if (!getparfloat("c", &c))			c     = 5000.0;
d111 4
a114 4
	if (!getparfloat("sxmin", &sxmin))		sxmin = 0.0;
	if (!getparfloat("szmin", &szmin))		szmin = 0.0;
	if (!getparfloat("gxmin", &gxmin))		gxmin = 0.0;
	if (!getparfloat("gzmin", &gzmin))		gzmin = 0.0;
@


1.8
log
@new selfdoc installed
@
text
@d1 1
a1 1
/* SUIMP3D: $Revision: 1.7 $ ; $Date: 91/09/05 08:50:53 $	*/
d156 1
a156 1
			bzero(tr.data, ntsize);
d170 2
a171 2
			memcpy(rt, tr.data, ntsize);
			bzero(rt + nt, nzeros);
d184 1
a184 1
			memcpy(tr.data, rt, ntsize);
@


1.7
log
@string -> String and so forth
@
text
@d1 1
a1 1
/* SUIMP3D: $Revision: 1.6 $ ; $Date: 90/11/15 10:43:33 $	*/
d20 24
a43 24
String sdoc = "\
							\n\
SUIMP3D - generate shot records for a point scatterer	\n\
							\n\
suimp3d [optional parameters] >stdout 			\n\
							\n\
Optional parameters					\n\
	nshot=1		number of shots			\n\
	nrec=1		number of receivers		\n\
	c=5000		speed				\n\
	dt=.004		sampling rate			\n\
	nt=256		number of samples		\n\
	x0=1000		point scatterer location	\n\
	z0=1000		point scatterer location	\n\
	sxmin=0		first shot location		\n\
	szmin=0		first shot location		\n\
	gxmin=0		first receiver location		\n\
	gzmin=0		first receiver location		\n\
	dsx=100		x-step in shot location		\n\
	dsz=0	 	z-step in shot location		\n\
	dgx=100		x-step in receiver location	\n\
	dgz=0		z-step in receiver location	\n\
							\n\
";
d100 1
a100 1
	askdoc(0);
@


1.6
log
@bcopy -> memcpy
@
text
@d1 1
a1 1
/* SUIMP3D: $Revision: 1.5 $ ; $Date: 90/06/12 10:36:15 $	*/
d20 1
a20 1
string sdoc = "\
d104 15
a118 15
	if (!igetpar("nshot", &nshot))		nshot = 1;
	if (!igetpar("nrec", &nrec))		nrec  = 1;
	if (!igetpar("nt", &nt))		nt    = 256;
	if (!fgetpar("c", &c))			c     = 5000.0;
	if (!fgetpar("dt", &dt))		dt    = 0.004;
	if (!fgetpar("x0", &x0))		x0    = 1000.0;
	if (!fgetpar("z0", &z0))		z0    = 1000.0;
	if (!fgetpar("sxmin", &sxmin))		sxmin = 0.0;
	if (!fgetpar("szmin", &szmin))		szmin = 0.0;
	if (!fgetpar("gxmin", &gxmin))		gxmin = 0.0;
	if (!fgetpar("gzmin", &gzmin))		gzmin = 0.0;
	if (!fgetpar("dsx", &dsx))		dsx   = 100.0;
	if (!fgetpar("dsz", &dsz))		dsz   = 0.0;
	if (!fgetpar("dgx", &dgx))		dgx   = 100.0;
	if (!fgetpar("dgz", &dgz))		dgz   = 0.0;
@


1.5
log
@Tweak
@
text
@d1 1
a1 1
/* SUIMP3D: $Revision: 1.4 $ ; $Date: 90/06/12 10:27:34 $	*/
d170 1
a170 1
			bcopy(tr.data, rt, ntsize);
d184 1
a184 1
			bcopy(rt, tr.data, ntsize);
@


1.4
log
@Put 0 term inside loop.
@
text
@d1 1
a1 1
/* SUIMP3D: $Revision: 1.3 $ ; $Date: 90/06/12 10:17:19 $	*/
d184 1
a184 1
			for (i = 0; i < nt; ++i)  tr.data[i] = rt[i];
@


1.3
log
@Using pfa, maxdiff was 8e-2.
@
text
@d1 1
a1 1
/* SUIMP3D: $Revision: 1.2 $ ; $Date: 90/05/25 19:25:58 $	*/
d177 1
a177 2
			ct[0] = cmplx(0.0, 0.0);
			for (i = 1; i < nfby2p1; ++i)
@


1.2
log
@vec --> ealloc1float, etc.
@
text
@d1 1
a1 1
/* SUIMP3D: $Revision: 1.1 $ ; $Date: 90/04/18 20:35:22 $	*/
d52 2
a53 1
#define	FACMAX		12		/* For FFTPACK	*/
d83 2
a84 6
	float *hcos;		/* hold cosines for fft		*/
	float *hsin;		/* hold sines for fft		*/
	register float *xr;	/* real part of trace		*/
	register float *xi;	/* imaginary part of trace	*/
	float *wr;		/* work area for fft		*/
	float *wi;		/* work area for fft		*/
a85 1
	int nfftsize;		/* ... in bytes			*/
d87 1
a87 2
	int nfac;		/* number of factors of nfft	*/
	int facs[FACMAX];	/* contains factors of nfft	*/
d128 4
a131 2
	fftfac(&nt, &nfft, &nfac, facs);
	if (nfft > SU_NFLTS)	err("Padded nt=%d -- too big", nfft);
d133 2
a134 2
	nfftsize = nfft * FSIZE;
	nzeros = nfftsize - ntsize;
d138 2
a139 3
	hcos = ealloc1float(nfft);  hsin = ealloc1float(nfft);
	xr   = ealloc1float(nfft);  xi   = ealloc1float(nfft);
	wr   = ealloc1float(nfft);  wi   = ealloc1float(nfft);
a141 4
	/* Set up tables */
	ffttab(&nfft, hcos, hsin);


d169 3
a171 4
			/* Load traces into xr, xi (zero-padded) */
			bcopy(tr.data, xr, ntsize);
			bzero(xr + nt, nzeros);
			bzero(xi, nfftsize);
d173 2
a174 2
			/* Fft */
			fft(xr, xi, wr, wi, &nfft, facs, &nfac, hcos, hsin);
d176 4
a179 9
			/* Multiply by omega^2, conjugate for inverse fft. */
			xi[0] = xr[0] = 0.0;
			for (i = 1; i <= nfby2; ++i) {
				isq = i * i;
				xr[i] *=  isq;
				xi[i] *= -isq;
				xr[nfft - i] =  xr[i];
				xi[nfft - i] = -xi[i];
			}
d182 4
a185 2
			fft(xr, xi, wr, wi, &nfft, facs, &nfac, hcos, hsin);
			bcopy(xr, tr.data, ntsize);
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/* SUIMP3D: $Revision: 1.16 $ ; $Date: 89/09/20 19:36:24 $	*/
d141 3
a143 3
	hcos = vec(nfft);  hsin = vec(nfft);
	xr   = vec(nfft);  xi   = vec(nfft);
	wr   = vec(nfft);  wi   = vec(nfft);
@
