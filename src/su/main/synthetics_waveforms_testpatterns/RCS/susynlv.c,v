head	1.22;
access;
symbols;
locks; strict;
comment	@ * @;


1.22
date	2015.06.02.20.15.23;	author john;	state Exp;
branches;
next	1.21;

1.21
date	2011.11.12.00.40.42;	author john;	state Exp;
branches;
next	1.20;

1.20
date	2006.11.07.22.58.42;	author john;	state Exp;
branches;
next	1.19;

1.19
date	2003.08.20.18.32.49;	author john;	state Exp;
branches;
next	1.18;

1.18
date	2003.08.19.17.31.42;	author john;	state Exp;
branches;
next	1.17;

1.17
date	2003.06.09.16.17.07;	author john;	state Exp;
branches;
next	1.16;

1.16
date	96.02.21.23.39.07;	author jkc;	state Exp;
branches;
next	1.15;

1.15
date	96.02.21.22.06.00;	author jkc;	state Exp;
branches;
next	1.14;

1.14
date	96.02.20.23.03.40;	author jkc;	state Exp;
branches;
next	1.13;

1.13
date	96.02.07.15.22.39;	author jkc;	state Exp;
branches;
next	1.12;

1.12
date	95.09.27.20.24.24;	author john;	state Exp;
branches;
next	1.11;

1.11
date	95.07.11.18.24.00;	author jkc;	state Exp;
branches;
next	1.10;

1.10
date	95.04.26.14.03.54;	author john;	state Exp;
branches;
next	1.9;

1.9
date	94.09.06.10.21.29;	author jkc;	state Exp;
branches;
next	1.8;

1.8
date	94.08.25.15.01.14;	author jkc;	state Exp;
branches;
next	1.7;

1.7
date	94.03.01.12.33.30;	author jkc;	state Exp;
branches;
next	1.6;

1.6
date	94.02.08.10.47.32;	author jkc;	state Exp;
branches;
next	1.5;

1.5
date	94.02.07.09.45.35;	author jkc;	state Exp;
branches;
next	1.4;

1.4
date	93.11.24.16.18.19;	author john;	state Exp;
branches;
next	1.3;

1.3
date	92.10.22.16.43.59;	author john;	state Exp;
branches;
next	1.2;

1.2
date	92.05.07.10.32.56;	author cartley;	state Exp;
branches;
next	1.1;

1.1
date	91.09.19.09.03.25;	author jkcohen;	state Exp;
branches;
next	;


desc
@Make synthetic seismograms for linear velocity
@


1.22
log
@added NINT for dt -- Ekkehart Tessmer Uni-bremen
@
text
@/* Copyright (c) Colorado School of Mines, 2011.*/
/* All rights reserved.                       */

/* SUSYNLV: $Revision: 1.21 $ ; $Date: 2011/11/12 00:40:42 $	*/

#include "su.h"
#include "segy.h" 

/*********************** self documentation **********************/
char *sdoc[] = {
"									",
" SUSYNLV - SYNthetic seismograms for Linear Velocity function		",
"									",
" susynlv >outfile [optional parameters]				",
"									",
" Optional Parameters:							",
" nt=101                 number of time samples				",
" dt=0.04                time sampling interval (sec)			",
" ft=0.0                 first time (sec)				",
" kilounits=1            input length units are km or kilo-feet		",
"			 =0 for m or ft					",
"                        Note: Output (sx,gx,offset) are always m or ft ",
" nxo=1                  number of source-receiver offsets		",
" dxo=0.05               offset sampling interval (kilounits)		",
" fxo=0.0                first offset (kilounits, see notes below)	",
" xo=fxo,fxo+dxo,...     array of offsets (use only for non-uniform offsets)",
" nxm=101                number of midpoints (see notes below)		",
" dxm=0.05               midpoint sampling interval (kilounits)		",
" fxm=0.0                first midpoint (kilounits)			",
" nxs=101                number of shotpoints (see notes below)		",
" dxs=0.05               shotpoint sampling interval (kilounits)	",
" fxs=0.0                first shotpoint (kilounits)			",
" x0=0.0                 distance x at which v00 is specified		",
" z0=0.0                 depth z at which v00 is specified		",
" v00=2.0                velocity at x0,z0 (kilounits/sec)		",
" dvdx=0.0               derivative of velocity with distance x (dv/dx)	",
" dvdz=0.0               derivative of velocity with depth z (dv/dz)	",
" fpeak=0.2/dt           peak frequency of symmetric Ricker wavelet (Hz)",
" ref=\"1:1,2;4,2\"        reflector(s):  \"amplitude:x1,z1;x2,z2;x3,z3;...\"",
" smooth=0               =1 for smooth (piecewise cubic spline) reflectors",
" er=0                   =1 for exploding reflector amplitudes		",
" ls=0                   =1 for line source; default is point source	",
" ob=1                   =1 to include obliquity factors		",
" tmin=10.0*dt           minimum time of interest (sec)			",
" ndpfz=5                number of diffractors per Fresnel zone		",
" verbose=0              =1 to print some useful information		",
"									",
"Notes:								",
"Offsets are signed - may be positive or negative.  Receiver locations	",
"are computed by adding the signed offset to the source location.	",
"									",
"Specify either midpoint sampling or shotpoint sampling, but not both.	",
"If neither is specified, the default is the midpoint sampling above.	",
"									",
"More than one ref (reflector) may be specified. Do this by putting	",
"additional ref= entries on the commandline. When obliquity factors	",
"are included, then only the left side of each reflector (as the x,z	",
"reflector coordinates are traversed) is reflecting.  For example, if x	",
"coordinates increase, then the top side of a reflector is reflecting.	",
"Note that reflectors are encoded as quoted strings, with an optional	",
"reflector amplitude: preceding the x,z coordinates of each reflector.	",
"Default amplitude is 1.0 if amplitude: part of the string is omitted.	",
NULL};

/*
 * Credits: CWP Dave Hale, 09/17/91,  Colorado School of Mines
 *	    UTulsa Chris Liner 5/22/03 added kilounits flag
 *
 * Trace header fields set: trid, counit, ns, dt, delrt,
 *				tracl. tracr, fldr, tracf,
 *				cdp, cdpt, d2, f2, offset, sx, gx
 */
/**************** end self doc ***********************************/


/* these structures are defined in par.h -- this is documentation only
 *
 * typedef struct ReflectorSegmentStruct {
 *	float x;	( x coordinate of segment midpoint )
 *	float z;	( z coordinate of segment midpoint )
 *	float s;	( x component of unit-normal-vector )
 *	float c;	( z component of unit-normal-vector )
 * } ReflectorSegment;
 * typedef struct ReflectorStruct {
 *	int ns;			( number of reflector segments )
 *	float ds;		( segment length )
 *	float a;		( amplitude of reflector )
 *	ReflectorSegment *rs;	( array[ns] of reflector segments )
 * } Reflector;
 * typedef struct WaveletStruct {
 *	int lw;			( length of wavelet )
 *	int iw;			( index of first wavelet sample )
 *	float *wv;		( wavelet sample values )
 * } Wavelet;
 *
 */

/* parameters for half-derivative filter */
#define LHD 20
#define NHD 1+2*LHD

/* prototype */
static void makeone (float v00, float dvdx, float dvdz, 
	int ls, int er, int ob, Wavelet *w,
	float xs, float zs, float xg, float zg,
	int nr, Reflector *r, int nt, float dt, float ft, float *trace);

/* segy trace */
segy tr;

int
main (int argc, char **argv)
{
	int nr,er,ob,ir,ixz,ls,smooth,ndpfz,ns,
		ixo,ixsm,nxo,nxs,nxm,nt,nxsm,
		shots,midpoints,verbose,tracl,
		*nxz,kilounits;
	float x0,z0,v00,dvdx,dvdz,vmin,tmin,tminr,
		x,z,v,t,dsmax,fpeak,
		dxs,dxm,dxo,dt,fxs,fxm,fxo,ft,dxsm,
		xs,zs,xg,zg,
		*xo,*ar,**xr,**zr;
	Reflector *r;
	Wavelet *w;

	/* hook up getpar to handle the parameters */
	initargs(argc,argv);
	requestdoc(0);

	/* get parameters */
	if (!getparint("nt",&nt)) nt = 101; CHECK_NT("nt",nt);
	if (!getparfloat("dt",&dt)) dt = 0.04;
	if (!getparfloat("ft",&ft)) ft = 0.0;
	if (!getparint("kilounits",&kilounits)) kilounits = 1;
	if ((nxo=countparval("xo"))!=0) {
		xo = ealloc1float(nxo);
		getparfloat("xo",xo);
	} else {
		if (!getparint("nxo",&nxo)) nxo = 1;
		if (!getparfloat("dxo",&dxo)) dxo = 0.05;
		if (!getparfloat("fxo",&fxo)) fxo = 0.0;
		xo = ealloc1float(nxo);
		for (ixo=0; ixo<nxo; ++ixo)
			xo[ixo] = fxo+ixo*dxo;
	}
	shots = (getparint("nxs",&nxs) || 
		getparfloat("dxs",&dxs) || 
		getparfloat("fxs",&fxs));
	midpoints = (getparint("nxm",&nxm) || 
		getparfloat("dxm",&dxm) || 
		getparfloat("fxm",&fxm)); 
	if (shots && midpoints)
		err("cannot specify both shot and midpoint sampling!\n");
	if (shots) {
		if (!getparint("nxs",&nxs)) nxs = 101;
		if (!getparfloat("dxs",&dxs)) dxs = 0.05;
		if (!getparfloat("fxs",&fxs)) fxs = 0.0;
		nxsm = nxs;
		dxsm = dxs;
	} else {
		midpoints = 1;
		if (!getparint("nxm",&nxm)) nxm = 101;
		if (!getparfloat("dxm",&dxm)) dxm = 0.05;
		if (!getparfloat("fxm",&fxm)) fxm = 0.0;
		nxsm = nxm;
		dxsm = dxm;
	}
	if (!getparint("nxm",&nxm)) nxm = 101;
	if (!getparfloat("dxm",&dxm)) dxm = 0.05;
	if (!getparfloat("fxm",&fxm)) fxm = 0.0;
	if (!getparfloat("x0",&x0)) x0 = 0.0;
	if (!getparfloat("z0",&z0)) z0 = 0.0;
	if (!getparfloat("v00",&v00)) v00 = 2.0;
	if (!getparfloat("dvdx",&dvdx)) dvdx = 0.0;
	if (!getparfloat("dvdz",&dvdz)) dvdz = 0.0;
	if (!getparfloat("fpeak",&fpeak)) fpeak = 0.2/dt;
	if (!getparint("ls",&ls)) ls = 0;
	if (!getparint("er",&er)) er = 0;
	if (!getparint("ob",&ob)) ob = 1;
	if (!getparfloat("tmin",&tmin)) tmin = 10.0*dt;
	if (!getparint("ndpfz",&ndpfz)) ndpfz = 5;
	if (!getparint("smooth",&smooth)) smooth = 0;
	if (!getparint("verbose",&verbose)) verbose = 0;
	decodeReflectors(&nr,&ar,&nxz,&xr,&zr);
	if (!smooth) breakReflectors(&nr,&ar,&nxz,&xr,&zr);

	/* convert velocity v(x0,z0) to v(0,0) */
	v00 -= dvdx*x0+dvdz*z0;
	
	/* determine minimum velocity and minimum reflection time */
	for (ir=0,vmin=FLT_MAX,tminr=FLT_MAX; ir<nr; ++ir) {
		for (ixz=0; ixz<nxz[ir]; ++ixz) {
			x = xr[ir][ixz];
			z = zr[ir][ixz];
			v = v00+dvdx*x+dvdz*z;
			if (v<vmin) vmin = v;
			t = 2.0*z/v;
			if (t<tminr) tminr = t;
		}
	}

	/* determine maximum reflector segment length */
	tmin = MAX(tmin,MAX(ft,dt));
	dsmax = vmin/(2*ndpfz)*sqrt(tmin/fpeak);
 	
	/* make reflectors */
	makeref(dsmax,nr,ar,nxz,xr,zr,&r);

	/* count reflector segments */
	for (ir=0,ns=0; ir<nr; ++ir)
		ns += r[ir].ns;

	/* make wavelet */
	makericker(fpeak,dt,&w);
	
	/* if requested, print information */
	if (verbose) {
		warn("\nSYNLV:");
		warn(
			"Minimum possible reflection time (assuming sources\n"
			"and receivers are at the surface Z=0) is %g s.\n"
			"You may want to adjust the \"minimum time of \n"
			"interest\" parameter.",tminr);
		warn(
			"Total number of small reflecting\n"
			"segments is %d.\n",ns);
	}
	
	/* set constant segy trace header parameters */
	memset( (void *) &tr, 0, sizeof(segy));
	tr.trid = 1;
	tr.counit = 1;
	tr.ns = nt;
	tr.dt = 1.0e6*dt;
	tr.delrt = 1.0e3*ft;
	
	/* loop over shots or midpoints */
	for (ixsm=0,tracl=0; ixsm<nxsm; ++ixsm) {
	
		/* loop over offsets */
		for (ixo=0; ixo<nxo; ++ixo) {
		
			/* compute source and receiver coordinates */
			if (shots)
				xs = fxs+ixsm*dxs;
			else
				xs = fxm+ixsm*dxm-0.5*xo[ixo];
			zs = 0.0;
			xg = xs+xo[ixo];
			zg = 0.0;
			
			/* set segy trace header parameters */
			tr.tracl = tr.tracr = ++tracl;
			if (shots) {
				tr.fldr = 1+ixsm;
				tr.tracf = 1+ixo;
				tr.d2 = dxo;
				tr.f2 = fxo;
			} else {
				tr.cdp = 1+ixsm;
				tr.cdpt = 1+ixo;
				tr.d2 = dxm;
				tr.f2 = fxm;
			}
                        if (kilounits==1) {
                            tr.offset = NINT(1000.0*(dxsm>0.0?xo[ixo]:-xo[ixo]));
                            tr.sx = NINT(1000.0*xs);
                            tr.gx = NINT(1000.0*xg);
                        } else {
                            tr.offset = NINT((dxsm>0.0?xo[ixo]:-xo[ixo]));
                            tr.sx = NINT(xs);
                            tr.gx = NINT(xg);
                        }
				
			/* make one trace */
			makeone(v00,dvdx,dvdz,ls,er,ob,w,
				xs,zs,xg,zg,
				nr,r,nt,dt,ft,tr.data);
			
			/* write trace */
			puttr(&tr);
		}
	}
	return(CWP_Exit());
}


static void makeone (float v00, float dvdx, float dvdz, 
	int ls, int er, int ob, Wavelet *w,
	float xs, float zs, float xg, float zg,
	int nr, Reflector *r, int nt, float dt, float ft, float *trace)
/*****************************************************************************
Make one synthetic seismogram for linear velocity v(x,z) = v00+dvdx*x+dvdz*z
******************************************************************************
Input:
v00		velocity v at (x=0,z=0)
dvdx		derivative dv/dx of velocity v with respect to x
dvdz		derivative dv/dz of velocity v with respect to z
ls		=1 for line source amplitudes; =0 for point source
er		=1 for exploding, =0 for normal reflector amplitudes
ob		=1 to include cos obliquity factors; =0 to omit
w		wavelet to convolve with trace
xs		x coordinate of source
zs		z coordinate of source
xg		x coordinate of receiver group
zg		z coordinate of receiver group
nr		number of reflectors
r		array[nr] of reflectors
nt		number of time samples
dt		time sampling interval
ft		first time sample

Output:
trace		array[nt] containing synthetic seismogram
*****************************************************************************/
{
	int it,ir,is,ns;
	float ar,ds,xd,zd,cd,sd,vs,vg,vd,cs,ss,ts,qs,cg,sg,tg,qg,
		ci,cr,time,amp,*temp;
	ReflectorSegment *rs;
	int lhd=LHD,nhd=NHD;
	static float hd[NHD];
	static int madehd=0;
	
	/* if half-derivative filter not yet made, make it */
	if (!madehd) {
		mkhdiff(dt,lhd,hd);
		madehd = 1;
	}

	/* zero trace */
	for (it=0; it<nt; ++it)
		trace[it] = 0.0;
	
	/* velocities at source and receiver */
	vs = v00+dvdx*xs+dvdz*zs;
	vg = v00+dvdx*xg+dvdz*zg;

	/* loop over reflectors */
	for (ir=0; ir<nr; ++ir) {

		/* amplitude, number of segments, segment length */
		ar = r[ir].a;
		ns = r[ir].ns;
		ds = r[ir].ds;
		rs = r[ir].rs;
	
		/* loop over diffracting segments */
		for (is=0; is<ns; ++is) {
		
			/* diffractor midpoint, unit-normal, and length */
			xd = rs[is].x;
			zd = rs[is].z;
			cd = rs[is].c;
			sd = rs[is].s;
			
			/* velocity at diffractor */
			vd = v00+dvdx*xd+dvdz*zd;

			/* ray from shot to diffractor */
			raylv2(v00,dvdx,dvdz,xs,zs,xd,zd,&cs,&ss,&ts,&qs);

			/* ray from receiver to diffractor */
			raylv2(v00,dvdx,dvdz,xg,zg,xd,zd,&cg,&sg,&tg,&qg);

			/* cosines of incidence and reflection angles */
			if (ob) {
				ci = cd*cs+sd*ss;
				cr = cd*cg+sd*sg;
			} else {
				ci = 1.0;
				cr = 1.0;
			}

			/* if either cosine is negative, skip diffractor */
			if (ci<0.0 || cr<0.0) continue;

			/* two-way time and amplitude */
			time = ts+tg;
			if (er) {
				amp = sqrt(vg*vd/qg);
			} else {
				if (ls)
					amp = sqrt((vs*vd*vd*vg)/(qs*qg));
				else
					amp = sqrt((vs*vd*vd*vg)/
						(qs*qg*(qs+qg)));
			}
			amp *= (ci+cr)*ar*ds;
				
			/* add sinc wavelet to trace */
			addsinc(time,amp,nt,dt,ft,trace);
		}
	}
	
	/* allocate workspace */
	temp = ealloc1float(nt);
	
	/* apply half-derivative filter to trace */
	convolve_cwp(nhd,-lhd,hd,nt,0,trace,nt,0,temp);

	/* convolve wavelet with trace */
	convolve_cwp(w->lw,w->iw,w->wv,nt,0,temp,nt,0,trace);
	
	/* free workspace */
	free1float(temp);
}
@


1.21
log
@copyright
@
text
@d4 1
a4 1
/* SUSYNLV: $Revision: 1.20 $ ; $Date: 2006/11/07 22:58:42 $	*/
d400 1
a400 1
	conv(nhd,-lhd,hd,nt,0,trace,nt,0,temp);
d403 1
a403 1
	conv(w->lw,w->iw,w->wv,nt,0,temp,nt,0,trace);
@


1.20
log
@changed    memset( .., (int) '\0',...) to memset( .., 0,..) as per suggestion of Marion Zhu and Reg Beardsley
@
text
@d1 4
a4 1
/* SUSYNLV: $Revision: 1.19 $ ; $Date: 2003/08/20 18:32:49 $	*/
@


1.19
log
@large file support and cwp exit function
@
text
@d1 1
a1 1
/* SUSYNLV: $Revision: 1.18 $ ; $Date: 2003/08/19 17:31:42 $	*/
d227 1
a227 1
	memset( (void *) &tr, (int) '\0', sizeof(tr));
@


1.18
log
@y.
@
text
@d1 1
a1 1
/* SUSYNLV: $Revision: 1.16 $ ; $Date: 1996/02/21 23:39:07 $	*/
d281 1
a281 1
	return EXIT_SUCCESS;
@


1.17
log
@9 June 2003
@
text
@d17 3
d21 2
a22 2
" dxo=0.05               offset sampling interval (km)			",
" fxo=0.0                first offset (km, see notes below)		",
d25 2
a26 2
" dxm=0.05               midpoint sampling interval (km)		",
" fxm=0.0                first midpoint (km)				",
d28 2
a29 2
" dxs=0.05               shotpoint sampling interval (km)		",
" fxs=0.0                first shotpoint (km)				",
d32 1
a32 1
" v00=2.0                velocity at x0,z0 (km/sec)			",
d52 2
a53 1
"More than one ref (reflector) may be specified.  When obliquity factors",
d64 1
d114 1
a114 1
		*nxz;
d131 1
d262 9
a270 3
			tr.offset = NINT(1000.0*(dxsm>0.0?xo[ixo]:-xo[ixo]));
			tr.sx = NINT(1000.0*xs);
			tr.gx = NINT(1000.0*xg);
d281 1
a281 1
	return(CWP_Exit());
@


1.16
log
@Using two argument CHECK_NT macro to check the relevant time sample
quantity.
@
text
@d1 1
a1 1
/* SUSYNLV: $Revision: 1.15 $ ; $Date: 1996/02/21 22:06:00 $	*/
d269 1
a269 1
	return EXIT_SUCCESS;
@


1.15
log
@Using CHECK_NT macro.
Removed unused variable traces in main (per -Wall).
@
text
@d1 1
a1 1
/* SUSYNLV: $Revision: 1.14 $ ; $Date: 1996/02/20 23:03:40 $	*/
d123 1
a123 1
	if (!getparint("nt",&nt)) nt = 101; CHECK_NT(nt);
@


1.14
log
@Protect against nt >SU_NFLTS.
@
text
@d1 1
a1 1
/* SUSYNLV: $Revision: 1.13 $ ; $Date: 1996/02/07 15:22:39 $	*/
d103 1
d114 1
a114 1
		*trace,*xo,*ar,**xr,**zr;
d123 1
a123 2
	if (!getparint("nt",&nt)) nt = 101;
	if (nt > SU_NFLTS) err("Cannot have nt=%d > SU_NFLTS=%d",nt,SU_NFLTS);
@


1.13
log
@Deal with header fields accessed/modified down to sudoc.
@
text
@d1 1
a1 1
/* SUSYNLV: $Revision: 1.12 $ ; $Date: 1995/09/27 20:24:24 $	*/
d123 1
@


1.12
log
@added return EXIT_SUCCESS at the end of main
@
text
@d1 1
a1 1
/* SUSYNLV: $Revision: 1.11 $ ; $Date: 1995/07/11 18:24:00 $	*/
d60 4
@


1.11
log
@Changed default to verbose=0.
Changed fprintf's to warn's.
Fixed program name echo from SYNLVXZ to SYNLV.
@
text
@d1 1
a1 1
/* SUSYNLV: $Revision: 1.10 $ ; $Date: 1995/04/26 14:03:54 $	*/
d264 1
@


1.10
log
@fixed output header values
@
text
@d1 1
a1 1
/* SUSYNLV: $Revision: 1.9 $ ; $Date: 94/09/06 10:21:29 $	*/
d40 1
a40 1
" verbose=1              =1 to print some useful information		",
d169 1
a169 1
	if (!getparint("verbose",&verbose)) verbose = 1;
d204 2
a205 2
		fprintf(stderr,"\nSYNLVXZ:\n");
		fprintf(stderr,
d209 2
a210 2
			"interest\" parameter.\n",tminr);
		fprintf(stderr,
a212 1
		fprintf(stderr,"\n");
@


1.9
log
@Added include of segy.h
@
text
@d1 1
a1 1
/* SUSYNLV: $Revision: 1.8 $ ; $Date: 94/08/25 15:01:14 $	*/
d244 2
d249 2
@


1.8
log
@Removed copyright statement from codes that had it.
Moved self-doc line for sudoc.
@
text
@d1 4
a4 1
/* SUSYNLV: $Revision: 1.7 $ ; $Date: 94/03/01 12:33:30 $	*/
@


1.7
log
@Removed common subs in synlv clones to par/lib/modeling.c
@
text
@d1 1
a1 1
/* SUSYNLV: $Revision: 1.6 $ ; $Date: 94/02/08 10:47:32 $	*/
a2 14
/*----------------------------------------------------------------------
 * Copyright (c) Colorado School of Mines, 1990.
 * All rights reserved.
 *
 * This code is part of SU.  SU stands for Seismic Unix, a processing line
 * developed at the Colorado School of Mines, partially based on Stanford
 * Exploration Project (SEP) software.  Inquiries should be addressed to:
 *
 *  Jack K. Cohen, Center for Wave Phenomena, Colorado School of Mines,
 *  Golden, CO 80401  (jkc@@dix.mines.colorado.edu)
 *----------------------------------------------------------------------
 */
#include "su.h"

a53 1
/**************** end self doc ***********************************/
d58 1
@


1.6
log
@Fixed array bound in makeref pointed out by Eric Verschuur at Delft.
Code originally read: for (iuu=0,uu=0.0,s[0]=0.0; iuu<nuu; ++iuu,uu+=duu) {
but this causes an out-of-bounds access a few lines later:
s[iuu] = s[iuu-1]+sqrt(dx*dx+dz*dz);
Since s[0] is initialized to zero, it is clear that we want iuu=1.
Since s[0] = 0.0; occurred a few lines earlier in the code, I
dropped the initialization in the for loop.  Also changed to uu=duu:
for (iuu=1,uu=duu; iuu<nuu; ++iuu,uu+=duu) {
@
text
@d1 1
a1 1
/* SUSYNLV: $Revision: 1.5 $ ; $Date: 94/02/07 09:45:35 $	*/
a15 1
#include "segy.h"
d75 21
a95 18
/* define structures */
typedef struct ReflectorSegmentStruct {
	float x;	/* x coordinate of segment midpoint */
	float z;	/* z coordinate of segment midpoint */
	float s;	/* x component of unit-normal-vector */
	float c;	/* z component of unit-normal-vector */
} ReflectorSegment;
typedef struct ReflectorStruct {
	int ns;			/* number of reflector segments */
	float ds;		/* segment length */
	float a;		/* amplitude of reflector */
	ReflectorSegment *rs;	/* array[ns] of reflector segments */
} Reflector;
typedef struct WaveletStruct {
	int lw;			/* length of wavelet */
	int iw;			/* index of first wavelet sample */
	float *wv;		/* wavelet sample values */
} Wavelet;
d101 1
a101 9
/* prototypes for functions defined and used internally */
static void decodeReflectors (int *nrPtr,
	float **aPtr, int **nxzPtr, float ***xPtr, float ***zPtr);
static int decodeReflector (char *string,
	float *aPtr, int *nxzPtr, float **xPtr, float **zPtr);
static void breakReflectors (int *nr, float **ar, 
	int **nu, float ***xu, float ***zu);
static void makeref (float dsmax, int nr, float *ar, 
	int *nu, float **xu, float **zu, Reflector **r);
a105 6
static void raylv2 (float v00, float dvdx, float dvdz,
	float x0, float z0, float x, float z,
	float *c, float *s, float *t, float *q);
static void addsinc (float time, float amp,
	int nt, float dt, float ft, float *trace);
static void makericker (float fpeak, float dt, Wavelet **w);
a273 7
/* parse reflectors parameter string */
static void decodeReflectors (int *nrPtr,
	float **aPtr, int **nxzPtr, float ***xPtr, float ***zPtr)
{
	int nr,*nxz,ir;
	float *a,**x,**z;
	char t[1024],*s;
a274 236
	/* count reflectors */
	nr = countparname("ref");
	if (nr==0) nr = 1;
	
	/* allocate space */
	a = ealloc1(nr,sizeof(float));
	nxz = ealloc1(nr,sizeof(int));
	x = ealloc1(nr,sizeof(float*));
	z = ealloc1(nr,sizeof(float*));

	/* get reflectors */
	for (ir=0; ir<nr; ++ir) {
		if (!getnparstring(ir+1,"ref",&s)) s = "1:1,2;4,2";
		strcpy(t,s);
		if (!decodeReflector(t,&a[ir],&nxz[ir],&x[ir],&z[ir]))
			err("Reflector number %d specified "
				"incorrectly!\n",ir+1);
	}

	/* set output parameters before returning */
	*nrPtr = nr;
	*aPtr = a;
	*nxzPtr = nxz;
	*xPtr = x;
	*zPtr = z;
}

/* parse one reflector specification; return 1 if valid, 0 otherwise */
static int decodeReflector (char *string,
	float *aPtr, int *nxzPtr, float **xPtr, float **zPtr)
{
	int nxz,ixz;
	float a,*x,*z;
	char *s,*t;

	/* if specified, get reflector amplitude; else, use default */
	s = string;
	if (strchr(s,':')==NULL) {
		a = 1.0;
		s = strtok(s,",;\0");
	} else {
		if (strcspn(s,":")>=strcspn(s,",;\0")) return 0;
		a = atof(s=strtok(s,":"));
		s = strtok(NULL,",;\0");
	}

	/* count x and z values, while splitting string into tokens */
	for (t=s,nxz=0; t!=NULL; ++nxz)
		t = strtok(NULL,",;\0");
	
	/* total number of values must be even */
	if (nxz%2) return 0;

	/* number of (x,z) pairs */
	nxz /= 2;

	/* 2 or more (x,z) pairs are required */
	if (nxz<2) return 0;

	/* allocate space */
	x = ealloc1(nxz,sizeof(float));
	z = ealloc1(nxz,sizeof(float));

	/* convert (x,z) values */
	for (ixz=0; ixz<nxz; ++ixz) {
		x[ixz] = atof(s);
		s += strlen(s)+1;
		z[ixz] = atof(s);
		s += strlen(s)+1;
	}

	/* set output parameters before returning */
	*aPtr = a;
	*nxzPtr = nxz;
	*xPtr = x;
	*zPtr = z;
	return 1;
}

/* Break up reflectors by duplicating interior (x,z) points */
static void breakReflectors (int *nr, float **ar, 
	int **nu, float ***xu, float ***zu)
{
	int nri,nro,*nui,*nuo,ir,jr,iu;
	float *ari,*aro,**xui,**zui,**xuo,**zuo;

	/* input reflectors */
	nri = *nr;
	ari = *ar;
	nui = *nu;
	xui = *xu;
	zui = *zu;

	/* number of output reflectors */
	for (ir=0,nro=0; ir<nri; ++ir)
		nro += nui[ir]-1;

	/* make output reflectors and free space for input reflectors */
	aro = ealloc1float(nro);
	nuo = ealloc1int(nro);
	xuo = ealloc1(nro,sizeof(float*));
	zuo = ealloc1(nro,sizeof(float*));
	for (ir=0,jr=0; ir<nri; ++ir) {
		for (iu=0; iu<nui[ir]-1; ++iu,++jr) {
			aro[jr] = ari[ir];
			nuo[jr] = 2;
			xuo[jr] = ealloc1float(2);
			zuo[jr] = ealloc1float(2);
			xuo[jr][0] = xui[ir][iu];
			zuo[jr][0] = zui[ir][iu];
			xuo[jr][1] = xui[ir][iu+1];
			zuo[jr][1] = zui[ir][iu+1];
		}
		free1float(xui[ir]);
		free1float(zui[ir]);
	}
	free1float(ari);
	free1int(nui);
	free1(xui);
	free1(zui);

	/* output reflectors */
	*nr = nro;
	*ar = aro;
	*nu = nuo;
	*xu = xuo;
	*zu = zuo;
}

static void makeref (float dsmax, int nr, float *ar, 
	int *nu, float **xu, float **zu, Reflector **r)
/*****************************************************************************
Make piecewise cubic reflectors
******************************************************************************
Input:
dsmax		maximum length of reflector segment
nr		number of reflectors
ar		array[nr] of reflector amplitudes
nu		array[nr] of numbers of (x,z) pairs; u = 0, 1, ..., nu[ir]
xu		array[nr][nu[ir]] of reflector x coordinates x(u)
zu		array[nr][nu[ir]] of reflector z coordinates z(u)

Output:
r		array[nr] of reflectors
******************************************************************************
Notes:
Space for the ar, nu, xu, and zu arrays is freed by this function, since
they are only used to construct the reflectors.

This function is meant to be called only once, so it need not be very
efficient.  Once made, the reflectors are likely to be used many times, 
so the cost of making them is insignificant.
*****************************************************************************/
{
	int ir,iu,nuu,iuu,ns,is;
	float x,z,xlast,zlast,dx,dz,duu,uu,ds,fs,rsx,rsz,rsxd,rszd,
		*u,*s,(*xud)[4],(*zud)[4],*us;
	ReflectorSegment *rs;
	Reflector *rr;
	
	/* allocate space for reflectors */
	*r = rr = ealloc1(nr,sizeof(Reflector));

	/* loop over reflectors */
	for (ir=0; ir<nr; ++ir) {

		/* compute cubic spline coefficients for uniformly sampled u */
		u = ealloc1float(nu[ir]);
		for (iu=0; iu<nu[ir]; ++iu)
			u[iu] = iu;
		xud = (float(*)[4])ealloc1float(4*nu[ir]);
		csplin(nu[ir],u,xu[ir],xud);
		zud = (float(*)[4])ealloc1float(4*nu[ir]);
		csplin(nu[ir],u,zu[ir],zud);

		/* finely sample x(u) and z(u) and compute length s(u) */
		nuu = 20*nu[ir];
		duu = (u[nu[ir]-1]-u[0])/(nuu-1);
		s = ealloc1float(nuu);
		s[0] = 0.0;
		xlast = xu[ir][0];
		zlast = zu[ir][0];
		for (iuu=1,uu=duu; iuu<nuu; ++iuu,uu+=duu) {
			intcub(0,nu[ir],u,xud,1,&uu,&x);
			intcub(0,nu[ir],u,zud,1,&uu,&z);
			dx = x-xlast;
			dz = z-zlast;
			s[iuu] = s[iuu-1]+sqrt(dx*dx+dz*dz);
			xlast = x;
			zlast = z;
		}

		/* compute u(s) from s(u) */
		ns = 1+s[nuu-1]/dsmax;
		ds = s[nuu-1]/ns;
		fs = 0.5*ds;
		us = ealloc1float(ns);
		yxtoxy(nuu,duu,0.0,s,ns,ds,fs,0.0,(float)(nu[ir]-1),us);

		/* compute reflector segments uniformly sampled in s */
		rs = ealloc1(ns,sizeof(ReflectorSegment));
		for (is=0; is<ns; ++is) {
			intcub(0,nu[ir],u,xud,1,&us[is],&rsx);
			intcub(0,nu[ir],u,zud,1,&us[is],&rsz);
			intcub(1,nu[ir],u,xud,1,&us[is],&rsxd);
			intcub(1,nu[ir],u,zud,1,&us[is],&rszd);
			rs[is].x = rsx;
			rs[is].z = rsz;
			rs[is].c = rsxd/sqrt(rsxd*rsxd+rszd*rszd);
			rs[is].s = -rszd/sqrt(rsxd*rsxd+rszd*rszd);
		}
		
		/* fill in reflector structure */
		rr[ir].ns = ns;
		rr[ir].ds = ds;
		rr[ir].a = ar[ir];
		rr[ir].rs = rs;

		/* free workspace */
		free1float(us);
		free1float(s);
		free1float(u);
		free1float((float*)xud);
		free1float((float*)zud);

		/* free space replaced by reflector segments */
		free1(xu[ir]);
		free1(zu[ir]);
	}

	/* free space replaced by reflector segments */
	free1(nu);
	free1(xu);
	free1(zu);
}

a393 226
}

static void raylv2 (float v00, float dvdx, float dvdz,
	float x0, float z0, float x, float z,
	float *c, float *s, float *t, float *q)
/*****************************************************************************
Trace ray between two points, for linear velocity v = v00+dvdx*x+dvdz*z
******************************************************************************
Input:
v00		velocity at (x=0,z=0)
dvdx		derivative dv/dx of velocity with respect to x
dvdz		derivative dv/dz of velocity with respect to z
x0		x coordinate at beginning of ray
z0		z coordinate at beginning of ray
x		x coordinate at end of ray
z		z coordinate at end of ray

Output:
c		cosine of propagation angle at end of ray
s		sine of propagation angle at end of ray
t		time along raypath
q		integral of velocity along raypath
*****************************************************************************/
{
	float a,oa,v0,v,cr,sr,r,or,c0,mx,temp;
	
	/* if (x,z) same as (x0,z0) */
	if (x==x0 && z==z0) {
		*c = 1.0;
		*s = 0.0;
		*t = 0.0;
		*q = 0.0;;
		return;
	}

	/* if constant velocity */
	if (dvdx==0.0 && dvdz==0.0) {
		x -= x0;
		z -= z0;
		r = sqrt(x*x+z*z);
		or = 1.0/r;
		*c = z*or;
		*s = x*or;
		*t = r/v00;
		*q = r*v00;
		return;
	}

	/* if necessary, rotate coordinates so that v(x,z) = v0+a*(z-z0) */
	if (dvdx!=0.0) {
		a = sqrt(dvdx*dvdx+dvdz*dvdz);
		oa = 1.0/a;
		cr = dvdz*oa;
		sr = dvdx*oa;
		temp = cr*x0-sr*z0;
		z0 = cr*z0+sr*x0;
		x0 = temp;
		temp = cr*x-sr*z;
		z = cr*z+sr*x;
		x = temp;
	} else {
		a = dvdz;
	}

	/* velocities at beginning and end of ray */
	v0 = v00+a*z0;
	v = v00+a*z;
	
	/* if either velocity not positive */
	if (v0<0.0 || v<0.0) {
		*c = 1.0;
		*s = 0.0;
		*t = FLT_MAX;
		*q = FLT_MAX;
		return;
	}

	/* translate (x,z) */
	x -= x0;
	z -= z0;
	
	/* if raypath is parallel to velocity gradient */
	if (x*x<0.000001*z*z) {

		/* if ray is going down */
		if (z>0.0) {
			*s = 0.0;
			*c = 1.0;
			*t = log(v/v0)/a;
			*q = 0.5*z*(v+v0);
		
		/* else, if ray is going up */
		} else {
			*s = 0.0;
			*c = -1.0;
			*t = -log(v/v0)/a;
			*q = -0.5*z*(v+v0);
		}
	
	/* else raypath is circular with finite radius */
	} else {

		/* save translated -x to avoid roundoff error below */
		mx = -x;
		
		/* translate to make center of circular raypath at (0,0) */
		z0 = v0/a;
		z += z0;
		x0 = -(x*x+z*z-z0*z0)/(2.0*x);
		x += x0;
		
		/* signed radius of raypath; if ray going clockwise, r > 0 */
		if ( (a>0.0 && mx>0.0) || (a<0.0 && mx<0.0) )
			r = sqrt(x*x+z*z);
		else
			r = -sqrt(x*x+z*z);
		
		/* cosine at (x0,z0), cosine and sine at (x,z) */
		or = 1.0/r;
		c0 = x0*or;
		*c = x*or;
		*s = -z*or;

		/* time along raypath */
		*t = log((v*(1.0+c0))/(v0*(1.0+(*c))))/a;
		if ((*t)<0.0) *t = -(*t);

		/* integral of velocity along raypath */
		*q = a*r*mx;
	}

	/* if coordinates were rotated, unrotate cosine and sine */
	if (dvdx!=0.0) {
		temp = cr*(*s)+sr*(*c);
		*c = cr*(*c)-sr*(*s);
		*s = temp;
	}
}

static void addsinc (float time, float amp,
	int nt, float dt, float ft, float *trace)
/*****************************************************************************
Add sinc wavelet to trace at specified time and with specified amplitude
******************************************************************************
Input:
time		time at which to center sinc wavelet
amp		peak amplitude of sinc wavelet
nt		number of time samples
dt		time sampling interval
ft		first time sample
trace		array[nt] containing sample values

Output:
trace		array[nt] with sinc added to sample values
*****************************************************************************/
{
	static float sinc[101][8];
	static int nsinc=101,madesinc=0;
	int jsinc;
	float frac;
	int itlo,ithi,it,jt;
	float tn,*psinc;

	/* if not made sinc coefficients, make them */
	if (!madesinc) {
		for (jsinc=1; jsinc<nsinc-1; ++jsinc) {
			frac = (float)jsinc/(float)(nsinc-1);
			mksinc(frac,8,sinc[jsinc]);
		}
		for (jsinc=0; jsinc<8; ++jsinc)
			sinc[0][jsinc] = sinc[nsinc-1][jsinc] = 0.0;
		sinc[0][3] = 1.0;
		sinc[nsinc-1][4] = 1.0;
		madesinc = 1;
	}
	tn = (time-ft)/dt;
	jt = tn;
	jsinc = (tn-jt)*(nsinc-1);
	itlo = jt-3;
	ithi = jt+4;
	if (itlo>=0 && ithi<nt) {
		psinc = sinc[jsinc];
		trace[itlo] += amp*psinc[0];
		trace[itlo+1] += amp*psinc[1];
		trace[itlo+2] += amp*psinc[2];
		trace[itlo+3] += amp*psinc[3];
		trace[itlo+4] += amp*psinc[4];
		trace[itlo+5] += amp*psinc[5];
		trace[itlo+6] += amp*psinc[6];
		trace[itlo+7] += amp*psinc[7];
	} else if (ithi>=0 && itlo<nt) {
		if (itlo<0) itlo = 0;
		if (ithi>=nt) ithi = nt-1;
		psinc = sinc[jsinc]+itlo-jt+3;
		for (it=itlo; it<=ithi; ++it)
			trace[it] += amp*(*psinc++);
	}
}

static void makericker (float fpeak, float dt, Wavelet **w)
/*****************************************************************************
Make Ricker wavelet
******************************************************************************
Input:
fpeak		peak frequency of wavelet
dt		time sampling interval

Output:
w		Ricker wavelet
*****************************************************************************/
{
	int iw,lw,it,jt;
	float t,x,*wv;
	
	iw = -(1+1.0/(fpeak*dt));
	lw = 1-2*iw;
	wv = ealloc1float(lw);
	for (it=iw,jt=0,t=it*dt; jt<lw; ++it,++jt,t+=dt) {
		x = PI*fpeak*t;
		x = x*x;
		wv[jt] = exp(-x)*(1.0-2.0*x);
	}
	*w = ealloc1(1,sizeof(Wavelet));
	(*w)->lw = lw;
	(*w)->iw = iw;
	(*w)->wv = wv;
@


1.5
log
@Put parens in compound conditional at 761 to make compilers
and humans happier.
@
text
@d1 1
a1 1
/* SUSYNLV: $Revision: 1.4 $ ; $Date: 93/11/24 16:18:19 $	*/
d476 1
a476 1
		for (iuu=0,uu=0.0,s[0]=0.0; iuu<nuu; ++iuu,uu+=duu) {
@


1.4
log
@changed bcopy to memset
@
text
@d1 1
a1 1
/* SUSYNLV: $Revision: 1.3 $ ; $Date: 92/10/22 16:43:59 $	*/
d761 1
a761 1
		if (a>0.0 && mx>0.0 || a<0.0 && mx<0.0)
@


1.3
log
@new selfdoc installed
@
text
@d1 1
a1 1
/* SUSYNLV: $Revision: 1.2 $ ; $Date: 92/05/07 10:32:56 $	*/
d240 1
a240 1
	bzero(&tr,sizeof(tr));
@


1.2
log
@Fix ref= self-doc.
@
text
@d1 1
a1 1
/* SUSYNLV: $Revision: 1.1 $ ; $Date: 91/09/19 09:03:25 $	*/
d15 2
d19 50
a68 52
char *sdoc =
"SUSYNLV - SYNthetic seismograms for Linear Velocity function\n"
"\n"
"susynlv >outfile [optional parameters]\n"
"\n"
"Optional Parameters:\n"
"nt=101                 number of time samples\n"
"dt=0.04                time sampling interval (sec)\n"
"ft=0.0                 first time (sec)\n"
"nxo=1                  number of source-receiver offsets\n"
"dxo=0.05               offset sampling interval (km)\n"
"fxo=0.0                first offset (km, see notes below)\n"
"xo=fxo,fxo+dxo,...     array of offsets (use only for non-uniform offsets)\n"
"nxm=101                number of midpoints (see notes below)\n"
"dxm=0.05               midpoint sampling interval (km)\n"
"fxm=0.0                first midpoint (km)\n"
"nxs=101                number of shotpoints (see notes below)\n"
"dxs=0.05               shotpoint sampling interval (km)\n"
"fxs=0.0                first shotpoint (km)\n"
"x0=0.0                 distance x at which v00 is specified\n"
"z0=0.0                 depth z at which v00 is specified\n"
"v00=2.0                velocity at x0,z0 (km/sec)\n"
"dvdx=0.0               derivative of velocity with distance x (dv/dx)\n"
"dvdz=0.0               derivative of velocity with depth z (dv/dz)\n"
"fpeak=0.2/dt           peak frequency of symmetric Ricker wavelet (Hz)\n"
"ref=\"1:1,2;4,2\"        reflector(s):  \"amplitude:x1,z1;x2,z2;x3,z3;...\"\n"
"smooth=0               =1 for smooth (piecewise cubic spline) reflectors\n"
"er=0                   =1 for exploding reflector amplitudes\n"
"ls=0                   =1 for line source; default is point source\n"
"ob=1                   =1 to include obliquity factors\n"
"tmin=10.0*dt           minimum time of interest (sec)\n"
"ndpfz=5                number of diffractors per Fresnel zone\n"
"verbose=1              =1 to print some useful information\n"
"\n"
"Notes:\n"
"\n"
"Offsets are signed - may be positive or negative.  Receiver locations\n"
"are computed by adding the signed offset to the source location.\n"
"\n"
"Specify either midpoint sampling or shotpoint sampling, but not both.\n"
"If neither is specified, the default is the midpoint sampling above.\n"
"\n"
"More than one ref (reflector) may be specified.  When obliquity factors\n"
"are included, then only the left side of each reflector (as the x,z\n"
"reflector coordinates are traversed) is reflecting.  For example, if x\n"
"coordinates increase, then the top side of a reflector is reflecting.\n"
"Note that reflectors are encoded as quoted strings, with an optional\n"
"reflector amplitude: preceding the x,z coordinates of each reflector.\n"
"Default amplitude is 1.0 if amplitude: part of the string is omitted.\n"
"\n"
"Author:  Dave Hale, 09/17/91,  Colorado School of Mines\n"
"\n";
d71 3
a74 1
#include "su.h"
d138 1
a138 1
	askdoc(0);
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/* SUSYNLV: $Revision: 1.5 $ ; $Date: 91/09/05 08:51:33 $	*/
d42 1
a42 1
"ref=1:1,2;4,2          reflector(s):  \"amplitude:x1,z1;x2,z2;x3,z3;...\"\n"
d304 1
a304 1
		if (!getparstring("ref",&s)) s = "1:1,2;4,2";
@
