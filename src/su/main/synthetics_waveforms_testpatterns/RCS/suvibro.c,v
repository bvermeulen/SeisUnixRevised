head	1.15;
access;
symbols;
locks; strict;
comment	@ * @;


1.15
date	2015.06.02.20.15.23;	author john;	state Exp;
branches;
next	1.14;

1.14
date	2012.10.22.14.35.30;	author john;	state Exp;
branches;
next	1.13;

1.13
date	2011.11.12.00.40.42;	author john;	state Exp;
branches;
next	1.12;

1.12
date	2003.06.09.16.17.07;	author john;	state Exp;
branches;
next	1.11;

1.11
date	97.10.20.15.18.18;	author john;	state Exp;
branches;
next	1.10;

1.10
date	96.09.13.21.49.05;	author john;	state Exp;
branches;
next	1.9;

1.9
date	96.02.22.21.54.27;	author jkc;	state Exp;
branches;
next	1.8;

1.8
date	96.02.07.16.17.23;	author jkc;	state Exp;
branches;
next	1.7;

1.7
date	94.10.07.12.32.33;	author john;	state Exp;
branches;
next	1.6;

1.6
date	94.08.25.15.01.41;	author jkc;	state Exp;
branches;
next	1.5;

1.5
date	92.10.22.16.11.20;	author john;	state Exp;
branches;
next	1.4;

1.4
date	91.10.24.11.59.09;	author mdietric;	state Exp;
branches;
next	1.3;

1.3
date	91.10.23.13.56.06;	author jkc;	state Exp;
branches;
next	1.2;

1.2
date	91.10.23.13.53.50;	author jkc;	state Exp;
branches;
next	1.1;

1.1
date	91.10.23.13.51.40;	author jkc;	state Exp;
branches;
next	;


desc
@Generates vibroseis data
@


1.15
log
@added NINT for dt -- Ekkehart Tessmer Uni-bremen
@
text
@/* Copyright (c) Colorado School of Mines, 2011.*/
/* All rights reserved.                       */

/* SUVIBRO: $Revision: 1.14 $ ; $Date: 2012/10/22 14:35:30 $	*/

#include "su.h"
#include "segy.h"

#define TWOPI 2.0*PI

/*********************** self documentation **********************/
char *sdoc[] = {
"								",
" SUVIBRO - Generates a Vibroseis sweep (linear, linear-segment,",
"			dB per Octave, dB per Hertz, T-power)	",
"								",
" suvibro [optional parameters] > out_data_file			",
"								",
" Optional Parameters:						",
" dt=0.004		time sampling interval			",
" sweep=1	  	linear sweep			  	",
" 		  	=2 linear-segment			",
" 		  	=3 decibel per octave	 		",
" 		  	=4 decibel per hertz	  		",
" 		  	=5 t-power				",
" swconst=0.0		sweep constant (see note)		",
" f1=10.0		sweep frequency at start		",
" f2=60.0		sweep frequency at end			",
" tv=10.0		sweep length				",
" phz=0.0		initial phase (radians=1 default)	",
" radians=1		=0 degrees				",
" fseg=10.0,60.0	frequency segments (see notes)		",
" tseg=0.0,10.0		time segments (see notes)		",
" t1=1.0		length of taper at start (see notes)	",
" t2=1.0		length of taper at end (see notes)	",
" taper=1		linear					",
"		  	=2 sine					",
"			=3 cosine				",
"			=4 gaussian (+/-3.8)			",
"			=5 gaussian (+/-2.0)			",
"								",
" Notes:							",
" The default tapers are linear envelopes. To eliminate the	",
" taper, choose t1=t2=0.0.					",
"								",
" \"swconst\" is active only with nonlinear sweeps, i.e. when	",
" sweep=3,4,5.							", 
" \"tseg\" and \"fseg\" arrays are used when only sweep=2	",
"								",
" Sweep is a modulated cosine function.				",
NULL};

/*
 * Author: CWP: Michel Dietrich
   Rewrite: Tagir Galikeev, CWP,  7 October 1994
 *
 * Trace header fields set: ns, dt, tracl, sfs, sfe, slen, styp
 */
/**************** end self doc ***********************************/

segy tr;

/* Prototypes for functions used interally */
void Linear( float fs, float fe, float T, float dt, float phz );
void Linear_Segment( float *freq, float *time, int isegm, float T, 
			float dt, float phz );
void dB_per_octave( float fs, float fe, float T, float dt, float swconst, 
			float phz );
void dB_per_hertz( float fs, float fe, float T, float dt, float swconst,
			float phz );
void t_power( float fs, float fe, float T, float dt, float swconst,
			float phz );
void sweep_taper( float t1, float t2, int tap_type, float T, float dt );


int
main(int argc, char **argv)
{
	/* sweep frequency parameters */
	float f1;		/* sweep frequency at beginning */
	float f2;		/* sweep frequency at end */
	float tv;		/* total sweep band */

	/* initial sweep phase paramters */
	int radians=1;		/* =1 phase is in radians, =0 degrees */
	float phz;		/* initial phase */

	/* tapering parameters */
	float t1; 		/* taper at beginning of sweep */
	float t2;		/* taper at end of sweep */

	float dt;		/* time sampling interval on output */
	float swconst;		/* sweep constant for nonlinear sweeps */

	int sweep, i;
	int nt, isegm=0, ntseg, nfseg, taper;
	float *fseg=NULL, *tseg=NULL, *time=NULL;


	/* Initialize */
	initargs(argc, argv);
	requestdoc(0);
	
	/* set parameters and fill header fields */
	if (!getparint("sweep", &sweep)) sweep = 1;
	if (!getparfloat("swconst", &swconst))	swconst = 0.0;
	if (!getparfloat("f1", &f1))	f1 = 10.0;
	if (!getparfloat("f2", &f2))	f2 = 60.0;
	if (!getparfloat("tv", &tv))	tv = 10.0;
	if (!getparint("radians", &radians)) radians = 1;
	if (!getparfloat("phz", &phz))	phz = 0.0;
	if (!getparfloat("t1", &t1))	t1 = 1.0;
	if (!getparfloat("t2", &t2))	t2 = 1.0;
	if (!getparint("taper", &taper)) taper = 1;
	if (!getparfloat("dt", &dt))	dt = 0.004;
	
	tr.dt = NINT(1000000.0*dt);
	if ((nt = tv/dt + 1) >= SU_NFLTS) err("nt=tv/dt=%d -- too big", nt);
	if (t1 + t2 > tv)
		err("sum of tapers t1=%f, t2=%f exceeds tv=%f", t1,t2,tv);

	/* initial phase */
	if(!radians) { /* then degrees */
		phz = phz*TWOPI/360.0;
	}
		
	if (sweep==2) {
		ntseg = countparval("tseg");
		if (ntseg==0) ntseg = 2;
		tseg = ealloc1float(ntseg);
		if (!getparfloat("tseg",tseg)) { tseg[0] = 0.0; tseg[1] = tv; }
		nfseg = countparval("fseg");
		if (nfseg==0) nfseg = 2;
		if (nfseg!=ntseg) err("number of tseg and fseg must be equal");
		fseg = ealloc1float(nfseg);
		if (!getparfloat("fseg",fseg)) { fseg[0] = f1; fseg[1] = f2; }
		if (ntseg > 2)
		for (i=1; i<ntseg; ++i)
		if (tseg[i]<=tseg[i-1])
		  err("tseg must increase monotonically");

		/* prepare freq and time arrays */
		isegm = ntseg - 1;
		tv = tseg[isegm];
		time = ealloc1float(ntseg-1);

		/* compute each segment length */
		for (i=0; i<isegm; i++)
		time[i] = tseg[i+1] - tseg[i];
	  }

	tr.ns = nt;
	tr.tracl = 1;
	tr.sfs = f1;
	tr.sfe = f2;
	tr.slen = 1000.0 * tv;
	tr.styp = sweep;		/* sweep id code */

	if (sweep==1) Linear( f1, f2, tv, dt, phz ); 
	if (sweep==2) Linear_Segment( fseg, time, isegm, tv, dt, phz );
	if (sweep==3) dB_per_octave( f1, f2, tv, dt, swconst, phz );
	if (sweep==4) dB_per_hertz( f1, f2, tv, dt, swconst, phz );
	if (sweep==5) dB_per_hertz( f1, f2, tv, dt, swconst, phz );

	if ( (t1!=0.) || (t2!=0.) )
	  sweep_taper( t1, t2, taper, tv, dt );

	puttr(&tr); 	 	
	return(CWP_Exit()); 
}


void Linear ( float fs, float fe, float T, float dt, float phz )
/*********************************************************************
Linear - generates linear sweep
**********************************************************************
Input: 
fs	start frequency 
fe	end frequency 
T	duration in sec 
dt	sample rate in sec 
phz	initial phase

Output:
tr	array of samples
*********************************************************************
This subroutine generates a sweep with a linear frequency-time 
dependance.
*********************************************************************
References:
Any book on Vibroseis.
*********************************************************************
Author: CWP: Michel Dietrich, Tagir Galikeev		Date: 7 Oct 1994
*********************************************************************/
{
	int nt, i;
	float rate, t ;

	nt=T/dt + 1;
	rate=(fe-fs)/T;

	for (i=0; i<nt; i++) {
		t=i*dt;
		tr.data[i]=cos( TWOPI*(fs+rate/2*t)*t + phz );
	}
}

void Linear_Segment ( float *freq, float *time, int isegm, float T, 
			float dt, float phz )
/*********************************************************************
Linear_Segment - generates linear-segment sweep
**********************************************************************
Input: 
freq	array of start and end frequencies for each segment 
time	array of time lenghts for each segment
isegm	total number of segments in a sweep
T	duration in sec 
dt	sample rate in sec 
phz	initial phase

Output:
tr	array of samples
*********************************************************************
This subroutine generates a nonlinear sweep which consists of a 
number of linear segments
*********************************************************************
References:
Any book on Vibroseis.
*********************************************************************
Author: Tagir Galikeev				  Date:7 Oct 1994
*********************************************************************/
{
	int nt, m, k, i, j;
	float aa, ab, phi, phase;
	
	nt=T/dt + 1;
	m = 0;
	k = 0;
	phase = 0.;

	for (i=0; i<isegm; i++) {
		k = k + m;
		m = (int)( (float)nt / T * (float)time[i] );
		aa = TWOPI*freq[i]*dt;
		ab = PI*(freq[i+1]-freq[i])*(dt*dt) / time[i];

		for (j=0; j<m; j++) {
	  		phi = j*(ab*j+aa) + phase + phz;
			tr.data[j+k]=cos( phi );
		}

		phase = (ab*m+aa)*m + phase;

	}
}

void dB_per_octave ( float fs, float fe, float T, float dt, float swconst, 
			float phz )
/*********************************************************************
dB_per_octave - generates a decibel per octave sweep
**********************************************************************
Input: 
fs	start frequency of a sweep
fe	end frequency of a sweep
T	 duration in sec 
dt	sample rate in sec 
swconst	sweep constant (boost)
phz	initial phase

Output:
tr	array of samples
*********************************************************************
This subroutine generates a nonlinear sweep with a boost in decibels
per octave
*********************************************************************
References:
Equation is taken from PELTON manual
*********************************************************************
Author: Tagir Galikeev				  Date:7 Oct 1994
*********************************************************************/
{
	int nt, i;
	float K1, K2, t, s, swcon;

	nt=T/dt + 1;
	if( swconst == -6. ) swconst=-5.999;
	swcon=swconst/6+1;
	s=(swcon+1)/swcon;
	K1=(float)pow((double)fs,(double)swcon);
	K2=( (float)pow((double)fe,(double)swcon)-
		(float)pow((double)fs,(double)swcon) ) / T;

	for (i=0; i<nt; i++) {
		t=i*dt;
		tr.data[i]=cos(TWOPI/(s*K2)*pow((double)(K1+K2*t),
							(double)s) + phz);
	}
}

void dB_per_hertz ( float fs, float fe, float T, float dt, float swconst,
			float phz )
/*********************************************************************
dB_per_hertz - generates a decibel per hertz sweep
**********************************************************************
Input: 
fs	start frequency of a sweep
fe	end frequency of a sweep
T	 duration in sec 
dt	sample rate in sec 
swconst	sweep constant (boost)
phz	initial phase

Output:
tr	array of samples
*********************************************************************
This subroutine generates a nonlinear sweep with a boost in decibels
per hertz
*********************************************************************
References:
Equation is taken from PELTON manual
*********************************************************************
Author: Tagir Galikeev				  Date:7 Oct 1994
*********************************************************************/
{
	int nt, i;
	float K1, K2, t;

	nt=T/dt + 1;
	K1=(float)20./(swconst*log(10.));
	K2=(float)(exp(swconst*log(10.)*(fe-fs)/20.) - 1.)/T;

	for (i=0; i<nt; i++) {
		t=i*dt;
		if (swconst==0) tr.data[i]=fs;
		else tr.data[i]=cos(TWOPI*(fs*t+K1/K2*((1.+t*K2)*log(1.+t*K2)-
						(1.+t*K2))) + phz);
	}
}

void t_power ( float fs, float fe, float T, float dt, float swconst,
		float phz )
/*********************************************************************
t_power - generates a time to the power sweep
**********************************************************************
Input: 
fs	start frequency of a sweep
fe	end frequency of a sweep
T	 duration in sec 
dt	sample rate in sec 
swconst	sweep constant (boost)
phz	initial phase

Output:
tr	array of samples
*********************************************************************
This subroutine generates a nonlinear sweep with a time to
swconst power boost
*********************************************************************
References:
Equation is taken from PELTON manual
*********************************************************************
Author: Tagir Galikeev				  Date:7 Oct 1994
*********************************************************************/
{
	int nt, i;
	float t, s;

	nt=T/dt + 1;
	for (i=0; i<nt; i++) {
		t=i*dt; s=t/T;
		tr.data[i]=cos( TWOPI*t*( fs+(fe-fs)/(swconst+1.)*
				pow((double)s,(double)swconst) ) + phz );
	}
}


#define EPS     3.8090232       /* exp(-EPS*EPS) = 5e-7, "noise" level  */
				/* see sugain.c				*/
void sweep_taper ( float t1, float t2, int tap_type, float T, float dt )
/*********************************************************************
sweep taper - tapers the sweep
**********************************************************************
Input: 
t1	start taper in sec
t2	end taper in sec
tap_type  type of taper to apply: 1 linear, 2 sine, 3 cosine
T	 sweep duration in sec
dt	sample rate in sec
 
Output:
tr	array of tapered samples
*********************************************************************
This subroutine tapers a sweep mainly to reduce Gibbs phenomena.
Taper coulld be one of the specified above.
*********************************************************************
References:
Any book on Vibroseis.
*********************************************************************
Author: Tagir Galikeev				  Date:7 Oct 1994
*********************************************************************/
{
	int nt, i, nt1, nt2;
	float env=0.0, f, x;

	nt = (int)(T / dt + 1);
	nt1 = (int)(t1 / dt + 1);
	nt2 = (int)(t2 / dt + 1);
	/* apply start taper */
	if( nt1 > 1 ) {
		for (i=0; i<nt1; i++) {
	  		f = (float)i / (float)nt1;
	  		switch ((char) tap_type)	{
	  			case 1: env=f;
	  				break;
	  			case 2: env=sin(PI*f/2.);
	  				break;
	  			case 3: env=0.5*(1.0-cos(PI*f));
	  				break;
	  			case 4: x=EPS*(1-f);
	  				env=exp(-(x*x));
	  				break;
	  			case 5: x=2.0*(1-f);
	  				env=exp(-(x*x));
	  				break;
	  			default:err (" taper ?!");
	  		}
	  		tr.data[i] *= env;
		}
	}
	/* apply end taper */
	if( nt2 > 1 ) {
		for (i=0; i<nt2; i++) {
	  		f = (float)i / (float)nt2;
			switch ((char) tap_type)	{
	  			case 1: env=f;
	  				break;
	  			case 2: env=sin(PI*f/2.);
	  				break;
	  			case 3: env=0.5*(1.0-cos(PI*f));
	  				break;
	  			case 4: x=EPS*(1-f);
	  				env=exp(-(x*x));
	  				break;
	  			case 5: x=2.0*(1-f);
	  				env=exp(-(x*x));
	  				break;
	  			default:err (" taper ?!");
	  		}
			tr.data[nt-i]  *= env;
		}
	}
}
@


1.14
log
@cos( TWOPI*(fs+rate/2*t)*t + phz );
Matthias Zillmer's suggestion of pointing out that the selfdoc
says "degrees" but the code says that the initial phase is in
radians.  Added  radians=   option to allow either.
@
text
@d4 1
a4 1
/* SUVIBRO: $Revision: 1.13 $ ; $Date: 2011/11/12 00:40:42 $	*/
d117 1
a117 1
	tr.dt = (float) (1000000.0*dt);
@


1.13
log
@copyright
@
text
@d4 1
a4 1
/* SUVIBRO: $Revision: 1.12 $ ; $Date: 2003/06/09 16:17:07 $	*/
d30 2
a31 1
" phz=0.0		initial phase (degrees)			",
d50 1
d79 16
a94 5
	float f1, f2;
	float tv, phz;
	float t1, t2;
	float dt;
	float swconst;
d97 2
a98 1
	float *fseg=NULL, *tseg, *time=NULL;
d110 1
d121 5
@


1.12
log
@9 June 2003
@
text
@d1 4
a4 1
/* SUVIBRO: $Revision: 1.11 $ ; $Date: 1997/10/20 15:18:18 $	*/
@


1.11
log
@added Toralf's fixes.
@
text
@d1 1
a1 1
/* SUVIBRO: $Revision: 1.15 $ ; $Date: 1996/06/12 17:29:22 $	*/
d146 1
a146 1
	return EXIT_SUCCESS; 
@


1.10
log
@silenced -Wall messages
@
text
@d1 1
a1 1
/* SUVIBRO: $Revision: 1.9 $ ; $Date: 1996/02/22 21:54:27 $	*/
d35 2
a82 1

d97 1
a97 2
	if (!getparfloat("dt", &dt))	dt = 0.004; tr.dt = dt*1000000.0;

d99 1
d353 3
d380 1
a380 1
	float env=0.0, f;
d389 16
a404 4
	  		if ( tap_type == 1 ) env=f;
	  		if ( tap_type == 2 ) env=sin(PI*f/2.);
	  		if ( tap_type == 3 ) env=0.5*(1.0-cos(PI*f));
	  	tr.data[i] = tr.data[i]*env;
d411 16
a426 4
			if ( tap_type == 1 ) env=f;
			if ( tap_type == 2 ) env=sin(PI*f/2.);
			if ( tap_type == 3 ) env=0.5*(1.0-cos(PI*f));
			tr.data[nt-i] = tr.data[nt-i]*env;
a429 1

@


1.9
log
@Trap error when t1 + t2 > tv (even with default t1, t2).
@
text
@d1 1
a1 1
/* SUVIBRO: $Revision: 1.8 $ ; $Date: 1996/02/07 16:17:23 $	*/
d78 2
a79 2
	int nt, isegm, ntseg, nfseg, taper;
	float *fseg, *tseg, *time;
d376 1
a376 1
	float env, f;
@


1.8
log
@Deal with header fields accessed/modified down to sudoc.
Restored original author name in credits.
@
text
@d1 1
a1 1
/* SUVIBRO: $Revision: 1.7 $ ; $Date: 1994/10/07 12:32:33 $	*/
d69 1
d100 3
a102 6
	if (t1 + t2 > tv) {
		warn("t1+t2 > tv -- default values of t1 and t2 are used");
		t1 = 1.0;
		t2 = 1.0;
	}
	
@


1.7
log
@rewrite by Tagir Galikeev. Added choice of sweeps and choice of tapers.
@
text
@d1 1
a1 1
/* SUVIBRO: $Revision: 1.5 $ ; $Date: 94/10/8 16:11:20 $	*/
d47 4
a50 1
 * Author: CWP: Tagir Galikeev,  7 October 1994
@


1.6
log
@Removed copyright statement from codes that had it.
Moved self-doc line for sudoc.
@
text
@d1 1
a1 1
/* SUVIBRO: $Revision: 1.5 $ ; $Date: 92/10/22 16:11:20 $	*/
d11 2
a12 1
" SUVIBRO - Generates a Vibroseis sweep (linear FM sweep)	",
d14 1
a14 1
" suvibro [optional parameters] > out_data_file  		",
d17 18
a34 6
"	f1=10.0		sweep frequency at start		",
"	f2=60.0		sweep frequency at end			",
"	tv=14.0		sweep length				",
"	t1=2.0		length of taper at start (see note)	",
"	t2=2.0		length of taper at end (see note)	",
"	dt=0.004	sampling interval			",
d36 8
a43 2
" Note: The default tapers are cosine envelopes.  To eliminate	",
"      the taper, choose t1=t2=0.0.				",
d46 2
a47 2
/* Credits:
 *	CWP: Michel
a50 1

d53 13
d69 1
a69 1
	float tv;
d72 4
a75 3
	float ak;
	int nt;
	int mt1, mt2, mt3;
a81 1

d83 2
d87 5
a91 3
	if (!getparfloat("tv", &tv))	tv = 14.0;
	if (!getparfloat("t1", &t1))	t1 = 2.0;
	if (!getparfloat("t2", &t2))	t2 = 2.0;
d98 2
a99 2
		t1 = 2.0;
		t2 = 2.0;
d102 25
a126 1
	
d132 1
a132 1
	tr.styp = 1; /* linear sweep id code */
d134 76
d211 4
a214 7
	ak = (f2 - f1)/tv;
	mt1 = t1/dt + 1;
	mt2 = t2/dt + 1;
	mt3 = nt - mt2;
	
	if (f1 < f2) warn("%f, seconds, %f-%f Hz Up-Sweep\n", tv, f1, f2);
	else         warn("%f, seconds, %f-%f Hz Down-Sweep\n", tv, f1, f2);
d216 145
a360 17
	/* Tapering function (cosine bells) */
	{ register int it;
	  
	  for (it = 0; it < nt; ++it) {
	  	float am1, am2;
		float wt, tvb;
		
		am1 = 0.0;
		am2 = 0.0;
		if (mt1 > 0) am1 = (float) (mt1 - it) / (float) (mt1+1);
		if (mt2 > 0) am2 = (float) (it - mt3) / (float) mt2;
	
		if (it < mt1)
			wt = (1.0 + cos(PI*am1))/2.0;
		else if (it > mt3)
			wt = (1.0 + cos(PI*am2))/2.0;
		else wt = 1.0;
d362 14
a375 4
		
		/* Vibroseis signal */
		tvb = it*dt;
		tr.data[it] = wt * sin(TWOPI*(f1 + ak*tvb/2.0)*tvb);
d377 12
a388 1
	  }
d390 11
a401 4
	puttr(&tr);
	
	return EXIT_SUCCESS;
}
@


1.5
log
@new selfdoc installed
@
text
@d1 1
a1 1
/* SUVIBRO: $Revision: 1.4 $ ; $Date: 91/10/24 11:59:09 $	*/
a2 14
/*----------------------------------------------------------------------
 * Copyright (c) Colorado School of Mines, 1990.
 * All rights reserved.
 *
 * This code is part of SU.  SU stands for Seismic Unix, a processing line
 * developed at the Colorado School of Mines, partially based on Stanford
 * Exploration Project (SEP) software.  Inquiries should be addressed to:
 *
 *  Jack K. Cohen, Center for Wave Phenomena, Colorado School of Mines,
 *  Golden, CO 80401  (jkc@@dix.mines.colorado.edu)
 *----------------------------------------------------------------------
 */


d11 1
a11 1
" SUVIBRO - Generates a Vibroseis sweep (linear FM sweep)		",
d13 1
a13 1
" suvibro [optional parameters] > out_data_file  			",
d23 2
a24 2
" Note: The default tapers are cosine envelopes.  To eliminate the",
"      taper, choose t1=t2=0.0.					",
a25 1
/**************** end self doc ***********************************/
d30 1
@


1.4
log
@added a test to avoid the overlap of the tapers at both ends
replaced cos by sin in the definition of the vibroseis signal
@
text
@d1 1
a1 1
/* SUVIBRO: $Revision: 1.3 $ ; $Date: 91/10/23 13:56:06 $	*/
a21 1

d23 17
a39 17
String sdoc = "\
SUVIBRO - Generates a Vibroseis sweep (linear FM sweep)		\n\
								\n\
suvibro [optional parameters] > out_data_file  			\n\
								\n\
Optional Parameters:						\n\
	f1=10.0		sweep frequency at start		\n\
	f2=60.0		sweep frequency at end			\n\
	tv=14.0		sweep length				\n\
	t1=2.0		length of taper at start (see note)	\n\
	t2=2.0		length of taper at end (see note)	\n\
	dt=0.004	sampling interval			\n\
								\n\
Note: The default tapers are cosine envelopes.  To eliminate the\n\
      taper, choose t1=t2=0.0.					\n\
                                                                \n\
";
d62 1
a62 1
	askdoc(0);
@


1.3
log
@Tweaked comments
@
text
@d1 1
a1 1
/* SUVIBRO: $Revision: 1.2 $ ; $Date: 91/10/23 13:53:50 $	*/
a60 1

d76 7
d103 1
a103 2
		float am1 = (mt1) ? ((float)(mt1 - it))/((float) (mt1+1)):0.0;
		float am2 = (mt2) ? ((float)(it - mt3))/((float) mt2) : 0.0;
d106 5
d120 1
a120 1
		tr.data[it] = wt * cos(TWOPI*(f1 + ak*tvb/2.0)*tvb);
@


1.2
log
@Started defining variables.
@
text
@d1 1
a1 1
/* SUVIBRO: $Revision: 1.1 $ ; $Date: 91/10/23 13:51:40 $	*/
d52 1
a52 2
	float f1;	/* starting frequency	*/
	float f2;	/* ending frequency	*/
d54 1
a54 2
	float t1;
	float t2;
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/* SUVIBRO: $Revision: 1.5 $ ; $Date: 91/09/05 08:51:33 $	*/
d52 2
a53 2
	float f1;
	float f2;
@
