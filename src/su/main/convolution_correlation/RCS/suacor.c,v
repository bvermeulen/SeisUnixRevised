head	1.16;
access;
symbols;
locks; strict;
comment	@ * @;


1.16
date	2015.10.14.15.38.38;	author john;	state Exp;
branches;
next	1.15;

1.15
date	2011.11.16.17.37.27;	author john;	state Exp;
branches;
next	1.14;

1.14
date	2011.11.12.00.00.03;	author john;	state Exp;
branches;
next	1.13;

1.13
date	2003.06.09.16.17.07;	author john;	state Exp;
branches;
next	1.12;

1.12
date	96.09.04.19.21.20;	author jkc;	state Exp;
branches;
next	1.11;

1.11
date	96.01.25.19.43.00;	author jkc;	state Exp;
branches;
next	1.10;

1.10
date	96.01.23.22.12.49;	author jkc;	state Exp;
branches;
next	1.9;

1.9
date	95.02.15.09.48.07;	author john;	state Exp;
branches;
next	1.8;

1.8
date	94.08.25.14.58.36;	author jkc;	state Exp;
branches;
next	1.7;

1.7
date	94.07.15.14.05.36;	author john;	state Exp;
branches;
next	1.6;

1.6
date	93.11.24.10.53.21;	author john;	state Exp;
branches;
next	1.5;

1.5
date	92.10.23.15.39.59;	author john;	state Exp;
branches;
next	1.4;

1.4
date	91.10.25.14.54.56;	author mdietric;	state Exp;
branches;
next	1.3;

1.3
date	91.09.05.08.49.21;	author jkcohen;	state Exp;
branches;
next	1.2;

1.2
date	90.11.15.10.43.04;	author jkc;	state Exp;
branches;
next	1.1;

1.1
date	90.11.06.10.25.04;	author dhale;	state Exp;
branches;
next	;


desc
@computes auto-correlations
@


1.16
log
@sym now gives the correct centered output time scale for sym=1 option
@
text
@/* Copyright (c) Colorado School of Mines, 2011.*/
/* All rights reserved.                       */

/* SUACOR: $Revision: 1.15 $ ; $Date: 2011/11/16 17:37:27 $		*/

#include "su.h"
#include "segy.h"
#include "header.h"

/*********************** self documentation ******************************/
char *sdoc[] = {
"									",
" SUACOR - auto-correlation						",
"									",
" suacor <stdin >stdout [optional parms]				",
"									",
" Optional Parameters:							",
" ntout=101	odd number of time samples output			",
" norm=1	if non-zero, normalize maximum absolute output to 1	",
" sym=1		if non-zero, produce a symmetric output from		",
"			lag -(ntout-1)/2 to lag +(ntout-1)/2		",
NULL};

/* Credits:
 *	CWP: Dave Hale
 *
 * Trace header fields accessed:  ns
 * Trace header fields modified:  ns and delrt
 */
/**************** end self doc *******************************************/

segy tr;

int
main(int argc, char **argv)
{
	int nt;				/* number of samples on input */
	int ntout;			/* number of samples on output */
	int it;				/* counter */
	int istart;			/* beginning sample */
	int izero;			/* - istart */
	int norm;			/* user defined normalization value */
	int sym;			/* symmetric plot? */
	float scale;			/* scale factor computed from norm */
	float *temp=NULL;		/* temporary array */
	float dt;			/* time sampling interval (sec) */

	/* hook up getpar */
	initargs(argc, argv);
	requestdoc(1);

	/* get information from the first header */
	if (!gettr(&tr)) err("can't get first trace");
	nt = tr.ns;
	dt = tr.dt/1000000.0;

	/* get parameters */
	if (!getparint("ntout",&ntout)) ntout=101;
	if (!getparint("norm",&norm)) norm = 1;
	if (!getparint("sym",&sym)) sym = 1;
        checkpars();
	
	/* allocate workspace */
	temp = ealloc1float(ntout);
	
	/* index of first sample */
	if (sym == 0) istart = 0;
	else istart = -(ntout-1)/2;

	/* index of sample at time zero */
	izero = -istart;
	
	/* loop over traces */
	do {
		xcor(nt,0,tr.data,nt,0,tr.data,ntout,istart,temp);
		if (norm) {
			scale = 1.0/(temp[izero]==0.0?1.0:temp[izero]);
			for (it=0; it<ntout; ++it)  temp[it] *= scale;
		}
		memcpy((void *) tr.data, (const void *) temp, ntout*FSIZE);
		tr.ns = ntout;
		tr.f1 = -dt*ntout/2.0;
		tr.delrt = 0;
		puttr(&tr);
	} while(gettr(&tr));

	return(CWP_Exit());
}
@


1.15
log
@added Reg Beardsley's checkpar() call
@
text
@d4 1
a4 1
/* SUACOR: $Revision: 1.13 $ ; $Date: 2003/06/09 16:17:07 $		*/
d37 10
a46 2
	int nt,ntout,it,istart,izero,norm,sym;
	float scale,*temp;
d55 1
d82 1
@


1.14
log
@copyright
@
text
@d52 1
@


1.13
log
@9 June 2003
@
text
@d1 4
a4 1
/* SUACOR: $Revision: 1.12 $ ; $Date: 1996/09/04 19:21:20 $		*/
@


1.12
log
@Fixed -Wall complaint.
@
text
@d1 1
a1 1
/* SUACOR: $Revision: 1.11 $ ; $Date: 1996/01/25 19:43:00 $		*/
d73 1
a73 1
	return EXIT_SUCCESS;
@


1.11
log
@Cosmetic.
@
text
@d1 1
a1 1
/* SUACOR: $Revision: 1.10 $ ; $Date: 1996/01/23 22:12:49 $		*/
d31 1
@


1.10
log
@Moved traces accessed, etc. down to sudoc.
@
text
@d1 1
a1 1
/* SUACOR: $Revision: 1.9 $ ; $Date: 1995/02/15 09:48:07 $		*/
d64 1
a64 1
			for (it=0; it<ntout; it++)  temp[it] *= scale;
@


1.9
log
@implemented Craig Artley's bug fix in suacor.c
@
text
@d1 1
a1 1
/* SUACOR: $Revision: 1.8 $ ; $Date: 94/08/25 14:58:36 $		*/
d15 4
a18 9
" ntout=101               odd number of time samples output		",
" norm=1                  if non-zero, normalize maximum absolute output to 1",
" sym=1			if non-zero, produce a symmetric output from	",
"                        	lag -(ntout-1)/2 to lag +(ntout-1)/2	",
"									",
" Notes:								",
" Trace header fields accessed:  ns					",
" Trace header fields modified:  ns and delrt				",
"									",
d23 3
d64 1
a64 2
			for (it=0; it<ntout; it++)
				temp[it] *= scale;
d66 1
a66 2
		memcpy((void *) tr.data, (const void *) temp,
				ntout*sizeof(float));
@


1.8
log
@Removed copyright statement from codes that had it.
Moved self-doc line for sudoc.
@
text
@d1 1
a1 1
/* SUACOR: $Revision: 1.7 $ ; $Date: 94/07/15 14:05:36 $		*/
d35 1
a35 1
	int nt,ntout,it,istart,norm,sym;
d54 1
a54 1
	/* loop over traces */
d57 3
d61 1
d65 1
a65 1
			scale = 1.0/(temp[0]==0.0?1.0:temp[0]);
@


1.7
log
@cosmetic
@
text
@d1 1
a1 1
/* SUACOR: $Revision: 1.6 $ ; $Date: 93/11/24 10:53:21 $		*/
@


1.6
log
@used explicit casts in memcpy
@
text
@d1 1
a1 1
/* SUACOR: $Revision: 1.5 $ ; $Date: 92/10/23 15:39:59 $		*/
a2 13
/*----------------------------------------------------------------------
 * Copyright (c) Colorado School of Mines, 1990.
 * All rights reserved.
 *
 * This code is part of SU.  SU stands for Seismic Unix, a processing line
 * developed at the Colorado School of Mines, partially based on Stanford
 * Exploration Project (SEP) software.  Inquiries should be addressed to:
 *
 *  Jack K. Cohen, Center for Wave Phenomena, Colorado School of Mines,
 *  Golden, CO 80401  (jkc@@dix.mines.colorado.edu)
 *----------------------------------------------------------------------
 */

d23 1
a24 1
/**************** end self doc *******************************************/
d29 1
@


1.5
log
@new selfdoc installed
@
text
@d1 1
a1 1
/* SUACOR: $Revision: 1.4 $ ; $Date: 91/10/25 14:54:56 $		*/
d77 2
a78 1
		memcpy(tr.data, temp, ntout*sizeof(float));
@


1.4
log
@A flag has been added to produce a symmetric output
@
text
@d1 1
a1 1
/* SUACOR: $Revision: 1.3 $ ; $Date: 91/09/05 08:49:21 $		*/
d21 16
a36 16
String sdoc =
"\n"
"SUACOR - auto-correlation\n"
"\n"
"suacor <stdin >stdout [optional parms]\n"
"\n"
"Optional Parameters:\n"
"ntout=101               odd number of time samples output\n"
"norm=1                  if non-zero, normalize maximum absolute output to 1\n"
"sym=1			if non-zero, produce a symmetric output from\n"
"                        	lag -(ntout-1)/2 to lag +(ntout-1)/2\n"
"\n"
"Notes:\n"
"Trace header fields accessed:  ns\n"
"Trace header fields modified:  ns and delrt\n"
"\n";
d40 1
a40 1
 *	CWP: Dave
d52 1
a52 1
	askdoc(1);
@


1.3
log
@string -> String and so forth
@
text
@d1 1
a1 1
/* SUACOR: $Revision: 1.2 $ ; $Date: 90/11/15 10:43:04 $		*/
d28 1
a28 1
"ntout=101               number of time samples output\n"
d30 2
a33 2
"The auto-correlation is computed for lags 0, 1, ..., ntout-1.\n"
"\n"
d47 1
a47 1
	int nt,ntout,it,norm;
d61 1
d67 3
d71 1
a71 1
		xcor(nt,0,tr.data,nt,0,tr.data,ntout,0,temp);
@


1.2
log
@bcopy -> memcpy
@
text
@d1 1
a1 1
/* SUACOR: $Revision: 1.1 $ ; $Date: 90/11/06 10:25:04 $		*/
d21 1
a21 1
string sdoc =
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/* SUACOR: $Revision: 1.6 $ ; $Date: 90/06/14 14:38:34 $		*/
d73 1
a73 1
		bcopy(temp,tr.data,ntout*sizeof(float));
@
