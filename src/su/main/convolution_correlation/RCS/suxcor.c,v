head	1.19;
access;
symbols;
locks; strict;
comment	@ * @;


1.19
date	2011.11.16.17.37.27;	author john;	state Exp;
branches;
next	1.18;

1.18
date	2011.11.12.00.00.03;	author john;	state Exp;
branches;
next	1.17;

1.17
date	2003.06.09.16.17.07;	author john;	state Exp;
branches;
next	1.16;

1.16
date	2001.06.22.15.54.45;	author john;	state Exp;
branches;
next	1.15;

1.15
date	97.07.28.22.36.46;	author john;	state Exp;
branches;
next	1.14;

1.14
date	96.09.13.21.49.05;	author john;	state Exp;
branches;
next	1.13;

1.13
date	96.07.31.16.00.13;	author jkc;	state Exp;
branches;
next	1.12;

1.12
date	96.02.07.16.29.42;	author jkc;	state Exp;
branches;
next	1.11;

1.11
date	96.01.12.20.42.16;	author jkc;	state Exp;
branches;
next	1.10;

1.10
date	95.06.29.10.32.08;	author john;	state Exp;
branches;
next	1.9;

1.9
date	95.06.29.09.58.22;	author john;	state Exp;
branches;
next	1.8;

1.8
date	94.12.15.10.36.06;	author john;	state Exp;
branches;
next	1.7;

1.7
date	94.11.18.11.39.28;	author john;	state Exp;
branches;
next	1.6;

1.6
date	94.08.25.15.01.46;	author jkc;	state Exp;
branches;
next	1.5;

1.5
date	93.11.29.14.48.51;	author john;	state Exp;
branches;
next	1.4;

1.4
date	93.08.09.15.20.14;	author john;	state Exp;
branches;
next	1.3;

1.3
date	92.10.26.14.15.06;	author john;	state Exp;
branches;
next	1.2;

1.2
date	91.09.05.08.52.34;	author jkcohen;	state Exp;
branches;
next	1.1;

1.1
date	91.07.02.15.37.32;	author jkcohen;	state Exp;
branches;
next	;


desc
@Correlation driver
@


1.19
log
@added Reg Beardsley's checkpar() call
@
text
@/* Copyright (c) Colorado School of Mines, 2011.*/
/* All rights reserved.                       */

/* SUXCOR: $Revision: 1.17 $ ; $Date: 2003/06/09 16:17:07 $		*/

#include "su.h"
#include "segy.h"
#include "header.h"

/*********************** self documentation ******************************/
char *sdoc[] = {
" 									",
" SUXCOR - correlation with user-supplied filter			",
" 									",
" suxcor <stdin >stdout  filter= [optional parameters]			",
" 									",
" Required parameters: ONE of						",
" sufile=		file containing SU traces to use as filter	",
" filter=		user-supplied correlation filter (ascii)	",
" 									",
" Optional parameters:							",
" vibroseis=0		=nsout for correlating vibroseis data		",
" first=1		supplied trace is default first element of	",
" 			correlation.  =0 for it to be second.		",
" panel=0		use only the first trace of sufile as filter 	",
" 			=1 xcor trace by trace an entire gather		",
" ftwin=0		first sample on the first trace of the window 	",
" 				(only with panel=1)		 	",
" ltwin=0		first sample on the last trace of the window 	",
" 				(only with panel=1)		 	",
" ntwin=nt		number of samples in the correlation window	",
" 				(only with panel=1)		 	",
" ntrc=48		number of traces on a gather 			",
" 				(only with panel=1)		 	",
" 									",
" Trace header fields accessed: ns					",
" Trace header fields modified: ns					",
" 									",
" Notes: It is quietly assumed that the time sampling interval on the	",
" single trace and the output traces is the same as that on the traces	",
" in the input file.  The sufile may actually have more than one trace,	",
" but only the first trace is used when panel=0. When panel=1 the number",
" of traces in the sufile MUST be the same as the number of traces in 	",
" the input.								",
" 									",
" Examples:								",
"	suplane | suwind min=12 max=12 >TRACE				",
"	suxcor<DATA sufile=TRACE |...					",
" Here, the su data file, \"DATA\", is correlated trace by trace with the",
" the single su trace, \"TRACE\".					",
" 									",
"	suxcor<DATA filter=1,2,1 | ...					",
" Here, the su data file, \"DATA\", is correlated trace by trace with the",
" the filter shown.							",
" 									",
" Correlating vibroseis data with a vibroseis sweep:			",
" suxcor < data sufile=sweep vibroseis=nsout  |...			",
" 									",
" is equivalent to, but more efficient than:				",
" 									",
" suxcor < data sufile=sweep |						",
" suwind itmin=nsweep itmax=nsweep+nsout | sushw key=delrt a=0.0 |...   ",
" 									",
" sweep=vibroseis sweep in SU format, nsweep=number of samples on	",
" the vibroseis sweep, nsout=desired number of samples on output	",
" 									",
" or									",
" suxcor < data sufile=sweep |						",
" suwind itmin=nsweep itmax=nsweep+nsout | sushw key=delrt a=0.0 |...   ",
" 									",
" tsweep=sweep length in seconds, tout=desired output trace length in seconds",
" 									",
" In the spatially variant case (panel=1), a window with linear slope 	",
" can be defined:						 	",
" 	ftwin is the first sample of the first trace in the gather,  	",
" 	ltwin is the first sample of the last trace in the gather,	",
" 	ntwin is the lengthe of the window, 				",
" 	ntrc is the the number of traces in a gather. 			",
" 									",
" 	If the data consists of a number gathers which need to be 	",
"	correlated with the same number gathers in the sufile, ntrc	",
"	assures that the correlating window re-starts for each gather.	",
" 									",
"	The default window is non-sloping and takes the entire trace	",
"	into account (ftwin=ltwin=0, ntwin=nt).				",
" 									",
NULL};

/* Credits:
 *	CWP: Jack K. Cohen, Michel Dietrich
 *      CWP: modified by Ttjan to include cross correlation of panels
 *	   permitting spatially and temporally varying cross correlation.
 *      UTK: modified by Rick Williams for vibroseis correlation option.
 *
 *  CAVEATS: 
 *     In the option, panel=1 the number of traces in the sufile must be 
 *     the same as the number of traces on the input.
 *
 * Trace header fields accessed: ns
 * Trace header fields modified: ns
 */
/**************** end self doc *******************************************/

segy intrace, outtrace, sutrace;

int
main(int argc, char **argv)
{
	int nt;			/* number of points on input traces	*/
	int it,it2;		/* counter 				*/
	int ntout;		/* number of points on output traces	*/
	float *filter=NULL;	/* filter coefficients			*/
	float *trace;		/* trace coefficients			*/
	int nfilter=0;		/* length of input wavelet in samples	*/
	int ftwin;	      /* first sample in first windowed trace */
	int ltwin;	      /* first sample in last windowed trace */
	int ntwin;	      /* number of points on windowed input traces*/
	int dtwin=0;	      /* sample trace step for the gather	*/
	int ntrc;	      	/* number of traces on gather 		*/
	int fs;	      	/* first sample for cross-correlation 	*/
	int tracl;	     	/* trace number 			*/
	int tracr;	     	/* trace number in gather 	 	*/
	cwp_String sufile;	/* name of file containing one SU trace */
	FILE *fp=NULL;		/* ... its file pointer			*/
	int vibroseis;		/* vibroseis correlation flag		*/
	int first;		/* correlation order flag		*/
	int panel;		/* xcor with trace or panel 		*/


	/* Initialize */
	initargs(argc, argv);
	requestdoc(1);


	/* Get info from first trace */ 
	if (!gettr(&intrace)) err("can't get first trace");
	nt = intrace.ns;


	/* Get parameters and set up filter array */
	if (!getparint("vibroseis", &vibroseis))  vibroseis = 0;
	if (!getparint("first", &first))  first = 1;
	if (!getparint("panel", &panel))  panel = 0;
	if (!getparint("ntwin",&ntwin)) ntwin=nt;
	if (!getparint("ftwin",&ftwin)) ftwin=0;
	if (!getparint("ltwin",&ltwin)) ltwin=0;
	if (!getparint("ntrc",&ntrc)) ntrc=48;
	if (!getparstring("sufile", &sufile)) {
		if (!(nfilter = countparval("filter")))
			err("must specify filter= desired filter");
		filter = ealloc1float(nfilter);	getparfloat("filter", filter);
	} else {
		fp = efopen(sufile, "r");
		if (panel == 0){
			fgettr(fp, &sutrace);
			nfilter = sutrace.ns;
			filter = ealloc1float(nfilter);
			memcpy(( void *) filter,
				(const void *) sutrace.data, nfilter*FSIZE);
		}
	}

        checkpars();

	/* Set window and output-trace length */
	if (panel == 1) {
		nfilter = ntwin;
		nt = ntwin;
		dtwin = (ltwin - ftwin)/ntrc;
		filter = ealloc1float(nfilter);
	} else ntwin = nt;

	/* allocate space */
	trace = ealloc1float(nt);

	if (vibroseis <= 0) {
		ntout = nt + nfilter - 1;
	} else {
		ntout=vibroseis;
	}


	/* Main loop over traces */
	tracl = 1;
	if (first) {
		do {
			if (panel == 1){
				if ((!fgettr(fp, &sutrace))) 
					err("number of traces in sufile are not the same as the number of traces on the input");
				if ((tracr = (tracl % ntrc)) == 0) tracr=ntrc;
				fs = ftwin + tracr * dtwin;
				for (it=0; it<ntwin; it++) {
				      it2 = it + fs;
				      trace[it] = intrace.data[it2];
				      filter[it] = sutrace.data[it2];
	  			}

			} else {
				memcpy((void *) trace,
					(const void *) intrace.data, nt*FSIZE);
			}

			if (vibroseis <= 0) {
				xcor(nfilter, 0, filter,
				     nt, 0, trace, 
	       		      	     ntout, -nfilter + 1, outtrace.data);       
			} else {
				xcor(nfilter, 0, filter,
				     nt, 0, trace, 
	       		      	     ntout, 0, outtrace.data);       
			}
			
			memcpy((void *) &outtrace,
					(const void *) &intrace, HDRBYTES);

			if (vibroseis > 0) {
				outtrace.delrt = 0;
			}

			outtrace.ns = ntout; 
			puttr(&outtrace);
			tracl++;

		} while (gettr(&intrace));
	} else {
		do {
			if (panel == 1){
				if ((!fgettr(fp, &sutrace))) 
					err("number of traces in sufile are not the same as the number of traces on the input");
				if ((tracr = (tracl % ntrc)) == 0) tracr=ntrc;
				fs = ftwin + tracr * dtwin;
				for (it=0; it<ntwin; it++) {
				      it2 = it + fs;
				      trace[it] = intrace.data[it2];
				      filter[it] = sutrace.data[it2];
	  			}

			} else {
				memcpy((void *) trace,
					(const void *) intrace.data, nt*FSIZE);
			}

			if (vibroseis <= 0) {
				xcor(nt, 0, trace, 
				     nfilter, 0, filter,
		   	  	     ntout, -nt + 1, outtrace.data);	
			} else {
				xcor(nt, 0, trace,
				     nfilter, 0, filter, 
	       		      	     ntout, 0, outtrace.data);       
			}

			memcpy((void *) &outtrace,
					(const void *) &intrace, HDRBYTES);

			if (vibroseis > 0) {
				outtrace.delrt = 0;
			}

			outtrace.ns = ntout; 
			puttr(&outtrace);
			tracl++;

		} while (gettr(&intrace));
	}


	return(CWP_Exit());
}
@


1.18
log
@copyright
@
text
@d163 1
@


1.17
log
@9 June 2003
@
text
@d1 4
a4 1
/* SUXCOR: $Revision: 1.16 $ ; $Date: 2001/06/22 15:54:45 $		*/
@


1.16
log
@small bug fixed
@
text
@d1 1
a1 1
/* SUXCOR: $Revision: 1.15 $ ; $Date: 1997/07/28 22:36:46 $		*/
d264 1
a264 1
	return EXIT_SUCCESS;
@


1.15
log
@changes suggested by Stew Levin to silence SGI compiler warnings, etc
@
text
@d1 1
a1 1
/* SUXCOR: $Revision: 1.14 $ ; $Date: 1996/09/13 21:49:05 $		*/
d19 1
d54 4
d89 2
a90 1
 *           permitting spatially and temporally varying cross correlation.
d112 8
a119 8
        int ftwin;              /* first sample in first windowed trace */
        int ltwin;              /* first sample in last windowed trace */
        int ntwin;              /* number of points on windowed input traces*/
        int dtwin=0;              /* sample trace step for the gather	*/
        int ntrc;              	/* number of traces on gather 		*/
        int fs;              	/* first sample for cross-correlation 	*/
        int tracl;             	/* trace number 			*/
        int tracr;             	/* trace number in gather 	 	*/
d122 1
d138 1
d141 3
a143 3
        if (!getparint("ntwin",&ntwin)) ntwin=nt;
        if (!getparint("ftwin",&ftwin)) ftwin=0;
        if (!getparint("ltwin",&ltwin)) ltwin=0;
d172 5
a176 1
	ntout = nt + nfilter - 1;
d186 7
a192 7
			        if ((tracr = (tracl % ntrc)) == 0) tracr=ntrc;
			        fs = ftwin + tracr * dtwin;
			        for (it=0; it<ntwin; it++) {
			              it2 = it + fs;
			              trace[it] = intrace.data[it2];
			              filter[it] = sutrace.data[it2];
          			}
a197 3
			xcor(nfilter, 0, filter,
			     nt, 0,trace, 
                     	     ntout, -nfilter + 1, outtrace.data);        
d199 10
d211 5
d226 7
a232 7
			        if ((tracr = (tracl % ntrc)) == 0) tracr=ntrc;
			        fs = ftwin + tracr * dtwin;
			        for (it=0; it<ntwin; it++) {
			              it2 = it + fs;
			              trace[it] = intrace.data[it2];
			              filter[it] = sutrace.data[it2];
          			}
d238 10
a247 3
			xcor(nt, 0, trace, 
			     nfilter, 0, filter,
                     	     ntout, -nt + 1, outtrace.data);        
d251 5
@


1.14
log
@silenced -Wall messages
@
text
@d1 1
a1 1
/* SUXCOR: $Revision: 1.13 $ ; $Date: 1996/07/31 16:00:13 $		*/
a111 1
        int ft;              	/* first sample on output trace 	*/
a156 1
		ft = (1 - ntwin);
@


1.13
log
@ntrc wasn't getparred!   (Toralf)
@
text
@d1 1
a1 1
/* SUXCOR: $Revision: 1.12 $ ; $Date: 1996/02/07 16:29:42 $		*/
d97 1
d103 1
a103 1
	float *filter;		/* filter coefficients			*/
d105 1
a105 1
	int nfilter;		/* length of input wavelet in samples	*/
d109 1
a109 1
        int dtwin;              /* sample trace step for the gather	*/
d116 1
a116 1
	FILE *fp;		/* ... its file pointer			*/
@


1.12
log
@Deal with header fields accessed/modified down to sudoc.
@
text
@d1 1
a1 1
/* SUXCOR: $Revision: 1.11 $ ; $Date: 1996/01/12 20:42:16 $		*/
d136 1
@


1.11
log
@Per Stew's support of multiple file streams in fgettr/fputtr, removed
the calls to vgettr/vputtr.
@
text
@d1 1
a1 1
/* SUXCOR: $Revision: 1.10 $ ; $Date: 1995/06/29 10:32:08 $		*/
d89 3
@


1.10
log
@updated Credits, added a comment or two
@
text
@d1 1
a1 1
/* SUXCOR: $Revision: 1.9 $ ; $Date: 95/06/29 09:58:22 $		*/
d123 1
a123 1
	if (!vgettr(&intrace)) err("can't get first trace");
d140 1
a140 1
			fvgettr(fp, &sutrace);
d169 1
a169 1
				if ((!fvgettr(fp, &sutrace))) 
d193 1
a193 1
		} while (vgettr(&intrace));
d197 1
a197 1
				if ((!fvgettr(fp, &sutrace))) 
d221 1
a221 1
		} while (vgettr(&intrace));
@


1.9
log
@Timo Tjan added spatial and temporal variability of cross correlation
@
text
@d1 1
a1 1
/* SUXCOR: $Revision: 1.8 $ ; $Date: 94/12/15 10:36:06 $		*/
d83 2
d158 1
d160 1
@


1.8
log
@additional comments added in selfdoc
@
text
@d1 1
a1 1
/* SUXCOR: $Revision: 1.7 $ ; $Date: 94/11/18 11:39:28 $		*/
d15 1
a15 1
" sufile=		file containing SU trace to use as filter	",
d21 10
d38 3
a40 1
" but only the first trace is used.					",
d65 14
d84 3
a86 3
 *  CAVEATS: no space-variable or time-variable capacity.
 *     The more than one trace allowed in sufile is the
 *     beginning of a hook to handle the spatially variant case.
d95 1
d98 1
d100 9
d112 1
d127 4
d137 5
a141 4
		fvgettr(fp, &sutrace);
		nfilter = sutrace.ns;
		filter = ealloc1float(nfilter);
		memcpy(( void *) filter,
d143 1
d145 12
a156 2
	
	/* Set output trace length */
d161 1
d164 15
d180 1
a180 1
			     nt, 0, intrace.data, 
d187 1
d192 16
a207 1
			xcor(nt, 0, intrace.data, 
d215 1
@


1.7
log
@made is so that the sufilter=  input may have a 
different number of samples than the data being operated on
@
text
@d1 1
a1 1
/* SUXCOR: $Revision: 1.6 $ ; $Date: 94/08/25 15:01:46 $		*/
a20 1
" ntout=ns+nfilter-1	number of time samples on output traces		",
d32 1
a32 1
"	suxcor<DATA sufile=TRACE | ...					",
d40 13
a63 3
/* Prototype for subroutine used internally */
static int fvgettr(FILE *fp, segy *tp);

d83 1
a83 1
	if (!fvgettr(stdin,&intrace)) err("can't get first trace");
d103 1
a103 1
	if (!getparint("ntout", &ntout)) 	ntout = nt + nfilter - 1;
d118 1
a118 1
		} while (fvgettr(stdin,&intrace));
d130 1
a130 1
		} while (fvgettr(stdin,&intrace));
a134 78
}

#include "header.h"

static int fvgettr(FILE *fp, segy *tp)
/************************************************************************* 
  fvgettr - get a segy trace from a file by file pointer (nt can vary)
************************************************************************** 
Input:
fp	input file pointer

Output:
tp	pointer to a type segy

Returns:
	int: number of bytes read on current trace (0 after last trace)

************************************************************************** 
Notes:
int fvgettr(FILE *fp, segy *tp)

Cloned from .../su/lib/fgettr.c
************************************************************************** 
Credits: CWP: Jack K. Cohen, Michel Dietrich 
**************************************************************************/
{
	static unsigned long itr = 0;	/* number of traces read	*/
	static cwp_Bool first = true;	/* to check if first entry	*/
	static FileType ftype;		/* file type of input *fp	*/
	static unsigned short bytesper;	/* bytes per datum (packed?)	*/
	int databytes;			/* data bytes on current segy	*/
	int nt;				/* samples on trace (can vary)	*/
	int nsegy; 			/* total bytes on current segy	*/
	int nread;			/* bytes seen by fread calls	*/


	if (first) {
		first = false;

		switch (ftype = filestat(fileno(fp))) {
		case DIRECTORY:
			err("%s: stdin can't be a directory", __FILE__);
		case TTY:
			err("%s: stdin can't be tty", __FILE__);
		default:
			if      (tp->trid==CHARPACK)   bytesper=sizeof(char);
			else if (tp->trid==SHORTPACK)  bytesper=sizeof(short);
			else			       bytesper=sizeof(float);
		}
	}

	/* Get the header */
	switch (nread = efread(tp, 1, HDRBYTES, fp)) {
	case 0:   return 0; /* no more traces */
	default:  if (nread != HDRBYTES)
			err("%s: bad header, trace #%ld", __FILE__, itr);
	break;
	}

	/* Have the header, now for the data */
	nt = tp->ns;
	if (nt > SU_NFLTS)
		err("%s: unable to handle %d > %d "
			"samples per trace", __FILE__, nt, SU_NFLTS);

	databytes = bytesper * nt;
	nsegy = HDRBYTES + databytes;

	switch (nread = efread(tp->data, 1, databytes, fp)) {
	case 0:   err("%s: no data on trace #%ld, itr", __FILE__);
	default:  if (nread != databytes)
			 err("%s: trace #%ld, read only %d bytes of %u",
				__FILE__, itr, nread, databytes);
	break;
	}

	++itr;
	return nsegy;
@


1.6
log
@Removed copyright statement from codes that had it.
Moved self-doc line for sudoc.
@
text
@d1 1
a1 1
/* SUXCOR: $Revision: 1.5 $ ; $Date: 93/11/29 14:48:51 $		*/
d15 2
a16 2
"	sufile=         file containing SU trace to use as filter	",
"	filter= 	user-supplied correlation filter (ascii)	",
d19 1
a19 1
"	first=1		supplied trace is default first element of	",
d21 1
d52 2
d74 1
a74 1
	if (!gettr(&intrace)) err("can't get first trace");
d86 1
a86 1
		fgettr(fp, &sutrace);
a92 1
	
d94 1
a94 1
	ntout = nt + nfilter - 1;
d109 1
a109 1
		} while (gettr(&intrace));
d121 1
a121 1
		} while (gettr(&intrace));
d126 78
@


1.5
log
@added explicit casts to memcpy
@
text
@d1 1
a1 1
/* SUXCOR: $Revision: 1.4 $ ; $Date: 93/08/09 15:20:14 $		*/
a2 13
/*----------------------------------------------------------------------
 * Copyright (c) Colorado School of Mines, 1990.
 * All rights reserved.
 *
 * This code is part of SU.  SU stands for Seismic Unix, a processing line
 * developed at the Colorado School of Mines, partially based on Stanford
 * Exploration Project (SEP) software.  Inquiries should be addressed to:
 *
 *  Jack K. Cohen, Center for Wave Phenomena, Colorado School of Mines,
 *  Golden, CO 80401  (jkc@@dix.mines.colorado.edu)
 *----------------------------------------------------------------------
 */

a40 1
/**************** end self doc *******************************************/
d49 1
d60 1
a60 1
	cwp_String sufile;		/* name of file containing one SU trace */
@


1.4
log
@changed String to cwp_String
@
text
@d1 1
a1 1
/* SUXCOR: $Revision: 1.3 $ ; $Date: 92/10/26 14:15:06 $		*/
d99 2
a100 1
		memcpy(filter, sutrace.data, nfilter*FSIZE);
d115 2
a116 2

			memcpy(&outtrace, &intrace, HDRBYTES);
d127 2
a128 1
			memcpy(&outtrace, &intrace, HDRBYTES);
@


1.3
log
@new selfdoc installed
@
text
@d1 1
a1 1
/* SUXCOR: $Revision: 1.2 $ ; $Date: 91/09/05 08:52:34 $		*/
d73 1
a73 1
	String sufile;		/* name of file containing one SU trace */
@


1.2
log
@string -> String and so forth
@
text
@d1 1
a1 1
/* SUXCOR: $Revision: 1.4 $ ; $Date: 91/07/01 18:59:06 $		*/
d21 33
a53 33
String sdoc =
" 									\n"
" SUXCOR - correlation with user-supplied filter			\n"
" 									\n"
" suxcor <stdin >stdout  filter= [optional parameters]			\n"
" 									\n"
" Required parameters: ONE of						\n"
"	sufile=         file containing SU trace to use as filter	\n"
"	filter= 	user-supplied correlation filter (ascii)	\n"
" 									\n"
" Optional parameters:							\n"
"	first=1		supplied trace is default first element of	\n"
" 			correlation.  =0 for it to be second.		\n"
" 									\n"
" Trace header fields accessed: ns					\n"
" Trace header fields modified: ns					\n"
" 									\n"
" Notes: It is quietly assumed that the time sampling interval on the	\n"
" single trace and the output traces is the same as that on the traces	\n"
" in the input file.  The sufile may actually have more than one trace,	\n"
" but only the first trace is used.					\n"
" 									\n"
" Examples:								\n"
"	suplane | suwind min=12 max=12 >TRACE				\n"
"	suxcor<DATA sufile=TRACE | ...					\n"
" Here, the su data file, \"DATA\", is correlated trace by trace with the\n"
" the single su trace, \"TRACE\".					\n"
" 									\n"
"	suxcor<DATA filter=1,2,1 | ...					\n"
" Here, the su data file, \"DATA\", is correlated trace by trace with the\n"
" the filter shown.							\n"
" 									\n"
;
d57 1
a57 1
 *	CWP: Jack, Michel
d80 1
a80 1
	askdoc(1);
@


1.1
log
@Initial revision
@
text
@d21 1
a21 1
string sdoc =
d73 1
a73 1
	string sufile;		/* name of file containing one SU trace */
@
