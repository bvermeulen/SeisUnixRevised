head	1.19;
access;
symbols;
locks; strict;
comment	@ * @;


1.19
date	2015.08.07.21.56.55;	author john;	state Exp;
branches;
next	1.18;

1.18
date	2011.11.16.17.37.27;	author john;	state Exp;
branches;
next	1.17;

1.17
date	2011.11.12.00.00.03;	author john;	state Exp;
branches;
next	1.16;

1.16
date	2008.10.30.20.56.15;	author john;	state Exp;
branches;
next	1.15;

1.15
date	2006.01.18.18.55.02;	author john;	state Exp;
branches;
next	1.14;

1.14
date	2005.10.04.16.42.43;	author john;	state Exp;
branches;
next	1.13;

1.13
date	2003.06.09.16.17.07;	author john;	state Exp;
branches;
next	1.12;

1.12
date	96.09.05.19.24.26;	author jkc;	state Exp;
branches;
next	1.11;

1.11
date	96.01.24.18.31.20;	author jkc;	state Exp;
branches;
next	1.10;

1.10
date	96.01.12.20.42.04;	author jkc;	state Exp;
branches;
next	1.9;

1.9
date	94.12.15.10.36.43;	author john;	state Exp;
branches;
next	1.8;

1.8
date	94.11.18.11.38.51;	author john;	state Exp;
branches;
next	1.7;

1.7
date	94.08.25.14.59.00;	author jkc;	state Exp;
branches;
next	1.6;

1.6
date	93.11.24.11.33.18;	author john;	state Exp;
branches;
next	1.5;

1.5
date	93.08.09.15.19.22;	author john;	state Exp;
branches;
next	1.4;

1.4
date	92.10.26.13.31.33;	author john;	state Exp;
branches;
next	1.3;

1.3
date	91.09.05.08.49.39;	author jkcohen;	state Exp;
branches;
next	1.2;

1.2
date	91.07.02.15.37.26;	author jkcohen;	state Exp;
branches;
next	1.1;

1.1
date	91.07.01.18.56.11;	author jkcohen;	state Exp;
branches;
next	;


desc
@Driver to convolve given filter with an SU data set.
@


1.19
log
@changed conv to convolve_cwp
@
text
@/* Copyright (c) Colorado School of Mines, 2011.*/
/* All rights reserved.                       */

/* SUCONV: $Revision: 1.18 $ ; $Date: 2011/11/16 17:37:27 $		*/

#include "su.h"
#include "segy.h"
#include "header.h"

/*********************** self documentation ******************************/
char *sdoc[] = {
" 									",
" SUCONV - convolution with user-supplied filter			",
" 									",
" suconv <stdin >stdout  filter= [optional parameters]			",
" 									",
" Required parameters: ONE of						",
" sufile=		file containing SU trace to use as filter	",
" filter=		user-supplied convolution filter (ascii)	",
" 									",
" Optional parameters:							",
" panel=0		use only the first trace of sufile		",
" 			=1 convolve corresponding trace in sufile with	",
" 			trace in input data				",
" 									",
" Trace header fields accessed: ns					",
" Trace header fields modified: ns					",
" 									",
" Notes: It is quietly assumed that the time sampling interval on the	",
" single trace and the output traces is the same as that on the traces	",
" in the input file.  The sufile may actually have more than one trace,	",
" but only the first trace is used in panel=0. In panel=1 the corresponding",
" trace from the sufile are convolved with its counterpart in the data.	",
" Caveat, in panel=1 there have to be at least as many traces in sufile	",
" as in the input data. If not, a warning is returned, and later traces	",
" in the dataset are returned unchanged.				",
" 									",
" Examples:								",
"	suplane | suwind min=12 max=12 >TRACE				",
"	suconv<DATA sufile=TRACE | ...					",
" Here, the su data file, \"DATA\", is convolved trace by trace with the",
" the single su trace, \"TRACE\".					",
" 									",
"	suconv<DATA filter=1,2,1 | ...					",
" Here, the su data file, \"DATA\", is convolved trace by trace with the",
" the filter shown.							",
" 									",
NULL};

/* Credits:
 *	CWP: Jack K. Cohen, Michel Dietrich
 *
 *  CAVEATS: no space-variable or time-variable capacity.
 *     The more than one trace allowed in sufile is the
 *     beginning of a hook to handle the spatially variant case.
 *
 * Trace header fields accessed: ns
 * Trace header fields modified: ns
 */
/**************** end self doc *******************************************/

segy intrace, outtrace, sutrace;

int
main(int argc, char **argv)
{
	int nt;			/* number of points on input traces	*/
	int ntout;		/* number of points on output traces	*/
	float *filter=NULL;	/* filter coefficients			*/
	int nfilter=0;		/* length of input wavelet in samples	*/
	cwp_String sufile="";	/* name of file containing one SU trace */
	FILE *fp=NULL;		/* ... its file pointer			*/
	int delrtf=0;		/* delrt from traces in sufile		*/

	int panel;		/* operational panel of the program	*/
	cwp_Bool issufile=cwp_false;	/* is sufile set?		*/


	/* Initialize */
	initargs(argc, argv);
	requestdoc(1);

	if (!getparint("panel",&panel))		panel=0;

	/* Get info from first trace */ 
	if (!gettr(&intrace) ) err("can't get first trace");
	nt = intrace.ns;

	/* Get parameters and set up filter array */
	if (!getparstring("sufile", &sufile) ) {
		if (!(nfilter = countparval("filter")))
			err("must specify filter= desired filter");
		filter = ealloc1float(nfilter);	getparfloat("filter", filter);
	} else if (panel==0) { /* if panel=0 only use the first trace */
		fp = efopen(sufile, "r");
		fgettr(fp, &sutrace);

                /* HD: get delrt from filter sufile */
                delrtf = sutrace.delrt;

		nfilter = sutrace.ns;
		filter = ealloc1float(nfilter);
		memcpy((void *) filter,
			(const void *) sutrace.data, nfilter*FSIZE);
		issufile=cwp_true; 
	} else { /* if panel=1 use each trace */
		fp = efopen(sufile, "r");
		issufile=cwp_true; 
	}
        checkpars();

	/* Set output trace length */
	ntout = nt + nfilter - 1;

	/* Main loop over traces */
	do {
		/* if panel=1 and sufile is defined */
		if ((panel==1) && (issufile==cwp_true)) {
			fgettr(fp, &sutrace);

                	/* HD: get delrt from filter sufile */
                	delrtf = sutrace.delrt;

			nfilter = sutrace.ns;
			filter = ealloc1float(nfilter);
			memcpy((void *) filter,
				(const void *) sutrace.data, nfilter*FSIZE);
			ntout = nt + nfilter - 1;
		}

		/* Convolve filter with trace */
		convolve_cwp(nfilter, 0, filter,
		     nt, 0, intrace.data, 
                     ntout, 0, outtrace.data);        


		/* Output filtered trace */
		memcpy((void *) &outtrace, (const void *) &intrace, HDRBYTES);
		outtrace.ns = ntout; 

		/* HD: update delrt */
		outtrace.delrt = intrace.delrt+delrtf;

		puttr(&outtrace);


	} while (gettr(&intrace));


	return(CWP_Exit());
}
@


1.18
log
@added Reg Beardsley's checkpar() call
@
text
@d4 1
a4 1
/* SUCONV: $Revision: 1.16 $ ; $Date: 2008/10/30 20:56:15 $		*/
d132 1
a132 1
		conv(nfilter, 0, filter,
@


1.17
log
@copyright
@
text
@d110 1
@


1.16
log
@panel option.
@
text
@d1 4
a4 1
/* SUCONV: $Revision: 1.12 $ ; $Date: 1996/09/05 19:24:26 $		*/
@


1.15
log
@removed old copyright statement
@
text
@d1 1
a1 1
/* SUCONV: $Revision: 1.14 $ ; $Date: 2005/10/04 16:42:43 $		*/
d19 3
a21 1
" none 									",
d29 5
a33 1
" but only the first trace is used.					",
a53 4
 * Modification:
 *      CWP: Huub Douma (HD),  14/01/2005
 *      Implemented correct use of delrt
 *
d66 9
a74 5
	float *filter;		/* filter coefficients			*/
	int nfilter;		/* length of input wavelet in samples	*/
	cwp_String sufile;	/* name of file containing one SU trace */
	FILE *fp;		/* ... its file pointer			*/
        short delrtf=0;         /* HD: delrt of filter sufile           */
d80 1
a85 1

d87 1
a87 1
	if (!getparstring("sufile", &sufile)) {
d91 1
a91 1
	} else {
d94 4
d102 4
a105 2
                /* HD: get delrt from filter sufile */
		delrtf = sutrace.delrt;
a110 1

d113 14
d136 4
a139 2
                /* HD: update delrt */
		outtrace.delrt = intrace.delrt+delrtf; 
d142 1
@


1.14
log
@4 Oct 2005
@
text
@d1 1
a1 4
/* Copyright (c) Colorado School of Mines, 2003.*/
/* All rights reserved.                       */

/* SUCONV: $Revision: 1.13 $ ; $Date: 2003/06/09 16:17:07 $		*/
@


1.13
log
@9 June 2003
@
text
@d1 4
a4 1
/* SUCONV: $Revision: 1.12 $ ; $Date: 1996/09/05 19:24:26 $		*/
d51 4
d71 1
a71 1

d95 2
d114 2
@


1.12
log
@Fixed -Wall complaint.
@
text
@d1 1
a1 1
/* SUCONV: $Revision: 1.11 $ ; $Date: 1996/01/24 18:31:20 $		*/
d110 1
a110 1
	return EXIT_SUCCESS;
@


1.11
log
@Handle header fields accessed/modified for sudoc.
@
text
@d1 1
a1 1
/* SUCONV: $Revision: 1.10 $ ; $Date: 1996/01/12 20:42:04 $		*/
d55 1
@


1.10
log
@Per Stew's support of multiple file streams in fgettr/fputtr, removed
the calls to vgettr/vputtr.
@
text
@d1 1
a1 1
/* SUCONV: $Revision: 1.9 $ ; $Date: 1994/12/15 10:36:43 $		*/
d47 3
@


1.9
log
@additional comments added
@
text
@d1 1
a1 1
/* SUCONV: $Revision: 1.8 $ ; $Date: 94/11/18 11:38:51 $		*/
d68 1
a68 1
	if (!vgettr(&intrace) ) err("can't get first trace");
d79 1
a79 1
		fvgettr(fp, &sutrace);
d103 1
a103 1
	} while (vgettr(&intrace));
@


1.8
log
@made is so that the sufilter=  input may have a 
different number of samples than the data being operated on
@
text
@d1 1
a1 1
/* SUCONV: $Revision: 1.7 $ ; $Date: 94/08/25 14:59:00 $		*/
d19 1
a19 1
" ntout=nt+nfilter-1	number of samples on output traces		",
a49 3
/* Prototype for subroutine used internally */
static int fvgettr(FILE *fp, segy *tp);

d68 1
a68 1
	if (!(fvgettr(stdin,&intrace)) ) err("can't get first trace");
d87 1
a87 1
	if (!getparint("ntout", &ntout))	 ntout = nt + nfilter - 1;
d103 1
a103 1
	} while (gettr(&intrace));
a106 78
}

#include "header.h"

static int fvgettr(FILE *fp, segy *tp)
/************************************************************************* 
 fvgettr - get a segy trace from a file by file pointer (nt can vary)
************************************************************************** 
Input:
fp	input file pointer

Output:
tp	pointer to a type segy

Returns:
	int: number of bytes read on current trace (0 after last trace)

************************************************************************** 
Notes:
int fvgettr(FILE *fp, segy *tp)

Cloned from .../su/lib/fgettr.c
************************************************************************** 
Credits: CWP: Jack K. Cohen, Michel Dietrich 
**************************************************************************/
{
	static unsigned long itr = 0;	/* number of traces read	*/
	static cwp_Bool first = true;	/* to check if first entry	*/
	static FileType ftype;		/* file type of input *fp	*/
	static unsigned short bytesper;	/* bytes per datum (packed?)	*/
	int databytes;			/* data bytes on current segy	*/
	int nt;				/* samples on trace (can vary)	*/
	int nsegy; 			/* total bytes on current segy	*/
	int nread;			/* bytes seen by fread calls	*/


	if (first) {
		first = false;

		switch (ftype = filestat(fileno(fp))) {
		case DIRECTORY:
			err("%s: stdin can't be a directory", __FILE__);
		case TTY:
			err("%s: stdin can't be tty", __FILE__);
		default:
			if      (tp->trid==CHARPACK)   bytesper=sizeof(char);
			else if (tp->trid==SHORTPACK)  bytesper=sizeof(short);
			else			       bytesper=sizeof(float);
		}
	}

	/* Get the header */
	switch (nread = efread(tp, 1, HDRBYTES, fp)) {
	case 0:   return 0; /* no more traces */
	default:  if (nread != HDRBYTES)
			err("%s: bad header, trace #%ld", __FILE__, itr);
	break;
	}

	/* Have the header, now for the data */
	nt = tp->ns;
	if (nt > SU_NFLTS)
		err("%s: unable to handle %d > %d "
			"samples per trace", __FILE__, nt, SU_NFLTS);

	databytes = bytesper * nt;
	nsegy = HDRBYTES + databytes;

	switch (nread = efread(tp->data, 1, databytes, fp)) {
	case 0:   err("%s: no data on trace #%ld, itr", __FILE__);
	default:  if (nread != databytes)
			 err("%s: trace #%ld, read only %d bytes of %u",
				__FILE__, itr, nread, databytes);
	break;
	}

	++itr;
	return nsegy;
@


1.7
log
@Removed copyright statement from codes that had it.
Moved self-doc line for sudoc.
@
text
@d1 1
a1 1
/* SUCONV: $Revision: 1.6 $ ; $Date: 93/11/24 11:33:18 $		*/
d15 2
a16 2
"	sufile=         file containing SU trace to use as filter	",
"	filter= 	user-supplied convolution filter (ascii)	",
d19 1
a19 1
"	none 								",
d42 1
a42 1
 *	CWP: Jack, Michel
d50 2
d71 1
a71 1
	if (!gettr(&intrace)) err("can't get first trace");
d82 1
a82 1
		fgettr(fp, &sutrace);
a88 1

d90 1
a90 1
	ntout = nt + nfilter - 1;
d110 78
@


1.6
log
@explicit cast added
@
text
@d1 1
a1 1
/* SUCONV: $Revision: 1.5 $ ; $Date: 93/08/09 15:19:22 $		*/
a2 13
/*----------------------------------------------------------------------
 * Copyright (c) Colorado School of Mines, 1990.
 * All rights reserved.
 *
 * This code is part of SU.  SU stands for Seismic Unix, a processing line
 * developed at the Colorado School of Mines, partially based on Stanford
 * Exploration Project (SEP) software.  Inquiries should be addressed to:
 *
 *  Jack K. Cohen, Center for Wave Phenomena, Colorado School of Mines,
 *  Golden, CO 80401  (jkc@@dix.mines.colorado.edu)
 *----------------------------------------------------------------------
 */

a39 1
/**************** end self doc *******************************************/
d48 1
d59 1
a59 1
	cwp_String sufile;		/* name of file containing one SU trace */
@


1.5
log
@changed String to cwp_String
@
text
@d1 1
a1 1
/* SUCONV: $Revision: 1.4 $ ; $Date: 92/10/26 13:31:33 $		*/
d96 2
a97 1
		memcpy(filter, sutrace.data, nfilter*FSIZE);
d114 1
a114 1
		memcpy(&outtrace, &intrace, HDRBYTES);
@


1.4
log
@new selfdoc installed
@
text
@d1 1
a1 1
/* SUCONV: $Revision: 1.3 $ ; $Date: 91/09/05 08:49:39 $		*/
d72 1
a72 1
	String sufile;		/* name of file containing one SU trace */
@


1.3
log
@string -> String and so forth
@
text
@d1 1
a1 1
/* SUCONV: $Revision: 1.4 $ ; $Date: 91/07/01 18:59:06 $		*/
d21 32
a52 32
String sdoc =
" 									\n"
" SUCONV - convolution with user-supplied filter			\n"
" 									\n"
" suconv <stdin >stdout  filter= [optional parameters]			\n"
" 									\n"
" Required parameters: ONE of						\n"
"	sufile=         file containing SU trace to use as filter	\n"
"	filter= 	user-supplied convolution filter (ascii)	\n"
" 									\n"
" Optional parameters:							\n"
"	none 								\n"
" 									\n"
" Trace header fields accessed: ns					\n"
" Trace header fields modified: ns					\n"
" 									\n"
" Notes: It is quietly assumed that the time sampling interval on the	\n"
" single trace and the output traces is the same as that on the traces	\n"
" in the input file.  The sufile may actually have more than one trace,	\n"
" but only the first trace is used.					\n"
" 									\n"
" Examples:								\n"
"	suplane | suwind min=12 max=12 >TRACE				\n"
"	suconv<DATA sufile=TRACE | ...					\n"
" Here, the su data file, \"DATA\", is convolved trace by trace with the\n"
" the single su trace, \"TRACE\".					\n"
" 									\n"
"	suconv<DATA filter=1,2,1 | ...					\n"
" Here, the su data file, \"DATA\", is convolved trace by trace with the\n"
" the filter shown.							\n"
" 									\n"
;
d78 1
a78 1
	askdoc(1);
@


1.2
log
@Tweaks
@
text
@d21 1
a21 1
string sdoc =
d72 1
a72 1
	string sufile;		/* name of file containing one SU trace */
@


1.1
log
@Initial revision
@
text
@d28 1
a28 1
"	sufile=         file containing single SU trace to use as filter\n"
d37 1
a37 1
" Note: It is quietly assumed that the time sampling interval on the	\n"
d39 2
a40 1
" in the input file.							\n"
d59 2
@
