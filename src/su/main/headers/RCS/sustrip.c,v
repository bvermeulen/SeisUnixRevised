head	1.20;
access;
symbols;
locks; strict;
comment	@ * @;


1.20
date	2011.11.16.22.10.29;	author john;	state Exp;
branches;
next	1.19;

1.19
date	2011.11.12.00.20.05;	author john;	state Exp;
branches;
next	1.18;

1.18
date	2011.01.21.20.06.59;	author john;	state Exp;
branches;
next	1.17;

1.17
date	2003.06.09.16.17.07;	author john;	state Exp;
branches;
next	1.16;

1.16
date	97.07.28.22.36.46;	author john;	state Exp;
branches;
next	1.15;

1.15
date	96.08.20.16.40.51;	author jkc;	state Exp;
branches;
next	1.14;

1.14
date	96.08.19.22.15.26;	author jkc;	state Exp;
branches;
next	1.13;

1.13
date	96.03.15.19.50.37;	author jkc;	state Exp;
branches;
next	1.12;

1.12
date	96.02.06.20.26.25;	author jkc;	state Exp;
branches;
next	1.11;

1.11
date	95.08.04.15.47.07;	author jkc;	state Exp;
branches;
next	1.10;

1.10
date	94.10.12.10.18.26;	author john;	state Exp;
branches;
next	1.9;

1.9
date	94.08.25.15.01.10;	author jkc;	state Exp;
branches;
next	1.8;

1.8
date	93.11.24.16.17.08;	author john;	state Exp;
branches;
next	1.7;

1.7
date	93.08.09.15.20.05;	author john;	state Exp;
branches;
next	1.6;

1.6
date	92.10.26.12.51.32;	author john;	state Exp;
branches;
next	1.5;

1.5
date	91.09.05.08.52.00;	author jkcohen;	state Exp;
branches;
next	1.4;

1.4
date	90.11.17.15.16.18;	author jkc;	state Exp;
branches;
next	1.3;

1.3
date	90.11.16.10.34.32;	author jkc;	state Exp;
branches;
next	1.2;

1.2
date	90.09.03.09.55.52;	author jkc;	state Exp;
branches;
next	1.1;

1.1
date	90.04.20.20.41.12;	author jkc;	state Exp;
branches;
next	;


desc
@strip off seg-y headers
@


1.20
log
@added Reg Beardsley's checkpar() call
@
text
@/* Copyright (c) Colorado School of Mines, 2011.*/
/* All rights reserved.                       */

/* SUSTRIP: $Revision: 1.18 $ ; $Date: 2011/01/21 20:06:59 $	*/

#include "su.h"
#include "segy.h"
#include "header.h"

/*********************** self documentation **********************/
char *sdoc[] = {
" 								",
" SUSTRIP - remove the SEGY headers from the traces		",
" 								",
" sustrip <stdin >stdout head=/dev/null outpar=/dev/tty ftn=0	",
" 								",
" Required parameters:						",
" 	none							",
" 								",
" Optional parameters:						",
" 	head=/dev/null		file to save headers in		",
" 								",
" 	outpar=/dev/tty		output parameter file, contains:",
" 				number of samples (n1=)		",
" 				number of traces (n2=)		",
" 				sample rate in seconds (d1=)	",
" 								",
" 	ftn=0			Fortran flag			",
" 				0 = write unformatted for C	",
" 				1 = ... for Fortran		",
" 								",
" Notes:							",
" Invoking head=filename will write the trace headers into filename.",
" You may paste the headers back onto the traces with supaste	",
" See:  sudoc  supaste 	 for more information 			",
" Related programs: supaste, suaddhead				",
NULL};

/* Credits:
 *	SEP: Einar Kjartansson  c. 1985
 *	CWP: Jack K. Cohen        April 1990
 *
 * Trace header fields accessed: ns, dt
 */
/**************** end self doc ***********************************/


segy tr;

int
main(int argc, char **argv)
{
	cwp_String head;	/* name of file holding headers		*/
	FILE *headfp; 		/* ... its file pointer			*/
	cwp_String outpar;	/* name of file holding output parfile	*/
	FILE *outparfp;		/* ... its file pointer			*/
	int ns;			/* number of data samples on the segys	*/
	size_t nsbytes;		/* ... in bytes				*/
	int ftn;		/* fortran flag				*/
	int ntr = 0;		/* number of traces written		*/


	/* Initialize */
	initargs(argc, argv);
	requestdoc(1);


	switch(filestat(STDOUT)) {
	case BADFILETYPE:
		warn("stdout is illegal filetype");
		pagedoc();
	break;
	case TTY:
		warn("stdout can't be tty");
		pagedoc();
	break;
	default: /* other cases are OK */
	break;
	}

	/* Get parameters */
	if (!getparstring("head"  , &head))	head   = "/dev/null";
	if (!getparstring("outpar", &outpar))	outpar = "/dev/tty" ;
	if (!getparint   ("ftn"   , &ftn))	ftn = 0;
	if (ftn != 0 && ftn != 1)  err("ftn=%d must be 0 or 1", ftn);


        checkpars();
	/* Open files to save headers and parameters */
	headfp = efopen(head, "w");
	outparfp = efopen(outpar, "w");


	/* Get info from first trace */
	if (!gettr(&tr)) err("can't get first trace");
	ns = tr.ns;
	nsbytes = ns * FSIZE;


	/* Write the data portion of the records--if the ftn	*/
	/* option is selected, write an int before and after	*/
	/* each trace giving the length of the trace in bytes	*/
	/* as per the Fortran unformatted record format.	*/
	do {

		if (ftn) efwrite(&nsbytes, ISIZE, 1, stdout);
		switch(tr.trid) {
		case CHARPACK:  efwrite(tr.data, sizeof(char), ns, stdout);
		break;
		case SHORTPACK: efwrite(tr.data, sizeof(short), ns, stdout);
		break;
		default:        efwrite(tr.data, FSIZE, ns, stdout);
		}     
		if (ftn) efwrite(&nsbytes, ISIZE, 1, stdout);

		efwrite(&tr, 1, HDRBYTES, headfp);

		++ntr;

	} while (gettr(&tr));

	/* Make par file for headerless file */
	fprintf(outparfp, "n1=%d n2=%d d1=%f\nnt=%d ntr=%d dt=%f\nns=%d\n",
		tr.ns, ntr, ((double) tr.dt)/1000000.0,
		tr.ns, ntr, ((double) tr.dt)/1000000.0,
		tr.ns);


	return(CWP_Exit());
}
@


1.19
log
@copyright
@
text
@d88 1
@


1.18
log
@selfdoc updates
@
text
@d1 4
a4 1
/* SUSTRIP: $Revision: 1.17 $ ; $Date: 2003/06/09 16:17:07 $	*/
@


1.17
log
@9 June 2003
@
text
@d1 1
a1 1
/* SUSTRIP: $Revision: 1.16 $ ; $Date: 1997/07/28 22:36:46 $	*/
d33 1
a33 1
" 								",
d37 2
a38 2
 *	SEP: Einar Kjartansson
 *	CWP: Jack K. Cohen
@


1.16
log
@changes suggested by Stew Levin to silence SGI compiler warnings, etc
@
text
@d1 1
a1 1
/* SUSTRIP: $Revision: 1.15 $ ; $Date: 1996/08/20 16:40:51 $	*/
d125 1
a125 1
	return EXIT_SUCCESS;
@


1.15
log
@Improved comment on default branch of filetype switch.
@
text
@d1 1
a1 1
/* SUSTRIP: $Revision: 1.14 $ ; $Date: 1996/08/19 22:15:26 $	*/
d55 1
a55 1
	int nsbytes;		/* ... in bytes				*/
@


1.14
log
@Recognize CHARPACK and SHORTPACK
@
text
@d1 1
a1 1
/* SUSTRIP: $Revision: 1.13 $ ; $Date: 1996/03/15 19:50:37 $	*/
d73 2
a74 1
	default: /* do nothing */
@


1.13
log
@Added alternative parameter names to output parfile so more programs
can use the parfile.
@
text
@d1 1
a1 1
/* SUSTRIP: $Revision: 1.12 $ ; $Date: 1996/02/06 20:26:25 $	*/
d47 1
d73 1
d102 7
a108 1
		efwrite(tr.data, FSIZE, ns, stdout);
@


1.12
log
@Deal with header fields accessed/modified down to sudoc.
@
text
@d1 1
a1 1
/* SUSTRIP: $Revision: 1.11 $ ; $Date: 1995/08/04 15:47:07 $	*/
d110 4
a113 2
	fprintf(outparfp, "n1=%d n2=%d d1=%f\n",
			tr.ns, ntr, ((double) tr.dt)/1000000.0);
@


1.11
log
@Changed cast of tr.dt to double for consistency.
@
text
@d1 1
a1 1
/* SUSTRIP: $Revision: 1.10 $ ; $Date: 1994/10/12 10:18:26 $	*/
d39 2
@


1.10
log
@added Notes to selfdoc
@
text
@d1 1
a1 1
/* SUSTRIP: $Revision: 1.9 $ ; $Date: 94/08/25 15:01:10 $	*/
d109 1
a109 1
			tr.ns, ntr, (float) tr.dt/1000000.0);
@


1.9
log
@Removed copyright statement from codes that had it.
Moved self-doc line for sudoc.
@
text
@d1 1
a1 1
/* SUSTRIP: $Revision: 1.8 $ ; $Date: 93/11/24 16:17:08 $	*/
d29 5
d37 2
a38 2
 *	SEP: Einar
 *	CWP: Jack
@


1.8
log
@added explicit cast
@
text
@d1 1
a1 1
/* SUSTRIP: $Revision: 1.7 $ ; $Date: 93/08/09 15:20:05 $	*/
a2 13
/*----------------------------------------------------------------------
 * Copyright (c) Colorado School of Mines, 1990.
 * All rights reserved.
 *
 * This code is part of SU.  SU stands for Seismic Unix, a processing line
 * developed at the Colorado School of Mines, partially based on Stanford
 * Exploration Project (SEP) software.  Inquiries should be addressed to:
 *
 *  Jack K. Cohen, Center for Wave Phenomena, Colorado School of Mines,
 *  Golden, CO 80401  (jkc@@dix.mines.colorado.edu)
 *----------------------------------------------------------------------
 */

a29 1
/**************** end self doc ***********************************/
d35 1
d43 1
a43 1
	FILE *headfp;	/* ... its file pointer			*/
d45 5
a49 5
	FILE *outparfp;	/* ... its file pointer			*/
	int ns;		/* number of data samples on the segys	*/
	int nsbytes;	/* ... in bytes				*/
	int ftn;	/* fortran flag				*/
	int ntr = 0;	/* number of traces written		*/
@


1.7
log
@changed String to cwp_String
@
text
@d1 1
a1 1
/* SUSTRIP: $Revision: 1.6 $ ; $Date: 92/10/26 12:51:32 $	*/
d116 2
a117 1
	fprintf(outparfp, "n1=%d n2=%d d1=%f\n", tr.ns, ntr, tr.dt/1000000.0);
@


1.6
log
@new selfdoc installed
@
text
@d1 1
a1 1
/* SUSTRIP: $Revision: 1.5 $ ; $Date: 91/09/05 08:52:00 $	*/
d55 1
a55 1
	String head;	/* name of file holding headers		*/
d57 1
a57 1
	String outpar;	/* name of file holding output parfile	*/
@


1.5
log
@string -> String and so forth
@
text
@d1 1
a1 1
/* SUSTRIP: $Revision: 1.4 $ ; $Date: 90/11/17 15:16:18 $	*/
d21 22
a42 22
String sdoc =
" 								\n"
" SUSTRIP - remove the SEGY headers from the traces		\n"
" 								\n"
" sustrip <stdin >stdout head=/dev/null outpar=/dev/tty ftn=0	\n"
" 								\n"
" Required parameters:						\n"
" 	none							\n"
" 								\n"
" Optional parameters:						\n"
" 	head=/dev/null		file to save headers in		\n"
" 								\n"
" 	outpar=/dev/tty		output parameter file, contains:\n"
" 				number of samples (n1=)		\n"
" 				number of traces (n2=)		\n"
" 				sample rate in seconds (d1=)	\n"
" 								\n"
" 	ftn=0			Fortran flag			\n"
" 				0 = write unformatted for C	\n"
" 				1 = ... for Fortran		\n"
" 								\n"
;
d67 1
a67 1
	askdoc(1);
d73 1
a73 1
		selfdoc();
d77 1
a77 1
		selfdoc();
@


1.4
log
@ANSI C tweaks.
@
text
@d1 1
a1 1
/* SUSTRIP: $Revision: 1.3 $ ; $Date: 90/11/16 10:34:32 $	*/
d21 1
a21 1
string sdoc =
d55 1
a55 1
	string head;	/* name of file holding headers		*/
d57 1
a57 1
	string outpar;	/* name of file holding output parfile	*/
@


1.3
log
@write d1 instead of dt
@
text
@d1 1
a1 1
/* SUSTRIP: $Revision: 1.2 $ ; $Date: 90/09/03 09:55:52 $	*/
d21 22
a42 22
string sdoc = "\
								\n\
SUSTRIP - remove the SEGY headers from the traces		\n\
								\n\
sustrip <stdin >stdout head=/dev/null outpar=/dev/tty ftn=0	\n\
								\n\
Required parameters:						\n\
	none							\n\
								\n\
Optional parameters:						\n\
	head=/dev/null		file to save headers in		\n\
								\n\
	outpar=/dev/tty		output parameter file, contains:\n\
				number of samples (n1=)		\n\
				number of traces (n2=)		\n\
				sample rate in seconds (d1=)	\n\
								\n\
	ftn=0			Fortran flag			\n\
				0 = write unformatted for C	\n\
				1 = ... for Fortran		\n\
								\n\
";
d62 1
a62 1
	int ntr;	/* number of traces			*/
d82 4
a85 6
	if (!sgetpar("head"  , &head))		head   = "/dev/null";
	if (!sgetpar("outpar", &outpar))	outpar = "/dev/tty" ;
	if (!igetpar("ftn"   , &ftn))		ftn = 0;
	if (ftn != 0 && ftn != 1) {
		err("ftn=%d must be 0 or 1", ftn);
	}
a102 1
	ntr = 0;
a103 1
		ntr++;
d111 2
d116 1
a116 2
	fprintf(outparfp, "n1=%d n2=%d d1=%f\n",
				tr.ns, ntr, tr.dt/1000000.0);
@


1.2
log
@ANSI C changes
@
text
@d1 1
a1 1
/* SUSTRIP: $Revision: 1.1 $ ; $Date: 90/04/20 20:41:12 $	*/
a33 1
				output filename (in=)		\n\
d35 2
a36 1
				sample rate in seconds (dt=)	\n\
d118 1
a118 1
	fprintf(outparfp, "n1=%d n2=%d dt=%f\n",
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/* SUSTRIP: $Revision: 2.10 $ ; $Date: 89/09/06 23:46:40 $	*/
d12 1
a12 1
 *  Golden, CO 80401  (isis!csm9a!jkcohen)
d31 1
a31 1
	head = /dev/null	file to save headers in		\n\
d33 1
a33 1
	outpar = /dev/tty	output parameter file, contains:\n\
d38 1
a38 1
	ftn = 0			Fortran flag			\n\
a47 2
 *
 *
a49 5
/* Embed Revision Control System identifier strings */
static string progid =
	"   $Source: /src/su/src/RCS/sustrip.c,v $";
static string revid =
	"   $Revision: 2.10 $ ; $Date: 89/09/06 23:46:40 $";
a50 2


d53 1
a53 2
main(argc, argv)
int argc; char **argv;
a61 1
	string outname;	/* name of stripped trace file		*/
a66 5
	if (!igetpar("ID", &ID))	ID = 0;
	if (ID) {
		(void) fprintf(stderr, "%s\n", progid);
		(void) fprintf(stderr, "%s\n", revid);
	}
d70 1
a70 1
	switch(statfil(STDOUT)) {
d91 2
a92 6
	if (NULL == (headfp = fopen(head, "w"))) {
		syserr("can't open head=\"%s\"", head);
	}
	if (NULL == (outparfp = fopen(outpar, "w"))) {
		syserr("can't open outpar=\"%s\"", outpar);
	}
d109 3
a111 3
		if (ftn) efwrite((char *) &nsbytes, ISIZE, 1, stdout);
		efwrite((char *) tr.data, FSIZE, ns, stdout);
		if (ftn) efwrite((char *) &nsbytes, ISIZE, 1, stdout);
d113 1
a113 1
		efwrite((char *) &tr, 1, HDRBYTES, headfp);
d118 2
a119 3
	outname = getname(STDOUT);
	fprintf(outparfp, "in=%s n1=%d n2=%d dt=%f\n",
				outname, tr.ns, ntr, tr.dt/1000000.0);
@
