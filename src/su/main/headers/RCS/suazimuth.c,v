head	1.21;
access;
symbols;
locks; strict;
comment	@ * @;


1.21
date	2015.08.07.22.18.00;	author john;	state Exp;
branches;
next	1.20;

1.20
date	2011.11.16.22.10.29;	author john;	state Exp;
branches;
next	1.19;

1.19
date	2011.11.12.00.20.05;	author john;	state Exp;
branches;
next	1.18;

1.18
date	2009.07.23.21.59.53;	author john;	state Exp;
branches;
next	1.17;

1.17
date	2007.05.11.19.06.22;	author john;	state Exp;
branches;
next	1.16;

1.16
date	2006.09.28.14.27.54;	author john;	state Exp;
branches;
next	1.15;

1.15
date	2006.08.29.19.26.07;	author john;	state Exp;
branches;
next	1.14;

1.14
date	2006.08.29.19.18.40;	author john;	state Exp;
branches;
next	1.13;

1.13
date	2006.08.29.19.00.07;	author john;	state Exp;
branches;
next	1.12;

1.12
date	2003.08.20.18.32.49;	author john;	state Exp;
branches;
next	1.11;

1.11
date	2003.08.19.17.31.42;	author john;	state Exp;
branches;
next	1.10;

1.10
date	2003.06.09.16.17.07;	author john;	state Exp;
branches;
next	1.9;

1.9
date	2003.05.02.19.50.30;	author john;	state Exp;
branches;
next	1.8;

1.8
date	99.02.23.18.18.40;	author john;	state Exp;
branches;
next	1.7;

1.7
date	99.01.29.21.06.07;	author john;	state Exp;
branches;
next	1.6;

1.6
date	98.11.02.23.19.37;	author john;	state Exp;
branches;
next	1.5;

1.5
date	98.11.02.21.22.11;	author john;	state Exp;
branches;
next	1.4;

1.4
date	98.11.02.20.55.00;	author john;	state Exp;
branches;
next	1.3;

1.3
date	98.10.29.00.47.08;	author john;	state Exp;
branches;
next	1.2;

1.2
date	98.10.29.00.36.19;	author john;	state Exp;
branches;
next	1.1;

1.1
date	98.10.29.00.15.43;	author john;	state Exp;
branches;
next	;


desc
@compute trace azimuths.
@


1.21
log
@fixed the signed offset option
@
text
@/* Copyright (c) Colorado School of Mines, 2011.*/
/* All rights reserved.                       */

/* SUAZIMUTH: $Revision: 1.20 $ ; $Date: 2011/11/16 22:10:29 $        */

#include "su.h"
#include "segy.h"
#include "header.h"

/*********************** self documentation **********************/
char *sdoc[] = {
"                                                                        ",
" SUAZIMUTH - compute trace AZIMUTH, offset, and midpoint coordinates    ",
"             and set user-specified header fields to these values       ",
"                                                                        ",
"  suazimuth <stdin >stdout [optional parameters]                        ",
"                                                                        ",
" Required parameters:                                                   ",
"     none                                                               ",
"                                                                        ",
" Optional parameters:                                                   ",
"   key=otrav      header field to store computed azimuths in            ",
"   scale=1.0      value(key) = scale * azimuth                          ",
"   az=0           azimuth convention flag                               ",
"                   0: 0-179.999 deg, reciprocity assumed                ",
"                   1: 0-359.999 deg, points from receiver to source     ",
"                  -1: 0-359.999 deg, points from source to receiver     ",
"   sector=1.0     if set, defines output in sectors of size             ",
"                  sector=degrees_per_sector, the default mode is        ",
"                  the full range of angles specified by az              ",
"                                                                        ",
"   offset=0       if offset=1 then set offset header field              ",
"   signedflag=0   is offset signed? if =1 signedflag=1			 ",
"   offkey=offset  header field to store computed offsets in             ",
"   offkey=offset  header field to store computed offsets in             ",
"                                                                        ",
"   cmp=0          if cmp=1, then compute midpoint coordinates and       ",
"                  set header fields for (cmpx, cmpy)                    ",
"   mxkey=ep       header field to store computed cmpx in                ",
"   mykey=cdp      header field to store computed cmpy in                ",
"                                                                        ",
" Notes:                                                                 ",
"   All values are computed from the values in the coordinate fields     ",
"   sx,sy (source) and gx,gy (receiver).                                 ",
"   The output field \"otrav\" for the azimuth was chosen arbitrarily as ",
"   an example of a little-used header field, however, the user may      ",
"   choose any field that is convenient for his or her application.      ",
"                                                                        ",
"   Setting the sector=number_of_degrees_per_sector sets key field to    ",
"   sector number rather than an angle in degrees.                       ",
"                                                                        ",
"   For az=0, azimuths are measured from the North, however, reciprocity ",
"   is assumed, so azimuths go from 0 to 179.9999 degrees. If sector     ",
"   option is set, then the range is from 0 to 180/sector.               ",
"                                                                        ",
"   For az=1, azimuths are measured from the North, with the assumption  ",
"   that the direction vector points from the receiver to the source.    ",
"   For az=-1, the direction vector points from the source to the        ",
"   receiver. No reciprocity is assumed in these cases, so the angles go ",
"   from 0 to 359.999 degrees.                                           ",
"   If the sector option is set, then the range is from 0 to 360/sector. ",
"                                                                        ",
" Caveat:                                                                ",
"   This program honors the value of scalco in scaling the values of     ",
"   sx,sy,gx,gy. Type \"sukeyword scalco\" for more information.         ",
"                                                                        ",
"   Type \"sukeyword -o\" to see the keywords and descriptions of all    ",
"   header fields.                                                       ",
"                                                                        ",
"   To plot midpoints, use: su3dchart                                    ",
"                                                                        ",
NULL};

/* Credits:
 *  based on suchw, su3dchart
 *      CWP: John Stockwell and  UTulsa: Chris Liner, Oct. 1998
 *      UTulsa: Chris Liner added offset option, Feb. 2002
 *         cll: fixed offset option and added cmp option, May 2003
 *      RISSC: Nils Maercklin added key options for offset and 
 *             midpoints, and added azimuth direction option, Sep. 2006
 *
 *  Algorithms:
 *      offset = osign * sqrt( (gx-sx)*(gx-sx) + (gy-sy)*(gy-sy) )
 *               with osign = sgn( min((sx-gx),(sy-gy)) )
 *
 *      midpoint x  value  xm = (sx + gx)/2
 *      midpoint y  value  ym = (sy + gy)/2
 * 
 *  Azimuth will be defined as the angle, measured in degrees,
 *  turned from North, of a vector pointing to the source from the midpoint, 
 *  or from the midpoint to the source. Azimuths go from 0-179.000 degrees
 *  or from 0-180.0 degrees.
 *   
 *  value(key) = scale*[90.0 - (180.0/PI)*(atan((sy - ym)/(sx - xm))) ]
 *      or
 *  value(key) = scale*[180.0 - (180.0/PI)*(atan2((ym - sy),(xm - sx)) ]
 * 
 *  Trace header fields accessed: sx, sy, gx, gy, scalco. 
 *  Trace header fields modified: (user-specified keys)
 *
 */
/**************** end self doc ***********************************/

/* Prototype of functions used internally */
double computeAzimuth(double sx, double sy, 
    double mx, double my, double scale, int az);
void setval(cwp_String type_out, Value *val_out, double dval_out);

/* SEG-Y trace */
segy tr;

int
main(int argc, char **argv)
{
    cwp_String key;        /* output key for computed azimuth */
    cwp_String type_out;   /* ... type for output key */
    int index_out;         /* ... index for output key */
    Value val_out;         /* ... value of output key */
    cwp_String okey="";       /* output key for computed offset */
    cwp_String otype_out="";  /* ...type for output key */
    int oindex_out=0;        /* ...index for output key */
    cwp_String mxkey="";      /* output key for computed cmp x */
    cwp_String mxtype_out=""; /* ...type for output key */
    int mxindex_out=0;       /* ...index for output key */
    cwp_String mykey="";      /* output key for computed cmp y */
    cwp_String mytype_out=""; /* ...type for output key */
    int myindex_out=0;       /* ...index for output key */

    int signedflag=0;	   /* is the offset signed? =1 yes */

    double sx=0.0;         /* source x coordinate */
    double sy=0.0;         /* source y coordinate */
    double gx=0.0;         /* receiver x coordinate */
    double gy=0.0;         /* receiver y coordinate */
    double factor=0.0;     /* scaling factor */
    double scale=0.0;      /* value of scale */

    double mx, my;         /* x,y midpoint coordinates */
    int az=0;              /* azimuth convention flag */
    double sector=0;       /* azimuth by sectors */
    double azimuth;        /* computed azimuth value */
    int oflag=0;           /* offset flag */
    double offset;         /* computed offset value */
    int cmpflag=0;         /* cmp flag */
    double cmpx,cmpy;      /* cmp coords */

    /* Initialize */
    initargs(argc, argv);
    requestdoc(1);

    /* Get parameters */
    if (!getparstring("key",&key))         key = "otrav";
    if (!getparstring("offkey",&okey))   okey = "offset";
    if (!getparstring("mxkey",&mxkey))   mxkey = "ep";
    if (!getparstring("mykey",&mykey))   mykey = "cdp";
    if (!getpardouble("scale",&scale))     scale = 1.0;
    if (!getparint("az",&az))        az = 0;
    if (!getpardouble("sector",&sector))     sector = 1.0;
    if (!getparint("offset",&oflag))    oflag = 0;
    if (!getparint("signedflag",&signedflag))    signedflag = 0;
    if (!getparint("cmp",&cmpflag))        cmpflag = 0;

    checkpars();

    /* absorb sector into scale */
    scale = scale/sector;

    /* get type and index values of output */
    type_out  = hdtype(key);
    index_out = getindex(key);
    if (oflag) {
        otype_out  = hdtype(okey);
        oindex_out = getindex(okey);    
    }
    if (cmpflag) {
        mxtype_out  = hdtype(mxkey);
        mxindex_out = getindex(mxkey);  
        mytype_out  = hdtype(mykey);
        myindex_out = getindex(mykey);
    }
    
    /* loop over traces */
    while (gettr(&tr)) {

        /* get header values */
        sx = (double) tr.sx;
        sy = (double) tr.sy;
        gx = (double) tr.gx;
        gy = (double) tr.gy;

        /* If tr.scalco not set, use 1 as the value */
        factor = (!tr.scalco) ? 1 : tr.scalco;

        /* factor < 0 means divide; factor > 0 means to multiply */
        if (factor < 0.0) factor = -1.0/factor;

	sx *= factor; sy *= factor;
	gx *= factor; gy *= factor;

        /* compute midpoints */
        mx = (double) (0.5*(sx + gx));
        my = (double) (0.5*(sy + gy));

        /* compute the azimuths */
        azimuth = computeAzimuth(sx,sy,mx,my,scale,az);

        /* set and put the new header value */
        setval(type_out,&val_out, azimuth);
        puthval(&tr, index_out, &val_out);

        /* set offset header word, if requested */
        if (oflag != 0) {
            int offsgn=1;

	     if (signedflag) { /* calculate sign of offset */
 		/* calculate sign of offset */
                if((gx -sx)!=0) {
                        offsgn=SGN((float) (gx-sx) ) ;
                } else if ((gy - sy)!=0) {
                        offsgn=SGN((float) (gy-sy) ) ;
                }
	    } else { /* don't bother*/ }


            
            /* calcluate offset */
            offset = sqrt((gx-sx)*(gx-sx) + (gy-sy)*(gy-sy));

            /* scale offset by scalco factor and set sign */
            offset *= offsgn;
            
            /* set and put the new header value */
            setval(otype_out,&val_out, offset);
            puthval(&tr, oindex_out, &val_out);
        }

        /* set cmp coord header words, if requested */
        if (cmpflag != 0) {
            cmpx = (sx + gx)/2/factor;
            cmpy = (sy + gy)/2/factor;
            
            /* set and put the new header values */
            setval(mxtype_out,&val_out, cmpx);
            puthval(&tr, mxindex_out, &val_out);

            setval(mytype_out,&val_out, cmpy);
            puthval(&tr, myindex_out, &val_out);
        }

        /* write traces */
        puttr(&tr);

    }

    return(CWP_Exit());
}

/* Functions used internally */

#define DRADTODEG ((double) (180.0/PI))

double computeAzimuth(double sx, double sy, 
            double mx, double my, double scale, int az)
/************************************************************************
computeAzimuth - compute the azimuth of traces

*************************************************************************
Input:
sx      source x coordinate
sy      source y coordinate
mx      midpoint or geophone x coordinate
my      midpoint or geophone y coordinate
scale   scale factor
az      azimuth convention flag

Output:
        returns scaled azimuth in degrees

*************************************************************************
Notes:
Does computations as doubles. Outputs either as 0-179.999 or 
0-359.999 degrees, or in sectors of "sector" degrees in size.
Direction vector points from midpoint to source for az=1 and 
in opposite direction for az=-1. For az=0, reciprocity is assumed.
*************************************************************************
Author: CWP: John Stockwell, 28 Oct 1998
Modifications: Nils Maercklin put type conversion to function
               setval() and added az=-1 (az<0) option, Sep 2006
*************************************************************************/
{
    double dval_out=0.0;    /* output value (azimuth) */

    /* Compute the azimuth */
    if (az==0) { /* 0-179.999 convention */
        /* compute angle */
         dval_out = 90.0 - DRADTODEG*atan((sy-my)/(sx-mx)); 

        /* Make output go from 0-179.99999 degrees. */
        if (dval_out == 180.000) dval_out = 0.0;

    } 
    else if (az<0) { /* 0-359.999 from S to M */
        /* Compute angle */
        dval_out = DRADTODEG*atan2((mx-sx),(my-sy));

        /* Make output go from 0-359.99999 degrees. */
        if (dval_out < 0.) dval_out += 360.0;
    }
    else { /* 0-359.999 from M to S */
        /* Compute angle */
        dval_out = DRADTODEG*atan2((sx-mx),(sy-my));

        /* Make output go from 0-359.99999 degrees. */
        if (dval_out < 0.) dval_out += 360.0;
    }

    /* Return scaled azimuth */
    return dval_out*scale;
}


void setval( cwp_String type_out, Value *val_out, double dval_out)
/************************************************************************
setval - set value of a trace header word 

*************************************************************************
Input:
type_out    type of header word
dval_out    value of header word (double)

Output:
val_out     value according to type of header word

*************************************************************************
Credits: Einar Kajartansson, Jack K. Cohen, John Stockwell (sushw)
*************************************************************************/
{
    switch (*type_out) {
    case 's':
        err("can't change char header word");
    break;
    case 'h':
        val_out->h = (short) NINT(dval_out);
    break;
    case 'u':
        val_out->u = (unsigned short) NINT(dval_out);
    break;
    case 'l':
        val_out->l = (long) NINT(dval_out);
    break;
    case 'v':
        val_out->v = (unsigned long) NINT(dval_out);
    break;
    case 'i':
        val_out->i = (int) NINT(dval_out);
    break;
    case 'p':
        val_out->p = (unsigned int) NINT(dval_out);
    break;
    case 'f':
        val_out->f = (float) dval_out;
    break;
    case 'd':
        val_out->d = (double) dval_out;
    break;
    default:
        err("unknown type %s", type_out);
    break;
    }
}
@


1.20
log
@added Reg Beardsley's checkpar() call
@
text
@d4 1
a4 1
/* SUAZIMUTH: $Revision: 1.18 $ ; $Date: 2009/07/23 21:59:53 $        */
d33 2
d129 2
d146 1
a146 1
    
d160 1
d213 11
a223 1
            int offsgn=0;
a224 2
            /* calculate sign of offset */
            offsgn=SGN(MIN((sx-gx),(sy-gy)));
@


1.19
log
@copyright
@
text
@d158 2
@


1.18
log
@changed top line
@
text
@d1 4
a4 1
/* SUAZIMUTH: $Revision: 1.17 $ ; $Date: 2007/05/11 19:06:22 $        */
@


1.17
log
@scalco action fixed by  Joachim Mispel of Statoil
@
text
@d1 1
a1 4
/* Copyright (c) Colorado School of Mines, 2007.*/
/* All rights reserved.                       */

/* SUAZIMUTH: $Revision: 1.16 $ ; $Date: 2006/09/28 14:27:54 $        */
@


1.16
log
@Nils Maerklin's additions of additional specified header key words for cdp coordinates
@
text
@d1 4
a4 1
/* SUAZIMUTH: $Revision: 1.15 $ ; $Date: 2006/08/29 19:26:07 $        */
d190 3
d194 2
a195 2
        mx = (double) (0.5*(sx + gx) * factor);
        my = (double) (0.5*(sy + gy) * factor);
d215 1
a215 1
            offset *= offsgn * factor;
d224 2
a225 2
            cmpx = (sx + gx)/2;
            cmpy = (sy + gy)/2;
@


1.15
log
@removed "factor" calculation in offset option
@
text
@d1 1
a1 1
/* SUAZIMUTH: $Revision: 1.14 $ ; $Date: 2006/08/29 19:18:40 $		*/
d9 58
a66 51
"									",
" SUAZIMUTH - compute trace AZIMUTH given the sx,sy,gx,gy header fields	",
"		and set a user-specified header field to this value	",
"									",
"  suazimuth <stdin >stdout [optional parameters]			",
"									",
" Required parameters:							",
" none									",
"									",
" Optional parameters:							",
" key=otrav		header field to store computed azimuths in	",
" scale=1.0		value(key) = scale * azimuth			",
" az=0			0-179.9999 deg convention, reciprocity assumed	",
"			=1 0-359.999 deg convention, points from source ",
"			to receiver					",
" sector=1.0		if set, defines output in sectors of size	",
"			sector=degrees_per_sector, the default mode is  ",
"			the full range of angles specified by az	",
" offset=0		if offset=1 then set offset header field 	",
"			based on (sx,sy,gx,gy).  Since this is a 3-D    ",
"			offset it is unsigned.  For 2-D use sushw.	",
" cmp=0			if cmp=1 then set header fields for (cmpx,cmpy)	",
"			based on (sx,sy,gx,gy).  Header assignment is   ",
"			cmpx=tr.ep cmpy=tr.cdp				",
" Notes:								",
" The value of header word \"key\" is computed from the values of	",
" sx,sy,gx,gy. The output field \"otrav\" was chosen arbitrarily as an	",
" example of a little-used header field, however, the user may choose 	",
" any field that is convenient for his or her application.		",

" Setting the sector=number_of_degrees_per_sector sets key field to	",
" sector number rather than an angle in degrees.			",
"  									",
" For az=0, azimuths are measured from the North, however, reciprocity  ",
" is assumed, so azimuths go from 0 to 179.9999 degrees. If sector option",
" is set, then the range is from 0 to 180/sector. 			",
"  									",
" For az=1, azimuths are measured from the North, with the assumption that",
" the direction vector points from the receiver to the source, no	",
" reciprocity is assumed, so the angles go from 0 to 359.999 degrees.	",
" If the sector option is set, then the range is from 0 to 360/sector.	",
"									",
" Caveat: 								",
" This program honors the value of scalco in scaling the values of	", 
" sx,sy,gx,gy. Type: sukeyword scalco  for more information		",
"									",
" Type: sukeyword -o    to see the keywords and descriptions of all	",
"		       header fields.					",
"									",
" To plot midpoints, use:     su3dchart					",
"									",
d70 2
a71 2
 *	based on suchw, su3dchart
 *      CWP: John Stockwell and  UTulsa: Chris Liner, Oct 1998
d73 3
a75 2
 * 		cll: fixed offset option May 2003
 *		cll: added cmp option May 2003
d77 6
a82 3
 *  Algorithm:
 *    midpoint x  value  xm = (sx + gx)/2
 *    midpoint y  value  ym = (sy + gy)/2
d84 4
a87 4
 *   Azimuth will be defined as the angle, measured in degrees,
 *   turned from North, of a vector pointing to the source from the midpoint, 
 *   or from the midpoint to the source. Azimuths go from 0-179.000 degrees
 *   or from 0-180.0 degrees.
d89 3
a91 3
 *   value(key) = scale*[90.0 - (180.0/PI)*(atan((sy - ym)/(sx - xm))) ]
 *     or
 *   value(key) = scale*[180.0 - (180.0/PI)*(atan2((ym - sy),(xm - sx)) ]
d93 2
a94 1
 *   Trace header fields accessed: sx, sy, gx, gy, scalco. 
d96 1
a96 1
  */
d99 4
a102 4
/* prototype for function used internally */
void computeAzimuth(cwp_String type_out, Value *val_out,
			double sx, double sy, double gx, double gy,
			double mx, double my, double scale, int az);
d104 1
d110 118
a227 87
	cwp_String key;		/* output key			*/
	cwp_String type_out;	/*  type for output key		*/
	int index_out;		/*  index for output key 	*/
	Value val_out;		/* value of output key		*/

	double sx=0.0;		/* source x coordinate		*/
	double sy=0.0;		/* source y coordinate		*/
	double gx=0.0;		/* receiver x coordinate	*/
	double gy=0.0;		/* receiver y coordinate	*/
	double factor=0.0;	/* scaling factor		*/
	double scale=0.0;	/* value of scale		*/

	double mx, my;		/* x,y midpoint coordinates	*/
	int az=0;		/* azimuth convention flag	*/
	double sector=0;	/* azimuth by sectors		*/
	int oflag=0;		/* offset flag			*/
	double offset;		/* offset value			*/
	int cmpflag=0;		/* cmp flag			*/
	double cmpx,cmpy;		/* cmp coords			*/
	
	/* Initialize */
	initargs(argc, argv);
	requestdoc(1);

	/* Get parameters */
	/* get key's */
	if (!getparstring("key",&key)) 		key = "otrav";		
	if (!getpardouble("scale",&scale)) 	scale = 1.0;
	if (!getparint("az",&az))		az = 0;
	if (!getpardouble("sector",&sector)) 	sector = 1.0;
	if (!getparint("offset",&oflag))	oflag = 0;
	if (!getparint("cmp",&cmpflag))		cmpflag = 0;

	/* absorb sector into scale */
	scale = scale/sector;

	/* get type and index values of output */
	type_out  = hdtype(key);
	index_out = getindex(key);

	/* loop over traces */
	while (gettr(&tr)) {

		/* get header values */
		sx = (double) tr.sx;
		sy = (double) tr.sy;
		gx = (double) tr.gx;
		gy = (double) tr.gy;

		/* If tr.scalco not set, use 1 as the value */
		factor = (!tr.scalco) ? 1 : tr.scalco;

		/* factor < 0 means divide; factor > 0 means to multiply */
		if (factor < 0) factor = -1/factor;

		/* compute midpoints */
		mx = (double) (0.5*(sx + gx) * factor);
		my = (double) (0.5*(sy + gy) * factor);

		/* compute the azimuths */
		computeAzimuth(type_out, &val_out, sx, sy,
				gx, gy, mx, my, scale, az);

		/* put the new header value */
		puthval(&tr, index_out, &val_out);

		/* set offset header word, if requested */
		if (oflag != 0) {
			int offsgn=0;

			/* calculate sign of offset */
			offsgn=SGN(MIN((sx-gx),(sy-gy)));
			
			/* calcluate offset */
                        offset = sqrt((gx-sx)*(gx-sx) + (gy-sy)*(gy-sy));

			/* scale offset by scalel factor and set sign */
                        tr.offset = (int) offset*offsgn;
                }

		/* set cmp coord header words, if requested */
		if (cmpflag != 0) {
                        cmpx = (sx + gx)/2;
                        cmpy = (sy + gy)/2;
                        tr.ep  = (int) cmpx;
                        tr.cdp = (int) cmpy;
                }
d229 2
a230 2
		/* write traces */
		puttr(&tr);
d232 1
a232 1
	}
d234 1
a234 1
	return(CWP_Exit());
d237 2
d241 2
a242 3
void computeAzimuth(cwp_String type_out, Value *val_out,
			double sx, double sy, double gx, double gy,
			double mx, double my, double scale, int az)
d248 6
a253 8
sx		source x coordinate
sy		source y coordinate
gx		geophone x coordinate
gy		geophone y coordinate
mx		midpoint x coordinate
my		midpoint y coordinate
scale		scale factor
az		azimuth convention flag
d256 1
a256 1
val_out		value of output field
d260 4
a263 4
Based on suchw and su3dchart. Does computations as doubles. Outputs
either as 0-179.999 or 0-359.999 degrees, or in sectors of "sector"
degrees in size.

d266 2
d270 34
a303 1
	double dval_out=0.0;	/* output value			*/
d305 44
a348 51
	/* compute the output */
	if (az==0) { /* 0-179.999 convention */
		/* compute angle */
 		dval_out = scale*(90.0-
				DRADTODEG*atan((sy-my)/(sx-mx))); 

		/* Make output go from 0-179.99999 degrees. */
		if (dval_out == 180.000) dval_out = 0.0;

	} else { /* 0-359.999 */

		/* compute angle */
		dval_out = scale*DRADTODEG*atan2((sx-mx),(sy-my));

		/* Make output go from 0-359.99999 degrees. */
		if (dval_out < 0.) dval_out += 360.0;
	}

	/* Convert output to appropriate type */
	switch (*type_out) {
	case 's':
		err("can't change char header word");
	break;
	case 'h':
		val_out->h = (short) NINT(dval_out);
	break;
	case 'u':
		val_out->u = (unsigned short) NINT(dval_out);
	break;
	case 'l':
		val_out->l = (long) NINT(dval_out);
	break;
	case 'v':
		val_out->v = (unsigned long) NINT(dval_out);
	break;
	case 'i':
		val_out->i = (int) NINT(dval_out);
	break;
	case 'p':
		val_out->p = (unsigned int) NINT(dval_out);
	break;
	case 'f':
		val_out->f = (float) dval_out;
	break;
	case 'd':
		val_out->d = (double) dval_out;
	break;
	default:
		err("unknown type %s", type_out);
	break;
	}
@


1.14
log
@suazimuth.c
added scalel support, and sign to offset
@
text
@d1 1
a1 1
/* SUAZIMUTH: $Revision: 1.13 $ ; $Date: 2006/08/29 19:00:07 $		*/
a166 3
			/* honor scalel header field */
			factor = (!tr.scalel) ? 1 : tr.scalel;

d174 1
a174 1
                        tr.offset = (int) offset*factor*offsgn;
@


1.13
log
@version 1.13 restored from backups
@
text
@d1 1
a1 1
/* SUAZIMUTH: $Revision: 1.13 $ ; $Date: 2006/07/27 16:00:00 $		*/
d165 9
d175 3
a177 1
                        tr.offset = (int) offset;
@


1.12
log
@cwp exit function
@
text
@d1 1
a1 1
/* SUAZIMUTH: $Revision: 1.11 $ ; $Date: 2003/08/19 17:31:42 $		*/
d51 4
d222 2
a223 2
 		dval_out = scale*(NINT(90.0-
				DRADTODEG*atan((sy-my)/(sx-mx)))); 
d243 1
a243 1
		val_out->h = (short) dval_out;
d246 1
a246 1
		val_out->u = (unsigned short) dval_out;
d249 1
a249 1
		val_out->l = (long) dval_out;
d252 1
a252 1
		val_out->v = (unsigned long) dval_out;
d255 1
a255 1
		val_out->i = (int) dval_out;
d258 1
a258 1
		val_out->p = (unsigned int) dval_out;
@


1.11
log
@*** empty log message ***
@
text
@d1 1
a1 1
/* SUAZIMUTH: $Revision: 1.8 $ ; $Date: 1999/02/23 18:18:40 $		*/
d178 1
a178 1
	return EXIT_SUCCESS;
@


1.10
log
@9 June 2003
@
text
@d109 1
a109 1
	int offset;		/* offset value			*/
d111 1
a111 1
	int cmpx,cmpy;		/* cmp coords			*/
d137 4
a140 4
		sx = tr.sx;
		sy = tr.sy;
		gx = tr.gx;
		gy = tr.gy;
d161 2
a162 2
                        offset = (int) sqrt((gx-sx)*(gx-sx) + (gy-sy)*(gy-sy));
                        tr.offset = offset;
d169 2
a170 2
                        tr.ep  = cmpx;
                        tr.cdp = cmpy;
@


1.9
log
@*** empty log message ***
@
text
@d27 1
a27 1
" offset=0		if =1 then also set offset header field 	",
d30 3
d62 3
a64 1
 * 
d79 2
a80 1
 */
d109 3
a111 1
	int offset=0;		/* offset value			*/
d124 1
d160 1
a160 1
		if (offset != 0) {
d165 8
d178 1
a178 1
	return(CWP_Exit());
@


1.8
log
@Ian Kay's fix
@
text
@d1 1
a1 1
/* SUAZIMUTH: $Revision: 1.6 $ ; $Date: 1998/11/02 23:19:37 $		*/
d27 3
d58 1
d102 2
d115 1
d150 6
d161 1
a161 1
	return EXIT_SUCCESS;
@


1.7
log
@*** empty log message ***
@
text
@d188 2
a189 2
		dval_out = scale*(NINT(90.0-
				DRADTODEG*atan((sy-my)/(sx-mx))));
d197 1
a197 2
		dval_out = scale*(NINT(180.0-
				DRADTODEG*atan2((my-sy),(mx-sx))));
d199 2
a200 2
		/* Make output go from 0-179.99999 degrees. */
		if (dval_out == 360.000) dval_out = 0.0;
@


1.6
log
@small changes.
@
text
@d1 1
a1 1
/* SUAZIMUTH: $Revision: 1.5 $ ; $Date: 1998/11/02 21:22:11 $		*/
d24 3
d32 4
a35 1
"									",
d37 3
a39 2
" is assumed, so azimuths go from 0 to 179.9999 degrees, not from       ",
" 0-359.99999 degrees.							",
d41 3
a43 1
" the direction vector points from the receiver to the source.		",
d63 1
d97 1
d108 4
d175 3
a177 2
Based on suchw and su3dchart. Does computations as doubles. Outputs 
azimuthal angle turned positive clockwise (as seen from above) from North.
@


1.5
log
@cleaner version.
@
text
@d1 1
a1 1
/* SUAZIMUTH: $Revision: 1.4 $ ; $Date: 1998/11/02 20:55:00 $		*/
d85 1
a85 1
	float mx, my;		/* x,y midpoint coordinates	*/
d118 2
a119 2
		mx = (float) (0.5*(sx + gx) * factor);
		my = (float) (0.5*(sy + gy) * factor);
d146 4
@


1.4
log
@added 0-360 convention
@
text
@d1 1
a1 1
/* SUAZIMUTH: $Revision: 1.3 $ ; $Date: 1998/10/29 00:47:08 $		*/
d24 1
a24 1
" Notes:                                                                ",
d37 3
a39 1
"                       header fields.					",
d44 1
a44 1
 *	based on suchw
d55 3
a57 1
 *   value(key) = scale*[90.0 - (180.0/PI)*(atan((sx - xm)/(sy - ym))) ]
d59 1
d65 2
a66 5
		 	cwp_String type_sx, Value *val_sx,
			cwp_String type_sy, Value *val_sy,
			cwp_String type_gx, Value *val_gx,
			cwp_String type_gy, Value *val_gy,
			float scale, int az);
a73 1

a74 5
	cwp_String type_sx;	/*  type for sx			*/
	cwp_String type_sy;	/*  type for sy			*/
	cwp_String type_gx;	/*  type for gx			*/
	cwp_String type_gy;	/*  type for gy			*/

a75 5
	int index_sx;		/*      ....  sx		*/
	int index_sy;		/*      ....  sy		*/
	int index_gx;		/*      ....  gx		*/
	int index_gy;		/*      ....  gy		*/

a76 4
	Value val_sx;		/* value of sx			*/
	Value val_sy;		/* value of sy			*/
	Value val_gx;		/* value of gx			*/
	Value val_gy;		/* value of gy			*/
d78 6
a83 1
	float scale=0.0;	/* value of scale		*/
d85 1
d95 1
a95 1
	if (!getparfloat("scale",&scale)) 	scale = 1.0;
d98 1
a98 1
	/* get type and index values */
a99 5
	type_sx  = hdtype("sx");
	type_sy  = hdtype("sy");
	type_gx  = hdtype("gx");
	type_gy  = hdtype("gy");

a100 4
	index_sx = getindex("sx");
	index_sy = getindex("sy");
	index_gx = getindex("gx");
	index_gy = getindex("gy");
d106 14
a119 4
		gethval(&tr, index_sx, &val_sx);
		gethval(&tr, index_sy, &val_sy);
		gethval(&tr, index_gx, &val_gx);
		gethval(&tr, index_gy, &val_gy);
d122 2
a123 4
		computeAzimuth(type_out, &val_out,
				type_sx, &val_sx, type_sy, &val_sy,
				type_gx, &val_gx, type_gy, &val_gy,
				scale, az);
d125 1
a125 1
		/* put the new header values */
d139 2
a140 5
		 	cwp_String type_sx, Value *val_sx,
			cwp_String type_sy, Value *val_sy,
			cwp_String type_gx, Value *val_gx,
			cwp_String type_gy, Value *val_gy,
			float scale, int az)
d146 2
a147 9
type_out	type of output field
type_sx		type of sx field
val_sx		pointer to value of sx
type_sy		type of sy field
val_sy		pointer to value of sy
type_gx		type of gx field
val_gx		pointer to value of gx
type_gy		type of gy field
val_gy		pointer to value of gy
d156 2
a157 2
Based on suchw. Does computations as doubles. Outputs azimuthal angle
turned positive clockwise (as seen from above) from North.
d163 1
a163 7
	double dval_sx=vtod( type_sx, *val_sx); /* value of sx */
	double dval_sy=vtod( type_sy, *val_sy); /* value of sy */
	double dval_gx=vtod( type_gx, *val_gx); /* value of gx */
	double dval_gy=vtod( type_gy, *val_gy); /* value of gy */
	double dmx = (dval_sx + dval_gx)/2.0;	/* midpoint x coordinate */
	double dmy = (dval_sy + dval_gy)/2.0;	/* midpoint y coordinate */
	double dval_out;		/* output values */
d169 1
a169 1
				DRADTODEG*atan((dval_sy-dmy)/(dval_sx-dmx))));
d178 1
a178 1
				DRADTODEG*atan2((dmy-dval_sy),(dmx-dval_sx))));
a182 1

@


1.3
log
@*** empty log message ***
@
text
@d1 1
a1 1
/* SUAZIMUTH: $Revision: 1.2 $ ; $Date: 1998/10/29 00:36:19 $		*/
d19 5
a23 3
" key=otrav		key field to store computed azimuths in		",
" scale=10		value(key) = scale * azimuth			",
"									",
d28 7
a34 1
" any field that is convenient.						",
d36 2
a37 1
" Type: sukeyword -o  to see all fields.				",
d43 1
a43 1
 *      CWP: John Stockwell, 28 Oct 1998
d50 2
a51 2
 *   turned clockwise (as seen from above) from North, of a vector 
 *   pointing to the source from the midpoint. 
d63 2
a64 1
			cwp_String type_gy, Value *val_gy, float scale);
d93 2
d102 2
a103 1
	if (!getparfloat("scale",&scale)) 	scale = 10.0;		
d127 1
d130 8
a137 1
				type_gx, &val_gx, type_gy, &val_gy, scale);
a138 1
			puthval(&tr, index_out, &val_out);
a139 1
	puttr(&tr);
d150 2
a151 1
			cwp_String type_gy, Value *val_gy, float scale)
d167 1
d187 21
a207 1
	double dval_out = scale*(NINT(90.0-DRADTODEG*atan((dval_sy-dmy)/(dval_sx-dmx))));
@


1.2
log
@documentation
@
text
@d1 1
a1 1
/* SUAZIMUTH: $Revision: 1.1 $ ; $Date: 1998/10/29 00:15:43 $		*/
d44 1
a44 1
 *   value(key) = scale*[90.0 - (180/PI)*(atan((sx - xm)/(sy - ym))) ]
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/* SUAZIMUTH: $Revision: 1.12 $ ; $Date: 1997/07/28 22:36:46 $		*/
d10 1
a10 1
" SUAZIMUTH - compute trace AZIMUTHs given the sx,sy,gx,gy header fields",
d20 1
a20 1
" scale=10		value(otrav) = scale * azimuth			",
d22 7
a28 1
" The value of header word key is computed from the values of sx,sy,gx,gy",
d44 1
a44 1
 *   az = atan( (sx - xm)/ (sy - ym) ) * (180/PI)
a45 1
 *   key is set to   az*scale 
d69 1
a69 1
	int index_out;	/*  index for output key 	*/
d75 1
a75 1
	Value val_out;	/* value of output key		*/
d119 2
a120 2
		}
		puttr(&tr);
d132 27
d168 1
@
