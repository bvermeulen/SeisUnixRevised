head	1.1;
access;
symbols;
locks
	john:1.1; strict;
comment	@ * @;


1.1
date	2022.11.21.18.47.40;	author john;	state Exp;
branches;
next	;


desc
@suflex2d
@


1.1
log
@Initial revision
@
text
@/* Copyright (c) Colorado School of Mines, 2022.*/
/* All rights reserved.                       */

/* SUFLEX2D: $Revision: 1.00 $ ; $Date: 2022/10/27 00:01:00 $      */

#include <stdio.h>
#include <string.h>

#include "su.h"
#include "segy.h"

segy tr;

/*********************** self documentation **********************/
char *sdoc[] = {
"                                                                            ",
" SUFLEX2D - Duplicate Some Traces Into CDPs From Neighbouring CDPs.         ",
"                                                                            ",
" suflex2d     <in.su >out.su  (other parameters)                            ",
"                                                                            ",
" This program assigns input traces of a cdp to offset bins (offset ranges). ",
" If an output cdp does not have a user-specified number of traces in an     ",
" offset bin, this program searches the neighbouring cdps and duplicates and ",
" outputs traces from the same offset bin. The neighbouring traces that are  ",
" closer to the output cdp centre have higher duplication priority. To know  ",
" which traces are closer to cdp centre, this program uses igi key values.   ",
" The igi key values should be the inline distance between trace midpoint    ",
" coordinates and cdp profile coordinates, as computed by program sunearcsv. ",
"                                                                            ",
" Traces duplicated from neighbouring cdps have their cdp key value changed  ",
" to the output cdp they are duplicated into. (Also their igi key is changed ",
" as described in the igiadd parameter). Note that being duplicated and      ",
" output does not mean that a trace is deleted from a neighbouring cdp.      ",
" A trace may be deleted if option keepmore is 0, but that is unrelated to   ",
" the duplication.                                                           ",
"                                                                            ",
" Input traces must be ordered by cdp and absolute value of offset. This is  ",
" checked and an error-halt will occur at the first input trace where this   ",
" is not the case. (See Note On Output for a slight exception to this).      ",
"                                                                            ",
" Parameter overview:                                                        ",
"                                                                            ",
" maxflex=1    Maximum Relative cdp to include in flexing. Must be equal to  ",
"              zero or greater. This program uses the input traces of cdps   ",
"              from minflex to maxflex (inclusive) around each output cdp.   ",
"                                                                            ",
" minflex= -maxflex  Minimum Relative cdp to include in flexing. Must be     ",
"                    equal to zero or smaller. The default is the magnitude  ",
"                    of maxflex with a negative sign.                        ",
"                                                                            ",
" maxfold=100  Maximum number of traces per input cdp gather.                ",
"              Note that the output cdp gathers usually have more traces     ",
"              than input cdps (and sometimes more traces than this value).  ",
"                                                                            ",
" binsize=25   Offset Bin Size.                                              ",
"              Note: The offsets are absolute valued before use herein.      ",
"              Note: Even though the offset key contains integers,           ",
"                    this parameter allows floating point numbers.           ",
"              Note: Offset bins contain their lower boundary but their      ",
"                    higher boundary belongs to the next higher bin.         ",
"                                                                            ",
" binalign=binsize/2   Offset Bin Alignment. Default is half of binsize.     ",
"                      Specify the offset value at the centre of any bin     ",
"                      that you find convenient. For instance, usually, the  ",
"                      nominal minimum shot-to-receiver distance produces    ",
"                      a good alignment of the bin centres.                  ",
"              Note: Even though the offset key contains integers,           ",
"                    this parameter allows floating point numbers.           ",
"              Note: This parameter does not restrict the offset range, the  ",
"                    offset bins extend from 0 to infinity and all traces    ",
"                    are put into some offset bin. Empty bins are ignored.   ",
"              Note: Having an offset distance closer to the bin centre does ",
"                    not give higher priority to a trace. Traces in the same ",
"                    bin have priority only based on cdp and igi key values. ",
"                                                                            ",
" binfold=2    Desired Number of Traces Per Offset Bin. Typical split-spread ",
"              surveys have two traces with the same offset in each cdp.     ",
"                                                                            ",
" binbest=0    Use IGI key values to determine which traces are better to    ",
"              duplicate to fullfill binfold requirements. Typically, igi    ",
"              values come from the sunearcsv program and contain the        ",
"              signed inline distance (positive values means traces are      ",
"              closer to next cdp, negative means closer to previous cdp).   ",
"        =1    Use IGC key values but absolute value them. Typically, igc    ",
"              values come from the sunearcsv program and contain the        ",
"              signed crossline distance. But this option absolute values    ",
"              them before use herein. So it does not matter which side of   ",
"              profile traces are located, only how far away they are in     ",
"              the crossline direction (smaller absolute values are better). ",
"        =2    Use IGC key values but do not absolute value them.            ",
"              Smaller values (including negatives) are better. Normally     ",
"              you would not use this option for igc values directly from    ",
"              sunuearcsv since it means prefering one crossline direction.  ",
"        =-2   Same as option 2, but reverse the sign of IGC values first.   ",
"              This makes larger values better.                              ",
"        =3    Use OFFSET key values. Values closer to the centre of the     ",
"              offset bin of the trace are better (see binalign parameter).  ",
"              Typically you might use this option with the subinbigcsv      ",
"              program (and set binfold=1) to select traces from a super-cdp ",
"              to get a nice offset distribution for analysis/display/tests. ",
"        Note: Remember that trace priority only applies when comparing      ",
"              symmetric cdps around the output cdp. Input traces for each   ",
"              cdp always have more priority than input traces of any        ",
"              neighbouring cdps. And a close neighbouring cdp always has    ",
"              more priority than a far neighbouring cdp. Only SYMMETRIC     ",
"              neighbouring cdps have their igi or igc values compared.      ",
"        Note: If igi or igc values are all zero (or any constant), traces   ",
"              will still be duplicated from the closest neighbouring cdp to ",
"              fullfill binfold requirements. So you can still use suflex2d  ",
"              even if you have not used sunearcsv to set igi,igc.           ",
"        Note: No option here uses igi or igc as true distances, only to     ",
"              determine the relative priority for duplicating traces.       ",
"              You can therefore set one of these keys yourself to some      ",
"              priority that you have computed.                              ",
"                                                                            ",
" keepmore=0   Do not keep more than binfold traces per bin. Traces in target",
"              cdp always have priority over traces of neighbouring cdps.    ",
"              But sometimes the target cdp already has more input traces in ",
"              an offset bin than binfold. Option 0 here means that excess   ",
"              traces with the worst binbest priority values are not output. ",
"         =1   Output those traces anyway.                                   ",
"                                                                            ",
" igiadd=100   Add this to the igi key values for output traces that are     ",
"              duplicated into a cdp from neighbouring cdps. Multiply this   ",
"              value by the difference in cdp numbers between current cdp    ",
"              and whichever neighbouring cdp the trace originated from.     ",
"              Usually you should use a value here that easily allows you to ",
"              tell which output traces originated from neighbouring cdps.   ",
"              But in some cases setting this to the distance between cdps   ",
"              is a good choice (especially if you are attempting to cascade ",
"              the flexing - see next note).                                 ",
"              Note that this value is added to the igi key values even if   ",
"              the binbest option is 1 or 2.                                 ",
"                                                                            ",
" Note On Output:                                                            ",
"       Traces duplicated from neighbouring CDPs have their cdp key value    ",
"       changed to the cdp they are duplicated into. (Also their igi key is  ",
"       changed as described in the igiadd parameter). But duplicated traces ",
"       are not output in true offset order, just in their bin order. This   ",
"       means the output must be re-sorted by offset distance if you need    ",
"       to have true offset order.                                           ",
"       And, this program has a slight exception to requirement that input   ",
"       be ordered by cdp and absolute value of offset. The traces only must ",
"       be ordered by cdp and absolute value of offset bins. Within bins the ",
"       offsets can be out-of-order. Thus output from this program can be    ",
"       re-input without sorting (if binsize and binalign remain the same).  ",
"           (Re-input allows cascading of the flexing, but requires          ",
"            extensive understanding of the situation).                      ",
" ------------------------------------------------------------------------   ", 
"                                                                            ",
NULL};

/* Credits:                                                                  */
/* Author: Andre Latour, Nov 2022                                            */ 
/*                                                                           */
/* Trace keys involved: cdp,offset,igi                                       */
/*                                                                           */
/**************** end self doc ***********************************************/

void flexit (segy ***atrace, int **abin, int **abest, int *afold, int *acdp, 
             int numgathers, int targetcdp, int minflex, int maxflex, 
             int binfold, int binbest, int keepmore, int igiadd, 
             int **ause, int *ablo, int *abhi, int *numout);

int main(int argc, char **argv) {

  segy ***rolltrace; 
  int   **rollbin; 
  int   **rollbest; 
  int   **rolluse; 
  int   *rollfold;
  int    *rollcdp;
  int    *rollblo;
  int    *rollbhi;

  int nproct=0;
  int mproct=0;
  int icycle=1;
  int newcdp = 1;
  int iroll=1;
  int i=0;
  int j=0;
  int maxfold=100;
  int targetcdp = 0;
  int binfold = 2;
  int binbest = 0;
  int keepmore = 0;
  int minflex = -1;
  int maxflex = 1;
  int numgathers = 3;                                                                    
  double binsize = 25.0;
  double binalign = 12.5; 
  int igiadd = 100;
  int numout = 0;
  int iend=0;
  int maxstoredcdp=0;

/* Initialize */
  initargs(argc, argv);
  requestdoc(1);

  if(!getparint("maxflex", &maxflex)) maxflex = 1;
  if(maxflex<0) err("error: maxflex must be equal to or greater than 0.");

  if(!getparint("minflex", &minflex)) minflex = 0 - maxflex;
  if(minflex>0) err("error: minflex must be equal to or less than 0.");

  numgathers = maxflex - minflex + 1; 

  if(!getparint("maxfold", &maxfold)) maxfold = 100;
  if(maxfold<1) err("error: maxfold must be greater than 0.");

  if(!getparint("binfold", &binfold)) binfold = 2;
  if(binfold<1) err("error: binfold must be greater than 0.");

  if(!getparint("binbest", &binbest)) binbest = 0;
  if(binbest!=-2 && binbest!=0 && binbest!=1 && binbest!=2 && binbest!=3)
  err("error: binbest parameter is not one of the options.");

  if(!getpardouble("binsize", &binsize)) binsize = 25.;
  if(binsize<=0.0) err("error: binsize must be greater than 0.0");

  if(!getpardouble("binalign", &binalign)) binalign = binsize / 2.0;
  if(binalign<0.0) err("error: binalign must be equal to or greater than 0.0");
  binalign = fmod(binalign,binsize);

  if(!getparint("keepmore", &keepmore)) keepmore = 0;

  if(!getparint("igiadd", &igiadd)) igiadd = 100;

/* Allocate the closest thing that c has to two-dimensional arrays.          */
/* The first index [i] is going to be used in a rolling-buffer way           */
/* (each new cdp replaces the going-out-of-range cdp).                       */

  rolltrace = (segy ***)ealloc1(sizeof(segy**),numgathers);
  rollbin  = (int **)ealloc1(sizeof(int*),numgathers);
  rollbest = (int **)ealloc1(sizeof(int*),numgathers);
  rolluse  = (int **)ealloc1(sizeof(int*),numgathers);
  rollfold = (int *)ealloc1(sizeof(int),numgathers);
  rollcdp  = (int *)ealloc1(sizeof(int),numgathers);
  rollblo  = (int *)ealloc1(sizeof(int),numgathers);
  rollbhi  = (int *)ealloc1(sizeof(int),numgathers);

  for (i=0; i<numgathers; i++) {
    rollbin[i]  = (int *)ealloc1(sizeof(int),maxfold+2); /* note extra 2      */
    rollbest[i] = (int *)ealloc1(sizeof(int),maxfold);
    rolluse[i]  = (int *)ealloc1(sizeof(int),maxfold);
    rollfold[i] = 0;
    rollcdp[i]  = 0;
    rollblo[i]  = 0;
    rollbhi[i]  = 0;
    rolltrace[i] = (segy **)ealloc1(sizeof(segy*),maxfold);
    for (j=0; j<maxfold; j++) {
      rolltrace[i][j] = (segy *)ealloc1(sizeof(segy),sizeof(char));
    }
  }

  checkpars(); 

/* ---Start processing traces.--------------------------------    */

  newcdp = 0;
  icycle = 1;
  targetcdp = 0;
  iend   = 0;

/* loop over traces   */ 

  while(icycle==1) {
    if(gettr(&tr)) {

/* To get started, pretend that numgather cdps were already stored but were   */
/* lower than the flex range for the first input cdp.                         */
/* Note that the flexit function expects rollfold >0 and is not explicitly    */
/* coded to deal with rollfold =0, so we set these pretend cdp numbers lower  */
/* than the low end of the flex range to make flexit ignore these gathers.    */

      if(nproct==0) {
        iroll = 0;                                      
        targetcdp  = tr.cdp + minflex - 1; /* remember minflex is <1          */
        for (i=0; i<numgathers; i++) {
          rollcdp[i] = tr.cdp + minflex - 10*(i+1);
          rollfold[i] = 0;
        }
        maxstoredcdp = rollcdp[0];
      }
      nproct++;

      if(rollcdp[iroll] == tr.cdp) {
        if(rollfold[iroll] == maxfold) {
          err("error: At input trace count %d there are more than maxfold (%d) traces in cdp %d.",
              nproct,maxfold,tr.cdp);
        }
        rollbin[iroll][rollfold[iroll]] = 0.5000001 + (abs(tr.offset) - binalign) / binsize; 
        if(rollbin[iroll][rollfold[iroll]] < rollbin[iroll][rollfold[iroll]-1]) {
          err("error: At input trace count %d (cdp %d) trace is not in offset (bin) order.",
              nproct,tr.cdp);
        }
        memcpy(rolltrace[iroll][rollfold[iroll]],&tr,sizeof(segy));
        if(binbest==0) rollbest[iroll][rollfold[iroll]] = tr.igi;
        else if(binbest==1) rollbest[iroll][rollfold[iroll]] = abs(tr.igc);
        else if(binbest==2) rollbest[iroll][rollfold[iroll]] = tr.igc; 
        else if(binbest==-2) rollbest[iroll][rollfold[iroll]] = 0 - tr.igc; 
        else rollbest[iroll][rollfold[iroll]] = abs((int)(rollbin[iroll][rollfold[iroll]] * binsize + binalign) - tr.offset); 
        rolluse[iroll][rollfold[iroll]] = 0; 
        rollfold[iroll] = rollfold[iroll] + 1;
      }
      else {
        newcdp = 1;
      }
    }
    else { /* no more traces to input */
      newcdp = 1;
      icycle = 0;
      iend   = maxflex*2; 
    }

    if(newcdp==1) {
      newcdp = 0;

/* Note there might still be no traces output by flexit for targetcdp since   */ 
/* the stored cdps might be, for example: 5,12,30 while the targetcdp is 18.  */ 

      while(targetcdp < maxstoredcdp + 1-maxflex + iend) {
        flexit (rolltrace, rollbin, rollbest, rollfold, rollcdp, 
                numgathers, targetcdp, minflex, maxflex, 
                binfold, binbest, keepmore, igiadd, 
                rolluse, rollblo, rollbhi, &numout);
        mproct += numout;
        targetcdp++;
      }

/* After (trying to) flex the targetcdp, use the rolling buffers to store    */
/* input traces and values of the next cdp. Remember that the trace already  */
/* read-into tr is the first trace to store for THIS input cdp.              */
/* Note: Next code repeats uselessly when icycle=0 but not worth an if test. */

      if(rollcdp[iroll] > tr.cdp) {
        err("error: At input trace count %d (cdp %d) is not in cdp order",
            nproct,tr.cdp);
      }

      iroll++;
      if(iroll==numgathers) iroll = 0;
      rollcdp[iroll] = tr.cdp;
      memcpy(rolltrace[iroll][0],&tr,sizeof(segy));
      rollbin[iroll][0] = 0.5000001 + (abs(tr.offset) - binalign) / binsize; 
      if(binbest==0) rollbest[iroll][0] = tr.igi;
      else if(binbest==1) rollbest[iroll][0] = abs(tr.igc);
      else if(binbest==2) rollbest[iroll][0] = tr.igc; 
      else if(binbest==-2) rollbest[iroll][0] = 0 - tr.igc; 
      else rollbest[iroll][0] = abs((int)(rollbin[iroll][0] * binsize + binalign) - tr.offset); 
      rolluse[iroll][0] = 0; 
      rollfold[iroll] = 1;
      maxstoredcdp = tr.cdp;

    } /* end of if(newcdp) { */
  } /* end of  while(icycle==1) {  */

  warn("Number of traces input=%d.  Number output=%d.",nproct,mproct);

  return 0;

}

void flexit (segy ***atrace, int **abin, int **abest, int *afold, int *acdp, 
             int numgathers, int targetcdp, int minflex, int maxflex, 
             int binfold, int binbest, int keepmore, int igiadd, 
             int **ause, int *ablo, int *abhi, int *numout) {

/*    Flexit duplicates some traces into cdps from neighbouring cdps.         */     
/*                                                                            */     
/* This function inputs cdp gathers, trace offset bins, and abest values.     */
/* If a targetcdp does not have the specified number of traces in a bin, this */
/* function uses cdps from targetcdp+minflex to targetcdp+maxflex (inclusive) */
/* and duplicates and outputs traces from the same bin number. Traces that are*/
/* better have higher duplication priority (priority determined by binbest).  */
/*                                                                            */     
/* For binbest=0 the abest values should be similar to igi values output from */
/* the sunearcsv program (inline distance away from cdp centre, with positive */
/* meaning the trace is closer to the next cdp centre location and negative   */
/* meaning the trace is closer to the previous cdp centre location).          */
/* For binbest!=0 it simply means that smaller abest values are better than   */
/* larger values (note: for binbest!=0 values less than 0 are allowed,        */
/* because they are indeed smaller than positive values). So, when using igc  */
/* values from sunearcsv program, you usually should absolute value them      */
/* before input to this function (that is, typically you do not care which    */
/* side of a profile a trace is, just how far away).                          */
/* Note also that abest values are not treated as true distances by either    */
/* binbest option. This function only compares abest values. This means that  */
/* you can compute your own priority values, put them into either igi or igc  */
/* key and then copy them into abest for use herein.                          */
/*                                                                            */     
/* Traces duplicated from neighbouring cdps have their cdp key value changed  */
/* to the targetcdp they are duplicated into. (Also their igi key is changed  */
/* as described in the igiadd parameter). Note that being duplicated and      */
/* output does not mean that a trace is deleted from a neighbouring cdp.      */
/* A trace may be deleted if option keepmore is 0, but that is unrelated to   */
/* the duplication.                                                           */
/*                                                                            */     
/* ****************************************************************************/     
/* Traces in an input gather must be ordered by increasing offset bin numbers.*/
/* ****************************************************************************/     
/*                                                                            */     
/* Input arguments containing values:            Meaning                      */     
/*                                                                            */     
/* atrace[numgathers][fold][sizeof(segy)]   Stored traces                     */     
/* abin[numgathers][fold+2]                 Bin Number (+2 for flags set here)*/     
/* abest[numgathers][fold]                  Trace priority (within cdp,bin)   */     
/* afold[numgathers]                        Number of traces in gathers       */     
/* acdp[numgathers]                         CDP number of gather              */     
/* numgathers                               Number of gathers                 */     
/* targetcdp                                Target cdp number to flex         */     
/* minflex                                  Relative minimum cdp in range     */     
/* maxflex                                  Relative maximum cdp in range     */     
/* binfold                                  Desired traces per offset bin     */     
/* binbest                              0 = abest (signed inline dist)        */     
/*                                     !0 = abest (smaller is better)         */     
/* keepmore                             0 = no keep traces if > binfold       */     
/*                                      1 = keep traces if > binfold          */     
/* igiadd                                   Add (neighbour-target)*igiadd     */     
/*                                          to output igi key values.         */     
/*                                          Note it is always the igi key     */     
/*                                          that is changed, even when        */     
/*                                          binbest!=0.                       */     
/*                                                                            */     
/* Input arguments just for memory (they are set herein):                     */     
/*                                                                            */     
/* ause[numgathers][fold]                   Used flags for stored traces      */     
/* ablo[numgathers]                         Low trace in current bin          */     
/* abhi[numgathers]                         High trace in current bin         */     
/*                                                                            */     
/*                                                                            */     
/* Output arguments:                                                          */     
/*                                                                            */     
/* numout                                        Number of traces output.     */     
/* (puttr)                                       Traces are output by puttr.  */     
/*                                                                            */     
  int i = 0;
  int j = 0;
  int k = 0;
  int m = 0;
  int numbin = 0;
  int kbin = 0;            
  int ngather = 0;
  int ntrace = 0;
  int nigi = 0;
  int ncdp = 0;
  int migi = 0;

  *numout = 0;

/* Reminder: The traces in each gather are offset ordered.                    */
/*  a. Set overall lowest and highest offset bin numbers.                     */
/*  b. Set trace used flags to no. Note that since each bin uses a different  */
/*     set of traces, there is no need to reset ause between kbin values.     */
/*  c. Set starting ranges-of-traces for lowest bin number in each gather,    */
/*     also set ending ranges-of-traces to 0 (just on general principle).     */

  int klbin =  2147483645;
  int khbin = -2147483645;
  for (i=0; i<numgathers; i++) {
    if(afold[i]>0) {
      if(klbin > abin[i][0]) klbin = abin[i][0];
      if(khbin < abin[i][afold[i]-1]) khbin = abin[i][afold[i]-1];
      for (j=0; j<afold[i]; j++) ause[i][j] = 0; 
    }
    ablo[i] = 0; 
    abhi[i] = 0;        

/* Set the extra 2 end values to stop the while loops (otherwise, during the  */
/* whiles you have to check that ablo[i] and abhi[i] stay less than afold[i]) */

    abin[i][afold[i]]   = 2147483644; 
    abin[i][afold[i]+1] = 2147483645; /* yes, flag is deliberately 1 bigger   */ 

  }

/* (Main loop). Over the range of offset bins in these gathers.               */

  for (kbin=klbin; kbin<=khbin; kbin++) {

    numbin = 0;

    for (i=0; i<numgathers; i++) {

/* Skip if cdp of gather is out-of-range.                                     */

      if(targetcdp >= acdp[i]+minflex && targetcdp <= acdp[i]+maxflex) {

/* Set low  location of trace-in-gather to where trace bin >= current bin     */
/* Set high location of trace-in-gather to where trace is in the next bin.    */

        while(abin[i][ablo[i]] < kbin) ablo[i] = ablo[i] + 1;
        abhi[i] = ablo[i] + 1;
        while(abin[i][abhi[i]] == abin[i][ablo[i]]) abhi[i] = abhi[i] + 1; 
      }

    } /* end of  for (i=0; i<numgathers; i++) { */

/* Use an infinite loop here, break out below. (m useful for some debuging).  */ 
/* Within this, we find the best trace, output it, and mark that it has been  */ 
/* output (ause). Then we loop again to find the best of the un-output traces.*/ 
/* When no un-used traces remain, or we have fullfilled the flex desires, we  */ 
/* break out. (It might save cpu time to compute desirability of traces into  */ 
/* a list and sort the list, you are welcome to re-code it that way).         */ 

    for (m=0; ;m++) { 
      ngather = -1;
      ntrace = -1;
      nigi = 2147483645;
      ncdp = -1;
      for (i=0; i<numgathers; i++) {

/* Skip if cdp of gather is out-of-range.                                     */

        if(targetcdp >= acdp[i]+minflex && targetcdp <= acdp[i]+maxflex) {

          if(abin[i][ablo[i]] == kbin) { /* bin number of top trace current?  */
            for (k=ablo[i]; k<abhi[i]; k++) {  /* cycle traces of bin number. */ 

/* We want to use the traces that match targetcdp before any other traces,    */
/* so take advantage of the fact that igi key is only a short int (< 32765).  */
/* Add 100000 for each cdp greater and subtract 100000 for every cdp smaller  */
/* than the targetcdp (remember that a positive igi for larger cdps actually  */
/* means the trace is further from the targetcdp centre, and vice-versa).     */
/* (Same general idea for igc key values using binbest option!=0).            */

              if(binbest==0) migi = abs(abest[i][k]  +    (acdp[i]-targetcdp)*100000);
              else           migi =     abest[i][k]  + abs(acdp[i]-targetcdp)*100000;

              if(ause[i][k] == 0 && migi < nigi) {
                nigi = migi;
                ngather = i;                                                         
                ntrace = k;  
                ncdp   = acdp[i];
              } 
            }
          }
        }

      } /* end of  for (i=0; i<numgathers; i++) { */

      if(ngather == -1) break; /* all traces in range have been used (output).*/

/* If keeping all traces in targetcdp gather and we have more than the desired*/ 
/* minimum fold per bin and this trace is not in the targetcdp then do not    */
/* output it. And remember that all traces in the targetcdp have nigi numbers */
/* that are less than 32765 and those traces are always returned from above   */
/* loop before the first trace in non-targetcdp gathers - so can break..      */

      if(keepmore==1 && numbin>=binfold && nigi>50000) break; 

      if(ncdp == targetcdp) {
        puttr(atrace[ngather][ntrace]);                                               
      }
      else { /* change cdp and igi before output, then back in stored trace   */
        atrace[ngather][ntrace]->cdp  = targetcdp;
        atrace[ngather][ntrace]->igi += (ncdp-targetcdp)*igiadd;
        puttr(atrace[ngather][ntrace]); 
        atrace[ngather][ntrace]->cdp  = ncdp;
        atrace[ngather][ntrace]->igi -= (ncdp-targetcdp)*igiadd;
      }
      ause[ngather][ntrace] = 1;     
      numbin  = numbin + 1;
      *numout = *numout + 1;

      if(keepmore==0 && numbin==binfold) break;

    } /* end of  for (m=0; m<99999; m++) { */

  } /* end of  for (kbin=klbin; kbin<=khbin; kbin++) { */

  return;
}

@
