head	1.25;
access;
symbols;
locks; strict;
comment	@ * @;


1.25
date	2011.11.16.22.10.29;	author john;	state Exp;
branches;
next	1.24;

1.24
date	2011.11.12.00.20.05;	author john;	state Exp;
branches;
next	1.23;

1.23
date	2010.01.20.23.32.26;	author john;	state Exp;
branches;
next	1.22;

1.22
date	2008.05.29.20.38.49;	author john;	state Exp;
branches;
next	1.21;

1.21
date	2004.01.28.21.30.40;	author john;	state Exp;
branches;
next	1.20;

1.20
date	2003.06.09.16.17.07;	author john;	state Exp;
branches;
next	1.19;

1.19
date	97.07.28.22.36.46;	author john;	state Exp;
branches;
next	1.18;

1.18
date	97.05.09.17.26.11;	author john;	state Exp;
branches;
next	1.17;

1.17
date	96.09.13.21.49.05;	author john;	state Exp;
branches;
next	1.16;

1.16
date	96.02.05.21.07.32;	author jkc;	state Exp;
branches;
next	1.15;

1.15
date	95.07.10.15.51.53;	author john;	state Exp;
branches;
next	1.14;

1.14
date	95.07.10.13.54.25;	author john;	state Exp;
branches;
next	1.13;

1.13
date	95.06.29.10.24.46;	author john;	state Exp;
branches;
next	1.12;

1.12
date	95.06.28.11.36.01;	author john;	state Exp;
branches;
next	1.11;

1.11
date	94.09.06.13.31.30;	author jkc;	state Exp;
branches;
next	1.10;

1.10
date	94.08.25.15.00.49;	author jkc;	state Exp;
branches;
next	1.9;

1.9
date	93.08.09.15.19.54;	author john;	state Exp;
branches;
next	1.8;

1.8
date	92.10.26.13.54.35;	author john;	state Exp;
branches;
next	1.7;

1.7
date	91.09.05.08.51.46;	author jkcohen;	state Exp;
branches;
next	1.6;

1.6
date	91.06.21.13.47.13;	author jkcohen;	state Exp;
branches;
next	1.5;

1.5
date	91.02.26.13.32.58;	author jkcohen;	state Exp;
branches;
next	1.4;

1.4
date	91.02.22.15.45.14;	author jkcohen;	state Exp;
branches;
next	1.3;

1.3
date	91.02.22.13.42.33;	author jkcohen;	state Exp;
branches;
next	1.2;

1.2
date	90.09.03.09.54.01;	author jkc;	state Exp;
branches;
next	1.1;

1.1
date	90.04.20.20.40.02;	author jkc;	state Exp;
branches;
next	;


desc
@set a header key word
@


1.25
log
@added Reg Beardsley's checkpar() call
@
text
@/* Copyright (c) Colorado School of Mines, 2011.*/
/* All rights reserved.                       */

/* SUSHW: $Revision: 1.23 $ ; $Date: 2010/01/20 23:32:26 $		*/

#include "su.h"
#include "segy.h"
#include "header.h"

/*********************** self documentation ******************************/
char *sdoc[] = {
" 									",
" SUSHW - Set one or more Header Words using trace number, mod and	",
"	 integer divide to compute the header word values or input	",
"	 the header word values from a file				",
" 									",
" ... compute header fields						",
"   sushw <stdin >stdout key=cdp,.. a=0,..  b=0,.. c=0,.. d=0,.. j=..,..",
" 									",
" ... or read headers from a binary file				",
"   sushw <stdin > stdout  key=key1,..    infile=binary_file		",
" 									",
" 									",
" Required Parameters for setting headers from infile:			",
" key=key1,key2 ... is the list of header fields as they appear in infile",
" infile= 	binary file of values for field specified by		",
" 		key1,key2,...						",
" 									",
" Optional parameters ():						",
" key=cdp,...			header key word(s) to set 		",
" a=0,...			value(s) on first trace			",
" b=0,...			increment(s) within group		",
" c=0,...			group increment(s)	 		",
" d=0,...			trace number shift(s)			",
" j=ULONG_MAX,ULONG_MAX,...	number of elements in group		",
" 									",
" Notes:								",
" Fields that are getparred must have the same number of entries as key	",
" words being set. Any field that is not getparred is set to the default",
" value(s) above. Explicitly setting j=0 will set j to ULONG_MAX.	",
" 									",
" The value of each header word key is computed using the formula:	",
" 	i = itr + d							",
" 	val(key) = a + b * (i % j) + c * (int(i / j))			",
" where itr is the trace number (first trace has itr=0, NOT 1)		",
" 									",
" Examples:								",
" 1. set every dt field to 4ms						",
" 	sushw <indata key=dt a=4000 |...				",
" 2. set the sx field of the first 32 traces to 6400, the second 32 traces",
"    to 6300, decrementing by -100 for each 32 trace groups		",
"   ...| sushw key=sx a=6400 c=-100 j=32 |...				",
" 3. set the offset fields of each group of 32 traces to 200,400,...,6400",
"   ...| sushw key=offset a=200 b=200 j=32 |...				",
" 4. perform operations 1., 2., and 3. in one call			",
"  ..| sushw key=dt,sx,offset a=4000,6400,200 b=0,0,200 c=0,-100,0 j=0,32,32 |",
" 									",
" In this example, we set every dt field to 4ms.  Then we set the first	",
" 32 shotpoint fields to 6400, the second 32 shotpoint fields to 6300 and",
" so forth.  Next we set each group of 32 offset fields to 200, 400, ...,",
" 6400.									",
" 									",
" Example of a typical processing sequence using suchw:			",
"  sushw <indata key=dt a=4000 |					",
"  sushw key=sx a=6400 c=-100 j=32 |					",
"  sushw key=offset a=200 b=200 j=32 |			     		",
"  suchw key1=gx key2=offset key3=sx b=1 c=1 |		     		",
"  suchw key1=cdp key2=gx key3=sx b=1 c=1 d=2 >outdata	     		",
" 									",
" Again, it is possible to eliminate the multiple calls to both sushw and",
" sushw, as in Example 4.						",
" 									",
" Reading header values from a binary file:				",
" If the parameter infile=binary_file is set, then the values that are to",
" be set for the fields specified by key=key1,key2,... are read from that",
" file. The values are read sequentially from the file and assigned trace",
" by trace to the input SU data. The infile consists of C (unformated)	",
" binary floats in the form of an array of size (nkeys)*(ntraces) where	",
" nkeys is the number of floats in the first (fast) dimension and ntraces",
" is the number of traces.						",
" 									",
" Comment: 								",
" Users wishing to edit one or more header fields (as in geometry setting)",
" may do this via the following sequence:				",
"     sugethw < sudata output=geom  key=key1,key2 ... > hdrfile 	",
" Now edit the ASCII file hdrfile with any editor, setting the fields	",
" appropriately. Convert hdrfile to a binary format via:		",
"     a2b < hdrfile n1=nfields > binary_file				",
" Then set the header fields via:					",
"     sushw < sudata infile=binary_file key=key1,key2,... > sudata.edited",
" 									",
" Caveat: 								",
" If the (number of traces)*(number of key words) exceeds the number of	",
" values in the infile then the user may still set a single header field",
" on the remaining traces via the parameters key=keyword a,b,c,d,j.	",
"  									",
" Example:								",
"    sushw < sudata=key1,key2 ... infile=binary_file [Optional Parameters]",
NULL}; 

/* Credits:
 *	SEP: Einar Kajartansson
 *	CWP: Jack K. Cohen
 *      CWP: John Stockwell, added multiple fields and infile= options
 *
 * Caveat:
 *	All constants are cast to doubles.
 */
/**************** end self doc ****************************************/


segy tr;

/* Prototypes */
double mod(double x, double y);
void setval(cwp_String type, Value *valp, double a, double b,
		double c, double i, double j);


int
main(int argc, char **argv)
{
	cwp_String key[SU_NKEYS];  /* array of keywords			*/
	cwp_String type[SU_NKEYS]; /* array of keywords			*/
	int index[SU_NKEYS];	/* name of type	of getparred key	*/

	int ikey;		/* key counter 				*/
	int nkeys;		/* number of header fields set		*/
	int count=0;		/* number of header fields from file	*/
	double i;		/* parameters for computing fields	*/
	int itr = 0;		/* trace counter 			*/
	Value val;		/* value of key field 			*/

	char *infile="";	/* name of input file of header values	*/
	FILE *infp=NULL;	/* pointer to input file		*/
	cwp_Bool from_file=cwp_false; /* is the data from infile?	*/

	float *afile=NULL;	/* array of "a" values from file	*/
	double *a=NULL;		/* array of "a" values			*/
	double *b=NULL;		/* array of "b" values			*/
	double *c=NULL;		/* array of "c" values			*/
	double *d=NULL;		/* array of "d" values			*/
	double *j=NULL;		/* array of "j" values			*/
	int n;			/* number of a,b,c,d,j values		*/

	/* Initialize */
	initargs(argc, argv);
	requestdoc(1);

	/* Get "key" values */
	if ((nkeys=countparval("key"))!=0) {
		getparstringarray("key",key);

	} else {
		key[0]="cdp";
	}

	/* get types and indexes corresponding to the keys */
	for (ikey=0; ikey<nkeys; ++ikey) {
		type[ikey]=hdtype(key[ikey]);
		index[ikey]=getindex(key[ikey]);
	}


	/* get name of infile */
	getparstring("infile",&infile);

	/* if infile is specified get specified keys from file */
	if (*infile!='\0') {

		/* open infile */
		if((infp=efopen(infile,"r"))==NULL)
			err("cannot open infile=%s\n",infile);

		/* set from_file flag */
		from_file=cwp_true;
	}

	/* If not from file, getpar a,b,c,d,j */
	if (!from_file) { 
		/* get "a" values */
		if ((n=countparval("a"))!=0) { 
			if (n!=nkeys)
			err("number of a values not equal to number of keys");

			a=ealloc1double(n);
			getpardouble("a",a);
		} else {
			a=ealloc1double(nkeys);
			for (ikey=0; ikey<nkeys; ++ikey) a[ikey]=0.;
		}
		
		/* get "b" values */
		if ((n=countparval("b"))!=0) { 
			if (n!=nkeys)
			err("number of b values not equal to number of keys");

			b=ealloc1double(n);
			getpardouble("b",b);
		} else {
			b=ealloc1double(nkeys);
			for (ikey=0; ikey<nkeys; ++ikey) b[ikey]=0.;
		}
		
		/* get "c" values */
		if ((n=countparval("c"))!=0) { 
			if (n!=nkeys)
			err("number of c values not equal to number of keys");

			c=ealloc1double(n);
			getpardouble("c",c);
		} else {
			c=ealloc1double(nkeys);
			for (ikey=0; ikey<nkeys; ++ikey) c[ikey]=0.;
		}

		/* get "d" values */
		if ((n=countparval("d"))!=0) { 
			if (n!=nkeys)
			err("number of d values not equal to number of keys");

			d=ealloc1double(n);
			getpardouble("d",d);
		} else {
			d=ealloc1double(nkeys);
			for (ikey=0; ikey<nkeys; ++ikey) d[ikey]=0.;
		}

		/* get "j" values */
		if ((n=countparval("j"))!=0) { 
			if (n!=nkeys)
			err("number of j values not equal to number of keys");

			j=ealloc1double(n);
			getpardouble("j",j);

			/* make sure that j!=0 */
			for (ikey=0; ikey<nkeys; ++ikey)
				if(j[ikey]==0) j[ikey]=ULONG_MAX;
		} else {
			j=ealloc1double(nkeys);
			for (ikey=0; ikey<nkeys; ++ikey) j[ikey]=ULONG_MAX;
		}
	} else { /* if reading from a file */
		/* allocate space for afile */
		afile=ealloc1float(nkeys);
	}

        checkpars();

	/* loop over traces */
	while (gettr(&tr)) {

		if (from_file) {
			/* use the "a" value from file to trace by trace */
			if (efread(afile,FSIZE,nkeys,infp)!=0) {
				for (ikey=0; ikey<nkeys; ++ikey) {
					double a_in;
					a_in=(double) afile[ikey];
					setval(type[ikey],&val,a_in,
							 0,0,0,ULONG_MAX);
					puthval(&tr,index[ikey],&val);
				++count;
				}
			}
		} else { /* use getparred values of a,b,c,d,j */
			for (ikey=0; ikey<nkeys; ++ikey) {
				i = (double) itr + d[ikey];
				
				setval(type[ikey],&val,a[ikey],b[ikey],
						c[ikey],i,j[ikey]);
				puthval(&tr,index[ikey],&val);
			}

		}

		++itr;
		puttr(&tr);
	}

	if (from_file) {
		efclose(infp);
		if (count < (int)(itr*nkeys) ) {
		   warn("itr=%d > count=%d %s",(int) itr*count,count);
		   warn("n traces=%d > data count =%d",(itr*nkeys),count);
		}
	}


	return(CWP_Exit());
}


void setval( cwp_String type, Value *valp, double a, double b,
		double c, double i, double j)
{
	switch (*type) {
	case 's':
		err("can't set char header word");
	break;
	case 'h':
		valp->h = a + b * mod(i, j) + c * ((int) (i/j));
	break;
	case 'u':
		valp->u = a + b * mod(i, j) + c * ((int) (i/j));
	break;
	case 'l':
		valp->l = (long) (a + b * mod(i, j) + c * ((int) (i/j)));
	break;
	case 'v':
		valp->v = (unsigned long) (a + b * mod(i, j) + c * ((int) (i/j)));
	break;
	case 'i':
		valp->i = a + b * mod(i, j) + c * ((int) (i/j));
	break;
	case 'p':
		valp->p = a + b * mod(i, j) + c * ((int) (i/j));
	break;
	case 'f':
		valp->f = a + b * mod(i, j) + c * ((int) (i/j));
	break;
	case 'd':
		valp->d = a + b * mod(i, j) + c * ((int) (i/j));
	default:
		err("unknown type %s", type);
	break;
	}
	return;
}


double mod(double x, double y)	/* As defined in Knuth, vol. 1	*/
{
	return y == 0.0 ? x : x - y * floor(x/y);
}
@


1.24
log
@copyright
@
text
@d249 2
@


1.23
log
@*** empty log message ***
@
text
@d1 4
a4 1
/* SUSHW: $Revision: 1.22 $ ; $Date: 2008/05/29 20:38:49 $		*/
@


1.22
log
@fixed key=key1,key2,... in selfdoc
@
text
@d1 1
a1 1
/* SUSHW: $Revision: 1.21 $ ; $Date: 2004/01/28 21:30:40 $		*/
d41 1
a41 1
" 	val(key) = a + b * (i % j) + c * (i / j)			",
@


1.21
log
@cosmetic change to selfdoc
@
text
@d1 1
a1 1
/* SUSHW: $Revision: 1.20 $ ; $Date: 2003/06/09 16:17:07 $		*/
d87 1
a87 1
"     sushw < sudata infile=binary_file key1 key2 ... > sudata.edited	",
@


1.20
log
@9 June 2003
@
text
@d1 1
a1 1
/* SUSHW: $Revision: 1.19 $ ; $Date: 1997/07/28 22:36:46 $		*/
d20 1
@


1.19
log
@changes suggested by Stew Levin to silence SGI compiler warnings, etc
@
text
@d1 1
a1 1
/* SUSHW: $Revision: 1.17 $ ; $Date: 1996/09/13 21:49:05 $		*/
d284 1
a284 1
	return EXIT_SUCCESS;
@


1.18
log
@changed typo in last line of selfdoc--- thanks to Michelle Miller
of California State University at Chico
@
text
@d94 1
a94 1
"    sushw < sudata key=key1,key2 ... infile=binary_file [Optional Parameters]",
d132 1
a132 1
	cwp_Bool from_file=false; /* is the data from infile? 		*/
d172 1
a172 1
		from_file=true;
d302 1
a302 1
		valp->l = a + b * mod(i, j) + c * ((int) (i/j));
d305 1
a305 1
		valp->v = a + b * mod(i, j) + c * ((int) (i/j));
@


1.17
log
@silenced -Wall messages
@
text
@d1 1
a1 1
/* SUSHW: $Revision: 1.16 $ ; $Date: 1996/02/05 21:07:32 $		*/
d94 1
a94 1
"    sushw < sudata=key1,key2 ... infile=binary_file [Optional Parameters]",
@


1.16
log
@Cosmetic.
@
text
@d1 1
a1 1
/* SUSHW: $Revision: 1.15 $ ; $Date: 1995/07/10 15:51:53 $		*/
d116 1
d131 1
a131 1
	FILE *infp;		/* pointer to input file		*/
d134 6
a139 6
	float *afile;		/* array of "a" values from file	*/
	double *a;		/* array of "a" values			*/
	double *b;		/* array of "b" values			*/
	double *c;		/* array of "c" values			*/
	double *d;		/* array of "d" values			*/
	double *j;		/* array of "j" values			*/
@


1.15
log
@additional changes in selfdoc
@
text
@d1 1
a1 1
/* SUSHW: $Revision: 1.14 $ ; $Date: 95/07/10 13:54:25 $		*/
d10 1
a10 1
" SUSHW - Set a one or more Header Words using trace number, mod and	",
@


1.14
log
@updated to include key=key1,key2,... multiple input
@
text
@d1 1
a1 1
/* SUSHW: $Revision: 1.13 $ ; $Date: 95/06/29 10:24:46 $		*/
a17 1
" 									",
d48 1
a48 1
"   ...| sushw key=sx a=6400 c=-100 j=32 |				",
d50 1
a50 1
"   ...| sushw key=offset a=200 b=200 j=32 |				",
d52 1
a52 1
"   ..| sushwkey=dt,sx,offset a=4000,6400,200 b=0,0,200 c=0,-100,0 j=0,32,32 |",
d59 11
a69 1
" Reading from a binary file:						",
@


1.13
log
@changed ++itr to itr++ and changed &a_in[0] to a_in
@
text
@d1 1
a1 1
/* SUSHW: $Revision: 1.12 $ ; $Date: 95/06/28 11:36:01 $		*/
d10 3
a12 3
" SUSHW - Set a single Header Word using trace number, mod and integer	",
"	   divide or set one or more header fields with data input from ",
"	   a binary file						",
d14 2
a15 1
"   sushw <stdin >stdout key=cdp a=0 b=0 c=0 d=0 j=1			",
d19 1
a19 1
"   sushw <stdin > stdout  key1 key2 ... infile=binary_file		",
d22 1
a22 1
" key1 key2 ... is the list of header fields as they appear in infile 	",
d24 1
a24 1
" 		key1 key2 ...						",
d26 7
a32 7
" Optional parameters (single header field only):			",
" key=cdp	header key word to set 					",
" a=0		value on first trace					",
" b=0		increment within group 					",
" c=0		group increment		 				",
" d=0		trace number shift					",
" j=ULONG_MAX	number of elements in group				",
d35 5
a39 2
" (Single header field, only)						",
" The value of header word key is computed using the formula:		",
d44 10
a53 6
"  Example:								",
"  	sushw <indata key=dt a=4000 |					",
"  	sushw key=sx a=6400 c=-100 j=32 |				",
"  	sushw key=offset a=200 b=200 j=32 |				",
"  	suchw key1=gx key2=offset key3=sx b=1 c=1 |			",
"  	suchw key1=cdp key2=gx key3=sx b=1 c=1 d=2 >outdata		",
d58 1
a58 4
" 6400.  Finally we use the program suchw (instead of sushw) to set the	",
" receiver point and cdp fields	 using the sx and offset fields (we	",
" choose to use the actual location for the cdp fields instead of the	",
" conventional 1, 2, 3, ...  enumeration).				",
d62 6
a67 6
" be set for the fields specified by key1 key2 ... are read from that file.",
" The values are read sequentially from the file and assigned trace by	",
" trace to the input SU data. The infile consists of C (unformated) binary",
" floats in the form of an array of size (nkeys)*(ntraces) where nkeys	", 
" is the number of floats in the first (fast) dimension and ntraces is the",
" number of traces.							",
d72 1
a72 1
"     sugethw < sudata output=geom  key1 key2 ... > hdrfile 		",
d85 1
a85 1
"    sushw < sudata key1 key2 ... infile=binary_file [Optional Parameters]",
d91 1
a91 1
 *      CWP: John Stockwell, added infile= option
d109 3
a111 3
	cwp_String key;		/* keyword as getparred			*/
	cwp_String type;	/* name of type	of getparred key	*/
	int index; 		/* index of header parameter		*/
d113 3
d124 7
a130 5
	double a;		/* a as getparred			*/
	double b;		/* b as getparred			*/
	double c;		/* c as getparred			*/
	double d;		/* d as getparred			*/
	double j;		/* j as getparred			*/
a131 8
	int icount=0;		/* count of infile data values		*/ 
	int ikey;		/* counter of keys 			*/
	int countkey=0;		/* count of keys to be set		*/

	cwp_String types[SU_NKEYS];	/* array of types		*/
	int  indexes[SU_NKEYS];	/* array of indexes			*/
	float a_in[SU_NKEYS];	/* array of "a" values to be read in	*/

d136 3
a138 7
	/* Get parameters */
	if (!getparstring("key", &key)) key = "cdp";
	if (!getpardouble("a",&a))	 a = 0;
	if (!getpardouble("b",&b))	 b = 0;
	if (!getpardouble("c",&c))	 c = 0;
	if (!getpardouble("d",&d))	 d = 0;
	if (!getpardouble("j",&j))	 j = ULONG_MAX;
d140 11
a155 1
		int iarg;
d161 1
d163 1
d165 6
a170 3
		/* capture and get a count of key fields to be read in */
		for (iarg = 1; iarg < argc; ++iarg) {
			cwp_String keyword;		/* keyword */
d172 11
a182 1
			keyword = argv[iarg];
d184 11
a194 7
			/* get array of types and indexes to be set */
			if ((strncmp(keyword,"infile=",7)!=0)
			     || (strncmp(keyword,"key=",4)!=0)) {
				types[countkey] =  hdtype(keyword);
				indexes[countkey] = getindex(keyword);
				++countkey;
			}
d196 5
d202 31
a234 4
	/* get type and index as getparred */
	type=hdtype(key);
	index=getindex(key);

a236 1
		i = (double) itr++ + d;
a237 1
		/* if we read from infile  */
d239 6
a244 14
			double afile;
		
			/* use values of "a" read from file */
			if (efread(a_in, FSIZE,countkey,infp)!=0) {
				cwp_String typename;	/* name of type	*/
				int indexval;		/* index of typename */

				for (ikey=0; ikey < countkey ; ikey++) {

					afile = (double) a_in[ikey];
					typename = types[ikey]; 
					indexval = indexes[ikey];

					setval(typename,&val,afile,
d246 2
a247 3
					puthval(&tr,indexval,&val);

					++icount;
a248 3
			} else { /* use getparred versions */
				setval(type,&val,a,b,c,i,j);
				puthval(&tr, index, &val);
d250 9
a258 5
					
		} else { /* use parameters a,b,c,d,j getparred to set */
			setval(type, &val, a, b, c, i, j);
			puthval(&tr, index, &val);
			
d261 1
d267 3
a269 3
		if (icount < (itr*countkey) ) {
		   warn("number of traces > number of data values %s",infile);
		   warn("n traces=%d > data count =%d",(itr*countkey),icount);
@


1.12
log
@many changes to permit multiple field setting
@
text
@d1 1
a1 1
/* SUSHW: $Revision: 1.11 $ ; $Date: 94/09/06 13:31:30 $		*/
d55 2
a56 2
" On reading header values from a file:					",
" If the parameter infile=binary_file is set, then the values that are to ",
d58 5
a62 2
" The values are read sequentially from the file and assigned trace by 	",
" trace to the input SU data.						",
d65 1
a65 1
" Users wishing to edit one or more header field (as in geometry setting)",
d178 1
a178 1
		i = (double) ++itr + d;
d185 1
a185 1
			if (efread(&a_in[0], FSIZE,countkey,infp)!=0) {
@


1.11
log
@Massaged self-doc.
@
text
@d1 1
a1 1
/* SUSHW: $Revision: 1.10 $ ; $Date: 94/08/25 15:00:49 $			*/
d5 1
d10 3
a12 1
" SUSHW - set header word using trace number, mod and integer divide	",
d14 1
a14 1
" sushw <stdin >stdout key=cdp a=0 b=0 c=0 d=0 j=1			",
d16 1
a16 2
" Required parameters:							",
" 	none (no op)							",
d18 1
a18 7
" Optional parameters:							",
" 	key=cdp		header key word to set				",
" 	a=0		value on first trace				",
" 	b=0		increment within group 				",
" 	c=0		group increment		 			",
" 	d=0		trace number shift				",
" 	j=ULONG_MAX	number of elements in group			",
d20 15
a34 1
" NOTES:								",
d54 24
d81 3
a83 2
 *	SEP: Einar
 *	CWP: Jack
d95 2
a96 2
void setval(cwp_String type, Value *valp,
	double a, double b, double c, double i, double j);
d101 3
a103 6
	cwp_String key;
	cwp_String type;
	int index;
	double a, c, b, d, i, j;
	long itr = 0;
	Value val;
d105 3
d109 18
a130 1

d132 6
a137 6
	if (!getparstring("key", &key))	 key = "cdp";
	if (!getpardouble("a"  , &a))	 a = 0;
	if (!getpardouble("b"  , &b))	 b = 0;
	if (!getpardouble("c"  , &c))	 c = 0;
	if (!getpardouble("d"  , &d))	 d = 0;
	if (!getpardouble("j"  , &j))	 j = ULONG_MAX;
d139 2
a140 2
	type = hdtype(key);
	index = getindex(key);
d142 32
d175 34
a208 3
		i = (double) itr++ + d;
		setval(type, &val, a, b, c, i, j);
		puthval(&tr, index, &val);
d212 7
d220 1
d225 2
a226 4
void setval(
	cwp_String type,
	Value *valp,
	double a, double b, double c, double i, double j)
@


1.10
log
@Removed copyright statement from codes that had it.
Moved self-doc line for sudoc.
@
text
@d1 1
a1 1
/* SUSHW: $Revision: 1.9 $ ; $Date: 93/08/09 15:19:54 $			*/
d40 4
a43 5
" 6400.  Finally we use suchw to set the receiver point and cdp fields	",
" using the sx and offset fields (we choose to use the actual location	",
" for the cdp fields instead of the conventional 1, 2, 3, ...		",
" enumeration).								",
" 									",
@


1.9
log
@changed String to cwp_String
@
text
@d1 1
a1 1
/* SUSHW: $Revision: 1.8 $ ; $Date: 92/10/26 13:54:35 $			*/
a2 13
/*----------------------------------------------------------------------
 * Copyright (c) Colorado School of Mines, 1990.
 * All rights reserved.
 *
 * This code is part of SU.  SU stands for Seismic Unix, a processing line
 * developed at the Colorado School of Mines, partially based on Stanford
 * Exploration Project (SEP) software.  Inquiries should be addressed to:
 *
 *  Jack K. Cohen, Center for Wave Phenomena, Colorado School of Mines,
 *  Golden, CO 80401  (jkc@@dix.mines.colorado.edu)
 *----------------------------------------------------------------------
 */

a45 1
/**************** end self doc ****************************************/
d54 1
@


1.8
log
@new selfdoc installed
@
text
@d1 1
a1 1
/* SUSHW: $Revision: 1.7 $ ; $Date: 91/09/05 08:51:46 $			*/
d74 1
a74 1
void setval(String type, Value *valp,
d80 2
a81 2
	String key;
	String type;
d117 1
a117 1
	String type,
@


1.7
log
@string -> String and so forth
@
text
@d1 1
a1 1
/* SUSHW: $Revision: 1.5 $ ; $Date: 91/02/26 13:32:58 $			*/
d20 40
a59 39
String sdoc =
" 									\n"
" SUSHW - set header word using trace number, mod and integer divide	\n"
" 									\n"
" sushw <stdin >stdout key=cdp a=0 b=0 c=0 d=0 j=1			\n"
" 									\n"
" Required parameters:							\n"
" 	none (no op)							\n"
" 									\n"
" Optional parameters:							\n"
" 	key=cdp		header key word to set				\n"
" 	a=0		value on first trace				\n"
" 	b=0		increment within group 				\n"
" 	c=0		group increment		 			\n"
" 	d=0		trace number shift				\n"
" 	j=ULONG_MAX	number of elements in group			\n"
" 									\n"
" NOTES:								\n"
" The value of header word key is computed using the formula:		\n"
" 	i = itr + d							\n"
" 	val(key) = a + b * (i % j) + c * (i / j)			\n"
" where itr is the trace number (first trace has itr=0, NOT 1)		\n"
" 									\n"
"  Example:								\n"
"  	sushw <indata key=dt a=4000 |					\n"
"  	sushw key=sx a=6400 c=-100 j=32 |				\n"
"  	sushw key=offset a=200 b=200 j=32 |				\n"
"  	suchw key1=gx key2=offset key3=sx b=1 c=1 |			\n"
"  	suchw key1=cdp key2=gx key3=sx b=1 c=1 d=2 >outdata		\n"
" 									\n"
" In this example, we set every dt field to 4ms.  Then we set the first	\n"
" 32 shotpoint fields to 6400, the second 32 shotpoint fields to 6300 and\n"
" so forth.  Next we set each group of 32 offset fields to 200, 400, ...,\n"
" 6400.  Finally we use suchw to set the receiver point and cdp fields	\n"
" using the sx and offset fields (we choose to use the actual location	\n"
" for the cdp fields instead of the conventional 1, 2, 3, ...		\n"
" enumeration).								\n"
" 									\n"
; /**************** end self doc ****************************************/
d90 1
a90 1
	askdoc(1);
@


1.6
log
@Tweak

@
text
@d20 1
a20 1
string sdoc =
d58 1
a58 2
;
/**************** end self doc ****************************************/
d73 1
a73 1
void setval( string type, value *valp,
d79 2
a80 2
	string key;
	string type;
d84 1
a84 1
	value val;
d116 2
a117 2
	string type,
	value *valp,
@


1.5
log
@Improved self-doc per Ken
@
text
@d1 1
a1 1
/* SUSHW: $Revision: 1.4 $ ; $Date: 91/02/22 15:45:14 $			*/
d58 2
a59 1
; /**************** end self doc ****************************************/
@


1.4
log
@Tweaked up to current ANSI C standards.
@
text
@d1 1
a1 1
/* SUSHW: $Revision: 1.3 $ ; $Date: 91/02/22 13:42:33 $			*/
d31 3
a33 3
" 	a=0		starting value 					\n"
" 	b=0		scale on between group addend			\n"
" 	c=0		scale on within group addend 			\n"
d35 1
a35 1
" 	j=ULONG_MAX	grouping parameter				\n"
@


1.3
log
@j default changed to ULONG_MAX (from 1), so that a=100 b=100 generates
100,200,300,... instead of 100,100,100,...
@
text
@d1 1
a1 1
/* SUSHW: $Revision: 1.2 $ ; $Date: 90/09/03 09:54:01 $			*/
d20 39
a58 39
string sdoc = "\
									\n\
SUSHW - set header word using trace number, mod and integer divide	\n\
									\n\
sushw <stdin >stdout key=cdp a=0 b=0 c=0 d=0 j=1			\n\
									\n\
Required parameters:							\n\
	none (no op)							\n\
									\n\
Optional parameters:							\n\
	key=cdp		header key word to set				\n\
	a=0		starting value 					\n\
	b=0		scale on between group addend			\n\
	c=0		scale on within group addend 			\n\
	d=0		trace number shift				\n\
	j=ULONG_MAX	grouping parameter				\n\
									\n\
NOTES:									\n\
The value of header word key is computed using the formula:		\n\
	i = itr + d							\n\
	val(key) = a + b * (i % j) + c * (i / j)			\n\
where itr is the trace number (first trace has itr=0, NOT 1)		\n\
									\n\
 Example:								\n\
 	sushw <indata key=dt a=4000 |					\n\
 	sushw key=sx a=6400 c=-100 j=32 |				\n\
 	sushw key=offset a=200 b=200 j=32 |				\n\
 	suchw key1=gx key2=offset key3=sx b=1 c=1 |			\n\
 	suchw key1=cdp key2=gx key3=sx b=1 c=1 d=2 >outdata		\n\
									\n\
In this example, we set every dt field to 4ms.  Then we set the first	\n\
32 shotpoint fields to 6400, the second 32 shotpoint fields to 6300 and	\n\
so forth.  Next we set each group of 32 offset fields to 200, 400, ...,	\n\
6400.  Finally we use suchw to set the receiver point and cdp fields	\n\
using the sx and offset fields (we choose to use the actual location	\n\
for the cdp fields instead of the conventional 1, 2, 3, ...		\n\
enumeration).								\n\
									\n\
"; /**************** end self doc ****************************************/
d71 6
a84 1
	void setval();
d93 6
a98 6
	if (!sgetpar("key", &key))	 key = "cdp";
	if (!dgetpar("a"  , &a))	 a = 0;
	if (!dgetpar("b"  , &b))	 b = 0;
	if (!dgetpar("c"  , &c))	 c = 0;
	if (!dgetpar("d"  , &d))	 d = 0;
	if (!dgetpar("j"  , &j))	 j = ULONG_MAX;
a119 2
	double mod();

@


1.2
log
@ANSI C changes and z -> d for doubles
@
text
@d1 1
a1 1
/* SUSHW: $Revision: 1.1 $ ; $Date: 90/04/20 20:40:02 $			*/
d35 1
a35 1
	j=1		grouping parameter				\n\
d93 1
a93 1
	if (!dgetpar("j"  , &j))	 j = 1;
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/* SUSHW: $Revision: 2.6 $ ; $Date: 89/06/14 10:33:15 $			*/
d12 1
a12 1
 *  Golden, CO 80401  (isis!csm9a!jkcohen)
d30 6
a35 6
	key = cdp	header key word to set				\n\
	a = 0		starting value 					\n\
	b = 0		scale on between group addend			\n\
	c = 0		scale on within group addend 			\n\
	d = 0		trace number shift				\n\
	j = 1		grouping parameter				\n\
a65 2
 *
 *
a67 5
/* Embed Revision Control System identifier strings */
static string progid =
	"   $Source: /src/su/src/RCS/sushw.c,v $";
static string revid =
	"   $Revision: 2.6 $ ; $Date: 89/06/14 10:33:15 $";
a68 2


d71 1
a71 2
main(argc, argv)
int argc; char **argv;
a83 5
	if (!igetpar("ID", &ID))	ID = 0;
	if (ID) {
		(void) fprintf(stderr, "%s\n", progid);
		(void) fprintf(stderr, "%s\n", revid);
	}
d89 5
a93 5
	if (!zgetpar("a"  , &a))	 a = 0;
	if (!zgetpar("b"  , &b))	 b = 0;
	if (!zgetpar("c"  , &c))	 c = 0;
	if (!zgetpar("d"  , &d))	 d = 0;
	if (!zgetpar("j"  , &j))	 j = 1;
d110 4
a113 4
void setval(type, valp, a, b, c, i, j)
string type;
value *valp;
double a, c, b, i, j;
d117 1
a117 1
	switch(*type) {
d142 2
a143 2
	case 'z':
		valp->z = a + b * mod(i, j) + c * ((int) (i/j));
d152 1
a152 2
double mod(x, y)	/* As defined in Knuth, vol. 1	*/
double x, y;
@
