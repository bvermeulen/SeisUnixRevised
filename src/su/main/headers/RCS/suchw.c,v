head	1.18;
access;
symbols;
locks; strict;
comment	@ * @;


1.18
date	2011.11.16.22.10.29;	author john;	state Exp;
branches;
next	1.17;

1.17
date	2011.11.12.00.20.05;	author john;	state Exp;
branches;
next	1.16;

1.16
date	2007.04.04.19.31.34;	author john;	state Exp;
branches;
next	1.15;

1.15
date	2006.10.31.22.23.45;	author john;	state Exp;
branches;
next	1.14;

1.14
date	2005.03.16.19.23.00;	author john;	state Exp;
branches;
next	1.13;

1.13
date	2003.06.09.16.17.07;	author john;	state Exp;
branches;
next	1.12;

1.12
date	97.07.28.22.36.46;	author john;	state Exp;
branches;
next	1.11;

1.11
date	96.09.05.19.26.15;	author jkc;	state Exp;
branches;
next	1.10;

1.10
date	96.01.11.21.58.34;	author jkc;	state Exp;
branches;
next	1.9;

1.9
date	95.11.21.22.40.59;	author john;	state Exp;
branches;
next	1.8;

1.8
date	95.08.29.16.20.24;	author jkc;	state Exp;
branches;
next	1.7;

1.7
date	95.07.10.15.52.59;	author john;	state Exp;
branches;
next	1.6;

1.6
date	94.08.25.14.58.58;	author jkc;	state Exp;
branches;
next	1.5;

1.5
date	93.08.09.15.19.19;	author john;	state Exp;
branches;
next	1.4;

1.4
date	92.10.26.13.30.04;	author john;	state Exp;
branches;
next	1.3;

1.3
date	91.09.05.08.49.37;	author jkcohen;	state Exp;
branches;
next	1.2;

1.2
date	90.09.03.09.47.33;	author jkc;	state Exp;
branches;
next	1.1;

1.1
date	90.04.16.21.15.02;	author jkc;	state Exp;
branches;
next	;


desc
@Change header word using 2 other header words
@


1.18
log
@added Reg Beardsley's checkpar() call
@
text
@/* Copyright (c) Colorado School of Mines, 2011.*/
/* All rights reserved.                       */

/* SUCHW: $Revision: 1.16 $ ; $Date: 2007/04/04 19:31:34 $	*/

#include "su.h"
#include "segy.h"
#include "header.h"

/*********************** self documentation **********************/
char *sdoc[] = {
"									",
" SUCHW - Change Header Word using one or two header word fields	",
"									",
"  suchw <stdin >stdout [optional parameters]				",
"									",
" Required parameters:							",
" none									",
"									",
" Optional parameters:							",
" key1=cdp,...	output key(s) 						",
" key2=cdp,...	input key(s) 						",
" key3=cdp,...	input key(s)  						",
" a=0,...		overall shift(s)				",
" b=1,...		scale(s) on first input key(s) 			",
" c=0,...		scale on second input key(s) 			",
" d=1,...		overall scale(s)				",
" e=1,...		exponent on first input key(s)",
" f=1,...		exponent on second input key(s)",
"									",
" The value of header word key1 is computed from the values of		",
" key2 and key3 by:							",
"									",
"	val(key1) = (a + b * val(key2)^e + c * val(key3)^f) / d		",
"									",
" Examples:								",
" Shift cdp numbers by -1:						",
"	suchw <data >outdata a=-1					",
"									",
" Add 1000 to tracr value:						",
" 	suchw key1=tracr key2=tracr a=1000 <infile >outfile		",
"									",
" We set the receiver point (gx) field by summing the offset		",
" and shot point (sx) fields and then we set the cdp field by		",
" averaging the sx and gx fields (we choose to use the actual		",
" locations for the cdp fields instead of the conventional		",
" 1, 2, 3, ... enumeration):						",
"									",
"   suchw <indata key1=gx key2=offset key3=sx b=1 c=1 |			",
"   suchw key1=cdp key2=gx key3=sx b=1 c=1 d=2 >outdata			",
"									",
" Do both operations in one call:					",
"									",
" suchw<indata key1=gx,cdp key2=offset,gx key3=sx,sx b=1,1 c=1,1 d=1,2 >outdata",
"									",
NULL};

/* Credits:
 *	SEP: Einar Kjartansson
 *	CWP: Jack K. Cohen
 *      CWP: John Stockwell, 7 July 1995, added array of keys feature
 *      Delphi: Alexander Koek, 6 November 1995, changed calculation so
 *              headers of different types can be expressed in each other
 */
/**************** end self doc ***********************************/

/* prototype for function used internally */
void changeval(cwp_String type1, Value *valp1, cwp_String type2,
	       Value *valp2, cwp_String type3, Value *valp3,
		double a, double b, double c, double d, double e, double f);

segy tr;

int
main(int argc, char **argv)
{
	cwp_String key1[SU_NKEYS];	/* output key(s)		*/
	cwp_String key2[SU_NKEYS];	/* first input key(s)		*/
	cwp_String key3[SU_NKEYS];	/* second input key(s)		*/
	cwp_String type1[SU_NKEYS];	/* array of types for key1	*/
	cwp_String type2[SU_NKEYS];	/* array of types for key2	*/
	cwp_String type3[SU_NKEYS];	/* array of types for key3	*/
	int nkeys;			/* number of keys to be computed*/
	int n;				/* counter of keys getparred	*/
	int ikey;			/* loop counter of keys 	*/
	int index1[SU_NKEYS];		/* array of indexes for key1 	*/
	int index2[SU_NKEYS];		/*      ....        for key2	*/
	int index3[SU_NKEYS];		/*      ....        for key3	*/

	Value val1;			/* value of key1		*/
	Value val2;			/* value of key2		*/
	Value val3;			/* value of key3		*/

	double *a;			/* array of "a" values		*/
	double *b;			/* array of "b" values		*/
	double *c;			/* array of "c" values		*/
	double *d;			/* array of "d" values		*/
	double *e;			/* array of "e" values		*/
	double *f;			/* array of "f" values		*/

	/* Initialize */
	initargs(argc, argv);
	requestdoc(1);

	/* Get parameters */
	/* get key1's */
	if ((n=countparval("key1"))!=0){
		nkeys=n;
		getparstringarray("key1",key1);
	} else { /* set default */
		nkeys=1;
		key1[0]="cdp";	
	}

	/* get key2's */
	if ((n=countparval("key2"))!=0){
		if (n!=nkeys)
			err("number of key2's and key1's must be equal!");

		getparstringarray("key2",key2);
	} else { /* set default */
		if (nkeys!=1)
			err("number of key2's and key1's must be equal!");

		key2[0]="cdp";	
	}

	/* get key3's */
	if ((n=countparval("key3"))!=0){
		if (n!=nkeys)
			err("number of key3's and key1's must be equal!");

		getparstringarray("key3",key3);
	} else { /* set default */
		if (nkeys!=1)
			err("number of key3's and key1's must be equal!");
		key3[0]="cdp";	
	}

	/* get a's */
	if ((n=countparval("a"))!=0){
		if (n!=nkeys)
			err("number of a's and key1's must be equal!");

		a=ealloc1double(nkeys);
		getpardouble("a",a);
	} else { /* set default */
		a=ealloc1double(nkeys);
		for (ikey=0; ikey<nkeys; ++ikey)
			a[ikey]=0.;
	}

	/* get b's */
	if ((n=countparval("b"))!=0){
		if (n!=nkeys)
			err("number of b's and key1's must be equal!");

		b=ealloc1double(nkeys);
		getpardouble("b",b);
	} else { /* set default */
		b=ealloc1double(nkeys);
		for (ikey=0; ikey<nkeys; ++ikey)
			b[ikey]=1.;
	}

	/* get c's */
	if ((n=countparval("c"))!=0){
		if (n!=nkeys)
			err("number of c's and key1's must be equal!");

		c=ealloc1double(nkeys);
		getpardouble("c",c);
	} else { /* set default */
		c=ealloc1double(nkeys);
		for (ikey=0; ikey<nkeys; ++ikey)
			c[ikey]=0.;
	}

	/* get d's */
	if ((n=countparval("d"))!=0){
		if (n!=nkeys)
			err("number of d's and key1's must be equal!");

		d=ealloc1double(nkeys);
		getpardouble("d",d);
	} else { /* set default */
		d=ealloc1double(nkeys);
		for (ikey=0; ikey<nkeys; ++ikey)
			d[ikey]=1.;
	}

	/* get e's */
	if ((n=countparval("e"))!=0){
		if (n!=nkeys)
			err("number of e's and key1's must be equal!");

		e=ealloc1double(nkeys);
		getpardouble("e",e);
	} else { /* set default */
		e=ealloc1double(nkeys);
		for (ikey=0; ikey<nkeys; ++ikey)
			e[ikey]=1.;
	}

	/* get f's */
	if ((n=countparval("f"))!=0){
		if (n!=nkeys)
			err("number of f's and key1's must be equal!");

		f=ealloc1double(nkeys);
		getpardouble("f",f);
	} else { /* set default */
		f=ealloc1double(nkeys);
		for (ikey=0; ikey<nkeys; ++ikey)
			f[ikey]=1.;
	}

        checkpars();
	for (ikey=0; ikey<nkeys; ++ikey) {
			
		/* get types and index values */
		type1[ikey]  = hdtype(key1[ikey]);
		type2[ikey]  = hdtype(key2[ikey]);
		type3[ikey]  = hdtype(key3[ikey]);
		index1[ikey] = getindex(key1[ikey]);
		index2[ikey] = getindex(key2[ikey]);
		index3[ikey] = getindex(key3[ikey]);
		}

	/* loop over traces */
	while (gettr(&tr)) {

		/* loop over key fields */
		for (ikey=0; ikey<nkeys; ++ikey) {
			
			/* get header values */
			gethval(&tr, index2[ikey], &val2);
			gethval(&tr, index3[ikey], &val3);

			changeval(type1[ikey], &val1, type2[ikey], &val2,
				type3[ikey], &val3, a[ikey], b[ikey], c[ikey],
				d[ikey], e[ikey], f[ikey]);
			puthval(&tr, index1[ikey], &val1);
		}
		puttr(&tr);
	}

	return(CWP_Exit());
}


void changeval(cwp_String type1, Value *valp1, cwp_String type2,
	       Value *valp2, cwp_String type3, Value *valp3,
		double a, double b, double c, double d, double e, double f)
{
	double dval2=vtod( type2, *valp2);
	double dval3=vtod( type3, *valp3);
	double dval1=(a+b*pow(dval2,e)+c*pow(dval3,f))/d;

	switch (*type1) {
	case 's':
		err("can't change char header word");
	break;
	case 'h':
		valp1->h = (short) dval1;
	break;
	case 'u':
		valp1->u = (unsigned short) dval1;
	break;
	case 'l':
		valp1->l = (long) dval1;
	break;
	case 'v':
		valp1->v = (unsigned long) dval1;
	break;
	case 'i':
		valp1->i = (int) dval1;
	break;
	case 'p':
		valp1->p = (unsigned int) dval1;
	break;
	case 'f':
		valp1->f = (float) dval1;
	break;
	case 'd':
		valp1->d = (double) dval1;
	break;
	default:
		err("unknown type %s", type1);
	break;
	}
}
@


1.17
log
@copyright
@
text
@d218 1
@


1.16
log
@changed suchw2 suchw
@
text
@d1 4
a4 1
/* SUCHW: $Revision: 1.19 $ ; $Date: 2006/11/07 22:58:42 $	*/
@


1.15
log
@added powers of parameters
@
text
@d1 1
a1 2
/* Copyright (c) Colorado School of Mines, 2005.*/
/* All rights reserved.                       */
d10 1
a10 1
" SUCHW2 - Change Header Word using one or two header word fields	",
d12 1
a12 1
"  suchw2 <stdin >stdout [optional parameters]				",
@


1.14
log
@put in an error trapping for key counting "nkey" being
the same for key1 key2 key3
@
text
@d1 2
a2 1
/* SUCHW: $Revision: 1.13 $ ; $Date: 2003/06/09 16:17:07 $		*/
d11 1
a11 1
" SUCHW - Change Header Word using one or two header word fields	",
d13 1
a13 1
"  suchw <stdin >stdout [optional parameters]				",
d26 2
d32 1
a32 1
"	val(key1) = (a + b * val(key2) + c * val(key3)) / d		",
d68 1
a68 1
		double a, double b, double c, double d);
d96 2
a97 1

d190 26
d239 1
a239 1
				d[ikey]);
d251 1
a251 1
		double a, double b, double c, double d)
d255 1
a255 1
	double dval1=(a+b*dval2+c*dval3)/d;
@


1.13
log
@9 June 2003
@
text
@d1 1
a1 1
/* SUCHW: $Revision: 1.12 $ ; $Date: 1997/07/28 22:36:46 $		*/
d116 3
d129 2
@


1.12
log
@changes suggested by Stew Levin to silence SGI compiler warnings, etc
@
text
@d1 1
a1 1
/* SUCHW: $Revision: 1.11 $ ; $Date: 1996/09/05 19:26:15 $		*/
d210 1
a210 1
	return EXIT_SUCCESS;
@


1.11
log
@Fixed -Wall complaint.
@
text
@d1 1
a1 1
/* SUCHW: $Revision: 1.10 $ ; $Date: 1996/01/11 21:58:34 $		*/
d227 1
a227 1
		valp1->h = dval1;
d230 1
a230 1
		valp1->u = dval1;
d233 1
a233 1
		valp1->l = dval1;
d236 1
a236 1
		valp1->v = dval1;
d239 1
a239 1
		valp1->i = dval1;
d242 1
a242 1
		valp1->p = dval1;
d245 1
a245 1
		valp1->f = dval1;
d248 1
a248 1
		valp1->d = dval1;
@


1.10
log
@Corrected self-doc.
@
text
@d1 1
a1 1
/* SUCHW: $Revision: 1.9 $ ; $Date: 1995/11/21 22:40:59 $		*/
d69 1
@


1.9
log
@implemented Alexander Koek (Delft) fix to permit headers of different
types can be expressed in terms of each other.
@
text
@d1 1
a1 1
/* SUCHW: $Revision: 1.8 $ ; $Date: 1995/08/29 16:20:24 $		*/
a58 6
 *
 * Caveat:
 *	The constants a, b, c, d are read in as doubles.
 *	It is implicitly assumed that the data types of the
 *	keys used are the same.
 *
@


1.8
log
@Correct key1[0] to key3[0] in "get key3's" section.  Thx Toralf.
@
text
@d1 1
a1 1
/* SUCHW: $Revision: 1.7 $ ; $Date: 1995/07/10 15:52:59 $		*/
d54 1
a54 1
 *	SEP: Einar Kajartansson
d57 2
d69 2
a70 1
void changeval(cwp_String type1, Value *valp1, Value *valp2, Value *valp3,
d81 2
d186 10
a202 6
			/* get types and index values */
			type1[ikey]  = hdtype(key1[ikey]);
			index1[ikey] = getindex(key1[ikey]);
			index2[ikey] = getindex(key2[ikey]);
			index3[ikey] = getindex(key3[ikey]);

d207 3
a209 2
			changeval(type1[ikey], &val1, &val2, &val3,
					a[ikey], b[ikey], c[ikey], d[ikey]);
d219 2
a220 1
void changeval(cwp_String type1, Value *valp1, Value *valp2, Value *valp3,
d223 4
d232 1
a232 1
		valp1->h = (a + b * valp2->h + c * valp3->h)/d;
d235 1
a235 1
		valp1->u = (a + b * valp2->u + c * valp3->u)/d;
d238 1
a238 1
		valp1->l = (a + b * valp2->l + c * valp3->l)/d;
d241 1
a241 1
		valp1->v = (a + b * valp2->v + c * valp3->v)/d;
d244 1
a244 1
		valp1->i = (a + b * valp2->i + c * valp3->i)/d;
d247 1
a247 1
		valp1->p = (a + b * valp2->p + c * valp3->p)/d;
d250 1
a250 1
		valp1->f = (a + b * valp2->f + c * valp3->f)/d;
d253 1
a253 1
		valp1->d = (a + b * valp2->d + c * valp3->d)/d;
@


1.7
log
@updated to permit multiple trace header fields to be changed.
@
text
@d1 1
a1 1
/* SUCHW: $Revision: 1.6 $ ; $Date: 94/08/25 14:58:58 $		*/
d126 1
a126 1
		key1[0]="cdp";	
@


1.6
log
@Removed copyright statement from codes that had it.
Moved self-doc line for sudoc.
@
text
@d1 1
a1 1
/* SUCHW: $Revision: 1.5 $ ; $Date: 93/08/09 15:19:19 $		*/
d5 1
d9 42
a50 37
"								",
" SUCHW - change header word using one or two header word fields",
"								",
" suchw <stdin >stdout [optional parameters]			",
"								",
" Required parameters:						",
"	none							",
"								",
" Optional parameters:						",
"	key1=cdp	output key 				",
"	key2=cdp	input key  				",
"	key3=cdp	input key  				",
"	a=0		overall shift 				",
"	b=1		scale on first input key 		",
"	c=0		scale on second input key 		",
"	d=1		overall scale 				",
"								",
" The value of header word key1 is computed from the values of	",
" key2 and key3 by:						",
"								",
"	val(key1) = (a + b * val(key2) + c * val(key3)) / d	",
"								",
" Examples:							",
" Shift cdp numbers by -1:					",
"	suchw <data >outdata a=-1				",
"								",
" Add 1000 to tracr value:					",
" 	suchw key1=tracr key2=tracr a=1000 <infile >outfile	",
"								",
" We set the receiver point (gx) field by summing the offset	",
" and shot point (sx) fields and then we set the cdp field by	",
" averaging the sx and gx fields (we choose to use the actual	",
" locations for the cdp fields instead of the conventional	",
" 1, 2, 3, ... enumeration):					",
"	suchw <indata key1=gx key2=offset key3=sx b=1 c=1 |	",
"	suchw key1=cdp key2=gx key3=sx b=1 c=1 d=2 >outdata	",
"								",
d54 3
a56 2
 *	SEP: Einar
 *	CWP: Jack
d62 1
d66 3
d74 10
a83 8
	cwp_String key1, key2, key3;
	cwp_String type1;
	int index1, index2, index3;
	Value val1, val2, val3;
	double a, c, b, d;
	void changeval(cwp_String type1,
		Value *valp1, Value *valp2, Value *valp3,
		double a, double b, double c, double d);
d85 3
d89 6
a98 1

d100 8
a107 7
	if (!getparstring("key1", &key1))	key1 = "cdp";
	if (!getparstring("key2", &key2))	key2 = "cdp";
	if (!getparstring("key3", &key3))	key3 = "cdp";
	if (!getpardouble("a"   , &a))	a = 0;
	if (!getpardouble("b"   , &b))	b = 1;
	if (!getpardouble("c"   , &c))	c = 0;
	if (!getpardouble("d"   , &d))	d = 1;
d109 4
a112 4
	type1  = hdtype(key1);
	index1 = getindex(key1);
	index2 = getindex(key2);
	index3 = getindex(key3);
d114 69
d184 18
a201 4
		gethval(&tr, index2, &val2);
		gethval(&tr, index3, &val3);
		changeval(type1, &val1, &val2, &val3, a, b, c, d);
		puthval(&tr, index1, &val1);
@


1.5
log
@changed String to cwp_String
@
text
@d1 1
a1 1
/* SUCHW: $Revision: 1.4 $ ; $Date: 92/10/26 13:30:04 $		*/
a2 13
/*----------------------------------------------------------------------
 * Copyright (c) Colorado School of Mines, 1990.
 * All rights reserved.
 *
 * This code is part of SU.  SU stands for Seismic Unix, a processing line
 * developed at the Colorado School of Mines, partially based on Stanford
 * Exploration Project (SEP) software.  Inquiries should be addressed to:
 *
 *  Jack K. Cohen, Center for Wave Phenomena, Colorado School of Mines,
 *  Golden, CO 80401  (jkc@@dix.mines.colorado)
 *----------------------------------------------------------------------
 */

a45 1
/**************** end self doc ***********************************/
d56 1
@


1.4
log
@new selfdoc installed
@
text
@d1 1
a1 1
/* SUCHW: $Revision: 1.3 $ ; $Date: 91/09/05 08:49:37 $		*/
d76 2
a77 2
	String key1, key2, key3;
	String type1;
d81 1
a81 1
	void changeval(String type1,
d117 1
a117 1
void changeval(String type1, Value *valp1, Value *valp2, Value *valp3,
@


1.3
log
@string -> String and so forth
@
text
@d1 1
a1 1
/* SUCHW: $Revision: 1.2 $ ; $Date: 90/09/03 09:47:33 $		*/
d20 39
a58 39
String sdoc = "\
								\n\
SUCHW - change header word using one or two header word fields	\n\
								\n\
suchw <stdin >stdout [optional parameters]			\n\
								\n\
Required parameters:						\n\
	none							\n\
								\n\
Optional parameters:						\n\
	key1=cdp	output key 				\n\
	key2=cdp	input key  				\n\
	key3=cdp	input key  				\n\
	a=0		overall shift 				\n\
	b=1		scale on first input key 		\n\
	c=0		scale on second input key 		\n\
	d=1		overall scale 				\n\
								\n\
The value of header word key1 is computed from the values of	\n\
key2 and key3 by:						\n\
								\n\
	val(key1) = (a + b * val(key2) + c * val(key3)) / d	\n\
								\n\
Examples:							\n\
Shift cdp numbers by -1:					\n\
	suchw <data >outdata a=-1				\n\
								\n\
Add 1000 to tracr value:					\n\
 	suchw key1=tracr key2=tracr a=1000 <infile >outfile	\n\
								\n\
We set the receiver point (gx) field by summing the offset	\n\
and shot point (sx) fields and then we set the cdp field by	\n\
averaging the sx and gx fields (we choose to use the actual	\n\
locations for the cdp fields instead of the conventional	\n\
1, 2, 3, ... enumeration):					\n\
	suchw <indata key1=gx key2=offset key3=sx b=1 c=1 |	\n\
	suchw key1=cdp key2=gx key3=sx b=1 c=1 d=2 >outdata	\n\
								\n\
";
d88 1
a88 1
	askdoc(1);
@


1.2
log
@ANSI C changes and using d for double instead of z
@
text
@d1 1
a1 1
/* SUCHW: $Revision: 1.1 $ ; $Date: 90/04/16 21:15:02 $		*/
d20 1
a20 1
string sdoc = "\
d76 2
a77 2
	string key1, key2, key3;
	string type1;
d79 1
a79 1
	value val1, val2, val3;
d81 2
a82 2
	void changeval(string type1,
		value *valp1, value *valp2, value *valp3,
d92 7
a98 7
	if (!sgetpar("key1", &key1))	key1 = "cdp";
	if (!sgetpar("key2", &key2))	key2 = "cdp";
	if (!sgetpar("key3", &key3))	key3 = "cdp";
	if (!dgetpar("a"   , &a))	a = 0;
	if (!dgetpar("b"   , &b))	b = 1;
	if (!dgetpar("c"   , &c))	c = 0;
	if (!dgetpar("d"   , &d))	d = 1;
d117 1
a117 1
void changeval(string type1, value *valp1, value *valp2, value *valp3,
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/* SUCHW: $Revision: 2.5 $ ; $Date: 89/05/25 16:49:53 $		*/
d4 1
a4 1
 * Copyright (c) Colorado School of Mines, 1989.
d12 1
a12 1
 *  Golden, CO 80401  (isis!csm9a!jkcohen)
d30 7
a36 7
	key1 = cdp	output key 				\n\
	key2 = cdp	input key  				\n\
	key3 = cdp	input key  				\n\
	a = 0		overall shift 				\n\
	b = 1		scale on first input key 		\n\
	c = 0		scale on second input key 		\n\
	d = 1		overall scale 				\n\
a68 2
 *
 *
a70 5
/* Embed Revision Control System identifier strings */
static string progid =
	"   $Source: /src/su/src/RCS/suchw.c,v $";
static string revid =
	"   $Revision: 2.5 $ ; $Date: 89/05/25 16:49:53 $";
a71 2


d74 1
a74 2
main(argc, argv)
int argc; char **argv;
d81 3
a83 1
	void changeval();
d86 1
a86 1
	/* Initialize SU */
a87 5
	if (!igetpar("ID", &ID))	ID = 0;
	if (ID) {
		(void) fprintf(stderr, "%s\n", progid);
		(void) fprintf(stderr, "%s\n", revid);
	}
d95 4
a98 4
	if (!zgetpar("a"   , &a))	a = 0;
	if (!zgetpar("b"   , &b))	b = 1;
	if (!zgetpar("c"   , &c))	c = 0;
	if (!zgetpar("d"   , &d))	d = 1;
d113 1
a113 2

	return SUCCEED;
d117 2
a118 4
void changeval(type1, valp1, valp2, valp3, a, b, c, d)
string type1;
value *valp1, *valp2, *valp3;
double a, b, c, d;
d120 1
a120 1
	switch(*type1) {
d145 2
a146 2
	case 'z':
		valp1->z = (a + b * valp2->z + c * valp3->z)/d;
@
