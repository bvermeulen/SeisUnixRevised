head	1.24;
access;
symbols;
locks; strict;
comment	@ * @;


1.24
date	2015.08.07.22.31.17;	author john;	state Exp;
branches;
next	1.23;

1.23
date	2013.07.01.21.25.22;	author john;	state Exp;
branches;
next	1.22;

1.22
date	2011.11.23.22.27.07;	author john;	state Exp;
branches;
next	1.21;

1.21
date	2011.11.16.23.35.04;	author john;	state Exp;
branches;
next	1.20;

1.20
date	2011.11.12.00.42.19;	author john;	state Exp;
branches;
next	1.19;

1.19
date	2011.02.24.22.04.10;	author john;	state Exp;
branches;
next	1.18;

1.18
date	2011.02.11.23.19.33;	author john;	state Exp;
branches;
next	1.17;

1.17
date	2010.11.19.19.02.55;	author john;	state Exp;
branches;
next	1.16;

1.16
date	2010.01.27.18.45.01;	author john;	state Exp;
branches;
next	1.15;

1.15
date	2010.01.20.21.58.29;	author john;	state Exp;
branches;
next	1.14;

1.14
date	2006.10.31.22.22.57;	author john;	state Exp;
branches;
next	1.13;

1.13
date	2003.06.09.16.17.07;	author john;	state Exp;
branches;
next	1.12;

1.12
date	97.06.09.16.53.48;	author john;	state Exp;
branches;
next	1.11;

1.11
date	96.09.04.23.01.57;	author jkc;	state Exp;
branches;
next	1.10;

1.10
date	96.01.24.17.18.11;	author jkc;	state Exp;
branches;
next	1.9;

1.9
date	94.08.25.14.58.50;	author jkc;	state Exp;
branches;
next	1.8;

1.8
date	93.08.09.15.19.14;	author john;	state Exp;
branches;
next	1.7;

1.7
date	92.10.26.14.21.52;	author john;	state Exp;
branches;
next	1.6;

1.6
date	91.09.05.08.49.28;	author jkcohen;	state Exp;
branches;
next	1.5;

1.5
date	90.12.18.20.44.43;	author jkc;	state Exp;
branches;
next	1.4;

1.4
date	90.11.06.14.52.41;	author jkc;	state Exp;
branches;
next	1.3;

1.3
date	90.09.01.20.38.49;	author jkc;	state Exp;
branches;
next	1.2;

1.2
date	90.05.25.19.25.34;	author jkc;	state Exp;
branches;
next	1.1;

1.1
date	90.04.16.18.47.38;	author jkc;	state Exp;
branches;
next	;


desc
@amp, phase, real, imag from freq-x traces
@


1.24
log
@added smoother for the phase unwrapping.
@
text
@/* Copyright (c) Colorado School of Mines, 2011.*/
/* All rights reserved.			*/

/* SUAMP: $Revision: 1.22 $ ; $Date: 2011/11/23 22:27:07 $		*/

#include "su.h"
#include "segy.h"

/*********************** self documentation **********************/
char *sdoc[] = {
" 									",
" SUAMP - output amp, phase, real or imag trace from			",
" 	(frequency, x) domain data					",
" 									",
" suamp <stdin >stdout mode=amp						",
" 									",
" Required parameters:							",
" none									",
" Optional parameter:							",
" mode=amp	output flag		 				",
" 		=amp	output amplitude traces				",
" 		=logamp	output log(amplitude) traces			",
" 			=phase	output phase traces			",
" 			=ouphase output unwrapped phase traces (oppenheim)",
" 			=suphase output unwrapped phase traces (simple)	",
" 			=real	output real parts			",
" 	     	=imag	output imag parts	 			",
" jack=0	=1  divide value at zero frequency by 2   		",
"		(operative only for mode=amp)				",
" 									",
" .... phase unwrapping options	..... 					",
" unwrap=1	 |dphase| > pi/unwrap constitutes a phase wrapping	",
"			(operative only for mode=suphase)		",
" trend=1	remove linear trend from the unwrapped phase		",
" zeromean=0	assume phase(0)=0.0, else assume phase is zero mean	",
" smooth=0	apply damped least squares smoothing to unwrapped phase ",
" r=10.0	    ... damping coefficient, only active when smooth=1	",
"  									",
" Notes:								",
" 	The trace returned is half length from 0 to Nyquist. 		",
" 									",
" Example:								",
" 	sufft <data | suamp >amp_traces					",
" Example: 								",
"	sufft < data > complex_traces					",
" 	 suamp < complex_traces mode=real > real_traces			",
" 	 suamp < complex_traces mode=imag > imag_traces			",
"  									",
" Note: the inverse of the above operation is: 				",
"	suop2 real_traces imag_traces op=zipper > complex_traces	",
"  									",
" Note: Explanation of jack=1 						",
" The amplitude spectrum is the modulus of the complex output of	",
" the fft. f(0) is thus the average over the range of integration	",
" of the transform. For causal functions, or equivalently, half		",
" transforms, f(0) is 1/2 of the average over the full range.		",
" Most oscillatory functions encountered in wave applications are	",
" zero mean, so this is usually not an issue.				",
"  									",
" Note: Phase unwrapping: 						",
"  									",
" The mode=ouphase uses the phase unwrapping method of Oppenheim and	",
" Schaffer, 1975. 							",
" The mode=suphase generates unwrapped phase assuming that jumps	",
" in phase larger than pi/unwrap constitute a phase wrapping.		",
NULL};

/* Credits:
 *	CWP: Shuki Ronen, Jack K. Cohen c.1986
 *
 * Notes:
 *	If efficiency becomes important consider inverting main loop
 *      and repeating extraction code within the branches of the switch.
 *
 * Trace header fields accessed: ns, trid
 * Trace header fields modified: ns, trid
 */
/**************** end self doc ***********************************/

/* function prototype of a subroutine used internally */
void smooth_1(float *x, float *z, float r, int n);



#define	REAL	1
#define	IMAG	2
#define	AMP	3
#define	ARG	4
#define	SUPHASE	5
#define	OUPHASE	6
#define LOGAMP  7

segy tr;

int
main(int argc, char **argv)
{
	cwp_String mode;	/* display: real, imag, amp, arg	*/
	int imode=AMP;		/* integer abbrev. for mode in switch	*/
	int nfby2;		/* nf/2					*/
	register float *xr;	/* real part of trace			*/
	register float *xi;	/* imaginary part of trace		*/
	int jack=0;		/* flag for special treatment of zero omega */
	float unwrap;		/* PI/unwrap = min dphase assumed to wrap */

	int zeromean;		/* =0 assume phase(0)=0.0 ; =1  zero mean*/
	int verbose=0;		/* =1 chatty ; =0 silent		*/
	int trend ;		/* remove linear trend in phase unwrapping */

	float df;		/* frequency sampling interval		*/
	int nf;			/* number of samples on input trace	*/


	/* smoothing */
	int smooth=0;   /* =1 perform least squares damping */
	float r=0;      /* smoothing parameter, active only for smooth=1 */


	/* Initialize */
	initargs(argc, argv);
	requestdoc(1);


	/* Get information from first trace */
	if (!gettr(&tr)) err("can't get first trace");
	if (tr.trid != FUNPACKNYQ)
		err("input not complex freq data, trid=%d", tr.trid);

	nf = tr.ns; /* always even--includes 1 or 2 "wasted" slots */
	nfby2 = nf/2;
	if (!getparint("verbose",&verbose))	verbose=0 ;

	df=tr.d1;
	if (!df) {
		float dt = ((double) tr.dt)/1000000.0;
		if (!dt) {
			dt = .004;
			if (verbose) warn("dt or d1 not set, assumed to be .004");
		}
		df = 1.0/nf*dt;
	}


	/* Get mode; note that imode is initialized to AMP */
	if (!getparstring("mode", &mode))	mode = "amp";
	if (!getparint("jack",&jack))	jack = 0;

	 /* get smoothing */
	if(!getparint("smooth",&smooth))	 smooth=0;
	if(!getparfloat("r",&r))		   r=10.0;



	if      (STREQ(mode, "phase")) imode = ARG;
	else if (STREQ(mode, "logamp"))  imode = LOGAMP;
	else if (STREQ(mode, "ouphase"))  imode = OUPHASE;
	else if (STREQ(mode, "suphase"))  imode = SUPHASE;
	else if (STREQ(mode, "real"))  imode = REAL;
	else if (STREQ(mode, "imag"))  imode = IMAG;
	else if (!STREQ(mode, "amp"))

		err("unknown mode=\"%s\", see self-doc", mode);


	if(imode==OUPHASE || imode==SUPHASE) {
		if (!getparint("trend",&trend))	trend = 1;
		if (!getparint("zeromean",&zeromean))	zeromean = 0;
		if (!getparfloat("unwrap",&unwrap))	unwrap = 1;
	}
		

	checkpars();

	/* Allocate arrays for real and imaginary parts */
	xr = ealloc1float(nfby2);
	xi = ealloc1float(nfby2);

	/* Main loop over traces */
	do {
		register int i;

		/* Separate complex trace into real and imag parts */
		for (i = 0; i < nfby2; ++i) {
			xr[i] = tr.data[2*i];
			xi[i] = tr.data[2*i+1];
		}

		/* Compute the desired half-length trace */
		switch(imode) {
		case REAL:
			for (i = 0; i < nfby2; ++i) {
				tr.data[i] = xr[i];
			}
			tr.trid = REALPART;
		break;
		case IMAG:
			for (i = 0; i < nfby2; ++i) {
				tr.data[i] = xi[i];
			}
			tr.trid = IMAGPART;
		break;
		case AMP:
		{
	 		register float re, im;
	
			re = xr[0];
			im = xi[0];
			if (jack) {
				tr.data[0] = (float) sqrt (re * re + im * im) / 2.0;
			} else {
				tr.data[0] = (float) sqrt (re * re + im * im);
			}
				for (i = 1; i < nfby2; ++i) {
					re = xr[i];
					im = xi[i];
					tr.data[i] = (float) sqrt (re * re + im * im);
			}
			tr.trid = AMPLITUDE;
		}
		break;
		case LOGAMP:
		{
	 		register float re, im, tmpamp;
	
			re = xr[0];
			im = xi[0];
			if (jack) {
				tr.data[0] = (float) sqrt (re * re + im * im) / 2.0;
			} else {
				tr.data[0] = (float) sqrt (re * re + im * im);
			}
				for (i = 1; i < nfby2; ++i) {

					re = xr[i];
					im = xi[i];

					tmpamp=(float) sqrt (re * re + im * im);

					if (CLOSETO(tmpamp,0.0)){
						tr.data[i]=0.0;
					} else {
						tr.data[i] = log(tmpamp);
					}
			}
			tr.trid = LOGAMPLITUDE;
		}
		break;
		case ARG:
			for (i = 0; i < nfby2; ++i) {
				float re = xr[i];
				float im = xi[i];

				if (re*re+im*im) {
					tr.data[i] = atan2(im, re);
				} else {
					tr.data[i] = 0.0;
				}
			}
			tr.trid = PHASE;
		break;
		case SUPHASE:
		{
			float *xout=NULL;
			float *phase=NULL;
			
			/* allocate space for the phase */
			phase = alloc1float(nfby2);
			xout = alloc1float(nfby2);

			for (i = 0; i < nfby2; ++i) {
				float re = xr[i];
				float im = xi[i];

				xout[i] = i;

				if (re*re+im*im) {
					phase[i] = atan2(im, re);
				} else {
					phase[i] = 0.0;
				}
			}

			/* unwrap the phase */
			if (unwrap)
				simple_unwrap_phase(nfby2, trend, zeromean, unwrap, phase);
 
			/* smooth */
			if (smooth) smooth_1(xout,phase,r,nfby2);

			
			/* write unwrapped phase */
			for ( i = 0; i < nfby2; ++i) tr.data[i] = phase[i];

			tr.trid = PHASE;
		}
		break;
		case OUPHASE:
		{
			float *phase=NULL;
			float *xout=NULL;
			
			/* allocate space */
			xout = alloc1float(nfby2);
			phase = ealloc1float(nfby2);
			
			memset((void *) phase,  0, nfby2*FSIZE);
			/* unwrap the phase */
			if (unwrap)
				oppenheim_unwrap_phase(nfby2, trend, zeromean, df, xr, xi, phase);

			for (i=0; i< nfby2; ++i) {
				 xout[i] = i;
			}

			/* smooth */
			if (smooth) smooth_1(xout,phase,r,nfby2);

			/* write unwrapped phase */
			for ( i = 0; i < nfby2; ++i) tr.data[i] = phase[i];

			tr.trid = PHASE;
		}
		break;
		default:
			err("mysterious mode=\"%s\"", mode);
		}

		/* Output the half-length trace */
		tr.ns = nfby2;
		puttr(&tr);

	} while (gettr(&tr));


	return(CWP_Exit());
}
@


1.23
log
@added log(amp(  option
@
text
@d2 1
a2 1
/* All rights reserved.		       */
d23 4
a26 4
" 	       	=phase	output phase traces				",
" 	       	=ouphase output unwrapped phase traces (oppenheim)	",
" 	       	=suphase output unwrapped phase traces (simple)		",
" 	       	=real	output real parts				",
d30 1
d34 5
a38 2
" trend=1 	 remove linear trend from the unwrapped phase		",
" zeromean=0 	 assume phase(0)=0.0, else assume phase is zero mean	",
d50 1
a50 1
"       suop2 real_traces imag_traces op=zipper > complex_traces	",
d80 4
d114 5
d148 5
d161 1
d263 1
d268 1
d274 2
d286 3
d290 1
d300 1
d303 1
d311 7
@


1.22
log
@removed m_unwrapphase, because it doesn't work.
@
text
@d4 1
a4 1
/* SUAMP: $Revision: 1.21 $ ; $Date: 2011/11/16 23:35:04 $		*/
d22 1
d83 1
d137 1
d202 27
@


1.21
log
@added Reg Beardsley's checkpar()
@
text
@d2 1
a2 1
/* All rights reserved.                       */
d4 1
a4 1
/* SUAMP: $Revision: 1.19 $ ; $Date: 2011/02/24 22:04:10 $		*/
d11 50
a60 53
" 								",
" SUAMP - output amp, phase, real or imag trace from		",
" 	(frequency, x) domain data				",
" 								",
" suamp <stdin >stdout mode=amp					",
" 								",
" Required parameters:						",
" none								",
" Optional parameter:						",
" mode=amp	output flag		 			",
" 		=amp	output amplitude traces			",
" 	       	=phase	output phase traces			",
" 	       	=ouphase output unwrapped phase traces (oppenheim)",
" 	       	=muphase output unwrapped phase traces (m)	",
" 	       	=suphase output unwrapped phase traces (simple)	",
" 	       	=real	output real parts			",
" 	     	=imag	output imag parts	 		",
" jack=0	=1  divide value at zero frequency by 2   	",
"		(operative only for mode=amp)			",
" .... phase unwrapping options	..... 				",
" unwrap=1	 |dphase| > pi/unwrap constitutes a phase wrapping",
"			(operative only for mode=suphase)	",
" trend=1 	 remove linear trend from the unwrapped phase	",
" zeromean=0 	 assume phase(0)=0.0, else assume phase is zero mean",
" Notes:							",
" 	The trace returned is half length from 0 to Nyquist. 	",
" 								",
" Example:							",
" 	sufft <data | suamp >amp_traces				",
" Example: 							",
"	sufft < data > complex_traces				",
" 	 suamp < complex_traces mode=real > real_traces		",
" 	 suamp < complex_traces mode=imag > imag_traces		",
"  								",
" Note: the inverse of the above operation is: 			",
"       suop2 real_traces imag_traces op=zipper > complex_traces",
"  								",
" Note: Explanation of jack=1 					",
" The amplitude spectrum is the modulus of the complex output of",
" the fft. f(0) is thus the average over the range of integration",
" of the transform. For causal functions, or equivalently, half",
" transforms, f(0) is 1/2 of the average over the full range.	",
" Most oscillatory functions encountered in wave applications are",
" zero mean, so this is usually not an issue.			",
"  								",
" Note: Phase unwrapping: 					",
"  								",
" The mode=ouphase uses the phase unwrapping method of Oppenheim and ",
" Schaffer, 1975. 						",
" The mode=m looks for jumps in the phase and adds or subtracts",
" 2PI as needed. 						",
" The mode=suphase generates unwrapped phase assuming that jumps ",
" in phase larger than pi/unwrap constitute a phase wrapping.	",
a81 1
#define	MUPHASE	7
a135 1
	else if (STREQ(mode, "muphase"))  imode = MUPHASE;
d150 1
a150 2

        checkpars();
a239 28
		case MUPHASE:
		{
			float *phase=NULL;
			
			/* allocate space for the phase */
			phase = alloc1float(nfby2);

			for (i = 0; i < nfby2; ++i) {
				float re = xr[i];
				float im = xi[i];

				if (re*re+im*im) {
					phase[i] = atan2(im, re);
				} else {
					phase[i] = 0.0;
				}
			}

			/* unwrap the phase */
			if (unwrap)
				m_unwrap_phase(nfby2, unwrap, trend, zeromean, df, phase);

			/* write unwrapped phase */
			for ( i = 0; i < nfby2; ++i) tr.data[i] = phase[i];

			tr.trid = PHASE;
		}
		break;
@


1.20
log
@copyright
@
text
@d155 3
@


1.19
log
@added m phase unwrapping
@
text
@d1 4
a4 1
/* SUAMP: $Revision: 1.18 $ ; $Date: 2011/02/11 23:19:33 $		*/
@


1.18
log
@added Oppenheim phase unwrapping and renamed unwrap_phase simple_unwrap_phase
@
text
@d1 1
a1 1
/* SUAMP: $Revision: 1.17 $ ; $Date: 2010/11/19 19:02:55 $		*/
d21 1
d31 1
a31 1
" zeromean=0 	 assume phase(0)=0.0, else assume phase iszero mean",
a53 2
" The mode=suphase generates unwrapped phase assuming that jumps ",
" in phase larger than pi/unwrap constitute a phase wrapping.	",
d57 4
d82 1
d136 2
a138 1
	else if (STREQ(mode, "ouphase"))  imode = OUPHASE;
d147 1
a147 1
		if (!getparint("zeromean",&zeromean))	zeromean = 1;
d240 28
@


1.17
log
@added uphase option
@
text
@d1 1
a1 1
/* SUAMP: $Revision: 1.16 $ ; $Date: 2010/01/27 18:45:01 $		*/
d20 2
a21 1
" 	       	=uphase	output unwrapped phase traces		",
d25 2
a26 1
"                (operative only for mode=amp)			",
d28 3
d52 2
a53 1
" The mode=uphase generates unwrapped phase assuming that jumps ",
d55 3
a72 3
/* prototype of subroutine used internally */
void unwrap_phase(int n, float w, float *phase);

d77 2
a78 1
#define	UPHASE	5
a86 1
	int nf;			/* number of samples on input trace	*/
d93 7
d113 11
a130 1

d132 2
a133 1
	else if (STREQ(mode, "uphase"))  imode = UPHASE;
d139 4
a142 1
	if(imode==UPHASE)
d144 2
d207 1
a207 1
		case UPHASE:
d227 19
a245 1
				unwrap_phase(nfby2, unwrap, phase);
a265 60

void unwrap_phase(int n, float w, float *phase)
/************************************************************************
unwrap_phase - unwrap the phase
*************************************************************************
Input:
n		number of samples
w		unwrapping parameter; returns an error if w=0
phase		array[n] of input phase values

Output:
phase		array[n] of output phase values
*************************************************************************
Notes:
The strategy is to look at the change in phase (dphase) with each 
time step. If |dphase| >  PI/w, then use the previous value of 
dphase. No attempt is made at smoothing the dphase curve.
*************************************************************************
Author: John Stockwell, CWP, 2010
************************************************************************/
{
	int i;
	float pibyw=0.0;
	float *dphase=NULL;
	float *temp=NULL;

	/* prevent division by zero in PI/w */
	if (w==0)  err("wrapping parameter is zero");
	else       pibyw = PI/w;

	/* allocate space */
	dphase = ealloc1float(n);
	temp = ealloc1float(n);

	/* initialize */
	temp[0]=phase[0];
	dphase[0]=0.0;

	/* compute unwrapped phase at each frequency step */
	for (i = 1; i < n; ++i) {

		/* compute jump in phase */
		dphase[i] = phase[i] - phase[i-1];

		/* if jump in dphase >= PI/w, use previous dphase value */
		if (ABS(dphase[i] - dphase[i-1]) >= pibyw )
			dphase[i] = dphase[i-1];

		/* sum up values in temporary vector */
		temp[i] = temp[i-1] + dphase[i];
	}

	/* assign values of temporary vector to phase[i] */
	for (i=0; i<n; ++i) phase[i] = temp[i];

	/* free space */
	free1float(temp);
	free1float(dphase);

}
@


1.16
log
@added jack flag for 1/2 times amplitude at zero frequency
@
text
@d1 1
a1 1
/* SUAMP: $Revision: 1.15 $ ; $Date: 2010/01/20 21:58:29 $		*/
d20 1
d25 1
d46 3
d64 3
d71 1
d85 1
d106 2
d109 1
d115 2
d169 25
a193 2
				if (re*re+im*im)  tr.data[i] = atan2(im, re);
				else	      tr.data[i] = 0.0;
d195 8
d204 1
d219 60
@


1.15
log
@small credits change
@
text
@d1 1
a1 1
/* SUAMP: $Revision: 1.14 $ ; $Date: 2006/10/31 22:22:57 $		*/
d15 1
a15 2
" 	none							",
" 								",
d17 8
a24 7
" 	mode=amp	output flag		 		",
" 	       		amp   = output amplitude traces		",
" 	       		phase = output phase traces		",
" 	       		real  = output real parts		",
" 	       		imag  = output imag parts 		",
" 								",
" Note:								",
d36 8
a43 1
" 								",
d75 1
d94 1
d137 5
a141 1
			tr.data[0] = (float) sqrt (re * re + im * im) / 2.0;
@


1.14
log
@added inverse of separating data into real and imaginary types.
@
text
@d1 1
a1 1
/* SUAMP: $Revision: 1.13 $ ; $Date: 2003/06/09 16:17:07 $		*/
d40 1
a40 1
 *	CWP: Shuki, Jack
@


1.13
log
@9 June 2003
@
text
@d1 1
a1 1
/* SUAMP: $Revision: 1.12 $ ; $Date: 1997/06/09 16:53:48 $		*/
d29 7
@


1.12
log
@Toralf's fix implemented.
@
text
@d1 1
a1 1
/* SUAMP: $Revision: 1.11 $ ; $Date: 1996/09/04 23:01:57 $		*/
d150 1
a150 1
	return EXIT_SUCCESS;
@


1.11
log
@Fixed -Wall complaints.
@
text
@d1 1
a1 1
/* SUAMP: $Revision: 1.10 $ ; $Date: 1996/01/24 17:18:11 $		*/
d116 10
a125 4
			for (i = 0; i < nfby2; ++i) {
				float re = xr[i];
				float im = xi[i];
				tr.data[i] = sqrt(re*re+im*im);
d128 1
d135 1
a135 1
				else              tr.data[i] = 0.0;
@


1.10
log
@Handle header fields accessed/modified for sudoc.
@
text
@d1 1
a1 1
/* SUAMP: $Revision: 1.9 $ ; $Date: 1994/08/25 14:58:50 $		*/
d52 1
d56 1
a56 1
	int imode;		/* integer abbrev. for mode in switch	*/
d77 1
a77 1
	/* Get mode */
d80 1
a80 2
	if (STREQ(mode, "amp"))        imode = AMP;
	else if (STREQ(mode, "phase")) imode = ARG;
d83 3
a85 2
	else     err("unknown mode=\"%s\", see self-doc", mode);
	
@


1.9
log
@Removed copyright statement from codes that had it.
Moved self-doc line for sudoc.
@
text
@d1 1
a1 1
/* SUAMP: $Revision: 1.8 $ ; $Date: 93/08/09 15:19:14 $		*/
d39 2
@


1.8
log
@changed String to cwp_String
@
text
@d1 1
a1 1
/* SUAMP: $Revision: 1.7 $ ; $Date: 92/10/26 14:21:52 $		*/
a2 13
/*----------------------------------------------------------------------
 * Copyright (c) Colorado School of Mines, 1990.
 * All rights reserved.
 *
 * This code is part of SU.  SU stands for Seismic Unix, a processing line
 * developed at the Colorado School of Mines, partially based on Stanford
 * Exploration Project (SEP) software.  Inquiries should be addressed to:
 *
 *  Jack K. Cohen, Center for Wave Phenomena, Colorado School of Mines,
 *  Golden, CO 80401  (jkc@@dix.mines,.colorado.edu)
 *----------------------------------------------------------------------
 */

a30 1
/**************** end self doc ***********************************/
d40 1
d52 1
a52 1
	cwp_String mode;		/* display: real, imag, amp, arg	*/
@


1.7
log
@new selfdoc installed
@
text
@d1 1
a1 1
/* SUAMP: $Revision: 1.6 $ ; $Date: 91/09/05 08:49:28 $		*/
d65 1
a65 1
	String mode;		/* display: real, imag, amp, arg	*/
@


1.6
log
@string -> String and so forth
@
text
@d1 1
a1 1
/* SUAMP: $Revision: 1.5 $ ; $Date: 90/12/18 20:44:43 $		*/
d20 24
a43 24
String sdoc =
" 								\n"
" SUAMP - output amp, phase, real or imag trace from		\n"
" 	(frequency, x) domain data				\n"
" 								\n"
" suamp <stdin >stdout mode=amp					\n"
" 								\n"
" Required parameters:						\n"
" 	none							\n"
" 								\n"
" Optional parameter:						\n"
" 	mode=amp	output flag		 		\n"
" 	       		amp   = output amplitude traces		\n"
" 	       		phase = output phase traces		\n"
" 	       		real  = output real parts		\n"
" 	       		imag  = output imag parts 		\n"
" 								\n"
" Note:								\n"
" 	The trace returned is half length from 0 to Nyquist. 	\n"
" 								\n"
" Example:							\n"
" 	sufft <data | suamp >amp_traces				\n"
" 								\n"
;
d75 1
a75 1
	askdoc(1);
@


1.5
log
@Bringing up to current coding style.
@
text
@d1 1
a1 1
/* SUAMP: $Revision: 1.4 $ ; $Date: 90/11/06 14:52:41 $		*/
d20 1
a20 1
string sdoc =
d65 1
a65 1
	string mode;		/* display: real, imag, amp, arg	*/
@


1.4
log
@Added trid's for AMP and PHASE traces (must have
been distracted last time).
@
text
@d1 1
a1 1
/* SUAMP: $Revision: 1.3 $ ; $Date: 90/09/01 20:38:49 $		*/
d20 24
a43 24
string sdoc = "\
								\n\
SUAMP - output amp, phase, real or imag trace from		\n\
	(frequency, x) domain data				\n\
								\n\
suamp <stdin >stdout mode=amp					\n\
								\n\
Required parameters:						\n\
	none							\n\
								\n\
Optional parameter:						\n\
	mode=amp	output flag		 		\n\
	       		amp   = output amplitude traces		\n\
	       		phase = output phase traces		\n\
	       		real  = output real parts		\n\
	       		imag  = output imag parts 		\n\
								\n\
Note:								\n\
	The trace returned is half length from 0 to Nyquist. 	\n\
								\n\
Example:							\n\
	sufft <data | suamp >amp_traces				\n\
								\n\
";
a70 2
	float re;		/* storage for xr[i]			*/
	float im;		/* storage for xi[i]			*/
d88 1
a88 1
	if (!sgetpar("mode", &mode))	mode = "amp";
d127 2
a128 1
				re = xr[i]; im = xi[i];
d135 4
a138 1
				tr.data[i] = atan2(xi[i], xr[i]);
@


1.3
log
@Adapted for pfarc,pfacr's unpacked to Nyquist traces.
@
text
@d1 1
a1 1
/* SUAMP: $Revision: 1.2 $ ; $Date: 90/05/25 19:25:34 $		*/
d132 1
d138 1
@


1.2
log
@vec --> ealloc1float, etc.
@
text
@d1 1
a1 1
/* SUAMP: $Revision: 1.1 $ ; $Date: 90/04/16 18:47:38 $		*/
d67 2
a68 4
	int nt;			/* number of time samples on input trace*/
	int ntby2;		/* nt/2					*/
	int ntby2p1;		/* nt/2 + 1				*/
	int ntm1;		/* nt - 1				*/
a72 1
	register int i;		/* counter				*/
d82 2
a83 6
	if (tr.trid != FPACK)
		err("input not packed freq data, trid=%d", tr.trid);
	nt = tr.ns;
	ntby2 = tr.ns/2;
	ntby2p1 = ntby2 + 1;
	ntm1 = nt - 1;
d85 2
d88 1
d100 2
a101 2
	xr = ealloc1float(nt);
	xi = ealloc1float(nt);
d105 4
a108 10
		/* Unpack the trace into real and imag parts */
		xr[0] = tr.data[0];
		xi[0] = 0.0;
		xr[ntby2] = tr.data[1]; 
		if (ISODD(nt)) {
			xi[ntby2] = tr.data[ntm1];
		} else {
			xi[ntby2] = 0.0;
		}
		for (i = 1; i < ntby2; i++) {
d116 1
a116 1
			for (i = 0; i <= ntby2; i++) {
d122 1
a122 1
			for (i = 0; i <= ntby2; i++) {
d128 2
a129 5
			tr.data[0] = ABS(xr[0]);
			tr.data[ntby2] = ABS(xr[ntby2]); 
			for (i = 1; i < ntby2; i++) {
				re = xr[i];
				im = xi[i];
d134 1
a134 1
			for (i = 0; i <= ntby2; i++) {
d143 1
a143 1
		tr.ns = ntby2p1;
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/* SUAMP: $Revision: 2.6 $ ; $Date: 89/09/20 19:34:58 $		*/
d4 1
a4 1
 * Copyright (c) Colorado School of Mines, 1989.
d12 1
a12 1
 *  Golden, CO 80401  (isis!csm9a!jkcohen)
d31 1
a31 1
	mode = amp	output flag		 		\n\
a52 1
 *
a54 5
/* Embed Revision Control System identifier strings */
static string progid =
	"   $Source: /src/su/src/RCS/suamp.c,v $";
static string revid =
	"   $Revision: 2.6 $ ; $Date: 89/09/20 19:34:58 $";
a55 2


d63 1
a63 2
main(argc, argv)
int argc; char **argv;
d78 1
a78 1
	/* Initialize SU */
a79 5
	if (!igetpar("ID", &ID))	ID = 0;
	if (ID) {
		(void) fprintf(stderr, "%s\n", progid);
		(void) fprintf(stderr, "%s\n", revid);
	}
d104 2
a105 2
	xr = vec(nt);
	xi = vec(nt);
d159 1
a159 1
	} while(gettr(&tr));
d162 1
a162 1
	return SUCCEED;
@
