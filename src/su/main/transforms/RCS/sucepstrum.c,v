head	1.10;
access;
symbols;
locks
	john:1.10; strict;
comment	@ * @;


1.10
date	2015.08.07.22.34.05;	author john;	state Exp;
branches;
next	1.9;

1.9
date	2013.07.03.00.29.41;	author john;	state Exp;
branches;
next	1.8;

1.8
date	2013.05.24.18.47.00;	author john;	state Exp;
branches;
next	1.7;

1.7
date	2011.11.16.23.35.04;	author john;	state Exp;
branches;
next	1.6;

1.6
date	2011.11.12.00.42.19;	author john;	state Exp;
branches;
next	1.5;

1.5
date	2010.12.07.00.13.05;	author john;	state Exp;
branches;
next	1.4;

1.4
date	2010.11.24.22.51.47;	author john;	state Exp;
branches;
next	1.3;

1.3
date	2009.07.28.17.19.20;	author john;	state Exp;
branches;
next	1.2;

1.2
date	2009.07.22.17.41.35;	author john;	state Exp;
branches;
next	1.1;

1.1
date	2008.08.01.18.39.56;	author john;	state Exp;
branches;
next	;


desc
@cepstrum of a seismic panel
@


1.10
log
@put in a smoother
@
text
@/* Copyright (c) Colorado School of Mines, 2011.*/
/* All rights reserved.                       */

/* SUCEPSTRUM: $Revision: 1.11 $ ; $Date: 2013/05/31 18:31:19 $		*/

#include "su.h"
#include "segy.h"

/*********************** self documentation **********************/
char *sdoc[] = {
" 									",
" SUCEPSTRUM - transform to the CEPSTRal domain				",
" 									",
"  sucepstrum <stdin >sdout sign1=1 					",
" 									",
" Required parameters:							",
" none									",
" 									",
" Optional parameters:							",
" sign1=1			sign in exponent of fft			",
" sign2=-1			sign in exponent of ifft		",
" dt=from header		sampling interval			",
" verbose=1			=0 to stop advisory messages		",
" 									",
" .... phase unwrapping options .....				   	",
" mode=ouphase	Oppenheim's phase unwrapping				",
"		=suphase simple jump detecting phase unwrapping		",
" unwrap=1       |dphase| > pi/unwrap constitutes a phase wrapping	",
" 	 	=0 no phase unwrapping	(in mode=suphase  only)		",
" trend=1	remove linear trend from the unwrapped phase	   	",
" zeromean=0     assume phase(0)=0.0, else assume phase is zero mean	",
" smooth=0      apply damped least squares smoothing to unwrapped phase ",
" r=10     ... damping coefficient, only active when smooth=1           ",
" 									",
" Notes:								",
" The complex log fft of a function F(t) is given by:			",
" clogfft(F(t)) = log(FFT(F(t)) = log|F(omega)| + iphi(omega)		",
" where phi(omega) is the unwrapped phase. Note that 0< unwrap<= 1.0 	",
" allows phase unwrapping to be tuned, if desired. 			",
" 									",
" The ceptrum is the inverse Fourier transform of the log fft of F(t) 	",
" F(t_c) =cepstrum(F(t)) = INVFFT[log(FFT(F(t))]			",
"                        =INVFFT[log|F(omega)| + iphi(omega)]		",
" Here t_c is the cepstral time domain. 				",
" 									",
" To facilitate further processing, the sampling interval		",
" in quefrency and first quefrency (0) are set in the			",
" output header.							",
" 									",
" Caveats: 								",
" No check is made that the data ARE real time traces!			",
" 									",
" Use suminphase to make minimum phase representations of signals 	",
NULL};

/* Credits:
 *      CWP: John Stockwell, June 2013 based on
 *	sufft by:
 *	CWP: Shuki Ronen, Chris Liner, Jack K. Cohen
 *	CENPET: Werner M. Heigl - added well log support
 *	U Montana: Bob Lankston - added m_unwrap_phase feature
 *
 * Note: leave dt set for later inversion
 *
 * Trace header fields accessed: ns, dt, d1, f1
 * Trace header fields modified: ns, d1, f1, trid
 */
/**************** end self doc ***********************************/


#define LOOKFAC	2	/* Look ahead factor for npfaro	  */
#define PFA_MAX	720720	/* Largest allowed nfft		   */

#define SIMPLE 0
#define OPPENHEIM 1

segy tr;

int
main(int argc, char **argv)
{
	register float *rt=NULL;	/* real trace			*/
	register complex *ct=NULL;	/* complex transformed trace	*/
	register complex *clogfft=NULL;/* the clogfft domain form of a trace*/
	register float *cepstrum=NULL;/* the clogfft domain form of a trace*/
	int nt;			/* number of points on input trace	*/
	int nfft;		/* transform length			*/
	int nifft=0;		/* inverse transform length		*/
	float onifft=0.0;	/* one over inverse transform length	*/
	int nf;			/* number of frequencies		*/
	int sign1;		/* sign in exponent of 1st transform	*/
	int sign2;		/* sign in exponent of 2nd transform	*/
	int verbose;		/* flag to get advisory messages	*/
	float dt;		/* sampling interval in secs		*/
	float d1;		/* output sample interval in Hz		*/
	float newd1;		/* output sample interval in Hz		*/
	cwp_Bool seismic;	/* is this seismic data? 		*/
	float unwrap;		/* PI/unwrap = min dphase assumed to wrap */
	float *phase;		/* phase of signal			*/
	float nfby2;		/* nf/2.0				*/
	
	int trend;		/* trend=1 remove linear treand in */
				/*        unwrapped phase */
	int zeromean;		/* =0 assume phase(0)=0.0, else zeromean */

	cwp_String mode="ouphase"; /* mode =suphase or =ouphase for phase unwrap */
	int imode=OPPENHEIM;	/* integer mode flag			*/

	float *real=NULL; 	/* real  part */
	float *imag=NULL;	/* imag part */

        /* smoothing */
        int smooth=0;   /* =1 perform least squares damping */
        float r=0;      /* smoothing parameter, active only for smooth=1 */



	/* Initialize */
	initargs(argc, argv);
	requestdoc(1);
	if (!getparint("verbose", &verbose))	verbose=1;
	if (!getparint("trend", &trend))	trend=1;
	if (!getparint("zeromean", &zeromean))	zeromean=0;


	/* note mode is intialized to "ouphase" and */
	/* imode is intialized to OPPENHEIM */
	getparstring("mode",&mode);
	if (STREQ(mode, "suphase")) imode = SIMPLE;
	else if (!STREQ(mode, "ouphase"))
			err("unknown mode=\"%s\", see self-doc", mode);


	if (verbose) warn("mode = %s",mode);

         /* get smoothing */
        if(!getparint("smooth",&smooth))         smooth=0;
        if(!getparfloat("r",&r))    			r=10.0;           

	/* Get info from first trace */ 
	if (!gettr(&tr))  err("can't get first trace");
	nt = tr.ns;

	/* check for seismic or well log data */
	seismic = ISSEISMIC(tr.trid);		
	if (seismic) {
		if (verbose)	warn("input is seismic data, trid=%d",tr.trid);
		dt = ((double) tr.dt)/1000000.0;
	}
	else {
		if (verbose)	warn("input is not seismic data, trid=%d",tr.trid);
		dt = tr.d1;
	 }
	if (!dt) {
		dt = .004;
		if (verbose) warn("dt or d1 not set, assumed to be .004");
	}

	/* Set up pfa fft */
	nfft = npfaro(nt, LOOKFAC * nt);
	if (nfft >= SU_NFLTS || nfft >= PFA_MAX)  err("Padded nt=%d--too big", nfft);
	nf = nfft/2 + 1;
	d1 = 1.0/(nfft*dt);
	nfby2 = nf/2.0;

	if (!getparint("sign1", &sign1)) sign1 = 1;
	if (!getparint("sign2", &sign1)) sign2 = -1;
	if (!getparfloat("unwrap", &unwrap))	unwrap = 1.0;
	if (sign1 != 1 && sign1 != -1)   err("sign1 = %d must be 1 or -1", sign1);
	if (sign2 != -1 && sign2 != 1)   err("sign2 = %d must be -1 or 1", sign2);


        checkpars();

	rt = ealloc1float(nfft);
	ct = ealloc1complex(nf);
	phase = ealloc1float(nf);
	real = ealloc1float(nf);
	imag = ealloc1float(nf);
	clogfft = ealloc1complex(nf);


	/* If dt not set, issue advisory on frequency step d1 */
	if (dt && verbose)  warn("d1=%f", 1.0/(nfft*dt));



	/* Main loop over traces */
	do {
		register int i;
	
		/* zero out arrays */
		memset((void *) phase, 0,nf*FSIZE);
		memset((void *) real, 0,nf*FSIZE);
		memset((void *) imag, 0,nf*FSIZE);
		memset((void *) clogfft, 0,nf*CSIZE);

		/* Load trace into rt (zero-padded) */
		memcpy((void *) rt, (const void *) tr.data, nt*FSIZE);
		memset((void *) (rt + nt), 0, (nfft-nt)*FSIZE);


		/* FFT */
		pfarc(sign1, nfft, rt, ct);


		/* calculate the amplitude and phase 		*/
		for (i = 0; i < nf; ++i) {
			float re=ct[i].r;
			float im=ct[i].i;
			float ampsqrd = re*re + im*im;
			
			/* calculate amplitude and phase */
			if (!CLOSETO(ampsqrd,0.0)) {
					clogfft[i].r = (float) 0.5*log(ampsqrd);
					phase[i] = atan2(im, re);
				} else {
					phase[i] = 0.0;
					tr.data[2*i] = 0.0;
					
				}
				real[i] = ct[i].r;
				imag[i] = ct[i].i;
	
		}
		/* unwrap phase */
		if (unwrap) {
			float *xout=NULL;


			/* smoothing array of x values */
                        xout = alloc1float(nf);
                        if (smooth) for (i=0; i<nf; ++i) xout[i] = i;

			switch(imode) {
			case SIMPLE:
				simple_unwrap_phase(nf, trend, zeromean, unwrap, phase);

			break;
			case OPPENHEIM:

				memset((void *) phase, 0,nf*FSIZE);
				oppenheim_unwrap_phase(nf, trend, zeromean, d1, real, imag, phase);

			break;
			default:
				err("mysterious mode=\"%s\"", mode);

			}

                	/* smooth */
                	if (smooth) smooth_1(xout,phase,r,nf);
		}


		/* write unwrapped phase into imaginary part of output data */
		for (i = 0; i < nf; ++i) {
			clogfft[i].i = phase[i];
		}



		/* prepare for inverse fourier transform */
		nifft = 2*nf - 2;  /* see suifft */
		onifft= (float) 1.0/nifft;

	       if(tr.d1) {
       		     newd1 = onifft/tr.d1;
        	} else {
           		if(tr.dt) newd1 = (float) (((double) tr.dt)/1000000.0);
           	else newd1 = 0.0f;
        	}

		cepstrum = ealloc1float(nifft);
		memset((void *) cepstrum, 0,nifft*FSIZE);
		

		/* Inverse FFT to go from logfft to cepstral domain */
		pfacr(sign2, nifft, clogfft, cepstrum);

		/* load the cepstrum into the output trace */
		/* Load back and scale for inverse fft */
                for (i = 0; i < nifft; ++i)  tr.data[i] = cepstrum[i] * onifft;

		/* Set header values--npfaro makes nfft even */
		tr.ns = nifft;
		tr.trid = TREAL ;
		tr.d1 = newd1;
		tr.f1 = 0.0;

		puttr(&tr);

	} while (gettr(&tr));


	return(CWP_Exit());
}
@


1.9
log
@updated
@
text
@d32 2
d112 6
d136 4
d167 1
d170 1
d228 6
d238 1
d244 1
d251 2
d255 1
d272 1
a272 1
        }
@


1.8
log
@added choice of oppenheim phase unwrap as well as the simple phase unwrap.
@
text
@d4 1
a4 1
/* SUCEPSTRUM: $Revision: 1.7 $ ; $Date: 2011/11/16 23:35:04 $	*/
a7 4
#include "header.h"
#define TWOPI 2.0*PI
#define TINY FLT_EPSILON
#define CTINY cmplx(FLT_EPSILON,FLT_EPSILON)
d9 1
a9 1
/*********************** self documentation *****************************/
d11 22
a32 12
" SUCEPSTRUM - Compute the CEPSTRUM of a seismic trace or compute the	",
"		minimum phase reconstruction of a trace			",
"  sucepstrum < stdin > stdout					   	",
"									",
" Required parameters:						  	",
"	none								",
" Optional parameters:						  	",
" sign1=1		sign of real to complex transform		",
" sign2=-1		sign of complex to real transform		",
"   mpr=0		=1 minimum phase reconstructed version of	", 
"			    original signal				",
"   centered=0		=1 symmetrical output			 	",
d34 18
a51 5
" The cepstrum is defined as the fourier transform of the the decibel   ",
" spectrum, as though it were a time domain signal.			",
" C(t) = FFT(ln(|T(w)|)}						",
"	|T(w)| = amplitude spectrum of the trace			",
" For mpr=1, the input traces are converted to the minimum phase form.	",
d54 6
a59 3
/*
 * Author: Balazs Nemeth of Potash Corporation of Saskatchewan Inc. 
 *  given to CWP in 2008
d61 4
d66 2
a67 1
/**************** end self doc ********************************/
d69 2
a70 2
#define LOOKFAC 4	/* Look ahead factor for npfaro   */
#define PFA_MAX 720720  /* Largest allowed nfft	   */
d72 2
a73 3
/* Segy data constants */
segy tr;				/* SEGY trace */
segy trout;
d75 1
a75 1
void rceps(int sign1, int sign2, int nt, int mph,float *x,float *c);
d77 2
a78 2
int 
main( int argc, char *argv[] )
d80 19
a98 6
	int nt;		/* number of time samples per trace		*/
	float dt;	/* time sampling interval			*/
	int centered;	/* flag; =1 symmetric output 			*/
	int mpr;	/* flag: =1 perform minimum phase reconstruction*/
	int sign1;	/* sign on real to complex transform		*/
	int sign2;	/* sign on complex to real transform		*/
d100 11
a110 1
	/* hook up getpars */
d112 46
a157 8
   	requestdoc(1);	
	
	/* get parameters */
	if (!getparint("centered", &centered)) centered=0;
	if (!getparint("mpr", &mpr))		mpr=0;
	if (!getparint("sign1",&sign1)) 	sign1=1;
	if (!getparint("sign2",&sign2)) 	sign2=-1;
	
d161 14
a174 6
	/* get information from the first header */
	if (!gettr(&tr)) err("can't get first trace");
	nt = tr.ns;
	dt = (double)tr.dt/1000000.0;
		
	/* loop over traces */
d176 22
a197 4

			/* compute the cepstrum or compute	*/
			/* minimum phase reconstruction		*/
			rceps(sign1,sign2,nt,mpr,tr.data,tr.data);	
d199 8
a206 16
			/* computation if centered output desired */
			if(centered) {
				{ int n,it;
					if(!ISODD(nt)) {
						n=nt+1;
					} else {
						n=nt;
					}
					memcpy((void *) &trout,(const void *) &tr,HDRBYTES);
					memcpy((void *) &trout.data[n/2],(const void *) tr.data,n/2*FSIZE);
					for(it=0;it<n/2;it++) 
						trout.data[it] = tr.data[n/2-it];
					trout.ns=n;
					trout.f1=-n/2*dt;
					trout.d1=dt;
					puttr(&trout);
d208 19
a226 2
			} else {
				puttr(&tr);
a227 4
	} while(gettr(&tr));
	
	return(CWP_Exit());
}
d229 1
a229 45
void rceps(int sign1,int sign2,int nt, int mph,float *x,float *c)
/***********************************************************************
rceps - compute the cepstrum or the minimum phase reconstruction of a signal
        using the cepstrum.
************************************************************************
Input:
nt	number of time samples
mph	minimum phase reconstruction flag
x	input data
Output:
c	output data
************************************************************************
Author: Balasz Nemeth, Potash Corporation, Saskatchewan  c. 2008
***********************************************************************/
{	
	int nfftc;
	int nf;
	float snfftc;
	complex *w=NULL;
	float *a=NULL;
	float *p=NULL;
	int iw;
	int ntp;
	
	
	/* Set up pfa fft */
	ntp = NINT(nt);
	nfftc = npfao(ntp,LOOKFAC*ntp); 
	if (nfftc >= SU_NFLTS || nfftc >= PFA_MAX)
			err("Padded nt=%d--too big", nfftc);
	nf = nfftc/2 + 1;
	snfftc=1.0/nfftc;

	/* allocate space */
	w = ealloc1complex(nf);
	a = ealloc1float(nfftc);
	p = ealloc1float(nfftc);
		
	memset( (void *) &a[nt], 0, (nfftc-nt)*FSIZE);
	memcpy( (void *) a, (const void *) x, nt*FSIZE);
		
	/* FFT */			
	sscal(nt,snfftc,a,1);
	pfarc(sign1, nfftc,a,w);
	
d231 3
a233 12
	for(iw=0;iw<nf;iw++) {
		a[iw] = rcabs(w[iw]);
		p[iw] = atan2(w[iw].i,w[iw].r);
	}
	
	for(iw=0;iw<nf;iw++) {
		if(!CLOSETO(a[iw],0.0)) {
			w[iw].r = (float)log((double)a[iw]);
			w[iw].i = 0.0;
		} else {
			w[iw].r=0.0;
			w[iw].i=0.0;
a234 2
	}
	pfacr(sign2, nfftc,w,c);
a235 1
	if(mph) {
d237 14
a250 11
		a[0] = c[0];
		if(nt%2) {
			for(iw=1;iw<nt/2;iw++)
				a[iw] = 2.0*c[iw];
			a[nt/2] = c[nt/2];
			memset( (void *) &a[nt/2+1],0,(nt/2-1)*FSIZE);
		} else {
			for(iw=1;iw<nt/2;iw++)
				a[iw] = 2.0*c[iw];
			memset( (void *) &a[nt/2],0,(nt/2-1)*FSIZE);
		}
a251 1
		memset( (void *) &a[nt], 0, (nfftc-nt)*FSIZE);
d253 19
a271 17
		sscal(nt,snfftc,a,1);
		pfarc(sign2, nfftc,a,w);
		
		for(iw=0;iw<nf;iw++)
			if(!CLOSETO(rcabs(w[iw]),0.0)) {
				w[iw] = cwp_cexp(w[iw]);
			} else {
				w[iw].r=0.0;
				w[iw].i=0.0;
			}
		
		pfacr(sign2, nfftc,w,c);
	}
	
	free1float(a);
	free1float(p);
	free1complex(w);
a272 1

@


1.7
log
@added Reg Beardsley's checkpar()
@
text
@d4 1
a4 1
/* SUCEPSTRUM: $Revision: 1.5 $ ; $Date: 2010/12/07 00:13:05 $	*/
d23 1
a23 1
" sign2=1		sign of complex to real transform		",
d69 1
a69 1
	if (!getparint("sign2",&sign2)) 	sign2=1;
d194 1
a194 1
				w[iw] = cexp(w[iw]);
@


1.6
log
@copyright
@
text
@d71 3
@


1.5
log
@added sign1 and sign2 parameters, cleaned up the selfdoc and stuff
@
text
@d1 4
a4 1
/* SUCEPSTRUM: $Revision: 1.4 $ ; $Date: 2010/11/24 22:51:47 $	*/
@


1.4
log
@changed sym to centered to be consistent with other SU programs.
ls
@
text
@d1 1
a1 1
/* SUCEPSTRUM: $Revision: 1.3 $ ; $Date: 2009/07/28 17:19:20 $	*/
d19 2
d27 1
a27 1
" C(t) = IFFT(ln(|T(w)|)}						",
d46 1
a46 1
void rceps(int nt, int mph,float *x,float *c);
d48 2
a49 1
int main( int argc, char *argv[] )
d51 6
a56 4
	int nt;		/* number of time samples per trace */
	float dt;	/* time sampling interval	*/
	int centered;	/* flag; =1 symmetric output 	*/
	int mpr;
d64 3
a66 1
	if (!getparint("mpr", &mpr)) mpr=0;
d78 1
a78 1
			rceps(nt,mpr,tr.data,tr.data);	
d100 1
a100 1
	}while(gettr(&tr));
d102 1
a102 1
	return EXIT_SUCCESS;
d105 1
a105 1
void rceps(int nt, int mph,float *x,float *c)
d123 3
a125 3
	complex *w;
	float *a;
	float *p;
a128 1
	float fftpadd=50;
d131 1
a131 1
	ntp = NINT(nt*(1.0+fftpadd/100.0));
d137 2
d143 1
a143 1
	memset( (void *) &a[nt], (int) '\0', (nfftc-nt)*FSIZE);
d148 1
a148 1
	pfarc(-1, nfftc,a,w);
d165 1
a165 1
	pfacr(1, nfftc,w,c);
d174 1
a174 1
			memset( (void *) &a[nt/2+1],(int) '\0',(nt/2-1)*FSIZE);
d178 1
a178 1
			memset( (void *) &a[nt/2],(int) '\0',(nt/2-1)*FSIZE);
d181 1
a181 1
		memset( (void *) &a[nt], (int) '\0', (nfftc-nt)*FSIZE);
d184 1
a184 1
		pfarc(1, nfftc,a,w);
d194 1
a194 1
		pfacr(1, nfftc,w,c);
@


1.3
log
@selfdoc changes
@
text
@d1 1
a1 1
/* SUCEPSTRUM: $Revision: 1.2 $ ; $Date: 2009/07/22 17:41:35 $	*/
d19 3
a21 2
"   mpr=0   =1 minimum phase reconstructed version of original signal   ",
"   sym=0   1 symmetrical output				 	",
d32 1
a32 1
 *  c. 2008
d50 1
a50 1
	int sym;	/* flag; =1 symmetric output 	*/
d58 1
a58 1
	if (!getparint("sym", &sym)) sym=0;
d69 2
d73 2
a74 1
			if(sym) {
d83 2
a84 1
					for(it=0;it<n/2;it++) trout.data[it] = tr.data[n/2-it];
@


1.2
log
@small cosmetic changes
@
text
@d1 1
a1 1
/* SUCEPSTRUM: $Revision: 1.19 $ ; $Date: 2006/11/07 22:58:42 $	*/
a2 3
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
a3 1
#include <sys/file.h>
d6 1
a6 1
#define tpi 2.0*3.1415926535897 
d12 3
a14 3
" SUCEPSTRUM - Compute the CEPSTRUM of a seismic trace			",
"									",
" sucepstrum < stdin > stdout					   	",
d19 1
a19 1
"   mpr=0   0 minimum phase reconstructed version of original signal    ",
a20 1
"									",
d26 1
a26 1
"									",
d47 3
a49 4
	int nt;
	float dt;
	int sym;
	int inv;
d52 1
d56 1
a57 1
	if (!getparint("inv", &inv)) inv=0;
d65 1
@


1.1
log
@Initial revision
@
text
@d1 1
d16 7
a22 10
" SUCEPSTRUM - Compute the cepstrum of a seismic trace                  ",
"                                                                       ",
" sucepstrum < stdin > stdout                                           ",
"                                                                       ",
" Required parameters:                                                  ",
"        none                                                           ",
"                                                                       ",
" Optional parameters:                                                  ",
"                                                                       ",
"                                                                       ",
d24 8
a31 5
"   sym=0   1 symetrical output                                         ",
"                                                                       ",
" C(t) = FFT-1{ln(|T(w)|)}                                              ",
"        |T(w)| = amplitude spectrum of the trace                       ",
"                                                                       ",
d35 2
a36 2
 * Author: Balazs Nemeth of Potash Corporation of Saskatchewan Inc. 2008
 *
d41 2
a42 2
#define LOOKFAC 4       /* Look ahead factor for npfaro   */
#define PFA_MAX 720720  /* Largest allowed nfft           */
d44 1
a44 1
/* Segy data constans */
d66 2
a67 2
        if (!gettr(&tr)) err("can't get first trace");
        nt = tr.ns;
d98 13
d126 3
a128 3
        if (nfftc >= SU_NFLTS || nfftc >= PFA_MAX)
               	err("Padded nt=%d--too big", nfftc);
        nf = nfftc/2 + 1;
@
