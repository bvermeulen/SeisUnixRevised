head	1.12;
access;
symbols;
locks; strict;
comment	@ * @;


1.12
date	2015.08.07.22.34.39;	author john;	state Exp;
branches;
next	1.11;

1.11
date	2011.11.16.23.35.04;	author john;	state Exp;
branches;
next	1.10;

1.10
date	2011.11.12.00.42.19;	author john;	state Exp;
branches;
next	1.9;

1.9
date	2006.11.07.22.58.42;	author john;	state Exp;
branches;
next	1.8;

1.8
date	2006.03.10.20.43.09;	author john;	state Exp;
branches;
next	1.7;

1.7
date	2005.03.08.18.49.13;	author john;	state Exp;
branches;
next	1.6;

1.6
date	2005.03.04.18.45.13;	author john;	state Exp;
branches;
next	1.5;

1.5
date	2005.03.04.18.12.11;	author john;	state Exp;
branches;
next	1.4;

1.4
date	2005.03.03.22.33.07;	author john;	state Exp;
branches;
next	1.3;

1.3
date	2005.03.02.00.28.42;	author john;	state Exp;
branches;
next	1.2;

1.2
date	2005.03.01.18.45.19;	author john;	state Exp;
branches;
next	1.1;

1.1
date	2005.03.01.18.26.36;	author john;	state Exp;
branches;
next	;


desc
@SUCWT continuous wavelet transform
@


1.12
log
@*** empty log message ***
@
text
@/* Copyright (c) Colorado School of Mines, 2011.*/
/* All rights reserved.                       */

/* SUCWT: $Revision: 1.11 $ ; $Date: 2011/11/16 23:35:04 $	*/

#include "su.h"
#include "segy.h"
#include "header.h"


/*********************** self documentation ******************************/
char *sdoc[] = {
"									",
" SUCWT - generates Continous Wavelet Transform amplitude, regularity	",
"         analysis in the wavelet basis					",
"									",
"     sucwt < stdin [Optional parameters ] > stdout			",
"									",
" Required Parameters:							",
" none									",
"									",
" Optional Parameters:							",
" base=10	Base value for wavelet transform scales			",
" first=-1	First exponent value for wavelet transform scales	",
" expinc=0.01	Exponent increment for wavelet transform scales		",
" last=1.5	Last exponent value for wavelet transform scales	",
"									",
" Wavelet Parameters:							",
" wtype=0		2nd derivative of Gaussian (Mexican hat)	",
"			=1 4th derivative of Gaussian (witch's hat)	",
"			=2 6th derivative of Gaussian (wizard's hat)	",
" nwavelet=1024		number of samples in the wavelet		",
" xmin=-20		minimum x value wavelet is computed		",
" xcenter=0		center x value  wavelet is computed 		",
" xmax=20		maximum x value wavelet is computed		",
" sigma=1		sharpness parameter ( sigma > 1 sharper)	",
"									",
" verbose=0		silent, =1 chatty				",
" holder=0		=1 compute Holder regularity estimate		",
" divisor=1.0		a floating point number >= 1.0 (see notes)	",
"									",
" Notes: 								",
" This is the CWT version of the time frequency analysis notion that is ",
" applied in sugabor.							",
" The parameter base is the base of the power that is applied to scale	",
" the wavelet. Some mathematical literature assume base 2. Base 10 works",
" well here.								",
" 									",
" Default option yields an output similar to that of sugabor. With the  ",
" parameter holder=1 an estimate of the instantaneous Holder regularity ",
" (the Holder exponent) is output for each input data value. The result ",
" is a Holder exponent trace for each corresponding input data trace.	",
" 									",
" The strict definition of the Holder exponent is the maximum slope of  ",
" the rise of the spectrum in the log(amplitude) versus log(scale) domain:",
" 									",
" divisor=1.0 means the exponent is computed simply by fitting a line   ",
" through all of the values in the transform. A value of divisor>1.0    ",
" indicates that the Holder exponent is determined as the max of slopes ",
" found in (total scales)/divisor length segments.			",
" 									",
" Some experimentation with the parameters nwavelet, first, last, and   ",
" expinc may be necessary before a desirable output is obtained. The	",
" most effective way to proceed is to perform a number of tests with    ",
" holder=0 to determine the range of first, last, and expinc that best  ",
" represents the data in the wavelet domain. Then experimentation with  ",
" holder=1 and values of divisor>=1.0 may proceed.			",
" 									",
NULL};

/*
 * Credits: 
 *	CWP: John Stockwell, Nov 2004
 * inspired in part by "bhpcwt" in the BHP_SU package, code written by
 *	BHP: Michael Glinsky,	c. 2002, based loosely on a Matlab CWT function
 *
 * References: 
 *         
 * Li C.H., (2004), Information passage from acoustic impedence to
 * seismogram: Perspectives from wavelet-based multiscale analysis, 
 * Journal of Geophysical Research, vol. 109, B07301, p.1-10.
 *         
 * Mallat, S. and  W. L. Hwang, (1992),  Singularity detection and
 * processing with wavelets,  IEEE Transactions on information, v 38,
 * March 1992, p.617 - 643.
 *         
 */

/**************** end self doc ********************************/


void
MexicanHatFunction(int nwavelet, float xmin, float xcenter,
			float xmax, float sigma, float *wavelet);

segy tr;	/* data for which transform is calculated */
segy outtr;	/* transforms */

int
main(int argc, char **argv)
{

	int i,j,k;		/* counters */
	int ns=0;		/* number of samples in input data */
	int nwavelet=1024;	/* number of samples in mother wavelet */

	float base=0.0;		/* base */
	float first=0.0;	/* first exponent */
	float expinc=0.0;	/* exponent increment */
	float last=0.0;		/* last exponent */
	float exponent=0.0;	/* each exponent */
	float maxscale=0.0;	/* maximum scale value */
	float minscale=0.0;	/* minimum scale value */

	float x=0.0;
	float dx=0.0;		/* xvalues incr */

	float xmin=0.0;		/* last xvalues - first vval */
	float xcenter=0.0;	/* x value of center of wavelet */
	float xmax=0.0;		/* last xvalues - first vval */
	float sigma=1.0;	/* sharpening parameter */

	float waveletinc=0.0;		/* wavelet interval */
	float fmin=0.0;		/* min, max filt value (debug) */
	float *xvalues=NULL;	/* wavelet xvalues */
	float **filt=NULL;	/* filter used for each conv */

	float *f=NULL;		/* scratch for filter fliplr */
	float *sucwt_buff=NULL;	/* scratch for convolution */
	float *scales=NULL;	/* scales */
	float *waveletsum=NULL;	/* cumulative sum of wavelet */

	float *rt=NULL;		/* temp data storage */
	float *qt=NULL;		/* temp hilbert transformed data storage */
	float **tmpdata=NULL;	/* temp data storage */

	int wtype=0;		/* type of wavelet selected */
	float *wavelet=NULL;	/* pointer to data constituting the wavelet */

	int verbose=0;		/* verbose flag */
	int *index=NULL;	/* wavelet subscripts to use for filter */
	int *nconv=NULL;	/* length of each filter */
	int nscales=0;		/* number of scales */

	int holder=0;		/* =1 compute the Holder-Lipschitz regularity */
	float divisor=1.0;	/* divisor used in Holder exponent calculation*/

	/* Initialize */
	initargs(argc, argv);
	requestdoc(1);


	/* Get parameters */
	if(!getparfloat("base",&base))			base = 10.;
	if(!getparfloat("first",&first))		first = -1.0;
	if(!getparfloat("expinc",&expinc))			expinc = 0.01;
	if(!getparfloat("last",&last))			last = 1.5;

	if(!getparint("wtype",&wtype))			wtype = 0;
	if(!getparint("nwavelet",&nwavelet))		nwavelet = 1024;
	if(!getparfloat("xmin",&xmin))			xmin = -20.0;
	if(!getparfloat("xcenter",&xcenter))		xmin = 0.0;
	if(!getparfloat("xmax",&xmax))			xmax = 20.0;
	if(!getparfloat("sigma",&sigma))		sigma = 1.0;

	if(!getparint("holder",&holder))		holder = 0;
	if(!getparfloat("divisor",&divisor))		divisor = 1.0;

	if(!getparint("verbose",&verbose))		verbose = 0;


        checkpars();

	if(verbose)
	 warn("base=%f, first=%f, expinc=%f, last=%f",base,first,expinc,last);


	/* Allocate space */
	xvalues = ealloc1float(nwavelet);
	wavelet = ealloc1float(nwavelet);
	memset((void *) xvalues, 0, nwavelet*FSIZE);
	memset((void *) wavelet, 0, nwavelet*FSIZE);

	/* Compute wavelet */
	if (wtype == 0 ) { /* so far only Mex. Hat function */
		MexicanHatFunction(nwavelet, xmin, xcenter,
					xmax, sigma, wavelet);
	} else {
		err("%d  type of wavelet not yet implemented",wtype); 
	}

	/* wavelet increment */
	waveletinc = (xmax - xmin)/(nwavelet - 1);

	/* verbose  warning */
	if(verbose)
	 warn("xmin=%f, xmax=%f, nwavelet=%d, waveletinc=%f",
			xmin,xmax,nwavelet,waveletinc);

	/* form xvalues[] array */
	for(i=0,x=xmin; i<nwavelet; ++i,x+=waveletinc) xvalues[i] = x;

	xvalues[nwavelet-1] = xmax;

	/* compute scales */
	scales = ealloc1float(SHRT_MAX);
	memset((void *) scales, 0, SHRT_MAX*FSIZE);

	exponent = first;
	x = 0;
	nscales = 0;
	minscale = pow(base,first);
	maxscale = pow(base,last);
	while(x <= maxscale) {
		x = pow(base,exponent);
		scales[nscales] = x;
		exponent+=expinc;
		++nscales;

		if(nscales == SHRT_MAX)
			err("Too many scales, change params and re-run\n");
	}
	--nscales;


	/* Allocate space */
	nconv = ealloc1int(nscales);
	index = ealloc1int(nwavelet);
	waveletsum = ealloc1float(nwavelet);
	filt = ealloc2float(nwavelet,nscales);
	f = ealloc1float(nwavelet);

	/* Zero out arrays */
	memset((void *) nconv, 0, nscales*ISIZE);
	memset((void *) index, 0, nwavelet*ISIZE);
	memset((void *) waveletsum, 0, nwavelet*FSIZE);
	memset((void *) filt[0], 0, nwavelet*nscales*FSIZE);
	memset((void *) f, 0, nwavelet*FSIZE);

	/* Form difference of xvalues */
	for(i=nwavelet-1; i>=0; --i)
		xvalues[i] = xvalues[i] - xvalues[0];	

	dx = xvalues[1];
	xmax = xvalues[nwavelet-1];

	/* verbose warning */
	if(verbose) {
		warn("first xvalues=%f, last xvalues=%f",
				xvalues[0],xvalues[nwavelet-1]);
		warn("dx=%f, xmax=%f",dx,xmax);
	}
	
	/* waveletsum is cumulative sum of wavelet multipled by dx */
	fmin = 0;

	for(i=0; i<nwavelet; ++i) {
		fmin += wavelet[i];
		waveletsum[i] = fmin * dx;
	}

	/* Build filters from summed wavelet */
	for(i=0; i<nscales; ++i) {
		nconv[i] = 1 + (int)(scales[i] * xmax);

		for(j=0; j<nconv[i]; ++j)
			index[j] = 1 + j / (scales[i] * dx);

		for(j=0; j<nconv[i]; ++j)
			f[j] = waveletsum[index[j]-1];

		/* flip left right */
		for(j=0,k=nconv[i]-1; j<nconv[i]; ++j,--k)
			filt[i][j] = f[k];
	}

	/* Verbose warning */
	if(verbose) {
		warn("Convolution Lengths");
		for(i=0; i<nscales; ++i) warn("%d ",nconv[i]);
	}
	if(verbose) warn("%d scales will be used for transforms",nscales);

	/* Get information from first trace */
	if(!gettr(&tr))
		err("Cannot get first trace\n");
	ns = tr.ns;

	/* Allocate temporary storage space */
	rt = ealloc1float(ns);
	qt = ealloc1float(ns);
	tmpdata = ealloc2float(nscales,ns);

	/* Zero out rt and qt */
	memset((void *) rt, 0, ns*FSIZE);
	memset((void *) qt, 0, ns*FSIZE);

	/* Alloc sucwt_buffer for longest convolution */
	sucwt_buff = ealloc1float(ns+nconv[nscales-1]+1);
	
	do {  /* main loop over traces */

		outtr.d2 = waveletinc;
		outtr.f2 = minscale;

		memcpy((void *)&outtr,(const void *)&tr,HDRBYTES);

		/* Apply filters to produce wavelet transform */
		for(i=0; i<nscales; ++i) { /* loop over scales */

			for(j=0; j<ns+nconv[nscales-1]+1; ++j)
			sucwt_buff[j] = 0;

			/* convolve wavelet with data */
			convolve_cwp(ns,0,tr.data,nconv[i],0,
					filt[i],ns,0,sucwt_buff);

			for(j=0; j<ns; ++j) 
				rt[j] = sucwt_buff[j+nconv[i]/2-1];

			for(j=ns-1; j>0; --j) 
				rt[j] = rt[j] - rt[j-1];

			for(j=0; j<ns; ++j)
				rt[j] = -sqrt(scales[i]) * rt[j];

				/* form the hilbert transform of rt */
				hilbert(ns,rt,qt);

			/* If not holder, then output envelope */
			if (!holder) {
				
				for (j=0 ; j<ns; ++j) {			
			  		outtr.data[j] = sqrt(rt[j]*rt[j] 
						               + qt[j]*qt[j]);
				}

				outtr.cdpt = i + 1;
				puttr(&outtr);
			} else {
				/* compute the modulus */
				for (j=0 ; j<ns; ++j) {			
			  		tmpdata[j][i] = sqrt(rt[j]*rt[j] + qt[j]*qt[j]);
				}

			}
		}


		if (holder) { /* compute the Holder regularity traces */
			float *x;
			float *y;
			float lrcoeff[4];

			x = ealloc1float(nscales);
			y = ealloc1float(nscales);
			
	                /* Compute an estimate of the Lipschitz (Holder)
			* regularity. Following Mallat (1992)	
                        *				
                        * ln | Wf(x,s)| <  ln C + alpha * ln|s|
                        *					
                        * alpha here is the Holder or Lipschitz exponent
                        * s is the length scale, and Wf(x,s) is f in the
                        * wavelet basis.			         
                        *					         
			* Here we merely fit a straight line		 
			* through the log-log graph of the of our wavelet
			* transformed data and return the slope as      
			* the regularity measure. 			
                        *					         
			*/

                	for ( j =0 ; j< ns ; ++j ) {
				int icount=0;
                        	x[0]=0;
                        	for ( i = 1 ; i < nscales ; ++i ) {
				
					
			          /* We stay away from values that will make */
				  /*  NANs in the output */
				  if ((i>1) && 
				      (tmpdata[j][i-1] - tmpdata[j][1] > 0.0)) {
                               		y[icount] = log(ABS(tmpdata[j][i]
                                     	              - tmpdata[j][1]));
                                			x[icount] = log(scales[i]-scales[1]);
						
						++icount;
					}

                        	}
				--icount;

				/* straight line fit, return slope */
				if ((icount> 10) && (divisor==1.0) ) {
                        	   linear_regression(y, x, icount, lrcoeff);
                        	   /* lrcoeff[0] is the slope of the line */
				   /* which is the Holder (Lipschitz) */
				   /* exponent */

                        	   outtr.data[j] = lrcoeff[0];

				} else  if ((icount> 10) && (divisor>1.0) ) {

				   float maxalpha=0.0;
				   float interval=icount/divisor;

				   for ( k = interval; k < icount; k+=interval){
                        	   	   linear_regression(y, x, k, lrcoeff);
					   maxalpha = MAX(lrcoeff[0],maxalpha);
					}
				   outtr.data[j] = maxalpha;		

				} else if ((icount < 10) && (divisor>=1.0)) {
				   outtr.data[j] = 0.0;		
				} else if ( divisor < 1.0 ) {
				   err("divisor = %f < 1.0!", divisor);	
				}
				



                	}

			puttr(&outtr); /* output holder regularity traces */
		}
	} while(gettr(&tr));

	return(CWP_Exit());
}

void
MexicanHatFunction(int nwavelet, float xmin, float xcenter, 
			float xmax, float sigma, float *wavelet) 
/***********************************************************************
MexicanHat - the classic Mexican hat function of length nwavelet 
************************************************************************
Input:
nwavelet	number of points total
xmin		minimum  x value
xcenter		central x value
xmax		maximum  x value
Output:
wavelet[]	array of floats of length nwavelet
************************************************************************
Notes:  

Gaussian:  g(x) = 1
		------------------- exp[ - ( x - xcenter)^2/2*sigma^2) ]
	       sigma*sqrt(2 * PI)

1st derivative of Gaussian:
g'(x) =  -(x - xcenter) 
	------------------- exp[ - (x - xcenter)^2/(2*sigma^2) ]
        (sigma^3)*sqrt(2 * PI)

Mexican Hat (2nd derivative of a Gaussian):
g''(x) = 1  
	--- 
      (sigma^3)* sqrt(2*PI)

           / ( x - xcenter)^2         \
	* |----------------   -  1  |
	   \ (sigma^2)              /
   
        * exp[ - (x - xcenter)^2/(2*sigma^2) ]

3rd derivative of Gaussian:
g'''(x) = 1  
	--- 
      (sigma^3)* sqrt(2*PI)

	* (x - xcenter)

           /      3 * ( x - xcenter)^3   \
	* |  1 -  ----------------        |
	   \         (sigma^2)           /
   
        * exp[ - (x - xcenter)^2/(2*sigma^2) ]

4th derivative of Gaussian (Witches' hat)
 (iv)
g  (x) =  1
	----
      (sigma^5)* sqrt(2*PI)
  
	   /      10 *( x - xcenter)^2         3 * ( x - xcenter)^4    \
        * | 1 -  -----------------------   +  ----------------------   |
           \           (sigma^2)                   (sigma^4)           /

        * exp[ - (x - xcenter)^2/(2*sigma^2) ]

************************************************************************
Author: CWP: John Stockwell (Nov 2004) 
************************************************************************/
{
	int i;			/* counter */
	double dxwavelet;	/* sampling interval in x */
	double mult;		/* multiplier on function */
	double twopi=2*PI;	/* 2 PI */

	/* check for error in nwavelet */
	if (nwavelet<=1) err("nwavelet must be greater than 1!");

	/* increment in x */
	dxwavelet = (xmax - xmin)/( nwavelet - 1);


	/* generate mexican hat function */
        /* ... multiplier ....*/
        mult = (1.0/(sigma*sigma*sigma * sqrt(twopi)));
	for(i=0; i<nwavelet; ++i) {
		float x = i*dxwavelet - xcenter; 

		wavelet[i] = mult * (x*x/(sigma*sigma) - 1.0) 
				* exp(- x*x/(2.0*sigma*sigma) );
	}
}
@


1.11
log
@added Reg Beardsley's checkpar()
@
text
@d4 1
a4 1
/* SUCWT: $Revision: 1.9 $ ; $Date: 2006/11/07 22:58:42 $	*/
d315 1
a315 1
			conv(ns,0,tr.data,nconv[i],0,
@


1.10
log
@copyright
@
text
@d171 3
@


1.9
log
@changed    memset( .., (int) '\0',...) to memset( .., 0,..) as per suggestion of Marion Zhu and Reg Beardsley
@
text
@d1 4
a4 1
/* SUCWT: $Revision: 1.8 $ ; $Date: 2006/03/10 20:43:09 $	*/
@


1.8
log
@changed EXIT_SUCCESS to return(CWP_E
@
text
@d1 1
a1 1
/* SUCWT: $Revision: 1.7 $ ; $Date: 2005/03/08 18:49:13 $	*/
d175 2
a176 2
	memset((void *) xvalues, (int) '0', nwavelet*FSIZE);
	memset((void *) wavelet, (int) '0', nwavelet*FSIZE);
d201 1
a201 1
	memset((void *) scales, (int) '0', SHRT_MAX*FSIZE);
d228 5
a232 5
	memset((void *) nconv, (int) '0', nscales*ISIZE);
	memset((void *) index, (int) '0', nwavelet*ISIZE);
	memset((void *) waveletsum, (int) '0', nwavelet*FSIZE);
	memset((void *) filt[0], (int) '0', nwavelet*nscales*FSIZE);
	memset((void *) f, (int) '0', nwavelet*FSIZE);
d289 2
a290 2
	memset((void *) rt, (int) '0', ns*FSIZE);
	memset((void *) qt, (int) '0', ns*FSIZE);
@


1.7
log
@added divisor to allow a range of interpretations of "Holder" exponent
@
text
@d1 1
a1 1
/* SUCWT: $Revision: 1.6 $ ; $Date: 2005/03/04 18:45:13 $	*/
d423 1
a423 1
	return EXIT_SUCCESS;
@


1.6
log
@*** empty log message ***
@
text
@d1 1
a1 1
/* SUCWT: $Revision: 1.5 $ ; $Date: 2005/03/04 18:12:11 $	*/
d37 1
d48 18
a65 5
" of each input data is output as a corresponding trace.		",
"									",
" In addition, the sequential number of each transform			",
" is stored in header cdpt, i.e. 1,2,.,.,				",
"									",
d69 3
a71 1
 * Credits: based in part on "bhpcwt" in the BHP_SU package, code written by
a72 2
 *	CWP: John Stockwell, Nov 2004, changed the program to an instantaneous
 *           amplitude, and added Holder regularity option
d75 5
a79 1
 *
a83 3
 * Li C.H., (2004), Information passage from acoustic impedence to
 * seismogram: Perspectives from wavelet-based multiscale analysis. 
 *         
a86 53
/* 

This program is based in part on the program   "bhpcwt.c"  from the BHP_SU:

LICENSE FOR BHP SU Suite of Programs

The following is the license that applies to the copy of the software hereby
provided to Licensee. BHP's Software Manager may be contacted at the following
address:

Colorado School of Mines
1500 Illinois Street
Golden, Colorado 80401
Attention: John Stockwell
e-mail: john@@dix.mines.edu
Telephone: 303-273-3049

Copyright 2001 BHP Software. All rights reserved.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software") to deal
in the Software, without restriction, except as hereinafter provided,
including without limitation the rights to use, copy, modify merge,
publish, and distribute the Software and to permit persons
to whom the Software is furnished to do so, provided that the above
copyright notice and this permission notice appear in all copies of the
Software and that both the above copyright notice and this permission
notice appear in supporting documentation. No charge may be made for
any redistribution of the Software, including modified or merged versions
of the Software. The complete source code must be included
in any distribution. For an executable file, complete source code means the
source code for all modules it contains.

Modified or merged versions of the Software must be provided to the Software
Manager, regardless of whether such modified or merged versions are
distributed to others.

THE SOFTWARE IS PROVIDED 'AS IS" WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGMENT OF THIRD PARTY RIGHTS. IN NO EVENT SHALL THE
COPYRIGHT HOLDER INCLUDED IN THIS NOTICE BE LIABLE FOR ANY CLAIM OR
ANY SPECIAL INDIRECT OR CONSEQUENTIAL DAMAGES, OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER
IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
ARISING OUT OF OR IN CONNECTION WITH THE USE OF PERFORMANCE OF
THIS SOFTWARE.

The name of the copyright holder shall not be used in advertising or
otherwise to promote the use or other dealings in this Software, without
prior written consent of the copyright holder.

*/
d110 1
d120 1
a120 1
	float wavetinc=0.0;		/* wavelet interval */
d126 1
a126 1
	float *buff=NULL;	/* scratch for convolution */
d143 1
d164 2
d187 1
a187 1
	wavetinc = (xmax - xmin)/(nwavelet - 1);
d191 2
a192 2
	 warn("xmin=%f, xmax=%f, nwavelet=%d, expinc=%f",
			xmin,xmax,nwavelet,wavetinc);
d195 1
a195 1
	for(i=0,x=xmin; i<nwavelet; ++i,x+=wavetinc) xvalues[i] = x;
d206 1
a218 2
	/* Verbose warning */
	if(verbose) warn("%d scales will be used for transforms",nscales);
d276 1
d292 2
a293 2
	/* Alloc buffer for longest convolution */
	buff = ealloc1float(ns+nconv[nscales-1]+1);
d297 3
d303 2
a304 1
		for(i=0; i<nscales; ++i) {
d306 1
a306 1
			buff[j] = 0;
d310 1
a310 1
					filt[i],ns,0,buff);
d313 1
a313 1
				rt[j] = buff[j+nconv[i]/2-1];
d371 1
a371 1
                        	for ( i = 2 ; i < nscales ; ++i ) {
d376 5
a380 5
				  if (log(ABS(tmpdata[j][i] 
					- tmpdata[j][1])+1) > 0.0) {
                                		y[icount] = log(ABS(tmpdata[j][i]
                                               	              - tmpdata[j][1]));
                                		x[icount] = log(i);
d389 26
a414 1
                        	linear_regression(y, x, icount , lrcoeff);
a415 3
                        	/* lrcoeff[0] is the slope of the line */
				/* which is the Holder (Lipschitz) exponent */
                        	outtr.data[j] = lrcoeff[0] - 0.5;
@


1.5
log
@fixed a few items
@
text
@d1 1
a1 1
/* SUCWT: $Revision: 1.4 $ ; $Date: 2005/03/03 22:33:07 $	*/
d416 1
d419 1
a419 1
                        	linear_regression(y, x, icount-1 , lrcoeff);
@


1.4
log
@revih
refinement of holder exponent stuff.
@
text
@d1 1
a1 1
/* SUCWT: $Revision: 1.3 $ ; $Date: 2005/03/02 00:28:42 $	*/
d132 1
a132 1
segy coeffs;	/* transforms */
d144 1
a144 1
	float expinc=0.0;		/* exponent increment */
d147 1
a148 1
	float velocity=0.0;	/* velocity used in scale value */
a190 1
	if(!getparfloat("velocity",&velocity))		velocity = 2500.;
d234 2
a235 2
	scales = ealloc1float(SU_NFLTS);
	memset((void *) scales, (int) '0', SU_NFLTS*FSIZE);
d240 2
a241 1
	while(x <= pow(base,last)) {
d247 1
a247 1
		if(nscales == SU_NFLTS)
d331 1
a331 1
		memcpy((void *)&coeffs,(const void *)&tr,HDRBYTES);
d358 1
a358 1
			  		coeffs.data[j] = sqrt(rt[j]*rt[j] 
d362 2
a363 2
				coeffs.cdpt = i + 1;
				puttr(&coeffs);
d420 3
a422 4
                        	/*  coeff[0] is the slope of the line */
				/* the subtraction agrees with Lipshitz */
				/* regularity definition in Mallat */
                        	coeffs.data[j] = lrcoeff[0] - 0.5;
d426 1
a426 1
			puttr(&coeffs); /* output holder regularity traces */
d429 1
a429 1
	
@


1.3
log
@1 March version
@
text
@d1 1
a1 1
/* SUCWT: $Revision: 1.2 $ ; $Date: 2005/03/01 18:45:19 $	*/
d11 2
a12 2
" SUCWT - generates Continous Wavelet Transform amplitude in the	",
"         wavelet bases							",
d30 1
a30 1
" xmin=-8		minimum x value wavelet is computed		",
d32 1
a32 1
" xmax=-8		maximum x value wavelet is computed		",
d55 1
a55 1
 * Credits: based on "bhpcwt" in the BHP_SU package, code written by
d59 10
d74 1
a74 1
This program is based loosely on the program   "bhpcwt.c"  from the BHP_SU:
d195 1
a195 1
	if(!getparfloat("xmin",&xmin))			xmin = -8.0;
d197 1
a197 1
	if(!getparfloat("xmax",&xmax))			xmax = 8.0;
d373 1
d382 15
a396 5
	                /* Compute an estimate of the Lipschitz (Holder)   */
			/* regularity. Here we merely fit a straight line  */
			/* through the log-log graph of the of our wavelet */
			/* transformed data and return the slope-1/2 as  */
			/* the regularity measure. 		           */
d399 1
d401 2
a402 6
				y[0] = 0.0;
                        	for ( i = 1 ; i < nscales ; ++i ) {
					if (holder==1) {
                                	   y[i] = log(ABS(tmpdata[j][i+1]
							-tmpdata[j][1]));
                                	   x[i] = log(i);
d404 9
a412 2
					} else {
						err("holder must = 0 or 1!");
a415 2
                        	y[0] =y[1] - (y[3] - y[2]); 

d417 2
a418 1
                        	linear_regression(y, x, nscales, lrcoeff);
d421 2
a428 2


@


1.2
log
@small changes
@
text
@d1 1
a1 1
/* SUCWT: $Revision: 1.1 $ ; $Date: 2005/03/01 18:26:36 $	*/
d21 2
a22 2
" first=0	First exponent value for wavelet transform scales	",
" inc=0.01	Exponent increment for wavelet transform scales		",
a34 6
" hdr=f2		Trace header used to hold scale value for each trace",
"			In addition, the sequential number of each transform",
"			is stored in header cdpt, i.e. 1,2,,,		",
" velocity=2500		Velocity used to calculate value stored in hdr	",
"			Calculation used is:				",
"			dt-in-mills*velocity*base**exponent*0.001	",
d42 9
a50 1
" the wavelet. 								",
d61 1
d64 1
a64 1
This program is based on the program   "bhpcwt.c"  from the BHP_SU:
a115 1
/**************** end self doc ********************************/
d128 3
a130 2
	char *hdr=NULL;		/* scale header */
	char *type=NULL;	/* scale header type */
d134 1
a134 1
	float inc=0.0;		/* exponent increment */
a163 4
	int ns=0;		/* number of samples in input data */
	int nwavelet=1024;		/* number of wavelet points */
	int i,j,k;		/* counters */

a167 3
	int hindex=0;		/* index of hdr */

	int holder;		/* =1 compute the Holder-Lipschitz regularity */
d169 1
a169 1
	Value h;		/* hdr value */
a174 3
	/* debug option */
	if(!getparint("verbose",&verbose))
	verbose = 0;
d178 2
a179 2
	if(!getparfloat("first",&first))		first = 0.0;
	if(!getparfloat("inc",&inc))			inc = 0.01;
a189 1
	if(!getparstring("hdr",&hdr))			hdr = "f2";
d191 1
a191 2
	hindex = getindex(hdr);
	type = hdtype(hdr);
d193 2
a194 5
	if(verbose) {
		warn("base=%f, first=%f, inc=%f, last=%f",base,first,inc,last);
		warn("Using velocity=%f for scale calculation",velocity);
		warn("Storing calculated scale value in %s",hdr);
	}
d197 1
a197 1
	/* allocate space */
d203 2
a204 2
	/* compute wavelet */
	if (wtype == 0 ) {
d207 2
d216 2
a217 1
	warn("xmin=%f, xmax=%f, nwavelet=%d, inc=%f",xmin,xmax,nwavelet,wavetinc);
d234 1
a234 1
		exponent += inc;
d242 1
a242 1
	/* verbose warning */
d245 1
a245 1
	/* allocate space */
d252 1
a252 1
	/* zero out arrays */
d259 1
a259 1
	/* form difference of xvalues */
d266 1
d273 1
a273 1
	/* waveletsum is cumulative sum of wavelet times dx */
d281 1
a281 1
	/* make filters from summed wavelet */
d296 1
d317 1
a317 1
	buff = ealloc1float((int)tr.ns+nconv[nscales-1]+1);
d323 1
a323 1
		/* apply filters to produce wavelet transform */
d325 1
a325 1
			for(j=0; j<tr.ns+nconv[nscales-1]+1; ++j)
d329 2
a330 2
			conv(tr.ns,0,tr.data,nconv[i],0,
					filt[i],tr.ns,0,buff);
d348 2
a349 3
			  		coeffs.data[j] = 
						sqrt(rt[j]*rt[j] 
						+ qt[j]*qt[j]);
a350 1
				
a351 3
				h.f = velocity*tr.dt*0.001*scales[i]*0.001;

				puthval(&coeffs,hindex,&h);
d374 2
a375 2
			/* transformed data and return the slope + 1/2 as  */
			/* the regularity measure. 			   */
d379 1
d382 3
a384 3
                                		y[i] = log(ABS(tmpdata[j][i+1]
                                               	              - tmpdata[j][0]));
                                		x[i] = log(i);
d391 1
a391 1
                        	y[0] =y[1] - (y[3] - y[2]);
d397 1
a397 1
                        	coeffs.data[j] = lrcoeff[0] + 0.5;
a459 1

@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/* SUCWT: $Revision: 1.14 $ ; $Date: 2003/08/19 21:24:44 $	*/
d120 1
a120 1
segy coefs;	/* transforms */
d144 1
a144 1
	float winc=0.0;		/* wavelet interval */
d222 3
a224 1
	winc = (xmax - xmin) / (nwavelet - 1);
d226 1
a226 1
	warn("xmin=%f, xmax=%f, nwavelet=%d, inc=%f",xmin,xmax,nwavelet,winc);
d229 1
a229 1
	for(i=0,x=xmin; i<nwavelet; ++i,x+=winc) xvalues[i] = x;
d299 1
a299 1
		/* fliplr */
a305 1

d308 2
d314 1
a314 1
	/* allocate temporary storage space */
d319 1
a319 1
	/* zero out rt and qt */
d323 1
a323 1
	/* alloc buff for longest convolution */
d328 1
a328 1
		memcpy((void *)&coefs,(const void *)&tr,HDRBYTES);
d351 1
a351 1

d355 1
a355 1
			  		coefs.data[j] = 
d363 3
a365 3
				puthval(&coefs,hindex,&h);
				coefs.cdpt = i + 1;
				puttr(&coefs);
d408 1
a408 1
                        	coefs.data[j] = lrcoeff[0] + 0.5;
d412 1
a412 1
			puttr(&coefs); /* output holder regularity traces */
d457 26
@
