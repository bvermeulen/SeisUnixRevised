head	1.13;
access;
symbols;
locks; strict;
comment	@ * @;


1.13
date	2011.11.16.23.35.04;	author john;	state Exp;
branches;
next	1.12;

1.12
date	2011.11.12.00.42.19;	author john;	state Exp;
branches;
next	1.11;

1.11
date	2006.11.07.22.58.42;	author john;	state Exp;
branches;
next	1.10;

1.10
date	2003.06.09.16.17.07;	author john;	state Exp;
branches;
next	1.9;

1.9
date	97.07.28.22.36.46;	author john;	state Exp;
branches;
next	1.8;

1.8
date	96.09.18.19.45.17;	author jkc;	state Exp;
branches;
next	1.7;

1.7
date	96.07.29.17.20.07;	author john;	state Exp;
branches;
next	1.6;

1.6
date	96.02.05.21.21.30;	author jkc;	state Exp;
branches;
next	1.5;

1.5
date	95.12.05.22.39.24;	author john;	state Exp;
branches;
next	1.4;

1.4
date	95.11.30.19.20.56;	author john;	state Exp;
branches;
next	1.3;

1.3
date	95.11.29.18.16.35;	author john;	state Exp;
branches;
next	1.2;

1.2
date	95.09.27.20.24.24;	author john;	state Exp;
branches;
next	1.1;

1.1
date	95.04.26.14.07.48;	author john;	state Exp;
branches;
next	;


desc
@purely spatial k1 k2 transform, centered output
@


1.13
log
@added Reg Beardsley's checkpar()
@
text
@/* Copyright (c) Colorado School of Mines, 2011.*/
/* All rights reserved.                       */

/* SUSPECK1K2: $Revision: 1.11 $ ; $Date: 2006/11/07 22:58:42 $		*/

#include "su.h"
#include "segy.h"
#include <signal.h>

/*********************** self documentation **********************/
char *sdoc[] = {
" 									",
" SUSPECK1K2 - 2D (K1,K2) Fourier SPECtrum of (x1,x2) data set		",
" 									",
" suspeck1k2 <infile >outfile [optional parameters]			",
"									",
" Optional parameters:							",
"									",
" d1=from header(d1) or 1.0	spatial sampling interval in first (fast)",
"				   dimension				",
" d2=from header(d2) or 1.0	spatial sampling interval in second	",
"				 (slow)  dimension			",
"									",
" verbose=0		verbose = 1 echoes information			",
"									",
" tmpdir= 	 	if non-empty, use the value as a directory path",
"		 	prefix for storing temporary files; else if the",
"	         	the CWP_TMPDIR environment variable is set use	",
"	         	its value for the path; else use tmpfile()	",
" 									",
" Notes:								",
" Because the data are assumed to be purely spatial (i.e. non-seismic), ",
" the data are assumed to have trace id (30), corresponding to (z,x) data",
"									",
" To facilitate further processing, the sampling intervals in wavenumber",
" as well as the first frequency (0) and the first wavenumber are set in",
" the output header (as respectively d1, d2, f1, f2).			",
" 									",
" The relation: w = 2 pi F is well known for frequency, but there	",
" doesn't seem to be a commonly used letter corresponding to F for the	",
" spatial conjugate transform variables.  We use K1 and K2 for this.	",
" More specifically we assume a phase:					",
"		-i(k1 x1 + k2 x2) = -2 pi i(K1 x1 + K2 x2).		",
" and K1, K2 define our respective wavenumbers.				",
" 									",
NULL};

/* Credits:
 *     CWP: John Stockwell, 26 April 1995, based on original code by
 *          Dave Hale and Jack Cohen	
 *
 * Trace header fields accessed: ns, d1, d2, trid
 * Trace header fields modified: tracl, ns, dt, trid, d1, f1, d2, f2
 */
/**************** end self doc ***********************************/


#define PFA_MAX	720720	/* Largest allowed nfft		  */

/* Prototype */
static void closefiles(void);

/* Globals (so can trap signal) defining temporary disk files */
char tracefile[BUFSIZ];	/* filename for the file of traces	*/
FILE *tracefp;		/* fp for trace storage file		*/

segy intrace, outtrace;

int main(int argc, char **argv)
{
	int nx1,nx2;		/* numbers of samples			*/
	float dx1,dx2;		/* sampling intervals			*/
	float d1,d2;		/* output intervals in K1, K2		*/
	float f1,f2;		/* output first samples in K1, K2	*/
	int ix1,ix2;		/* sample indices			*/
	int nx1fft,nx2fft;	/* dimensions after padding for FFT	*/
	int nK1,nK2;		/* transform (output) dimensions	*/
	int ik1,ik2;		/* transform sample indices		*/
	register complex **ct;	/* complex FFT workspace		*/
	register float **rt;	/* float FFT workspace			*/
	int verbose;		/* flag for echoing information		*/
	char *tmpdir;		/* directory path for tmp files		*/
	cwp_Bool istmpdir=cwp_false;/* true for user-given path		*/


	/* Hook up getpar to handle the parameters */
	initargs(argc,argv);
	requestdoc(1);

	/* Get info from first trace */ 
	if (!gettr(&intrace))  err("can't get first trace");
	if (intrace.trid != TRID_DEPTH)
				warn("tr.trid = %d",intrace.trid);
	nx1 = intrace.ns;

	/* get sampling intervals */
	if (!getparfloat("d1", &dx1)) {
		if (intrace.d1) { /* is d1 field set? */
			dx1 = (float) intrace.d1;
		} else { /* d1 not set, assume 1.0 */
			dx1 = 1.0;
			warn("tr.d1 not set, assuming d1=1.0");
		}
	}
	if (!getparfloat("d2",&dx2)) {
		if (intrace.d2) { /* is d2 field set? */
			dx2 = intrace.d2;
		} else {
			dx2 = 1.0;
			warn("tr.d2 not set, assuming d2=1.0");
		}
	}

	if (!getparint("verbose", &verbose))	verbose = 0;

	/* Look for user-supplied tmpdir */
	if (!getparstring("tmpdir",&tmpdir) &&
	    !(tmpdir = getenv("CWP_TMPDIR"))) tmpdir="";
	if (!STREQ(tmpdir, "") && access(tmpdir, WRITE_OK))
		err("you can't write in %s (or it doesn't exist)", tmpdir);

	/* Store traces in tmpfile while getting a count */
	if (STREQ(tmpdir,"")) {
		tracefp = etmpfile();
		if (verbose) warn("using tmpfile() call");
	} else { /* user-supplied tmpdir */
		char directory[BUFSIZ];
		strcpy(directory, tmpdir);
		strcpy(tracefile, temporary_filename(directory));
		/* Trap signals so can remove temp files */
		signal(SIGINT,  (void (*) (int)) closefiles);
		signal(SIGQUIT, (void (*) (int)) closefiles);
		signal(SIGHUP,  (void (*) (int)) closefiles);
		signal(SIGTERM, (void (*) (int)) closefiles);
		tracefp = efopen(tracefile, "w+"); 
     		istmpdir=cwp_true;		
		if (verbose) warn("putting temporary files in %s", directory);
	}


        checkpars();

	nx2 = 0;
	do { 
		++nx2;
		efwrite(intrace.data, FSIZE, nx1, tracefp);
	} while (gettr(&intrace));


	/* Determine lengths for prime-factor FFTs */
	nx1fft = npfar(nx1);
	nx2fft = npfa(nx2);
	if (nx1fft >= SU_NFLTS || nx1fft >= PFA_MAX)
		err("Padded nx1=%d--too big",nx1fft);
	if (nx2fft >= SU_NFLTS || nx2fft >= PFA_MAX)
		err("Padded nx2=%d--too big",nx2fft);

	/* Determine output header values */
	d1 = 2.0/(nx1fft*dx1);
	d2 = 2.0/(nx2fft*dx2);
	f1 = -1.0/dx1 - d1/2.;
	f2 = -1.0/dx2 + d2;

	/* Note: The choices for d1,d2,f1, and f2 were motivated by the
		 desire to have a plot that runs from -nyq to +nyq
		 in both directions.  The choice of the shift d1/2
		 is because the k1=0 information always falls on a
 		 sample, whether the number of k1 values is even or odd.
		 The choice of the shift d2 is because the ISODD trick
		 centers k2=0 information between the two center traces
 		 if the number of k1 values is even, or on the center trace
		 if the number is odd.
	*/

	/* Determine complex transform sizes */
	nK1 = nx1fft/2 + 1 ;
	nK2 = nx2fft;


	/* Allocate space */
	rt = alloc2float(nx1fft, nx2fft);
	ct = alloc2complex(nK1, nK2);

	/* zero rt[][] and ct[][] */
	memset( (void *) rt[0], 0, FSIZE*nx1fft*nx2fft);
	memset( (void *) ct[0], 0, sizeof(complex)*nK1*nK2);

	/* Load traces into fft arrays and close tmpfile */
	rewind(tracefp);
	for (ix2=0; ix2<nx2; ++ix2) {

		efread(rt[ix2], FSIZE, nx1, tracefp);

		/* if ix2 odd, negate to center transform of dimension 2 */
        	if (ISODD(ix2))
                        for (ix1=0; ix1<nx1; ++ix1)
					rt[ix2][ix1] = -rt[ix2][ix1];
	}
	efclose(tracefp);
	
	/* Fourier transform dimension 1 */
	pfa2rc(-1,1,nx1fft,nx2,rt[0],ct[0]);
	
	/* Fourier transform dimension 2 */
	pfa2cc(-1,2,nK1,nK2,ct[0]);
	
	/* Compute and output amplitude spectrum */
	for (ik2=0; ik2<nK2; ++ik2) {

		/* do upper half of K-plane */
		for (ik1=0; ik1<nK1; ++ik1)
			outtrace.data[ik1] = rcabs(ct[nK2-1-ik2][nK1-1-ik1]);

		/* build lower half plane from upper plane assuming symmetry */
		for (ik1=nK1; ik1<nx1fft; ++ik1)
			if (ik2<nK2-1)
				outtrace.data[ik1] = rcabs(ct[ik2+1][ik1-nK1]);
			else
				outtrace.data[ik1] = rcabs(ct[0][ik1-nK1]);
				

		/* set header values */
		outtrace.tracl = ik2+1;
		outtrace.ns = nx1fft;
		outtrace.dt = 0;  /* d1 is now the relevant step size */
		outtrace.trid = KOMEGA;
		outtrace.d1 = d1;
		outtrace.f1 = f1;
		outtrace.d2 = d2;
		outtrace.f2 = f2;

		puttr(&outtrace);
	}

	/* Clean up */
	if (istmpdir) eremove(tracefile);

	return(CWP_Exit());
}

/* for graceful interrupt termination */
static void closefiles(void)
{
	efclose(tracefp);
	eremove(tracefile);
	exit(EXIT_FAILURE);
}
@


1.12
log
@copyright
@
text
@d140 3
@


1.11
log
@changed    memset( .., (int) '\0',...) to memset( .., 0,..) as per suggestion of Marion Zhu and Reg Beardsley
@
text
@d1 4
a4 1
/* SUSPECK1K2: $Revision: 1.10 $ ; $Date: 2003/06/09 16:17:07 $		*/
@


1.10
log
@9 June 2003
@
text
@d1 1
a1 1
/* SUSPECK1K2: $Revision: 1.9 $ ; $Date: 1997/07/28 22:36:46 $		*/
d179 2
a180 2
	memset( (void *) rt[0], (int) '\0', FSIZE*nx1fft*nx2fft);
	memset( (void *) ct[0], (int) '\0', sizeof(complex)*nK1*nK2);
@


1.9
log
@changes suggested by Stew Levin to silence SGI compiler warnings, etc
@
text
@d1 1
a1 1
/* SUSPECK1K2: $Revision: 1.8 $ ; $Date: 1996/09/18 19:45:17 $		*/
d232 1
a232 1
	return EXIT_SUCCESS;
@


1.8
log
@Did tmpfile stuff.
@
text
@d1 1
a1 1
/* SUSPECK1K2: $Revision: 1.7 $ ; $Date: 1996/07/29 17:20:07 $		*/
d80 1
a80 1
	cwp_Bool istmpdir=false;/* true for user-given path		*/
d133 1
a133 1
     		istmpdir=true;		
d147 1
a147 1
	if (nx1fft >= MIN(SU_NFLTS, PFA_MAX))
d149 1
a149 1
	if (nx2fft >= MIN(SU_NFLTS, PFA_MAX))
@


1.7
log
@major bugs fixed. 1) negative wave number representation is now
constructed by copying, flipping, and shifting the positive ones.
2) The values of f1,f2,d1,d2 are now correct, so the output
appears centered correctly about k1=0 and k2=0.
@
text
@d1 1
a1 1
/* SUSPECK1K2: $Revision: 1.7 $ ; $Date: 1996/07/26 22:05:51 $		*/
d5 1
d21 7
d57 7
d78 4
a81 1
	FILE *tracefp;		/* temp file to hold traces		*/
d111 7
d120 17
a136 1
	tracefp = etmpfile();
d228 4
d233 8
@


1.6
log
@Deal with header words accessed/modified down to sudoc.
Cosmetics.
@
text
@d1 1
a1 1
/* SUSPECK1K2: $Revision: 1.5 $ ; $Date: 1995/12/05 22:39:24 $		*/
d51 1
a51 1
main(int argc, char **argv)
d112 15
a126 5
	d1 = 1.0/(nx1fft*dx1);
	d2 = 1.0/(nx2fft*dx2);
	f1 = -0.5/dx1; 
	f2 = -0.5/dx2 + d2;

d161 1
a161 2
	for (ik2=0; ik2<nK2-1; ++ik2) {

d167 1
a167 1
		/* do lower half of K-plane */
d169 5
a173 2
			outtrace.data[ik1] = rcabs(ct[ik2][ik1]);
			 
@


1.5
log
@fixed trace counter error.
@
text
@d1 1
a1 1
/* SUSPECK1K2: $Revision: 1.4 $ ; $Date: 1995/11/30 19:20:56 $		*/
d40 3
d77 1
a77 1
		if (intrace.d1) { /* is dt field set? */
@


1.4
log
@flipped image right to left to make output image agree with
expectations from seismic data...
@
text
@d1 1
a1 1
/* SUSPECK1K2: $Revision: 1.3 $ ; $Date: 1995/11/29 18:16:35 $		*/
d161 1
a161 1
		outtrace.tracl = ik2;
@


1.3
log
@fixed axis labeling and centering bug... I hope...
@
text
@d1 1
a1 1
/* SUSPECK1K2: $Revision: 1.4 $ ; $Date: 1995/11/27 19:47:06 $		*/
d57 1
a57 1
	int iK1,iK2;		/* transform sample indices		*/
d111 2
a112 2
	f1 = -0.5/dx1;
	f2 = -0.5/dx2;
d148 1
a148 1
	for (iK2=0; iK2<nK2; ++iK2) {
a149 2
		for (iK1=0; iK1<nK1; ++iK1)
			outtrace.data[iK1] = rcabs(ct[iK2][nK1-1-iK1]);
d151 7
a157 6
		for (iK1=nK1; iK1<nx1fft; ++iK1) {
			if (iK2!=0) 
				outtrace.data[iK1] = rcabs(ct[nK2-1-iK2][iK1]);
			else
				outtrace.data[iK1] = rcabs(ct[0][iK1]);
		}
d161 1
a161 1
		outtrace.tracl = iK2 +1;
@


1.2
log
@added return EXIT_SUCCESS at the end of main
@
text
@d1 1
a1 1
/* SUSPECK1K2: $Revision: 1.1 $ ; $Date: 1995/04/26 14:07:48 $		*/
d111 2
a112 2
	f1 = -1.0/(2*dx1);
	f2 = -1.0/(2*dx2);
d124 3
d135 1
a135 1
                if (ISODD(ix2))
d137 1
a137 6
				rt[ix2][ix1] = -rt[ix2][ix1];


		/* pad dimension 1 with zeros */
		for (ix1=nx1; ix1<nx1fft; ++ix1) rt[ix2][ix1] = 0.0;

a139 6


	/* Pad dimension 2 with zeros */
	for (ix2=nx2; ix2<nx2fft; ++ix2)
		for (ix1=0; ix1<nx1fft; ++ix1) rt[ix2][ix1] = 0.0;

a146 1

d148 1
a148 1
	for (iK2=0; iK2<nK2-1; ++iK2) {
a149 1
		/* set outtrace.data to appear symmetrical */
d151 1
a151 1
			     outtrace.data[nK1-iK1]=rcabs(ct[(nK2-1)-iK2][iK1]);
d153 7
a159 3
		for (iK1=nK1; iK1<nx1fft; ++iK1)
			     outtrace.data[iK1] = rcabs(ct[iK2][iK1]);
			
d162 1
a162 1
		outtrace.tracl = iK2 + 1;
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/* SUSPECK1K2: $Revision: 1.12 $ ; $Date: 94/08/25 15:00:54 $		*/
d179 1
@
