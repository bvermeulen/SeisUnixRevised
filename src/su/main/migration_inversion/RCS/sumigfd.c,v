head	1.13;
access;
symbols;
locks; strict;
comment	@ * @;


1.13
date	2015.08.07.22.19.43;	author john;	state Exp;
branches;
next	1.12;

1.12
date	2011.11.16.22.14.43;	author john;	state Exp;
branches;
next	1.11;

1.11
date	2011.11.12.00.21.33;	author john;	state Exp;
branches;
next	1.10;

1.10
date	2006.12.13.16.50.55;	author john;	state Exp;
branches;
next	1.9;

1.9
date	2006.11.07.22.58.42;	author john;	state Exp;
branches;
next	1.8;

1.8
date	2006.10.31.22.10.44;	author john;	state Exp;
branches;
next	1.7;

1.7
date	2004.12.23.23.14.07;	author john;	state Exp;
branches;
next	1.6;

1.6
date	2003.06.09.16.17.07;	author john;	state Exp;
branches;
next	1.5;

1.5
date	2000.09.25.20.38.38;	author john;	state Exp;
branches;
next	1.4;

1.4
date	2000.09.22.19.31.23;	author john;	state Exp;
branches;
next	1.3;

1.3
date	98.04.21.21.25.50;	author john;	state Exp;
branches;
next	1.2;

1.2
date	97.07.28.22.36.46;	author john;	state Exp;
branches;
next	1.1;

1.1
date	97.07.22.20.01.42;	author john;	state Exp;
branches;
next	;


desc
@45 degree Finite difference migration for                   ",
"            zero-offset data.
by Baoniu Han
@


1.13
log
@changed trigonometric functions to the cwp_ version
@
text
@/* Copyright (c) Colorado School of Mines, 2011.*/
/* All rights reserved.                       */

/* SUMIGFD: $Revision: 1.12 $ ; $Date: 2011/11/16 22:14:43 $	*/

#include "su.h"
#include "segy.h"
#include "header.h"
#include <signal.h>

/*********************** self documentation ******************************/
char *sdoc[] = {
"									",
" SUMIGFD - 45-90 degree Finite difference depth migration for		",
"           zero-offset data.						",
"									",
"   sumigfd <infile >outfile vfile= [optional parameters]		",
"									",
" Required Parameters:							",
" nz=		number of depth sapmles					",
" dz=		depth sampling interval					",
" vfile=	name of file containing velocities			",
" 		(see Notes below concerning format of this file)	",
"									",
" Optional Parameters:							",
" dt=from header(dt) or .004    time sampling interval			",
" dx=from header(d2) or 1.0	midpoint sampling interval		",
" dip=45,65,79,80,87,89,90  	Maximum angle of dip reflector		",
"									",
" tmpdir=	if non-empty, use the value as a directory path		",
"		prefix for storing temporary files; else if the		",
"		the CWP_TMPDIR environment variable is set use		",
"		its value for the path; else use tmpfile()		",
"									", 
" Notes:								", 
" The computation cost by dip angle is 45=65=79<80<87<89<90		",
"									", 
" The input velocity file \'vfile\' consists of C-style binary floats.	", 
" The structure of this file is vfile[iz][ix]. Note that this means that",
" the x-direction is the fastest direction instead of z-direction! Such a",
" structure is more convenient for the downward continuation type	",
" migration algorithm than using z as fastest dimension as in other SU	",
" programs. (In C  v[iz][ix] denotes a v(x,z) array, whereas v[ix][iz]  ",
" denotes a v(z,x) array, the opposite of what Matlab and Fortran	",
" programmers may expect.)						", 
"									", 
" Because most of the tools in the SU package (such as  unif2, unisam2,	",
" and makevel) produce output with the structure vfile[ix][iz], you will",
" need to transpose the velocity files created by these programs. You may",
" use the SU program \'transp\' in SU to transpose such files into the	",
" required vfile[iz][ix] structure.					",
"									",
NULL};

/* 
 * Credits: CWP Baoniu Han, April 20th, 1998
 *
 * Trace header fields accessed: ns, dt, delrt, d2
 * Trace header fields modified: ns, dt, delrt
 */
/**************** end self doc *******************************************/


/* Globals (so can trap signal) defining temporary disk files */
char tracefile[BUFSIZ];	/* filename for the file of traces	*/
char headerfile[BUFSIZ];/* filename for the file of headers	*/
FILE *tracefp;		/* fp for trace storage file		*/
FILE *headerfp;		/* fp for header storage file		*/
segy tr;
char tmp;

/* Prototypes of functions used internally */
static void closefiles(void);
void retris(complex *data,complex *a,complex *c,complex *b,complex
		endl,complex endr, int nx, complex *d);

void fdmig( complex **cp, int nx, int nw, float *v,float fw,float  
		dw,float dz,float dx,float dt,int dip);

int
main (int argc, char **argv)
{
	int nt;			/* number of time samples		*/
	int nz;			/* number of migrated depth samples	*/
	int nx;			/* number of midpoints			*/
	int iz,iw,ix;		/* loop counters			*/
	int ntfft;		/* fft size				*/
	int nw;			/* number of wave numbers		*/	
	int dip;		/* maximum dip angle			*/

	float dt,dz,tz=0.0;	/* sampling interval			*/
	float dw;		/* wave number sampling interval	*/
	float fw;		/* first wave number			*/
	float w;		/* wave number				*/
	float dx;		/* spatial sampling interval		*/
	float **p=NULL;		/* input data				*/
	float **cresult=NULL;	/* output data				*/

	double kz2;
	float **v=NULL;
	complex cshift2;
	complex **cp=NULL;	/* complex input,output			*/
	char *vfile="";		/* name of file containing velocities	*/
	FILE *vfp=NULL;
	int verbose=1;		/* flag for echoing info		*/
	char *tmpdir=NULL;	/* directory path for tmp files		*/
	cwp_Bool istmpdir=cwp_false;/* cwp_true for user-given path	*/

	/* hook up getpar to handle the parameters */
	initargs(argc,argv);
	requestdoc(1);

	/* get info from first trace */
	if (!gettr(&tr))  err("can't get first trace");
	nt = tr.ns;

	/* let user give dt and/or dx from command line */
	if (!getparfloat("dt", &dt)) {
		if (tr.dt) { /* is dt field set? */
			dt = ((double) tr.dt)/1000000.0;
		} else { /* dt not set, assume 4 ms */
			dt = 0.004;
			warn("tr.dt not set, assuming dt=0.004");
		}
	}
	if (!getparfloat("dx",&dx)) {
		if (tr.d2) { /* is d2 field set? */
			dx = tr.d2;
		} else {
			dx = 1.0;
			warn("tr.d2 not set, assuming d2=1.0");
		}
	}


	/* get optional parameters */
	if (!getparint("nz",&nz)) err("nz must be specified");
	if (!getparfloat("dz",&dz)) err("dz must be specified");
	if (!getparstring("vfile", &vfile)) err("vfile must be specified");
	if(!getparint("verbose",&verbose)) verbose = 0;
	if(!getparint("dip",&dip)) dip=65;

	/* Look for user-supplied tmpdir */
	if (!getparstring("tmpdir",&tmpdir) &&
	    !(tmpdir = getenv("CWP_TMPDIR"))) tmpdir="";
	if (!STREQ(tmpdir, "") && access(tmpdir, WRITE_OK))
		err("you can't write in %s (or it doesn't exist)", tmpdir);
        checkpars();

	/* store traces and headers in tempfiles while getting a count */
	if (STREQ(tmpdir,"")) {
		tracefp = etmpfile();
		headerfp = etmpfile();
		if (verbose) warn("using tmpfile() call");
	} else { /* user-supplied tmpdir */
		char directory[BUFSIZ];
		strcpy(directory, tmpdir);
		strcpy(tracefile, temporary_filename(directory));
		strcpy(headerfile, temporary_filename(directory));
		/* Trap signals so can remove temp files */
		signal(SIGINT,  (void (*) (int)) closefiles);
		signal(SIGQUIT, (void (*) (int)) closefiles);
		signal(SIGHUP,  (void (*) (int)) closefiles);
		signal(SIGTERM, (void (*) (int)) closefiles);
		tracefp = efopen(tracefile, "w+");
		headerfp = efopen(headerfile, "w+");
			istmpdir=cwp_true;		
		if (verbose) warn("putting temporary files in %s", directory);
	}

	nx = 0;
	do {
		 ++nx;
		efwrite(&tr,HDRBYTES,1,headerfp);
		efwrite(tr.data, FSIZE, nt, tracefp);
	} while (gettr(&tr));
	erewind(tracefp);
	erewind(headerfp);
	
	/* determine frequency sampling (for real to complex FFT) */
	ntfft = npfar(nt);
	nw = ntfft/2+1;
	dw = 2.0*PI/(ntfft*dt);
	fw = 0.0;

	/* allocate space */
	p = alloc2float(ntfft,nx);
	cp = alloc2complex(nw,nx);
	cresult = alloc2float(nz,nx);
	v=alloc2float(nx,nz);

	/* Zero all arrays */
	memset((void *) p[0], 0, FSIZE*ntfft*nx);
	memset((void *) cp[0], 0, sizeof(complex)*nw*nx);
	memset((void *) cresult[0], 0, FSIZE*nz*nx);
	memset((void *) v[0], 0, FSIZE*nz*nx);

	/* load traces into the zero-offset array and close tmpfile */
	for(ix=0;ix<nx;ix++)
		efread(p[ix], FSIZE, nt, tracefp);

	efclose(tracefp);

	/* load velocity file */
	vfp=efopen(vfile,"r");	
	efread(v[0],FSIZE,nz*nx,vfp);
	efclose(vfp);			

	/* Fourier transform */
	pfa2rc(1,1,ntfft,nx,p[0],cp[0]);

	/* loop over depth*/
	for(iz=0;iz<nz;++iz,tz+=dz){
		for(ix=0;ix<nx;ix++){
			cresult[ix][iz] =0.0;
			v[iz][ix]=v[iz][ix]/2.0;
			for(iw=1;iw<nw;iw++)
			cresult[ix][iz]+=cp[ix][iw].r/ntfft;
		}


		for(ix=0;ix<nx;++ix)  
		for(iw=1,w=fw+dw;iw<nw;w+=dw,++iw) {
			kz2=-1.0/v[iz][ix]*w*dz;
			cshift2=cmplx(cos(kz2),sin(kz2));
			cp[ix][iw]=cmul(cp[ix][iw],cshift2);
		}

		fdmig( cp, nx, nw,v[iz],fw,dw,dz,dx,dt,dip);

	}
	/* restore header fields and write output */
	for(ix=0; ix<nx; ix++) {

		efread(&tr,HDRBYTES,1,headerfp);
		tr.ns = nz ;
		tr.d1 = dz ;
		memcpy( (void *) tr.data, (const void *) cresult[ix],nz*FSIZE);
		puttr(&tr);
	}
	
	/* Clean up */
	efclose(headerfp);
	if (istmpdir) eremove(headerfile);
	if (istmpdir) eremove(tracefile);

	return(CWP_Exit());	

}

/* Functions used internally */

static void closefiles(void)
{
	efclose(headerfp);
	efclose(tracefp);
	eremove(headerfile);
	eremove(tracefile);
	exit(EXIT_FAILURE);
}



void fdmig( complex **cp, int nx, int nw, float *v,float fw,float
	dw,float dz,float dx,float dt,int dip)
{
	int iw,ix,step=1;
	float *s1,*s2,w,coefa[5],coefb[5],v1,vn,trick=0.1;
	complex cp2,cp3,cpnm1,cpnm2;
	complex a1,a2,b1,b2;
	complex endl,endr;
	complex *data,*d,*a,*b,*c;

	s1=alloc1float(nx);
	s2=alloc1float(nx);

	data=alloc1complex(nx);
	d=alloc1complex(nx);
	a=alloc1complex(nx);
	b=alloc1complex(nx);
	c=alloc1complex(nx);

	if(dip!=45&&dip!=65&&dip!=79&&dip!=80&&dip!=87&&dip!=89&&dip!=90)
	dip=79;


	if(dip==45){
	coefa[0]=0.5;coefb[0]=0.25;
	step=1;
	}

	if(dip==65){
	coefa[0]=0.478242060;coefb[0]=0.376369527;
	step=1;
	}

	if(dip==79){
	coefa[0]=coefb[0]=0.4575;
	step=1;
	}
	
	if(dip==80){
	coefa[1]=0.040315157;coefb[1]=0.873981642;
	coefa[0]=0.457289566;coefb[0]=0.222691983;
	step=2;
	}

	if(dip==87){
	coefa[2]=0.00421042;coefb[2]=0.972926132;
	coefa[1]=0.081312882;coefb[1]=0.744418059;
	coefa[0]=0.414236605;coefb[0]=0.150843924;
	step=3;
	}

	if(dip==89){
	coefa[3]=0.000523275;coefb[3]=0.994065088;
	coefa[2]=0.014853510;coefb[2]=0.919432661;
	coefa[1]=0.117592008;coefb[1]=0.614520676;
	coefa[0]=0.367013245;coefb[0]=0.105756624;
	step=4;
	}

	if(dip==90){
	coefa[4]=0.000153427;coefb[4]=0.997370236;
	coefa[3]=0.004172967;coefb[3]=0.964827992;
	coefa[2]=0.033860918;coefb[2]=0.824918565;
	coefa[1]=0.143798076;coefb[1]=0.483340757;
	coefa[0]=0.318013812;coefb[0]=0.073588213;
	step=5;
	}


	v1=v[0];vn=v[nx-1];
	 
loop:
	
step--;

	for(iw=0,w=fw;iw<nw;iw++,w+=dw){

		if(fabs(w)<=1.0e-10)w=1.0e-10/dt;
			
		for(ix=0;ix<nx;ix++){
			s1[ix]=(v[ix]*v[ix])*coefb[step]/(dx*dx*w*w)+trick;
			s2[ix]=-v[ix]*dz*coefa[step]/(w*dx*dx)*0.5;
		}
		
		for(ix=0;ix<nx;ix++){
			data[ix]=cp[ix][iw];
		}

		cp2=data[0];
		cp3=data[1];
		cpnm1=data[nx-1];
		cpnm2=data[nx-2];
		a1=cmul(cp2,conjg(cp3));
/*
		b1=cadd(cmul(cp2,conjg(cp2)),cmul(cp3,conjg(cp3)));
 */
		b1=cmul(cp3,conjg(cp3));
		if(b1.r==0.0 && b1.i==0.0)

			a1=cwp_cexp(cmplx(0.0,-w*dx*0.5/v1));
		else
			a1=cdiv(a1,b1);
		 
		if(a1.i>0.0)a1=cwp_cexp(cmplx(0.0,-w*dx*0.5/v1));
		
		a2=cmul(cpnm1,conjg(cpnm2));
		b2=cmul(cpnm2,conjg(cpnm2));
	 
		if(b2.r==0.0 && b2.i==0.0)
			a2=cwp_cexp(cmplx(0.0,-w*dx*0.5/vn));
		else
			a2=cdiv(a2,b2);
		
		if(a2.i>0.0)a2=cwp_cexp(cmplx(0.0,-w*dx*0.5/vn));
  
		
		for(ix=0;ix<nx;ix++){
			a[ix]=cmplx(s1[ix],s2[ix]);
			b[ix]=cmplx(1.0-2.0*s1[ix],-2.0*s2[ix]);
		}
			
		for(ix=1;ix<nx-1;ix++){
		d[ix]=cadd(cadd(cmul(data[ix+1],a[ix+1]),cmul(data[ix-1],a[ix-1])),
		cmul(data[ix],b[ix]));
		}
		
		d[0]=cadd(cmul(cadd(b[0],cmul(a[0],a1)),data[0]),cmul(data[1],a[1]));
		d[nx-1]=cadd(cmul(cadd(b[nx-1],cmul(a[nx-1],a2)),data[nx-1]),
		cmul(data[nx-2],a[nx-2]));

		for(ix=0;ix<nx;ix++){
			data[ix]=cmplx(s1[ix],-s2[ix]);
			b[ix]=cmplx(1.0-2.0*s1[ix],2.0*s2[ix]);
		}
	
		endl=cadd(b[0],cmul(data[0],a1));
		endr=cadd(b[nx-1],cmul(data[nx-1],a2));
		
			
		for(ix=1;ix<nx-1;ix++){
			a[ix]=data[ix+1];
			c[ix]=data[ix-1];
		}
		a[0]=data[1];
		c[nx-1]=data[nx-2];
		
		
		retris(data,a,c,b,endl,endr,nx,d);
	 
		for(ix=0;ix<nx;ix++){
			cp[ix][iw]=data[ix];
		}
	
	}

if(step) goto loop;
	
	free1complex(data);
	free1complex(d);
	free1complex(b);
	free1complex(c);
	free1complex(a);
	free1float(s1);
	free1float(s2);
		
	return;
}


 
void retris(complex *data,complex *a,complex *c, complex *b,
		complex endl,complex endr, int nx, complex *d)
{

	int ix;	
	complex *e,den;
	complex *f;

	e=alloc1complex(nx);	
	f=alloc1complex(nx);
	e[0]=cdiv(cneg(a[0]),endl);
	f[0]=cdiv(d[0],endl);

	for(ix=1;ix<nx-1;++ix){
		den=cadd(b[ix],cmul(c[ix],e[ix-1]));
		e[ix]=cdiv(cneg(a[ix]),den);  
		f[ix]=cdiv(csub(d[ix],cmul(f[ix-1],c[ix])),den);
	}

	data[nx-1]=cdiv(csub(d[nx-1],cmul(f[nx-2],c[nx-2])),cadd(endr,cmul(c[nx-2],e[nx-2])));
 
	for(ix=nx-2;ix>-1;--ix)
		data[ix]=cadd(cmul(data[ix+1],e[ix]),f[ix]);

	free1complex(e);
	free1complex(f);
	return;
}

@


1.12
log
@added Reg Beardsley checkpar()
@
text
@d4 1
a4 1
/* SUMIGFD: $Revision: 1.10 $ ; $Date: 2006/12/13 16:50:55 $	*/
d363 1
a363 1
			a1=cexp(cmplx(0.0,-w*dx*0.5/v1));
d367 1
a367 1
		if(a1.i>0.0)a1=cexp(cmplx(0.0,-w*dx*0.5/v1));
d373 1
a373 1
			a2=cexp(cmplx(0.0,-w*dx*0.5/vn));
d377 1
a377 1
		if(a2.i>0.0)a2=cexp(cmplx(0.0,-w*dx*0.5/vn));
@


1.11
log
@copyright
@
text
@d148 2
@


1.10
log
@added additional comments of v(x,z) versus v(z,x) files
@
text
@d1 4
a4 1
/* SUMIGFD: $Revision: 1.9 $ ; $Date: 2006/11/07 22:58:42 $	*/
@


1.9
log
@changed    memset( .., (int) '\0',...) to memset( .., 0,..) as per suggestion of Marion Zhu and Reg Beardsley
@
text
@d1 1
a1 1
/* SUMIGFD: $Revision: 1.8 $ ; $Date: 2006/10/31 22:10:44 $	*/
d40 3
a42 1
" programs.							",
@


1.8
log
@fixed output headers for f1,d1
@
text
@d1 1
a1 1
/* SUMIGFD: $Revision: 1.7 $ ; $Date: 2004/12/23 23:14:07 $	*/
d186 4
a189 4
	memset((void *) p[0], (int) '\0', FSIZE*ntfft*nx);
	memset((void *) cp[0], (int) '\0', sizeof(complex)*nw*nx);
	memset((void *) cresult[0], (int) '\0', FSIZE*nz*nx);
	memset((void *) v[0], (int) '\0', FSIZE*nz*nx);
@


1.7
log
@fixed tr.d1 so depths are correct
@
text
@d1 1
a1 1
/* SUMIGFD: $Revision: 1.6 $ ; $Date: 2003/06/09 16:17:07 $	*/
d11 2
a12 1
" SUMIGFD - 45-90 degree Finite difference migration for zero-offset data.",
d91 3
a93 1
	float **p,**cresult;	/* input, output data			*/
d95 1
a95 1
	float **v;
d97 1
a97 1
	complex **cp;		/* complex input,output			*/
d99 1
a99 1
	FILE *vfp;
d101 1
a101 1
	char *tmpdir;		/* directory path for tmp files		*/
@


1.6
log
@9 June 2003
@
text
@d1 1
a1 1
/* SUMIGFD: $Revision: 1.5 $ ; $Date: 2000/09/25 20:38:38 $	*/
d227 1
a227 1
		tr.dt = dz*1000000.0 ;
@


1.5
log
@updated selfdoc to read a bit clearer
@
text
@d1 1
a1 1
/* SUMIGFD: $Revision: 1.4 $ ; $Date: 2000/09/22 19:31:23 $	*/
d237 1
a237 1
	return EXIT_SUCCESS;	
@


1.4
log
@unintialed variable
@
text
@d1 1
a1 1
/* SUMIGFD: $Revision: 1.3 $ ; $Date: 1998/04/21 21:25:50 $	*/
d34 3
a36 2
" The structure of input velocity file is vfile[iz][ix]. Note that the	",
"  x-direction is the fastest direction instead of z-direction! Such a	",
d38 2
a39 2
" migration algorithm than the usual z as fastest dimension encountered ",
" in other SU programs.							",
d41 5
a45 2
" Because most of the velocity file is in vfile[ix][iz] structure, you	",
" can use \'transp\' in SU to transpose them into vfile[iz][ix] structure.",
d255 1
a255 1
        dw,float dz,float dx,float dt,int dip)
d257 15
a271 15
        int iw,ix,step=1;
        float *s1,*s2,w,coefa[5],coefb[5],v1,vn,trick=0.1;
        complex cp2,cp3,cpnm1,cpnm2;
        complex a1,a2,b1,b2;
        complex endl,endr;
        complex *data,*d,*a,*b,*c;

        s1=alloc1float(nx);
        s2=alloc1float(nx);

        data=alloc1complex(nx);
        d=alloc1complex(nx);
        a=alloc1complex(nx);
        b=alloc1complex(nx);
        c=alloc1complex(nx);
d277 4
a280 44
        if(dip==45){
        coefa[0]=0.5;coefb[0]=0.25;
        step=1;
        }

        if(dip==65){
        coefa[0]=0.478242060;coefb[0]=0.376369527;
        step=1;
        }

        if(dip==79){
        coefa[0]=coefb[0]=0.4575;
        step=1;
        }
        
        if(dip==80){
        coefa[1]=0.040315157;coefb[1]=0.873981642;
        coefa[0]=0.457289566;coefb[0]=0.222691983;
        step=2;
        }

        if(dip==87){
        coefa[2]=0.00421042;coefb[2]=0.972926132;
        coefa[1]=0.081312882;coefb[1]=0.744418059;
        coefa[0]=0.414236605;coefb[0]=0.150843924;
        step=3;
        }

        if(dip==89){
        coefa[3]=0.000523275;coefb[3]=0.994065088;
        coefa[2]=0.014853510;coefb[2]=0.919432661;
        coefa[1]=0.117592008;coefb[1]=0.614520676;
        coefa[0]=0.367013245;coefb[0]=0.105756624;
        step=4;
        }

        if(dip==90){
        coefa[4]=0.000153427;coefb[4]=0.997370236;
        coefa[3]=0.004172967;coefb[3]=0.964827992;
        coefa[2]=0.033860918;coefb[2]=0.824918565;
        coefa[1]=0.143798076;coefb[1]=0.483340757;
        coefa[0]=0.318013812;coefb[0]=0.073588213;
        step=5;
        }
d282 4
d287 38
a324 2
        v1=v[0];vn=v[nx-1];
         
d326 1
a326 1
        
d329 1
a329 1
        for(iw=0,w=fw;iw<nw;iw++,w+=dw){
d331 16
a346 16
                if(fabs(w)<=1.0e-10)w=1.0e-10/dt;
                        
                for(ix=0;ix<nx;ix++){
                        s1[ix]=(v[ix]*v[ix])*coefb[step]/(dx*dx*w*w)+trick;
                        s2[ix]=-v[ix]*dz*coefa[step]/(w*dx*dx)*0.5;
                }
                
                for(ix=0;ix<nx;ix++){
                        data[ix]=cp[ix][iw];
                }

                cp2=data[0];
                cp3=data[1];
                cpnm1=data[nx-1];
                cpnm2=data[nx-2];
                a1=cmul(cp2,conjg(cp3));
d348 1
a348 1
                b1=cadd(cmul(cp2,conjg(cp2)),cmul(cp3,conjg(cp3)));
d350 2
a351 2
                b1=cmul(cp3,conjg(cp3));
                if(b1.r==0.0 && b1.i==0.0)
d353 15
a367 15
                        a1=cexp(cmplx(0.0,-w*dx*0.5/v1));
                else
                        a1=cdiv(a1,b1);
                 
                if(a1.i>0.0)a1=cexp(cmplx(0.0,-w*dx*0.5/v1));
                
                a2=cmul(cpnm1,conjg(cpnm2));
                b2=cmul(cpnm2,conjg(cpnm2));
         
                if(b2.r==0.0 && b2.i==0.0)
                        a2=cexp(cmplx(0.0,-w*dx*0.5/vn));
                else
                        a2=cdiv(a2,b2);
                
                if(a2.i>0.0)a2=cexp(cmplx(0.0,-w*dx*0.5/vn));
d369 39
a407 39
                
                for(ix=0;ix<nx;ix++){
                        a[ix]=cmplx(s1[ix],s2[ix]);
                        b[ix]=cmplx(1.0-2.0*s1[ix],-2.0*s2[ix]);
                }
                        
                for(ix=1;ix<nx-1;ix++){
                d[ix]=cadd(cadd(cmul(data[ix+1],a[ix+1]),cmul(data[ix-1],a[ix-1])),
                cmul(data[ix],b[ix]));
                }
                
                d[0]=cadd(cmul(cadd(b[0],cmul(a[0],a1)),data[0]),cmul(data[1],a[1]));
                d[nx-1]=cadd(cmul(cadd(b[nx-1],cmul(a[nx-1],a2)),data[nx-1]),
                cmul(data[nx-2],a[nx-2]));

                for(ix=0;ix<nx;ix++){
                        data[ix]=cmplx(s1[ix],-s2[ix]);
                        b[ix]=cmplx(1.0-2.0*s1[ix],2.0*s2[ix]);
                }
        
                endl=cadd(b[0],cmul(data[0],a1));
                endr=cadd(b[nx-1],cmul(data[nx-1],a2));
                
                        
                for(ix=1;ix<nx-1;ix++){
                        a[ix]=data[ix+1];
                        c[ix]=data[ix-1];
                }
                a[0]=data[1];
                c[nx-1]=data[nx-2];
                
                
                retris(data,a,c,b,endl,endr,nx,d);
         
                for(ix=0;ix<nx;ix++){
                        cp[ix][iw]=data[ix];
                }       
        
        }
d410 11
a420 11
        
        free1complex(data);
        free1complex(d);
        free1complex(b);
        free1complex(c);
        free1complex(a);
        free1float(s1);
        free1float(s2);
                
        return;
}               
@


1.3
log
@20 April update from Han
@
text
@d1 1
a1 1
/* SUMIGFD: $Revision: 1.8 $ ; $Date: 1996/09/06 16:08:13 $	*/
d81 1
a81 1
	float dt,dz,tz;		/* sampling interval			*/
@


1.2
log
@changes suggested by Stew Levin to silence SGI compiler warnings, etc
@
text
@d1 1
a1 1
/* SUMIGFD: $Vision: 1.00 $ ; $Date: 1997/07/22 20:01:42 $	*/
d11 3
a13 3
" SUMIGFD - 45 and 60 degree Finite difference migration for		",
"	    zero-offset data.						",
" sumigfd <infile >outfile vfile= [optional parameters]			",
d19 1
d24 1
a24 3
" ft=0.0			first time sample			",
" fz=0.0			first depth sample			",
" dip=45 (or 65)		Maximum angle of dip reflector 		",
d31 11
a41 3
"									",
"The vfile parameter must be specified, the velocity should be stored in",
"binary format in vfile, its structure should be vfile[iz][ix].		",
d46 1
a46 1
 * Credits: CWP Baoniu Han, July 21th, 1997
a81 1
	float ft,fz;		/* first sample				*/
a124 1
	if (!getparfloat("ft",&ft)) ft = 0.0;
a126 1
	if (!getparfloat("fz",&fz)) fz = 0.0;
d129 1
a129 3
	if(!getparint("dip",&dip)) dip=45;
	if( !((dip==45 || (dip!=65))) )
		err("Only dip=45 and dip=65 supported!");
d199 1
a199 1
	for(iz=0,tz=fz;iz<nz;++iz,tz+=dz){
d202 1
d210 1
a210 1
			kz2=-2.0/v[iz][ix]*w*dz;
a223 1
		tr.delrt = fz ;
d248 2
d251 1
a251 1
	dw,float dz,float dx,float dt,int dip) 
d253 95
a347 58
	int iw,ix;
	float *s1,*s2,w,a0=2.0,coefa=0.0,coefb=0.0,v1,vn,trick=0.14;
	complex cp2,cp3,cpnm1,cpnm2;
	complex a1,a2,b1,b2;
	complex endl,endr;
	complex *data,*d,*a,*b,*c;

	s1=alloc1float(nx); 
	s2=alloc1float(nx);

	data=alloc1complex(nx);
	d=alloc1complex(nx);
	a=alloc1complex(nx);
	b=alloc1complex(nx);
	c=alloc1complex(nx);
	if(dip==45){
	coefa=0.5;coefb=0.25;} 
	if(dip==65){
	coefa=0.478242060;coefb=0.376369527;}
	v1=v[0];vn=v[nx-1]; 

	for(iw=1,w=fw+dw;iw<nw;iw++,w+=dw){

		if(w==0)w=1.0e-10/dt;

		for(ix=0;ix<nx;ix++){
			s1[ix]=v[ix]*v[ix]*coefa/(4.0*a0*dx*dx*w*w)+trick;
			s2[ix]=v[ix]*dz*coefb/(2.0*w*dx*dx);
		}

		for(ix=0;ix<nx;ix++){
			data[ix]=cp[ix][iw];
		}

		cp2=data[1];
		cp3=data[2];
		cpnm1=data[nx-2];	
		cpnm2=data[nx-3];
		a1=crmul(cmul(cp2,conjg(cp3)),2.0);
		b1=cadd(cmul(cp2,conjg(cp2)),cmul(cp3,conjg(cp3)));
	
		if(b1.r==0.0 && b1.i==0.0)
			a1=cexp(cmplx(0.0,-w*dx*0.5/v1));
		else
			a1=cdiv(a1,b1);
 
		if(a1.i>0.0)a1=cexp(cmplx(0.0,-w*dx*0.5/v1));
 
		a2=crmul(cmul(cpnm1,conjg(cpnm2)),2.0);
		b2=cadd(cmul(cpnm1,conjg(cpnm1)),cmul(cpnm2,conjg(cpnm2)));
	
		if(b2.r==0.0 && b2.i==0.0)
			a2=cexp(cmplx(0.0,-w*dx*0.5/vn));
		else
			a2=cdiv(a2,b2);
	
		if(a2.i>0.0)a2=cexp(cmplx(0.0,-w*dx*0.5/vn));

d349 68
a416 4
		for(ix=0;ix<nx;ix++){
			a[ix]=cmplx(s1[ix],-s2[ix]);
			b[ix]=cmplx(1.0-2.0*s1[ix],2.0*s2[ix]);	
		}
a417 13
		for(ix=1;ix<nx-1;ix++){
			d[ix]=cadd(cadd(cmul(data[ix+1],a[ix+1]),cmul(data[ix-1],a[ix-1])),cmul(data[ix],b[ix]));
 		}

		d[0]=cadd(cmul(cadd(b[0],cmul(a[0],a1)),data[0]),cmul(data[1],a[1]));
		d[nx-1]=cadd(cmul(cadd(b[nx-1],cmul(a[nx-1],a2)),data[nx-1]),cmul(data[nx-2],a[nx-2]));

		for(ix=0;ix<nx;ix++){
			data[ix]=cmplx(s1[ix],s2[ix]);
			b[ix]=cmplx(1.0-2.0*s1[ix],-2.0*s2[ix]);
		}
		endl=cadd(b[0],cmul(data[0],a1));
		endr=cadd(b[nx-1],cmul(data[nx-1],a2));
a418 24
		for(ix=1;ix<nx-1;ix++){	
			a[ix]=data[ix+1];
			c[ix]=data[ix-1];
		}
		a[0]=data[1];
		c[nx-1]=data[nx-2];

		retris(data,a,c,b,endl,endr,nx,d);

		for(ix=0;ix<nx;ix++){
			cp[ix][iw]=data[ix];
		}

	}	
	free1complex(data);
	free1complex(d);
	free1complex(b);
	free1complex(c);
	free1complex(a);
	free1float(s1);
	free1float(s2);

	return;
}
@


1.1
log
@Initial revision
@
text
@d1 1
a1 5
/* Copyright (c) Colorado School of Mines, 1997.*/
/* All rights reserved.                       */

/* SUMIGFD: $Vision: 1.00 $ ; $Date: 1997/07/21 12:50:23 $       */

a7 1

d10 23
a32 23
"                                                                       ",
" SUMIGFD - 45 degree Finite difference migration for                   ",
"            zero-offset data.                                          ",
" sumigfd <infile >outfile vfile= [optional parameters]                 ",
"                                                                       ",
" Required Parameters:                                                  ",
" nz=                   number of depth sapmles                         ", 
" dz=                   depth sampling interval                         ",
" vfile=                name of file containing velocities              ",
"                                                                       ",
" Optional Parameters:                                                  ",
" dt=from header(dt) or .004    time sampling interval                  ",
" dx=from header(d2) or 1.0     midpoint sampling interval              ",
" ft=0.0                        first time sample                       ",
" fz=0.0                	first depth sample                      ",
" dip=45 (or 65)	Maximum angle of dip reflector  		",
"                                                                       ",
" tmpdir=        if non-empty, use the value as a directory path        ",
"                prefix for storing temporary files; else if the        ",
"                the CWP_TMPDIR environment variable is set use         ",
"                its value for the path; else use tmpfile()             ",
"                                                                       ", 
"                                                                       ",
d34 1
a34 1
"binary format in vfile, its structure should be vfile[iz][ix].         ",
d38 2
a39 2
/* Credits: CWP Baoniu Han, July 21th, 1997
 *
a46 1

d53 1
d55 1
a56 1

d58 1
a58 1
endl,complex endr, int nx, complex *d);
d61 1
a61 2
dw,float dz,float dx,float dt,int dip);
char tmp;
a63 1

d66 15
a80 15
	int nt;			/* number of time samples */
	int nz;		        /* number of migrated depth samples */
	int nx;			/* number of midpoints 	*/
	int iz,iw,ix,it;	/* loop counters 	*/
	int ntfft;		/* fft size		*/
	int nw;			/* number of wave numbers */	
	int dip;		/* maximum dip angle */

	float dt,dz,tz;		/* sampling interval 	*/
	float ft,fz;		/* first sample		*/
	float dw;		/* wave number sampling interval */
	float fw;		/* first wave number 		*/
	float w;		/* wave number		*/
	float dx;		/* spatial sampling interval	*/
	float **p,**cresult;	/* input, output data		*/
d84 2
a85 2
	complex **cp;		/* complex input,output		*/
	char *vfile="";		/* name of file containing velocities */
d89 1
a89 1
	cwp_Bool istmpdir=cwp_false;/* cwp_true for user-given path		*/
d120 4
a123 4
        if (!getparint("nz",&nz)) err("nz must be specified");
        if (!getparfloat("dz",&dz)) err("dz must be specified");
        if (!getparfloat("fz",&fz)) fz = 0.0;
        if (!getparstring("vfile", &vfile)) err("vfile must be specified");
d126 3
a128 2
	if(dip==65) dip=65;
	else dip=45; 
d151 1
a151 1
      		istmpdir=cwp_true;		
a168 1
	
d176 6
d184 2
a185 1
	efread(p[ix], FSIZE, nt, tracefp);
d188 1
a188 1
	/*load velicoty file*/
d193 1
a193 5
	/* pad with zeros and Fourier transform t to w */
       	for (ix=0; ix<nx; ix++)
		for (it=nt; it<ntfft; it++)
			p[ix][it] = 0.0;

d205 5
a209 7
        	for(ix=0;ix<nx;++ix)  
        	for(iw=1,w=fw+dw;iw<nw;w+=dw,++iw)
		{
	        kz2=-2.0/v[iz][ix]*w*dz;
	        cshift2=cmplx(cos(kz2),sin(kz2));
        	cp[ix][iw]=cmul(cp[ix][iw],cshift2);

d212 1
a212 1
	fdmig( cp, nx, nw,v[iz],fw,dw,dz,dx,dt,dip);
d218 6
a223 6
	efread(&tr,HDRBYTES,1,headerfp);
	tr.ns = nz ;
	tr.dt = dz*1000000.0 ;
	tr.delrt = fz ;
	memcpy( (void *) tr.data, (const void *) cresult[ix],nz*FSIZE);
	puttr(&tr);
d235 1
d237 1
a237 1
	static void closefiles()
d239 5
a243 5
        efclose(headerfp);
        efclose(tracefp);
        eremove(headerfile);
        eremove(tracefile);
        exit(EXIT_FAILURE);
d246 1
a246 1
	void fdmig( complex **cp, int nx, int nw, float *v,float fw,float
d263 1
a263 1
        c=alloc1complex(nx);
d268 1
a268 1
        v1=v[0];vn=v[nx-1]; 
d272 1
a272 1
	if(w==0)w=1.0e-10/dt;
d274 4
a277 4
	for(ix=0;ix<nx;ix++){
	s1[ix]=v[ix]*v[ix]*coefa/(4.0*a0*dx*dx*w*w)+trick;
	s2[ix]=v[ix]*dz*coefb/(2.0*w*dx*dx);
	}
d279 3
a281 3
	for(ix=0;ix<nx;ix++){
	data[ix]=cp[ix][iw];
	}
d283 11
a293 10
        cp2=data[1];
        cp3=data[2];
        cpnm1=data[nx-2];      
        cpnm2=data[nx-3];
        a1=crmul(cmul(cp2,conjg(cp3)),2.0);
        b1=cadd(cmul(cp2,conjg(cp2)),cmul(cp3,conjg(cp3)));
        
        if(b1.r==0.0&&b1.i==0.0)
        a1=cexp(cmplx(0.0,-w*dx*0.5/v1));
        else a1=cdiv(a1,b1);
d295 1
a295 1
        if(a1.i>0.0)a1=cexp(cmplx(0.0,-w*dx*0.5/v1));
d297 15
a311 8
        a2=crmul(cmul(cpnm1,conjg(cpnm2)),2.0);
        b2=cadd(cmul(cpnm1,conjg(cpnm1)),cmul(cpnm2,conjg(cpnm2)));
        
        if(b2.r==0.0&&b2.i==0.0)
        a2=cexp(cmplx(0.0,-w*dx*0.5/vn));
        else a2=cdiv(a2,b2);
        
        if(a2.i>0.0)a2=cexp(cmplx(0.0,-w*dx*0.5/vn));
d313 3
d317 2
a318 4
	for(ix=0;ix<nx;ix++){
	a[ix]=cmplx(s1[ix],-s2[ix]);
	b[ix]=cmplx(1.0-2.0*s1[ix],2.0*s2[ix]);       
	}
d320 6
a325 15
	for(ix=1;ix<nx-1;ix++){
       
	d[ix]=cadd(cadd(cmul(data[ix+1],a[ix+1]),cmul(data[ix-1],a[ix-1])),cmul(data[ix],b[ix]));

 	}

        d[0]=cadd(cmul(cadd(b[0],cmul(a[0],a1)),data[0]),cmul(data[1],a[1]));
        d[nx-1]=cadd(cmul(cadd(b[nx-1],cmul(a[nx-1],a2)),data[nx-1]),cmul(data[nx-2],a[nx-2]));

	for(ix=0;ix<nx;ix++){
	data[ix]=cmplx(s1[ix],s2[ix]);
	b[ix]=cmplx(1.0-2.0*s1[ix],-2.0*s2[ix]);
	}
        endl=cadd(b[0],cmul(data[0],a1));
        endr=cadd(b[nx-1],cmul(data[nx-1],a2));
d327 6
a332 6
        for(ix=1;ix<nx-1;ix++){       
	a[ix]=data[ix+1];
	c[ix]=data[ix-1];
	}
	a[0]=data[1];
	c[nx-1]=data[nx-2];
d334 1
a334 1
	retris(data,a,c,b,endl,endr,nx,d);
d336 3
a338 3
	for(ix=0;ix<nx;ix++){
	cp[ix][iw]=data[ix];
	}
d340 1
a340 1
	}       
d344 1
a344 1
        free1complex(c);
d352 2
a353 2
	void retris(complex *data,complex *a,complex *c,complex *b,complex endl,complex 
	endr, int nx, complex *d)
d360 1
a360 1
	e=alloc1complex(nx);     
d366 3
a368 3
	den=cadd(b[ix],cmul(c[ix],e[ix-1]));
	e[ix]=cdiv(cneg(a[ix]),den);  
	f[ix]=cdiv(csub(d[ix],cmul(f[ix-1],c[ix])),den);
d374 1
a374 1
	data[ix]=cadd(cmul(data[ix+1],e[ix]),f[ix]);
@
