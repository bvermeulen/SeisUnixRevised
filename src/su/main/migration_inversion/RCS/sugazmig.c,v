head	1.21;
access;
symbols;
locks; strict;
comment	@ * @;


1.21
date	2011.11.16.22.14.43;	author john;	state Exp;
branches;
next	1.20;

1.20
date	2011.11.12.00.21.33;	author john;	state Exp;
branches;
next	1.19;

1.19
date	2010.01.27.21.47.43;	author john;	state Exp;
branches;
next	1.18;

1.18
date	2004.12.23.23.48.00;	author john;	state Exp;
branches;
next	1.17;

1.17
date	2003.06.09.16.17.07;	author john;	state Exp;
branches;
next	1.16;

1.16
date	97.07.28.22.36.46;	author john;	state Exp;
branches;
next	1.15;

1.15
date	96.09.17.18.41.22;	author jkc;	state Exp;
branches;
next	1.14;

1.14
date	96.02.21.23.39.07;	author jkc;	state Exp;
branches;
next	1.13;

1.13
date	96.02.21.23.00.26;	author jkc;	state Exp;
branches;
next	1.12;

1.12
date	96.01.25.20.13.44;	author jkc;	state Exp;
branches;
next	1.11;

1.11
date	95.09.27.17.13.58;	author john;	state Exp;
branches;
next	1.10;

1.10
date	95.09.27.15.06.56;	author jkc;	state Exp;
branches;
next	1.9;

1.9
date	95.08.02.20.01.19;	author jkc;	state Exp;
branches;
next	1.8;

1.8
date	94.08.25.14.59.31;	author jkc;	state Exp;
branches;
next	1.7;

1.7
date	93.11.24.15.36.23;	author john;	state Exp;
branches;
next	1.6;

1.6
date	92.10.28.16.09.01;	author john;	state Exp;
branches;
next	1.5;

1.5
date	92.10.22.15.35.30;	author john;	state Exp;
branches;
next	1.4;

1.4
date	92.10.13.10.09.34;	author john;	state Exp;
branches;
next	1.3;

1.3
date	92.10.13.09.45.59;	author john;	state Exp;
branches;
next	1.2;

1.2
date	92.10.13.08.53.34;	author john;	state Exp;
branches;
next	1.1;

1.1
date	92.10.12.13.53.40;	author john;	state Exp;
branches;
next	;


desc
@sugazmig -- zero offset gazdag migration
@


1.21
log
@added Reg Beardsley checkpar()
@
text
@/* Copyright (c) Colorado School of Mines, 2011.*/
/* All rights reserved.                       */

/* SUGAZMIGQ: $Revision: 1.19 $ ; $Date: 2010/01/27 21:47:43 $	    */

#include "su.h"
#include "segy.h"
#include "header.h"
#include <signal.h>

/*********************** self documentation **********************/
char *sdoc[] = {
"									",
" SUGAZMIGQ - SU version of Jeno GAZDAG's phase-shift migration 	",
"	     for zero-offset data, with attenuation Q.			",
"									",
" sugazmig <infile >outfile vfile= [optional parameters]		",
"									",
" Optional Parameters:							",
" dt=from header(dt) or	.004	time sampling interval			",
" dx=from header(d2) or 1.0	midpoint sampling interval		",
" ft=0.0			first time sample			",
" ntau=nt(from data)	number of migrated time samples			",
" dtau=dt(from header)	migrated time sampling interval			",
" ftau=ft		first migrated time sample			",
" tmig=0.0		times corresponding to interval velocities in vmig",
" vmig=1500.0	interval velocities corresponding to times in tmig	",
" vfile=		name of file containing velocities		",
" Q=1e6			quality factor					",
" ceil=1e6		gain ceiling beyond which migration ceases	",
"									",
" verbose=0	verbose = 1 echoes information				",
"									",
" tmpdir= 	 if non-empty, use the value as a directory path	",
"		 prefix for storing temporary files; else if the	",
"	         the CWP_TMPDIR environment variable is set use		",
"	         its value for the path; else use tmpfile()		",
"									",
" Note: ray bending effects not accounted for in this version.		",
"									",
" The tmig and vmig arrays specify an interval velocity function of time.",
" Linear interpolation and constant extrapolation is used to determine	",
" interval velocities at times not specified.  Values specified in tmig	",
" must increase monotonically.						",
"									",
" Alternatively, interval velocities may be stored in a binary file	",
" containing one velocity for every time sample in the data that is to be",
" migrated.  If vfile is specified, then the tmig and vmig arrays are ignored.",
"									",
" Caveat: Adding Q is a first attempt to address GPR issues.		",
NULL};

/* 
 * Credits: 
 *  Constant Q attenuation correction by Chuck Oden 5 May 2004
 *  CWP John Stockwell 12 Oct 1992
 * 	Based on a constant v version by Dave Hale.
 *
 * Trace header fields accessed: ns, dt, delrt, d2
 * Trace header fields modified: ns, dt, delrt
 */ 
/**************** end self doc ********************************/

/* prototypes for functions defined and used below */
void gazdagvt (float k, 
	int nt, float dt, float ft, 
	int ntau, float dtau, float ftau,
	float *vt, complex *p, complex *q, float qual, float gainceil);
static void closefiles(void);

/* Globals (so can trap signal) defining temporary disk files */
char tracefile[BUFSIZ];	/* filename for the file of traces	*/
char headerfile[BUFSIZ];/* filename for the file of headers	*/
FILE *tracefp;		/* fp for trace storage file		*/
FILE *headerfp;		/* fp for header storage file		*/

segy tr;

int
main (int argc, char **argv)
{
	int nt;			/* number of time samples */
	int ntau;		/* number of migrated time samples */
	int nx;			/* number of midpoints 	*/
	int ik,ix,it,itau,itmig;/* loop counters 	*/
	int nxfft;		/* fft size		*/
	int nk;			/* number of wave numbers */	

	int ntmig,nvmig;	

	float dt;		/* time sampling interval 	*/
	float ft;		/* first time sample		*/
	float dtau;		/* migrated time sampling interval */
	float ftau;		/* first migrated time value 	*/
	float dk;		/* wave number sampling interval */
	float fk;		/* first wave number 		*/
	float Q, ceil;		/* quality factor, ceiling of amplitude */
	float t,k;		/* time,wave number		*/
	float *tmig, *vmig;	/* arrays of time, interval velocities */
	float dx;		/* spatial sampling interval	*/
	float *vt;		/* velocity v(t)		*/
	float **p,**q;		/* input, output data		*/

	complex **cp,**cq;	/* complex input,output		*/

	char *vfile="";		/* name of file containing velocities */
	int verbose=0;		/* flag for echoing info		*/
	char *tmpdir;		/* directory path for tmp files		*/
	cwp_Bool istmpdir=cwp_false;/* true for user-given path		*/

	/* hook up getpar to handle the parameters */
	initargs(argc,argv);
	requestdoc(1);

	/* get info from first trace */
	if (!gettr(&tr))  err("can't get first trace");
	nt = tr.ns;

	/* let user give dt and/or dx from command line */
	if (!getparfloat("dt", &dt)) {
		if (tr.dt) { /* is dt field set? */
			dt = ((double) tr.dt)/1000000.0;
		} else { /* dt not set, assume 4 ms */
			dt = 0.004;
			warn("tr.dt not set, assuming dt=0.004");
		}
	}
	if (!getparfloat("dx",&dx)) {
		if (tr.d2) { /* is d2 field set? */
			dx = tr.d2;
		} else {
			dx = 1.0;
			warn("tr.d2 not set, assuming d2=1.0");
		}
	}


	/* get optional parameters */
	if (!getparfloat("ft",&ft)) ft = 0.0;
	if (!getparint("ntau",&ntau)) ntau = nt; CHECK_NT("ntau",ntau);
	if (!getparfloat("dtau",&dtau)) dtau = dt;
	if (!getparfloat("ftau",&ftau)) ftau = ft;
	if (!getparfloat("Q",&Q)) Q = 1.0e6;
	if (!getparfloat("ceil",&ceil)) ceil = 1.0e6; 
		if (verbose)warn("Q=%f ceil=%f",Q,ceil); 

	if (!getparint("verbose", &verbose)) verbose = 0;

	/* Look for user-supplied tmpdir */
	if (!getparstring("tmpdir",&tmpdir) &&
	    !(tmpdir = getenv("CWP_TMPDIR"))) tmpdir="";
	if (!STREQ(tmpdir, "") && access(tmpdir, WRITE_OK))
		err("you can't write in %s (or it doesn't exist)", tmpdir);


	/* store traces and headers in tempfiles while getting a count */
	if (STREQ(tmpdir,"")) {
		tracefp = etmpfile();
		headerfp = etmpfile();
		if (verbose) warn("using tmpfile() call");
	} else { /* user-supplied tmpdir */
		char directory[BUFSIZ];
		strcpy(directory, tmpdir);
		strcpy(tracefile, temporary_filename(directory));
		strcpy(headerfile, temporary_filename(directory));
		/* Trap signals so can remove temp files */
		signal(SIGINT,  (void (*) (int)) closefiles);
		signal(SIGQUIT, (void (*) (int)) closefiles);
		signal(SIGHUP,  (void (*) (int)) closefiles);
		signal(SIGTERM, (void (*) (int)) closefiles);
		tracefp = efopen(tracefile, "w+");
		headerfp = efopen(headerfile, "w+");
      		istmpdir=cwp_true;		
		if (verbose) warn("putting temporary files in %s", directory);
	}

	nx = 0;
	do {
		 ++nx;
		efwrite(&tr,HDRBYTES,1,headerfp);
		efwrite(tr.data, FSIZE, nt, tracefp);
	} while (gettr(&tr));
	erewind(tracefp);
	erewind(headerfp);
	
	/* determine wavenumber sampling (for real to complex FFT) */
	nxfft = npfar(nx);
	nk = nxfft/2+1;
	dk = 2.0*PI/(nxfft*dx);
	fk = 0.0;
	
	/* allocate space */
	p = alloc2float(nt,nxfft);
	q = alloc2float(ntau,nxfft);
	cp = alloc2complex(nt,nk);
	cq = alloc2complex(ntau,nk);

	/* load traces into the zero-offset array and close tmpfile */
	efread(*p, FSIZE, nt*nx, tracefp);
	efclose(tracefp);

	/* determine velocity function v(t) */
	vt = ealloc1float(ntau);
	if (!getparstring("vfile",&vfile)) {
		ntmig = countparval("tmig");
		if (ntmig==0) ntmig = 1;
		tmig = ealloc1float(ntmig);
		if (!getparfloat("tmig",tmig)) tmig[0] = 0.0;
		nvmig = countparval("vmig");
		if (nvmig==0) nvmig = 1;
		if (nvmig!=ntmig) err("number of tmig and vmig must be equal");
		vmig = ealloc1float(nvmig);
		if (!getparfloat("vmig",vmig)) vmig[0] = 1500.0;
		for (itmig=1; itmig<ntmig; ++itmig)
			if (tmig[itmig]<=tmig[itmig-1])
				err("tmig must increase monotonically");
		for (it=0,t=0.0; it<ntau; ++it,t+=dt)
			intlin(ntmig,tmig,vmig,vmig[0],vmig[ntmig-1],
				1,&t,&vt[it]);
	} else {
		if (fread(vt,sizeof(float),nt,fopen(vfile,"r"))!=nt)
			err("cannot read %d velocities from file %s",nt,vfile);
	}
	
        checkpars();

	/* pad with zeros and Fourier transform x to k */
	for (ix=nx; ix<nxfft; ix++)
		for (it=0; it<nt; it++)
			p[ix][it] = 0.0;
	pfa2rc(-1,2,nt,nxfft,p[0],cp[0]);
	
	/* migrate each wavenumber */
	for (ik=0,k=fk; ik<nk; ik++,k+=dk)
		gazdagvt(k,nt,dt,ft,ntau,dtau,ftau,vt,cp[ik],cq[ik], Q, ceil);
	
	/* Fourier transform k to x (including FFT scaling) */
	pfa2cr(1,2,ntau,nxfft,cq[0],q[0]);
	for (ix=0; ix<nx; ix++)
		for (itau=0; itau<ntau; itau++)
			q[ix][itau] /= nxfft;

	/* restore header fields and write output */
	for (ix=0; ix<nx; ++ix) {
		efread(&tr,HDRBYTES,1,headerfp);
		tr.ns = ntau ;
		tr.dt = dtau * 1000000.0 ;
		tr.delrt = ftau * 1000.0 ;
		memcpy( (void *) tr.data, (const void *) q[ix],ntau*FSIZE);
		puttr(&tr);
	}
	
	/* Clean up */
	efclose(headerfp);
	if (istmpdir) eremove(headerfile);
	if (istmpdir) eremove(tracefile);

	return(CWP_Exit());	
}

void gazdagvt (float k, 
	int nt, float dt, float ft, 
	int ntau, float dtau, float ftau,
	float *vt, complex *p, complex *q, float qual, float gainceil)
/*****************************************************************************
Gazdag's phase-shift zero-offset migration for one wavenumber
adapted to v(tau) velocity profile
******************************************************************************
Input:
k		wavenumber
nt		number of time samples
dt		time sampling interval
ft		first time sample
ntau		number of migrated time samples
dtau		migrated time sampling interval
ftau		first migrated time sample
vt		velocity v[tau]
p		array[nt] containing data to be migrated

Output:
q		array[ntau] containing migrated data
******************************************************************************/
{
	int ntfft,nw,it,itau,iw;
	float dw,fw,tmax,w,tau,phase,coss, *cumgain, gain, alpha;
	complex cshift,*pp;

	/* determine frequency sampling */
	ntfft = npfa(nt);
	nw = ntfft;
	dw = 2.0*PI/(ntfft*dt);
	fw = -PI/dt;
	
	/* determine maximum time */
	tmax = ft+(nt-1)*dt;

	/* allocate workspace */
	pp = alloc1complex(nw);
	cumgain = alloc1float(nw);
	for (iw=0; iw<nw; iw++)
		cumgain[iw] = 1.0;
	
	/* pad with zeros and Fourier transform t to w, with w centered */
	for (it=0; it<nt; it++)
		pp[it] = (it%2 ? cneg(p[it]) : p[it]);
	for (it=nt; it<ntfft; it++)
		pp[it] = cmplx(0.0,0.0);
	pfacc(1,ntfft,pp);
	
	/* account for non-zero ft and non-zero ftau */
	for (itau=0 ; itau < ftau ; itau++){
		for (iw=0,w=fw; iw<nw; iw++,w+=dw) {
			if (w==0.0) w = 1e-10/dt;
			coss = 1.0-pow(0.5 * vt[itau] * k/w,2.0);
			if (coss>=pow(ftau/tmax,2.0)) {
				phase = w*(ft-ftau*sqrt(coss));
				cshift = cmplx(cos(phase),sin(phase));
				pp[iw] = cmul(pp[iw],cshift);
			} else {
				pp[iw] = cmplx(0.0,0.0);
			}
		}
	}
	
	/* loop over migrated times tau */
	for (itau=0,tau=ftau; itau<ntau; itau++,tau+=dtau) {
		
		/* initialize migrated sample */
		q[itau] = cmplx(0.0,0.0);
		
		/* loop over frequencies w */
		for (iw=0,w=fw; iw<nw; iw++,w+=dw) {
			
			/* accumulate image (summed over frequency) */
			q[itau] = cadd(q[itau],pp[iw]);
			
			/* compute cosine squared of propagation angle */
			if (w==0.0) w = 1e-10/dt;
			coss = 1.0-pow(0.5 * vt[itau] * k/w,2.0);
			
			/* if wave could have been recorded in time */
			if (coss>=pow(tau/tmax,2.0)) {
			
				/* extrapolate down one migrated time step */
				phase = -w*dtau*sqrt(coss);
				cshift = cmplx(cos(phase),sin(phase));
			
				/* apply gain until gain ceiling is reached */
				if (cumgain[iw] < gainceil) {
					alpha = w/(2.0*vt[itau]*qual);
					gain = exp(fabs(0.5*vt[itau]*dtau*alpha));
					pp[iw] = cmul(pp[iw],crmul(cshift,gain));
					cumgain[iw] *= gain;
				} else {
					pp[iw] = cmplx(0.0,0.0);
				}
				
			/* else, if wave couldn't have been recorded in time */
			} else {
				
				/* zero the wave */
				pp[iw] = cmplx(0.0,0.0);
			}
		}
		
		/* scale accumulated image just as we would for an FFT */
		q[itau] = crmul(q[itau],1.0/nw);
	}
		
	/* free workspace */
	free1complex(pp);	
	free1float(cumgain);
	
}

/* for graceful interrupt termination */
static void closefiles(void)
{
	efclose(headerfp);
	efclose(tracefp);
	eremove(headerfile);
	eremove(tracefile);
	exit(EXIT_FAILURE);
}
@


1.20
log
@copyright
@
text
@d225 2
@


1.19
log
@added initialization to declaration of verbose
@
text
@d1 4
a4 1
/* SUGAZMIGQ: $Revision: 1.18 $ ; $Date: 2004/12/23 23:48:00 $	    */
@


1.18
log
@added Chuck Oden's Q related option for GPR data
@
text
@d1 1
a1 1
/* SUGAZMIGQ: $Revision: 1.00 $ ; $Date: 2004/03/89 16:17:07 $	    */
d104 1
a104 1
	int verbose;		/* flag for echoing info		*/
@


1.17
log
@9 June 2003
@
text
@d1 1
a1 1
/* SUGAZMIG: $Revision: 1.16 $ ; $Date: 1997/07/28 22:36:46 $	    */
d11 2
a12 2
" SUGAZMIG - SU version of Jeno GAZDAG's phase-shift migration 		",
"	     for zero-offset data.					",
d24 1
a24 1
" vmig=1500.0		interval velocities corresponding to times in tmig",
d26 2
d47 1
d51 3
a53 1
 * Credits: CWP John Stockwell 12 Oct 1992
a54 1
 * 
d62 2
a63 2
void gazdagvt (float k,
	int nt, float dt, float ft,
d65 1
a65 1
	float *vt, complex *p, complex *q);
d94 1
d140 4
d230 1
a230 1
		gazdagvt(k,nt,dt,ft,ntau,dtau,ftau,vt,cp[ik],cq[ik]);
d259 1
a259 1
	float *vt, complex *p, complex *q)
d280 1
a280 1
	float dw,fw,tmax,w,tau,phase,coss;
d294 3
a341 1
				pp[iw] = cmul(pp[iw],cshift);
d343 10
d367 1
@


1.16
log
@changes suggested by Stew Levin to silence SGI compiler warnings, etc
@
text
@d1 1
a1 1
/* SUGAZMIG: $Revision: 1.15 $ ; $Date: 1996/09/17 18:41:22 $	    */
d244 1
a244 1
	return EXIT_SUCCESS;	
@


1.15
log
@Added tmpdir stuff.
@
text
@d1 1
a1 1
/* SUGAZMIG: $Revision: 1.14 $ ; $Date: 1996/02/21 23:39:07 $	    */
d101 1
a101 1
	cwp_Bool istmpdir=false;/* true for user-given path		*/
d161 1
a161 1
      		istmpdir=true;		
@


1.14
log
@Using two argument CHECK_NT macro to check the relevant time sample
quantity.
@
text
@d1 1
a1 1
/* SUGAZMIG: $Revision: 1.13 $ ; $Date: 1996/02/21 23:00:26 $	    */
d6 1
d27 7
a56 2
segy tr;

d62 9
a71 1
/* the main program */
d99 3
a101 3

	FILE *tracefp;		/* fp for trace storage */
	FILE *headerfp;		/* fp for header storage file	   */
d135 8
d145 20
a164 2
	tracefp = etmpfile();
	headerfp = etmpfile();
d239 5
d347 10
@


1.13
log
@Using CHECK_NT(ntau) macro.
@
text
@d1 1
a1 1
/* SUGAZMIG: $Revision: 1.12 $ ; $Date: 1996/01/25 20:13:44 $	    */
d118 1
a118 1
	if (!getparint("ntau",&ntau)) ntau = nt; CHECK_NT(ntau);
@


1.12
log
@Deal with specifying header fields accessed/modified in sudoc.
@
text
@d1 1
a1 1
/* SUGAZMIG: $Revision: 1.11 $ ; $Date: 1995/09/27 17:13:58 $	    */
d58 1
a66 1
	int np;			/* number of data values */	
a85 1
	FILE *vfp;		/* velocity file pointer */
d118 1
a118 1
	if (!getparint("ntau",&ntau)) ntau = nt;
@


1.11
log
@added return EXIT_SUCCESS at the end of main
@
text
@d1 1
a1 1
/* SUGAZMIG: $Revision: 1.10 $ ; $Date: 1995/09/27 15:06:56 $	    */
d43 3
@


1.10
log
@Added EXIT_SUCESS at end
@
text
@d1 1
a1 1
/* SUGAZMIG: $Revision: 1.9 $ ; $Date: 1995/08/02 20:01:19 $	    */
d197 1
a197 1

a299 1
	return EXIT_SUCCESS;	
@


1.9
log
@Cast the integers tr.dt and/or tr.delrt and/or clones to double before
division with floating constant (which is implicitly double
precision).  Casting is needed to make some compilers happy and if we
cast to float then there will be an extra conversion to double because
of the floating constant (casting to float and writing 1000000.0F
would save a conversion, but most people find that F yucky and
efficiency is not an issue here).
Motivated by examples from Stew Levin.
@
text
@d1 1
a1 1
/* SUGAZMIG: $Revision: 1.8 $ ; $Date: 1994/08/25 14:59:31 $	    */
d299 2
@


1.8
log
@Removed copyright statement from codes that had it.
Moved self-doc line for sudoc.
@
text
@d1 1
a1 1
/* SUGAZMIG: $Revision: 1.7 $ ; $Date: 93/11/24 15:36:23 $	    */
d98 1
a98 1
			dt = (float) tr.dt / 1000000.0;
@


1.7
log
@added explicit casts in memcpy
@
text
@d1 1
a1 1
/* SUGAZMIG: $Revision: 1.6 $ ; $Date: 92/10/28 16:09:01 $	    */
a2 13
/*----------------------------------------------------------------------
 * Copyright (c) Colorado School of Mines, 1990.
 * All rights reserved.
 *
 * This code is part of SU.  SU stands for Seismic Unix, a processing line
 * developed at the Colorado School of Mines, partially based on Stanford
 * Exploration Project (SEP) software.  Inquiries should be addressed to:
 *
 *  Jack K. Cohen, Center for Wave Phenomena, Colorado School of Mines,
 *  Golden, CO 80401  (jkc@@dix.mines.colorado.edu)
 *----------------------------------------------------------------------
 */

a37 1
/**************** end self doc ********************************/
d44 1
d59 1
a59 1
	int nx;		/* number of midpoints 	*/
@


1.6
log
@added begin/end selfdoc  lines
@
text
@d1 1
a1 1
/* SUGAZMIG: $Revision: 1.5 $ ; $Date: 92/10/22 15:35:30 $	    */
d206 1
a206 1
		memcpy(tr.data,q[ix],ntau*FSIZE);
@


1.5
log
@new doc installed.
@
text
@d1 1
a1 1
/* SUGAZMIG: $Revision: 1.4 $ ; $Date: 92/10/13 10:09:34 $	    */
d20 1
d39 1
a39 1
"Note: ray bending effects not accounted for in this version.		",
d41 4
a44 4
"The tmig and vmig arrays specify an interval velocity function of time.",
"Linear interpolation and constant extrapolation is used to determine	",
"interval velocities at times not specified.  Values specified in tmig	",
"must increase monotonically.						",
d46 3
a48 3
"Alternatively, interval velocities may be stored in a binary file	",
"containing one velocity for every time sample in the data that is to be",
"migrated.  If vfile is specified, then the tmig and vmig arrays are ignored.",
d51 2
@


1.4
log
@another cosmetic change
@
text
@d1 1
a1 1
/* SUGAZMIG: $Revision: 1.3 $ ; $Date: 92/10/13 09:45:59 $	    */
d20 30
a49 30
char *sdoc =
"									\n"
" SUGAZMIG - SU version of Jeno GAZDAG's phase-shift migration 		\n"
"	     for zero-offset data.					\n"
"									\n"
" sugazmig <infile >outfile vfile= [optional parameters]		\n"
"									\n"
" Optional Parameters:							\n"
" dt=from header(dt) or	.004	time sampling interval			\n"
" dx=from header(d2) or 1.0	midpoint sampling interval		\n"
" ft=0.0			first time sample			\n"
" ntau=nt(from data)	number of migrated time samples			\n"
" dtau=dt(from header)	migrated time sampling interval			\n"
" ftau=ft		first migrated time sample			\n"
" tmig=0.0		times corresponding to interval velocities in vmig\n"
" vmig=1500.0		interval velocities corresponding to times in tmig\n"
" vfile=		name of file containing velocities		\n"
"									\n"
"Note: ray bending effects not accounted for in this version.		\n"
"									\n"
"The tmig and vmig arrays specify an interval velocity function of time.\n"
"Linear interpolation and constant extrapolation is used to determine	\n"
"interval velocities at times not specified.  Values specified in tmig	\n"
"must increase monotonically.						\n"
"									\n"
"Alternatively, interval velocities may be stored in a binary file	\n"
"containing one velocity for every time sample in the data that is to be\n"
"migrated.  If vfile is specified, then the tmig and vmig arrays are ignored.\n"
"									\n"
"\n";
d99 1
a99 1
	askdoc(1);
@


1.3
log
@another cosmetic change
@
text
@d1 1
a1 1
/* SUGAZMIG: $Revision: 1.2 $ ; $Date: 92/10/13 08:53:34 $	    */
d37 2
@


1.2
log
@cosmetic change in selfdoc
@
text
@d1 1
a1 1
/* SUGAZMIG: $Revision: 1.1 $ ; $Date: 92/10/12 13:53:40 $	    */
d31 3
a33 3
" ntau=nt(from data)		number of migrated time samples		\n"
" dtau=dt(from header)		migrated time sampling interval		\n"
" ftau=ft			first migrated time sample		\n"
d44 2
a45 2
"containing one velocity for every time sample.  If vfile is specified,	\n"
"then the tmig and vmig arrays are ignored.				\n"
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/* SUGAZMIG: $Revision: 1.8 $ ; $Date: 91/10/09 14:27:18 $	    */
d22 2
a23 2
" SUGAZMIG - SU version Jeno GAZDAG's phase-shift migration for zero-offset\n"
"	    data.							\n"
d82 1
a82 1
	float *tmig, *vmig;	
@
