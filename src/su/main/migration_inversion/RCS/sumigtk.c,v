head	1.17;
access;
symbols;
locks; strict;
comment	@ * @;


1.17
date	2011.11.16.22.14.43;	author john;	state Exp;
branches;
next	1.16;

1.16
date	2011.11.12.00.21.33;	author john;	state Exp;
branches;
next	1.15;

1.15
date	2008.05.19.17.08.22;	author john;	state Exp;
branches;
next	1.14;

1.14
date	2008.05.16.17.11.18;	author john;	state Exp;
branches;
next	1.13;

1.13
date	2003.06.09.16.17.07;	author john;	state Exp;
branches;
next	1.12;

1.12
date	97.07.28.22.36.46;	author john;	state Exp;
branches;
next	1.11;

1.11
date	96.09.18.15.44.38;	author jkc;	state Exp;
branches;
next	1.10;

1.10
date	96.09.13.21.49.05;	author john;	state Exp;
branches;
next	1.9;

1.9
date	96.01.30.15.50.56;	author jkc;	state Exp;
branches;
next	1.8;

1.8
date	95.08.02.20.46.47;	author jkc;	state Exp;
branches;
next	1.7;

1.7
date	94.08.25.15.00.04;	author jkc;	state Exp;
branches;
next	1.6;

1.6
date	93.11.29.14.35.48;	author john;	state Exp;
branches;
next	1.5;

1.5
date	93.11.24.15.51.26;	author john;	state Exp;
branches;
next	1.4;

1.4
date	92.10.26.13.52.32;	author john;	state Exp;
branches;
next	1.3;

1.3
date	91.09.05.08.51.08;	author jkcohen;	state Exp;
branches;
next	1.2;

1.2
date	91.03.27.17.25.16;	author dhale;	state Exp;
branches;
next	1.1;

1.1
date	91.03.27.17.23.22;	author dhale;	state Exp;
branches;
next	;


desc
@reverse-time migration in t,k domain using Li's coordinate transformation
@


1.17
log
@added Reg Beardsley checkpar()
@
text
@/* Copyright (c) Colorado School of Mines, 2011.*/
/* All rights reserved.                       */

/* SUMIGTK: $Revision: 1.15 $ ; $Date: 2008/05/19 17:08:22 $		*/

#include "su.h"
#include "segy.h"
#include "header.h"
#include <signal.h>

/*********************** self documentation ******************************/
char *sdoc[] = {
"									",
" SUMIGTK - MIGration via T-K domain method for common-midpoint stacked data",
"									",
" sumigtk <stdin >stdout dxcdp= [optional parms]			",
"									",
" Required Parameters:							",
" dxcdp                   distance between successive cdps		",
"									",
" Optional Parameters:							",
" fmax=Nyquist            maximum frequency				",
" tmig=0.0                times corresponding to interval velocities in vmig",
" vmig=1500.0             interval velocities corresponding to times in tmig",
" vfile=                  binary (non-ascii) file containing velocities v(t)",
" nxpad=0                 number of cdps to pad with zeros before FFT	",
" ltaper=0                length of linear taper for left and right edges", 
" verbose=0               =1 for diagnostic print			",
"									",
" tmpdir= 	 if non-empty, use the value as a directory path	",
"		 prefix for storing temporary files; else if the	",
"	         the CWP_TMPDIR environment variable is set use		",
"	         its value for the path; else use tmpfile()		",
" 									",
" Notes:								",
" Input traces must be sorted by either increasing or decreasing cdp.	",
" 									",
" The tmig and vmig arrays specify an interval velocity function of time.",
" Linear interpolation and constant extrapolation is used to determine	",
" interval velocities at times not specified.  Values specified in tmig	",
" must increase monotonically.						",
"									",
" Alternatively, interval velocities may be stored in a binary file	",
" containing one velocity for every time sample.  If vfile is specified,",
" then the tmig and vmig arrays are ignored.				",
"									",
" The time of first sample is assumed to be zero, regardless of the value",
" of the trace header field delrt.					",
" 									",
" The migration is a reverse time migration in the (t,k) domain. In the	",
" first step, the data g(t,x) are Fourier transformed x->k into the	",	
" the time-wavenumber domain g(t,k).					",
"									",
" Then looping over wavenumbers, the data are then reverse-time		",
" finite-difference migrated, wavenumber by wavenumber.  The resulting	",
" migrated data m(tau,k), now in the tau (migrated time) and k domain,	",
" are inverse fourier transformed back into m(tau,xout) and written out.",	
"									",
NULL};

/* Credits:
 *	CWP: Dave Hale
 *
 * Trace header fields accessed:  ns and dt
 */
/**************** end self doc *******************************************/

void mig1k (float k, float fmax, float speed, int nt, float dt, 
	float *v, complex *p, complex *q);
static void closefiles(void);

/* Globals (so can trap signal) defining temporary disk files */
char tracefile[BUFSIZ];	/* filename for the file of traces	*/
char headerfile[BUFSIZ];/* filename for the file of headers	*/
FILE *tracefp;		/* fp for trace storage file		*/
FILE *headerfp;		/* fp for header storage file		*/

segy tr;

int
main(int argc, char **argv)
{
	int nt,nx,nxfft,nxpad,ix,it,nk,ik,
		ltaper,ntmig,nvmig,itmig,verbose;
	float dt,dx,dk,taper,t,k,fftscl,fmax,speed,
		*tmig,*vmig,*vt,**gtx;
	complex **gtk;
	char *vfile="";
	char *tmpdir;		/* directory path for tmp files		*/
	cwp_Bool istmpdir=cwp_false;/* true for user-given path		*/

	/* hook up getpar */
	initargs(argc, argv);
	requestdoc(1);

	/* get information from the first header */
	if (!gettr(&tr)) err("can't get first trace");
	nt = tr.ns;
	dt = ((double) tr.dt)/1000000.0;

	/* get parameters */
	if (!getparfloat("dxcdp",&dx)) err("must specify dxcdp");
	if (!getparfloat("fmax",&fmax)) fmax=0.5/dt;
	if (!getparint("nxpad",&nxpad)) nxpad=0;
	if (!getparint("ltaper",&ltaper)) ltaper=0;
	if (!getparfloat("speed",&speed)) speed=1.0;
	if (!getparint("verbose",&verbose)) verbose=0;
	
	/* look for user-supplied tmpdir */
	if (!getparstring("tmpdir",&tmpdir) &&
	    !(tmpdir = getenv("CWP_TMPDIR"))) tmpdir="";
	if (!STREQ(tmpdir, "") && access(tmpdir, WRITE_OK))
		err("you can't write in %s (or it doesn't exist)", tmpdir);

	/* determine velocity function v(t) */
	vt = ealloc1float(nt);
	if (!getparstring("vfile",&vfile)) {
		ntmig = countparval("tmig");
		if (ntmig==0) ntmig = 1;
		tmig = ealloc1float(ntmig);
		if (!getparfloat("tmig",tmig)) tmig[0] = 0.0;
		nvmig = countparval("vmig");
		if (nvmig==0) nvmig = 1;
		if (nvmig!=ntmig) err("number of tmig and vmig must be equal");
		vmig = ealloc1float(nvmig);
		if (!getparfloat("vmig",vmig)) vmig[0] = 1500.0;
		for (itmig=1; itmig<ntmig; ++itmig)
			if (tmig[itmig]<=tmig[itmig-1])
				err("tmig must increase monotonically");
		for (it=0,t=0.0; it<nt; ++it,t+=dt)
			intlin(ntmig,tmig,vmig,vmig[0],vmig[ntmig-1],
				1,&t,&vt[it]);
	} else {
		if (efread(vt,sizeof(float),nt,fopen(vfile,"r"))!=nt)
			err("cannot read %d velocities from file %s",nt,vfile);
	}
	
        checkpars();

	/* copy traces and headers to temporary files */
	if (STREQ(tmpdir,"")) {
		tracefp = etmpfile();
		headerfp = etmpfile();
		if (verbose) warn("using tmpfile() call");
	} else { /* user-supplied tmpdir */
		char directory[BUFSIZ];
		strcpy(directory, tmpdir);
		strcpy(tracefile, temporary_filename(directory));
		strcpy(headerfile, temporary_filename(directory));
		/* Trap signals so can remove temp files */
		signal(SIGINT,  (void (*) (int)) closefiles);
		signal(SIGQUIT, (void (*) (int)) closefiles);
		signal(SIGHUP,  (void (*) (int)) closefiles);
		signal(SIGTERM, (void (*) (int)) closefiles);
		tracefp = efopen(tracefile, "w+");
		headerfp = efopen(headerfile, "w+");
      		istmpdir=cwp_true;		
		if (verbose) warn("putting temporary files in %s", directory);
	}

	/* count the traces */
	nx = 0;
	do {
		nx++;
		efwrite(&tr,HDRBYTES,1,headerfp);
		efwrite(tr.data,sizeof(float),nt,tracefp);
	} while(gettr(&tr));
	erewind(headerfp);
	erewind(tracefp);
	if (verbose) fprintf(stderr,"\t%d traces input\n",nx);
	
	/* determine wavenumber sampling */
	nxfft = npfaro(nx+nxpad,2*(nx+nxpad));
	nk = nxfft/2+1;
	dk = 2.0*PI/(nxfft*dx);

	/* allocate space for Fourier transform */
	gtk = ealloc2complex(nt,nk);
	gtx = ealloc1(nxfft,sizeof(float*));
	for (ix=0; ix<nxfft; ++ix)
		gtx[ix] = (float*)gtk[0]+ix*nt;

	/* read and apply fft scaling to traces and pad with zeros */
	fftscl = 1.0/nxfft;
	for (ix=0; ix<nx; ++ix) {
		efread(gtx[ix],sizeof(float),nt,tracefp);
		for (it=0; it<nt; ++it)
			gtx[ix][it] *= fftscl;
		if (ix<ltaper) {
			taper = (float)(ix+1)/(float)(ltaper+1);
			for (it=0; it<nt; ++it)
				gtx[ix][it] *= taper;
		} else if (ix>=nx-ltaper) {
			taper = (float)(nx-ix)/(float)(ltaper+1);
			for (it=0; it<nt; ++it)
				gtx[ix][it] *= taper;
		}
	}
	for (ix=nx; ix<nxfft; ++ix)
		for (it=0; it<nt; ++it)
			gtx[ix][it] = 0.0;
	
	/* Fourier transform g(t,x) to g(t,k) */
	pfa2rc(-1,2,nt,nxfft,gtx[0],gtk[0]);
	if (verbose) fprintf(stderr,"\tFourier transform done\n");
	
	/* loop over wavenumbers */
	for (ik=0,k=0.0; ik<nk; ++ik,k+=dk) {
	
		/* report */
		if (verbose && ik%(nk/10>0?nk/10:1)==0)
			fprintf(stderr,"\t%d of %d wavenumbers done\n",
				ik,nk);
		
		/* migrate */
		mig1k(k,fmax,speed,nt,dt,vt,gtk[ik],gtk[ik]);
	}
	
	/* Fourier transform g(t,k) to g(t,x) */
	pfa2cr(1,2,nt,nxfft,gtk[0],gtx[0]);
	if (verbose) fprintf(stderr,"\tinverse Fourier transform done\n");
	
	/* output migrated traces with headers */
	for (ix=0; ix<nx; ++ix) {
		efread(&tr,HDRBYTES,1,headerfp);
		memcpy( (void *) tr.data,
				(const void *) gtx[ix], nt*sizeof(float));
		puttr(&tr);
	}

	/* clean up */
	efclose(headerfp);
	if (istmpdir) eremove(headerfile);
	efclose(tracefp);
	if (istmpdir) eremove(tracefile);

	return(CWP_Exit());
}

void mig1k (float k, float fmax, float speed, int nt, float dt, 
	float *v, complex *p, complex *q)
/*****************************************************************************
migration in t-k domain for one wavenumber
******************************************************************************
Input:
k		wavenumber
fmax		maximum frequency
speed		speed parameter - >>1.0 for lots of dispersion
nt		number of time samples
dt		time sampling interval
v		array[nt] containing interval velocities v(t)
p		array[nt] containing input p(t;k)

Output:
q		array[nt] containing migrated q(t;k)
******************************************************************************
Author:  Dave Hale, Colorado School of Mines, 11/05/90
*****************************************************************************/
{
	int nfac=5,ns,is,it,i1,i2,i1stop;
	float fac=0.75,ds,g00r,g00i,g01r,g01i,g10r,g10i,g11r,g11i,
		temp,vmin,vmax,ct,
		*vs,*cs,*cp,*grp,*gip;
	complex czero=cmplx(0.0,0.0),*gs;
	
	/* determine time sampling to avoid excessive grid dispersion */
	for (it=1,vmin=vmax=v[0]; it<nt; ++it) {
		if (v[it]<vmin) vmin = v[it];
		if (v[it]>vmax) vmax = v[it];
	}
	if (k!=0.0) {
		ds = fac*MAX(0.4*PI/ABS(vmax*k),0.1*vmin/(vmax*fmax));
		ds *= speed;
		ds = MIN(ds,dt);
	} else {
		ds = dt;
	}
	ns = 1+(nt-1)*dt/ds;
	ns = MIN(ns,nfac*nt);
	ds = (nt-1)*dt/(ns-1);
	fprintf(stderr,"ns=%d\n",ns);
	
	/* allocate workspace */
	vs = ealloc1float(ns);
	cs = ealloc1float(ns*2);
	gs = ealloc1complex(ns);
	
	/* resample v(t) and p(t) */
	ress8r(nt,dt,0.0,v,v[0],v[nt-1],ns,ds,0.0,vs);
	ress8c(nt,dt,0.0,p,czero,czero,ns,ds,0.0,gs);

        /* compute finite-difference coefficients */
	for (is=0; is<ns; is++) {
		temp = 0.125*vs[is]*k*ds;
		temp = temp*temp;
		temp = (1.0-temp)/(1.0+temp);
		cs[2*is] = cs[2*is+1] = temp;
	}

	/* loop over t2 = (tau-t)/sqrt(2) */
	for (i2=2-ns; i2<ns; i2++) {

		/* determine t1 stop index */
		i1stop = (i2<=0)?1-i2:i2;

		/* initialize finite-difference star and coefficient */
		g00r = g00i = g01r = g01i = 0.0;
		grp = (float*)(&gs[ns-1]);
		gip = grp+1;
		cp = &cs[i2+ns-2];
		ct = *cp--;

		/* loop over t1 = (tau+t)/sqrt(2) */
		for (i1=ns-1; i1>=i1stop; i1--) {

			/* update real part */
			g10r = g00r;
			g11r = g01r;
			g00r = *grp;
			*grp = g01r = ct*(g11r+g00r)-g10r;

			/* update imaginary part */
			g10i = g00i;
			g11i = g01i;
			g00i = *gip;
			*gip = g01i = ct*(g11i+g00i)-g10i;

			/* update pointers and finite-difference coefficient */
			grp -= 2; gip -= 2;
			ct = *cp--;
		}
	}
	
	/* resample q(t) */
	ress8c(ns,ds,0.0,gs,czero,czero,nt,dt,0.0,q);
	
	/* free workspace */
	free1float(vs);
	free1float(cs);
	free1complex(gs);
}

/* for graceful interrupt termination */
static void closefiles(void)
{
	efclose(headerfp);
	efclose(tracefp);
	eremove(headerfile);
	eremove(tracefile);
	exit(EXIT_FAILURE);
}
@


1.16
log
@copyright
@
text
@d138 2
@


1.15
log
@selfdoc
@
text
@d1 4
a4 1
/* SUMIGTK: $Revision: 1.14 $ ; $Date: 2008/05/16 17:11:18 $		*/
@


1.14
log
@added description of the algorithm.
@
text
@d1 1
a1 1
/* SUMIGTK: $Revision: 1.13 $ ; $Date: 2003/06/09 16:17:07 $		*/
d54 1
a54 1
" are inverse fourier transformed back into (tau,x) and written out.	",
@


1.13
log
@9 June 2003
@
text
@d1 1
a1 1
/* SUMIGTK: $Revision: 1.12 $ ; $Date: 1997/07/28 22:36:46 $		*/
d46 10
@


1.12
log
@changes suggested by Stew Levin to silence SGI compiler warnings, etc
@
text
@d1 1
a1 1
/* SUMIGTK: $Revision: 1.11 $ ; $Date: 1996/09/18 15:44:38 $		*/
d222 1
a222 1
	return EXIT_SUCCESS;
@


1.11
log
@Did tmpfile stuff.
@
text
@d1 1
a1 1
/* SUMIGTK: $Revision: 1.10 $ ; $Date: 1996/09/13 21:49:05 $		*/
d77 1
a77 1
	cwp_Bool istmpdir=false;/* true for user-given path		*/
d142 1
a142 1
      		istmpdir=true;		
@


1.10
log
@silenced -Wall messages
@
text
@d1 1
a1 1
/* SUMIGTK: $Revision: 1.9 $ ; $Date: 1996/01/30 15:50:56 $		*/
d6 1
d27 5
d57 7
d76 2
a77 1
	FILE *hfp,*tfp;
d96 6
d121 1
a121 1
		if (fread(vt,sizeof(float),nt,fopen(vfile,"r"))!=nt)
d126 21
a146 2
	tfp = tmpfile();
	hfp = tmpfile();
d150 2
a151 2
		fwrite(&tr,HDRBYTES,1,hfp);
		fwrite(tr.data,sizeof(float),nt,tfp);
d153 2
a154 2
	fseek(hfp,0L,SEEK_SET);
	fseek(tfp,0L,SEEK_SET);
d171 1
a171 1
		efread(gtx[ix],sizeof(float),nt,tfp);
d210 1
a210 1
		efread(&tr,HDRBYTES,1,hfp);
d216 6
d326 10
@


1.9
log
@Deal with header fields accessed/modified in sudoc.
@
text
@d1 1
a1 1
/* SUMIGTK: $Revision: 1.8 $ ; $Date: 1995/08/02 20:46:47 $		*/
d54 1
@


1.8
log
@Cast the integers tr.dt and/or tr.delrt and/or clones to double before
division with floating constant (which is implicitly double
precision).  Casting is needed to make some compilers happy and if we
cast to float then there will be an extra conversion to double because
of the floating constant (casting to float and writing 1000000.0F
would save a conversion, but most people find that F yucky and
efficiency is not an issue here).
Motivated by examples from Stew Levin.
@
text
@d1 1
a1 1
/* SUMIGTK: $Revision: 1.7 $ ; $Date: 1994/08/25 15:00:04 $		*/
a39 3
"									",
" Trace header fields accessed:  ns and dt				",
"									",
d44 2
@


1.7
log
@Removed copyright statement from codes that had it.
Moved self-doc line for sudoc.
@
text
@d1 1
a1 1
/* SUMIGTK: $Revision: 1.6 $ ; $Date: 93/11/29 14:35:48 $		*/
d72 1
a72 1
	dt = (int) tr.dt/1000000.0;
@


1.6
log
@changed bcopy to memcpy
@
text
@d1 1
a1 1
/* SUMIGTK: $Revision: 1.5 $ ; $Date: 93/11/24 15:51:26 $		*/
a2 13
/*----------------------------------------------------------------------
 * Copyright (c) Colorado School of Mines, 1990.
 * All rights reserved.
 *
 * This code is part of SU.  SU stands for Seismic Unix, a processing line
 * developed at the Colorado School of Mines, partially based on Stanford
 * Exploration Project (SEP) software.  Inquiries should be addressed to:
 *
 *  Jack K. Cohen, Center for Wave Phenomena, Colorado School of Mines,
 *  Golden, CO 80401  (jkc@@dix.mines.colorado.edu)
 *----------------------------------------------------------------------
 */

a43 1
/**************** end self doc *******************************************/
d48 1
@


1.5
log
@added explicit cast
@
text
@d1 1
a1 1
/* SUMIGTK: $Revision: 1.4 $ ; $Date: 92/10/26 13:52:32 $		*/
d185 2
a186 1
		bcopy(gtx[ix],tr.data,nt*sizeof(float));
@


1.4
log
@new selfdoc installed
@
text
@d1 1
a1 1
/* SUMIGTK: $Revision: 1.3 $ ; $Date: 91/09/05 08:51:08 $		*/
d85 1
a85 1
	dt = tr.dt/1000000.0;
@


1.3
log
@string -> String and so forth
@
text
@d1 1
a1 1
/* SUMIGTK: $Revision: 1.6 $ ; $Date: 90/06/14 14:38:34 $		*/
d21 36
a56 35
String sdoc =
"\n"
"SUMIGTK - MIGration via T-K domain method for common-midpoint stacked data\n"
"\n"
"sumigtk <stdin >stdout dxcdp= [optional parms]\n"
"\n"
"Required Parameters:\n"
"dxcdp                   distance between successive cdps\n"
"\n"
"Optional Parameters:\n"
"fmax=Nyquist            maximum frequency\n"
"tmig=0.0                times corresponding to interval velocities in vmig\n"
"vmig=1500.0             interval velocities corresponding to times in tmig\n"
"vfile=                  binary (non-ascii) file containing velocities v(t)\n"
"nxpad=0                 number of cdps to pad with zeros before FFT\n"
"ltaper=0                length of linear taper for left and right edges\n" 
"verbose=0               =1 for diagnostic print\n"
"\n"
"Notes:\n"
"Input traces must be sorted by either increasing or decreasing cdp.\n"
"\n"
"The tmig and vmig arrays specify an interval velocity function of time.\n"
"Linear interpolation and constant extrapolation is used to determine\n"
"interval velocities at times not specified.  Values specified in tmig\n"
"must increase monotonically.\n"
"\n"
"Alternatively, interval velocities may be stored in a binary file\n"
"containing one velocity for every time sample.  If vfile is specified,\n"
"then the tmig and vmig arrays are ignored.\n"
"\n"
"The time of first sample is assumed to be zero, regardless of the value\n"
"of the trace header field delrt.\n"
"\n"
"Trace header fields accessed:  ns and dt\n"
"\n";
d60 1
a60 1
 *	CWP: Dave
d80 1
a80 1
	askdoc(1);
@


1.2
log
@optimized recursive inner loop for RS/6000
@
text
@d21 1
a21 1
string sdoc =
a63 1
void recur (int n, float *c, complex *p, complex *q);
d211 6
a216 4
	int nfac=5,ns,is,it,i2,i1stop;
	float fac=0.75,ds,temp,vmin,vmax,ct,*vs,*cs;
	complex czero=cmplx(0.0,0.0),*gs,*as,*bs,*temps;

d232 1
a232 1
	/* fprintf(stderr,"ns=%d\n",ns); */
a237 2
	as = ealloc1complex(ns);
	bs = ealloc1complex(ns);
d252 1
a252 1
	for (i2=2-ns; i2<ns; i2++,temps=as,as=bs,bs=temps) {
d257 6
d264 2
a265 2
		/* get input data */
		if (i2<=0) as[i1stop] = gs[i1stop];
d267 5
a271 2
		/* recursive loop over t1 = (tau+t)/sqrt(2) */
		recur (ns-i1stop,&cs[i2+i1stop-1],&as[i1stop],&bs[i1stop]);
d273 10
a282 2
		/* put migrated data */
		if (i2>0) gs[i1stop] = bs[i1stop];
a291 89
	free1complex(as);
	free1complex(bs);
}

void recur (int n, float *c, complex *p, complex *q)
{
	int i;
	float c1,c2,c3,c4,c5,c6,c7,c8,
		p0r,p1r,p2r,p3r,p4r,p5r,p6r,p7r,p8r,
		q0r,q1r,q2r,q3r,q4r,q5r,q6r,q7r,q8r,
		p0i,p1i,p2i,p3i,p4i,p5i,p6i,p7i,p8i,
		q0i,q1i,q2i,q3i,q4i,q5i,q6i,q7i,q8i;

	q[n-1].r = c[n-1]*p[n-1].r;
	q[n-1].i = c[n-1]*p[n-1].i;
	for (i=n-1; i>=8; i-=8) {
		p0r = p[i].r;
		q0r = q[i].r;
		p0i = p[i].i;
		q0i = q[i].i;

		c1 = c[i-1];
		p1r = p[i-1].r;
		q1r = c1*(q0r+p1r)-p0r;
		p1i = p[i-1].i;
		q1i = c1*(q0i+p1i)-p0i;

		c2 = c[i-2];
		p2r = p[i-2].r;
		q2r = c2*(q1r+p2r)-p1r;
		q[i-1].r = q1r;
		p2i = p[i-2].i;
		q2i = c2*(q1i+p2i)-p1i;
		q[i-1].i = q1i;

		c3 = c[i-3];
		p3r = p[i-3].r;
		q3r = c3*(q2r+p3r)-p2r;
		q[i-2].r = q2r;
		p3i = p[i-3].i;
		q3i = c3*(q2i+p3i)-p2i;
		q[i-2].i = q2i;

		c4 = c[i-4];
		p4r = p[i-4].r;
		q4r = c4*(q3r+p4r)-p3r;
		q[i-3].r = q3r;
		p4i = p[i-4].i;
		q4i = c4*(q3i+p4i)-p3i;
		q[i-3].i = q3i;

		c5 = c[i-5];
		p5r = p[i-5].r;
		q5r = c5*(q4r+p5r)-p4r;
		q[i-4].r = q4r;
		p5i = p[i-5].i;
		q5i = c5*(q4i+p5i)-p4i;
		q[i-4].i = q4i;

		c6 = c[i-6];
		p6r = p[i-6].r;
		q6r = c6*(q5r+p6r)-p5r;
		q[i-5].r = q5r;
		p6i = p[i-6].i;
		q6i = c6*(q5i+p6i)-p5i;
		q[i-5].i = q5i;

		c7 = c[i-7];
		p7r = p[i-7].r;
		q7r = c7*(q6r+p7r)-p6r;
		q[i-6].r = q6r;
		p7i = p[i-7].i;
		q7i = c7*(q6i+p7i)-p6i;
		q[i-6].i = q6i;

		c8 = c[i-8];
		p8r = p[i-8].r;
		q8r = c8*(q7r+p8r)-p7r;
		q[i-7].r = q7r;
		p8i = p[i-8].i;
		q8i = c8*(q7i+p8i)-p7i;
		q[i-7].i = q7i;
		q[i-8].r = q8r;
		q[i-8].i = q8i;
	}
	for (; i>0; i--) {
		q[i-1].r = c[i-1]*(q[i].r+p[i-1].r)-p[i].r;
		q[i-1].i = c[i-1]*(q[i].i+p[i-1].i)-p[i].i;
	}
@


1.1
log
@Initial revision
@
text
@d64 1
d212 4
a215 6
	int nfac=5,ns,is,it,i1,i2,i1stop;
	float fac=0.75,ds,g00r,g00i,g01r,g01i,g10r,g10i,g11r,g11i,
		temp,vmin,vmax,ct,
		*vs,*cs,*cp,*grp,*gip;
	complex czero=cmplx(0.0,0.0),*gs;
	
d237 2
d253 1
a253 1
	for (i2=2-ns; i2<ns; i2++) {
a257 6
		/* initialize finite-difference star and coefficient */
		g00r = g00i = g01r = g01i = 0.0;
		grp = (float*)(&gs[ns-1]);
		gip = grp+1;
		cp = &cs[i2+ns-2];
		ct = *cp--;
d259 2
a260 2
		/* loop over t1 = (tau+t)/sqrt(2) */
		for (i1=ns-1; i1>=i1stop; i1--) {
d262 2
a263 5
			/* update real part */
			g10r = g00r;
			g11r = g01r;
			g00r = *grp;
			*grp = g01r = ct*(g11r+g00r)-g10r;
d265 2
a266 10
			/* update imaginary part */
			g10i = g00i;
			g11i = g01i;
			g00i = *gip;
			*gip = g01i = ct*(g11i+g00i)-g10i;

			/* update pointers and finite-difference coefficient */
			grp -= 2; gip -= 2;
			ct = *cp--;
		}
d276 89
@
