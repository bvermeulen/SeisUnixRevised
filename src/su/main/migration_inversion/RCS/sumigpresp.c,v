head	1.19;
access;
symbols;
locks; strict;
comment	@ * @;


1.19
date	2011.11.16.22.14.43;	author john;	state Exp;
branches;
next	1.18;

1.18
date	2011.11.12.00.21.33;	author john;	state Exp;
branches;
next	1.17;

1.17
date	2010.01.27.21.51.34;	author john;	state Exp;
branches;
next	1.16;

1.16
date	2008.12.01.18.19.14;	author john;	state Exp;
branches;
next	1.15;

1.15
date	2008.10.30.21.42.34;	author john;	state Exp;
branches;
next	1.14;

1.14
date	2006.12.13.16.55.11;	author john;	state Exp;
branches;
next	1.13;

1.13
date	2006.11.07.22.58.42;	author john;	state Exp;
branches;
next	1.12;

1.12
date	2006.10.31.22.00.42;	author john;	state Exp;
branches;
next	1.11;

1.11
date	2006.10.17.18.59.13;	author john;	state Exp;
branches;
next	1.10;

1.10
date	2006.09.28.23.53.59;	author john;	state Exp;
branches;
next	1.9;

1.9
date	2005.12.22.00.54.17;	author john;	state Exp;
branches;
next	1.8;

1.8
date	2005.04.20.16.37.22;	author john;	state Exp;
branches;
next	1.7;

1.7
date	2004.12.23.23.55.02;	author john;	state Exp;
branches;
next	1.6;

1.6
date	2003.08.19.17.31.42;	author john;	state Exp;
branches;
next	1.5;

1.5
date	2003.06.09.16.17.07;	author john;	state Exp;
branches;
next	1.4;

1.4
date	2000.09.25.20.38.38;	author john;	state Exp;
branches;
next	1.3;

1.3
date	2000.09.22.19.34.16;	author john;	state Exp;
branches;
next	1.2;

1.2
date	98.05.04.18.16.33;	author john;	state Exp;
branches;
next	1.1;

1.1
date	98.05.04.18.08.16;	author john;	state Exp;
branches;
next	;


desc
@sumigpresp - prestack split-step migration
@


1.19
log
@added Reg Beardsley checkpar()
@
text
@/* Copyright (c) Colorado School of Mines, 2011.*/
/* All rights reserved.                       */

/* SUMIGPRESP: $Vision: 1.00 $ ; $Date: 2010/01/27 21:51:34 $*/

#include "su.h"
#include "segy.h"
#include "header.h"
#include <signal.h>


/*********************** self documentation ******************************/
char *sdoc[] = {
"									",
" SUMIGPRESP - The 2-D prestack common-shot split-step Fourier		", 
"		migration 						",
"									",
"   sumigpresp <indata >outfile [parameters]				", 
"									",
" Required Parameters:							",
" nxo=	   number of total horizontal output samples			",
" nxshot=	number of shot gathers to be migrated			",
" nz=	    number of depth sapmles					",
" dx=	    horizontal sampling interval				",
" dz=	    depth sampling interval					",
" vfile=	 velocity profile, it must be binary format.		",
"									",  
" Optional Parameters:						   	",
" fmax=25	The peak frequency of Ricker wavelet used as source wavelet",
" f1=5,f2=10,f3=40,f4=50	 frequencies to build a Hamming window	",
" lpad=9999,rpad=9999	    number of zero traces padded on both    	",
"				sides of depth section to determine the ",
"				migration aperature, the default values ",
"				are using the full aperature.		",
" verbose=0             silent, =1 additional runtime information       ",
"									",  
" Notes:								",
" The input velocity file consists of C-style binary floats.	    	",
" The structure of this file is vfile[iz][ix]. Note that this means that",
" the x-direction is the fastest direction instead of z-direction! Such a",
" structure is more convenient for the downward continuation type	",
" migration algorithm than using z as fastest dimension as in other SU  ",
" programs.								",
"									",
" Because most of the tools in the SU package (such as  unif2, unisam2, ", 
" and makevel) produce output with the structure vfile[ix][iz], you will",
" need to transpose the velocity files created by these programs. You may",
" use the SU program \'transp\' in SU to transpose such files into the  ",
" required vfile[iz][ix] structure.					",
" (In C  v[iz][ix] denotes a v(x,z) array, whereas v[ix][iz]  		",
" denotes a v(z,x) array, the opposite of what Matlab and Fortran	",
" programmers may expect.)						", 
"                                                                       ",
" Also, sx must be monotonically increasing throughout the dataset, and ",
" and gx must be monotonically increasing within a shot. You may resort ",
" your data with \'susort\', accordingly.                               ",
"                                                                       ",
" The scalco header field is honored so this field must be set correctly.",
" See selfdocs of \'susort\', \'suchw\'. Also:   sukeyword scalco       ",
"									",
NULL};

/*
 * Credits: CWP, Baoniu Han, bhan@@dix.mines.edu, April 19th, 1998
 *          Modified: Chris Stolk, 11 Dec 2005, - changed data input
 *                    to remove erroneous time delay.
 *          Modified: CWP, John Stockwell 26 Sept 2006 - replaced Han's
 *          "goto-loop" in two places with "do { }while loops".
 *          Fixed it so that sx, gx, and scalco are honored.
 *
 *
 * Trace header fields accessed: ns, dt, delrt, d2, sx, gx, scalco
 * Trace header fields modified: ns, dt, delrt
 */

/**************** end self doc *******************************************/

/* Prototypes for functions used internally */
float *ricker(float Freq,float dt,int *Npoint);
void get_sx_gx(float *sx, float *gx);


segy tr;

/* static time_t t1,t2; */

int
main (int argc, char **argv)
{
	int nt;			/* number of time samples		*/
	int nz;			/* number of migrated depth samples	*/
	int nx;			/* number of horizontal samples       	*/
	int nxshot;		/* number of shots to be migrated	*/
	int iz,iw,ix,it,ik;	/* loop counters			*/
        int igx;                /* integerized gx value			*/
	int ntfft,nxfft;	/* fft size				*/
	int nw,truenw,nk;	/* number of wave numbers		*/
	int dip=65;		/* dip angle				*/
	int oldigx=0;		/* old value of integerized gx value	*/
	int oldisx=0;		/* old value of integerized sx value	*/

        float sx,gx;            /* x source and geophone location       */
        float gxmin=0.0,gxmax=0.0; /* x source and geophone location    */
        float min_sx_gx;        /* min(sx,gx)                           */
        float oldgx;            /* old gx position                      */
        float oldgxmin;         /* old gx position                      */
        float oldgxmax;         /* old gx position                      */
        float oldsx=0.0;        /* old sx position                      */

        int isx=0,nxo;          /* index for source and geophone        */
	int ix1,ix2,ix3,ixshot,il=0,ir=0; /* dummy index		*/
	int lpad,rpad; /* padding on both sides of the migrated section */

	float *wl=NULL,*wtmp=NULL;
	float fmax;
	float f1,f2,f3,f4;
	int nf1,nf2,nf3,nf4;
	int ntw;

	float dt=0.004,dz;	/* time and depth sampling interval 	*/
	float dw,dk;		/* wavenumber and frequency sampling interval */
	float fw,fk;		/* first wavenumber and frequency	*/
	float w,k;		/* wavenumber and frequency		*/
	float dx;		/* spatial sampling interval		*/
	float **p=NULL;
	float **cresult=NULL;	/* input, output data			*/
	float v1,vmin;

	double kz1,kz2;
	double phase1;
	float **v=NULL;
	float **vp=NULL;
	complex cshift1,cshift2;
	complex *wlsp=NULL;
	complex **cp=NULL;
	complex **cp1=NULL;
	complex **cq=NULL;
	complex **cq1=NULL;	/*complex input,output*/
	char *vfile="";		/* name of file containing velocities */
	FILE *vfp=NULL;

        int verbose;            /* verbose flag                         */
	

	/* hook up getpar to handle the parameters */
	initargs(argc,argv);
	requestdoc(1);

	/* get optional parameters */
	MUSTGETPARINT("nz",&nz);
	MUSTGETPARFLOAT("dz",&dz);
	MUSTGETPARSTRING("vfile", &vfile);
	MUSTGETPARINT("nxo",&nxo);
	MUSTGETPARINT("nxshot",&nxshot);

	if (!getparfloat("fmax",&fmax)) fmax = 25. ;  
	if (!getparfloat("f1",&f1)) f1 = 10.0;
	if (!getparfloat("f2",&f2)) f2 = 20.0;
	if (!getparfloat("f3",&f3)) f3 = 40.0;
	if (!getparfloat("f4",&f4)) f4 = 50.0;
	if (!getparint("lpad",&lpad)) lpad=9999;
	if (!getparint("rpad",&rpad)) rpad=9999;
	if (!getparint("dip",&dip)) dip=65;

        if (!getparint("verbose",&verbose))     verbose = 0;	

	/* allocate space */
	cresult = alloc2float(nz,nxo);
	vp=alloc2float(nxo,nz);

	/* load velocity file */
	vfp=efopen(vfile,"r");
	efread(vp[0],FSIZE,nz*nxo,vfp);
	efclose(vfp);

        /* zero out cresult array */
        memset((void *) cresult[0], 0, nxo*nz*FSIZE);

	if (!gettr(&tr))  err("can't get first trace");
	nt = tr.ns;
        get_sx_gx(&sx,&gx);
        min_sx_gx = MIN(sx,gx);
        gxmin=gxmax=gx;
        erewind(stdin);
/*
        sx = sx - min_sx_gx;
        gx = gx - min_sx_gx;
*/

	/* let user give dt and/or dx from command line */
	if (!getparfloat("dt", &dt)) {
		if (tr.dt) { /* is dt field set? */
			dt = ((double) tr.dt)/1000000.0;
		} else { /* dt not set, assume 4 ms */
			dt = 0.004;
			warn("tr.dt not set, assuming dt=0.004");
		}
	}
	if (!getparfloat("dx",&dx)) {
		if (tr.d2) { /* is d2 field set? */
			dx = tr.d2;
		} else {
			dx = 1.0;
			warn("tr.d2 not set, assuming d2=1.0");
		}
	}

        checkpars();

        do {    /* begin loop over shots */

		/* determine frequency sampling interval*/
		ntfft = npfar(nt);
		nw = ntfft/2+1;
		dw = 2.0*PI/(ntfft*dt);

		/* compute the index of the frequency to be migrated */
		fw=2.0*PI*f1;
		nf1=fw/dw+0.5;
		 
		fw=2.0*PI*f2;
		nf2=fw/dw+0.5;

		fw=2.0*PI*f3;
		nf3=fw/dw+0.5;

		fw=2.0*PI*f4;
		nf4=fw/dw+0.5;  

		/* the number of frequencies to migrated */
		truenw=nf4-nf1+1;
		fw=0.0+nf1*dw;

		if (verbose)
		warn("nf1=%d nf2=%d nf3=%d nf4=%d nw=%d",nf1,nf2,nf3,nf4,truenw);

		/* allocate space */
		wl=alloc1float(ntfft);
		wlsp=alloc1complex(nw);

		/* generate the Ricker wavelet */
		wtmp=ricker(fmax,dt,&ntw);

                /* zero out wl[] array */
                memset((void *) wl, 0, ntfft*FSIZE);

	
		/* CHANGE BY CHRIS STOLK, Dec. 11, 2005 */
		/* The next two lines are the old code, */
		/* it is erroneous because the peak of  */
		/* the wavelet occurs at positive time 	*/
		/* instead of time zero.		*/
		for(it=0;it<ntw;it++)
	  			wl[it]=wtmp[it];
		/* New code: we put in the wavelet in a centered fashion */ 
		/*
		for(it=0;it<ntw;it++) {
	  		wl[(it-ntw/2+ntfft) % ntfft]=wtmp[it];
		}
		*/
	  	/*  warn("%12i    %12f    \n",(it-ntw/2+ntfft) % ntfft,wtmp[it]); */
		/* End of new code */
		free1float(wtmp);

                /* fourier transform wl array */
		pfarc(-1,ntfft,wl,wlsp);

		/* CS TEST: this was used to output the array wlsp
			   (the wavelet in the frequency domain) to the file CSinfo,
			   no longer needed and commented out */
			/*
			FILE *CSinfo;
			CSinfo=fopen("CSinfo","w");
			fprintf(CSinfo,"ntfft=%10i\n",ntfft);
			fprintf(CSinfo,"ntw=%10i\n",ntw);
			for(iw=0;iw<ntfft/2+1;iw++)
			  fprintf(CSinfo,"%12f   %12f   \n",wlsp[iw].r,wlsp[iw].i);
			fclose(CSinfo);
					*/
			/* conclusion from the analysis of this info:
			   the wavelet (whose fourier transform is in wlsp)
			   is not zero phase!!! 
			   so there is a timeshift error!!!
			   Conclusion obtained dec 11 2005 */
			/* CS */

		/* allocate space */
		p = alloc2float(ntfft,nxo);
		cq = alloc2complex(nw,nxo);
	
                /* zero out p[][] array */
                memset((void *) p[0], 0, ntfft*nxo*FSIZE);
		
                /* initialize a number of items before looping over traces */
                nx = 0;
                if (gx < 0 ) {
                    igx=gx/dx + nxo;
                } else {
                    igx=gx/dx ;
                }
                oldigx=igx;
                oldsx=sx;
                oldgx=gx;
                oldgxmax=gxmax;
                oldgxmin=gxmin;
                while(gettr(&tr)) { /* begin looping over traces within a shot gather */

                        /* get sx and gx */
                        get_sx_gx(&sx,&gx);
/*
warn("%d nx=%d", igx, nx);
                        sx = (sx - min_sx_gx);
                        gx = (gx - min_sx_gx);
*/
                        if (gx < 0 ) {
                            igx=gx/dx + nxo;
                        } else {
                            igx=gx/dx ;
                        }
			if (igx==oldigx) 
			   warn("repeated igx!!! check dx or scalco value!!!");
			oldigx = igx;
                        if(tr.sx!=oldsx){ efseeko(stdin,(off_t)(-240-nt*4),SEEK_CUR); break;}

                        if(gxmin>gx)gxmin=gx;
                        if(gxmax<gx)gxmax=gx;

                        if(verbose)
                                warn(" inside loop:  min_sx_gx %f isx %d igx %d gx %f sx %f",min_sx_gx,isx,igx,gx,sx);
                        /* sx, gx must increase monotonically */
                        if (!(oldsx <= sx) )
                         err("sx field must be monotonically increasing!");
                        if (!(oldgx <= gx) )
                         err("gx field must be monotonically increasing!");

			memcpy( (void *) p[igx], (const void *) tr.data,nt*FSIZE);

                        ++nx;
                } 

                isx=oldsx/dx;
		if (isx==oldisx) 
			warn("repeated isx!!! check dx or scalco value!!!");
		oldisx=isx;
                ixshot=isx;
                if(verbose) {
                        warn("sx %f, gx %f , gxmin %f  gxmax %f nx %d",sx,gx,gxmin,gxmax, nx);
                        warn("isx %d igx %d ixshot %d" ,isx,igx,ixshot);
                }

		/* transform the shot gather from time to frequency domain */
		pfa2rc(1,1,ntfft,nxo,p[0],cq[0]);

                /* compute the most left and right index for the migrated */
                /* section */
                ix1=oldsx/dx;
                ix2=gxmin/dx;
                ix3=gxmax/dx;

                if(ix1>=ix3)ix3=ix1;
                if(ix1<=ix2)ix2=ix1;
                il=ix2;
                ir=ix3;

                ix2-=lpad;
                ix3+=rpad;
                if(ix2<0)ix2=0;
                if(ix3>nxo-1)ix3=nxo-1;

                /* the total traces to be migrated */
                nx=ix3-ix2+1;
                nw=truenw;

		/* determine wavenumber sampling (for complex to complex FFT) */
		nxfft = npfa(nx);
		nk = nxfft;
		dk = 2.0*PI/(nxfft*dx);
		fk = -PI/dx;

		/* allocate space for velocity profile within the aperature */
		v=alloc2float(nx,nz);   
		for(iz=0;iz<nz;iz++)
			for(ix=0;ix<nx;ix++)
				v[iz][ix]=vp[iz][ix+ix2];

		/* allocate space */
		cp = alloc2complex(nx,nw);
		cp1 = alloc2complex(nx,nw);

                /* transpose the frequency domain data from     */
                /* data[ix][iw] to data[iw][ix] and apply a     */
                /* Hamming at the same time                     */
		for (ix=0; ix<nx; ix++) {
			for (iw=0; iw<nw; iw++){
				float tmpp=0.0,tmppp=0.0;

				if(iw>=(nf1-nf1)&&iw<=(nf2-nf1)){
					tmpp=PI/(nf2-nf1);
					tmppp=tmpp*(iw-nf1)-PI;
					tmpp=0.54+0.46*cos(tmppp);
					cp[iw][ix]=crmul(cq[ix+ix2][iw+nf1],tmpp);
				} else {
					if(iw>=(nf3-nf1)&&iw<=(nf4-nf1)){
						tmpp=PI/(nf4-nf3);
						tmppp=tmpp*(iw-nf3);
						tmpp=0.54+0.46*cos(tmppp);
						cp[iw][ix]=crmul(cq[ix+ix2][iw+nf1],tmpp);
					} else {
						cp[iw][ix]=cq[ix+ix2][iw+nf1];}
				}
				cp1[iw][ix]=cmplx(0.0,0.0);
			}
		}

		for(iw=0;iw<nw;iw++){
			cp1[iw][ixshot-ix2]=wlsp[iw+nf1];
		}

                if(verbose) {
                        warn("ixshot %d ix %d ix1 %d ix2 %d ix3 %d",ixshot,ix,ix1,ix2,ix3);
                        warn("oldsx %f ",oldsx);
                }
			
		free2float(p);
		free2complex(cq);
		free1float(wl);
		free1complex(wlsp);

		/* allocating space */
		cq=alloc2complex(nxfft,nw);
		cq1=alloc2complex(nxfft,nw);


		/* loops over depth */
		for(iz=0;iz<nz;++iz){

			/* the imaging condition */
			for(ix=0;ix<nx;ix++){
				for(iw=0,w=fw;iw<nw;w+=dw,iw++){   
					complex tmp;
					float ratio=10.0;
		
					if(fabs(ix+ix2-ixshot)*dx<ratio*iz*dz)
						tmp=cmul(cp[iw][ix],cp1[iw][ix]);
					else 
						tmp=cmplx(0.0,0.0);  

					cresult[ix+ix2][iz]+=tmp.r/ntfft;
				}
			}

			/* get the minimum velocity */
			vmin=0;
			for(ix=il-ix2;ix<=ir-ix2;ix++){
				vmin+=1.0/v[iz][ix]/(ir-il+1);
			}
			vmin=1.0/vmin;
		
			/* compute the shifted wavefield */
			for (ik=0;ik<nx;++ik) {
				for (iw=0; iw<nw; ++iw) {
					cq[iw][ik] = ik%2 ? cneg(cp[iw][ik]) : cp[iw][ik];
					cq1[iw][ik] = ik%2 ? cneg(cp1[iw][ik]) : cp1[iw][ik];
				}
			}
		 
			/* zero out cq[][] cq1[][] */
			for (ik=nx; ik<nk; ++ik) {
				for (iw=0; iw<nw; ++iw) {
					cq[iw][ik] = cmplx(0.0,0.0);
					cq1[iw][ik] = cmplx(0.0,0.0);
				}
			}

			/* FFT to W-K domain */
			pfa2cc(-1,1,nk,nw,cq[0]);
			pfa2cc(-1,1,nk,nw,cq1[0]);
	
			v1=vmin;
			for(ik=0,k=fk;ik<nk;++ik,k+=dk) {
				for(iw=0,w=fw;iw<nw;++iw,w+=dw){
					if(w==0.0)w=1.0e-10/dt; 
					kz1=1.0-pow(v1*k/w,2.0);
					if(kz1>0.15){
						phase1 = -w*sqrt(kz1)*dz/v1;
						cshift1 = cmplx(cos(phase1), sin(phase1));
						cq[iw][ik] = cmul(cq[iw][ik],cshift1);
						cq1[iw][ik] = cmul(cq1[iw][ik],cshift1);
					} else {
						cq[iw][ik] = cq1[iw][ik] = cmplx(0.0,0.0);
					}
				}
			}
	
			pfa2cc(1,1,nk,nw,cq[0]);
			pfa2cc(1,1,nk,nw,cq1[0]);

			for(ix=0;ix<nx;++ix) {
				for(iw=0,w=fw;iw<nw;w+=dw,++iw){
					float a=0.015,g=1.0;
					int I=10;
				
					if(ix<=I)g=exp(-a*(I-ix)*(I-ix));
					if(ix>=nx-I)g=exp(-a*(-nx+I+ix)*(-nx+I+ix));
				 
				
					cq[iw][ix] = crmul( cq[iw][ix],1.0/nxfft);
					cq[iw][ix] =ix%2 ? cneg(cq[iw][ix]) : cq[iw][ix];
					kz2=(1.0/v1-1.0/v[iz][ix])*w*dz;
					cshift2=cmplx(cos(kz2),sin(kz2));
					cp[iw][ix]=cmul(cq[iw][ix],cshift2);
		
					cq1[iw][ix] = crmul( cq1[iw][ix],1.0/nxfft);
					cq1[iw][ix] =ix%2 ? cneg(cq1[iw][ix]) : cq1[iw][ix];
					cp1[iw][ix]=cmul(cq1[iw][ix],cshift2);
		 
				}
			}
		}
		
		free2complex(cp);
		free2complex(cp1);
		free2complex(cq);
		free2complex(cq1);
		free2float(v);

		--nxshot;

	} while(nxshot);

        /* restore header fields and write output */
        for(ix=0; ix<nxo; ix++){
                tr.ns = nz;
                tr.d1 = dz;
                tr.d2 = dx;
                tr.offset = 0;
                tr.cdp = tr.tracl = ix;
                memcpy( (void *) tr.data, (const void *) cresult[ix],nz*FSIZE);
                puttr(&tr);
        }


	return(CWP_Exit());	

}



float * ricker(float Freq,float dt,int *Npoint)
{
	int i; /* they are the dummy counter*/
	float Bpar,t,u,*Amp;
	int Np1,N;
	
	if(Freq==0.0)Freq=30.0;
	if(dt==0.0)dt=0.004;
	Bpar=sqrt(6.0)/(PI*Freq);
	N=ceil(1.35*Bpar/dt);
	Np1=N;
	*Npoint=2*N+1;
	 
	Amp=alloc1float(*Npoint);
	
	Amp[Np1]=1.0;
  
	for(i=1;i<=N;i++) {
		t=dt*(float)i;
		u=2.0*sqrt(6.0)*t/Bpar;
		Amp[Np1+i]=Amp[Np1-i]=0.5*(2.0-u*u)*exp(-u*u/4.0);
	}

	return Amp;

}

void get_sx_gx(float *sx, float *gx)
{ 
/*****************************************************************************
get_sx_gx - get sx and gx from headrs
*****************************************************************************/

	float sy;		/* source coordinates */
	float gy;		/* geophone coordinates */

		if (tr.scalco) { /* if tr.scalco is set, apply value */
			if (tr.scalco>0) {
				*sx = (float) tr.sx*tr.scalco;
				*gx = (float) tr.gx*tr.scalco;
				sy = (float) tr.sy*tr.scalco;
				gy = (float) tr.gy*tr.scalco;
			} else { /* if tr.scalco is negative divide */
				*sx = (float) tr.sx/ABS(tr.scalco);
				*gx = (float) tr.gx/ABS(tr.scalco);
				sy = (float) tr.sy/ABS(tr.scalco);
				gy = (float) tr.gy/ABS(tr.scalco);
			}

		} else {
				*sx = (float) tr.sx;
				*gx = (float) tr.gx;
				sy = (float) tr.sy;
				gy = (float) tr.gy;
		}

		
		/* use pythagorean theorem to remap radial direction */
		/* to x-direction */
		*sx = SGN(*sx-sy)*sqrt((*sx)*(*sx) + sy*sy);
		*gx = SGN(*gx-gy)*sqrt((*gx)*(*gx) + gy*gy);

	return;
}
@


1.18
log
@copyright
@
text
@d208 2
@


1.17
log
@header issues and errors introduced in the previous release
@
text
@d1 4
a4 1
/* SUMIGPRESP: $Vision: 1.00 $ ; $Date: 2008/10/30 21:42:34 $*/
@


1.16
log
@1 november version
@
text
@a175 1

d180 3
d185 1
a206 1
 
a247 1
		/*
a249 1
		*/
d251 1
d254 2
a256 1
		}
a281 1

a287 1

d291 6
a296 1
                igx=0;
d301 1
a301 3
                do { /* begin looping over traces within a shot gather */

			memcpy( (void *) p[igx], (const void *) tr.data,nt*FSIZE);
d305 2
d309 6
a314 2

                        igx = gx/dx;
d318 1
d331 2
d334 1
a334 2
                } while(gettr(&tr) && sx==oldsx);

a345 1

d357 2
a373 1
	
a379 1
		
a417 1

d514 1
a515 4
				

		}

a525 2


@


1.15
log
@implementd Xiaolin Lu's fixes
which include explicit casts and a slight change in the order
which sx and gx values are read.
@
text
@d1 1
a1 1
/* SUMIGPRESP: $Vision: 1.00 $ ; $Date: 2006/12/13 16:55:11 $*/
d342 2
a343 2
                ix2=oldgxmin/dx;
                ix3=oldgxmax/dx;
@


1.14
log
@added comments regarding v(x,z) versus v(z,x) arrays
@
text
@d1 1
a1 1
/* SUMIGPRESP: $Vision: 1.00 $ ; $Date: 2006/11/07 22:58:42 $*/
d300 5
a314 5
                        /* get sx and gx */
                        get_sx_gx(&sx,&gx);
                        sx = (sx - min_sx_gx);
                        gx = (gx - min_sx_gx);

d578 4
a581 4
				*sx = tr.sx*tr.scalco;
				*gx = tr.gx*tr.scalco;
				sy = tr.sy*tr.scalco;
				gy = tr.gy*tr.scalco;
d583 4
a586 4
				*sx = tr.sx/ABS(tr.scalco);
				*gx = tr.gx/ABS(tr.scalco);
				sy = tr.sy/ABS(tr.scalco);
				gy = tr.gy/ABS(tr.scalco);
d590 4
a593 4
				*sx = tr.sx;
				*gx = tr.gx;
				sy = tr.sy;
				gy = tr.gy;
@


1.13
log
@changed    memset( .., (int) '\0',...) to memset( .., 0,..) as per suggestion of Marion Zhu and Reg Beardsley
@
text
@d1 1
a1 1
/* SUMIGPRESP: $Vision: 1.00 $ ; $Date: 2006/10/31 22:00:42 $*/
d47 3
@


1.12
log
@goto loops removed, IO improved to take into account nonzero sy and or
nonzero gy.
@
text
@d1 1
a1 1
/* SUMIGPRESP: $Vision: 1.00 $ ; $Date: 2006/10/17 18:59:13 $*/
d171 1
a171 1
        memset((void *) cresult[0], (int) '0', nxo*nz*FSIZE);
d235 1
a235 1
                memset((void *) wl, (int) '0', ntfft*FSIZE);
d283 1
a283 1
                memset((void *) p[0], (int) '0', ntfft*nxo*FSIZE);
@


1.11
log
@MUST...
@
text
@d1 1
a1 1
/* SUMIGPRESP: $Vision: 1.00 $ ; $Date: 2006/09/28 23:53:59 $*/
d93 2
d298 3
d323 3
@


1.10
log
@replaced goto-loop with do { } while and fixed program to honor sx,gx,scalco
@
text
@d1 1
a1 1
/* SUMIGPRESP: $Vision: 1.00 $ ; $Date: 2005/12/22 00:54:17 $*/
a6 1
/* #include <time.h> */
a104 1
	int flag=1;		/* flag control for feet or meter       */
d142 6
a147 5
	if (!getparint("nz",&nz)) err("nz must be specified");
	if (!getparfloat("dz",&dz)) err("dz must be specified");
	if (!getparstring("vfile", &vfile)) err("vfile must be specified");
	if (!getparint("nxo",&nxo)) err("nxo must be specified");
	if (!getparint("nxshot",&nxshot)) err("nshot must be specified");
a154 1
	if (!getparint("flag",&flag)) flag=1;
a407 5
		/* if the horizontal spacing interval is in feet */
		/* convert it to meters				 */
		if(!flag)
			dx*=0.3048;

@


1.9
log
@Chris Stolk's modifications
@
text
@d1 1
a1 1
/* SUMIGPRESP: $Vision: 1.00 $ ; $Date: 2003/08/19 17:31:42 $*/
d33 1
d48 7
d60 5
d67 1
a67 1
 * Trace header fields accessed: ns, dt, delrt, d2
d74 3
a76 1
float * ricker(float Freq,float dt,int *Npoint);
a79 1

d82 2
a83 2
int main (int argc, char **argv)

d85 22
a106 14
	int nt;			/* number of time samples */
	int nz;			/* number of migrated depth samples */
	int nx,nxshot,oldsx;	/* number of midpoints 	*/
	int iz,iw,ix,it,ik;	/* loop counters 	*/
	int ntfft,nxfft;	/* fft size		*/
	int nw,truenw,nk;	/* number of wave numbers */	
	int dip=65;

	/*prestack goes here*/
	float sx,gxmin,gxmax;
	int isx,nxo,ifx=0;	
	int ix1,ix2,ix3,ixshot,il,ir;
	int lpad,rpad;
	int flag=1;
d108 1
a108 1
	float *wl,*wtmp;
d114 1
a114 1
	float dt=0.004,dz;	/* time sampling interval 	*/
d116 5
a120 4
	float fw,fk;		/* first wavenumber and frequency */
	float w,k;		/* wavenumber and frequency	*/
	float dx;		/* spatial sampling interval	*/
	float **p,**cresult;	/* input, output data		*/
d122 1
d125 2
a126 1
	float **v,**vp;
d128 5
a132 1
	complex *wlsp,**cp,**cp1,**cq,**cq1;	/*complex input,output*/
d134 4
a137 1
	FILE *vfp;
d159 3
d165 1
a165 1
	/*load velicoty file*/
d170 2
a171 4
	for(ix=0;ix<nxo;ix++)
	for(iz=0;iz<nz;iz++)
	cresult[ix][iz]=0.0;
			
a172 3
	/* get info from first trace */
loop:
/*	time(&t1); */
d176 4
d199 2
a200 4
	sx=tr.sx;
	isx=sx/dx;
	gxmin=gxmax=tr.gx;
	oldsx=sx;
d202 8
a209 8
	/* determine frequency sampling interval*/
	ntfft = npfar(nt);
	nw = ntfft/2+1;
	dw = 2.0*PI/(ntfft*dt);

	/*compute the index of the frequency to be migrated*/
	fw=2.0*PI*f1;
	nf1=fw/dw+0.5;
d211 2
a212 2
	fw=2.0*PI*f2;
	nf2=fw/dw+0.5;
d214 2
a215 2
	fw=2.0*PI*f3;
	nf3=fw/dw+0.5;
d217 2
a218 2
	fw=2.0*PI*f4;
	nf4=fw/dw+0.5;  
d220 34
a253 8
	/*the number of frequency to migrated*/
	truenw=nf4-nf1+1;
	fw=0.0+nf1*dw;
	warn("nf1=%d nf2=%d nf3=%d nf4=%d nw=%d",nf1,nf2,nf3,nf4,truenw);

	/* allocate space */
	wl=alloc1float(ntfft);
	wlsp=alloc1complex(nw);
d255 2
a256 2
	/*generate the Ricker wavelet*/
	wtmp=ricker(fmax,dt,&ntw);
d258 23
a280 2
	for(it=0;it<ntfft;it++)
	wl[it]=0.0;  
d282 2
a283 14
	/* CHANGE BY CHRIS STOLK, Dec. 11, 2005 */
	/* The next two lines are the old code, it is erroneous because the 
	   peak of the wavelet occurs at positive time instead of time zero. */
	/*
	for(it=0;it<ntw;it++)
	  wl[it]=wtmp[it];
	*/
	/* New code: we put in the wavelet in a centered fashion */ 
	for(it=0;it<ntw;it++) {
	  wl[(it-ntw/2+ntfft) % ntfft]=wtmp[it];
	  /*  warn("%12i    %12f    \n",(it-ntw/2+ntfft) % ntfft,wtmp[it]); */
	}
	/* End of new code */
	free1float( wtmp);
d285 9
a293 1
	pfarc(-1,ntfft,wl,wlsp);
d295 1
a295 24
	/* CS TEST: this was used to output the array wlsp
	   (the wavelet in the frequency domain) to the file CSinfo,
	   no longer needed and commented out */
	/*
	FILE *CSinfo;
	CSinfo=fopen("CSinfo","w");
	fprintf(CSinfo,"ntfft=%10i\n",ntfft);
	fprintf(CSinfo,"ntw=%10i\n",ntw);
	for(iw=0;iw<ntfft/2+1;iw++)
	  fprintf(CSinfo,"%12f   %12f   \n",wlsp[iw].r,wlsp[iw].i);
	fclose(CSinfo);
	*/
	/* conclusion from the analysis of this info:
	   the wavelet (whose fourier transform is in wlsp)
	   is not zero phase!!! 
	   so there is a timeshift error!!!
	   Conclusion obtained dec 11 2005 */
	/* CS */


	/* allocate space */
	p = alloc2float(ntfft,nxo);
	cq = alloc2complex(nw,nxo);
	
d297 1
a297 3
	for (ix=0; ix<nxo; ix++)
		for (it=0; it<ntfft; it++)
			p[ix][it] = 0.0;
d299 2
d302 59
a360 6
        /*read in a single shot gather*/
        if (tr.gx < 0 ) {
                ix=tr.gx/dx + nxo;
        } else {
                ix=tr.gx/dx ;
        }
d362 26
a387 20
	memcpy( (void *) p[ix], (const void *) tr.data,nt*FSIZE);

	nx = 0;

	while(gettr(&tr)){
			int igx;

			if(tr.sx!=oldsx){ efseeko(stdin,(off_t)(-240-nt*4),SEEK_CUR); break;}
        		if (tr.gx < 0 ) {
                		igx=tr.gx/dx + nxo;
        		} else {
                		igx=tr.gx/dx ;
        		}

			memcpy( (void *) p[igx], (const void *) tr.data,nt*FSIZE);

			if(gxmin>tr.gx)gxmin=tr.gx;
			if(gxmax<tr.gx)gxmax=tr.gx;
			nx++;
			oldsx=tr.sx;
d389 1
d391 3
a393 20
	warn("sx %f , gxmin %f  gxmax %f",sx,gxmin,gxmax);

	/*transform the shot gather from time to frequency domain*/
	pfa2rc(1,1,ntfft,nxo,p[0],cq[0]);


	/*compute the most left and right index for the migrated section*/
	ix1=sx/dx;
	ix2=gxmin/dx;
	ix3=gxmax/dx;

	if(ix1>=ix3)ix3=ix1;
	if(ix1<=ix2)ix2=ix1;
	il=ix2;
	ir=ix3;

	ix2-=lpad;
	ix3+=rpad;
	if(ix2<0)ix2=0;
	if(ix3>nxo-1)ix3=nxo-1;
d395 4
a398 52
	/*the total traces to be migrated*/
	nx=ix3-ix2+1;
	nw=truenw;

	/* determine wavenumber sampling (for complex to complex FFT) */
	nxfft = npfa(nx);
	nk = nxfft;
	dk = 2.0*PI/(nxfft*dx);
	fk = -PI/dx;


	/*allocate space for velocity profile within the aperature*/
	v=alloc2float(nx,nz);   
	
	for(iz=0;iz<nz;iz++)
	for(ix=0;ix<nx;ix++){
	v[iz][ix]=vp[iz][ix+ix2];
	}


	/*allocate space*/
	cp = alloc2complex(nx,nw);
	cp1 = alloc2complex(nx,nw);

	/*transpose the frequency domain data from data[ix][iw] to data[iw][ix] and
	apply a Hamming at the same time*/

	for (ix=0; ix<nx; ix++)
	for (iw=0; iw<nw; iw++){

	float tmpp=0.0,tmppp=0.0;

	if(iw>=(nf1-nf1)&&iw<=(nf2-nf1)){
	tmpp=PI/(nf2-nf1);tmppp=tmpp*(iw-nf1)-PI;tmpp=0.54+0.46*cos(tmppp);
	cp[iw][ix]=crmul(cq[ix+ix2][iw+nf1],tmpp);}
	else{
	if(iw>=(nf3-nf1)&&iw<=(nf4-nf1)){
	tmpp=PI/(nf4-nf3);tmppp=tmpp*(iw-nf3);tmpp=0.54+0.46*cos(tmppp);
	cp[iw][ix]=crmul(cq[ix+ix2][iw+nf1],tmpp);}
	else{
	cp[iw][ix]=cq[ix+ix2][iw+nf1];}
	}
	cp1[iw][ix]=cmplx(0.0,0.0);
	}

	ix=sx/dx-ifx;
	ixshot=ix;
	warn("ix %d",ix);

	for(iw=0;iw<nw;iw++){
	cp1[iw][ix-ix2]=wlsp[iw+nf1];
	}
d401 23
a423 21
	free2float(p);
	free2complex(cq);
	free1float(wl);
	free1complex(wlsp);

	cq=alloc2complex(nxfft,nw);
	cq1=alloc2complex(nxfft,nw);

	/*if the horizontal spacing interval is in feet, convert it to meter*/
	if(!flag)
	dx*=0.3048;


	/* loops over depth */
	for(iz=0;iz<nz;++iz){

	/*the imaging condition*/
	for(ix=0;ix<nx;ix++){
	for(iw=0,w=fw;iw<nw;w+=dw,iw++){   
		complex tmp;
		float ratio=10.0;
d425 4
a428 6
		if(fabs(ix+ix2-ixshot)*dx<ratio*iz*dz)
		tmp=cmul(cp[iw][ix],cp1[iw][ix]);
		else tmp=cmplx(0.0,0.0);  
		cresult[ix+ix2][iz]+=tmp.r/ntfft;
	}
	}
d430 3
a432 17
/* anothe imaging condition, slightly different from the above one, but quite
slow*/
	
/*
	for(iw=0,w=fw;iw<nw;w+=dw,iw++){
		float kk=0.0;
		complex tmp;
		float ratio=1.5; 
		if(dip<80)ratio=1.5;
		else ratio=1.5;
	
		for(ix=0;ix<nx;ix++){	
		kk+=(pow(cp1[iw][ix].i,2.0)+pow(cp1[iw][ix].r,2.0))/nx;
		}
	 
		for(ix=0;ix<nx;ix++){
		tmp=cmul(cp[iw][ix],cp1[iw][ix]);
d434 6
a439 5
		if(fabs(ix-ixshot)*dx<ratio*iz*dz||ixshot-ix<0 )

		tmp=crmul(tmp,1.0/(kk+1.0e-10));
  
		else tmp=cmplx(0.0,0.0);
d441 6
a446 19
		cresult[ix+ix2][iz]+=tmp.r/ntfft;
	
		}
		}
*/	
		
		
		vmin=0;
		 
		for(ix=il-ix2;ix<=ir-ix2;ix++){
		vmin+=1.0/v[iz][ix]/(ir-il+1);
		}
		vmin=1.0/vmin;
		
		for (ik=0;ik<nx;++ik)
			for (iw=0; iw<nw; ++iw)
				{
				cq[iw][ik] = ik%2 ? cneg(cp[iw][ik]) : cp[iw][ik];
				cq1[iw][ik] = ik%2 ? cneg(cp1[iw][ik]) : cp1[iw][ik];
d449 6
a454 5
		for (ik=nx; ik<nk; ++ik)
			for (iw=0; iw<nw; ++iw)
			{
			cq[iw][ik] = cmplx(0.0,0.0);
			cq1[iw][ik] = cmplx(0.0,0.0);
a455 6
		/* FFT to W-K domain */
		
		pfa2cc(-1,1,nk,nw,cq[0]);
		pfa2cc(-1,1,nk,nw,cq1[0]);
	
		v1=vmin;
d457 17
a473 12
		for(ik=0,k=fk;ik<nk;++ik,k+=dk)
			for(iw=0,w=fw;iw<nw;++iw,w+=dw){
				if(w==0.0)w=1.0e-10/dt; 
				kz1=1.0-pow(v1*k/w,2.0);
				if(kz1>0.15){
				phase1 = -w*sqrt(kz1)*dz/v1;
				cshift1 = cmplx(cos(phase1), sin(phase1));
				cq[iw][ik] = cmul(cq[iw][ik],cshift1);
				cq1[iw][ik] = cmul(cq1[iw][ik],cshift1);
				}
				else{
				cq[iw][ik] = cq1[iw][ik] = cmplx(0.0,0.0);
d477 2
a478 2
		pfa2cc(1,1,nk,nw,cq[0]);
		pfa2cc(1,1,nk,nw,cq1[0]);
d480 4
a483 5
		for(ix=0;ix<nx;++ix)
			for(iw=0,w=fw;iw<nw;w+=dw,++iw){
		 
		float a=0.015,g=1.0;
		int I=10;
d485 2
a486 2
		if(ix<=I)g=exp(-a*(I-ix)*(I-ix));
		if(ix>=nx-I)g=exp(-a*(-nx+I+ix)*(-nx+I+ix));
d489 5
a493 5
				cq[iw][ix] = crmul( cq[iw][ix],1.0/nxfft);
				cq[iw][ix] =ix%2 ? cneg(cq[iw][ix]) : cq[iw][ix];
				kz2=(1.0/v1-1.0/v[iz][ix])*w*dz;
				cshift2=cmplx(cos(kz2),sin(kz2));
				cp[iw][ix]=cmul(cq[iw][ix],cshift2);
d495 3
a497 3
				cq1[iw][ix] = crmul( cq1[iw][ix],1.0/nxfft);
				cq1[iw][ix] =ix%2 ? cneg(cq1[iw][ix]) : cq1[iw][ix];
				cp1[iw][ix]=cmul(cq1[iw][ix],cshift2);
d499 1
d504 12
a515 1
}
a516 5
free2complex(cp);
free2complex(cp1);
free2complex(cq);
free2complex(cq1);
free2float(v);
d518 10
a527 1
nxshot--;
a528 19
/*
time(&t2);
warn("\n %d nxshot has been finished in %f seconds",nxshot,difftime(t2,t1));
*/

if(nxshot)goto loop;


	/* restore header fields and write output */
	for(ix=0; ix<nxo; ix++){
		tr.ns = nz ;
		tr.dt = dz*1000000.0 ;
		tr.d2 = dx;
		tr.offset = 0; 
		tr.cdp = tr.tracl = ix;
		memcpy( (void *) tr.data, (const void *) cresult[ix],nz*FSIZE);
		puttr(&tr);
	}
	
d538 10
a547 10
int i; /* they are the dummy counter*/
float Bpar,t,u,*Amp;
int Np1,N;
	
if(Freq==0.0)Freq=30.0;
if(dt==0.0)dt=0.004;
Bpar=sqrt(6.0)/(PI*Freq);
N=ceil(1.35*Bpar/dt);
Np1=N;
*Npoint=2*N+1;
d549 1
a549 1
Amp=alloc1float(*Npoint);
d551 1
a551 1
Amp[Np1]=1.0;
d553 8
a560 5
for(i=1;i<=N;i++)
{
t=dt*(float)i;
u=2.0*sqrt(6.0)*t/Bpar;
Amp[Np1+i]=Amp[Np1-i]=0.5*(2.0-u*u)*exp(-u*u/4.0);
d563 21
a583 1
return Amp;
d585 14
a599 1

@


1.8
log
@small changes to agreeHH[3~[3~ with header info
@
text
@d1 1
a1 1
/* SUMIGPRESP: $Vision: 1.00 $ ; $Date: 2004/12/23 23:55:02 $*/
d87 1
a87 1
	float fmax,phase_w;
d102 1
a102 1
	complex cshift1,cshift2,shift_w;
d165 4
a168 4
		sx=tr.sx;
		isx=sx/dx;
		gxmin=gxmax=tr.gx;
		oldsx=sx;
d178 1
d181 1
d184 1
d199 1
d201 6
a206 1
		 wl[it]=0.0;  
d208 8
a215 1
		 wl[it]=wtmp[it];
a217 1
	/*FFT of ricker wavelet*/
d220 20
a239 7
	/*phase shift the wavelet to zero time*/
        for(it=0;it<nw;it++){
        	phase_w=it*dw*(((ntw-1)/2))*dt;
        	shift_w=cmplx(cos(phase_w),sin(phase_w));
        	wlsp[it]=cmul(wlsp[it],shift_w);
	        }
	
d243 2
d256 1
d258 1
d260 1
d263 1
d270 1
d272 1
d278 1
d284 1
d289 1
a289 1
	
d313 1
d316 3
a318 2
		v[iz][ix]=vp[iz][ix+ix2];
		}
d330 12
a341 11
		float tmpp=0.0,tmppp=0.0;
		if(iw>=(nf1-nf1)&&iw<=(nf2-nf1)){
			tmpp=PI/(nf2-nf1);tmppp=tmpp*(iw-nf1)-PI;tmpp=0.54+0.46*cos(tmppp);
			cp[iw][ix]=crmul(cq[ix+ix2][iw+nf1],tmpp);}
		else{
			if(iw>=(nf3-nf1)&&iw<=(nf4-nf1)){
				tmpp=PI/(nf4-nf3);tmppp=tmpp*(iw-nf3);tmpp=0.54+0.46*cos(tmppp);
				cp[iw][ix]=crmul(cq[ix+ix2][iw+nf1],tmpp);}
			else{
		cp[iw][ix]=cq[ix+ix2][iw+nf1];}
		}
d345 7
a351 6
			ix=sx/dx-ifx;
			ixshot=ix;
			warn("ix %d",ix);
			for(iw=0;iw<nw;iw++){
				cp1[iw][ix-ix2]=wlsp[iw+nf1];
			}
d353 1
d358 1
d366 2
a367 1
	/* start of wavefield extrapolation: loops over depth */
d370 1
a370 1
	/*the cross-correlation imaging condition*/
d383 3
a385 2
	/* another imaging condition. Slightly different from the above one, 
	but quite slow*/
d413 1
a413 1
		/*prepare arrays for FFT*/ 	
d415 1
d417 1
a417 1
			vmin+=1.0/v[iz][ix]/(ir-il+1);
d422 2
a423 1
			for (iw=0; iw<nw; ++iw){
d427 1
d429 2
a430 1
			for (iw=0; iw<nw; ++iw){
d434 2
a435 2

		/*FFT to W-K domain*/
d439 14
a452 15
			v1=vmin;
			/*do first phase shift in (w,k)*/
			for(ik=0,k=fk;ik<nk;++ik,k+=dk)
				for(iw=0,w=fw;iw<nw;++iw,w+=dw){
					if(w==0.0)w=1.0e-10/dt; 
					kz1=1.0-pow(v1*k/w,2.0);
						if(kz1>0.15){
						phase1 = -w*sqrt(kz1)*dz/v1;
						cshift1 = cmplx(cos(phase1), sin(phase1));
						cq[iw][ik] = cmul(cq[iw][ik],cshift1);
						cq1[iw][ik] = cmul(cq1[iw][ik],cshift1);
						}
						else{
						cq[iw][ik] = cq1[iw][ik] = cmplx(0.0,0.0);
						}
d454 1
a455 1
		/*FFT to w-x domain*/
d459 19
a477 11
			/*do second phase shift in (w,x)*/
			for(ix=0;ix<nx;++ix)
				for(iw=0,w=fw;iw<nw;w+=dw,++iw){
					cq[iw][ix] = crmul( cq[iw][ix],1.0/nxfft);
					cq[iw][ix] =ix%2 ? cneg(cq[iw][ix]) : cq[iw][ix];
					kz2=(1.0/v1-1.0/v[iz][ix])*w*dz;
					cshift2=cmplx(cos(kz2),sin(kz2));
					cp[iw][ix]=cmul(cq[iw][ix],cshift2);
					cq1[iw][ix] = crmul( cq1[iw][ix],1.0/nxfft);
					cq1[iw][ix] =ix%2 ? cneg(cq1[iw][ix]) : cq1[iw][ix];
					cp1[iw][ix]=cmul(cq1[iw][ix],cshift2);
d479 4
a482 1
				}
d493 5
d504 1
a504 1
		tr.d1 = dz ;
d519 1
a519 1
float *ricker(float Freq,float dt,int *Npoint) 
d521 10
a530 10
	int i; /* they are the dummy counter*/
	float Bpar,t,u,*Amp;
	int Np1,N;
	
	if(Freq==0.0)Freq=30.0;
	if(dt==0.0)dt=0.004;
	Bpar=sqrt(6.0)/(PI*Freq);
	N=ceil(1.35*Bpar/dt);
	Np1=N;
	*Npoint=2*N+1;
d532 1
a532 1
	Amp=alloc1float(*Npoint);
d534 1
a534 1
	Amp[Np1]=1.0;
d536 6
a541 5
	for(i=1;i<=N;i++) {
		t=dt*(float)i;
		u=2.0*sqrt(6.0)*t/Bpar;
		Amp[Np1+i]=Amp[Np1-i]=0.5*(2.0-u*u)*exp(-u*u/4.0);
	}
d543 1
a543 1
	return Amp;
@


1.7
log
@fixed igt calculation
@
text
@d1 1
a1 1
/* SUMIGPRESP: $Vision: 1.00 $ ; $Date: 2003/08/19 17:31:42 $*/
d87 1
a87 1
	float fmax;
d102 1
a102 1
	complex cshift1,cshift2;
d165 4
a168 4
	sx=tr.sx;
	isx=sx/dx;
	gxmin=gxmax=tr.gx;
	oldsx=sx;
a177 1
		 
a179 1

a181 1

a195 1

d197 1
a197 2
	wl[it]=0.0;  
	
d199 1
a199 1
	wl[it]=wtmp[it];
d202 1
d205 7
a214 2
	

a225 1

a226 1

a227 1

a229 1

a235 1

a236 1

a241 1

a246 1

d251 1
a251 1

a274 1
	
d277 2
a278 3
	v[iz][ix]=vp[iz][ix+ix2];
	}

d290 11
a300 12
	float tmpp=0.0,tmppp=0.0;

	if(iw>=(nf1-nf1)&&iw<=(nf2-nf1)){
	tmpp=PI/(nf2-nf1);tmppp=tmpp*(iw-nf1)-PI;tmpp=0.54+0.46*cos(tmppp);
	cp[iw][ix]=crmul(cq[ix+ix2][iw+nf1],tmpp);}
	else{
	if(iw>=(nf3-nf1)&&iw<=(nf4-nf1)){
	tmpp=PI/(nf4-nf3);tmppp=tmpp*(iw-nf3);tmpp=0.54+0.46*cos(tmppp);
	cp[iw][ix]=crmul(cq[ix+ix2][iw+nf1],tmpp);}
	else{
	cp[iw][ix]=cq[ix+ix2][iw+nf1];}
	}
d304 6
a309 3
	ix=sx/dx-ifx;
	ixshot=ix;
	warn("ix %d",ix);
a310 5
	for(iw=0;iw<nw;iw++){
	cp1[iw][ix-ix2]=wlsp[iw+nf1];
	}

			
a314 1

d322 1
a322 2

	/* loops over depth */
d325 1
a325 1
	/*the imaging condition*/
d338 2
a339 3
/* anothe imaging condition, slightly different from the above one, but quite
slow*/
	
d367 1
a367 1
		
a368 1
		 
d370 1
a370 1
		vmin+=1.0/v[iz][ix]/(ir-il+1);
d375 1
a375 2
			for (iw=0; iw<nw; ++iw)
				{
a378 1
		 
d380 1
a380 2
			for (iw=0; iw<nw; ++iw)
			{
d384 2
a385 2
		/* FFT to W-K domain */
		
d389 15
a403 14
		v1=vmin;

		for(ik=0,k=fk;ik<nk;++ik,k+=dk)
			for(iw=0,w=fw;iw<nw;++iw,w+=dw){
				if(w==0.0)w=1.0e-10/dt; 
				kz1=1.0-pow(v1*k/w,2.0);
				if(kz1>0.15){
				phase1 = -w*sqrt(kz1)*dz/v1;
				cshift1 = cmplx(cos(phase1), sin(phase1));
				cq[iw][ik] = cmul(cq[iw][ik],cshift1);
				cq1[iw][ik] = cmul(cq1[iw][ik],cshift1);
				}
				else{
				cq[iw][ik] = cq1[iw][ik] = cmplx(0.0,0.0);
a404 1
			}
d406 1
d410 11
a420 2
		for(ix=0;ix<nx;++ix)
			for(iw=0,w=fw;iw<nw;w+=dw,++iw){
d422 1
a422 21
		float a=0.015,g=1.0;
		int I=10;
				
		if(ix<=I)g=exp(-a*(I-ix)*(I-ix));
		if(ix>=nx-I)g=exp(-a*(-nx+I+ix)*(-nx+I+ix));
				 
				
				cq[iw][ix] = crmul( cq[iw][ix],1.0/nxfft);
				cq[iw][ix] =ix%2 ? cneg(cq[iw][ix]) : cq[iw][ix];
				kz2=(1.0/v1-1.0/v[iz][ix])*w*dz;
				cshift2=cmplx(cos(kz2),sin(kz2));
				cp[iw][ix]=cmul(cq[iw][ix],cshift2);
		
				cq1[iw][ix] = crmul( cq1[iw][ix],1.0/nxfft);
				cq1[iw][ix] =ix%2 ? cneg(cq1[iw][ix]) : cq1[iw][ix];
				cp1[iw][ix]=cmul(cq1[iw][ix],cshift2);
		 
			}
		
				

a432 5
/*
time(&t2);
warn("\n %d nxshot has been finished in %f seconds",nxshot,difftime(t2,t1));
*/

d439 1
a439 1
		tr.dt = dz*1000000.0 ;
d454 1
a454 1
float * ricker(float Freq,float dt,int *Npoint)
d456 10
a465 10
int i; /* they are the dummy counter*/
float Bpar,t,u,*Amp;
int Np1,N;
	
if(Freq==0.0)Freq=30.0;
if(dt==0.0)dt=0.004;
Bpar=sqrt(6.0)/(PI*Freq);
N=ceil(1.35*Bpar/dt);
Np1=N;
*Npoint=2*N+1;
d467 1
a467 1
Amp=alloc1float(*Npoint);
d469 1
a469 1
Amp[Np1]=1.0;
d471 5
a475 6
for(i=1;i<=N;i++)
{
t=dt*(float)i;
u=2.0*sqrt(6.0)*t/Bpar;
Amp[Np1+i]=Amp[Np1-i]=0.5*(2.0-u*u)*exp(-u*u/4.0);
}
d477 1
a477 1
return Amp;
@


1.6
log
@y.
@
text
@d1 1
a1 1
/* SUMIGPRESP: $Vision: 1.00 $ ; $Date: 2003/06/09 16:17:07 $*/
d219 7
a225 2
	/*read in a single shot gather*/
	ix=tr.gx/dx;
d234 6
a239 1
			igx=tr.gx/dx;
@


1.5
log
@9 June 2003
@
text
@d1 1
a1 1
/* SUMIGPRESP: $Vision: 1.00 $ ; $Date: 2000/09/25 20:38:38 $*/
d27 1
a27 1
" Fmax=25	The peak frequency of Ricker wavelet used as source wavelet",
d87 1
a87 1
	float Fmax=25;
d117 1
a117 1
	if (!getparfloat("Fmax",&Fmax)) err("Fmax must be specified");  
d198 1
a198 1
	wtmp=ricker(Fmax,dt,&ntw);
@


1.4
log
@updated selfdoc to read a bit clearer
@
text
@d1 1
a1 1
/* SUMIGPRESP: $Vision: 1.00 $ ; $Date: 2000/09/22 19:34:16 $*/
d228 1
a228 1
			if(tr.sx!=oldsx){ fseek(stdin,(long)(-240-nt*4),SEEK_CUR); break;}
d472 1
a472 1
	return EXIT_SUCCESS;	
@


1.3
log
@removed timing stuff
@
text
@d1 1
a1 1
/* SUMIGPRESP: $Vision: 1.00 $ ; $Date: 1998/05/04 18:16:33 $*/
d12 2
a13 2
"                                                                       ",
"SUMIGPRESP --- The 2-D prestack common-shot split-step Fourier		", 
d15 33
a47 27
"Usage:                                                                 ",
"sumigpresp <indata >outfile [parameters]	                        ", 
"                                                                       ",
"Required Parameters:                                                   ",  
"                                                                       ",
"nxo=           number of total horizontal output samples               ",
"nxshot=        number of shot gathers to be migrated                   ",
"nz=            number of depth sapmles                                 ",
"dx=            horizontal sampling interval                            ",   
"dz=            depth sampling interval                                 ",
"vfile=         velocity profile, it must be binary format.             ",
"The structure of such a file is vfile[iz][ix], the x-direction is the  ",   
"fastest direction instead of z-direction, such a structure is quite    ",
"convenient for the downward continuation type migration algorithm.     ",
"Since most of the velocity file is in vfile[ix][iz] structure, you can ",
"use 'transp' in SU to transpose them into vfile[iz][ix] structure.     ",
"                                                                       ",  
"Optional Parameters:                                                   ",
"                                                                       ",
"                                                                       ",
"Fmax=25      The peak frequency of Ricker wavelet used as source wavelet",
"                                                                       ",
"f1=5,f2=10,f3=40,f4=50         frequencies to build a Hamming window   ",
"                                                                       ",
"lpad=9999,rpad=9999            number of zero traces padded on both    ",
"sides of depth section to determine the migration aperature, the default", 
"values are using the full aperature.                                   ",
d87 1
a87 1
        float Fmax=25;
d111 15
a125 15
        /* get optional parameters */
        if (!getparint("nz",&nz)) err("nz must be specified");
        if (!getparfloat("dz",&dz)) err("dz must be specified");
        if (!getparstring("vfile", &vfile)) err("vfile must be specified");
        if (!getparint("nxo",&nxo)) err("nxo must be specified");
        if (!getparint("nxshot",&nxshot)) err("nshot must be specified");
        if (!getparfloat("Fmax",&Fmax)) err("Fmax must be specified");  
        if (!getparfloat("f1",&f1)) f1 = 10.0;
        if (!getparfloat("f2",&f2)) f2 = 20.0;
        if (!getparfloat("f3",&f3)) f3 = 40.0;
        if (!getparfloat("f4",&f4)) f4 = 50.0;
        if (!getparint("lpad",&lpad)) lpad=9999;
        if (!getparint("rpad",&rpad)) rpad=9999;
        if (!getparint("flag",&flag)) flag=1;
        if (!getparint("dip",&dip)) dip=65;
d170 52
a221 52
        /* determine frequency sampling interval*/
        ntfft = npfar(nt);
        nw = ntfft/2+1;
        dw = 2.0*PI/(ntfft*dt);

        /*compute the index of the frequency to be migrated*/
        fw=2.0*PI*f1;
        nf1=fw/dw+0.5;
                 
        fw=2.0*PI*f2;
        nf2=fw/dw+0.5;

        fw=2.0*PI*f3;
        nf3=fw/dw+0.5;

        fw=2.0*PI*f4;
        nf4=fw/dw+0.5;  

        /*the number of frequency to migrated*/
        truenw=nf4-nf1+1;
        fw=0.0+nf1*dw;
        warn("nf1=%d nf2=%d nf3=%d nf4=%d nw=%d",nf1,nf2,nf3,nf4,truenw);

        /* allocate space */
        wl=alloc1float(ntfft);
        wlsp=alloc1complex(nw);

        /*generate the Ricker wavelet*/
        wtmp=ricker(Fmax,dt,&ntw);

        for(it=0;it<ntfft;it++)
        wl[it]=0.0;  
        
        for(it=0;it<ntw;it++)
        wl[it]=wtmp[it];
        free1float( wtmp);

        pfarc(-1,ntfft,wl,wlsp);

        /* allocate space */
        p = alloc2float(ntfft,nxo);
        cq = alloc2complex(nw,nxo);
	

        for (ix=0; ix<nxo; ix++)
                for (it=0; it<ntfft; it++)
                        p[ix][it] = 0.0;


        /*read in a single shot gather*/
        ix=tr.gx/dx;
        memcpy( (void *) p[ix], (const void *) tr.data,nt*FSIZE);
d225 2
a226 2
        while(gettr(&tr)){
                        int igx;
d228 3
a230 3
                        if(tr.sx!=oldsx){ fseek(stdin,(long)(-240-nt*4),SEEK_CUR); break;}
                        igx=tr.gx/dx;
                        memcpy( (void *) p[igx], (const void *) tr.data,nt*FSIZE);
d232 5
a236 5
                        if(gxmin>tr.gx)gxmin=tr.gx;
                        if(gxmax<tr.gx)gxmax=tr.gx;
                        nx++;
                        oldsx=tr.sx;
                        }
d238 1
a238 1
        warn("sx %f , gxmin %f  gxmax %f",sx,gxmin,gxmax);
d240 2
a241 2
        /*transform the shot gather from time to frequency domain*/
        pfa2rc(1,1,ntfft,nxo,p[0],cq[0]);
d244 4
a247 4
        /*compute the most left and right index for the migrated section*/
        ix1=sx/dx;
        ix2=gxmin/dx;
        ix3=gxmax/dx;
d249 2
a250 2
        if(ix1>=ix3)ix3=ix1;
        if(ix1<=ix2)ix2=ix1;
d254 4
a257 4
        ix2-=lpad;
        ix3+=rpad;
        if(ix2<0)ix2=0;
        if(ix3>nxo-1)ix3=nxo-1;
d259 2
a260 2
        /*the total traces to be migrated*/
        nx=ix3-ix2+1;
d263 5
a267 5
       /* determine wavenumber sampling (for complex to complex FFT) */
        nxfft = npfa(nx);
        nk = nxfft;
        dk = 2.0*PI/(nxfft*dx);
        fk = -PI/dx;
d270 7
a276 7
        /*allocate space for velocity profile within the aperature*/
        v=alloc2float(nx,nz);   
        
        for(iz=0;iz<nz;iz++)
        for(ix=0;ix<nx;ix++){
        v[iz][ix]=vp[iz][ix+ix2];
        }
d279 3
a281 3
        /*allocate space*/
        cp = alloc2complex(nx,nw);
        cp1 = alloc2complex(nx,nw);
d283 2
a284 2
        /*transpose the frequency domain data from data[ix][iw] to data[iw][ix] and
        apply a Hamming at the same time*/
d286 2
a287 2
        for (ix=0; ix<nx; ix++)
        for (iw=0; iw<nw; iw++){
d289 1
a289 1
        float tmpp=0.0,tmppp=0.0;
d293 2
a294 2
        cp[iw][ix]=crmul(cq[ix+ix2][iw+nf1],tmpp);}
        else{
d297 2
a298 2
        cp[iw][ix]=crmul(cq[ix+ix2][iw+nf1],tmpp);}
        else{
d300 1
a300 1
        }
d304 1
a304 1
        ix=sx/dx-ifx;
d306 1
a306 1
        warn("ix %d",ix);
d308 9
a316 9
        for(iw=0;iw<nw;iw++){
        cp1[iw][ix-ix2]=wlsp[iw+nf1];
        }

                        
        free2float(p);
        free2complex(cq);
        free1float(wl);
        free1complex(wlsp);
d321 3
a323 3
        /*if the horizontal spacing interval is in feet, convert it to meter*/
        if(!flag)
        dx*=0.3048;
d329 12
a340 12
        /*the imaging condition*/
        for(ix=0;ix<nx;ix++){
        for(iw=0,w=fw;iw<nw;w+=dw,iw++){   
                complex tmp;
                float ratio=10.0;
                
                if(fabs(ix+ix2-ixshot)*dx<ratio*iz*dz)
                tmp=cmul(cp[iw][ix],cp1[iw][ix]);
                else tmp=cmplx(0.0,0.0);  
                cresult[ix+ix2][iz]+=tmp.r/ntfft;
        }
        }
d344 1
a344 1
        
d346 13
a358 13
        for(iw=0,w=fw;iw<nw;w+=dw,iw++){
                float kk=0.0;
                complex tmp;
                float ratio=1.5; 
                if(dip<80)ratio=1.5;
                else ratio=1.5;
        
                for(ix=0;ix<nx;ix++){     
                kk+=(pow(cp1[iw][ix].i,2.0)+pow(cp1[iw][ix].r,2.0))/nx;
                }
         
                for(ix=0;ix<nx;ix++){
                tmp=cmul(cp[iw][ix],cp1[iw][ix]);
d360 1
a360 1
                if(fabs(ix-ixshot)*dx<ratio*iz*dz||ixshot-ix<0 )
d362 1
a362 1
                tmp=crmul(tmp,1.0/(kk+1.0e-10));
d364 77
a440 77
                else tmp=cmplx(0.0,0.0);
                
                cresult[ix+ix2][iz]+=tmp.r/ntfft;
        
                }
                }
*/      
                
                
                vmin=0;
                 
                for(ix=il-ix2;ix<=ir-ix2;ix++){
                vmin+=1.0/v[iz][ix]/(ir-il+1);
                }
                vmin=1.0/vmin;
                
                for (ik=0;ik<nx;++ik)
                        for (iw=0; iw<nw; ++iw)
                               {
                                cq[iw][ik] = ik%2 ? cneg(cp[iw][ik]) : cp[iw][ik];
                                cq1[iw][ik] = ik%2 ? cneg(cp1[iw][ik]) : cp1[iw][ik];
                        }
                 
                for (ik=nx; ik<nk; ++ik)
                        for (iw=0; iw<nw; ++iw)
                        {
                        cq[iw][ik] = cmplx(0.0,0.0);
                        cq1[iw][ik] = cmplx(0.0,0.0);
                        }
                /* FFT to W-K domain */
                
                pfa2cc(-1,1,nk,nw,cq[0]);
                pfa2cc(-1,1,nk,nw,cq1[0]);
        
                v1=vmin;

                for(ik=0,k=fk;ik<nk;++ik,k+=dk)
                        for(iw=0,w=fw;iw<nw;++iw,w+=dw){
                                if(w==0.0)w=1.0e-10/dt; 
                                kz1=1.0-pow(v1*k/w,2.0);
                                if(kz1>0.15){
                                phase1 = -w*sqrt(kz1)*dz/v1;
                                cshift1 = cmplx(cos(phase1), sin(phase1));
                                cq[iw][ik] = cmul(cq[iw][ik],cshift1);
                                cq1[iw][ik] = cmul(cq1[iw][ik],cshift1);
                                }
                                else{
                                cq[iw][ik] = cq1[iw][ik] = cmplx(0.0,0.0);
                              }
                        }
        
                pfa2cc(1,1,nk,nw,cq[0]);
                pfa2cc(1,1,nk,nw,cq1[0]);

               for(ix=0;ix<nx;++ix)
                        for(iw=0,w=fw;iw<nw;w+=dw,++iw){
                 
                float a=0.015,g=1.0;
                int I=10;
                                
                if(ix<=I)g=exp(-a*(I-ix)*(I-ix));
                if(ix>=nx-I)g=exp(-a*(-nx+I+ix)*(-nx+I+ix));
                                 
                                
                                cq[iw][ix] = crmul( cq[iw][ix],1.0/nxfft);
                                cq[iw][ix] =ix%2 ? cneg(cq[iw][ix]) : cq[iw][ix];
                                kz2=(1.0/v1-1.0/v[iz][ix])*w*dz;
                                cshift2=cmplx(cos(kz2),sin(kz2));
                                cp[iw][ix]=cmul(cq[iw][ix],cshift2);
                
                                cq1[iw][ix] = crmul( cq1[iw][ix],1.0/nxfft);
                                cq1[iw][ix] =ix%2 ? cneg(cq1[iw][ix]) : cq1[iw][ix];
                                cp1[iw][ix]=cmul(cq1[iw][ix],cshift2);
                 
                        }
                
                                
d462 5
a466 5
                tr.ns = nz ;
                tr.dt = dz*1000000.0 ;
                tr.d2 = dx;
                tr.offset = 0; 
                tr.cdp = tr.tracl = ix;
d483 1
a483 1
        
d490 1
a490 1
         
d492 1
a492 1
        
@


1.2
log
@small changes
@
text
@d1 1
a1 1
/* SUMIGPRESP: $Vision: 1.00 $ ; $Date: 1998/05/04 18:08:16 $*/
d7 1
a7 1
#include <time.h>
d60 1
a60 1
static time_t t1,t2;
d136 1
a136 1
	time(&t1);
d446 1
d449 1
@


1.1
log
@Initial revision
@
text
@d1 1
a1 4
/* Copyright (c) Colorado School of Mines, 1998.*/
/* All rights reserved.                       */

/* SUMIGPRESP: $Vision: 1.00 $ ; $Date: 1998/04/19 22:00:00 $*/
a8 1
float * ricker(float Freq,float dt,int *Npoint);
d53 3
@
