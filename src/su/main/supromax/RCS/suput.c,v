head	1.7;
access;
symbols;
locks; strict;
comment	@ * @;


1.7
date	2011.11.16.23.23.25;	author john;	state Exp;
branches;
next	1.6;

1.6
date	2011.11.12.00.39.45;	author john;	state Exp;
branches;
next	1.5;

1.5
date	2008.05.05.20.50.44;	author john;	state Exp;
branches;
next	1.4;

1.4
date	2003.06.09.16.17.07;	author john;	state Exp;
branches;
next	1.3;

1.3
date	97.07.28.22.36.46;	author john;	state Exp;
branches;
next	1.2;

1.2
date	94.09.06.10.21.11;	author jkc;	state Exp;
branches;
next	1.1;

1.1
date	94.07.27.13.30.46;	author john;	state Exp;
branches;
next	;


desc
@put su traces for outside processing packages
@


1.7
log
@added Reg Beardsley's checkpar()
@
text
@/* Copyright (c) Colorado School of Mines, 2011.*/
/* All rights reserved.                       */

/* SUPUT: $Revision: 1.5 $ ; $Date: 2008/05/05 20:50:44 $                */

#include "su.h"
#include "segy.h"

/*********************** self documentation **********************/
char *sdoc[]={
"									",
" SUPUT - Connect SU program to file descriptor for output stream.	",
"									",
"       su_module | suput fp=$1						",
"									",
" This program is for interfacing \" outside processing systems \"	",
" with SU. Typically, the outside system would execute the SU command file.",
" The outside system provides the file descriptor it would like to read	",
" from to the command file to be an argument for suput.			",
"									",
" Example: su_module | suput fp=$1					",
"									",
"       fd=-1       file_descriptor_for_output_stream_from_su		",
"       verbose=0   minimal listing					",
"                   =1  asks for message with each trace processed.	",
NULL};

/*
 * Author: John Anderson (visiting scholar from Mobil) July 1994
 */

/**************** end self doc ********************************/

void fputtrn(FILE *fp, segy *tp);

segy tr;
int main(int argc, char **argv)
{
	FILE *fp;
	int fd,nread=0,verbose;

	initargs(argc,argv);
	requestdoc(1);

	if(!getparint("fd",&fd)) fd=-1;
	fprintf(stderr,"File descriptor passed to suput = %d\n",fd);

	if(!getparint("verbose",&verbose)) verbose=0; 
        checkpars();

	if( (fp = (FILE *) fdopen(fd,"w"))==NULL) err("Bad file descriptor \n");

	if(!gettr(&tr)) err("Can't get first trace \n");
	do{
		if(verbose>0){
			warn("suput: read input traces %d", nread);
			nread++;
		}

		fputtr(fp,&tr);
	} while(gettr(&tr));

	(void) fclose(fp);
	return(CWP_Exit());
}
@


1.6
log
@copyright
@
text
@d49 2
@


1.5
log
@explicit cast on fdopen
@
text
@d1 4
a4 1
/* SUPUT: $Revision: 1.4 $ ; $Date: 2003/06/09 16:17:07 $                */
@


1.4
log
@9 June 2003
@
text
@d1 1
a1 1
/* SUPUT: $Revision: 1.3 $ ; $Date: 1997/07/28 22:36:46 $                */
d46 1
a46 1
	if( (fp = fdopen(fd,"w"))==NULL) err("Bad file descriptor \n");
@


1.3
log
@changes suggested by Stew Levin to silence SGI compiler warnings, etc
@
text
@d1 1
a1 1
/* SUPUT: $Revision: 1.2 $ ; $Date: 1994/09/06 10:21:11 $                */
d59 1
a59 1
	return (EXIT_SUCCESS);
@


1.2
log
@Added include of segy.h
@
text
@d1 1
a1 1
/* SUPUT: $Revision: 1.1 $ ; $Date: 94/07/27 13:30:46 $                */
d37 1
a37 1
	int fd,nread=0,verbose,j;
d58 1
a58 1
	j=fclose(fp);
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/* SUPUT: $Revision: 1.25 $ ; $Date: 94/06/02 15:28:20 $                */
d4 1
@
