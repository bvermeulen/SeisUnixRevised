head	1.14;
access;
symbols;
locks; strict;
comment	@ * @;


1.14
date	2011.11.16.17.23.05;	author john;	state Exp;
branches;
next	1.13;

1.13
date	2011.11.11.23.58.23;	author john;	state Exp;
branches;
next	1.12;

1.12
date	2005.12.07.17.11.15;	author john;	state Exp;
branches;
next	1.11;

1.11
date	2005.10.04.16.42.43;	author john;	state Exp;
branches;
next	1.10;

1.10
date	2003.06.09.16.17.07;	author john;	state Exp;
branches;
next	1.9;

1.9
date	96.09.13.21.49.05;	author john;	state Exp;
branches;
next	1.8;

1.8
date	96.02.07.16.27.47;	author jkc;	state Exp;
branches;
next	1.7;

1.7
date	94.08.25.15.01.51;	author jkc;	state Exp;
branches;
next	1.6;

1.6
date	92.10.26.11.11.31;	author john;	state Exp;
branches;
next	1.5;

1.5
date	91.09.05.08.52.38;	author jkcohen;	state Exp;
branches;
next	1.4;

1.4
date	91.03.22.16.05.28;	author jkc;	state Exp;
branches;
next	1.3;

1.3
date	90.11.17.15.47.47;	author jkc;	state Exp;
branches;
next	1.2;

1.2
date	90.11.17.15.30.29;	author jkc;	state Exp;
branches;
next	1.1;

1.1
date	90.11.17.15.22.26;	author jkc;	state Exp;
branches;
next	;


desc
@Zero out portion of a trace
@


1.14
log
@added Reg Beardsley's checkpar
@
text
@/* Copyright (c) Colorado School of Mines, 2011.*/
/* All rights reserved.                       */

/* SUZERO: $Revision: 1.12 $ ; $Date: 2005/12/07 17:11:15 $	*/

#include "su.h"
#include "segy.h"

/*********************** self documentation **********************/
char *sdoc[] = {
" 								",
" SUZERO -- zero-out (or set constant) data within a time window	",
" 								",
" suzero itmax= < indata > outdata				",
" 								",
" Required parameters						",
" 	itmax=		last time sample to zero out		",
" 								",
" Optional parameters						",
" 	itmin=0		first time sample to zero out		",
" 	value=0		value to set				",
" 								",
" See also: sukill, sumute					",
" 								",
NULL};

/* Credits:
 *	CWP: Chris
 *	Geocon: Garry Perratt (added value= option)
 *
 * Trace header fields accessed: ns
 */
/**************** end self doc ***********************************/


segy tr;

int
main(int argc, char **argv)
{
	int itmin;		/* first sample to zero out		*/
	int itmax;		/* last sample to zero out	 	*/
	float value;		/* value to set within window		*/
	int nt;			/* time samples per trace in input data	*/

	/* Initialize */
	initargs(argc, argv);
	requestdoc(1);

	/* Get information from first trace */
	if (!gettr(&tr)) err("can't get first trace");
	nt = tr.ns;

	/* Get params from user */
	MUSTGETPARINT("itmax", &itmax);
	if (!getparint("itmin", &itmin))	itmin = 0;
	if (!getparfloat("value", &value))	value = 0.0;
        checkpars();

	/* Error checking */
	if (itmax > nt)    err("itmax = %d, must be < nt", itmax);
	if (itmin < 0)     err("itmin = %d, must not be negative", itmin);
	if (itmax < itmin) err("itmax < itmin, not allowed");

	/* Main loop over traces */
	do { 
		register int i;
		for (i = itmin; i <= itmax; ++i)  tr.data[i] = value;
		
		puttr(&tr);
	} while(gettr(&tr));


	return(CWP_Exit());
}
@


1.13
log
@copyright
@
text
@d58 1
@


1.12
log
@7 Dec 2005 version
@
text
@d1 4
a4 1
/* SUZERO: $Revision: 1.11 $ ; $Date: 2005/10/04 16:42:43 $	*/
@


1.11
log
@4 Oct 2005
@
text
@d1 71
a71 71
/* SUZERO: $Revision: 1.10 $ ; $Date: 2003/06/09 16:17:07 $	*/

#include "su.h"
#include "segy.h"

/*********************** self documentation **********************/
char *sdoc[] = {
" 								",
" SUZERO -- zero-out (or set constant) data within a time window	",
" 								",
" suzero itmax= < indata > outdata				",
" 								",
" Required parameters						",
" 	itmax=		last time sample to zero out		",
" 								",
" Optional parameters						",
" 	itmin=0		first time sample to zero out		",
" 	value=0		value to set				",
" 								",
" See also: sukill, sumute					",
" 								",
NULL};

/* Credits:
 *	CWP: Chris
 *	Geocon: Garry Perratt (added value= option)
 *
 * Trace header fields accessed: ns
 */
/**************** end self doc ***********************************/


segy tr;

int
main(int argc, char **argv)
{
	int itmin;		/* first sample to zero out		*/
	int itmax;		/* last sample to zero out	 	*/
	float value;		/* value to set within window		*/
	int nt;			/* time samples per trace in input data	*/

	/* Initialize */
	initargs(argc, argv);
	requestdoc(1);

	/* Get information from first trace */
	if (!gettr(&tr)) err("can't get first trace");
	nt = tr.ns;

	/* Get params from user */
	MUSTGETPARINT("itmax", &itmax);
	if (!getparint("itmin", &itmin))	itmin = 0;
	if (!getparfloat("value", &value))	value = 0.0;

	/* Error checking */
	if (itmax > nt)    err("itmax = %d, must be < nt", itmax);
	if (itmin < 0)     err("itmin = %d, must not be negative", itmin);
	if (itmax < itmin) err("itmax < itmin, not allowed");

	/* Main loop over traces */
	do { 
		register int i;
		for (i = itmin; i <= itmax; ++i)  tr.data[i] = value;
		
		puttr(&tr);
	} while(gettr(&tr));


	return(CWP_Exit());
}
@


1.10
log
@9 June 2003
@
text
@d1 71
a71 67
/* SUZERO: $Revision: 1.9 $ ; $Date: 1996/09/13 21:49:05 $	*/

#include "su.h"
#include "segy.h"

/*********************** self documentation **********************/
char *sdoc[] = {
" 								",
" SUZERO -- zero-out data within a time window	 		",
" 								",
" suzero itmax= < indata > outdata				",
" 								",
" Required parameters						",
" 	itmax=		last time sample to zero out		",
" 								",
" Optional parameters						",
" 	itmin=0		first time sample to zero out		",
" 								",
" See also: sukill, sumute					",
" 								",
NULL};

/* Credits:
 *	CWP: Chris
 *
 * Trace header fields accessed: ns
 */
/**************** end self doc ***********************************/


segy tr;

int
main(int argc, char **argv)
{
	int itmin;		/* first sample to zero out		*/
	int itmax;		/* last sample to zero out	 	*/
	int nt;			/* time samples per trace in input data	*/

	/* Initialize */
	initargs(argc, argv);
	requestdoc(1);

	/* Get information from first trace */
	if (!gettr(&tr)) err("can't get first trace");
	nt = tr.ns;

	/* Get params from user */
	MUSTGETPARINT("itmax", &itmax);
	if (!getparint("itmin", &itmin))	itmin = 0;

	/* Error checking */
	if (itmax > nt)    err("itmax = %d, must be < nt", itmax);
	if (itmin < 0)     err("itmin = %d, must not be negative", itmin);
	if (itmax < itmin) err("itmax < itmin, not allowed");

	/* Main loop over traces */
	do { 
		register int i;
		for (i = itmin; i <= itmax; ++i)  tr.data[i] = 0.0;
		
		puttr(&tr);
	} while(gettr(&tr));


	return(CWP_Exit());
}
@


1.9
log
@silenced -Wall messages
@
text
@d1 1
a1 1
/* SUZERO: $Revision: 1.8 $ ; $Date: 1996/02/07 16:27:47 $	*/
d66 1
a66 1
	return EXIT_SUCCESS;
@


1.8
log
@Deal with header fields accessed/modified down to sudoc.
@
text
@d1 1
a1 1
/* SUZERO: $Revision: 1.7 $ ; $Date: 1994/08/25 15:01:51 $	*/
d33 1
@


1.7
log
@Removed copyright statement from codes that had it.
Moved self-doc line for sudoc.
@
text
@d1 1
a1 1
/* SUZERO: $Revision: 1.6 $ ; $Date: 92/10/26 11:11:31 $	*/
d26 1
@


1.6
log
@new selfdoc installed
@
text
@d1 1
a1 1
/* SUZERO: $Revision: 1.5 $ ; $Date: 91/09/05 08:52:38 $	*/
a2 13
/*----------------------------------------------------------------------
 * Copyright (c) Colorado School of Mines, 1990.
 * All rights reserved.
 *
 * This code is part of SU.  SU stands for Seismic Unix, a processing line
 * developed at the Colorado School of Mines, partially based on Stanford
 * Exploration Project (SEP) software.  Inquiries should be addressed to:
 *
 *  Jack K. Cohen, Center for Wave Phenomena, Colorado School of Mines,
 *  Golden, CO 80401  (jkc@@dix.colorado.edu)
 *----------------------------------------------------------------------
 */

a21 1
/**************** end self doc ***********************************/
d27 1
@


1.5
log
@string -> String and so forth
@
text
@d1 1
a1 1
/* SUZERO: $Revision: 1.3 $ ; $Date: 90/11/17 15:47:47 $	*/
d20 15
a34 15
String sdoc =
" 								\n"
" SUZERO -- zero-out data within a time window	 		\n"
" 								\n"
" suzero itmax= < indata > outdata				\n"
" 								\n"
" Required parameters						\n"
" 	itmax=		last time sample to zero out		\n"
" 								\n"
" Optional parameters						\n"
" 	itmin=0		first time sample to zero out		\n"
" 								\n"
" See also: sukill, sumute					\n"
" 								\n"
;
d53 1
a53 1
	askdoc(1);
@


1.4
log
@tweaks to selfdoc
@
text
@d20 1
a20 1
string sdoc =
@


1.3
log
@Bug fix == -> = (ulp)
@
text
@d1 1
a1 1
/* SUZERO: $Revision: 1.2 $ ; $Date: 90/11/17 15:30:29 $	*/
d48 1
a48 1
	int itmax;		/* last sample to zero outcounter 	*/
d69 1
a69 1
	do {
a70 1

d72 1
a72 1

a73 1

@


1.2
log
@Clean up for ANSI C, etc.
@
text
@d1 1
a1 1
/* SUZERO: $Revision: 1.1 $ ; $Date: 90/11/17 15:22:26 $	*/
d64 3
a66 3
	if (itmax > nt)    err("itmax = %d, must be < nt",itmax);
	if (itmin < 0)     err("itmin = %d, must not be negative",itmin);
	if (itmax < itmin) err("itmax < itmin not allowed");
d72 1
a72 1
		for (i = itmin; i <= itmax; ++i)  tr.data[i] == 0.0;
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/* SUZERO: $Revision: 2.6 $ ; $Date: 89/05/25 16:55:20 $	*/
d20 15
a34 13
string sdoc = "\
								\n\
SUZERO -- zero-out data within a time window	 		\n\
								\n\
suzero itmax= < indata > outdata				\n\
								\n\
Required parameters						\n\
	itmax=		last time sample to zero out		\n\
								\n\
Optional parameters						\n\
	itmin=0		first time sample to zero out		\n\
								\n\
";
a46 2
	float zero = 0.0;	/* 					*/
	int i;			/* counter			 	*/
d59 3
a61 3
	/* get params from user */
	MUSTIGETPAR("itmax",&itmax);
	if (!igetpar("itmin",&itmin))	itmin = 0;
d63 4
a66 4
	/* error checking */
	if ( itmax > nt ) err("itmax = %d, must be < nt",itmax);
	if ( itmin < 0 ) err("itmin = %d, must not be negative",itmin);
	if ( itmax < itmin ) err("itmax < itmin, not allowed");
d70 1
a70 4
		/* zero the data */
		for (i = itmin; i <= itmax; i++) {
			tr.data[i] *= zero;
		}
d72 2
a73 1
		/* Output the scaled trace */
@
