head	1.8;
access;
symbols;
locks; strict;
comment	@ * @;


1.8
date	2011.12.21.23.19.56;	author john;	state Exp;
branches;
next	1.7;

1.7
date	2011.11.16.17.23.05;	author john;	state Exp;
branches;
next	1.6;

1.6
date	2011.11.11.23.58.23;	author john;	state Exp;
branches;
next	1.5;

1.5
date	2010.01.25.22.52.50;	author john;	state Exp;
branches;
next	1.4;

1.4
date	2009.07.13.21.40.56;	author john;	state Exp;
branches;
next	1.3;

1.3
date	2008.05.05.20.46.56;	author john;	state Exp;
branches;
next	1.2;

1.2
date	2006.03.10.20.43.09;	author john;	state Exp;
branches;
next	1.1;

1.1
date	2003.06.09.16.17.07;	author john;	state Exp;
branches;
next	;


desc
@y
dealing with nan's
@


1.8
log
@isfinite replaces finite
@
text
@/* Copyright (c) Colorado School of Mines, 2011.*/
/* All rights reserved.                       */

/* SUNAN: $Revision: 1.7 $ ; $Date: 2011/11/16 17:23:05 $        */

#include <math.h>
#include "su.h"
#include "segy.h"

/*********************** self documentation **********************/
char *sdoc[]={
"								",
" SUNAN - remove NaNs & Infs from the input stream		",
"								",
"    sunan < in.su >out.su					",
"								",
" Optional parameters:						",
" verbose=1	echo locations of NaNs or Infs to stderr	",
"	        =0 silent					",
" ...user defined ... 						",
"								",
" value=0.0	NaNs and Inf replacement value			",
" ... and/or....						",
" interp=0	=1 replace NaNs and Infs by interpolating	",
"                   neighboring finite values			",
"								",
" Notes:							",
" A simple program to remove NaNs and Infs from an input stream.",
" The program sets NaNs and Infs to \"value\" if interp=0. When	",
" interp=1 NaNs are replaced with the average of neighboring values",
" provided that the neighboring values are finite, otherwise	",
" NaNs and Infs are replaced by \"value\".			",
NULL};

/*
 * Author: Reginald H. Beardsley  2003   rhb@@acm.org
 *
 *  A simple program to remove NaNs & Infs from an input stream. They
 *  shouldn't be there, but it can be hard to find the cause and fix
 *  the problem if you can't look at the data.
 *
 *  Interpolation idea comes from a version of sunan modified by
 *  Balasz Nemeth while at Potash Corporation in Saskatchewan.
 *
 */

/**************** end self doc ********************************/

segy tr;

int
main(int argc, char **argv)
{

	int i;			/* counter			*/
	int itr=0;		/* trace counter		*/
	int verbose;		/* =0 silent,  =1 chatty	*/
	int interp;		/* =1 interpolate to get NaN	*/
				/* and Inf replacement values	*/
			
	float value;		/* value to set NaN and Infs to */

	/* Initialize */
   	initargs(argc,argv);
   	requestdoc(1);

	/* Get info from first trace */
	if(!gettr(&tr) ) err("Can't get first trace \n");

	/* Get parameters */
	if(!getparint("verbose",&verbose))	verbose = 1;
	if(!getparint("interp",&interp))	interp = 0;
	if(!getparfloat("value",&value))	value = 0.0;
        checkpars();

	/* Loop over traces */
	do{
		++itr;
      		for(i=0; i<tr.ns; ++i){
		    if(!isfinite(tr.data[i])) {
		       if (verbose)
	                warn("found NaN trace = %d  sample = %d", itr, i);

			if (interp) { /* interpolate nearest neighbors */
				      /* for NaN replacement value     */
				if (i==0 && isfinite(tr.data[i+1])) { 
					tr.data[i]=tr.data[i+1];
				} else if(i==tr.ns-1 && isfinite(tr.data[i-2])) {
					tr.data[i]= tr.data[i-2];
				} else if( isfinite(tr.data[i-1]) &&
						isfinite(tr.data[i+1]) ) {
					tr.data[i]=(tr.data[i-1]+tr.data[i+1])/2.0;
				}
			}
				
			/* use user defined NaNs replacement value */
            	       	tr.data[i] = value;
			}
		    }

      		puttr(&tr);
	} while(gettr(&tr));

	return(CWP_Exit());
}
@


1.7
log
@added Reg Beardsley's checkpar
@
text
@d4 1
a4 1
/* SUNAN: $Revision: 1.5 $ ; $Date: 2010/01/25 22:52:50 $        */
a9 4
#ifdef SUN
#include <ieeefp.h>
#endif

d80 1
a80 1
		    if(!finite(tr.data[i])) {
d86 1
a86 1
				if (i==0 && finite(tr.data[i+1])) { 
d88 1
a88 1
				} else if(i==tr.ns-1 && finite(tr.data[i-2])) {
d90 2
a91 2
				} else if( finite(tr.data[i-1]) &&
						finite(tr.data[i+1]) ) {
@


1.6
log
@copyright
@
text
@d78 1
@


1.5
log
@added user specified "replacement value" for nans.
@
text
@d1 4
a4 1
/* SUNAN: $Revision: 1.4 $ ; $Date: 2009/07/13 21:40:56 $        */
@


1.4
log
@added user specified value, inspired by Balazs Nemeth's version of this
code.
@
text
@d1 1
a1 1
/* SUNAN: $Revision: 1.3 $ ; $Date: 2008/05/05 20:46:56 $        */
d21 6
a26 1
" value=0.0	new value for the NaNs				",
d30 4
a33 2
" The program sets NaNs and Infs to value.			",
"								",
d43 3
d59 3
a61 1

d73 2
a74 1
	if(!getfloat("value",&value))	value = 0.0;
d81 1
a81 1
		       if(verbose)
d84 15
a98 1
            	       tr.data[i] = value;
a99 1
         	}
@


1.3
log
@small changes
@
text
@d1 1
a1 1
/* SUNAN: $Revision: 1.2 $ ; $Date: 2006/03/10 20:43:09 $        */
d16 1
a16 1
"    sunan <in.su >out.su					",
d21 1
d25 1
a25 1
" The program sets NaNs and Infs to 0.0.			",
d50 2
d61 1
d71 1
a71 1
            	       tr.data[i] = 0.0;
@


1.2
log
@changed EXIT_SUCCESS to return(CWP_E
@
text
@d1 1
a1 1
/* SUNAN: $Revision: 1.1 $ ; $Date: 2003/06/09 16:17:07 $        */
d7 4
d30 1
a30 1
 * 
d34 1
a34 1
 * 
d41 1
a41 1
int 
d58 1
a58 1
        
d64 1
a64 1
		       if(verbose) 
d71 1
a71 1
      		puttr(&tr); 
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/* SUNAN: $Revision: 1.15 $ ; $Date: 1998/08/24 20:10:26 $        */
d70 1
a70 1
	return (EXIT_SUCCESS);
@
