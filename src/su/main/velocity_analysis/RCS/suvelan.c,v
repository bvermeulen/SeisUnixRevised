head	1.20;
access;
symbols;
locks; strict;
comment	@ * @;


1.20
date	2011.11.16.23.40.27;	author john;	state Exp;
branches;
next	1.19;

1.19
date	2011.11.12.00.43.16;	author john;	state Exp;
branches;
next	1.18;

1.18
date	2003.06.09.16.17.07;	author john;	state Exp;
branches;
next	1.17;

1.17
date	98.05.26.16.24.06;	author john;	state Exp;
branches;
next	1.16;

1.16
date	97.07.28.22.36.46;	author john;	state Exp;
branches;
next	1.15;

1.15
date	96.09.13.21.49.05;	author john;	state Exp;
branches;
next	1.14;

1.14
date	96.05.01.18.56.02;	author jkc;	state Exp;
branches;
next	1.13;

1.13
date	96.02.22.15.56.24;	author jkc;	state Exp;
branches;
next	1.12;

1.12
date	96.02.07.16.10.47;	author jkc;	state Exp;
branches;
next	1.11;

1.11
date	96.02.07.16.06.49;	author jkc;	state Exp;
branches;
next	1.10;

1.10
date	95.11.06.16.32.41;	author john;	state Exp;
branches;
next	1.9;

1.9
date	95.10.18.15.52.52;	author jkc;	state Exp;
branches;
next	1.8;

1.8
date	95.08.04.15.52.34;	author jkc;	state Exp;
branches;
next	1.7;

1.7
date	95.01.19.11.45.04;	author john;	state Exp;
branches;
next	1.6;

1.6
date	94.08.25.15.01.38;	author jkc;	state Exp;
branches;
next	1.5;

1.5
date	93.11.29.14.46.25;	author john;	state Exp;
branches;
next	1.4;

1.4
date	92.10.23.16.25.37;	author john;	state Exp;
branches;
next	1.3;

1.3
date	91.09.05.08.52.29;	author jkcohen;	state Exp;
branches;
next	1.2;

1.2
date	91.06.27.13.59.25;	author jkcohen;	state Exp;
branches
	1.2.1.1;
next	1.1;

1.1
date	90.11.15.10.43.46;	author jkc;	state Exp;
branches;
next	;

1.2.1.1
date	91.10.11.10.45.37;	author jkc;	state Exp;
branches;
next	;


desc
@Interactive velocity analysis
uses X windows
@


1.20
log
@added Reg Beardsley's checkpar()
@
text
@/* Copyright (c) Colorado School of Mines, 2011.*/
/* All rights reserved.                       */

/* SUVELAN: $Revision: 1.18 $ ; $Date: 2003/06/09 16:17:07 $		*/

#include "su.h"
#include "segy.h"

/*********************** self documentation **********************************/
char *sdoc[] = {
"									     ",
" SUVELAN - compute stacking velocity semblance for cdp gathers		     ",
"									     ",
" suvelan <stdin >stdout [optional parameters]				     ",
"									     ",
" Optional Parameters:							     ",
" nv=50                   number of velocities				     ",
" dv=50.0                 velocity sampling interval			     ",
" fv=1500.0               first velocity				     ",
" anis1=0.0               quartic term, numerator of an extended quartic term",
" anis2=0.0               in denominator of an extended quartic term         ",
" smute=1.5               samples with NMO stretch exceeding smute are zeroed",
" dtratio=5               ratio of output to input time sampling intervals   ",
" nsmooth=dtratio*2+1     length of semblance num and den smoothing window   ",
" verbose=0               =1 for diagnostic print on stderr		     ",
" pwr=1.0                 semblance value to the power      		     ",
"									     ",
" Notes:								     ",
" Velocity analysis is usually a two-dimensional screen for optimal values of",
" the vertical two-way traveltime and stacking velocity. But if the travel-  ",
" time curve is no longer close to a hyperbola, the quartic term of the      ",
" traveltime series should be considered. In its easiest form (with anis2=0) ",
" the optimizion of all parameters requires a three-dimensional screen. This ",
" is done by a repetition of the conventional two-dimensional screen with a  ",
" variation of the quartic term. The extended quartic term is more accurate, ",
" though the function is no more a polynomial. When screening for optimal    ",
" values the theoretical dependencies between these paramters can be taken   ",
" into account. The traveltime function is defined by                        ",
"                                                                            ",
"                1            anis1                                          ",
" t^2 = t_0^2 + --- x^2 + ------------- x^4                                  ",
"               v^2       1 + anis2 x^2                                      ",
"                                                                            ",
" The coefficients anis1, anis2 are assumed to be small, that means the non- ",
" hyperbolicity is assumed to be small. Triplications cannot be handled.     ",
"                                                                            ",
" Semblance is defined by the following quotient:			     ",
"									     ",
"                 n-1                 					     ",
"               [ sum q(t,j) ]^2      					     ",
"                 j=0                 					     ",
"       s(t) = ------------------     					     ",
"                 n-1                 					     ",
"               n sum [q(t,j)]^2      					     ",
"                 j=0                 					     ",
"									     ",
" where n is the number of non-zero samples after muting.		     ",
" Smoothing (nsmooth) is applied separately to the numerator and denominator ",
" before computing this semblance quotient.				     ",
"									     ",
" Then, the semblance is set to the power of the parameter pwr. With pwr > 1 ",
" the difference between semblance values is stretched in the upper half of  ",
" the range of semblance values [0,1], but compressed in the lower half of   ",
" it; thus, the few large semblance values are enhanced. With pwr < 1 the    ",
" many small values are enhanced, thus more discernible against background   ",
" noise. Of course, always at the expanse of the respective other feature.   ",
"									     ",
" Input traces should be sorted by cdp - suvelan outputs a group of	     ",
" semblance traces every time cdp changes.  Therefore, the output will	     ",
" be useful only if cdp gathers are input.				     ",
NULL};

/* Credits:
 *	CWP, Colorado School of Mines:
 *           Dave Hale (everything except ...)
 *           Bjoern Rommel (... the quartic term)
 *      SINTEF, IKU Petroleumsforskning
 *           Bjoern Rommel (... the power-of-semblance function)
 *
 * Trace header fields accessed:  ns, dt, delrt, offset, cdp
 * Trace header fields modified:  ns, dt, offset, cdp
 */
/**************** end self doc *******************************************/

segy tr;

int
main(int argc, char **argv)
{
	int nv;		/* number of velocities */
	float dv;	/* velocity sampling interval */
	float fv;	/* first velocity */
        float anis1;    /* quartic term, or numerator of an extended one */
        float anis2;    /* inside denominator of an extended quartic term */
	int iv;		/* velocity index */
	int dtratio;	/* ratio of output to input sampling intervals */
	int nsmooth;	/* length in samples of num and den smoothing window */
	int nt;		/* number of time samples per input trace */
	float dt;	/* time sampling interval for input traces */
	float ft;	/* time of first sample input and output */
	int ntout;	/* number of output samples */
	float dtout;	/* time sampling interval for output traces */
	int it;		/* input time sample index */
	int itout;	/* output time sample index */
	int is;		/* time sample index for smoothing window */
	int ismin;	/* lower limit on is */
	int ismax;	/* upper limit on is */
	int itmute;	/* time sample index of first sample not muted */
	int iti;	/* time sample index used in linear interpolation */
	float ti;	/* normalized time for linear interpolation */
	float frac;	/* fractional distance from sample in interpolation */
	int gottrace;	/* =1 if an input trace was read */
	int verbose;	/* =1 for diagnostic print */
	long cdp;	/* cdp from current input trace header */
	long cdpprev;	/* cdp from previous input trace header */
	float smute;	/* NMO stretch mute factor */
	float offset;	/* offset from input trace header */
	float offovs;	/* (offset/velocity)^2 */
        float offan=0.0;    /* shift of tnmo due to anisotropy */
	float tn;	/* time after NMO */
	float tnmute;	/* mute time after NMO */
	float nsum;	/* semblance numerator sum */
	float dsum;	/* semblance denominator sum */
	float v;	/* velocity */
	float temp;	/* temporary scalar */
	float *data;	/* array[nt] of input trace */
	float *sem;	/* array[ntout] of semblance */
	float **num;	/* array[nv][nt] of semblance numerators */
	float **den;	/* array[nv][nt] of semblance denominators */
	float **nnz;	/* array[nv][nt] for counting non-zero samples */
	float pwr;      /* power of semblance */

	/* hook up getpar */
	initargs(argc,argv);
	requestdoc(0);

	/* get parameters from the first trace */
	if (!gettr(&tr)) err("can't get first trace");
	nt = tr.ns;
	dt = ((double) tr.dt)/1000000.0;
	ft = tr.delrt/1000.0;
	cdp = tr.cdp;
	offset = tr.offset;

	/* get optional parameters */
	if (!getparint("nv",&nv)) nv = 50;
	if (!getparfloat("dv",&dv)) dv = 50.0;
	if (!getparfloat("fv",&fv)) fv = 1500.0;
	if (!getparfloat("anis1",&anis1)) anis1 = 0.0;
	if (!getparfloat("anis2",&anis2)) anis2 = 0.0;
	if (!getparfloat("smute",&smute)) smute = 1.5;
	if (smute<=1.0) err("smute must be greater than 1.0");
	if (!getparint("dtratio",&dtratio)) dtratio = 5;
	if (!getparint("nsmooth",&nsmooth)) nsmooth = dtratio*2+1;
	if (!getparint("verbose",&verbose)) verbose = 0;
	if (!getparfloat("pwr",&pwr)) pwr = 1.0;
	if (pwr < 0.0)   
	  err("we are not looking for noise: pwr < 0");
	if (pwr == 0.0)   
	  err("we are creating an all-white semblance: pwr = 0");

        checkpars();
	/* determine output sampling */
	ntout = 1+(nt-1)/dtratio;   CHECK_NT("ntout",ntout);
	dtout = dt*dtratio;
	if (verbose) {
		fprintf(stderr,
			"\tnumber of output time samples is %d\n",ntout);
		fprintf(stderr,
			"\toutput time sampling interval is %g\n",dtout);
		fprintf(stderr,
			"\toutput time of first sample is %g\n",ft);
	}

	/* allocate memory */
	data = ealloc1float(nt);
	num = ealloc2float(nt,nv);
	den = ealloc2float(nt,nv);
	nnz = ealloc2float(nt,nv);
	sem = ealloc1float(ntout);

	/* zero accumulators */
	for (iv=0; iv<nv; ++iv) {
		for (it=0; it<nt; ++it) {
			num[iv][it] = 0.0;
			den[iv][it] = 0.0;
			nnz[iv][it] = 0.0;
		}
	}

	/* initialize flag */
	gottrace = 1;

	/* remember previous cdp */
	cdpprev = tr.cdp;

	/* loop over input traces */
	while (gottrace|(~gottrace)/*True*/) { /* middle exit loop */

		/* if got a trace */
		if (gottrace) {

			/* determine offset and cdp */
			offset = tr.offset;
			cdp = tr.cdp;
                        if ((1.0 + offset*offset*anis2) <= 0.0)
                           err ("anis2 too small");
                        offan = (offset*offset*offset*offset*anis1) / 
                                (1.0 + offset*offset*anis2);

			/* get trace samples */
			memcpy( (void *) data,
				(const void *) tr.data,nt*sizeof(float));
		}

		/* if cdp has changed or no more input traces */
		if (cdp!=cdpprev || !gottrace) {

			/* set output trace header fields */
			tr.offset = 0;
			tr.cdp = (int) cdpprev;
			tr.ns = ntout;
			tr.dt = dtout*1000000.0;

			/* loop over velocities */
			for (iv=0; iv<nv; ++iv) {

				/* compute semblance quotients */
				for (itout=0; itout<ntout; ++itout) {
					it = itout*dtratio;
					ismin = it-nsmooth/2;
					ismax = it+nsmooth/2;
					if (ismin<0) ismin = 0;
					if (ismax>nt-1) ismax = nt-1;
					nsum = dsum = 0.0;
					for (is=ismin; is<ismax; ++is) {
						nsum += num[iv][is]*
							num[iv][is];
						dsum += nnz[iv][is]*
							den[iv][is];
					}
					sem[itout] = (dsum!=0.0?nsum/dsum:0.0);
				}

				/* powering the semblance */
				if (pwr != 1.0) {
				  for (itout=0; itout<ntout; ++itout)
				    sem[itout] = pow (sem[itout], pwr);
				};

				/* output semblances */
				memcpy((void *) tr.data,
				       (const void *) sem,ntout*sizeof(float));
				puttr(&tr);

				/* zero accumulators */
				for (it=0; it<nt; ++it) {
					num[iv][it] = 0.0;
					den[iv][it] = 0.0;
					nnz[iv][it] = 0.0;
				}
			}

			/* diagnostic print */
			if (verbose) 
				warn("semblance output for cdp=%d",cdpprev);

			/* if no more input traces, break input trace loop */
			if (!gottrace) break;

			/* remember previous cdp */
			cdpprev = cdp;
		}

		/* loop over velocities */
		for (iv=0,v=fv; iv<nv; ++iv,v+=dv) {
			
			/* compute offset/velocity squared */
			offovs = (offset*offset)/(v*v) + offan;
                        /* decrease of traveltime with distance due to highly
                           increasing velocity cannot be handled yet
                        */
                        if (offovs < 0.0)
                           warn("no moveout; check anis1 and anis2");

			/* determine mute time after nmo */
			tnmute = sqrt(offovs/(smute*smute-1.0));
			if (tnmute > ft) {
				itmute = (tnmute-ft)/dt;
			} else {
				itmute = 0 ;
			}
			
			/* do nmo via quick and dirty linear interpolation
			   (accurate enough for velocity analysis) and
			   accumulate semblance numerator and denominator
			*/

			for (it=itmute,tn=ft+itmute*dt; it<nt; ++it,tn+=dt) {
				ti = (sqrt(tn*tn+offovs)-ft)/dt;
				iti = ti;
				if (iti<nt-1) {
					frac = ti-iti;
					temp = (1.0-frac)*data[iti]+
						frac*data[iti+1];
					if (temp!=0.0) {
						num[iv][it] += temp;
						den[iv][it] += temp*temp;
						nnz[iv][it] += 1.0;
					}
				}
			}
		}

		/* get next trace (if there is one) */
		if (!gettr(&tr)) gottrace = 0;

	}

	return(CWP_Exit());
}
@


1.19
log
@copyright
@
text
@d162 1
@


1.18
log
@9 June 2003
@
text
@d1 4
a4 1
/* SUVELAN: $Revision: 1.17 $ ; $Date: 1998/05/26 16:24:06 $		*/
@


1.17
log
@Bjoern Rommel's latest update
@
text
@d1 1
a1 1
/* SUVELAN: $Revision: 1.16 $ ; $Date: 1997/07/28 22:36:46 $		*/
d316 1
a316 1
	return EXIT_SUCCESS;
@


1.16
log
@changes suggested by Stew Levin to silence SGI compiler warnings, etc
@
text
@d1 1
a1 1
/* SUVELAN: $Revision: 1.15 $ ; $Date: 1996/09/13 21:49:05 $		*/
d23 1
d42 1
a42 1
" hyperbolicity is small. Triplications cannot be handled.                   ",
d58 7
d71 5
a75 2
 *	CWP: Dave
 *         : Bjoern (inserting the quartic term)
d128 1
d153 5
d241 6
a317 1

@


1.15
log
@silenced -Wall messages
@
text
@d1 1
a1 1
/* SUVELAN: $Revision: 1.14 $ ; $Date: 1996/05/01 18:56:02 $		*/
d177 1
a177 1
	while (true) { /* middle exit loop */
d200 1
a200 1
			tr.cdp = cdpprev;
@


1.14
log
@./main/suvelan.c
"suvelan.c", line 295: warning: done set but not used in function main
"
Changed main loop to a "while (true)" and ditched "done" variable
which should make the intent of the code clearer.
@
text
@d1 1
a1 1
/* SUVELAN: $Revision: 1.13 $ ; $Date: 1996/02/22 15:56:24 $		*/
d105 1
a105 1
        float offan;    /* shift of tnmo due to anisotropy */
@


1.13
log
@Using CHECK_NT to check output number of samples against SU_NFLTS.
@
text
@d1 1
a1 1
/* SUVELAN: $Revision: 1.12 $ ; $Date: 1996/02/07 16:10:47 $		*/
a98 1
	int done;	/* =1 if done with everything */
d170 1
a170 1
	/* initialize flags */
a171 1
	done = 0;
d177 1
a177 1
	do {
d291 1
a291 1
	} while (!done);
@


1.12
log
@Deal with header fields accessed/modified down to sudoc.
@
text
@d1 1
a1 1
/* SUVELAN: $Revision: 1.11 $ ; $Date: 1996/02/07 16:06:49 $		*/
d73 1
d144 1
a144 1
	ntout = 1+(nt-1)/dtratio;
@


1.11
log
@Deal with header fields accessed/modified down to sudoc.
@
text
@d1 1
a1 1
/* SUVELAN: $Revision: 1.10 $ ; $Date: 1995/11/06 16:32:41 $		*/
d67 1
a67 1
 * Trace header fields modified:  ns, dt, offset
@


1.10
log
@changed if (offovs <= 0.0)err ("no moveout; check anis1 and anis2");
to:   if (offovs < 0.0) warn("no moveout; check anis1 and anis2");
on the suggestion of Gabriel Alvarez, who said that the original
condition was too stringent.
@
text
@d1 1
a1 1
/* SUVELAN: $Revision: 1.9 $ ; $Date: 1995/10/18 15:52:52 $		*/
a59 3
"									     ",
" Trace header fields accessed:  ns, dt, delrt, offset, cdp.		     ",
" Trace header fields modified:  ns, dt, offset.			     ",
d65 3
@


1.9
log
@Added non-hyperbolic moveout due to anisotropy--Bjoern Rommel.
@
text
@d1 1
a1 1
/* SUVELAN: $Revision: 1.8 $ ; $Date: 1995/08/04 15:52:34 $		*/
d240 1
a240 2
				fprintf(stderr,
				"\tsemblance output for cdp=%d\n",cdpprev);
d257 2
a258 2
                        if (offovs <= 0.0)
                           err ("no moveout; check anis1 and anis2");
@


1.8
log
@Cast tr.dt to signed data type.
@
text
@d1 1
a1 1
/* SUVELAN: $Revision: 1.7 $ ; $Date: 1995/01/19 11:45:04 $		*/
d6 1
a6 1
/*********************** self documentation ******************************/
d8 11
a18 9
"									",
" SUVELAN - compute stacking velocity semblance for cdp gathers		",
"									",
" suvelan <stdin >stdout [optional parameters]				",
"									",
" Optional Parameters:							",
" nv=50                   number of velocities				",
" dv=50.0                 velocity sampling interval			",
" fv=1500.0               first velocity				",
d20 43
a62 25
" dtratio=5               ratio of output to input time sampling intervals",
" nsmooth=dtratio*2+1     length of semblance num and den smoothing window",
" verbose=0               =1 for diagnostic print on stderr		",
"									",
" Notes:								",
" Semblance is defined by the following quotient:			",
"									",
"                 n-1                 					",
"               [ sum q(t,j) ]^2      					",
"                 j=0                 					",
"       s(t) = ------------------     					",
"                 n-1                 					",
"               n sum [q(t,j)]^2      					",
"                 j=0                 					",
"									",
" where n is the number of non-zero samples after muting.		",
" Smoothing (nsmooth) is applied separately to the numerator and denominator",
" before computing this semblance quotient.				",
"									",
" Input traces should be sorted by cdp - suvelan outputs a group of	",
" semblance traces every time cdp changes.  Therefore, the output will	",
" be useful only if cdp gathers are input.				",
"									",
" Trace header fields accessed:  ns, dt, delrt, offset, cdp.		",
" Trace header fields modified:  ns, dt, offset.			",
d67 1
d78 2
d105 1
d134 2
d186 4
d227 1
a227 1
					(const void *) sem,ntout*sizeof(float));
d254 6
a259 1
			offovs = (offset*offset)/(v*v);
d297 1
@


1.7
log
@cosmetic
@
text
@d1 1
a1 1
/* SUVELAN: $Revision: 1.6 $ ; $Date: 94/08/25 15:01:38 $		*/
d101 1
a101 1
	dt = tr.dt/1000000.0;
@


1.6
log
@Removed copyright statement from codes that had it.
Moved self-doc line for sudoc.
@
text
@d1 1
a1 1
/* SUVELAN: $Revision: 1.5 $ ; $Date: 93/11/29 14:46:25 $		*/
d228 5
a232 1
			itmute = (tnmute-ft)/dt;
d235 4
a238 2
			/* (accurate enough for velocity analysis) and
			/* accumulate semblance numerator and denominator */
@


1.5
log
@changed bcopy to bzero
@
text
@d1 1
a1 1
/* SUVELAN: $Revision: 1.4 $ ; $Date: 92/10/23 16:25:37 $		*/
a2 13
/*----------------------------------------------------------------------
 * Copyright (c) Colorado School of Mines, 1990.
 * All rights reserved.
 *
 * This code is part of SU.  SU stands for Seismic Unix, a processing line
 * developed at the Colorado School of Mines, partially based on Stanford
 * Exploration Project (SEP) software.  Inquiries should be addressed to:
 *
 *  Jack K. Cohen, Center for Wave Phenomena, Colorado School of Mines,
 *  Golden, CO 80401  (jkc@@dix.mines.colorado.edu)
 *----------------------------------------------------------------------
 */

a43 1
/**************** end self doc *******************************************/
d48 1
@


1.4
log
@new selfdoc installed
@
text
@d1 1
a1 1
/* SUVELAN: $Revision: 1.3 $ ; $Date: 91/09/05 08:52:29 $		*/
d175 2
a176 1
			bcopy(tr.data,data,nt*sizeof(float));
d209 2
a210 1
				bcopy(sem,tr.data,ntout*sizeof(float));
@


1.3
log
@string -> String and so forth
@
text
@d1 1
a1 1
/* SUVELAN: $Revision: 1.1 $ ; $Date: 90/11/15 10:43:46 $		*/
d20 37
a56 37
String sdoc =
"\n"
"SUVELAN - compute stacking velocity semblance for cdp gathers\n"
"\n"
"suvelan <stdin >stdout [optional parameters]\n"
"\n"
"Optional Parameters:\n"
"nv=50                   number of velocities\n"
"dv=50.0                 velocity sampling interval\n"
"fv=1500.0               first velocity\n"
"smute=1.5               samples with NMO stretch exceeding smute are zeroed\n"
"dtratio=5               ratio of output to input time sampling intervals\n"
"nsmooth=dtratio*2+1     length of semblance num and den smoothing window\n"
"verbose=0               =1 for diagnostic print on stderr\n"
"\n"
"Notes:\n"
"Semblance is defined by the following quotient:\n"
"\n"
"                 n-1                 \n"
"               [ sum q(t,j) ]^2      \n"
"                 j=0                 \n"
"       s(t) = ------------------     \n"
"                 n-1                 \n"
"               n sum [q(t,j)]^2      \n"
"                 j=0                 \n"
"\n"
"where n is the number of non-zero samples after muting.\n"
"Smoothing (nsmooth) is applied separately to the numerator and denominator\n"
"before computing this semblance quotient.\n"
"\n"
"Input traces should be sorted by cdp - suvelan outputs a group of\n"
"semblance traces every time cdp changes.  Therefore, the output will\n"
"be useful only if cdp gathers are input.\n"
"\n"
"Trace header fields accessed:  ns, dt, delrt, offset, cdp.\n"
"Trace header fields modified:  ns, dt, offset.\n"
"\n";
d109 1
a109 1
	askdoc(0);
@


1.2
log
@Some donations by Serge: alternate normalization helpful with
sparse data and alternate picking on p's or sloths (jkc).
@
text
@d20 1
a20 1
string sdoc =
a29 3
"slowness=0              =0 velocity linearly incremented\n"
"                        =1 slowness linearly incremented\n"
"                        =2 slowness squared linearly incremented\n"
a32 4
"normpow=1               =1 each sample is divided by number of live  \n"
"                           traces after nmo\n"
"                        =0 each sample is divided by total\n"
"                           number of traces in cmp\n"
d60 1
a60 1
 *	CWP: Dave, Serge
a77 1
	int ifold;      /* fold counter */
a83 2
	int normpow;    /* divide by nnz[i] or fold */
	int slowness;   /* velocity/slowness/slowness^2 flag */
a100 2
	float sigma;    /* value of 1/p^2 */
	float *vel;     /* velocity array */
a122 1
        if (!getparint ("slowness", &slowness)) slowness = 0;
a126 1
        if (!getparint ("normpow", &normpow)) normpow = 1;
d128 1
a128 1
	
a146 1
	vel = ealloc1float(nv);
a156 23
	/* set up array of velocities, slownesses or sloths */
	if (slowness==0) { /* picking velocities */
	
		for (iv=0; iv<nv; ++iv) vel[iv] = fv + iv*dv;

	} else if (slowness==1) { /* slownesses */
		float vmax = fv + (nv-1)*dv;
		float dsigma = (1/fv - 1/vmax)/(nv-1);
		float sstart = 1/fv;

		/* compute the velocity array due to 1/p increment */
		for (iv=0; iv<nv; ++iv) vel[iv] = 1/(sstart - iv*dsigma);

	} else if (slowness==2) { /* sloth */
		float vmax = fv + (nv-1)*dv;
		float dsigma = (1/(fv*fv) - 1/(vmax*vmax))/(nv-1);
		float sstart = 1/(fv*fv);

		/* compute the velocity array due to 1/p^2 increment */
		for (iv=0; iv<nv; ++iv)  vel[iv] = 1/sqrt(sstart - iv*dsigma);

	} else  err("slowness must be 0, 1, or 2; saw: %d", slowness);

a159 1
	ifold = 0;
a175 3

			/* count the number of traces in CMP */
			ifold += 1;
d198 5
a202 14
					if (normpow) {
						for (is=ismin; is<ismax; ++is) {
							nsum += num[iv][is]*
								num[iv][is];
							dsum += nnz[iv][is]*
								den[iv][is];
         					}
					} else {
						for (is=ismin; is<ismax; ++is) {
							nsum += num[iv][is]*
								num[iv][is];
							dsum += ifold* 
								den[iv][is];
         					}
a228 3

			/* reset trace counter to zero */
			ifold = 0;
d232 1
a232 4
		for (iv=0; iv<nv; ++iv){

			/* set velocity */
			v = vel[iv];
@


1.2.1.1
log
@Oops, somehow lost -r1.2 changes.
@
text
@d1 1
a1 1
/* SUVELAN: $Revision: 1.2 $ ; $Date: 91/06/27 13:59:25 $		*/
d20 1
a20 1
String sdoc =
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/* SUVELAN: $Revision: $ ; $Date: $		*/
d30 3
d36 4
d67 1
a67 1
 *	CWP: Dave
d85 1
d92 2
d111 2
d135 1
d140 1
d142 1
a142 1

d161 1
d172 23
d198 1
d215 3
d240 14
a253 5
					for (is=ismin; is<ismax; ++is) {
						nsum += num[iv][is]*
							num[iv][is];
						dsum += nnz[iv][is]*
							den[iv][is];
d280 3
d286 4
a289 1
		for (iv=0,v=fv; iv<nv; ++iv,v+=dv) {
@
