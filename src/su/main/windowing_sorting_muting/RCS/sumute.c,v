head	1.41;
access;
symbols;
locks
	john:1.41; strict;
comment	@ * @;


1.41
date	2012.12.06.22.59.36;	author john;	state Exp;
branches;
next	1.40;

1.40
date	2012.12.06.22.58.25;	author john;	state Exp;
branches;
next	1.39;

1.39
date	2011.11.17.00.03.38;	author john;	state Exp;
branches;
next	1.38;

1.38
date	2011.11.12.00.44.21;	author john;	state Exp;
branches;
next	1.37;

1.37
date	2010.03.18.16.04.47;	author john;	state Exp;
branches;
next	1.36;

1.36
date	2010.02.02.22.11.31;	author john;	state Exp;
branches;
next	1.35;

1.35
date	2010.02.02.18.17.27;	author john;	state Exp;
branches;
next	1.34;

1.34
date	2009.12.11.18.09.28;	author john;	state Exp;
branches;
next	1.33;

1.33
date	2009.12.11.18.01.38;	author john;	state Exp;
branches;
next	1.32;

1.32
date	2009.12.01.21.42.03;	author john;	state Exp;
branches;
next	1.31;

1.31
date	2006.11.07.22.58.42;	author john;	state Exp;
branches;
next	1.30;

1.30
date	2004.08.31.20.31.28;	author john;	state Exp;
branches;
next	1.29;

1.29
date	2003.06.09.16.17.07;	author john;	state Exp;
branches;
next	1.28;

1.28
date	2002.11.11.18.22.52;	author john;	state Exp;
branches;
next	1.27;

1.27
date	2002.03.07.19.02.42;	author john;	state Exp;
branches;
next	1.26;

1.26
date	2000.09.22.16.17.26;	author john;	state Exp;
branches;
next	1.25;

1.25
date	97.05.05.17.40.30;	author john;	state Exp;
branches;
next	1.24;

1.24
date	96.09.13.21.49.05;	author john;	state Exp;
branches;
next	1.23;

1.23
date	96.01.30.15.00.36;	author jkc;	state Exp;
branches;
next	1.22;

1.22
date	96.01.24.17.18.29;	author jkc;	state Exp;
branches;
next	1.21;

1.21
date	96.01.22.22.27.25;	author jkc;	state Exp;
branches;
next	1.20;

1.20
date	96.01.22.19.54.04;	author jkc;	state Exp;
branches;
next	1.19;

1.19
date	95.08.03.16.34.12;	author jkc;	state Exp;
branches;
next	1.18;

1.18
date	95.08.02.20.49.46;	author jkc;	state Exp;
branches;
next	1.17;

1.17
date	95.06.28.15.43.45;	author jkc;	state Exp;
branches;
next	1.16;

1.16
date	95.03.14.16.00.28;	author john;	state Exp;
branches;
next	1.15;

1.15
date	95.03.14.14.10.39;	author john;	state Exp;
branches;
next	1.14;

1.14
date	94.08.25.15.00.07;	author jkc;	state Exp;
branches;
next	1.13;

1.13
date	93.11.24.15.50.02;	author john;	state Exp;
branches;
next	1.12;

1.12
date	92.10.23.15.17.55;	author john;	state Exp;
branches;
next	1.11;

1.11
date	92.10.23.15.11.35;	author john;	state Exp;
branches;
next	1.10;

1.10
date	92.03.12.09.31.05;	author john;	state Exp;
branches;
next	1.9;

1.9
date	91.09.05.08.51.13;	author jkcohen;	state Exp;
branches;
next	1.8;

1.8
date	91.09.05.08.24.35;	author jkcohen;	state Exp;
branches;
next	1.7;

1.7
date	91.07.02.16.53.38;	author jkcohen;	state Exp;
branches;
next	1.6;

1.6
date	91.06.24.20.31.52;	author jkcohen;	state Exp;
branches;
next	1.5;

1.5
date	90.12.21.21.30.03;	author jkc;	state Exp;
branches;
next	1.4;

1.4
date	90.11.30.16.15.59;	author jkc;	state Exp;
branches;
next	1.3;

1.3
date	90.11.29.10.01.47;	author jkc;	state Exp;
branches;
next	1.2;

1.2
date	90.09.03.09.50.43;	author jkc;	state Exp;
branches;
next	1.1;

1.1
date	90.04.19.15.28.16;	author jkc;	state Exp;
branches;
next	;


desc
@Mute traces
@


1.41
log
@added key=tracl to selfdoc
@
text
@/* Copyright (c) Colorado School of Mines, 2011.*/
/* All rights reserved.                       */

/* SUMUTE: $Revision: 1.40 $ ; $Date: 2012/12/06 22:58:25 $	*/

#include "su.h"
#include "segy.h"

/*********************** self documentation **********************/
char *sdoc[] = {
" 	   								",
" SUMUTE - MUTE above (or below) a user-defined polygonal curve with	", 
"	   the distance along the curve specified by key header word 	",
" 	   								",
" sumute <stdin >stdout xmute= tmute= [optional parameters]		",
" 									",
" Required parameters:							",
" xmute=		array of position values as specified by	",
" 			the `key' parameter				",
" tmute=		array of corresponding time values (sec)	",
" 			in case of air wave muting, correspond to 	",
" 			air blast duration				",
"  ... or input via files:						",
" nmute=		number of x,t values defining mute		",
" xfile=		file containing position values as specified by	",
" 			the `key' parameter				",
" tfile=		file containing corresponding time values (sec)	",
"  ... or via header:							",
" hmute=		key header word specifying mute time		",
" 									",
" Optional parameters:							",
" key=offset		Key header word specifying trace offset 	",
" 				=tracl  use trace number instead	",
" ntaper=0		number of points to taper before hard		",
"			mute (sine squared taper)			",
" mode=0	   mute ABOVE the polygonal curve			",
"		=1 to zero BELOW the polygonal curve			",
"		=2 to mute below AND above a straight line. In this case",
"		 	xmute,tmute describe the total time length of   ",
"			the muted zone as a function of xmute the slope ",
"			of the line is given by the velocity linvel=	",
"	 	=3 to mute below AND above a constant velocity hyperbola",
"			as in mode=2 xmute,tmute describe the total time",
"			length of the mute zone as a function of xmute,  ",
"			the velocity is given by the value of linvel=	",
" 		=4 to mute below AND above a user defined polygonal line",
"			given by xmute, tmute pairs. The widths in time ", 
"			of the muted zone are given by the twindow vector",
" linvel=330   		constant velocity for linear or hyperbolic mute	",
" tm0=0   		time shift of linear or hyperbolic mute at	",
"			 \'key\'=0					",
" twindow=	vector of mute zone widths in time, operative only in mode=4",
"  ... or input via file:						",
" twfile= 								",
"									",
" Notes: 								",
" The tmute interpolant is extrapolated to the left by the smallest time",
" sample on the trace and to the right by the last value given in the	",
" tmute array.								",
"									",
" The files tfile and xfile are files of binary (C-style) floats.	",
"									",
" In the context of this program \"above\" means earlier time and	",
" \"below\" means later time (above and below as seen on a seismic section.",
"									",
" The mode=2 option is intended for removing air waves. The mute is	",
" is over a narrow window above and below the line specified by the	",
" the line specified by the velocity \"linvel\". Here the values of     ",
" tmute, xmute or tfile and xfile define the total time width of the mute.",
"									",
" If data are spatial, such as the (z-x) output of a migration, then    ",
" depth values are used in place of times in tmute and tfile. The value ",
" of the depth sampling interval is given by the d1 header field	",
" You must use the option key=tracl in sumute in this case.		",
"									",
" Caveat: if data are seismic time sections, then tr.dt must be set. If ",
" data are seismic depth sections, then tr.trid must be set to the value",
" of TRID_DEPTH and the tr.d1 header field must be set.			",
" To find the value of TRID_DEPTH:  					",
" type: 								",
"     sukeyword trid							",
"	and look for the entry for \"Depth-Range (z-x) traces\"		",
"  									",
NULL};

/* Credits:
 *
 *	SEP: Shuki Ronen
 *	CWP: Jack K. Cohen, Dave Hale, John Stockwell
 *	DELPHI: Alexander Koek added airwave mute.
 *      CWP: John Stockwell added modes 3 and 4
 *	USBG: Florian Bleibinhaus added hmute + some range checks on mute times
 * Trace header fields accessed: ns, dt, delrt, key=keyword, trid, d1
 * Trace header fields modified: muts or mute
 */
/**************** end self doc ***********************************/

segy tr;


#define SQ(x) ((x))*((x))

int
main(int argc, char **argv)
{
	char *key=NULL;		/* header key word from segy.h		*/	
	char *type=NULL;	/* ... its type				*/
	int index;		/* ... its index			*/
	Value val;		/* ... its value			*/
	float fval;		/* ... its value cast to float		*/
	float twfval;		/* ... its value cast to float		*/
	float *xmute=NULL;	/* array of key mute curve values	*/
	float *tmute=NULL;	/* ...		mute curve time values 	*/
	float *twindow=NULL;	/* ...	mute window time values mode=4	*/
	float linvel;		/* linear velocity			*/
	float tm0;		/* time shift of mute=2 or 3 for 'key'=0*/
	float *taper=NULL;	/* ...		taper values		*/
	int nxmute=0;		/* number of key mute values		*/
	int ntmute;	/* ...		mute time values 	*/
	int ntwindow;	/* ...		mute time values 	*/
	int ntaper;	/* ...		taper values		*/

	int below;	/* mute below curve			*/
	int mode;	/* kind of mute (top, bottom, linear)	*/
	int absolute;    /* Take absolute value of key for mode=2 */
	int hmute=0;	/* read mute times from header		*/

	int nxtmute;	/* number of mute values 		*/
	cwp_String xfile="";	/* file containing positions by key	*/
	FILE *xfilep;		/* ... its file pointer			*/
	cwp_String tfile="";	/* file containing times	 	*/
	FILE *tfilep;		/* ... its file pointer			*/

	cwp_String twfile="";	/* file containing mute time windows 	*/
	FILE *twfilep;		/* ... its file pointer			*/

	cwp_Bool seismic;	/* cwp_true if seismic, cwp_false not seismic */

	/* Initialize */
	initargs(argc, argv);
	requestdoc(1);


	/* Get parameters */
	if (!getparint("mode", &mode))		mode = 0;

	if (getparstring("hmute", &key)) { hmute = 1; } else

	if (!(getparstring("xfile",&xfile) && getparstring("tfile",&tfile))) {
		if (!(nxmute = countparval("xmute")))
			err("must give xmute= vector");
		if (!(ntmute = countparval("tmute")))
			err("must give tmute= vector");
		if (nxmute != ntmute)
			err("lengths of xmute, tmute must be the same");
		xmute = ealloc1float(nxmute);	getparfloat("xmute", xmute);
		tmute = ealloc1float(nxmute);	getparfloat("tmute", tmute);
		if (mode==4) {
			if (!(ntwindow = countparval("twindow")))
				err("must give twindow= vector");
			if (nxmute != ntwindow)
				err("lengths of xmute, twindow must be the same");
			twindow = ealloc1float(nxmute);
			getparfloat("twindow", twindow);
		}
	} else {
		MUSTGETPARINT("nmute",&nxtmute);
		nxmute = nxtmute;
		xmute = ealloc1float(nxtmute);
		tmute = ealloc1float(nxtmute);

		if((xfilep=fopen(xfile,"r"))==NULL)
			err("cannot open xfile=%s\n",xfile);
		if (fread(xmute,sizeof(float),nxtmute,xfilep)!=nxtmute)
			err("error reading xfile=%s\n",xfile);
		fclose(xfilep);

		if((tfilep=fopen(tfile,"r"))==NULL)
			err("cannot open tfile=%s\n",tfile);
		if (fread(tmute,sizeof(float),nxtmute,tfilep)!=nxtmute)
			err("error reading tfile=%s\n",tfile);
		fclose(tfilep);

		if (mode==4) {
			if((twfilep=fopen(twfile,"r"))==NULL)
				err("cannot open tfile=%s\n",twfile);
			if (fread(twindow,sizeof(float),nxtmute,twfilep)!=nxtmute)
				err("error reading tfile=%s\n",tfile);
			fclose(twfilep);
		}
	}

	if (!getparint("ntaper", &ntaper))	ntaper = 0;
	if (getparint("below", &below))	{
		mode = below; 
		warn ("use of below parameter is obsolete. mode value set to %d \n", mode);
	}
	if (!getparint("absolute", &absolute))		absolute = 1;
	if (hmute==0) if (!getparstring("key", &key))	key = "offset";
	if (!getparfloat("linvel", &linvel))	linvel = 330;
	if (!getparfloat("tm0", &tm0))		tm0 = 0;
        checkpars();
	if (linvel==0) err ("linear velocity can't be 0");

	/* get key type and index */
	type = hdtype(key);
	index = getindex(key);

	/* Set up taper weights if tapering requested */
	if (ntaper) {
		register int k;
		taper = ealloc1float(ntaper);
		for (k = 0; k < ntaper; ++k) {
			float s = sin((k+1)*PI/(2*ntaper));
			taper[k] = s*s;
		}
	}

						
	/* Get info from first trace */
	if (!gettr(&tr)) err("can't read first trace");

	seismic = ISSEISMIC(tr.trid);

	if (seismic) {
		if (!tr.dt) err("dt header field must be set");
	} else if (tr.trid==TRID_DEPTH) {   /* depth section */
		if (!tr.d1) err("d1 header field must be set");
	} else {
		err ("tr.trid = %d, unsupported trace id",tr.trid);
	}

	/* Loop over traces */
	do {
		int nt     = (int) tr.ns;
		float tmin = tr.delrt/1000.0;
		float dt = ((double) tr.dt)/1000000.0;
		float t;
		float tw;
		int nmute;
		int itaper;
		int topmute;
		int botmute;
		int ntair=0;
		register int i;

		if (!seismic) { 
			tmin = 0.0;
			dt = tr.d1;	
		}

		/* get value of key and convert to float */
		gethval(&tr, index, &val);
		fval = vtof(type,val);
		

		if (hmute==1) {
			t = fval/1000.;
		} else {
		/* linearly interpolate between (xmute,tmute) values */
		intlin(nxmute,xmute,tmute,tmin,tmute[nxmute-1],1,&fval,&t); 
		}

		if (absolute) fval = abs(fval);
		/* do the mute */
		if (mode==0) {	/* mute above */
			nmute = MIN(NINT((t - tmin)/dt),nt);
			if (nmute>0) memset( (void *) tr.data, 0, nmute*FSIZE);
			for (i = 0; i < ntaper; ++i)
				if (i+nmute>0) tr.data[i+nmute] *= taper[i];
			if (seismic) {
				tr.muts = NINT(t*1000);
			} else	{
				tr.muts = NINT(t);
			}
		} else if (mode==1){	/* mute below */
			nmute = MAX(0,NINT((tmin + nt*dt - t)/dt));
			memset( (void *) (tr.data+nt-nmute), 0, nmute*FSIZE);
			for (i = 0; i < ntaper; ++i)
				if (nt>nmute+i && nmute+i>0)
					tr.data[nt-nmute-1-i] *= taper[i];
			if (seismic) {
				tr.mute = NINT(t*1000);
			} else	{
				tr.mute = NINT(t);
			}
		} else if (mode==2){	/* air wave mute */
			nmute = NINT((tmin+t)/dt);
			ntair=NINT(tm0/dt+fval/linvel/dt);
			topmute=MIN(MAX(0,ntair-nmute/2),nt);
			botmute=MIN(nt,ntair+nmute/2);
			memset( (void *) (tr.data+topmute), 0,
					(botmute-topmute)*FSIZE);
			for (i = 0; i < ntaper; ++i){
				itaper=ntair-nmute/2-i;
				if (itaper > 0) tr.data[itaper] *=taper[i];
			}	
			for (i = 0; i < ntaper; ++i){
				itaper=ntair+nmute/2+i;
				if (itaper<nt) tr.data[itaper] *=taper[i];
			}
		} else if (mode==3) {	/* hyperbolic mute */
			nmute = NINT((tmin + t)/dt);
			ntair=NINT(sqrt( SQ((float)(tm0/dt))+SQ((float)(fval/linvel/dt)) ));
			topmute=MIN(MAX(0,ntair-nmute/2),nt);
			botmute=MIN(nt,ntair+nmute/2);
			memset( (void *) (tr.data+topmute), 0,
					(botmute-topmute)*FSIZE);
			for (i = 0; i < ntaper; ++i){
				itaper=ntair-nmute/2-i;
				if (itaper > 0) tr.data[itaper] *=taper[i];
			}	
			for (i = 0; i < ntaper; ++i){
				itaper=ntair+nmute/2+i;
				if (itaper<nt) tr.data[itaper] *=taper[i];
			}
		} else if (mode==4) {	/* polygonal mute */
			tmin=twindow[0];
			intlin(nxmute,xmute,twindow,tmin,twindow[nxmute-1],1,&twfval,&tw); 
			if (absolute) twfval = abs(twfval);

			nmute = NINT(tw/dt);
			ntair = NINT(t/dt);

			topmute=MIN(MAX(0,ntair-nmute/2),nt);
			botmute=MIN(nt,ntair+nmute/2);
			memset( (void *) (tr.data+topmute), 0,
					(botmute-topmute)*FSIZE);
			for (i = 0;i < ntaper; ++i){
				itaper=ntair-nmute/2-i;
				if (itaper > 0) tr.data[itaper] *=taper[i];
			}	
			for (i = 0; i < ntaper; ++i){
				itaper=ntair+nmute/2+i;
				if (itaper<nt) tr.data[itaper] *=taper[i];
			}


		}
		puttr(&tr);
	} while (gettr(&tr));
	
	return(CWP_Exit());
}
@


1.40
log
@added to selfdoc
@
text
@d4 1
a4 1
/* SUMUTE: $Revision: 1.39 $ ; $Date: 2011/11/17 00:03:38 $	*/
d74 1
@


1.39
log
@added Reg Beardsley's checkpar()
@
text
@d4 1
a4 1
/* SUMUTE: $Revision: 1.37 $ ; $Date: 2010/03/18 16:04:47 $	*/
d36 2
a37 1
" mode=0	=1 to zero BELOW the polygonal curve			",
@


1.38
log
@copyright
@
text
@d200 1
@


1.37
log
@Florian Bleibenhaus's addition of hmute=  to allow mute values
to be read from a header word
@
text
@d1 4
a4 1
/* SUMUTE: $Revision: 1.36 $ ; $Date: 2010/02/02 22:11:31 $	*/
@


1.36
log
@added mode=4 for muting around a polygonal line
@
text
@d1 1
a1 1
/* SUMUTE: $Revision: 1.35 $ ; $Date: 2010/02/02 18:17:27 $	*/
d25 2
d87 1
d113 1
a113 1
	int nxmute;		/* number of key mute values		*/
d121 1
d142 2
d194 1
a194 1
	if (!getparstring("key", &key))		key = "offset";
d251 3
d256 1
d261 2
a262 2
			nmute = NINT((t - tmin)/dt);
			memset( (void *) tr.data, 0, nmute*FSIZE);
d264 1
a264 1
				tr.data[i+nmute] *= taper[i];
d271 1
a271 1
			nmute = NINT((tmin + nt*dt - t)/dt);
d274 2
a275 1
				tr.data[nt-nmute-1-i] *= taper[i];
@


1.35
log
@added a hyperbolic mute
@
text
@d1 1
a1 1
/* SUMUTE: $Revision: 1.34 $ ; $Date: 2009/12/11 18:09:28 $	*/
d9 1
a9 1
" SUMUTE - mute above (or below) a user-defined polygonal curve with	", 
d32 1
a32 1
"        	=2 to mute below AND above a straight line. In this case",
d34 3
a36 2
"			the muted zone as a function of xmute		",
"	 	=3 to mute blow AND above a constant velocity hyperbola	",
d38 12
a49 5
"			length of the mute zone as a function of xmute  ",
" linvel=330   		linear velocity					",
" tm0=0   		time shift of linear mute at \'key\'=0		",
" 									",
" 									",
a50 1
" 									",
d75 1
a75 1
"        and look for the entry for \"Depth-Range (z-x) traces\"	",
d84 1
a84 1
 *
d98 13
a110 11
	char *key;	/* header key word from segy.h		*/	
	char *type;	/* ... its type				*/
	int index;	/* ... its index			*/
	Value val;	/* ... its value			*/
	float fval;	/* ... its value cast to float		*/
	float *xmute;	/* array of key mute curve values	*/
	float *tmute;	/* ...		mute curve time values 	*/
	float linvel;   /* linear velocity			*/
	float tm0;    	/* time shift of linear mute for 'key'=0*/
	float *taper=NULL;/* ...		taper values	*/
	int nxmute;	/* number of key mute values		*/
d112 1
d114 1
d125 3
d136 2
d147 8
d161 19
a179 11
                if((xfilep=fopen(xfile,"r"))==NULL)
                        err("cannot open xfile=%s\n",xfile);
                if (fread(xmute,sizeof(float),nxtmute,xfilep)!=nxtmute)
                        err("error reading xfile=%s\n",xfile);
                fclose(xfilep);

                if((tfilep=fopen(tfile,"r"))==NULL)
                        err("cannot open tfile=%s\n",tfile);
                if (fread(tmute,sizeof(float),nxtmute,tfilep)!=nxtmute)
                        err("error reading tfile=%s\n",tfile);
                fclose(tfilep);
a182 1
	if (!getparint("mode", &mode))		mode = 0;
d227 1
d232 1
a232 1
		int ntair;
d247 1
d271 1
a271 1
			nmute = NINT(t/dt);
d278 1
a278 1
			        itaper=ntair-nmute/2-i;
d282 1
a282 1
			        itaper=ntair+nmute/2+i;
d286 1
a286 1
			nmute = NINT(t/dt);
d293 1
a293 1
			        itaper=ntair-nmute/2-i;
d297 1
a297 1
			        itaper=ntair+nmute/2+i;
d300 21
@


1.34
log
@updated selfdoc with TRID_DEPTH information
@
text
@d1 1
a1 1
/* SUMUTE: $Revision: 1.33 $ ; $Date: 2009/12/11 18:01:38 $	*/
d32 6
a37 3
"        	=2 to mute below AND above a straight line		",
" 		in this case xmute,tmute describe the total		",
"		time length of the muted zone as a function of xmute	",
d85 3
d252 15
@


1.33
log
@changed explicit value of 30 for trid depth section to TRID_DEPTH
@
text
@d1 1
a1 1
/* SUMUTE: $Revision: 1.32 $ ; $Date: 2009/12/01 21:42:03 $	*/
d60 7
a66 3
" data are seismic depth sections, then tr.trid must be set to 30, and  ",
" tr.d1 header field must be set.					",
"									",
@


1.32
log
@changed selfdoc to reflect reality of the program.
@
text
@d1 1
a1 1
/* SUMUTE: $Revision: 1.31 $ ; $Date: 2006/11/07 22:58:42 $	*/
d174 1
a174 1
	} else if (tr.trid==30) {   /* depth section */
@


1.31
log
@changed    memset( .., (int) '\0',...) to memset( .., 0,..) as per suggestion of Marion Zhu and Reg Beardsley
@
text
@d1 1
a1 1
/* SUMUTE: $Revision: 1.30 $ ; $Date: 2004/08/31 20:31:28 $	*/
d31 4
a34 4
" mode=0		=1 to zero BELOW the polygonal curve		",
"        		=2 to mute below AND above a straight line	",
" 			in that case xmute,tmute describes the total	",
"			time length of the muted zone			",
d50 4
a53 3
" The below=2 option is intended for removing air waves. The mute is	",
" is over a narrow window above and below the polygonal line specified	",
" by the values in tmute, xmute or tfile and xfile.			",
d69 1
a69 1
 *	DELPHI: Alexander Koek
@


1.30
log
@added comma in selfdoc
@
text
@d1 1
a1 1
/* SUMUTE: $Revision: 1.29 $ ; $Date: 2003/06/09 16:17:07 $	*/
d208 1
a208 1
			memset( (void *) tr.data, (int) '\0', nmute*FSIZE);
d218 1
a218 2
			memset( (void *) (tr.data+nt-nmute),
					(int) '\0', nmute*FSIZE);
d231 2
a232 2
			memset( (void *) (tr.data+topmute),
					(int) '\0', (botmute-topmute)*FSIZE);
@


1.29
log
@9 June 2003
@
text
@d1 1
a1 1
/* SUMUTE: $Revision: 1.27 $ ; $Date: 2002/03/07 19:02:42 $	*/
d18 1
a18 1
" 			in case of air wave muting, correspond to 	"
@


1.28
log
@added CWP_Exit function
@
text
@d54 8
d70 1
a70 1
 * Trace header fields accessed: ns, dt, delrt, key=keyword
d103 2
d168 10
a177 1
	if (!tr.dt) err("dt header field must be set");
d183 1
a183 1
		float dt   = ((double) tr.dt)/1000000.0;
d192 5
d211 5
a215 1
			tr.muts = NINT(t*1000);
d222 5
a226 1
			tr.mute = NINT(t*1000);
@


1.27
log
@acced Dominique's offset fix
@
text
@d1 1
a1 1
/* SUMUTE: $Revision: 1.26 $ ; $Date: 2000/09/22 16:17:26 $	*/
d215 1
a215 1
	return EXIT_SUCCESS;
@


1.26
log
@added airwave mute option
@
text
@d1 1
a1 1
/* SUMUTE: $Revision: 1.25 $ ; $Date: 1997/05/05 17:40:30 $	*/
d31 1
a31 1
" below=0		=1 to zero BELOW the polygonal curve		",
d40 1
d87 2
a129 1
	if (!getparint("below", &below))	below = 0;
d131 5
d180 1
a180 1

d182 1
a182 1
		if (below==0) {	/* mute above */
d188 1
a188 1
		} else if (below==1){	/* mute below */
d195 1
a195 1
		} else if (below==2){	/* air wave mute */
@


1.25
log
@added declaration on main
@
text
@d1 1
a1 1
/* SUMUTE: $Revision: 1.24 $ ; $Date: 1996/09/13 21:49:05 $	*/
d18 2
d32 6
d46 7
d78 2
d85 1
d128 1
d130 3
d160 4
d175 1
a175 1
		if (!below) {	/* mute above */
d181 1
a181 1
		} else {	/* mute below */
d188 16
@


1.24
log
@silenced -Wall messages
@
text
@d1 1
a1 1
/* SUMUTE: $Revision: 1.23 $ ; $Date: 1996/01/30 15:00:36 $	*/
d53 1
@


1.23
log
@Credit to Alexander Koek in self-doc.
@
text
@d1 1
a1 1
/* SUMUTE: $Revision: 1.22 $ ; $Date: 1996/01/24 17:18:29 $	*/
d62 1
a62 1
	float *taper;	/* ...		taper values		*/
@


1.22
log
@Cosmetic.
@
text
@d1 1
a1 1
/* SUMUTE: $Revision: 1.21 $ ; $Date: 1996/01/22 22:27:25 $	*/
d44 1
d67 1
a67 2

	int nxtmute;	/* number of mute values */
@


1.21
log
@Cosmetic.
@
text
@d1 1
a1 1
/* SUMUTE: $Revision: 1.20 $ ; $Date: 1996/01/22 19:54:04 $	*/
d45 1
a45 1
 * Trace header fields accessed: ns, dt, delrt, key=keyword,
@


1.20
log
@Fix to nmute in below=1 option and set muts or mute.  Thx: Alex Koek
Delphi.  Also some cosmetics (blame jkc).
@
text
@d1 1
a1 1
/* SUMUTE: $Revision: 1.19 $ ; $Date: 1995/08/03 16:34:12 $	*/
a37 2
" Trace header fields accessed: ns, dt, delrt, key=keyword		",
" Trace header fields modified: muts or mute				",
d44 3
@


1.19
log
@Zapped unneeded cast of tr.delrt (sigh).
@
text
@d1 1
a1 1
/* SUMUTE: $Revision: 1.18 $ ; $Date: 1995/08/02 20:49:46 $	*/
d9 2
a10 2
" SUMUTE - mute above user-defined polygonal curve with the		", 
"	  distance along the curve specified by key header word 	",
d29 1
a29 4
" below=0		=1 to zero BELOW the poygonal line		",
" 									",
" Trace header fields accessed: dt, delrt, key=keyword			",
" Trace header fields modified: none					",
d38 2
d146 2
a147 2
		/* if below==0 mute above else mute below */
		if (below == 0) {
d152 3
a154 2
		} else {
			nmute = NINT((nt*dt - t)/dt);
d159 1
@


1.18
log
@Cast the integers tr.dt and/or tr.delrt and/or clones to double before
division with floating constant (which is implicitly double
precision).  Casting is needed to make some compilers happy and if we
cast to float then there will be an extra conversion to double because
of the floating constant (casting to float and writing 1000000.0F
would save a conversion, but most people find that F yucky and
efficiency is not an issue here).
Motivated by examples from Stew Levin.
@
text
@d1 1
a1 1
/* SUMUTE: $Revision: 1.17 $ ; $Date: 1995/06/28 15:43:45 $	*/
d133 1
a133 1
		float tmin = ((double) tr.delrt)/1000.0;
@


1.17
log
@Corrected last line of self-doc re names of binary files.
@
text
@d1 1
a1 1
/* SUMUTE: $Revision: 1.16 $ ; $Date: 1995/03/14 16:00:28 $	*/
d133 2
a134 2
		float tmin = (float) tr.delrt/1000.0;
		float dt   = (float) tr.dt/1000000.0;
@


1.16
log
@*** empty log message ***
@
text
@d1 1
a1 1
/* SUMUTE: $Revision: 1.15 $ ; $Date: 95/03/14 14:10:39 $	*/
d25 1
a25 1
" key=offset		Key header word specifying trace offset 	",	
d36 2
a37 2
" sample on the trace and to the right by the last value given in the tmute",
" array.								",
d39 1
a39 1
" The files tmute and xmute are files of binary (C-style) floats.	",
@


1.15
log
@added tfile and xfile options to permit mute values to be input from files.
@
text
@d1 1
a1 1
/* SUMUTE: $Revision: 1.14 $ ; $Date: 94/08/25 15:00:07 $	*/
d18 1
a18 1
"  ... or input via files:
@


1.14
log
@Removed copyright statement from codes that had it.
Moved self-doc line for sudoc.
@
text
@d1 1
a1 1
/* SUMUTE: $Revision: 1.13 $ ; $Date: 93/11/24 15:50:02 $	*/
d8 33
a40 22
" 	   							",
" SUMUTE - mute above user-defined polygonal curve with the	", 
"	  distance along the curve specified by key header word ",
" 	   							",
" sumute <stdin >stdout xmute= tmute= [optional parameters]	",
" 								",
" Required parameters:						",
" 	xmute=		array of position values as specified by",
" 			the `key' parameter			",
" 	tmute=		array of corresponding time values (sec)",
" Optional parameters:						",
"	key=offset	Key header word specifying trace offset ",	
" 			=tracl  use trace number instead	",
"	ntaper=0	number of points to taper before hard	",
"			mute (sine squared taper)		",
"	below=0		=1 to zero BELOW the poygonal line	",
" Trace header fields accessed: dt, delrt, key=keyword		",
" Trace header fields modified: none				",
" Note: the tmute interpolant is extrapolated to the left by	",
"       the smallest time sample on the trace and to the right	",
"	by the last value given in the tmute array.		",
"								",
d67 6
d79 28
a106 5
	if (!(nxmute = countparval("xmute"))) err("must give xmute= vector");
	if (!(ntmute = countparval("tmute"))) err("must give tmute= vector");
	if (nxmute != ntmute) err("lengths of xmute, tmute must be the same");
	xmute = ealloc1float(ntmute);	getparfloat("xmute", xmute);
	tmute = ealloc1float(ntmute);	getparfloat("tmute", tmute);
@


1.13
log
@changed bzero to memset
@
text
@d1 1
a1 1
/* SUMUTE: $Revision: 1.12 $ ; $Date: 92/10/23 15:17:55 $	*/
a2 13
/*----------------------------------------------------------------------
 * Copyright (c) Colorado School of Mines, 1990.
 * All rights reserved.
 *
 * This code is part of SU.  SU stands for Seismic Unix, a processing line
 * developed at the Colorado School of Mines, partially based on Stanford
 * Exploration Project (SEP) software.  Inquiries should be addressed to:
 *
 *  Jack K. Cohen, Center for Wave Phenomena, Colorado School of Mines,
 *  Golden, CO 80401  (jkc@@dix.mines.colorado.edu)
 *----------------------------------------------------------------------
 */

a30 1
/**************** end self doc ***********************************/
d37 1
a37 1

@


1.12
log
@cosmetic change in selfdoc
@
text
@d1 1
a1 1
/* SUMUTE: $Revision: 1.11 $ ; $Date: 92/10/23 15:11:35 $	*/
d124 1
a124 1
			bzero(tr.data, nmute*FSIZE);
d129 2
a130 1
			bzero(tr.data+nt-nmute, nmute*FSIZE);
@


1.11
log
@new selfdoc installed
@
text
@d1 1
a1 1
/* SUMUTE: $Revision: 1.10 $ ; $Date: 92/03/12 09:31:05 $	*/
d21 1
@


1.10
log
@added key=  feature 
@
text
@d1 1
a1 1
/* SUMUTE: $Revision: 1.9 $ ; $Date: 91/09/05 08:51:13 $	*/
d20 23
a42 23
char *sdoc =
"SUMUTE - mute above user-defined polygonal curve with the	\n" 
"	  distance along the curve specified by key header word \n"
" 	   							\n"
"sumute <stdin >stdout xmute= tmute= [optional parameters]	\n"
" 								\n"
"Required parameters:						\n"
" 	xmute=		array of position values as specified by\n"
" 			the `key' parameter			\n"
" 	tmute=		array of corresponding time values (sec)\n"
"Optional parameters:						\n"
"	key=offset	Key header word specifying trace offset \n"	
" 			=tracl  use trace number instead	\n"
"	ntaper=0	number of points to taper before hard	\n"
"			mute (sine squared taper)		\n"
"	below=0		=1 to zero BELOW the poygonal line	\n"
"Trace header fields accessed: dt, delrt, key=keyword		\n"
"Trace header fields modified: none				\n"
"Note: the tmute interpolant is extrapolated to the left by	\n"
"       the smallest time sample on the trace and to the right	\n"
"	by the last value given in the tmute array.		\n"
"								\n"
;
d71 1
a71 1
	askdoc(1);
@


1.9
log
@string -> String and so forth
@
text
@d1 1
a1 1
/* SUMUTE: $Revision: 1.8 $ ; $Date: 91/09/05 08:24:35 $	*/
d20 5
a24 1
String sdoc =
d26 3
a28 9
" SUMUTE - mute above user-defined polygonal line		\n"
" 								\n"
" sumute <stdin >stdout xmute= tmute= [ntaper=0]		\n"
" 								\n"
" Mute above t values obtained by linear interpolation from	\n"
" the given (xmute, tmute) values.				\n"
" 								\n"
" Required parameters:						\n"
" 	xmute=		array of offset values 			\n"
d30 3
a32 2
" 								\n"
" Optional parameter:						\n"
d36 3
a38 5
" 								\n"
" Trace header fields accessed: dt, delrt, offset		\n"
" Trace header fields modified: none				\n"
" 								\n"
" Note: the tmute interpolant is extrapolated to the left by	\n"
d41 1
a41 2
" 								\n"
" 								\n"
d47 2
a48 3
 *	SEP: Shuki
 *	CWP: Jack, Dave
 *
d56 12
a67 2
	float *xmute, *tmute, *taper;
	int ntmute, nxmute, ntaper, below;
a68 1

d82 1
d84 3
a102 1

a104 1
		float x    = (float) tr.offset;
d112 9
a120 1
		intlin(nxmute, xmute, tmute, tmin, tmute[nxmute-1], 1, &x, &t); 
a133 1

@


1.8
log
@Fixed bug in new muting below option.
@
text
@d1 1
a1 1
/* SUMUTE: $Revision: 1.7 $ ; $Date: 91/07/02 16:53:38 $	*/
d20 1
a20 1
string sdoc =
@


1.7
log
@Added option to mute BELOW the polygonal line.
@
text
@d1 1
a1 1
/* SUMUTE: $Revision: 1.6 $ ; $Date: 91/06/24 20:31:52 $	*/
a106 1
		nmute = NINT((t - tmin)/dt);
d108 1
d113 1
@


1.6
log
@Quick patch to allow muting BELOW the polygonal line--needs
more work pronto.
@
text
@d1 1
a1 1
/* SUMUTE: $Revision: 1.5 $ ; $Date: 90/12/21 21:30:03 $	*/
d36 1
a36 1
"	direction=0	=1 to zero BELOW the poygonal line	\n"
d45 1
d62 1
a62 1
	int ntmute, nxmute, ntaper, nt, direction;
d76 2
a77 2
	if (!getparint("ntaper", &ntaper))		ntaper = 0;
	if (!getparint("direction", &direction))	direction = 0;
a93 1
	nt = tr.ns;
d99 1
d108 1
a108 1
		if (direction == 0) {
d115 1
a115 1
				tr.data[nt-nmute-i] *= taper[i];
@


1.5
log
@Allow tapering by sin^2 taper of user-specified length
@
text
@d1 1
a1 1
/* SUMUTE: $Revision: 1.4 $ ; $Date: 90/11/30 16:15:59 $	*/
d36 1
d61 1
a61 1
	int ntmute, nxmute, ntaper;
d75 2
a76 1
	if (!getparint("ntaper", &ntaper))	ntaper = 0;
d93 1
d107 9
a115 2
		bzero(tr.data, nmute*FSIZE);
		for (i = 0; i < ntaper; ++i)  tr.data[i+nmute] *= taper[i];
@


1.4
log
@Tweaks
@
text
@d1 1
a1 1
/* SUMUTE: $Revision: 1.3 $ ; $Date: 90/11/29 10:01:47 $	*/
d24 1
a24 1
" sumute <stdin >stdout xmute= tmute= 				\n"
d33 4
d59 2
a60 2
	float *xmute, *tmute;
	int ntmute, nxmute;
d68 1
a68 1
	/* Get muting parameters */
d74 1
d77 11
d100 1
d105 1
@


1.3
log
@Complete re-write implementing a mute above a
polygonal line defined by the user per suggestion
of Dave's.
@
text
@d1 1
a1 1
/* SUMUTE: $Revision: 1.2 $ ; $Date: 90/09/03 09:50:43 $	*/
d33 3
d37 2
a38 5
"       the value of the smallest time sample on the trace and	\n"
"       to the right by the last value given in the tmute array.\n"
" 								\n"
" Header fields accessed: dt, delrt, offset			\n"
" Header fields set: none					\n"
@


1.2
log
@ANSI C changes
@
text
@d1 1
a1 1
/* SUMUTE: $Revision: 1.1 $ ; $Date: 90/04/19 15:28:16 $	*/
d20 21
a40 19
string sdoc = "\
								\n\
SUMUTE - mute large offsets up shallow				\n\
								\n\
sumute <stdin >stdout v= alpha=1 nmute=0			\n\
								\n\
Mutes where offset/v < alpha * time.  Relies on dt and offset	\n\
header fields being set.					\n\
								\n\
Required parameter:						\n\
	v=		the velocity				\n\
								\n\
Optional parameters:						\n\
	alpha=1		mute when offset/v < alpha*time		\n\
								\n\
	nmute= (calc)	number of points muted--over rides	\n\
			alpha if specified			\n\
								\n\
";
d44 1
d46 1
a46 1
 *	CWP: Jack
d55 2
a56 6
	int nmute;	/* number of points muted		*/
	bool nmflag;	/* muting by number of points flag	*/
	float v;	/* velocity				*/
	float alpha;	/* mute when offset/v < alpha* time	*/
	float avdt;	/* alpha*v*dt				*/
	float oavdt;	/* 1.0/avdt				*/
d64 6
a69 6
	if (igetpar("nmute", &nmute)) {
		nmflag = true;
	} else {
		nmflag = false;
		MUSTFGETPAR("v", &v);
		if (v <= 0.0) err("v = %f must be positive", v);
a70 3
		if (!fgetpar("alpha", &alpha)) alpha = 1.0;
		if (alpha <= 0.0) err("alpha = %f must be positive", alpha);
	}
a74 5
	if (!tr.offset) err("offset header field must be set");
	if (!nmflag) {
		avdt = alpha * v * ((float) tr.dt)/1000000.0;	/* micro sec */
		oavdt = 1.0/avdt;
	}
d76 2
d79 9
a87 6
		if (!nmflag) nmute = oavdt * ABS(tr.offset);
		if (nmute >= tr.ns) {
			nmute = tr.ns;
			warn("muting whole trace #%d", tr.tracl);
		}
		bzero(tr.data, nmute * FSIZE);
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/* SUMUTE: $Revision: 2.7 $ ; $Date: 89/06/14 12:10:21 $	*/
d12 1
a12 1
 *  Golden, CO 80401  (isis!csm9a!jkcohen)
d30 1
a30 1
	v =		the velocity				\n\
d33 1
a33 1
	alpha = 1	mute when offset/v < alpha*time		\n\
d35 1
a35 1
	nmute = (calc)	number of points muted--over rides	\n\
a44 1
 *
a46 5
/* Embed Revision Control System identifier strings */
static string progid =
	"   $Source: /src/su/src/RCS/sumute.c,v $";
static string revid =
	"   $Revision: 2.7 $ ; $Date: 89/06/14 12:10:21 $";
a47 2


d50 1
a50 2
main(argc, argv)
int argc; char **argv;
a61 5
	if (!igetpar("ID", &ID)) ID = 0;
	if (ID) {
		(void) fprintf(stderr, "%s\n", progid);
		(void) fprintf(stderr, "%s\n", revid);
	}
@
