head	1.28;
access;
symbols;
locks; strict;
comment	@ * @;


1.28
date	2011.11.12.00.44.21;	author john;	state Exp;
branches;
next	1.27;

1.27
date	2011.09.09.22.35.17;	author john;	state Exp;
branches;
next	1.26;

1.26
date	2003.06.09.16.17.07;	author john;	state Exp;
branches;
next	1.25;

1.25
date	97.07.28.22.36.46;	author john;	state Exp;
branches;
next	1.24;

1.24
date	96.09.18.19.47.27;	author jkc;	state Exp;
branches;
next	1.23;

1.23
date	96.08.11.20.05.49;	author jkc;	state Exp;
branches;
next	1.22;

1.22
date	96.08.09.18.00.46;	author jkc;	state Exp;
branches;
next	1.21;

1.21
date	96.02.05.21.11.53;	author jkc;	state Exp;
branches;
next	1.20;

1.20
date	95.01.19.11.44.26;	author john;	state Exp;
branches;
next	1.19;

1.19
date	94.08.25.15.00.51;	author jkc;	state Exp;
branches;
next	1.18;

1.18
date	93.08.13.10.28.19;	author john;	state Exp;
branches;
next	1.17;

1.17
date	93.08.09.15.19.56;	author john;	state Exp;
branches;
next	1.16;

1.16
date	93.06.07.14.33.31;	author jkc;	state Exp;
branches;
next	1.15;

1.15
date	92.10.26.11.02.07;	author john;	state Exp;
branches;
next	1.14;

1.14
date	91.09.05.08.51.48;	author jkcohen;	state Exp;
branches;
next	1.13;

1.13
date	91.01.18.15.28.15;	author jkc;	state Exp;
branches;
next	1.12;

1.12
date	91.01.18.15.27.09;	author jkc;	state Exp;
branches;
next	1.11;

1.11
date	91.01.18.15.25.52;	author jkc;	state Exp;
branches;
next	1.10;

1.10
date	91.01.18.15.24.14;	author jkc;	state Exp;
branches;
next	1.9;

1.9
date	91.01.18.15.21.59;	author jkc;	state Exp;
branches;
next	1.8;

1.8
date	91.01.15.16.49.23;	author jkc;	state Exp;
branches;
next	1.7;

1.7
date	90.12.22.18.59.08;	author jkc;	state Exp;
branches;
next	1.6;

1.6
date	90.10.25.09.58.41;	author jkc;	state Exp;
branches;
next	1.5;

1.5
date	90.05.31.10.53.11;	author jkc;	state Exp;
branches;
next	1.4;

1.4
date	90.05.29.16.52.21;	author jkc;	state Exp;
branches;
next	1.3;

1.3
date	90.05.25.19.18.19;	author jkc;	state Exp;
branches;
next	1.2;

1.2
date	90.05.25.18.37.27;	author jkc;	state Exp;
branches;
next	1.1;

1.1
date	90.04.20.20.40.11;	author jkc;	state Exp;
branches;
next	;


desc
@sort on any header keys
@


1.28
log
@copyright
@
text
@/* Copyright (c) Colorado School of Mines, 2011.*/
/* All rights reserved.                       */

/* SUSORT: $Revision: 1.27 $ ; $Date: 2011/09/09 22:35:17 $	*/

#include "su.h"
#include "segy.h"
#include <signal.h>

/*********************** self documentation **********************/
char *sdoc[] = {
" 								",
" SUSORT - sort on any segy header keywords			",
" 								",
" susort <stdin >stdout [[+-]key1 [+-]key2 ...]			",
" 								",
" Susort supports any number of (secondary) keys with either	",
" ascending (+, the default) or descending (-) directions for 	",
" each.  The default sort key is cdp.				",
" 								",
" Note:	Only the following types of input/output are supported	",
"	Disk input --> any output				",
"	Pipe input --> Disk output				",
" 								",
" Caveat:  On some Linux systems Pipe input and or output often ",
"		fails						",
"	Disk input ---> Disk output is recommended		",
" 								",
" Note: If the the CWP_TMPDIR environment variable is set use	",
"	its value for the path; else use tmpfile()		",
" 								",
" Example:							",
" To sort traces by cdp gather and within each gather		",
" by offset with both sorts in ascending order:			",
" 								",
" 	susort <INDATA >OUTDATA cdp offset			",
" 								",
" Caveat: In the case of Pipe input a temporary file is made	",
"	to hold the ENTIRE data set.  This temporary is		",
"	either an actual disk file (usually in /tmp) or in some	",
"	implementations, a memory buffer.  It is left to the	",
"	user to be SENSIBLE about how big a file to pipe into	",
"	susort relative to the user's computer.			",
" 								",
NULL};

/* Credits:
 *	SEP: Einar Kjartansson , Stew Levin
 *	CWP: Shuki Ronen,  Jack K. Cohen
 *
 * Caveats:
 *	Since the algorithm depends on sign reversal of the key value
 *	to obtain a descending sort, the most significant figure may
 *	be lost for unsigned data types.  The old SEP support for tape
 *	input was removed in version 1.16---version 1.15 is in the
 *	Portability directory for those who may want to input SU data
 *	stored on tape.
 *
 * Trace header fields modified: tracl, tracr
 */
/**************** end self doc ***********************************/


#define NTRSTEP	1024	/* realloc() icrement measured in traces */

segy tr;
static int nkey;	/* number of keys to sort on	*/
static cwp_String type;	/* header key types		*/

/* Prototypes */
Value negval(cwp_String type, Value val);   /* reverse sign of value	*/
int cmp_list(const void *a, const void *b);
               				/* qsort comparison function	*/
static void closefiles(void);		/* signal handler		*/

/* Globals (so can trap signal) defining temporary disk files */
char tracefile[BUFSIZ];	/* filename for trace storage file	*/
FILE *tracefp;		/* fp for trace storage file		*/


int
main(int argc, char **argv)
{
	static Value *val_list;	/* a list of the key values for each    */
				/* trace with each group headed by the	*/
				/* trace number of that trace		*/
	static int *index;	/* header key indices			*/
  	static cwp_Bool *up;	/* sort direction (+ = up = ascending)	*/
	register Value *vptr;	/* location pointer for val_list	*/
	int ngroup;		/* size of unit in val_list (nkey + 1)	*/
	int nv;			/* number of groups in val_list		*/
	size_t nvsize;		/* size of group in val_list		*/
  	Value val;		/* value of a keyword			*/
	long ntr;		/* number of traces from gettr		*/
	long itr;		/* index of trace (0,1,2,...)		*/
	FileType ftypein;	/* filetype of stdin			*/
	FileType ftypeout;	/* filetype of stdout			*/
	int nsegy;		/* number of bytes on the trace		*/
	cwp_Bool ispipe;	/* ftypein == PIPE ?			*/
	cwp_Bool isdisk;	/* ftypein == DISK ?			*/
	char *tmpdir;		/* directory path for tmp files		*/
	cwp_Bool istmpdir=cwp_false;/* true for user given path		*/


	/* Initialize */
	initargs(argc, argv);
	requestdoc(1);

	/* Look for user-supplied tmpdir form environment */
	if (!(tmpdir = getenv("CWP_TMPDIR"))) tmpdir="";
	if (!STREQ(tmpdir, "") && access(tmpdir, WRITE_OK))
		err("you can't write in %s (or it doesn't exist)", tmpdir);


	/* The algorithm requires stdin to be rewound and */
	/* random access to either stdin or stdout.    */
	ftypein = filestat(STDIN);
	ftypeout = filestat(STDOUT);
	isdisk = (ftypein == DISK) ? cwp_true : cwp_false;
	ispipe = (ftypein == PIPE || ftypein == FIFO) ? cwp_true : cwp_false;
	if (ispipe && ftypeout != DISK)
		err("OK IO types are: DISK->ANYTHING, PIPE->DISK");


	/* If pipe, prepare temporary file to hold data */
	if (ispipe) {
		if (STREQ(tmpdir,"")) {
			tracefp = etmpfile();
		} else {	/* user-supplied tmpdir from environment */
			char directory[BUFSIZ];
			strcpy(directory, tmpdir);
			strcpy(tracefile, temporary_filename(directory));
			/* Handle user interrupts */
			signal(SIGINT, (void (*) (int)) closefiles);
			signal(SIGQUIT, (void (*) (int)) closefiles);
			signal(SIGHUP,  (void (*) (int)) closefiles);
			signal(SIGTERM, (void (*) (int)) closefiles);
			tracefp = efopen(tracefile, "w+");
			istmpdir=cwp_true;		
		}
	}		

	/* Set number of sort keys */
	if (argc == 1) nkey = 1; /* no explicit keys: default cdp key */
	else  nkey = argc - 1;   /* one or more explicit keys */


	/* Allocate lists for key indices, sort directions and key types */
	index = ealloc1int(nkey);
  	up = (cwp_Bool *) ealloc1(nkey, sizeof(cwp_Bool));
	type = (char *) ealloc1(nkey, sizeof(char));
	
	
	/* Initialize index, type and up */
	if (argc == 1) {
		index[0] = getindex("cdp");
		up[0] = cwp_true;
		type[0] = 'l';
	} else {
		register int i;
		for (i = 0; i < nkey; ++i) {
			switch (**++argv) { /* sign char of next arg */
			case '+':
				up[i] = cwp_true;
				++*argv;   /* discard sign char in arg */
			break;
			case '-':
				up[i] = cwp_false;
				++*argv;   /* discard sign char in arg */
			break;
			default:
				up[i] = cwp_true;
			break;
			}
			index[i] = getindex(*argv);
			type[i] = hdtype(*argv)[0]; /* need single char */
		}
	}


	/* Allocate list of trace numbers + key values */
	ngroup = nkey + 1;
	nvsize = ngroup*sizeof(Value);
	nv = NTRSTEP;  /* guess at required number */
	val_list = (Value *) ealloc1(nv, nvsize);
	vptr = val_list;


	/* Run through traces once to collect header values */
	ntr = 0;
	if (!(nsegy = gettr(&tr)))  err("can't get first trace");
	
	do {
		itr = ntr++;
		/* realloc if out of room */
		if (0 == (ntr % NTRSTEP)) {
			nv += NTRSTEP;
			val_list = (Value *) erealloc(val_list, nv*nvsize);
			vptr = val_list + itr * ngroup;
		}

		/* enter trace index in list and then key values */
		vptr++->l = itr;	/* insert number and advance */
		{ register int i;
		  for (i = 0; i < nkey; ++i) {
			gethval(&tr, index[i], &val);
			*vptr++ = up[i] ? val : negval(type + i, val);
				/* negative values give reverse sort */
		  }
		}
		if (ispipe) efwrite((char *)&tr, 1, nsegy, tracefp);
	} while (gettr(&tr));
	
	if      (ispipe)  rewind(tracefp);
	else /* disk */	  rewind(stdin);

	/* Sort the headers values */
	qsort(val_list, ntr, nvsize, cmp_list);

	if (isdisk) {
		/* run through sorted list and write output sequentially */
		register int i;
		for (i = 0; i < ntr; ++i) {
			itr = val_list[i*ngroup].l;
			gettra(&tr, ((int) itr));
			tr.tracl = tr.tracr = i + 1;
			puttr(&tr);
		}
	} else /* pipe */ {
		/* invert permutation and read input sequentially */
		register int i;
		for (i = 0; i < ntr; ++i) {
			itr = val_list[i*ngroup].l;
			val_list[itr*ngroup + 1].l = i;
	        }
		for (i = 0; i < ntr; ++i) {
			itr = val_list[i*ngroup + 1].l;
			efread(&tr, 1, nsegy, tracefp);
			tr.tracl = tr.tracr = (int) (itr + 1);
			efseeko(stdout, ((off_t) itr)*((off_t) nsegy), SEEK_SET);
			efwrite(&tr, 1, nsegy, stdout);
		}
	}

	/* Clean up */
	if (ispipe) {
		efclose(tracefp);
		if (istmpdir) eremove(tracefile);
	}
	
	return(CWP_Exit());
}


/* Comparison routine for qsort */
int cmp_list(const void *a, const void *b)
{
	register int i;
	Value va, vb;
	register const Value *pa, *pb;
	int compare;

	pa = (Value *) a;
	pb = (Value *) b;

	/* Can order as soon as any components are unequal */
	for (i = 0; i < nkey; ++i) {
		va = *++pa; vb = *++pb; /* advance and dereference */
		if ((compare = valcmp(type + i, va, vb)))
			return compare;
        }
        return 0;
}


/* Reverse sign of value */
Value negval(cwp_String type, Value val)
{
	switch (*type) {
	case 'h':
		val.h = -val.h;
	break;
	case 'u': 
		val.u = USHRT_MAX -val.u;
	break;
	case 'l':
		val.l = -val.l;
	break;
	case 'v':
		val.v = ULONG_MAX -val.v;
	break;
	case 'i':
		val.i = -val.i;
	break;
	case 'p':
		val.p = (int) -val.p;
	break;
	case 'f':
		val.f = -val.f;
	break;
	case 'd':
		val.d = -val.d;
	break;
	default: err("%d: mysterious type %s", __LINE__, type);
	}

	return val;
}


/* for graceful interrupt termination */
static void closefiles(void)
{
	efclose(tracefp);
	eremove(tracefile);
	exit(EXIT_FAILURE);
}
@


1.27
log
@*** empty log message ***
@
text
@d1 4
a4 1
/* SUSORT: $Revision: 1.26 $ ; $Date: 2003/06/09 16:17:07 $	*/
@


1.26
log
@9 June 2003
@
text
@d1 1
a1 1
/* SUSORT: $Revision: 1.25 $ ; $Date: 1997/07/28 22:36:46 $	*/
d22 4
d45 2
a46 2
 *	SEP: Einar, Stew
 *	CWP: Shuki, Jack
d61 1
a61 1
#define NTRSTEP	1024	/* realloc() increment measured in traces */
@


1.25
log
@changes suggested by Stew Levin to silence SGI compiler warnings, etc
@
text
@d1 1
a1 1
/* SUSORT: $Revision: 1.24 $ ; $Date: 1996/09/18 19:47:27 $	*/
d233 1
a233 1
			efseek(stdout, itr*nsegy, SEEK_SET);
d244 1
a244 1
	return EXIT_SUCCESS;
@


1.24
log
@Updated tmpfile stuff.
@
text
@d1 1
a1 1
/* SUSORT: $Revision: 1.23 $ ; $Date: 1996/08/11 20:05:49 $	*/
d65 2
a66 1
int cmp_list();				/* qsort comparison function	*/
d85 1
a85 1
	int nvsize;		/* size of group in val_list		*/
d95 1
a95 1
	cwp_Bool istmpdir=false;/* true for user given path		*/
d112 2
a113 2
	isdisk = (ftypein == DISK) ? true : false;
	ispipe = (ftypein == PIPE || ftypein == FIFO) ? true : false;
d132 1
a132 1
			istmpdir=true;		
d150 1
a150 1
		up[0] = true;
d157 1
a157 1
				up[i] = true;
d161 1
a161 1
				up[i] = false;
d165 1
a165 1
				up[i] = true;
d218 1
a218 1
			gettra(&tr, itr);
d232 1
a232 1
			tr.tracl = tr.tracr = itr + 1;
d249 1
a249 1
int cmp_list(register Value *a, register Value *b)
d253 1
d256 3
d261 1
a261 1
		va = *++a; vb = *++b; /* advance and dereference */
d277 1
a277 1
		val.u = (short) -val.u;
d283 1
a283 1
		val.u = (long) -val.u;
@


1.23
log
@Removed unistd.h to par.h.
@
text
@d1 1
a1 1
/* SUSORT: $Revision: 1.22 $ ; $Date: 1996/08/09 18:00:46 $	*/
d69 2
a70 2
char datafile[BUFSIZ];	/* filename for trace storage file	*/
FILE *datafp;		/* fp for trace storage file		*/
d120 1
a120 1
			datafp = etmpfile();
d124 1
a124 1
			strcpy(datafile, temporary_filename(directory));
d127 2
d130 1
a130 1
			datafp = efopen(datafile, "w+");
d203 1
a203 1
		if (ispipe) efwrite((char *)&tr, 1, nsegy, datafp);
d206 1
a206 1
	if      (ispipe)  rewind(datafp);
d230 1
a230 1
			efread(&tr, 1, nsegy, datafp);
d239 2
a240 2
		efclose(datafp);
		if (istmpdir) eremove(datafile);
d302 3
a304 2
	efclose(datafp);
	eremove(datafile);
@


1.22
log
@Look for CWP_TMPDIR environment variable.
@
text
@d1 1
a1 1
/* SUSORT: $Revision: 1.21 $ ; $Date: 1996/02/05 21:11:53 $	*/
a5 1
#include <unistd.h>
@


1.21
log
@Deal with header words accessed/modified down to sudoc.
@
text
@d1 1
a1 1
/* SUSORT: $Revision: 1.20 $ ; $Date: 1995/01/19 11:44:26 $	*/
d5 2
d23 3
d67 6
d74 1
d94 2
a95 1
	FILE *datafp;		/* fp for data storage file		*/
d102 5
d119 14
a132 2
	if (ispipe)  datafp = etmpfile();

d236 6
d256 1
a256 1
		if (compare = valcmp(type + i, va, vb))
d295 8
@


1.20
log
@cosmetic
@
text
@d1 1
a1 1
/* SUSORT: $Revision: 1.19 $ ; $Date: 94/08/25 15:00:51 $	*/
d48 1
@


1.19
log
@Removed copyright statement from codes that had it.
Moved self-doc line for sudoc.
@
text
@d1 1
a1 1
/* SUSORT: $Revision: 1.18 $ ; $Date: 93/08/13 10:28:19 $	*/
d64 2
a65 2
	static Value *val_list;	/* a list of the key values for each
				/* trace with each group headed by the
d89 1
a89 1
	/* The algorithm requires stdin to be rewound and
@


1.18
log
@changed Bool to cwp_Bool
@
text
@d1 1
a1 1
/* SUSORT: $Revision: 1.17 $ ; $Date: 93/08/09 15:19:56 $	*/
a2 13
/*----------------------------------------------------------------------
 * Copyright (c) Colorado School of Mines, 1990.
 * All rights reserved.
 *
 * This code is part of SU.  SU stands for Seismic Unix, a processing line
 * developed at the Colorado School of Mines, partially based on Stanford
 * Exploration Project (SEP) software.  Inquiries should be addressed to:
 *
 *  Jack K. Cohen, Center for Wave Phenomena, Colorado School of Mines,
 *  Golden, CO 80401  (jkc@@dix.mines.colorado.edu)
 *----------------------------------------------------------------------
 */

a34 1
/**************** end self doc ***********************************/
d49 1
d79 2
a80 2
	cwp_Bool ispipe;		/* ftypein == PIPE ?			*/
	cwp_Bool isdisk;		/* ftypein == DISK ?			*/
@


1.17
log
@changed String to cwp_String
@
text
@d1 1
a1 1
/* SUSORT: $Revision: 1.16 $ ; $Date: 93/06/07 14:33:31 $	*/
d81 1
a81 1
  	static Bool *up;	/* sort direction (+ = up = ascending)	*/
d92 2
a93 2
	Bool ispipe;		/* ftypein == PIPE ?			*/
	Bool isdisk;		/* ftypein == DISK ?			*/
d123 1
a123 1
  	up = (Bool *) ealloc1(nkey, sizeof(Bool));
@


1.16
log
@Removed tape stuff (kept tape version in "Portability" directory.
@
text
@d1 1
a1 1
/* SUSORT: $Revision: 1.15 $ ; $Date: 92/10/26 11:02:07 $	*/
d69 1
a69 1
static String type;	/* header key types		*/
d72 1
a72 1
Value negval(String type, Value val);   /* reverse sign of value	*/
d240 1
a240 1
Value negval(String type, Value val)
@


1.15
log
@new selfdoc installed
@
text
@d1 1
a1 1
/* SUSORT: $Revision: 1.14 $ ; $Date: 91/09/05 08:51:48 $	*/
a17 6
#include <sys/ioctl.h>
#ifdef _IBMR2
#include <sys/tape.h>
#else
#include <sys/mtio.h>
#endif
a31 1
"	Tape input --> Disk output				",
d34 6
a46 6
" Example:							",
" To sort traces by cdp gather and within each gather		",
" by offset with both sorts in ascending order:			",
" 								",
" 	susort <INDATA >OUTDATA cdp offset			",
" 								",
d57 4
a60 1
 *	be lost for unsigned data types.
a72 1
void rew(FILE *fp);			/* rewind tape file		*/
a92 1
	Bool istape;		/* ftypein == TAPE ?			*/
a106 1
	istape = (ftypein == TAPE) ? true : false;
d108 2
a109 2
	if ( (istape || ispipe) && ftypeout != DISK)
		err("OK IO types are: DISK->ANYTHING, TAPE->DISK, PIPE->DISK");
d188 1
a188 2
	else if (isdisk)  rewind(stdin);
	else /* tape */	  rew(stdin);
d202 1
a202 1
	} else if (istape || ispipe) {
d209 6
a214 16
		if (istape) {
			for (i = 0; i < ntr; ++i) {
				itr = val_list[i*ngroup + 1].l;
				if (!gettr(&tr))  err("can't reread input");
				tr.tracl = tr.tracr = itr + 1;
				efseek(stdout, itr*nsegy, SEEK_SET);
				efwrite(&tr, 1, nsegy, stdout);
			}
		} else {  /* pipe */
			for (i = 0; i < ntr; ++i) {
				itr = val_list[i*ngroup + 1].l;
				efread(&tr, 1, nsegy, datafp);
				tr.tracl = tr.tracr = itr + 1;
				efseek(stdout, itr*nsegy, SEEK_SET);
				efwrite(&tr, 1, nsegy, stdout);
			}
a271 65

#ifndef _IBMR2
#define MT_BOT	 0xffffffff /* Guess--MT_BOT not documented in mtio.h	*/
#define WASATBOT (mtstat.mt_dsreg & MT_BOT)
#define NOTPOS	 (mtstat.mt_blkno != ((daddr_t) 0)) /* not on Gould	*/

void rew(FILE *fp)
{
	static struct mtop bsf /* backward space file	  */ = {MTBSF, 1};
	static struct mtop bsr /* backward space record	  */ = {MTBSR, 1};
	static struct mtop fsr /* forward space record	  */ = {MTFSR, 1};
	static struct mtop nop /* no op, sets status only */ = {MTNOP, 1};
	static struct mtop set /* rewind		  */ = {MTREW, 1};
	static struct mtget mtstat;
	int fd = fileno(fp);


	/* fast path--Note: I don't understand this (jkc) */
	if (fd == STDIN && WASATBOT) {
		if (-1 == ioctl(fd, MTIOCTOP, (char *) &set)) {
			err("%s: ioctl rewind failed", __FILE__);
		}
	} else {
		/* back up over tape mark */
		if (-1 == ioctl(fd, MTIOCTOP, (char *) &bsr)) {
			err("%s: ioctl bsr failed", __FILE__);
		}

		/* back up to BOT or before prev TM */
		if (-1 == ioctl(fd, MTIOCTOP, (char *) &bsf)) {
			err("%s: ioctl bsf failed", __FILE__);
		}

		/* sense */
		if (-1 == ioctl(fd, MTIOCTOP, (char *) &nop)) {
			err("%s: ioctl nop failed", __FILE__);
		}

		/* retrieve sense and status */
		if (-1 == ioctl(fd, MTIOCGET, (char *) &mtstat)) {
			err("%s: ioctl mtstat failed", __FILE__);
		}

		/* space forward if needed */
		if (!WASATBOT || NOTPOS) {
		    if (-1 == ioctl(fd, MTIOCTOP, (char *) &fsr)) {
			err("%s: ioctl fsr failed", __FILE__);
		    }
		}
	}
}

#else /* it's an IBMR2 */

void rew(FILE *fp)
{
	static struct stop set /* rewind */ = {STREW, 1};
	int fd = fileno(fp);


	/* doing my best -- see above non-IBM routine (jkc) */
	if (-1 == ioctl(fd, STIOCTOP, (char *) &set))
		err("%s: ioctl rewind failed", __FILE__);
}
#endif
@


1.14
log
@string -> String and so forth
@
text
@d1 1
a1 1
/* SUSORT: $Revision: 1.8 $ ; $Date: 91/01/16 13:41:08 $	*/
d26 29
a54 29
String sdoc =
" 								\n"
" SUSORT - sort on any segy header keywords			\n"
" 								\n"
" susort <stdin >stdout [[+-]key1 [+-]key2 ...]			\n"
" 								\n"
" Susort supports any number of (secondary) keys with either	\n"
" ascending (+, the default) or descending (-) directions for 	\n"
" each.  The default sort key is cdp.				\n"
" 								\n"
" Note:	Only the following types of input/output are supported	\n"
"	Disk input --> any output				\n"
"	Tape input --> Disk output				\n"
"	Pipe input --> Disk output				\n"
" 								\n"
" Caveat: In the case of Pipe input a temporary file is made	\n"
"	to hold the ENTIRE data set.  This temporary is		\n"
"	either an actual disk file (usually in /tmp) or in some	\n"
"	implementations, a memory buffer.  It is left to the	\n"
"	user to be SENSIBLE about how big a file to pipe into	\n"
"	susort relative to the user's computer.			\n"
" 								\n"
" Example:							\n"
" To sort traces by cdp gather and within each gather		\n"
" by offset with both sorts in ascending order:			\n"
" 								\n"
" 	susort <INDATA >OUTDATA cdp offset			\n"
" 								\n"
;
d105 1
a105 1
	askdoc(1);
@


1.13
log
@Improve realloc patch and fix an old oversight: set tracl for
disk output
@
text
@d26 1
a26 1
string sdoc =
d73 1
a73 1
static string type;	/* header key types		*/
d76 1
a76 1
value negval(string type, value val);   /* reverse sign of value	*/
d82 1
a82 1
	static value *val_list;	/* a list of the key values for each
d86 2
a87 2
  	static bool *up;	/* sort direction (+ = up = ascending)	*/
	register value *vptr;	/* location pointer for val_list	*/
d91 1
a91 1
  	value val;		/* value of a keyword			*/
d94 2
a95 2
	filetype ftypein;	/* filetype of stdin			*/
	filetype ftypeout;	/* filetype of stdout			*/
d97 3
a99 3
	bool ispipe;		/* ftypein == PIPE ?			*/
	bool istape;		/* ftypein == TAPE ?			*/
	bool isdisk;		/* ftypein == DISK ?			*/
d130 1
a130 1
  	up = (bool *) ealloc1(nkey, sizeof(bool));
d163 1
a163 1
	nvsize = ngroup*sizeof(value);
d165 1
a165 1
	val_list = (value *) ealloc1(nv, nvsize);
d178 1
a178 1
			val_list = (value *) erealloc(val_list, nv*nvsize);
d241 1
a241 1
int cmp_list(register value *a, register value *b)
d244 1
a244 1
	value va, vb;
d258 1
a258 1
value negval(string type, value val)
@


1.12
log
@Use ealloc1 instead of ealloc
@
text
@d1 1
a1 1
/* SUSORT: $Revision: 1.5 $ ; $Date: 91/01/16 10:43:34 $	*/
d89 2
a90 2
	int nv;			/* bytes allocated for val_list		*/
	int nvstep;		/* incremental allocation for val_list	*/
d133 1
a133 8

	/* Allocate list of trace numbers + key values */
	ngroup = nkey + 1;
	nv = NTRSTEP;  /* guess at required number */
	val_list = (value *) ealloc1(nv, ngroup*sizeof(value));
	vptr = val_list;
	nvstep = nv;

d160 9
d172 1
d177 2
a178 3
			nv += nvstep;
			val_list = (value *)
				 erealloc(val_list, nv*sizeof(value));
d199 1
a199 1
	qsort(val_list, ntr, ngroup*sizeof(value), cmp_list);
d207 1
@


1.11
log
@Eliminate a duplicated block in TAPE/PIPE code
@
text
@d1 1
a1 1
/* SUSORT: $Revision: 1.4 $ ; $Date: 91/01/16 03:43:14 $	*/
d45 2
a46 2
"	user to be sensible about how big a file to pipe into	\n"
"	susort.							\n"
d97 3
a99 3
	bool ispipe;
	bool istape;
	bool isdisk;
d120 1
a120 1
	if (ispipe)  datafp = tmpfile();
d124 2
a125 4
	if (argc == 1)	/* no explicit keys: default cdp key */
		nkey = 1;
	else		/* one or more explicit keys */
		nkey = argc - 1;
d128 1
a128 1
	/* Allocate room for key indices and sort directions */
d130 3
a132 1
  	up = (bool *) emalloc((uint) nkey * sizeof(bool));
d134 1
a134 5

	/* Allocate room for key types */
	type = (char *) emalloc(nkey);

	/* Allocate room for list of trace numbers and key values */
d136 2
a137 2
	nv = NTRSTEP * ngroup * sizeof(value);
	val_list = (value *) emalloc((uint) nv);
d169 1
a169 1
	if (!(nsegy = gettr(&tr)))  err("no traces");
d175 2
a176 1
			val_list = (value *) erealloc(val_list, nv);
@


1.10
log
@Restructured main loop to a do-while, so nsegy can be captured
outside loop.  This also simplifies the loop test.
@
text
@d1 1
a1 1
/* SUSORT: $Revision: 1.3 $ ; $Date: 91/01/16 03:35:02 $	*/
d210 1
a210 1
	} else if (istape) {
d217 17
a233 21
	        for (i = 0; i < ntr; ++i) {
			itr = val_list[i*ngroup + 1].l;
			if (!gettr(&tr))  err("can't reread input");
		        tr.tracl = tr.tracr = itr + 1;
			efseek(stdout, itr*nsegy, SEEK_SET);
			efwrite(&tr, 1, nsegy, stdout);
	        }
	} else { /* pipe */
		/* invert permutation and read input sequentially */
		register int i;
		for (i = 0; i < ntr; ++i) {
			itr = val_list[i*ngroup].l;
			val_list[itr*ngroup + 1].l = i;
	        }
	        for (i = 0; i < ntr; ++i) {
			itr = val_list[i*ngroup + 1].l;
			efread(&tr, 1, nsegy, datafp);
		        tr.tracl = tr.tracr = itr + 1;
			efseek(stdout, itr*nsegy, SEEK_SET);
			efwrite(&tr, 1, nsegy, stdout);
	        }
@


1.9
log
@Tweaks, stype updates, added some bools for filetypes,
changed rew() to use fp, fixed declaration of qsort comparison function.
@
text
@d1 1
a1 1
/* SUSORT: $Revision: 1.2 $ ; $Date: 91/01/15 21:58:25 $	*/
a96 1
	int nsegysave;		/* number of bytes on the trace		*/
d173 2
a174 2
	while (nsegy = gettr(&tr)) {
		if (!ntr) nsegysave = nsegy;
d193 1
a193 1
	}
d219 1
a219 1
			if (!(nsegy = gettr(&tr))) err("can't reread input");
d233 1
a233 1
			efread(&tr, 1, nsegysave, datafp);
d235 2
a236 2
			efseek(stdout, itr*nsegysave, SEEK_SET);
			efwrite(&tr, 1, nsegysave, stdout);
@


1.8
log
@Installed with great trepidation, a sort from pipe option
using tmpfile to re-read the pipe.  This code still needs
some tweaking to bring it up to current standards and formats.
@
text
@d1 1
a1 1
/* SUSORT: $Revision: 1.7 $ ; $Date: 90/12/22 18:59:08 $	*/
d75 4
d82 2
a83 2
	static value *val_list;	/* a list of the key values for each	*/
				/* trace with each group headed by the	*/
a95 1
	bool disk_in;		/* is stdin a diskfile?			*/
d98 3
a101 4
	register int i;		/* for loop counter			*/
	value negval();		/* reverse sign of value		*/
	void rew();		/* rewind tape or disk file		*/
	int cmp_list();		/* comparison function for qsort	*/
d113 4
a116 2
	if ( (ftypein == TAPE || ftypein == PIPE || ftypein == FIFO) &&
	      ftypeout != DISK)
d121 1
a121 1
	if (ftypein == PIPE || ftypein == FIFO)  datafp = tmpfile();
d152 2
a153 1
		for (i = 0; i < nkey; i++) {
d186 2
a187 1
		for (i = 0; i < nkey; i++) {
d191 1
d193 1
a193 2
		if (ftypein == PIPE || ftypein == FIFO)
			efwrite((char *)&tr, 1, nsegy, datafp);
d196 3
a198 3
	if      (ftypein == PIPE || ftypein == FIFO) rewind(datafp);
	else if (ftypein == DISK)                    rewind(stdin);
	else		                             rew(ftypein);
d203 1
a203 1
	if (ftypein == DISK) {
d205 2
a206 1
		for (i = 0; i < ntr; i++) {
d211 1
a211 1
	} else if (ftypein == TAPE) {
d213 2
a214 1
		for (i = 0; i < ntr; i++) {
d218 1
a218 1
	        for (i = 0; i < ntr; i++) {
d225 1
a225 1
	} else { /* ftypein == PIPE */
d227 2
a228 1
		for (i = 0; i < ntr; i++) {
d232 1
a232 1
	        for (i = 0; i < ntr; i++) {
d253 1
a253 1
	for (i = 0; i < nkey; i++) {
d301 1
a301 1
void rew(int fd)
d309 1
d349 1
a349 1
void rew(int fd)
d351 2
a352 1
	static struct stop set /* rewind		  */ = {STREW, 1};
@


1.7
log
@using fp version and macro for gettra.
Also fixed apparent typo in efwrite call (FSIZE->1)
@
text
@d1 1
a1 1
/* SUSORT: $Revision: 1.6 $ ; $Date: 90/10/25 09:58:41 $	*/
d26 29
a54 21
string sdoc = "\
								\n\
SUSORT - sort on any segy header keywords			\n\
								\n\
susort <stdin >stdout [[+-]key1 [+-]key2 ...]			\n\
								\n\
Susort supports any number of (secondary) keys with either	\n\
ascending (+, the default) or descending (-) directions	for 	\n\
each.  The default sort key is cdp.				\n\
								\n\
Caveat:								\n\
	The input must be a diskfile or tapefile.	    	\n\
	In the latter case, the output must be a diskfile.	\n\
								\n\
Example:							\n\
To sort traces by cdp gather and within each gather		\n\
by offset with both sorts in ascending order:			\n\
								\n\
	susort <INDATA >OUTDATA cdp offset			\n\
								\n\
";
a65 2
 *	The input must be either a diskfile or tapefile.  In the latter
 *      case, the output must be a diskfile.
d94 2
d107 2
a108 5
	/* Stdin must be rewound.  This means stdin is a diskfile or
	   tapefile.  We also need random access to either stdin or stdout.
	   Thus, if stdin is a tapefile, we demand that stdout be a
	   diskfile.
	 */
d111 3
a113 7
	if (ftypein == DISK) {
		disk_in = true;
	} else if (ftypein == TAPE && ftypeout == DISK) {
		disk_in = false;	/* but output is seekable */
	} else {
		err("if stdin is not a diskfile, we must go tape to disk");
	}
d116 4
d169 2
a170 1
	while (gettr(&tr)) {
d186 2
d189 4
a192 1
	rew(STDIN, ftypein);
d195 1
a195 1
	qsort((char*) val_list, (uint) ntr, ngroup*sizeof(value), cmp_list);
d197 1
a197 1
	if (disk_in) {
d204 1
a204 1
	} else {
d212 1
a212 2
		        if (!(nsegy = gettr(&tr)))
				err("unable to re-read input");
d217 13
a231 1

d292 1
a292 1
void rew(int fd, filetype ftype)
d302 10
a311 12
	switch (ftype) {
	case TAPE:
		/* fast path--Note: I don't understand this (jkc) */
		if (fd == STDIN && WASATBOT) {
			if (-1 == ioctl(fd, MTIOCTOP, (char *) &set)) {
				err("%s: ioctl rewind failed", __FILE__);
			}
		} else {
			/* back up over tape mark */
			if (-1 == ioctl(fd, MTIOCTOP, (char *) &bsr)) {
				err("%s: ioctl bsr failed", __FILE__);
			}
d313 4
a316 4
			/* back up to BOT or before prev TM */
			if (-1 == ioctl(fd, MTIOCTOP, (char *) &bsf)) {
				err("%s: ioctl bsf failed", __FILE__);
			}
d318 4
a321 4
			/* sense */
			if (-1 == ioctl(fd, MTIOCTOP, (char *) &nop)) {
				err("%s: ioctl nop failed", __FILE__);
			}
d323 4
a326 4
			/* retrieve sense and status */
			if (-1 == ioctl(fd, MTIOCGET, (char *) &mtstat)) {
				err("%s: ioctl mtstat failed", __FILE__);
			}
d328 5
a332 6
			/* space forward if needed */
			if (!WASATBOT || NOTPOS) {
			    if (-1 == ioctl(fd, MTIOCTOP, (char *) &fsr)) {
				err("%s: ioctl fsr failed", __FILE__);
			    }
			}
a333 6
	break;
	case DISK:
		elseek(fd, 0, SEEK_SET);
	break;
	default:
		err("%s: rewind only allowed for tape or disk", __FILE__);
d339 1
a339 1
void rew(int fd, filetype ftype)
d344 3
a346 12
	switch (ftype) {
	case TAPE: /* doing my best -- see above non-IBM routine (jkc) */
		if (-1 == ioctl(fd, STIOCTOP, (char *) &set)) {
			err("%s: ioctl rewind failed", __FILE__);
		}
	break;
	case DISK:
		elseek(fd, 0, SEEK_SET);
	break;
	default:
		err("%s: rewind only allowed for tape or disk", __FILE__);
	}
@


1.6
log
@Zapped declarations of system "qsort" to make ANSI C happy.
@
text
@d1 1
a1 1
/* SUSORT: $Revision: 1.5 $ ; $Date: 90/05/31 10:53:11 $	*/
d190 1
a190 1
			gettra(STDIN, &tr, (int) itr);
d204 2
a205 2
			elseek(STDOUT, itr*nsegy, SEEK_SET);
			efwrite(&tr, FSIZE, nsegy, stdout);
@


1.5
log
@Better attempt at leaving SOME hint of a tape facility.
Used the _IBMR2 macro--hope that's right for RS6000's
@
text
@d1 1
a1 1
/* SUSORT: $Revision: 1.3 $ ; $Date: 90/05/25 19:18:19 $	*/
a91 1
	void qsort();		/* system subroutine			*/
@


1.4
log
@Removed tape facilities from rew() (hence it's raison d'ete) since
rs6000 is eclectic in this area mtio.h is partially in tape.g, eg.
@
text
@d19 1
d21 3
d266 4
d273 8
d283 33
a315 1
		err("%s: doesn't work from tape on rs6000", __FILE__);
d324 22
@


1.3
log
@ivec -> ealloc
@
text
@d1 1
a1 1
/* SUSORT: $Revision: 1.2 $ ; $Date: 90/05/25 18:37:27 $	*/
d19 1
a19 1
#include <sys/mtio.h>
a262 4
#define MT_BOT	 0xffffffff /* Guess--MT_BOT not documented in mtio.h	*/
#define WASATBOT (mtstat.mt_dsreg & MT_BOT)
#define NOTPOS	 (mtstat.mt_blkno != ((daddr_t) 0)) /* not on Gould	*/

a264 8
	static struct mtop bsf /* backward space file	  */ = {MTBSF, 1};
	static struct mtop bsr /* backward space record	  */ = {MTBSR, 1};
	static struct mtop fsr /* forward space record	  */ = {MTFSR, 1};
	static struct mtop nop /* no op, sets status only */ = {MTNOP, 1};
	static struct mtop set /* rewind		  */ = {MTREW, 1};
	static struct mtget mtstat;


d267 1
a267 33
		/* fast path--Note: I don't understand this (jkc) */
		if (fd == STDIN && WASATBOT) {
			if (-1 == ioctl(fd, MTIOCTOP, (char *) &set)) {
				syserr("%s: ioctl rewind failed", __FILE__);
			}
		} else {
			/* back up over tape mark */
			if (-1 == ioctl(fd, MTIOCTOP, (char *) &bsr)) {
				syserr("%s: ioctl bsr failed", __FILE__);
			}

			/* back up to BOT or before prev TM */
			if (-1 == ioctl(fd, MTIOCTOP, (char *) &bsf)) {
				syserr("%s: ioctl bsf failed", __FILE__);
			}

			/* sense */
			if (-1 == ioctl(fd, MTIOCTOP, (char *) &nop)) {
				syserr("%s: ioctl nop failed", __FILE__);
			}

			/* retrieve sense and status */
			if (-1 == ioctl(fd, MTIOCGET, (char *) &mtstat)) {
				syserr("%s: ioctl mtstat failed", __FILE__);
			}

			/* space forward if needed */
			if (!WASATBOT || NOTPOS) {
			    if (-1 == ioctl(fd, MTIOCTOP, (char *) &fsr)) {
				syserr("%s: ioctl fsr failed", __FILE__);
			    }
			}
		}
@


1.2
log
@ANSI C; put rew.c inline here since only susort used it (but who
knows if this stuff works from tape?).  
@
text
@d1 1
a1 1
/* SUSORT: $Revision: 1.1 $ ; $Date: 90/04/20 20:40:11 $	*/
d120 1
a120 1
	index = ivec(nkey);
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/* SUSORT: $Revision: 2.7 $ ; $Date: 89/09/20 19:37:27 $	*/
d12 1
a12 1
 *  Golden, CO 80401  (isis!csm9a!jkcohen)
d18 2
d33 1
a33 1
	The input must be either a diskfile or tapefile.    	\n\
a55 2
 *
 *
a57 5
/* Embed Revision Control System identifier strings */
static string progid =
	"   $Source: /src/su/src/RCS/susort.c,v $";
static string revid =
	"   $Revision: 2.7 $ ; $Date: 89/09/20 19:37:27 $";
a58 2


d66 1
a66 2
main(argc, argv)
int argc; char **argv;
d86 1
a92 5
	if (!igetpar("ID", &ID))	ID = 0;
	if (ID) {
		(void) fprintf(stderr, "%s\n", progid);
		(void) fprintf(stderr, "%s\n", revid);
	}
d101 2
a102 2
	ftypein = statfil(STDIN);
	ftypeout = statfil(STDOUT);
d121 1
a121 3
  	if (NULL == (up = (bool *) malloc((uint) nkey * sizeof(bool)))) {
  		syserr("malloc failed on up");
	}
d125 1
a125 3
	if (NULL == (type = (char *) malloc((uint) nkey))) {
  		syserr("malloc failed on type");
	}
d130 1
a130 3
	if (NULL == (val_list = (value *) malloc((uint) nv))) {
  		syserr("malloc failed on val_list");
	}
d141 1
a141 1
			switch(**++argv) { /* sign char of next arg */
d166 1
a166 4
			if (NULL == (val_list = (value *)
				realloc((char *) val_list, (uint) nv))) {
				syserr("unable to reallocate val_list");
			}
d178 1
a178 1
	rew(STDIN);
d201 2
a202 6
		        if (-1 ==
				lseek(STDOUT, (long) itr*nsegy, SEEK_SET)) {
			    syserr("lseek error on output disk file");
			}

			efwrite((char *) &tr, FSIZE, nsegy, stdout);
d212 1
a212 2
int cmp_list(a, b)
register value *a, *b;
d229 1
a229 3
value negval(type, val)
string type;
value val;
d231 1
a231 1
	switch(*type) {
d253 2
a254 2
	case 'z':
		val.z = -val.z;
d260 59
@
