head	1.8;
access;
symbols;
locks
	john:1.8; strict;
comment	@ * @;


1.8
date	2011.11.17.00.03.38;	author john;	state Exp;
branches;
next	1.7;

1.7
date	2011.11.12.00.44.21;	author john;	state Exp;
branches;
next	1.6;

1.6
date	2009.12.09.18.26.56;	author john;	state Exp;
branches;
next	1.5;

1.5
date	2008.12.01.23.24.44;	author john;	state Exp;
branches;
next	1.4;

1.4
date	2008.10.13.20.25.46;	author john;	state Exp;
branches;
next	1.3;

1.3
date	2008.10.10.23.50.36;	author john;	state Exp;
branches;
next	1.2;

1.2
date	2006.11.02.19.21.50;	author john;	state Exp;
branches;
next	1.1;

1.1
date	2005.10.04.17.02.51;	author john;	state Exp;
branches;
next	;


desc
@new code
@


1.8
log
@added Reg Beardsley's checkpar()
@
text
@/* Copyright (c) Colorado School of Mines, 2011.*/
/* All rights reserved.                       */

/* SUSPLIT */

#include "su.h"
#include "segy.h"
#include "header.h"
#include "bheader.h"
#include "tapebhdr.h"


/*********************** self documentation ******************************/
char *sdoc[] = {
"									",
" SUSPLIT - Split traces into different output files by keyword value	",
"									",
"     susplit <stdin >stdout [options]					",
"									",
" Required Parameters:							",
"	none								",
"									",
" Optional Parameters:							",
"	key=cdp		Key header word to split on (see segy.h)	",
"	stem=split_	Stem name for output files			",
"	middle=key	middle of name of output files			",
"	suffix=.su	Suffix for output files				",
"	numlength=7	Length of numeric part of filename		",
"	verbose=0	=1 to echo filenames, etc.			",
"	close=1		=1 to close files before opening new ones	",
"									",
" Notes:								",
" The most efficient way to use this program is to presort the input data",
" into common keyword gathers, prior to using susplit.			"
"									",
" Use \"suputgthr\" to put SU data into SU data directory format.	",
NULL};

/* Credits:
 *	Geocon: Garry Perratt hacked together from various other codes
 * 
 */
/**************** end self doc *******************************************/


segy tr;

int
main(int argc, char **argv)
{
	cwp_String key;		/* header key word from segy.h		*/
	int ns;			/* ns as an  int			*/
	int numlength;		/* length of split key number format	*/
	char format[BUFSIZ];	/* output filename format		*/

	int index;		/* index of key				*/
	Value val;		/* value of key				*/
	int val_i=0;		/* key value as integer 		*/
	int lastval_i=0;	/* last key value as integer	 	*/

	cwp_String type;	/* key's type				*/
	char filename[BUFSIZ];	/* output file name			*/

	cwp_String stem;	/* output file stem			*/
	cwp_String middle;	/* output file middle			*/
	cwp_String suffix;	/* output file suffix			*/
	FILE *outfp=NULL;	/* pointer to output file		*/

	int init;		/* initialisation flag for first efopen	*/
	int verbose;		/* =1 to echo filenames, etc.		*/
	int close;	/* =1 to close files before opening a new one	*/

	/* Initialize */
	initargs(argc, argv);
	requestdoc(1);
	init=0;

	/* Default parameters;  User-defined overrides */
	if (!getparstring("key", &key))	 key="cdp";
	if (!getparstring("stem", &stem)) stem="split_";
	if (!getparstring("middle", &middle)) middle=key;
	if (!getparstring("suffix", &suffix)) suffix=".su";
	if (!getparint("numlength", &numlength)) numlength=7;
	if (!getparint("verbose",&verbose)) verbose=0;
	if (!getparint("close",&close)) close=1;
        checkpars();

	/* Evaluate time bounds from getpars and first header */
	if (!gettr(&tr)) err("can't get first trace");
	ns = tr.ns;

	type = hdtype(key);
	index = getindex(key);

	if (verbose) warn("key is %s",key);

	/* Main loop over traces */
	do {
		gethval(&tr, index, &val);
		val_i = vtoi(type, val);
		
		if (val_i!=lastval_i || init==0) {
			if (init==0) init=1;
			else if (close) efclose(outfp);
			(void)sprintf(format, "%%s%%s%%0%dd%%s",numlength);
			(void)sprintf(filename, format, stem, middle, val_i, suffix);
			if (verbose) warn("output file is %s",filename);
			outfp = efopen(filename, "ab");
		}
		fputtr(outfp,&tr);
		lastval_i = val_i;

	} while (gettr(&tr));

	return(CWP_Exit());
}
@


1.7
log
@copyright
@
text
@d86 1
@


1.6
log
@changed default for numlength to 7, added selfdoc info.
@
text
@d1 3
@


1.5
log
@close=1
@
text
@d25 1
a25 1
"	numlength=3	Length of numeric part of filename		",
d29 5
d38 1
d80 1
a80 1
	if (!getparint("numlength", &numlength)) numlength=3;
@


1.4
log
@replaced homemade trbuf with a call to fputtr(); and changed
default to close=1
@
text
@d76 1
a76 1
	if (!getparint("close",&close)) close=0;
@


1.3
log
@replaced ad hoc buffer with a call to  fputtr
@
text
@d27 1
a27 1
"	close=0		=1 to close files before opening new ones	",
d43 1
a43 1
	int ns;			/* number of samples per trace		*/
d45 3
a47 1
	char format[10];	/* output filename format		*/
d49 1
a49 1
	int val_i;		/* key value as integer 		*/
d51 1
d53 2
a54 2
	char filename[999];	/* output file name			*/
	int index;		/* index of key				*/
d59 1
d62 1
d76 1
d80 1
a80 1
	ns=tr.ns;
a81 1
	/* trace record length is numsamps * 4 + 240 */
d94 1
a94 1
			else efclose(outfp);
@


1.2
log
@changed name format so that _ is not mandatory, and the middle of the name can be defined.
@
text
@d43 1
a43 2
	Value ns_v;		/* value of numsamps			*/
	int ns_i;		/* numsamps as int			*/
d55 1
a55 3
	FILE *fileout=NULL;	/* pointer to output file		*/
	int recl;		/* record length			*/
	char *trbuf=NULL;	/* output trace buffer			*/
a57 1
	int close;	/* =1 to close files before opening a new one	*/
a70 1
	if (!getparint("close",&close)) close=0;
d74 1
a76 7
	type = hdtype("ns");
	index = getindex("ns");
	gethval(&tr, index, &ns_v);
	ns_i = vtoi(type, ns_v);
	recl = ns_i * FSIZE + HDRBYTES;
	trbuf = (char *) alloc1(recl, sizeof(char));

d89 1
a89 1
			else if (close) efclose(fileout);
d93 1
a93 1
			fileout = efopen(filename, "ab");
d95 1
a95 1
		fwrite(&tr,sizeof(char),recl,fileout);
@


1.1
log
@Initial revision
@
text
@d5 1
d23 1
d49 1
a49 2
	int lastval_i;		/* last key value as integer	 	*/
	Value lastval;		/* value of last trace's key		*/
d54 1
d56 1
a56 1
	FILE *fileout;		/* pointer to output file		*/
d58 1
a58 1
	char *trbuf;		/* output trace buffer			*/
d61 1
a61 1
	int close;		/* =1 to close files before opening a new one	*/
d71 1
d85 1
a85 1
	recl = ns_i * 4 + 240 ;
d101 2
a102 2
			(void)sprintf(format, "%%s%%s_%%0%dd%%s",numlength);
			(void)sprintf(filename, format, stem, key, val_i, suffix);
@
