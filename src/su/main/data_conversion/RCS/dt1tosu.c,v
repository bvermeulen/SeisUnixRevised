head	1.17;
access;
symbols;
locks; strict;
comment	@ * @;


1.17
date	2012.03.30.20.35.28;	author john;	state Exp;
branches;
next	1.16;

1.16
date	2011.11.16.17.43.20;	author john;	state Exp;
branches;
next	1.15;

1.15
date	2011.11.12.00.01.45;	author john;	state Exp;
branches;
next	1.14;

1.14
date	2003.06.09.16.17.07;	author john;	state Exp;
branches;
next	1.13;

1.13
date	2000.09.22.16.15.31;	author john;	state Exp;
branches;
next	1.12;

1.12
date	97.07.28.22.36.46;	author john;	state Exp;
branches;
next	1.11;

1.11
date	96.09.02.23.08.17;	author jkc;	state Exp;
branches;
next	1.10;

1.10
date	96.08.09.17.11.06;	author john;	state Exp;
branches;
next	1.9;

1.9
date	96.01.29.17.03.44;	author jkc;	state Exp;
branches;
next	1.8;

1.8
date	96.01.23.16.54.43;	author jkc;	state Exp;
branches;
next	1.7;

1.7
date	95.01.19.11.09.19;	author john;	state Exp;
branches;
next	1.6;

1.6
date	94.08.25.14.57.29;	author jkc;	state Exp;
branches;
next	1.5;

1.5
date	94.07.15.13.59.20;	author john;	state Exp;
branches;
next	1.4;

1.4
date	94.07.15.13.05.43;	author john;	state Exp;
branches;
next	1.3;

1.3
date	94.05.18.08.17.20;	author john;	state Exp;
branches;
next	1.2;

1.2
date	94.02.28.11.37.24;	author john;	state Exp;
branches;
next	1.1;

1.1
date	94.02.25.16.01.57;	author john;	state Exp;
branches;
next	;


desc
@convert Sensors and Software dt1 data to SU format
@


1.17
log
@fixed a couple of format issues.
@
text
@/* Copyright (c) Colorado School of Mines, 2011.*/
/* All rights reserved.		       */

/* DT1TOSU: $Revision: 1.16 $ ; $Date: 2011/11/16 17:43:20 $		*/

#include "su.h"
#include "segy.h"
#include "header.h"

/*********************** self documentation ******************************/
char *sdoc[] = {
"								",
" DT1TOSU - Convert ground-penetrating radar data in the	",
"	Sensors & Software X.DT1 GPR format to SU format.	",
"								",
" dt1tosu < gpr_data_in_dt1_format  > stdout			",
"								",
" Optional parameters:						",
" ns=from header	number of samples per trace		",
" dt=.8		time sample interval (see below)		",
" swap=endian	endian is auto-determined =1 (big endian) swap	",
"		=0 don't swap bytes (little endian machines)	",
" verbose=0	silent						",
"		=1 S & S header values from first trace		",
"			sent to outpar				",
"		=2 S & S header values from all traces		",
"			sent to outpar				",
" outpar=/dev/tty	output parameter file			",
" list=0	silent						",
"		=1 list explaining labels used in verbose	",
"		     is printed to stderr			",
"								",
" Caution: An incorrect ns field will munge subsequent processing.",
"								",
" Notes:							",
" For compatiblity with SEGY header, apparent dt is set to	",
" .8 ms (800 microsecs).  Actual dt is .8 nanosecs.		",
" Using TRUE DISTANCES, this scales velocity			",
" and frequency by a factor of 1 million.			",
"	Example: v_air = 9.83X10^8 ft/s	 (real)			",
"		 v_air = 983 ft/s	(apparent for su)	",
"	Example: fnyquist = 625 MHz	(real)			",
"		fnyquist = 625 Hz	(apparent for su)	",
"								",
" IBM RS6000, NeXT, SUN are examples of big endian machines	",
" PC's and DEC are examples of little endian machines		",
"								",
" Caveat:							",
" This program has not been tested on DEC, some modification of the",
" byte swapping routines may be required.			",
"								",
NULL};

/* Credits:
 *	CWP: John Stockwell, Jan 1994   Based on a code "sugpr" by
 *	UTULSA: Chris Liner & Bill Underwood  (Dec93)
 * modifications permit S & S dt1 header information to be transferred
 * directly to SU header
 *
 * March 2012: CWP John Stockwell  updated for the revised
 * S&S DT1, which they still call "DT1" though it is different.
 *
 * Trace header fields set: ns, tracl, tracr, dt, delrt, trid,
 *			    hour, minute, second
 *
 * Reference: Sensors & Software pulseEKKO and Noggin^plus Data File
 *	     Formats
 * Publication of:
 * Sensors & Software: suburface imaging solutions
 * 1091 Brevik Place
 * Mississauga, ON L4W 3R7 Canada
 * Sensors & Software In
 * Tel: (905) 624-8909
 * Fax (905) 624-9365
 * E-mail: sales@@sensoft.ca
 * Website: www.sensoft.ca
 */
/**************** end self doc *******************************************/

/* define hed structure */
#define SSHDRBYTES 128 /* size of ssdt1 */
typedef struct {
	float  tracl;	/* trace number */
	float  posit;	/* position */
	float  ns;	/* number of points per trace */
	float  topog;	/* Topographic data if any */
	float  nua;	/* not used "a" */ 
	float  bpp;	/* bytes/point (always 2 for Rev 3 firmware) */ 
	float  twind;	/* time window */ 
	float  nstks;	/* # of stacks */ 
	double  gps_x;	/* GPS X X-position */ 
	double  gps_y;	/* GPS Y Y-position */ 
	double  gps_z;	/* GPS Z Z-position */ 
	float  rx;	/* receiver x-position */ 
	float  ry;	/* receiver y-position */ 
	float  rz;	/* receiver z-position */ 
	float  tx;	/* transmitter x-position */ 
	float  ty;	/* transmitter y-position */ 
	float  tz;	/* transmitter z-position */ 
	float  tza;	/* time zero adjustment */ 
			/* where point(x) = point(x + adjustment) */
	float  zflag;	/* zero flag: 0=data ok ,  1 = zero data */
	float  nuc;	/* not used "c" */ 
	float  tod;	/* time of day data collected */
			/* in secs past midnight */ 
	float  cflag;	/* comment flag =1 if comment is attached */
	char comm[28];	/* comment 28 characters */
	short data[SU_NFLTS];  /* use SU maximum number data values */
} ssdt1;

ssdt1 sstr;
segy tr;

/* list explaining the ssdt1 convention */
char *list[] = {
" float	 tracl;		trace number				",
" float	 posit;		position				",
" float	 ns;		number of points per trace		",
" float	 topog;		Topographic data if any			",
" float	 nua;		not used \"a\"				",
" float	 bpp;		bytes/point (always 2 for Rev 3 firmware)",
" float	 twind;		time window				",
" float	 nstks;		number of stacks			",
" double  gps_x;	/* GPS X X-position */			",
" double  gps_y;	/* GPS Y Y-position */ 			",
" double  gps_z;	/* GPS Z Z-position */			", 
" float  rx;		/* receiver x-position */		", 
" float  ry;		/* receiver y-position */		",
" float  rz;		/* receiver z-position */		",
" float  tx;		/* transmitter x-position */		",
" float  ty;		/* transmitter y-position */ 		",
" float  tz;		/* transmitter z-position */ 		",
" float	 tza;		time zero adjustment			",
"			where point(x) = point(x + adjustment)	",
" float	 zflag;		zero flag: 0=data ok ,	1 = zero data	",
" float	 nuc;		not used \"c\"				",
" float	 tod;		time of day data are collected		",
"				in secs past midnight		",
" float	 cflag;		comment flag =1 if comment is attached	",
" char comm[28];	comment 28 characters			",
" short data[SU_NFLTS];	data part of the ssdt1 structure	",
NULL};

/* pointer to list */
char **listptr=list;

/* function prototypes for internally defined subroutines */
void swap_ss_sstr(void);
void fprintf_sstr(FILE *outparfp);


int
main(int argc, char **argv)
{
	int i,ns;		/* counter, number of samples */
	float dt;		/* time sample interval */	
	size_t ssdatabytes;	/* number of bytes in SS data portion */
	size_t ssbytes;		/* total number of SS bytes */
	int swap,verbose,list;	/* flags */
	float hour,minute;	/* hour and minute */
	char *outpar=NULL;	/* outpar filename */
	FILE *outparfp=NULL;	/* outpar file pointer */

	/* Initialize */
	initargs(argc, argv);
	requestdoc(1);

	/* Make sure stdout is a file or pipe */
	switch(filestat(STDOUT)) {
	case TTY:
		err("stdout can't be tty");
	break;
	case DIRECTORY:
		err("stdout must be a file, not a directory");
	break;
	case BADFILETYPE:
		err("stdout is illegal filetype");
	break;
	default: /* rest are OK */
	break;
	}

	/* Determin endian of system */
	if (!getparint("swap", &swap))      {
	      union { short s; char c[2]; } testend;
		testend.s = 1;
 		swap = (testend.c[0] == '\0') ? 1 : 0;
	}

	/* Read header information from first header */
	efread(&sstr, 1, SSHDRBYTES, stdin);
	if (swap) swap_ss_sstr();

	/* Get parameters */
	if (!getparint("ns", &ns)) 	 ns = sstr.ns ;
	if (!ns) err ("ns not set!");
	warn("ns= %d", ns);

	if (!getparfloat("dt", &dt))		dt= .8 ;
	dt *= 1000.;
	if (!getparint("list", &list))		list= 0;
	if (!getparint("verbose", &verbose))	verbose= 0;
	if (!getparstring("outpar", &outpar))	outpar = "/dev/tty" ;
	checkpars();

	outparfp = efopen(outpar, "w");

	/* print out ss header field for first trace */
	if (verbose==1) fprintf_sstr(outparfp);
	if (list) while (*listptr) fprintf(stderr,"%s\n", *listptr++);

	/* assign tr header values */
	tr.tracl = sstr.tracl;

	tr.sx = (int) sstr.tx;
	tr.sy = (int) sstr.ty;
	tr.selev = (int) sstr.tz;

	tr.gx = (int) sstr.rx;
	tr.gy = (int) sstr.ry;
	tr.gelev = (int) sstr.rz;

	tr.ns = sstr.ns;	
	tr.dt = NINT(dt); 
	tr.delrt = sstr.tza;
	tr.trid = sstr.zflag + 1;

	/* compute hour and minute on first trace */
	hour = sstr.tod/3600;
	minute = (hour - (int) hour) * 60;

	/* set hour, minute, and second on first trace */
	tr.hour = hour;
	tr.minute = minute;
	tr.sec = ( minute - (int) minute ) * 60;

	
	/* read in and swap the data portion of the first trace */
	/* loop over data values in X.dt1 data */
	for (i=0 ; i < ns ; i++) {
		short temp;	/* temporary variable */
				/* to store data vals in */
		efread(&temp, 1, sizeof(short), stdin);

		if (swap) swap_short_2(&temp); 

		tr.data[i] = (float) temp;
	}

	puttr(&tr);

	/* assign size of data portion on first trace */
	ssdatabytes = ns*sizeof(short);
	ssbytes = SSHDRBYTES + ssdatabytes;

	/* load selected sstr values and data into tr */
	while (efread(&sstr,1,ssbytes,stdin)) {

		/* swap header values */
		if (swap) swap_ss_sstr();

		/* assign tr header values */
		tr.tracl = sstr.tracl;

		tr.sx = (int) sstr.tx;
		tr.sy = (int) sstr.ty;
		tr.selev = (int) sstr.tz;

		tr.gx = (int) sstr.rx;
		tr.gy = (int) sstr.ry;
		tr.gelev = (int) sstr.rz;

		tr.ns = sstr.ns;	
		tr.dt = NINT(dt); 
		tr.delrt = sstr.tza;
		tr.trid = sstr.zflag + 1;

		/* compute hour and minute on first trace */
		hour = sstr.tod/3600;
		minute = (hour - (int) hour) * 60;

		/* set hour, minute, and second on first trace */
		tr.hour = hour;
		tr.minute = minute;
		tr.sec = ( minute - (int) minute ) * 60;

		/* loop over data values in X.dt1 data */
		for (i=0 ; i < ns ; i++) {
			short temp;	/* temporary variable */
				/* to store data vals in */

			temp = sstr.data[i];
			if (swap) swap_short_2(&temp); 

			tr.data[i] = (float) temp;
		}
		if (verbose==2) fprintf_sstr(outparfp);
	
		puttr(&tr);
	}


	if (verbose) efclose(outparfp);
	return(CWP_Exit());

}


/* swap */

void swap_ss_sstr(void)
{
	swap_float_4(&sstr.tracl);
	swap_float_4(&sstr.posit);
	swap_float_4(&sstr.ns);
	swap_float_4(&sstr.topog);
	swap_float_4(&sstr.bpp);
	swap_float_4(&sstr.twind);
	swap_float_4(&sstr.nstks);
	swap_double_8(&sstr.gps_x);
	swap_double_8(&sstr.gps_y);
	swap_double_8(&sstr.gps_z);
	swap_float_4(&sstr.rx);
	swap_float_4(&sstr.ry);
	swap_float_4(&sstr.rz);
	swap_float_4(&sstr.tx);
	swap_float_4(&sstr.ty);
	swap_float_4(&sstr.tz);
	swap_float_4(&sstr.tza);
	swap_float_4(&sstr.zflag);
	swap_float_4(&sstr.nuc);
	swap_float_4(&sstr.tod);
}



void fprintf_sstr(FILE *outparfp)
{ /* send ssdt1 values to outpar */
	int tracl=sstr.tracl; /* first trace counter */
	float  posit=sstr.posit; /* position */
	int ns=sstr.ns;	 /* number of samples */
	float  topog=sstr.topog; /* topographic data */
	int bpp=sstr.bpp;	/* bytes per point */ 
	float twind=sstr.twind;	/* time window */
	int nstks=sstr.nstks;	/* number of stacks */
	float  tza=sstr.tza;	/* time zero adjustment */
	int  zflag=sstr.zflag;	/* zero flag */
	float nuc=sstr.nuc; /* unused "c" */
	int  cflag=sstr.cflag; /* comment flag */


	fprintf(outparfp, "tracl = %d\n", tracl);
	fprintf(outparfp, "posit = %f\n", posit);
	fprintf(outparfp, "ns = %d\n", ns);
	fprintf(outparfp, "topog = %f\n", topog);
	fprintf(outparfp, "bpp = %d\n", bpp);
	fprintf(outparfp, "twind = %f\n", twind);
	fprintf(outparfp, "nstks = %d\n", nstks);
	fprintf(outparfp, "tza = %f\n", tza);
	fprintf(outparfp, "zflag = %d\n", zflag);
	fprintf(outparfp, "nuc = %f\n", nuc);
	fprintf(outparfp, "cflag = %d\n", cflag);
	if(cflag) efwrite(sstr.comm,28,sizeof(char),outparfp);
	else      fprintf(outparfp, "no comm\n");
}
@


1.16
log
@added Reg Beardsley's checkpar()
@
text
@d2 1
a2 1
/* All rights reserved.                       */
d4 1
a4 1
/* DT1TOSU: $Revision: 1.14 $ ; $Date: 2003/06/09 16:17:07 $		*/
d12 40
a51 40
"									 ",
" DT1TOSU - Convert ground-penetrating radar data in the Sensors & Software",
"	    X.dt1 GPR format to SU format.				",
"									",
" dt1tosu < gpr_data_in_dt1_format  > stdout				",
"									",
" Optional parameters:							",
" ns=from header	number of samples per trace			",
" dt=.8			time sample interval (see below)		",
" swap=1		perform byte swapping (big endian machines)	",
"			=0 don't swap bytes (little endian machines)	",
" verbose=0		silent						",
"			=1 S & S header values from first trace		",
"				sent to outpar				",
"			=2 S & S header values from all traces		",
"				sent to outpar				",
" outpar=/dev/tty	output parameter file				",
" list=0		silent						",
"			=1 list explaining labels used in verbose	",
"			     is printed to stderr			",
"									",
" Caution: An incorrect ns field will munge subsequent processing.	",
"									",
" Notes:								",
" For compatiblity with SEGY header, apparent dt is set to		",
" .8 ms (800 microsecs).  Actual dt is .8 nanosecs.			",
" Using TRUE DISTANCES, this scales velocity				",
" and frequency by a factor of 1 million.				",
"	Example: v_air = 9.83X10^8 ft/s	 (real)				",
"		 v_air = 983 ft/s	(apparent for su)		",
"		Example: fnyquist = 625 MHz	(real)			",
"			fnyquist = 625 Hz	(apparent for su)	",
"									",
" IBM RS6000, NeXT, SUN are examples of big endian machines		",
" PC's and DEC are examples of little endian machines			",
"									",
" Caveat:								",
" This program has not been tested on DEC, some modification of the	",
" byte swapping routines may be required.				",
"									",
d60 3
d65 12
d83 1
a83 1
	float  tracr;	/* trace number */
a88 2
	float  tracl;	/* second trace number */ 
	float  nstks;	/* number of stacks */ 
d90 10
a99 1
	float  nub[11];	/* not used "b" */ 
d101 1
a101 1
				/* where point(x) = point(x + adjustment) */
d105 1
a105 1
				/* in secs past midnight */ 
d116 2
a117 2
" float	 tracr;	first trace counter				",
" float	 posit;	position					",
d119 1
a119 1
" float	 topog;	Topographic data if any				",
d122 11
a132 4
" float	 tracl;	second trace counter				",
" float	 nstks;	number of stacks				",
" float	 twind;	time window					",
" float	 nub[11];	not used \"b\"				",
d135 1
a135 1
" float	 zflag;	zero flag: 0=data ok ,	1 = zero data		",
d139 1
a139 1
" float	 cflag;	comment flag =1 if comment is attached		",
d141 1
a141 1
" short data[SU_NFLTS];	 data part of the ssdt1 structure	",
d157 2
a158 3
	size_t databytes;
	size_t ssdatabytes;
	size_t ssbytes;
a159 1
	float *data;
d161 2
a162 3
	char *outpar;		/* outpar filename */
	FILE *outparfp;		/* outpar file pointer */

d183 7
a191 1
	if (!getparint("swap", &swap))		swap = 1;
d197 1
d204 1
a204 1
        checkpars();
d213 10
a222 1
	tr.tracr = sstr.tracr;
a223 1
	tr.tracl = sstr.tracl;
a236 3
	/* assign size of data portion on first trace */
	databytes = ns*FSIZE;
	ssdatabytes = ns*sizeof(short);
a237 3
	/* allocate space for the data array */
	data = alloc1float(databytes);

d241 2
a242 1
		short temp;	/* temporary variable to store data vals in */
d245 1
a245 1
		if (swap) swap_short_2(&temp);
d247 1
a247 1
		data[i] = (float) temp;
d250 1
a250 3
	/* write out the first trace */
	efwrite(&tr, 1, HDRBYTES, stdout);
	efwrite(data, 1, databytes, stdout);
d252 2
a253 1
	/* total size of an ss trace */
d262 11
a272 2
		/* set trace header fields */
		tr.tracr = sstr.tracr;
a273 1
		tr.tracl = sstr.tracl;
d278 1
a278 1
		/* compute hour and minute */
d282 1
a282 1
		/* set hour, minute, and second */
d287 4
a290 2
		/* swap values in ss data */
		if (swap) for (i=0 ; i < ns ; i++) swap_short_2(&sstr.data[i]);
d292 5
a296 2
		/* assign data values to tr.data[] */
		for (i=0; i<ns; i++) tr.data[i] = (float) sstr.data[i];
d298 1
a298 1

d301 2
a309 1
void swap_ss_nub(float *nub);
d313 1
a313 1
	swap_float_4(&sstr.tracr);
a316 1
	swap_float_4(&sstr.nua);
d318 1
a318 1
	swap_float_4(&sstr.tracl);
d320 9
a328 2
	swap_float_4(&sstr.twind);
	swap_ss_nub(sstr.nub);
a334 7
void swap_ss_nub(float *nub)
{
	int i;
	for ( i=0 ; i < 11; i++)
		/* swap_float_4(&sstr.nub[i]);*/
		swap_float_4(nub+i);
}
d339 1
a339 2
	int i;		/* counter */
	int tracr=sstr.tracr; /* first trace counter */
a342 1
	float nua=sstr.nua;	/* unused "a" */
d344 1
a344 1
	int tracl=sstr.tracl;	/* second trace counter */
a345 2
	float  twind=sstr.twind; /* time window */
	float nub;		/* unused "b" */
d352 2
a353 2
	fprintf(outparfp, "tracr = %d\n", tracr);
	fprintf(outparfp, "posit = %.3f\n", posit);
d355 1
a355 2
	fprintf(outparfp, "topog = %.3f\n", topog);
	fprintf(outparfp, "nua = %.3f\n", nua);
d357 1
a357 1
	fprintf(outparfp, "tracl = %d\n", tracl);
d359 1
a359 6
	fprintf(outparfp, "twind = %.3f\n", twind);
	for(i=0; i < 11 ; i++){
		nub = sstr.nub[i];		
		fprintf(outparfp, "nub[%d] = %.3f\n",i,nub);
	}
	fprintf(outparfp, "tza = %.3f\n", tza);
d361 1
a361 1
	fprintf(outparfp, "nuc = %.3f\n", nuc);
d363 1
a363 1
	if(cflag) fprintf(outparfp, "comm [%d] = %s\n",i,sstr.comm);
@


1.15
log
@copyright
@
text
@d171 1
@


1.14
log
@9 June 2003
@
text
@d1 4
a4 1
/* DT1TOSU: $Revision: 1.13 $ ; $Date: 2000/09/22 16:15:31 $		*/
@


1.13
log
@fixed error in dt getpar
@
text
@d1 1
a1 1
/* DT1TOSU: $Revision: 1.12 $ ; $Date: 1997/07/28 22:36:46 $		*/
d250 1
a250 1
	return EXIT_SUCCESS;
@


1.12
log
@changes suggested by Stew Levin to silence SGI compiler warnings, etc
@
text
@d1 1
a1 1
/* DT1TOSU: $Revision: 1.11 $ ; $Date: 1996/09/02 23:08:17 $		*/
d124 1
a124 1
	int dt;			/* time sample interval */	
d163 2
a164 1
	if (!getparint("dt", &dt))		dt= .8 * 1000.0 ;
d179 1
a179 1
	tr.dt = dt; 
d227 1
a227 1
		tr.dt = dt; 
@


1.11
log
@Did the -Wall stuff and it seemed to me that the final lines
in the program were trying to print the comment string character
by character instead of just printing the string and simultaneously
making -Wall unhappy because of the type conflict.  Also, eliminated
the comm variable altogether in that part of the code.
@
text
@d1 1
a1 1
/* DT1TOSU: $Revision: 1.10 $ ; $Date: 1996/08/09 17:11:06 $		*/
d116 1
a116 1
void swap_ss_sstr();
d125 3
a127 3
	int databytes;
	int ssdatabytes;
	int ssbytes;
a128 1
	int tod;		/* time of day in seconds from midnight */
a180 1
	tod = sstr.tod;
a228 1
		tod = sstr.tod;
d257 1
a257 1
void swap_ss_sstr()
d279 2
a280 1
		swap_float_4(&sstr.nub[i]);
@


1.10
log
@fixed error in prototype and type error in nub swapping
sb
@
text
@d1 1
a1 1
/* DT1TOSU: $Revision: 1.9 $ ; $Date: 1996/01/29 17:03:44 $		*/
d21 4
a24 2
"			=1 S & S header values from first trace sent to outpar",
"			=2 S & S header values from all traces sent to outpar",
d27 2
a28 2
"			=1 list explaining labels used in verbose is printed",
"			    to stderr					",
d37 1
a37 1
"	Example: v_air = 9.83X10^8 ft/s  (real)				",
d91 19
a109 19
" float  tracr;	first trace counter				",
" float  posit;	position					",
" float  ns;		number of points per trace			",
" float  topog;	Topographic data if any				",
" float  nua;		not used \"a\"					",
" float  bpp;		bytes/point (always 2 for Rev 3 firmware)	",
" float  tracl;	second trace counter				",
" float  nstks;	number of stacks				",
" float  twind;	time window					",
" float  nub[11];	not used \"b\"					",
" float  tza;		time zero adjustment				",
"				where point(x) = point(x + adjustment)	",
" float  zflag;	zero flag: 0=data ok ,  1 = zero data		",
" float  nuc;		not used \"c\"					",
" float  tod;		time of day data are collected			",
"				in secs past midnight			",
" float  cflag;	comment flag =1 if comment is attached		",
" char comm[28];	comment 28 characters				",
" short data[SU_NFLTS];  data part of the ssdt1 structure ",
d120 1
d151 2
d169 1
a169 1
	if (verbose) outparfp = efopen(outpar, "w");
a302 1
	char comm;		/* comment */
d322 2
a323 8
	if(cflag) {
		for(i=0 ; i < 28 ; i++) {
			comm = sstr.comm[i];	
			fprintf(outparfp, "comm [%d] = %s\n",i,comm);
		}
	} else {
		   fprintf(outparfp, "no comm\n");
	}
@


1.9
log
@Say sampling INTERVAL instead of rate to make Ken happy.
@
text
@d1 1
a1 1
/* DT1TOSU: $Revision: 1.8 $ ; $Date: 1996/01/23 16:54:43 $		*/
d253 1
a253 1
void hswap_ss_nub(float *nub);
d266 1
a266 1
	swap_ss_nub(&sstr.nub);
d273 1
a273 1
swap_ss_nub(float *nub)
@


1.8
log
@Corrected header fields set info.
@
text
@d1 1
a1 1
/* DT1TOSU: $Revision: 1.7 $ ; $Date: 1995/01/19 11:09:19 $		*/
d17 1
a17 1
" dt=.8			time sample rate (see below)			",
d121 1
a121 1
	int dt;			/* time sample rate */	
@


1.7
log
@changed position of "getpar for swap".
@
text
@d1 1
a1 1
/* DT1TOSU: $Revision: 1.6 $ ; $Date: 94/08/25 14:57:29 $		*/
a27 3
" Trace header fields set: ns, tracl, tracr, dt, hour, minute, second	",
" Use sushw/suchw to set other needed fields.				",
"									",
d54 3
a57 1

d65 1
a65 1
	float  ns;		/* number of points per trace */
d67 2
a68 2
	float  nua;		/* not used "a" */ 
	float  bpp;		/* bytes/point (always 2 for Rev 3 firmware) */ 
d73 1
a73 1
	float  tza;		/* time zero adjustment */ 
d76 2
a77 2
	float  nuc;		/* not used "c" */ 
	float  tod;		/* time of day data collected */
@


1.6
log
@Removed copyright statement from codes that had it.
Moved self-doc line for sudoc.
@
text
@d1 1
a1 1
/* DT1TOSU: $Revision: 1.5 $ ; $Date: 94/07/15 13:59:20 $		*/
d153 1
a162 1
	if (!getparint("swap", &swap))		swap = 1;
@


1.5
log
@cosmetic
@
text
@d1 1
a1 1
/* DT1TOSU: $Revision: 1.4 $ ; $Date: 94/07/15 13:05:43 $		*/
@


1.4
log
@cosmetic
@
text
@d1 1
a1 1
/* DT1TOSU: $Revision: 1.3 $ ; $Date: 94/05/18 08:17:20 $		*/
@


1.3
log
@changed swap_ss_sstr(); to  if (swap) swap_ss_sstr();
@
text
@d1 1
a1 1
/* DT1TOSU: $Revision: 1.2 $ ; $Date: 94/02/28 11:37:24 $		*/
a2 14
/*----------------------------------------------------------------------
 * Copyright (c) Colorado School of Mines, 1994.
 * All rights reserved.
 *
 * This code is part of SU.  SU stands for Seismic Unix, a procehing line
 * developed at the Colorado School of Mines, partially based on Stanford
 * Exploration Project (SEP) software.  Inquiries should be addressed to:
 *
 *  Jack K. Cohen, Center for Wave Phenomena, Colorado School of Mines,
 *  Golden, CO 80401  (jkc@@dix.mines.colorado.edu)
 *----------------------------------------------------------------------
 */


a50 1
/**************** end self doc *******************************************/
d59 1
@


1.2
log
@removed one argument from fprintf_ss_tr
@
text
@d1 1
a1 1
/* DT1TOSU: $Revision: 1.1 $ ; $Date: 94/02/25 16:01:57 $		*/
d167 1
a167 1
	swap_ss_sstr();
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/* DT1TOSU: $Revision: 1.7 $ ; $Date: 94/12/05 10:10:05 $                */
d23 1
a23 1
"                                                                         ",
d25 39
a63 39
"            X.dt1 GPR format to SU format.                                ",
"                                                                         ",
" dt1tosu < gpr_data_in_dt1_format  > stdout                                  ",
"                                                                         ",
" Optional parameters:                                                        ",
" ns=from header                number of samples per trace                ",
" dt=.8                        time sample rate (see below)                        ",
" swap=1                perform byte swapping (big endian machines)        ",
"                         =0 don't swap bytes (little endian machines)        ",
" verbose=0                silent                                                ",
"                         =1 S & S header values from first trace sent to outpar",
"                         =2 S & S header values from all traces sent to outpar",
" outpar=/dev/tty        output parameter file                                ",
" list=0                silent                                                ",
"                         =1 list explaining labels used in verbose is printed",
"                            to stderr                                        ",
"                                                                         ",
" Trace header fields set: ns, tracl, tracr, dt, hour, minute, second        ",
" Use sushw/suchw to set other needed fields.                                ",
"                                                                         ",
" Caution: An incorrect ns field will munge subsequent processing.        ",
"                                                                         ",
" Notes:                                                                  ",
" For compatiblity with SEGY header, apparent dt is set to                ",
" .8 ms (800 microsecs).  Actual dt is .8 nanosecs.                       ",
" Using TRUE DISTANCES, this scales velocity                              ",
" and frequency by a factor of 1 million.                                 ",
"        Example: v_air = 9.83X10^8 ft/s  (real)                          ",
"                 v_air = 983 ft/s        (apparent for su)               ",
"             Example: fnyquist = 625 MHz      (real)                     ",
"                      fnyquist = 625 Hz       (apparent for su)          ",
"                                                                         ",
" IBM RS6000, NeXT, SUN are examples of big endian machines               ",
" PC's and DEC are examples of little endian machines                     ",
"                                                                         ",
" Caveat:                                                                 ",
" This program has not been tested on DEC, some modification of the       ",
" byte swapping routines may be required.                                 ",
"                                                                         ",
d130 1
a130 1
void fprintf_sstr(FILE *outparfp, ssdt1 sstr);
d182 1
a182 1
	if (verbose==1) fprintf_sstr(outparfp, sstr);
d221 3
a223 3
        /* write out the first trace */
        efwrite(&tr, 1, HDRBYTES, stdout);
        efwrite(data, 1, databytes, stdout);
d257 1
a257 1
		if (verbose==2) fprintf_sstr(outparfp, sstr);
d296 1
a296 1
void fprintf_sstr(FILE *outparfp, ssdt1 sstr)
@
