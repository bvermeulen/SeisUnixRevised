head	1.14;
access;
symbols;
locks; strict;
comment	@ * @;


1.14
date	2011.11.16.17.43.20;	author john;	state Exp;
branches;
next	1.13;

1.13
date	2011.11.12.00.01.45;	author john;	state Exp;
branches;
next	1.12;

1.12
date	2010.01.20.23.09.56;	author john;	state Exp;
branches;
next	1.11;

1.11
date	2007.10.31.20.41.22;	author john;	state Exp;
branches;
next	1.10;

1.10
date	2007.10.31.20.40.51;	author john;	state Exp;
branches;
next	1.9;

1.9
date	2003.06.09.16.17.07;	author john;	state Exp;
branches;
next	1.8;

1.8
date	96.09.13.21.49.05;	author john;	state Exp;
branches;
next	1.7;

1.7
date	94.08.25.14.59.51;	author jkc;	state Exp;
branches;
next	1.6;

1.6
date	93.08.09.15.19.37;	author john;	state Exp;
branches;
next	1.5;

1.5
date	92.10.26.14.01.51;	author john;	state Exp;
branches;
next	1.4;

1.4
date	91.09.05.08.50.56;	author jkcohen;	state Exp;
branches;
next	1.3;

1.3
date	90.05.29.20.44.44;	author jkc;	state Exp;
branches;
next	1.2;

1.2
date	90.05.25.19.26.05;	author jkc;	state Exp;
branches;
next	1.1;

1.1
date	90.04.18.20.35.51;	author jkc;	state Exp;
branches;
next	;


desc
@stacking vel -> interval velocities
@


1.14
log
@added Reg Beardsley's checkpar()
@
text
@/* Copyright (c) Colorado School of Mines, 2011.*/
/* All rights reserved.                       */

/* SUINTVEL: $Revision: 1.12 $ ; $Date: 2010/01/20 23:09:56 $		*/

#include "su.h"

/*********************** self documentation ******************************/
char *sdoc[] = {
"									",
" SUINTVEL - convert stacking velocity model to interval velocity model	",
"									",
" suintvel vs= t0= outpar=/dev/tty					",
"									",
" Required parameters:					        	",
"	vs=	stacking velocities 					",
"	t0=	normal incidence times		 			",
"									",
" Optional parameters:							",
"	mode=0			output h= v= ; =1 output v=  t= 	",
"	outpar=/dev/tty		output parameter file in the form:	",
"				h=layer thicknesses vector		",
"				v=interval velocities vector		",
"				....or ...				",
"				t=vector of times from t0		",
"				v=interval velocities vector		",
"									",
" Examples:								",
"    suintvel vs=5000,5523,6339,7264 t0=.4,.8,1.125,1.425 outpar=intpar	",
"									",
"    suintvel par=stkpar outpar=intpar					",
"									",
" If the file, stkpar, contains:					",
"    vs=5000,5523,6339,7264						",
"    t0=.4,.8,1.125,1.425						",
" then the two examples are equivalent.					",
"									",
" Note: suintvel does not have standard su syntax since it does not	",
"      operate on seismic data.  Hence stdin and stdout are not used.	",
"									",
" Note: may go away in favor of par program, velconv, by Dave		",
"									",
NULL};

/* Credits:
 *	CWP: Jack 
 *
 * Technical Reference:
 *	The Common Depth Point Stack
 *	William A. Schneider
 *	Proc. IEEE, v. 72, n. 10, p. 1238-1254
 *	1984
 *
 * Formulas:
 *    	Note: All sums on i are from 1 to k
 *
 *	From Schneider:
 *	Let h[i] be the ith layer thickness measured at the cmp and
 *	v[i] the ith interval velocity.
 *	Set:
 *		t[i] = h[i]/v[i]
 *	Define:
 *		t0by2[k] = 0.5 * t0[k] = Sum h[i]/v[i]
 *		vh[k] = vs[k]*vs[k]*t0by2[k] = Sum v[i]*h[i]
 *	Then:
 *		dt[i] = h[i]/v[i] = t0by2[i] - t0by2[i-1]
 *		dvh[i] = h[i]*v[i] = vh[i] - vh[i-1]
 *		h[i] = sqrt(dvh[i] * dt[i])
 *		v[i] = sqrt(dvh[i] / dt[i])
 *
 *
 */
/**************** end self doc *******************************************/

int
main(int argc, char **argv)
{
	register float *v=NULL;		/* interval velocities		*/
	register float *h=NULL;		/* layer thicknesses at the cmp	*/
	register float *vs=NULL;	/* stacking velocities		*/
	register float *t0=NULL;	/* zero incidence times		*/
	register int i;		/* counter				*/
	int n;			/* number of layers			*/
	float t1, t2;		/* temporaries for one-way times	*/
	float v1, v2;		/* temporaries for stacking v's		*/
	float dt;		/* temporary for t0/2 difference	*/
	float dvh;		/* temporary for v*h difference		*/
	cwp_String outpar;	/* name of file holding output parfile	*/
	FILE *outparfp;		/* ... its file pointer			*/
	int mode;		/* mode=0  h= v= ; mode=1 t= v= 	*/


	/* Initialize */
	initargs(argc, argv);
	requestdoc(0);


	outpar = "/dev/tty" ;	getparstring("outpar", &outpar);
	outparfp = efopen(outpar, "w");


	/* Allocate space for the model */
	if ((n = countparval("t0"))) {
		v  = ealloc1float(n);
		h  = ealloc1float(n);
		vs = ealloc1float(n);
		t0 = ealloc1float(n);
	} else err("no t0's specified");

	/* Get the normal incidence times and stacking velocities */
	if (n != getparfloat("t0", t0))
		err("expected %d intervals", n);
	if (n != getparfloat("vs", vs))
		err("expected %d velocities", n);
	if (!getparint("mode", &mode))		mode = 0;
        checkpars();

	/* Check that vs's and t0's are positive */
	for (i = 0; i < n; i++) {
		if (vs[i] <= 0.0)
			err("vs's must be positive: vs[%d] = %f", i, vs[i]);
		if (t0[i] < 0.0)
			err("t0's must be positive: t0[%d] = %f", i, t0[i]);
	}

	/* Compute h(i), v(i) */
	h[0] = 0.5 * vs[0] * t0[0];
	v[0] = vs[0];
	for (i = 1; i < n; i++) {
		t2 = 0.5 * t0[i]; t1 = 0.5 * t0[i-1];
		v2 = vs[i]; v1 = vs[i-1];
		dt = t2 - t1;
		dvh = v2*v2*t2 - v1*v1*t1;
		h[i] = sqrt(dvh * dt);
		v[i] = sqrt(dvh / dt);
	}

	/* Make par file */
	if (!mode) {
		fprintf(outparfp, "h=");
		for (i = 0; i < n - 1; i++) {
			fprintf(outparfp, "%g,", h[i]);
		}
		fprintf(outparfp, "%g\n", h[n-1]);
	} else {
		fprintf(outparfp, "t=");
		for (i = 0; i < n - 1; i++) {
			fprintf(outparfp, "%g,", t0[i]);
		}
		fprintf(outparfp, "%g\n", t0[n-1]);
	}
	fprintf(outparfp, "v=");
	for (i = 0; i < n - 1; i++) {
		fprintf(outparfp, "%g,", v[i]);
	}
	fprintf(outparfp, "%g\n", v[n-1]);


	return(CWP_Exit());
}
@


1.13
log
@copyright
@
text
@d116 1
@


1.12
log
@put in mode parameter to allow  t=   v=0 output format.
@
text
@d1 4
a4 1
/* SUINTVEL: $Revision: 1.11 $ ; $Date: 2007/10/31 20:41:22 $		*/
@


1.11
log
@test for positiveness
and test for zer
@
text
@d1 1
a1 1
/* SUINTVEL: $Revision: 1.10 $ ; $Date: 2007/10/31 20:40:51 $		*/
d17 1
d21 3
d87 1
d112 1
d135 12
a146 3
	fprintf(outparfp, "h=");
	for (i = 0; i < n - 1; i++) {
		fprintf(outparfp, "%g,", h[i]);
a147 2
	fprintf(outparfp, "%g\n", h[n-1]);

@


1.10
log
@changed test for positiveness to allow zero values
@
text
@d1 1
a1 1
/* SUINTVEL: $Revision: 1.9 $ ; $Date: 2003/06/09 16:17:07 $		*/
d110 1
a110 1
		if (vs[i] < 0.0)
@


1.9
log
@9 June 2003
@
text
@d1 1
a1 1
/* SUINTVEL: $Revision: 1.8 $ ; $Date: 1996/09/13 21:49:05 $		*/
d110 1
a110 1
		if (vs[i] <= 0.0)
d112 1
a112 1
		if (t0[i] <= 0.0)
@


1.8
log
@silenced -Wall messages
@
text
@d1 1
a1 1
/* SUINTVEL: $Revision: 1.7 $ ; $Date: 1994/08/25 14:59:51 $		*/
d142 1
a142 1
	return EXIT_SUCCESS;
@


1.7
log
@Removed copyright statement from codes that had it.
Moved self-doc line for sudoc.
@
text
@d1 1
a1 1
/* SUINTVEL: $Revision: 1.6 $ ; $Date: 93/08/09 15:19:37 $		*/
d68 1
a68 1

d71 4
a74 4
	register float *v;	/* interval velocities			*/
	register float *h;	/* layer thicknesses at the cmp		*/
	register float *vs;	/* stacking velocities			*/
	register float *t0;	/* zero incidence times			*/
d79 1
a79 1
	float dt;		/* temporary for t0/2 difference 	*/
d95 1
a95 1
	if (n = countparval("t0")) {
@


1.6
log
@changed String to cwp_String
@
text
@d1 1
a1 1
/* SUINTVEL: $Revision: 1.5 $ ; $Date: 92/10/26 14:01:51 $		*/
a2 13
/*----------------------------------------------------------------------
 * Copyright (c) Colorado School of Mines, 1990.
 * All rights reserved.
 *
 * This code is part of SU.  SU stands for Seismic Unix, a processing line
 * developed at the Colorado School of Mines, partially based on Stanford
 * Exploration Project (SEP) software.  Inquiries should be addressed to:
 *
 *  Jack K. Cohen, Center for Wave Phenomena, Colorado School of Mines,
 *  Golden, CO 80401  (jkc@@dix.mines.colorado)
 *----------------------------------------------------------------------
 */

a36 1
/**************** end self doc *******************************************/
d66 1
d81 1
a81 1
	cwp_String outpar;		/* name of file holding output parfile	*/
@


1.5
log
@new selfdoc installed
@
text
@d1 1
a1 1
/* SUINTVEL: $Revision: 1.4 $ ; $Date: 91/09/05 08:50:56 $		*/
d94 1
a94 1
	String outpar;		/* name of file holding output parfile	*/
@


1.4
log
@string -> String and so forth
@
text
@d1 1
a1 1
/* SUINTVEL: $Revision: 1.3 $ ; $Date: 90/05/29 20:44:44 $		*/
d19 31
a49 31
String sdoc = "\
									\n\
SUINTVEL - convert stacking velocity model to interval velocity model	\n\
									\n\
suintvel vs= t0= outpar=/dev/tty					\n\
									\n\
Required parameters:					        	\n\
	vs=	stacking velocities 					\n\
	t0=	normal incidence times		 			\n\
									\n\
Optional parameters:							\n\
	outpar=/dev/tty		output parameter file in the form:	\n\
				h=layer thicknesses vector		\n\
				v=interval velocities vector		\n\
									\n\
Examples:								\n\
    suintvel vs=5000,5523,6339,7264 t0=.4,.8,1.125,1.425 outpar=intpar	\n\
									\n\
    suintvel par=stkpar outpar=intpar					\n\
									\n\
If the file, stkpar, contains:						\n\
    vs=5000,5523,6339,7264						\n\
    t0=.4,.8,1.125,1.425						\n\
then the two examples are equivalent.					\n\
									\n\
Note: suintvel does not have standard su syntax since it does not	\n\
      operate on seismic data.  Hence stdin and stdout are not used.	\n\
									\n\
Note: may go away in favor of par program, velconv, by Dave		\n\
									\n\
";
d100 1
a100 1
	askdoc(0);
@


1.3
log
@Attempt to maxgetpar() -> countparval()
@
text
@d1 1
a1 1
/* SUINTVEL: $Revision: 1.2 $ ; $Date: 90/05/25 19:26:05 $		*/
d19 1
a19 1
string sdoc = "\
d94 1
a94 1
	string outpar;		/* name of file holding output parfile	*/
d103 1
a103 1
	outpar = "/dev/tty" ;	sgetpar("outpar", &outpar);
d116 1
a116 1
	if (n != fgetpar("t0", t0))
d118 1
a118 1
	if (n != fgetpar("vs", vs))
@


1.2
log
@vec --> ealloc1float, etc.
@
text
@d1 1
a1 1
/* SUINTVEL: $Revision: 1.1 $ ; $Date: 90/04/18 20:35:51 $		*/
d107 7
a113 6
	/* Allocate space for the model using maxgetpar() */
	n = maxgetpar();
	v  = ealloc1float(n);
	h  = ealloc1float(n);
	vs = ealloc1float(n);
	t0 = ealloc1float(n);
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/* SUINTVEL: $Revision: 2.8 $ ; $Date: 89/09/20 19:36:34 $		*/
d109 4
a112 4
	v  = vec(n);
	h  = vec(n);
	vs = vec(n);
	t0 = vec(n);
@
