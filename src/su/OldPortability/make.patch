Some systems don't include the default rules for making libraries.
This can be added to individual library makefiles as:

.c.a:
	$(CC) -c $(CFLAGS) $<
	ar rv $@ $*.o
	rm -f $*.o

.f.a:
	$(FC) -c $(FFLAGS) $<
	ar rv $@ $*.o
	rm -f $*.o

Some systems don't recognize the built-in symbol, $$@, as in:

prog	: $$@.o
	cc $(CFLAGS) $@.o -o $@

In this example it would be as easy to write:

prog	: prog.o
	cc $(CFLAGS) prog.o -o prog

But the use of this in SU is to group a bunch of files that need the
same compilation into one rule:

$(XM)	: $$@.o
	cc $(CFLAGS) $@.o -lsu -lm -o $@

If you don't have $$@, you'll have to write individual rules for each
member of $(XM) and so forth.  Sigh.


Note: This stuff is well discussed in Kochan and Wood, "Topics in
      C Programming", Hayden, 1987.
