From dhale@green.Mines.Colorado.EDU Thu Oct 24 15:04:31 1991
Return-Path: <dhale@green.Mines.Colorado.EDU>
Received: from  green.Mines.Colorado.EDU  (green) by  dix.Mines.Colorado.EDU  (NeXT-1.0 (From Sendmail 5.52)/NeXT-2.0)
	id AA10789; Thu, 24 Oct 91 15:04:27 MDT
Received: by  green.Mines.Colorado.EDU  (NeXT-1.0 (From Sendmail 5.52)/NeXT-2.0)
	id AA01203; Thu, 24 Oct 91 15:04:25 MDT
Date: Thu, 24 Oct 91 15:04:25 MDT
From: dhale@green.Mines.Colorado.EDU (Dave Hale)
Message-Id: <9110242104.AA01203@ green.Mines.Colorado.EDU >
Received: by NeXT Mailer (1.63)
To: jkc@green.Mines.Colorado.EDU, mdietric@green.Mines.Colorado.EDU
Subject: xtop and ptox
Status: RO

#include "cwp.h"

#define LWRAP 8

static void xtop (float w, float pbias,
	int nx, float dx, float fx, complex *g,
	int np, float dp, float fp, complex *h)
/*****************************************************************************
Slant stack for one frequency w, where slant stack is defined by

           fx+(nx-1)*dx
    h(p) =   integral   exp(-sqrt(-1)*w*p*x) * g(x) * dx
                fx
******************************************************************************
Input:
w		frequency (radians per unit time)
pbias		bias p value (see notes below)
nx		number of x samples
dx		x sampling interval
fx		first x sample
g		array[nx] containing g(x)
np		number of p samples
dp		p sampling interval
fp		first p sample

Output:
h		array[np] containing h(p)
******************************************************************************
Notes:
The units of w, x, and p must be consistent.

Slant stack is performed via FFT and 8-point (tapered-sinc) interpolation.

The input function g(x) is assumed to have no energy for spatial frequency
(wavenumber) components outside the range -PI/dx+w*pbias to PI/dx+w*pbias.
The purpose of the bias p value (pbias) is to enable the user to adjust
this finite range.

The Fourier transform over time (t) is assumed to have been performed with
positive sqrt(-1)*w*t in the exponent;  if negative sqrt(-1)*w*t was used
instead, call this function with negative w.
******************************************************************************
Author:  Dave Hale, Colorado School of Mines, 10/24/91
*****************************************************************************/
{
	int nxfft,nk,nka,ix,ik,ip;
	float dk,fk,ek,fka,k,p,phase,c,s,x,xshift,temp,*kp;
	complex czero=cmplx(0.0,0.0),*gx,*gk,*gka,*hp;
	
	/* wavenumber k sampling */
	nxfft = npfa((nx+LWRAP)*2);
	nk = nxfft;
	dk = 2.0*PI/(nxfft*dx);
	fk = -PI/dx;
	ek = PI/dx;
	fka = fk-LWRAP*dk;
	nka = LWRAP+nk+LWRAP;
	
	/* allocate workspace */
	gka = alloc1complex(nka);
	gx = gk = gka+LWRAP;
	hp = alloc1complex(np);
	kp = alloc1float(np);
	
	/* apply linear phase shift to account for bias p value */
	for (ix=0,x=fx; ix<nx; ++ix,x+=dx) {
		phase = -w*pbias*x;
		c = cos(phase);
		s = sin(phase);
		gx[ix].r = g[ix].r*c-g[ix].i*s;
		gx[ix].i = g[ix].r*s+g[ix].i*c;
	}
	
	/* pad g(x) with zeros */
	for (ix=nx; ix<nxfft; ++ix)
		gx[ix].r = gx[ix].i = 0.0;
	
	/* negate every other sample so k-axis will be centered */
	for (ix=1; ix<nx; ix+=2) {
		gx[ix].r = -gx[ix].r;
		gx[ix].i = -gx[ix].i;
	}
	
	/* Fourier transform g(x) to g(k) */
	pfacc(-1,nxfft,gx);
	
	/* wrap-around g(k) to avoid interpolation end effects */
	for (ik=0; ik<LWRAP; ++ik)
		gka[ik] = gk[ik+nk-LWRAP];
	for (ik=LWRAP+nk; ik<LWRAP+nk+LWRAP; ++ik)
		gka[ik] = gk[ik-LWRAP-nk];
	
	/* phase shift to account for non-centered x-axis */
	xshift = 0.5*(nx-1)*dx;
	for (ik=0,k=fka; ik<nka; ++ik,k+=dk) {
		phase = k*xshift;
		c = cos(phase);
		s = sin(phase);
		temp = gka[ik].r*c-gka[ik].i*s;
		gka[ik].i = gka[ik].r*s+gka[ik].i*c;
		gka[ik].r = temp;
	}
	
	/* compute k values at which to interpolate g(k) */
	for (ip=0,p=fp-pbias; ip<np; ++ip,p+=dp) {
		kp[ip] = w*p;
		
		/* if outside Nyquist bounds, do not interpolate */
		if (kp[ip]<fk && kp[ip]<ek)
			kp[ip] = fk-1000.0*dk;
		else if (kp[ip]>fk && kp[ip]>ek)
			kp[ip] = ek+1000.0*dk;
	}
		
	/* interpolate g(k) to obtain h(p) */
	ints8c(nka,dk,fka,gka,czero,czero,np,kp,hp);
	
	/* phase shift to account for non-centered x-axis and non-zero fx */
	xshift = -fx-0.5*(nx-1)*dx;
	for (ip=0; ip<np; ++ip) {
		phase = kp[ip]*xshift;
		c = cos(phase);
		s = sin(phase);
		h[ip].r = hp[ip].r*c-hp[ip].i*s;
		h[ip].i = hp[ip].r*s+hp[ip].i*c;
	}
}

static void ptox (float w, float pbias,
	int np, float dp, float fp, complex *h,
	int nx, float dx, float fx, complex *g)
/*****************************************************************************
Inverse slant stack for one frequency w, where slant stack is defined by

           fx+(nx-1)*dx
    h(p) =   integral   exp(-sqrt(-1)*w*p*x) * g(x) * dx
                fx

See alse function xtop; ptox is the inverse of xtop.
******************************************************************************
Input:
w		frequency (radians per unit time)
pbias		bias p value (see notes below)
np		number of p samples
dp		p sampling interval
fp		first p sample
h		array[np] containing h(p)
nx		number of x samples
dx		x sampling interval
fx		first x sample

Output:
g		array[nx] containing g(x)
******************************************************************************
Notes:
The units of w, x, and p must be consistent.

Inverse slant stack is performed via 8-point (tapered-sinc) interpolation
and inverse FFT.

The output function g(x) is assumed to have no energy for spatial frequency
(wavenumber) components outside the range -PI/dx+w*pbias to PI/dx+w*pbias.
The purpose of the bias p value (pbias) is to enable the user to adjust
this finite range.

The Fourier transform over time (t) is assumed to have been performed with
positive sqrt(-1)*w*t in the exponent;  if negative sqrt(-1)*w*t was used
instead, call this function with negative w.
******************************************************************************
Author:  Dave Hale, Colorado School of Mines, 10/24/91
*****************************************************************************/
{
	int nxfft,nk,ix,ik,ip;
	float dk,fk,k,p,scale,phase,c,s,x,xshift,taper,temp,*pk;
	complex czero=cmplx(0.0,0.0),*gx,*gk,*hp;
	
	/* handle zero frequency (dc) specially */
	if (w==0.0) {
		for (ix=0; ix<nx; ++ix)
			g[ix].r = g[ix].i = 0.0;
		return;
	}
	
	/* wavenumber k sampling */
	nxfft = npfa(nx);
	nk = nxfft;
	dk = 2.0*PI/(nxfft*dx);
	fk = -PI/dx;
	
	/* allocate workspace */
	gx = gk = alloc1complex(nxfft);
	hp = alloc1complex(np);
	pk = alloc1float(nk);
	
	/* phase shift to account for non-centered x-axis and non-zero fx */
	xshift = fx+0.5*(nx-1)*dx;
	for (ip=0,p=fp-pbias; ip<np; ++ip,p+=fp) {
		phase = w*p*xshift;
		c = cos(phase);
		s = sin(phase);
		hp[ip].r = h[ip].r*c-h[ip].i*s;
		hp[ip].i = h[ip].r*s+h[ip].i*c;
	}
	
	/* compute p values at which to interpolate h(p) */
	for (ik=0,k=fk; ik<nk; ++ik,k+=dk)
		pk[ik] = k/w+pbias;
	
	/* interpolate h(p) to obtain g(k) */
	ints8c(np,dp,fp,hp,czero,czero,nk,pk,gk);
	
	/* phase shift to account for non-centered x-axis */
	xshift = -0.5*(nx-1)*dx;
	for (ik=0,k=fk; ik<nk; ++ik,k+=dk) {
		phase = k*xshift;
		c = cos(phase);
		s = sin(phase);
		temp = gk[ik].r*c-gk[ik].i*s;
		gk[ik].i = gk[ik].r*s+gk[ik].i*c;
		gk[ik].r = temp;
	}
	
	/* Fourier transform g(k) to g(x) */
	pfacc(1,nxfft,gk);
	
	/* negate every other sample since k-axis was centered */
	for (ix=1; ix<nx; ix+=2) {
		gx[ix].r = -gx[ix].r;
		gx[ix].i = -gx[ix].i;
	}

	/* scale for FFT and account for bias p value */
	scale = 1.0/nxfft;
	for (ix=0,x=fx; ix<nx; ++ix,x+=dx) {
		phase = w*pbias*x;
		c = scale*cos(phase);
		s = scale*sin(phase);
		g[ix].r = gx[ix].r*c-gx[ix].i*s;
		g[ix].i = gx[ix].r*s+gx[ix].i*c;
	}
}

#ifdef TEST
/* simple program to test xtop and ptox */
main()
{
	int nt=101,nx=101,np=101;
	float pbias=0.0,
		dt=1.0,ft=0.0,
		dx=1.0,fx=-50.0,
		dp=0.02,fp=-1.0;
	int ntfft,nw,ix,it,iw,ip;
	float dw,fw,w,**gt,**ht,zero=0.0;
	complex **gw,*gx,*hp,**hw;
	
	/* frequency sampling */
	ntfft = npfar(nt);
	nw = ntfft/2+1;
	dw = 2.0*PI/(ntfft*dt);
	fw = 0.0;
	
	/* workspace */
	gt = alloc2float(ntfft,nx);
	gw = alloc2complex(nw,nx);
	gx = alloc1complex(nx);
	hp = alloc1complex(np);
	hw = alloc2complex(nw,np);
	ht = alloc2float(ntfft,np);
	
	/* make synthetic data g(t,x) */
	scopy(ntfft*nx,&zero,0,gt[0],1);
	for (it=0; it<ntfft; ++it) {
		if (it==1*nt/4 || it==2*nt/4 || it==3*nt/4)
			gt[40][it] = 1.0;
		else
			gt[40][it] = 0.0;
	}
	
	/* Fourier transform g(t,x) to g(w,x) */
	pfa2rc(1,1,ntfft,nx,gt[0],gw[0]);
	
	/* for all w, transform x to p, then p to x */
	for (iw=0,w=fw; iw<nw; ++iw,w+=dw) {
		for (ix=0; ix<nx; ++ix)
			gx[ix] = gw[ix][iw];
		xtop(w,pbias,nx,dx,fx,gx,np,dp,fp,hp);
		ptox(w,pbias,np,dp,fp,hp,nx,dx,fx,gx);
		for (ix=0; ix<nx; ++ix)
			gw[ix][iw] = gx[ix];
	}
	
	/* Fourier transform g(w,x) to g(t,x) */
	pfa2cr(-1,1,ntfft,nx,gw[0],gt[0]);
	sscal(ntfft*nx,1.0/ntfft,gt[0],1);
	
	/* output g(t,x) */
	for (ix=0; ix<nx; ++ix)
		fwrite(gt[ix],sizeof(float),nt,stdout);
}
#endif

