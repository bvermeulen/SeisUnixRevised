/* SUSHAPE: $Revision: 1.4 $ ; $Date: 91/03/14 07:53:01 $		*/

/*----------------------------------------------------------------------
 * Copyright (c) Colorado School of Mines, 1990.
 * All rights reserved.
 *
 * This code is part of SU.  SU stands for Seismic Unix, a processing line
 * developed at the Colorado School of Mines, partially based on Stanford
 * Exploration Project (SEP) software.  Inquiries should be addressed to:
 *
 *  Jack K. Cohen, Center for Wave Phenomena, Colorado School of Mines,
 *  Golden, CO 80401  (jkc@dix.mines.colorado.edu)
 *----------------------------------------------------------------------
 */

#include "su.h"
#include "segy.h"
#include "header.h"

/*********************** self documentation ******************************/
string sdoc =
" 									\n"
" SUSHAPE - Wiener shaping filter					\n"
" 									\n"
" sushape <stdin >stdout  d= [optional parameters]			\n"
" 									\n"
" Required parameters:							\n"
"	w= vector of input wavelet to be shaped				\n"
" 									\n"
"	d= vector of desired output wavelet				\n"
" 									\n"
" 	dt is a mandatory getpar if not set in header	 		\n"
" 									\n"
" Optional parameters:							\n"
" 									\n"
"      nshape=trace	length of shaping filter			\n"
" 									\n"
"      pnoise=0.001	relative additive noise level			\n"
" 									\n"
"      showshaper=0	=1 to show shaping filter on each trace		\n"
" 									\n"
" Trace header fields accessed: ns, dt					\n"
" Trace header fields modified: none					\n"
" 									\n"
" 	To get the shaping filters into an ascii file:			\n"
" 	... | sushape ... showwshaper=1 2>file | ...   (sh or ksh)	\n"
" 	(... | sushape ... showshaper=1 | ...) >&file  (csh)		\n"
" 									\n"
;
/**************** end self doc *******************************************/

/* Credits:
 *	CWP: Jack
 *
 */


#define PNOISE	0.001


segy intrace, outtrace;

main(int argc, char **argv)
{
	int nt;			/* number of points on trace		*/
	float dt;		/* time sample interval (sec)		*/
	float *shaper;		/* shaping filter coefficients		*/
	float *spiker;		/* spiking decon filter (not used)	*/
	float *w;		/* input wavelet			*/
	int nw;			/* length of input wavelet in samples	*/
	float *d;		/* desired output wavelet		*/
	int nd;			/* length of desired wavelet in samples	*/
	int nshape;		/* length of shaping filter in samples	*/
	int ncorr;		/* length of corr window in samples	*/
	float *crosscorr;	/* right hand side of Wiener eqs	*/
	float *autocorr;	/* vector of autocorrelations		*/
	float pnoise;		/* additive noise level			*/
	int showshaper;		/* flag to display shaping filter	*/



	/* Initialize */
	initargs(argc, argv);
	askdoc(1);


	/* Get info from first trace */ 
	if (!gettr(&intrace)) err("can't get first trace");
	nt = intrace.ns;
	dt = intrace.dt/1000000.0;	if (!dt) MUSTGETPARFLOAT ("dt", &dt);


	/* Get parameters */
	if (!getparint("showshaper",  &showshaper))	showshaper = 0;

	if (!getparint("nshape",  &nshape))		nshape = nt;
	
	if (!getparfloat("pnoise",  &pnoise))		pnoise = PNOISE;
	
	if (!(nw = countparval("w")))  err("must specify w= desired wavelet");
	w = ealloc1float(nw);	getparfloat("w", w);

	if (!(nd = countparval("d")))  err("must specify d= desired wavelet");
	d = ealloc1float(nd);	getparfloat("d", d);


	/* Allocate memory */
	shaper	  = ealloc1float(nshape);
	spiker 	  = ealloc1float(nshape);
	crosscorr = ealloc1float(nshape);
	autocorr  = ealloc1float(nshape);


	/* Get shaping filter by Wiener-Levinson */
	xcor(nw, 0, w, nw, 0, w, nshape, 0, autocorr);  /* matrix */
	autocorr[0] *= 1.0 + pnoise;                    /* whiten */
	xcor(nw, 0, w, nd, 0, d, nshape, 0, crosscorr); /* right hand side */
	stoepf(nshape, autocorr, crosscorr, shaper, spiker);
		

	/* Show shaper on request */
	if (showshaper) {
		register int i;
		warn("Shaping filter:");
		for (i = 0; i < nshape; ++i)
			fprintf(stderr, "%10g%c", shaper[i],
				(i%6==5 || i==nshape-1) ? '\n' : ' ');
	}



	/* Main loop over traces */
	do {
		/* Center and convolve shaping filter with trace */
		conv(nshape, -nd/2, shaper,
		     nt, 0, intrace.data, 
                     nt, 0, outtrace.data);        


		/* Output filtered trace */
		memcpy(&outtrace, &intrace, HDRBYTES);
		puttr(&outtrace);

	} while (gettr(&intrace));


	return EXIT_SUCCESS;
}
