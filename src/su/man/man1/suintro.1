.ds U \s-2\f(sRUNIX\fR\s0
.ds S \s-2\f(sRSU\fR\s0
.ds SY \s-2\f(sRSEG-Y\fR\s0
.TH SUINTRO 1 SU
.SH NAME
.B su \-
Introduction to the
.I Seismic Unix
(\*S) processing line
.SH SYNOPSIS
.nf
cc program.c -lsu
.fi
.SH DESCRIPTION
The \*S package consists of a set of seismic processing
programs.  Many of these applications use files
with \*(SY trace headers.
This manual page discusses the application programs
used directly by seismic data processors.  Introductions to the
various subroutine libraries used by \*S programmers
do the same for those libraries.
.PP
The shell programs,
.I sututor,
.I suname,
.I suhelp,
.I sufind,
and
.I keyword
provide an introduction to the \*S processing environment
and its help facilities.  Specific information about particular
applications is available by the
.I self documentation
facility discussed below and by standard \*U manual pages.
.SH I/O
The I/O facilities are primarily the \*U redirection and piping facilities;
no special purpose seismic language is interposed between the user and
the \*U operating system.
.PP
Parameters that describe the
.I data
are in trace headers.
Parameters that describe the
.I processing
are given on the command line in the namelist syntax,
.sp
.nf
param1=value1 param2=value2 ...
.fi
.sp
Collections of parameters may be put in a file and passed in as a unit
with the syntax,
.sp
.nf
par=the_filename
.fi
.sp
The ordinary \*U shell script provides another convenient mechanism for
constructing collections of commands and parameters with the aid of an editor.
.sp
For further information, see getpars(3su).
.PP
In the typical case,
the application programs read the \*(SY traces
from the standard input (stdin),
change the data and/or the headers and write to the standard output (stdout).
Error messages are printed on the standard error (stderr).
A few programs explicitly open files, but whenever the single input/single
output paradigm applies, the data comes in and goes out on respectively
the stdin and stdout.
.PP
Thus, the standard usage syntax is
.sp
.nf
command <stdin >stdout param=value ... ,
.fi
.sp
for example,
.sp
.nf
sustack <data.sort >data.stack
.fi
.sp
.PP
The exceptions are synthetic data generators and the \*(SY tape
reading program,
segyread(1), which do not use the standard input since there is no
data file required.  Similarly segywrite(1) does not use the standard output.
Finally, a few programs require
.I two
data files and we use the special syntax,
.sp
.nf
command file1 file2 param=value ...
.fi
.sp
In all cases, user syntax violations are flagged and great effort has been
made to provide the user with clear error messages on the terminal.
The manual pages for the individual commands describe in detail the
meaning of the less standard error messages in the
.B DIAGNOSTICS
entry.
.PP
The \*U pipe facility is used to composite commands with the syntax,
.sp
.nf
command1 <stdin param=val ... | command2 param=val ... >stdout
.fi
.sp
and so forth.  This is most commonly done when intermediate data files
are not required, although the \*U tee(1) facility can be used to
simultaneously write to an intermediate data file and pass data
down the pipeline to the next processing step.
.PP
Frequently used command combinations can be made into a meta-command
simply by writing them into a file and giving that file execute permission
(shell script).
The su subdirectory, "shell", contains examples, but "quick and
dirty" meta-commands are constructed "on the fly" by experienced \*U
users.  The C shell history facility is often used to
capture and edit past commands into a meta-command.  Here is a short
example file, see the source files in the above cited directory for
more polished examples:
.sp
.nf
# Sort by cdp and stack
sunmo <shots.su par=shots.stkvel >shots.nmo
susort <shots.nmo |
sustack verbose=1 >shots.stack
.fi
.SH SELF DOCUMENTATION
In addition to the standard on-line \*U-style manual pages (such as this
one), the application programs all provide self-documentation (self-docs)
via the syntax,
.sp
.nf
command
.fi
.sp
(i.e., just type the command name).
The self documentation strings give the purpose, syntax, parameter
descriptions and often examples and typical usage for the command.
The self-doc is printed on the terminal with paging.
.SH SEG-Y HEADERS
All the standard \*(SY fields are maintained
and we have added some fields for local use
in the \*(SY unassigned trace header area.
.PP
As an extension,
we allow the use of all simple data types in the (unassigned)
header fields, not just the two and four byte integers used
on \*(SY tapes.  Indeed, except for segyread(1) and segywrite(1),
the application codes deal in C data types such as "int", "long", "float",
etc., whose length in bytes is unspecified by the language.  Thus,
on disk, the trace header on some machines will
.I not
be of length 240 bytes as specified in the \*(SY tape standard.
.PP
The "magic" number representing the
actual byte count in the internal representation of the trace header
is "hidden" from the application programmer by the string, HDRBYTES,
defined in the include file header.h.
.PP
Furthermore, when a new field is
added to the trace header in the unassigned area, this magic number
and related quantities (the number of key word fields, the maximum
admissible trace length in bytes and the byte offsets of the header
fields from the top of trace) are computed automatically by issuing
the make(1) command in the su include subdirectory.
.PP
Typical coding usage is
.sp
.nf
        nsegy = ns * sizeof(float) + HDRBYTES;
.fi
.sp
where ns represents the number of data samples on the trace and
nsegy the length of the entire trace in bytes as required, e.g.,
by malloc(1).
.SH APPLICATIONS (03/02/89)
.sp .5v
.TP 12
.I segyhdrs
make header files for \*(SY tape
.TP
.I segyread
read \*(SY tape
.TP
.I segywrite
write \*(SY tape 
.TP
.I su3dchart
prepare data to plot x-midpoints vs. y-midpoints
.TP
.I suabs
get the absolute value of a data set (*)
.TP
.I suabshw
change value of header word to absolute value
.TP
.I suaddhead
add \*(SY headers to bare traces
.TP
.I suaddnoise
add Gaussian or white noise to traces
.TP
.I suagc
automatic gain using Gaussian window
.TP
.I suamp
extract amp, phase, real or imag from FPACK traces
.TP
.I suband
band pass filter
.TP
.I suchart
make data for stacking (or other) chart
.TP
.I suchw
change header word
.TP
.I sucontour
contouring program for data plotting
.TP
.I sudecon
predictive error filtering (*)
.TP
.I sudiff
take difference of two data sets
.TP
.I sudmostk
DMO stacking of multi-offset data using Kirchhoff implementation (*)
.TP
.I suedit
examine \*(SY trace files and edit headers
.TP
.I suenv
form envelope trace
.TP
.I sufft
complex FFT of time data set to packed frequency
.TP
.I sufft2d
transform (t,x) to (f,k) (*)
.TP
.I sufrac
fractional derivative or integral filtering (*)
.TP
.I suflip
flip or rotate data (*)
.TP
.I sugain
apply various types of gain, clip, balance
.TP
.I sugazdc
Gazdag downward continuation (*)
.TP
.I sugazmig
Gazdag time migration
.TP
.I sugethw
get value of header field for each trace
.TP
.I sugraph
amplitude graph of su data traces (*)
.TP
.I suhaledmo
Hale DMO (*)
.TP
.I suhalekdmo
DMO of common offset data using a Kirchhoff implementation (*)
.TP
.I suhilb
Hilbert transform
.TP
.I suifft
FFT of packed frequency data set to time
.TP
.I suilog
inverse log stretch (*)
.TP
.I suimp2d
generate offset data from line scatterer (*)
.TP
.I suimp3d
generate offset data from point scatterer (*)
.TP
.I suinmo
Inverse NMO with arbitrary velocity model (*)
.TP
.I suintvel
convert stacking velocity model to interval velocity model (*)
.TP
.I sukaper
compute data for k-domain aperture of a survey (*)
.TP
.I sukill
zero out traces in a data set (*)
.TP
.I sulog
log stretch (*)
.TP
.I sulogdmo
log stretch DMO (*)
.TP
.I sumark
set the mark field on selected traces (*)
.TP
.I sumax
get absolute maximum and location on each trace
.TP
.I sumute
mute large offsets
.TP
.I sunmo
normal moveout
.TP
.I supack1
pack \*(SY trace data into chars
.TP
.I supack2
pack \*(SY trace data into shorts
.TP
.I suplane
synthetic data generator (*)
.TP
.I supmovie
prepare data for movie program (*)
.TP
.I supow
compute sum of squares of each trace
.TP
.I supwig
perspective plotting (*)
.TP
.I suqgraph
quick amplitude graph
.TP
.I surange
get max and min values for non-zero header fields
.TP
.I surecip
use reciprocity to sum opposing offsets (*)
.TP
.I sushw
set header word
.TP
.I susort
sort on arbitrary header fields (*)
.TP
.I suspike
create synthetic section with spike data (*)
.TP
.I sustack
stack adjacent traces with same header word value (*)
.TP
.I sustkvel
compute stacking vels from interval vels (*)
.TP
.I sustrip
strip \*(SY headers
.TP
.I susum
add two data sets (*)
.TP
.I susvanl
stacking velocity analysis (*)
.TP
.I sutab
tab plot traces (for non-graphics terminal) (*)
.TP
.I sutwig
full featured wiggle trace plotter
.TP
.I sutwig2
side by side wiggle plots (*)
.TP
.I sutwig2v
above and below wiggle plots (*)
.TP
.I sutwig4
four wiggle plots (*)
.TP
.I suunpack1
undo supack1 approximately
.TP
.I suunpack2
undo supack2 approximately
.TP
.I suus
subsample trace data
.TP
.I suwig
fast wiggle plotter
.TP
.I suwind
window and time gate traces
.TP
.I suzero
zero out data within a time window
.P
The symbol (*) is used above to indicate applications whose
manual pages have not been written.  The self-documentations
in the source code provide partial documentation.
.SH BUGS
We have left a bug in one of the application programs.
Since we don't know where it is, if you find it, please
send a report to:
.ne 6
.sp
.nf
Jack K. Cohen
Center for Wave Phenomena
Colorado School of Mines
Golden, CO 80401
.fi
.sp
Adding the parameter, ID=1, to the run that produced an error will
print the version numbers of the codes involved.
.SH CAVEATS
The manual pages do not get read nearly as often as the program
self-documentations (see discussion above).  Hence errors and omissions
tend not to get caught.  Having the source code on-line also somewhat
decreases internal interest in the manual pages.
.SH FILES
At the Center for Wave Phenomena,
the directory for source code is /src and our directory for
compiled code is /usr.  These prefixes are omitted below
since they may not apply to other sites.
.sp .5v
.TP 24
.I su/src/*.c
C program source
.TP
.I su/src/lib/*.c
C subroutine source
.TP
.I su/src/shell/*
Bourne shell code source
.TP
.I su/src/include/*
SU include file source
.TP
.I su/src/man/*
manual page source
.TP
.I general/Fftpack/*.f
mixed radix FFT source
.TP
.I general/Fftsep/*.f
SEP FFT source
.TP
.I general/Veclib/*.f
vector library source
.TP
.I general/include/*
global CWP include file source
.TP
.I graphics/cplot/*
graphics source
.TP
.I public/rcs/*
RCS source
.TP
.I local/*
compiled programs
.TP
.I local/lib/*.a
compiled subroutine archives
.SH SEE ALSO
sulib(3SU) veclib(3SU) fftlib(3SU)
.SH AUTHORS
Einar, Shuki, Jack and others from SEP and CWP.
.PP
In the codes and documentation, I have used only first names as
a nice informal touch.  Here, I take the opportunity to supply the
full names.
.TP 10
.sp 2.0v
Stanford Exploration Project Staff:
.TP
.I
Jon
Jon F. Claerbout, Director of the SEP
.TP
.sp 2.0v
His students at the SEP:
.TP
.I
Shuki
Shuki Ronen
.TP
.I
Einar
Einar Kjartenssen
.TP
.I
Stew
Stewart A. Levin
.TP
.I
Joe
Joe Dellinger
.TP
.I
Rob
Rob Clayton
.TP
.I
Chuck
Chuck Sword
.TP
.I
Dave
Dave Hale
.TP
.I
Jeff
Jeff Thorson
.sp 2.0
.TP
.sp
Center for Wave Phenomena staff:
.TP
.I
Jack
Jack Cohen, Professor at CWP
.sp
.TP
.sp
Students at CWP:
.TP
.I
Chris
Chris Liner
.TP
.I
Seb
Sebastien Geoltrain
.TP
.I
Brian
Brian Sumner
.TP
.I
Jeff
Jeff Emanuel
.SH CODING STYLE
A strenuous effort has been made to keep the source
codes well commented, clear and uniform.  But there are some idioms
used so repeatedly, that it would be painful to explain them each
time.  Among these is a paragraph something like the following
that opens each program:
.sp
.nf
	/* Initialize SU */
	initargs(argc, argv);
	if (!igetpar("ID", &ID))	ID = 0;
	if (ID) {
		(void) fprintf(stderr, "%s\n", progid);
		(void) fprintf(stderr, "%s\n", revid);
	}
	askdoc(1);
.fi
.sp
The initargs() call initializes the arguments
so that the subroutines can pass error messages with the name of the
offending main.
The askdoc() call arranges
for the self-doc discussed above to be printed at the user's request.
.PP
Another hard to read code block arises from the desirability of checking
for possible error returns from every system call (after all, disks
do get full, etc.).  C provides a terse idiom for this routine task:
.sp
.ne 8
.nf
        if (-1 == (tfd =
                open(tape, O_WRONLY | O_CREAT | O_TRUNC, 0666))) {
                syserr("can't open tape for output");
        }
.fi
.PP
The task of reading this is only made worse by the (usual) necessity of
breaking the first line.  The things to watch for are the system call
(here, "open"), and the variable where the return value is stored
(here, "tfd", the file descriptor).  The
rest of the statements merely arrange for an informative error
message to be printed in case the file can not be opened.
.PP
Indeed, the program name (and calling programs, if any), the indicated string
in the "syserr" line, and \*U's standard library message will all be
printed if the error return (here, -1) is seen.
.PP
Finally, it should be mentioned that we use some subroutines that
look like system subroutines, but really aren't.  Among these are:
.sp
.nf
eread, ewrite, efread, efwrite, pread, pfread
.fi
.sp
which provide error checking (see iopkge(3su)) and
.sp
.nf
atoie, atole, etc.,
.fi
.sp
which check for overflow of arithmetic conversions (see atopkge(3su)).
.SH REVISION DATE
03/02/88.  Note that the "REVISION LEVEL" entry on the application manual
pages refers to RCS version of the corresponding source code.  In this
way, the reader can check currency of the documentation and/or use the
RCS facility, rlog, to see what changes were made since the last update
of the manual page.
