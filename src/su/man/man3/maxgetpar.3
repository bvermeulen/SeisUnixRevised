.TH MAXGETPAR 3SU SU
.SH NAME
.B maxgetpar \-
return the size of the longest parameter vector
.SH SYNOPSIS
.nf
#include "cwp.h"
unsigned int maxgetpar()
.SH DESCRIPTION
.I Maxgetpar
is a routine that returns the number of components in the longest 
parameter vector.
The arguments are normally taken from the command line.
However, if the command line argument
.I "par=filename"
is encountered, then
.I filename
is searched in addition.
.PP
Parameters are entered in the Fortran namelist format, that in the
the format:
.I "name=value".
.I Name
is the name of the variable and
.I value
is its value.  No embedded blanks are allowed.
The arguments may be in any order.
.PP
Parameter \fIvectors\fP are input by the construction
.I "name=value1,value2,value3,...".
Only use this form of input if the program is expecting a vector,
otherwise a variable may be overwritten or a memory fault may occur.
.PP
In the parameter files, individual parameter specifications
are separated from each other by any number of blanks, tabs, or
newlines.
.PP
.I Maxgetpar
returns the maximum number of vector entries in any parameter.
This is useful for parsimonious dynamic space allocation.
.SH RETURN VALUE
.I maxgetpar
returns an unsigned int giving the length of the longest parameter vector.
.SH EXAMPLE
.na
.nf
	/* Allocate space for the model using maxgetpar() */
	n = maxgetpar();
	v  = vector(n);
	h  = vector(n);
	vs = vector(n);
	t0 = vector(n);
.fi
.ad
.sp
Here
.I maxgetpar
is used to place an upper bound on the size required by several one
dimensional array.  The allocation is "hidden" by using vector(3SU)
which in turn calls malloc(3C).  If the vector sizes are long enough
to warrant reallocation once the true sizes were known, then code
such as the following can be written:
.sp
.na
.nf
        /*    Allocate an upper bound on the space for */
        /*    the velocity model using maxgetpar()     */
        nv = maxgetpar();
        v = vector(nv);

        switch (nv = fgetpar("v", v)) {
        case 0: /* defensive programming */
                err("must specify velocity model");
        break;
        case 1:
                velvar = const;
                connmo = true;
                free_vector(v);
                v = vector(1);
        break;
        default:
                velvar = voft;
                connmo = false;
                free_vector(v);
                v = vector(nv);
        break;
        }
.SH SEE ALSO
hgetpar(3SU) ugetpar(3SU) lgetpar(3SU) vgetpar(3SU) igetpar(3SU) pgetpar(3SU)
fgetpar(3SU) zgetpar(3SU) sgetpar(3SU) initgetpar(3SU)
.SH AUTHOR
Designed by Robert Clayton and Jon Claerbout.
This version was written by Shuki.
.SH REVISION LEVEL
1.20
