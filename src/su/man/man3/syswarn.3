.TH SYSWARN 3SU SU
.SH NAME
.B syswarn \-
routine for reporting a system call failure
.SH SYNOPSIS
.nf
#include "../include/cwp.h"
#include <varargs.h>
.sp 0.5v
void syswarn(va_alist)
va_dcl
.fi
.P
Here, "va_alist" and "va_dcl" are defined in varargs.h.  For common use,
the syntax may be thought of as
.sp
.nf
void syswarn(format, args)
.fi
.sp
where "format" represents a printf format string (except that a
trailing "\en" is supplied automatically) and "args" represents
the variables referenced in the format string.
The format string should contain the name of the system call
evoked.
.SH DESCRIPTION
.I Syswarn
provides a flexible method for reporting system call failures in
the style of printf(3S).  Unlike syserr(3SU), the calling program
is not aborted.
This routine is more flexible
than perror(3C), since it allows an arbitrary number of arguments.
.P
For portability, this routine uses varargs and the "format"
and "args" are bundled as per vararg.h.
.P
A test driver is contained in the errpkge source code and the
makefile in the su/lib directory has a routine for compiling and
running the driver.
.SH RETURN VALUE
The global int errno is returned.
.SH EXAMPLE
.nf
	if (-1 == (fd = open(xargv[j], O_RDONLY))) {
	    syswarn("can't open %s, processing next file", xargv[j]);
	    continue;
	    ...
	}
.SH SEE ALSO
printf(3S) perror(3C) errpkge(3SU) syserr(3SU)
.SH AUTHOR
Jeff Thorson, Stew, Shuki, Jack.  Major ideas were taken from
Kernighan and Pike, "The UNIX Programming Environment", page 207,
and Rochkind, "Advanced UNIX Programming", page 13.
.SH SOURCE
su/lib/errpkge.c
.SH REVISION LEVEL
1.6
