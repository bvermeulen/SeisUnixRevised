.TH FGETTR 3SU SU
.SH NAME
.B fgettr, gettr\-
get a SEG-Y trace from a file by descriptor
.SH SYNOPSIS
.nf
#include "../include/cwp.h"
#include "../include/segy.h"
#include "../include/hdr.h"
.sp 0.5v
#ifdef GETTR1
#define NAME		"fgettr1"
#define BYTESPER	sizeof(char)	/* bytes per input datum */
int fgettr1(fd, tp)
#endif
.sp 0.5v
#ifdef GETTR2
#define NAME		"fgettr2"
#define BYTESPER	sizeof(short)	/* bytes per input datum */
int fgettr2(fd, tp)
#endif
.sp 0.5v
#ifdef GETTR
#define NAME		"fgettr"
#define BYTESPER	sizeof(float)	/* bytes per input datum */
int fgettr(fd, tp)
#endif
.sp 0.5v
int fd;			/* file descriptor	*/
segy *tp;		/* pointer to SEG-Y trace */
.SH DESCRIPTION
.I Fgettr
reads a SEG-Y trace (header bytes and data)
from the file given indicated by the passed file descriptor into the
segy structure indicated by the passed segy pointer.
The variant
.I fgettr1
is for traces with 1 byte data as used in suunpack1 and similarly
.I fgettr2
is for traces with 2 byte data as used in suunpack2.
.P
The most common case is for the data file to be redirected from stdin
and macros are provided in cwp.h for these cases.  Thus
.sp
.nf
gettr(tp)  is equivalent to fgettr(stdin, tp)
gettr1(tp) is equivalent to fgettr1(stdin, tp)
gettr2(tp) is equivalent to fgettr2(stdin, tp)
.fi
.P
To avoid having to maintain nearly identical codes, we make
three versions from a single source code as indicated in
the above SYNOPSIS.  The "1" variant is for
SEG-Y traces with the float data replaced with char data,
the "2" variant is for replacement with short data.
Use the compile options -DGETTR, -DGETTR1, and -DGETTR2
respectively, for the three versions.
.P
A test driver is contained in the fgettr source code and the
makefile in the su/lib directory has a routine for compiling and
running the driver.
.SH RETURN VALUE
All the variants return the number of bytes read on the current trace
and 0 after the last trace is read.  This allows code like that shown
below in the EXAMPLE.
.SH EXAMPLE
.na
.nf
segy tr;
\&...
	while (gettr(&tr)) {
		tr.offset = abs(tr.offset);
		puttr(&tr);
	}
	...
.fi
.ad
.SH FORTRAN USAGE
.na
.nf
	fgettr(fd, tp)
.fi
.ad
.SH BUGS
Shuki said that the last SEP version didn't work on tapes and
suggested using dd and pipes:
.sp
.na
.nf
	dd </dev/rmt0 bs=what_ever | su_program
.fi
.ad
.P
The current version hasn't been tested on tapes.
.P
The original SEP version contained code for asynchronous use of
TAPE on the Convex.  This has been omitted here since this aspect
of UNIX isn't portable yet.
.P
Fortran usage is dubious.
.SH DIAGNOSTICS
Many self-explanatory ones and:
.TP 8
.I "stdin is undefined filetype"
Stdin is a filetype unknown to statfil(3SU), eg. a FIFO.
.TP
.I "bad first header on tape"
The first record length is not consistent with the
number of samples in the ns header field.
.TP
.I "bad first header on disk"
The system read function failed to return the number
of bytes in the header field.
.TP
.I "unable to handle ... > SY_NDAT samples per trace"
The number of samples in the ns header field is
bigger than the parameter SY_NDAT defined in segy.h.
.TP
.I "reading first trace data from disk"
The system read function failed to return the number
of samples indicated in the ns header field.
.TP
.I "tape read trace #__"
The system read function failed to return the number
of bytes indicated by the first trace.
.TP
.I "disk read trace #__";
The system read function failed to return the number
of bytes indicated by the first trace.
.TP
.I "mysterious filetype trace #__"
Indicates program bug (i.e. this message shouldn't
occur).
.SH SEE ALSO
gettra(3SU) fputtr(3SU) statfil(3SU)
.SH AUTHOR
Einar, Stew, Jack, Shuki
.SH REVISION LEVEL
1.45
