.ll +5
.ce 4
User's Manual
for
EZSU

.PP
Ezsu is an interactive program that is intended to aid in the
creation of job files to be used in the running of the seismic UNIX
package.  (The actual executable may was originally known as curs2, and may
still be called by this name).  The program allows the user to fill in a
template for the selected SU programs enabling the user to avoid the
process of remembering all the parameters for the selected program.  The
user is supplied with a general description of the program that has been
selected and the parameters associated with the program along with
descriptions for each of these parameters, and default values in the case
of the optional parameters.
.PP
The full ezsu package consists of two programs.  Ezsu (or curs2),
and a support program called generate.  Ezsu handles the selection of the SU
programs and the filling in of the parameters.  Generate creates the
template files that provide the information that ezsu uses to describe the
selected SU programs and the variable and descriptions.  If ezsu is unable
to find a template file from which to read this information it will call
generate in an effort to create one that it can use.  Generate may also be
called from the command line with the same results.
.PP
	% generate suaddhead
.PP
The preceeding would create the template file for suaddhead.  Generate uses
the 'C' source code for the SU program to generate the template, so the
source code must be readable and in the directory that is is expected to be
in (the directory is contained in lists.h.  See notes at the end of the
manual).  The self-doc portion of the code must also conform to the
standard format as specified in the Appendix of this manual.
.PP
Ezsu requires no parameters, and will ignore any that are provided.
Upon invocation the title screen will appear and the user will be prompted
for the name of the job file.  This job file is simply a file that contains
the commands to execute the SU pregrams selected, and redirect the input
and output as you select.  The resulting file will typically be a series of
SU programs piping the output of one into the next.  These job files can be
edited making small changes simple, and they can be used as examples for SU
novices.
.PP
To execute the commands in the job file one simple needs to
instruct the shell to use the file with the source command :
.br
	% source jobfile

.br
____________________________________________________________________________

.ce 2
Easy SU Interface
Job File Builder for Seismic UNIX




.br
     Please enter a name for the job file : <jobfile>
.br
	
.br
____________________________________________________________________________

.PP
What is between the two dashed lines would be what would first
appear on the screen when ezsu is run.  The <jobfile> should then be
entered by the user (it is not on the screen).  If a file exists in the
current directory by the same name a message will appear saying that the
file already exists and a process will begin to determine what course to
take with the file. 
.PP
The first option is to append to the file.  The default is to do 
so, and the result will be that the commands that are created during 
that session of ezsu will be added to the end of the file.  This should 
be used if you have aborted ezsu before selecting a destination
for the output.
.PP
If you choose to append to the file, if is assumed that there is
already some material in the job file, and you are asked whether or not you
are continuing the pipe.  If you say no then there is no input directed
into the first SU program that you select during this session.  If you
select "no" then you will be prompted for the input (this will be discussed
latter).  It should be noted that is is entirely possible to have more than
one series of commands in the same job file that are completely unrelated.
To obtain this result from ezsu it would be necessary to run ezsu twice,
once for each pipeline.
.PP
If you choose not to append to the file you are asked whether or
not to delete the existing file.  The default is "NO" and this selection
will result in the program exiting.  Selecting yes results in the existing
file being deleted, and a new one created to hold the output from the
current session.
.PP
When a job file has been named and any related questions answered
the main loop of ezsu begins.  This loop consists of selecting a SU
program, filling in the parameters, and redirecting the output.  This loop
repeats until the output is directed somewhere other than into a pipe, or
until the user aborts at one of the several points at which this is
possible.

____________________________________________________________________________


      Which SU program would you like to use? 

____________________________________________________________________________

.PP
The above question appears on the screen when the program is ready
to select the next SU program.  There are actually several possibilities at
this point.  Typically the user will simply enter the name of a SU program
and ezsu will then read in the template file for the selected program, and
begin the filling in of the parameters.
.PP
If one is uncertain of the name of the desired SU program is is
possible to get a listing of all of the SU programs.  Any of the following
responses to the question will result in the calling of suname :
.PP
"?",   "suname",   "help".
.PP
Simply hitting return, with no other input on the line will result
in the program existing, leaving the job file as it was after the last
completed pass through the main loop.
.PP
If a name is enter for which there is no template file, and no
available source code, a message is displayed saying that this has occurred,
and the user is asked for a SU program again.

.PP
After a valid SU program has been selected, the template file is
read in (after being created if it is not found), and the header is
displayed, and if it is the beginning of the session and the user is not
continuing an existing pipeline, the user is prompted for the input.
.PP
.PP

.PP

.br

.PP

.br

.PP

.br

.PP

.PP

.PP

.PP
The following is such a screen using sushw for an example.
.br

.br

.br

.br

.br

____________________________________________________________________________

.ce 6
SUSHW - set header word using trace number, mod and integer divide

The value of header word key is computed using the formula:
i = itr + d
val(key) = a + b * (i % j) + c * (i / j)
where itr is the trace number (first trace has itr=0, NOT 1)





         Input ([stdin], file) : 

____________________________________________________________________________

.PP

.PP

.PP
Input refers to the location from which the first program in the
pipeline should take its input.  If the selected SU program does not need
input form a file the default of stdin should be used.  If a filename is
entered then the command that is placed in the job file will contain a
redirection from the named file into the selected SU program.
.PP
Input is only asked for once during a session, since it will
latter be piped in from the preceeding program.
.PP

.PP
For all latter passes through the main loop, and the initial pass
following the selection of the initial input, the following screen would be
displayed (altered of course to contain the appropriate information for the
selected SU program, we will continue with out sushw example).
.br
.br

.br
.br

.br
.br

.br

.br

.br

.br
.br

.br
.br

.br
.br

____________________________________________________________________________

.ce 21
SUSHW - set header word using trace number, mod and integer divide

The value of header word key is computed using the formula:
i = itr + d
val(key) = a + b * (i % j) + c * (i / j)
where itr is the trace number (first trace has itr=0, NOT 1)

i - replace value,   j - down,   k - up,   x - continue,   q - quit
*******************************************************************************
*				       		                              *
*			       Optional Parameters                            *
*				       		                              *
*				       		                              *
*       key      cdp          =    header key word to set                     *
*				       		                              *
*	a	 0	      =    starting value                             *
*				       		                              *
*	b	 0	      =	   scale on between group addend              *
*				       		                              *
*				       		                              *
*******************************************************************************
____________________________________________________________________________


.PP
At this point the process of filling in the parameters begins.  If
there where required parameters for the selected program they would be
listed first, and the user would not be allowed to proceed to the optional
parameters until all the required ones had values.  The optional parameters
all have default values, which may or may not be changed.  The only
optional parameters that will be written to the job file are those that
have their values altered.
.PP
Ezsu will place as many parameters in the window as will fit,
without having any that are only partially in the window.  If there are
more parameters than will fit in the window at one time it is possible to
scroll up and down through the list.  The standard UNIX movement keys ('j'
for down, and 'k' for up) are used, and in addition 'u' will move up, and
'd' will move down.
.PP
To enter or change a parameter's value an 'i' is used (as for
insert with vi).  The highlighted bar should then become one character's
width shorter and further keystrokes should place characters into the value
field for the current parameter.  There is no type checking done on these
values at this time, leaving it to the user to enter valid values for the
parameters.
.PP
When all the values are satisfactory an 'x' proceeds to the next
step.  That is, if there are required and optional parameters, and the user
has just finished with the required parameters, the optional come next.
After the optional the redirection of output is dealt with.  It should be
remembered that at this time there is no way to go backward through this
sequence.
.PP
If the user wishes to end the session for some reason a 'q' may be
used.  The user is asked if he/she really wants to quit, and if 'y' is
selected then the program exits and nothing from the presently selected SU
program is written to the job file.

____________________________________________________________________________

	Output ([pipe], stdout, file) :

____________________________________________________________________________

.PP
When all the parameters for the program have been filled in
satisfactorily the user is prompted to the destination of the output.  The
default is to put it into a pipe, and if this is selected then another SU
program will be prompted for and the loop will continue.
.PP
Either of the other responses end the loop and ezsu will exit after
writing the current SU program and its parameters and the output to the
job file.  Stdout will result in any output going to stdout (usually the
screen), and the job file will have no redirection command for the output.
Entering a file name will result in the output from the last SU program
being placed into the file.  The redirection will be added to the command
that is placed in the job file.


