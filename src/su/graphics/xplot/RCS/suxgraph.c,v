head	1.22;
access;
symbols;
locks
	john:1.22; strict;
comment	@ * @;


1.22
date	2011.11.12.00.45.18;	author john;	state Exp;
branches;
next	1.21;

1.21
date	2011.09.09.22.35.53;	author john;	state Exp;
branches;
next	1.20;

1.20
date	2003.08.20.18.26.36;	author john;	state Exp;
branches;
next	1.19;

1.19
date	97.10.23.21.43.45;	author john;	state Exp;
branches;
next	1.18;

1.18
date	96.09.17.15.47.17;	author jkc;	state Exp;
branches;
next	1.17;

1.17
date	96.09.16.20.19.15;	author jkc;	state Exp;
branches;
next	1.16;

1.16
date	96.09.10.15.29.12;	author john;	state Exp;
branches;
next	1.15;

1.15
date	95.10.03.16.00.12;	author jkc;	state Exp;
branches;
next	1.14;

1.14
date	95.02.28.13.10.39;	author jkc;	state Exp;
branches;
next	1.13;

1.13
date	95.02.21.14.55.47;	author jkc;	state Exp;
branches;
next	1.12;

1.12
date	95.01.19.12.14.23;	author john;	state Exp;
branches;
next	1.11;

1.11
date	94.12.05.09.54.25;	author john;	state Exp;
branches;
next	1.10;

1.10
date	94.11.28.15.45.39;	author john;	state Exp;
branches;
next	1.9;

1.9
date	94.03.30.14.01.22;	author john;	state Exp;
branches;
next	1.8;

1.8
date	93.09.14.13.23.18;	author jkc;	state Exp;
branches;
next	1.7;

1.7
date	93.09.11.08.05.45;	author john;	state Exp;
branches;
next	1.6;

1.6
date	92.10.26.15.17.25;	author john;	state Exp;
branches;
next	1.5;

1.5
date	92.04.02.13.59.42;	author jkc;	state Exp;
branches;
next	1.4;

1.4
date	92.04.02.13.54.06;	author jkc;	state Exp;
branches;
next	1.3;

1.3
date	91.09.06.08.26.29;	author jkcohen;	state Exp;
branches;
next	1.2;

1.2
date	91.06.26.10.46.11;	author jkcohen;	state Exp;
branches;
next	1.1;

1.1
date	91.06.26.10.36.52;	author jkcohen;	state Exp;
branches;
next	;


desc
@su driver for xgraph
@


1.22
log
@copyright
@
text
@/* Copyright (c) Colorado School of Mines, 2011.*/
/* All rights reserved.                       */

/* SUXGRAPH: $Revision: 1.21 $ ; $Date: 2011/09/09 22:35:53 $		*/

#include "su.h"
#include "segy.h"
#include <signal.h>

/*********************** self documentation *****************************/
char *sdoc[] = {
" 									",
" SUXGRAPH - X-windows GRAPH plot of a segy data set			",
" 									",
" suxgraph <stdin [optional parameters] | ...				",
" 									",
" Optional parameters: 							",
" (see xgraph selfdoc for optional parametes)				",
" 									",
" nplot= number of traces (ntr is an acceptable alias for nplot) 	",
" 									",
" d1=tr.d1 or tr.dt/10^6	sampling interval in the fast dimension	",
"   =.004 for seismic 		(if not set)				",
"   =1.0 for nonseismic		(if not set)				",
" 							        	",
" d2=tr.d2			sampling interval in the slow dimension	",
"   =1.0 			(if not set)				",
" 							        	",
" f1=tr.f1 or tr.delrt/10^3 or 0.0  first sample in the fast dimension	",
" 							        	",
" f2=tr.f2 or tr.tracr or tr.tracl  first sample in the slow dimension	",
"   =1.0 for seismic		    (if not set)			",
"   =d2 for nonseismic		    (if not set)			",
" 							        	",
" verbose=0              =1 to print some useful information		",
"									",
" tmpdir=	 	if non-empty, use the value as a directory path	",
"		 	prefix for storing temporary files; else if the	",
"	         	the CWP_TMPDIR environment variable is set use	",
"	         	its value for the path; else use tmpfile()	",
" 									",
" Note that for seismic time domain data, the \"fast dimension\" is	",
" time and the \"slow dimension\" is usually trace number or range.	",
" Also note that \"foreign\" data tapes may have something unexpected	",
" in the d2,f2 fields, use segyclean to clear these if you can afford	",
" the processing time or use d2= f2= to over-ride the header values if	",
" not.									",
" 									",
" See the xgraph selfdoc for the remaining parameters.			",
" 									",
" On NeXT:     suxgraph < infile [optional parameters]  | open      	",
NULL};

/* Credits:
 *
 *	CWP: Dave Hale and Zhiming Li (pswigp, etc.)
 *	   Jack Cohen and John Stockwell (supswigp, etc.)
 *
 * Notes:
 *	When the number of traces isn't known, we need to count
 *	the traces for pswigp.  You can make this value "known"
 *	either by getparring nplot or by having the ntr field set
 *	in the trace header.  A getparred value takes precedence
 *	over the value in the trace header.
 *
 *	When we do have to count the traces, we use the "tmpfile"
 *	routine because on many machines it is implemented
 *	as a memory area instead of a disk file.
 *
 *	When we must compute ntr, we don't allocate a 2-d array,
 *	but just content ourselves with copying trace by trace from
 *	the data "file" to the pipe into the plotting program.
 *	Although we could use tr.data, we allocate a trace buffer
 *	for code clarity.
 */
/**************** end self doc *******************************************/

static void closefiles(void);

/* Globals (so can trap signal) defining temporary disk files	*/
char tracefile[BUFSIZ];	/* filename for trace storage file	*/
FILE *tracefp;		/* fp for trace storage file		*/

segy tr;

int
main(int argc, char **argv)
{
	char plotcmd[BUFSIZ];	/* build xgraph command for popen 	*/
	float *trbuf;		/* trace buffer			 	*/
	FILE *plotfp;		/* fp for plot data			*/
	int nt;			/* number of samples on trace		*/
	int ntr;		/* number of traces (plots)		*/
	int verbose;		/* verbose flag				*/
	float d1;		/* time/depth sample rate 		*/
	float d2;		/* trace/dx sample rate 		*/
	float f1;		/* tmin/zmin				*/
	float f2;		/* tracemin/xmin	 		*/
	cwp_Bool seismic;	/* is this seismic data?		*/
	cwp_Bool have_ntr=cwp_false;/* is ntr known from header or user?	*/
	char *tmpdir;		/* directory path for tmp files		*/
	cwp_Bool istmpdir=cwp_false;/* true for user given path		*/

	char *bindir;		/* directory path for tmp files		*/
	char *cwproot;		/* value of CWPROOT environment variable*/


	/* Initialize */
	initargs(argc, argv);
	requestdoc(1);
	

	/* Get info from first trace */
	if (!gettr(&tr)) err("can't get first trace");
	seismic = ISSEISMIC(tr.trid); 
	nt = tr.ns;
	ntr = tr.ntr;
	if (ntr) have_ntr = cwp_true; 

	if (!getparint("verbose", &verbose))	verbose=0;
	
	if (!getparfloat("d1", &d1)) {
		if      (tr.d1)  d1 = tr.d1;
		else if (tr.dt)  d1 = ((double) tr.dt)/1000000.0;
		else {
			if (seismic) {
				d1 = 0.004;
				warn("tr.dt not set, assuming dt=0.004");
			} else { /* non-seismic data */
				d1 = 1.0;
				warn("tr.d1 not set, assuming d1=1.0");
			}
		}
	}

	if (!getparfloat("d2", &d2)) d2 = (tr.d2) ? tr.d2 : 1.0;

	if (!getparfloat("f1", &f1)) {
		if      (tr.f1)     f1 = tr.f1;
		else if (tr.delrt)  f1 = (float) tr.delrt/1000.0;
		else                f1 = 0.0;
	}

	if (!getparfloat("f2", &f2)) {
		if      (tr.f2)     f2 = tr.f2;
		else if (tr.tracr)  f2 = (float) tr.tracr;
		else if (tr.tracl)  f2 = (float) tr.tracl;
		else if (seismic)   f2 = 1.0;
		else 		    f2 = 0.0;
	}

	if (!getparfloat("f2", &f2)) f2 = 1.0;


	/* Look for user-supplied tmpdir */
	if (!getparstring("tmpdir",&tmpdir) &&
	    !(tmpdir = getenv("CWP_TMPDIR"))) tmpdir="";
	if (!STREQ(tmpdir, "") && access(tmpdir, WRITE_OK))
		err("you can't write in %s (or it doesn't exist)", tmpdir);

	/* See if CWPBIN environment variable is not set */
	if (!(bindir = getenv("CWPBIN"))) { /* construct bindir from CWPROOT */

		bindir = (char *) emalloc(BUFSIZ);

		/* Get value of CWPROOT environment variable */
		if (!(cwproot = getenv("CWPROOT"))) cwproot ="" ;
		if (STREQ(cwproot, "")) {
			warn("CWPROOT environment variable is not set! ");
			err("Set CWPROOT in shell environment as per instructions in CWP/SU Installation README files");
		}
		/* then bindir = $CWPROOT/bin */
		sprintf(bindir, "%s/bin", cwproot);
	}
	strcat(bindir,"/");   /* put / at the end of bindir */


	/* Allocate trace buffer */
	trbuf = ealloc1float(nt);

	/* Get or set nplot */
	if (getparint("nplot", &ntr) || getparint("ntr", &ntr))
							have_ntr = cwp_true;

	if (!have_ntr) { /* count traces */
		if (verbose) {
 		   warn("nplot not getparred and ntr header field not set");
 		   warn("....  counting traces");
		}

		/* Create temporary "file" to hold data */
		if (STREQ(tmpdir,"")) {
			tracefp = etmpfile();
			if (verbose) warn("using tmpfile() call");
		} else { /* user-supplied tmpdir */
			char directory[BUFSIZ];
			strcpy(directory, tmpdir);
			strcpy(tracefile, temporary_filename(directory));
			/* Handle user interrupts */
			signal(SIGINT, (void (*) (int)) closefiles);
			signal(SIGQUIT, (void (*) (int)) closefiles);
			signal(SIGHUP,  (void (*) (int)) closefiles);
			signal(SIGTERM, (void (*) (int)) closefiles);
			tracefp = efopen(tracefile, "w+");
			istmpdir=cwp_true;		
			if (verbose)
			      warn("putting temporary files in %s", directory);
		}

		/* Loop over input data and read to temporary file */
		ntr = 0;
		do {
			++ntr;
			efwrite(tr.data, FSIZE, nt, tracefp);
		} while (gettr(&tr));


	} 

	/* Set up xgraph command line */
	/* sprintf(plotcmd, "%sxgraph n=%d nplot=%d d1=%f f1=%f style=%s", bindir,
			nt, ntr, d1, f1, style);
*/
	 sprintf(plotcmd, "%sxgraph n=%d nplot=%d d1=%f f1=%f", bindir,
			nt, ntr, d1, f1);

	for (--argc, ++argv; argc; --argc, ++argv) {
		if (strncmp(*argv, "n=", 2) && /* skip those already set */
		    strncmp(*argv, "nplot=", 6) &&
		    strncmp(*argv, "d1=", 3) &&
		    strncmp(*argv, "f1=", 3)) {

			strcat(plotcmd, " ");   /* put a space between args */
			strcat(plotcmd, "\"");  /* user quotes are stripped */
			strcat(plotcmd, *argv); /* add the arg */
			strcat(plotcmd, "\"");  /* user quotes are stripped */
		}

	}


	/* Open pipe to xgraph and send the traces */
	plotfp = epopen(plotcmd, "w");
	
	if (!have_ntr) { /* send out stored traces one by one */
		rewind(tracefp);
		{ register int itr;
			for (itr = 0; itr < ntr; ++itr) {
				efread (trbuf, FSIZE, nt, tracefp);
				efwrite(trbuf, FSIZE, nt, plotfp);
			}
		}
	} else { /* just pump out traces and let xgraph do the work */
		do {
			efwrite(tr.data, FSIZE, nt, plotfp);
		} while (gettr(&tr));
	}


	/* Clean up */
	epclose(plotfp);
	if (!have_ntr) {
		efclose(tracefp);
		if (istmpdir) eremove(tracefile);
	}
	return EXIT_SUCCESS;
}

/* for graceful interrupt termination */
static void closefiles(void)
{
	efclose(tracefp);
	eremove(tracefile);
	exit(EXIT_FAILURE);
}
@


1.21
log
@*** empty log message ***
@
text
@d1 4
a4 1
/* SUXGRAPH: $Revision: 1.20 $ ; $Date: 2003/08/20 18:26:36 $		*/
@


1.20
log
@20 August 2003
@
text
@d1 1
a1 1
/* SUXGRAPH: $Revision: 1.19 $ ; $Date: 1997/10/23 21:43:45 $		*/
d15 1
a15 2
" style=seismic		seismic is default here, =normal is alternate	",
"			(see xgraph selfdoc for style definitions)	",
a97 1
	cwp_String style;	/* xgraph style parameter		*/
a150 1
	if (!getparstring("style", &style))	style="seismic";
d218 1
a218 1
	sprintf(plotcmd, "%sxgraph n=%d nplot=%d d1=%f f1=%f style=%s", bindir,
d220 3
d228 1
a228 2
		    strncmp(*argv, "f1=", 3) &&
		    strncmp(*argv, "style=", 6)) {
@


1.19
log
@cwp_true and other Stew Levin fixes
@
text
@d1 1
a1 1
/* SUXGRAPH: $Revision: 1.18 $ ; $Date: 1996/09/17 15:47:17 $		*/
d103 3
d161 17
d221 1
a221 1
	sprintf(plotcmd, "xgraph n=%d nplot=%d d1=%f f1=%f style=%s",
@


1.18
log
@Removed superfluous comments on tmpfile().
@
text
@d1 1
a1 1
/* SUXGRAPH: $Revision: 1.17 $ ; $Date: 1996/09/16 20:19:15 $		*/
d98 1
a98 1
	cwp_Bool have_ntr=false;/* is ntr known from header or user?	*/
d101 1
a101 1
	cwp_Bool istmpdir=false;/* true for user given path		*/
d114 1
a114 1
	if (ntr) have_ntr = true; 
d163 1
a163 1
							have_ntr = true;
d185 1
a185 1
			istmpdir=true;		
@


1.17
log
@tmpfile stuff
@
text
@d1 1
a1 1
/* SUXGRAPH: $Revision: 1.16 $ ; $Date: 1996/09/10 15:29:12 $		*/
a66 6
 *
 *	If your system does make a disk file, consider altering
 *	the code to remove the file on interrupt.  This could be
 *	done either by trapping the interrupt with "signal"
 *	or by using the "tmpnam" routine followed by an immediate
 *	"remove" (aka "unlink" in old unix).
@


1.16
log
@silenced -Wall messages
@
text
@d1 1
a1 1
/* SUXGRAPH: $Revision: 1.15 $ ; $Date: 1995/10/03 16:00:12 $		*/
d5 1
d33 6
d47 1
a47 1
" See the xgraph selfdoc for the remaining parameters.		",
d82 5
a94 1
	FILE *datafp=NULL;	/* fp for trace data file 		*/
d106 2
d158 6
d178 17
a194 1
		datafp = etmpfile();
d200 1
a200 1
			efwrite(tr.data, FSIZE, nt, datafp);
d230 1
a230 1
		rewind(datafp);
d233 1
a233 1
				efread (trbuf, FSIZE, nt, datafp);
d246 6
a251 1
	if (!have_ntr) efclose(datafp);
d253 6
a258 1
	return EXIT_SUCCESS;
@


1.15
log
@Honor f1 and d1.  Converted to standard style self-doc.
@
text
@d1 1
a1 1
/* SUXGRAPH: $Revision: 1.14 $ ; $Date: 1995/02/28 13:10:39 $		*/
d78 1
d83 1
a83 1
	FILE *datafp;		/* fp for trace data file 		*/
@


1.14
log
@Modified boolean variables.
@
text
@d1 1
a1 1
/* SUXGRAPH: $Revision: 1.13 $ ; $Date: 95/02/21 14:55:47 $		*/
d17 1
a17 1
" nplot is the number of traces (ntr is an acceptable alias for nplot) 	",
d19 13
a31 14
" d1 is the sampling interval in the fast dimension.  If not getparred	",
" then for seismic time domain data d1=tr.dt/10^6 if set, else 0.004. 	",
" For other types of data d1=tr.d1 if set, else 1.0			",
" 									",
" d2 is the sampling interval in the slow dimension.  If not getparred	",
" d2=tr.d2 if set, else 1.0						",
" 									",
" f1 is the first sample in the fast dimension.  If not getparred	",
" then for seismic time domain data f1=tr.delrt/10^3 if set, else 0.0.	",
" For other types of data f1=tr.d1 if set else 0.0	 		",
" 									",
" f2 is the first sample in the slow dimension.  If not getparred	",
" f2=tr.f2 if set, else tr.tracr if set, else tr.tracl if set,		",
" else 1.0 for seismic time domain data, else 0.0 			",
d109 1
d111 4
a114 4
		if (seismic) {
			if (tr.dt) {
				d1 = (float) tr.dt / 1000000.0;
			} else {
d117 1
a117 5
			}
		} else { /* non-seismic data */
			if (tr.d1) {
				d1 = tr.d1;
			} else {
d127 3
a129 5
		if (seismic) {
			f1 = (tr.delrt) ? (float) tr.delrt/1000.0 : 0.0;
		} else {
			f1 = (tr.f1) ? tr.f1 : 0.0;
		}
@


1.13
log
@Modified boolean test variables.
@
text
@d1 1
a1 1
/* SUXGRAPH: $Revision: 1.13 $ ; $Date: 95/01/19 12:09:11 $		*/
d93 1
a93 1
	cwp_Bool know_ntr=false;/* is ntr known from header or user?	*/
d107 1
a107 1
	if (ntr) know_ntr = true; 
d155 1
a155 1
							know_ntr = true;
d157 1
a157 1
	if (!know_ntr) { /* count traces */
d199 1
a199 1
	if (!know_ntr) { /* send out stored traces one by one */
d216 1
a216 1
	if (!know_ntr) efclose(datafp);
@


1.12
log
@added verbose
@
text
@d1 1
a1 1
/* SUXGRAPH: $Revision: 1.11 $ ; $Date: 94/12/05 09:54:25 $		*/
d17 1
a17 2
" nplot is the number of traces.  If not getparred then it			",
" is the total number of traces in the data set.  			",
d48 2
a49 3
 *	CWP: Dave Hale and Zhiming Li (xgraph)
 *	     Jack K. Cohen  (suxmovie)
 *	     John Stockwell (suxgraph)
d52 18
a69 11
 *	When nplot isn't getparred, we need to count the traces
 *	for xgraph.  In this case:
 *	we are using tmpfile because on many machines it is
 *	implemented as a memory area instead of a disk file.
 *	However, if your system really makes a disk file you
 *	should consider altering the code to remove the file
 *	on interrupt.  Two possibilities are trapping the
 *	interrupt with "signal" or using "tmpnam" followed
 *	by an immediate "remove" (aka unlink in old unix).
 *	Although we compute ntr, we don't allocate a 2-d array
 *	and content ourselves with copying trace by trace from
d83 1
a83 1
	FILE *datafp;		/* fp for trace data file (if nplot < ntr)*/
d86 1
a86 2
	int nplot;		/* number of traces			*/
	int ntr;		/* number of traces			*/
d93 1
a93 2
	cwp_Bool got_nplot = true;	/* was nplot getparred?		*/
	cwp_Bool got_ntr = true;	/* was ntr set in header?	*/
a104 1
		 
d107 1
a107 1
	if (ntr==0) got_ntr = false;
d154 2
a155 1
	if (!getparint("nplot", &nplot)) got_nplot = false;
d157 1
a157 1
	if (!got_nplot && !got_ntr) { /* count traces */
a175 2
	if (!got_nplot ) nplot = ntr;

d178 1
a178 1
			nt, nplot, d1, f1, style);
d199 1
a199 1
	if (!got_nplot && !got_ntr) { /* send out stored traces one by one */
d216 1
a216 1
	if (!got_nplot && !got_ntr) efclose(datafp);
@


1.11
log
@updated to permit getparring of n2 or reading of ntr parameter from header
@
text
@d1 1
a1 1
/* SUXGRAPH: $Revision: 1.10 $ ; $Date: 94/11/28 15:45:39 $		*/
d78 1
a78 1
	FILE *datafp;		/* fp for trace data file (if nplot < ntr)	*/
d81 1
a81 1
	int nplot;			/* number of traces			*/
d83 1
d89 1
a89 1
	cwp_Bool got_nplot = true;	/* was nplot getparred?			*/
d107 1
d155 4
a158 2
 		warn("nplot not getparred and ntr header field not set");
 		warn("....  counting traces");
@


1.10
log
@changed to permit slow dimension to be input via getpar of n2 or via
new locally assigned header field "ntr".
@
text
@d1 1
a1 4
/* Copyright (c) Colorado School of Mines, 1994.*/
/* All rights reserved.			*/

/* SUXGRAPH: $Revision: 1.2 $ ; $Date: 94/09/16 12:56:19 $		*/
@


1.9
log
@added ISSEISMIC macro
@
text
@d1 2
a2 1
/* SUXGRAPH: $Revision: 1.8 $ ; $Date: 93/09/14 13:23:18 $		*/
d4 1
a4 12
/*----------------------------------------------------------------------
 * Copyright (c) Colorado School of Mines, 1990.
 * All rights reserved.
 *
 * This code is part of SU.  SU stands for Seismic Unix, a processing line
 * developed at the Colorado School of Mines, partially based on Stanford
 * Exploration Project (SEP) software.  Inquiries should be addressed to:
 *
 *  Jack K. Cohen, Center for Wave Phenomena, Colorado School of Mines,
 *  Golden, CO 80401  (jkc@@dix.mines.colorado)
 *----------------------------------------------------------------------
 */
d12 1
a12 1
" SUXGRAPH - X-Windows GRAPHer of a segy data set 			",
d14 2
a15 2
" suxgraph <stdin  [optional parameters]				",
" 							        	",
a16 1
" 							        	",
d18 5
a22 2
" 			(see xgraph selfdoc for style definitions) 	",
" 							        	",
d26 1
a26 1
" 							        	",
d29 1
a29 1
" 							        	",
d33 1
a33 1
" 							        	",
d37 1
a37 1
" 							        	",
d44 4
a47 3
" 							        	",
" See the xgraph selfdoc for the remaining parameters.			",
" 							        	",
a48 1
/**************** end self doc *******************************************/
d52 3
a54 1
 *	CWP: Dave, Jack
d56 15
d72 1
a76 1

d79 1
a79 1
	char plotcmd[BUFSIZ];	/* build command for popen	 	*/
d81 1
a81 1
	FILE *datafp;		/* fp for trace data file		*/
d83 3
d90 4
a93 4
	cwp_String style;		/* xgraph style parameter		*/
	cwp_Bool seismic;		/* is this seismic data?		*/
	int nt;			/* number of samples on trace		*/
	int ntr;		/* number of traces			*/
d103 1
a103 1
	seismic = ISSEISMIC(tr.trid);
d106 2
d145 1
a145 1
	if (!getparstring("style", &style)) style = "seismic";
d147 1
d152 2
d155 3
a157 2
	/* Create temporary "file" to hold data */
	datafp = etmpfile();
d159 2
a160 6
	/* Loop over input traces & put them into the xdata file */
	ntr = 0;
	do {
		++ntr;
		efwrite(tr.data, FSIZE, nt, datafp);
	} while (gettr(&tr));
d162 6
d169 6
a174 1
	/* System call to xgraph */
d176 1
a176 1
			   nt, ntr, d1, f1, style);
d184 1
a184 1
		    
d190 1
d194 1
a194 1
	/* Open pipe; read data to buf; write buf to plot program */
d196 13
a208 6
	{ register int itr;
	  rewind(datafp);
	  for (itr = 0; itr < ntr; ++itr) {
		efread (trbuf, FSIZE, nt, datafp);
		efwrite(trbuf, FSIZE, nt, plotfp);
	  }
d214 1
a214 2
	efclose(datafp);

@


1.8
log
@Allow TDEAD etc. as seismic time traces.
@
text
@d1 1
a1 1
/* SUXGRAPH: $Revision: 1.7 $ ; $Date: 93/09/11 08:05:45 $		*/
d91 2
a92 2
	seismic = (tr.trid == 0 || tr.trid == TREAL ||
		   tr.trid == TDEAD || tr.trid == TDUMMY);
@


1.7
log
@Bool -> cwp_Bool, String -> cwp_String
@
text
@d1 1
a1 1
/* SUXGRAPH: $Revision: 1.6 $ ; $Date: 92/10/26 15:17:25 $		*/
d91 2
a92 1
	seismic =  (tr.trid == 0 || tr.trid == TREAL);
@


1.6
log
@new selfdoc installed
@
text
@d1 1
a1 1
/* SUXGRAPH: $Revision: 1.5 $ ; $Date: 92/04/02 13:59:42 $		*/
d78 2
a79 2
	String style;		/* xgraph style parameter		*/
	Bool seismic;		/* is this seismic data?		*/
@


1.5
log
@oops, forgot to define seismic
@
text
@d1 1
a1 1
/* SUXGRAPH: $Revision: 1.4 $ ; $Date: 92/04/02 13:54:06 $		*/
d20 36
a55 36
String sdoc =
" 									\n"
" SUXGRAPH - X-Windows GRAPHer of a segy data set 			\n"
" 									\n"
" suxgraph <stdin  [optional parameters]				\n"
" 							        	\n"
" Optional parameters: 							\n"
" 							        	\n"
" style=seismic		seismic is default here, =normal is alternate	\n"
" 			(see xgraph selfdoc for style definitions) 	\n"
" 							        	\n"
" d1 is the sampling interval in the fast dimension.  If not getparred	\n"
" then for seismic time domain data d1=tr.dt/10^6 if set, else 0.004. 	\n"
" For other types of data d1=tr.d1 if set, else 1.0			\n"
" 							        	\n"
" d2 is the sampling interval in the slow dimension.  If not getparred	\n"
" d2=tr.d2 if set, else 1.0						\n"
" 							        	\n"
" f1 is the first sample in the fast dimension.  If not getparred	\n"
" then for seismic time domain data f1=tr.delrt/10^3 if set, else 0.0.	\n"
" For other types of data f1=tr.d1 if set else 0.0	 		\n"
" 							        	\n"
" f2 is the first sample in the slow dimension.  If not getparred	\n"
" f2=tr.f2 if set, else tr.tracr if set, else tr.tracl if set,		\n"
" else 1.0 for seismic time domain data, else 0.0 			\n"
" 							        	\n"
" Note that for seismic time domain data, the \"fast dimension\" is	\n"
" time and the \"slow dimension\" is usually trace number or range.	\n"
" Also note that \"foreign\" data tapes may have something unexpected	\n"
" in the d2,f2 fields, use segyclean to clear these if you can afford	\n"
" the processing time or use d2= f2= to over-ride the header values if	\n"
" not.									\n"
" 							        	\n"
" See the xgraph selfdoc for the remaining parameters.			\n"
" 							        	\n"
;
d86 1
a86 1
	askdoc(1);
@


1.4
log
@Fixed so recognizes non-time domain data.
@
text
@d1 1
a1 1
/* SUXGRAPH: $Revision: 1.3 $ ; $Date: 91/09/06 08:26:29 $		*/
d79 1
@


1.3
log
@string -> String, etc.
@
text
@d1 1
a1 1
/* SUXGRAPH: $Revision: 1.2 $ ; $Date: 91/06/26 10:46:11 $		*/
a27 4
" d1=tr.dt or 0.004      sampling interval in fast dim, often dt or dz	\n"
" d2=1.0                 ... in slow dim, often unit step in trace or dx\n"
" f1=tr.delrt/1000.0     first sample in fast dim, often tmin or zmin	\n"
" f2=1.0                 ... in slow dim, often first tracl or xmin	\n"
d31 22
d90 1
d92 1
d94 14
a107 5
		if (tr.dt) {  /* is dt field set? */
			d1 = tr.dt / 1000000.0;
		} else {		/* dt not set, assume 4 ms */
			d1 = 0.004;
			warn("tr.dt not set, assuming dt=%g", d1);
d110 19
a128 2
	if (!getparfloat("d2", &d2)) d2 = 1.0; /* default count by traces */
	if (!getparfloat("f1", &f1)) f1 = tr.delrt/1000.0;
@


1.2
log
@honor user's style getpar
@
text
@d1 1
a1 1
/* SUXGRAPH: $Revision: 1.1 $ ; $Date: 91/06/26 10:36:52 $		*/
d20 1
a20 1
string sdoc =
d60 1
a60 1
	string style;		/* xgraph style parameter		*/
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/* SUXGRAPH: $Revision: 1.3 $ ; $Date: 90/11/20 16:19:13 $		*/
d32 2
d60 1
d83 1
d103 1
a103 1
			   nt, ntr, d1, f1, "seismic");
@
