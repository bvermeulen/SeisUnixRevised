head	1.10;
access;
symbols;
locks; strict;
comment	@ * @;


1.10
date	2011.11.12.00.45.18;	author john;	state Exp;
branches;
next	1.9;

1.9
date	2007.09.20.21.07.43;	author john;	state Exp;
branches;
next	1.8;

1.8
date	2007.09.20.21.06.50;	author john;	state Exp;
branches;
next	1.7;

1.7
date	2003.08.20.18.26.36;	author john;	state Exp;
branches;
next	1.6;

1.6
date	97.10.23.21.43.45;	author john;	state Exp;
branches;
next	1.5;

1.5
date	96.09.17.15.36.59;	author jkc;	state Exp;
branches;
next	1.4;

1.4
date	96.09.17.15.35.36;	author jkc;	state Exp;
branches;
next	1.3;

1.3
date	96.09.16.20.07.19;	author jkc;	state Exp;
branches;
next	1.2;

1.2
date	96.09.10.15.29.12;	author john;	state Exp;
branches;
next	1.1;

1.1
date	96.09.10.15.21.34;	author john;	state Exp;
branches;
next	;


desc
@suxcontour --- SU jacket for xcontour
@


1.10
log
@copyright
@
text
@/* Copyright (c) Colorado School of Mines, 2011.*/
/* All rights reserved.                       */

/* SUXCONTOUR: $Revision: 1.9 $ ; $Date: 2007/09/20 21:07:43 $		*/

#include "su.h"
#include "segy.h"
#include <signal.h>

/*********************** self documentation *****************************/
char *sdoc[] = {
"									",
" SUXCONTOUR - X CONTOUR plot of Seismic UNIX tracefile via vector plot call",
"									",
" suxwigb <stdin [optional parameters] | ...				",
"									",
" Optional parameters:						 	",
" key=(keyword)		if set, the values of x2 are set from header field",
"			specified by keyword				",
" n2=tr.ntr or number of traces in the data set	(ntr is an alias for n2)",
" d1=tr.d1 or tr.dt/10^6	sampling interval in the fast dimension	",
"   =.004 for seismic 		(if not set)				",
"   =1.0 for nonseismic		(if not set)				",
" d2=tr.d2			sampling interval in the slow dimension	",
"   =1.0 			(if not set)				",
" f1=tr.f1 or tr.delrt/10^3 or 0.0  first sample in the fast dimension	",
" f2=tr.f2 or tr.tracr or tr.tracl  first sample in the slow dimension	",
"   =1.0 for seismic		    (if not set)			",
"   =d2 for nonseismic		    (if not set)			",
"									",
" verbose=0              =1 to print some useful information		",
"									",
" tmpdir=	 	if non-empty, use the value as a directory path	",
"		 	prefix for storing temporary files; else if the	",
"	         	the CWP_TMPDIR environment variable is set use	",
"	         	its value for the path; else use tmpfile()	",
" 									",
" Note that for seismic time domain data, the \"fast dimension\" is	",
" time and the \"slow dimension\" is usually trace number or range.	",
" Also note that \"foreign\" data tapes may have something unexpected	",
" in the d2,f2 fields, use segyclean to clear these if you can afford	",
" the processing time or use d2= f2= to override the header values if	",
" not.									",
"									",
" If key=keyword is set, then the values of x2 are taken from the header",
" field represented by the keyword (for example key=offset, will show   ",
" traces in true offset). This permit unequally spaced traces to be plotted.",
" Type   sukeyword -o   to see the complete list of SU keywords.	",
"								       ",
" This program is really just a wrapper for the plotting program: xcontour",
" See the xcontour selfdoc for the remaining parameters.		",
"									",
NULL};

/*
 * Credits:
 *
 *	CWP: Dave Hale and Zhiming Li (xwigb, etc.)
 *	   Jack Cohen and John Stockwell (suxwigb, etc.)
 *      Delphi: Alexander Koek, added support for irregularly spaced traces
 *      Aarhus University: Morten W. Pedersen copied everything from the xwigb
 *                         source and just replaced all occurencies of the word
 *                         xwigb with xcountour ;-)
 *
 * Notes:
 *	When the number of traces isn't known, we need to count
 *	the traces for xcontour.  You can make this value "known"
 *	either by getparring n2 or by having the ntr field set
 *	in the trace header.  A getparred value takes precedence
 *	over the value in the trace header.
 *
 *	When we must compute ntr, we don't allocate a 2-d array,
 *	but just content ourselves with copying trace by trace from
 *	the data "file" to the pipe into the plotting program.
 *	Although we could use tr.data, we allocate a trace buffer
 *	for code clarity.
 */
/**************** end self doc *******************************************/

static void closefiles(void);

/* Globals (so can trap signal) defining temporary disk files	*/
char tracefile[BUFSIZ];	/* filename for trace storage file	*/
FILE *tracefp;		/* fp for trace storage file		*/
char x2file[BUFSIZ];	/* filename for positions file		*/
FILE *x2fp;		/* fp for positions file		*/

segy tr;

int
main(int argc, char **argv)
{
	char *plotcmd;		/* build xcontour command for popen	*/
	float *trbuf;		/* trace buffer				*/
	FILE *plotfp;		/* fp for plot data			*/
	int nt;			/* number of samples on trace	  	*/
	int ntr;		/* number of traces			*/
	int verbose;		/* verbose flag				*/
	float d1;		/* time/depth sample rate		*/
	float d2;		/* trace/dx sample rate			*/
	float f1;		/* tmin/zmin			   	*/
	float f2;		/* tracemin/xmin			*/
	cwp_Bool seismic;	/* is this seismic data?		*/
	cwp_Bool have_ntr=cwp_false;/* is ntr known from header or user?	*/
	char *tmpdir;		/* directory path for tmp files		*/
	cwp_Bool istmpdir=cwp_false;/* true for user given path		*/

	char *cwproot;		/* value of CWPROOT environment variable*/
	char *bindir;		/* directory path for tmp files		*/

	/* Support for irregularly spaced data */
	cwp_String key;		/* header key word with x2 information  */
	cwp_String type=NULL;	/* ... its type			 	*/
	int index=0;		/* ... its index			*/
	cwp_Bool irregular=cwp_false;  /* if true, reading x2 from header   */
	cwp_String x2string;    /* string of x2 values			*/
	off_t x2len;		/* ... its length			*/
	Value val;		/* value of key				*/


	/* Initialize */
	initargs(argc, argv);
	requestdoc(1);

	/* Get info from first trace */
	if (!gettr(&tr)) err("can't get first trace");
	seismic = ISSEISMIC(tr.trid);
	nt = tr.ns;
	ntr = tr.ntr;
	if (ntr) have_ntr = cwp_true;

	if (!getparint("verbose", &verbose))    verbose=0;
	if (!getparfloat("d1", &d1)) {
		if      (tr.d1)  d1 = tr.d1;
		else if (tr.dt)  d1 = ((double) tr.dt)/1000000.0;
		else {
			if (seismic) {
				d1 = 0.004;
				warn("tr.dt not set, assuming dt=0.004");
			} else { /* non-seismic data */
				d1 = 1.0;
				warn("tr.d1 not set, assuming d1=1.0");
			}
		}
	}

	/* Get or set ntr */
	if (getparint("n2", &ntr) || getparint("ntr", &ntr)) have_ntr = cwp_true;
	if (!getparfloat("d2", &d2)) d2 = (tr.d2) ? tr.d2 : 1.0;

	if (!getparfloat("f1", &f1)) {
		if      (tr.f1)     f1 = tr.f1;
		else if (tr.delrt)  f1 = (float) tr.delrt/1000.0;
		else		f1 = 0.0;
	}

	if (!getparfloat("f2", &f2)) {
		if	(tr.f2)	f2 = tr.f2;
		else if (tr.tracr)  f2 = (float) tr.tracr;
		else if (tr.tracl)  f2 = (float) tr.tracl;
		else if (seismic)   f2 = 1.0;
		else		f2 = 0.0;
	}


	if (getparstring("key", &key)) {
		type = hdtype(key);
		index = getindex(key);
		if ( (index = getindex(key)) == -1 )
			err("%s: keyword not in segy.h: '%s'", __FILE__, key);

		irregular = cwp_true;
	}


	/* Look for user-supplied tmpdir */
	if (!getparstring("tmpdir",&tmpdir) &&
	    !(tmpdir = getenv("CWP_TMPDIR"))) tmpdir="";
	if (!STREQ(tmpdir, "") && access(tmpdir, WRITE_OK))
		err("you can't write in %s (or it doesn't exist)", tmpdir);

	/* See if CWPBIN environment variable is not set */
	if (!(bindir = getenv("CWPBIN"))) { /* construct bindir from CWPROOT */

		bindir = (char *) emalloc(BUFSIZ);

		/* Get value of CWPROOT environment variable */
		if (!(cwproot = getenv("CWPROOT"))) cwproot ="" ;
		if (STREQ(cwproot, "")) {
			warn("CWPROOT environment variable is not set! ");
			err("Set CWPROOT in shell environment as per instructions in CWP/SU Installation README files");
		}
		/* then bindir = $CWPROOT/bin */
		sprintf(bindir, "%s/bin", cwproot);
	}
	strcat(bindir,"/");   /* put / at the end of bindir */

	/* Allocate trace buffer */
	trbuf = ealloc1float(nt);


	if (!have_ntr || irregular) { /* count traces */

		if (verbose) {
	       		if (irregular) {
				warn("trace spacing from header field %s",key);
				warn("... getting positions");
			} else {
				warn("n2 not getparred and ntr header field"
				     " not set");
				warn("....  counting traces");
			}
		}

		/* Create temporary "file" to hold data */
		if (STREQ(tmpdir,"")) {
			tracefp = etmpfile();
			if (irregular) x2fp = etmpfile();
			if (verbose) warn("using tmpfile() call");
		} else { /* user-supplied tmpdir */
			char directory[BUFSIZ];
			strcpy(directory, tmpdir);
			strcpy(tracefile, temporary_filename(directory));
			strcpy(x2file, temporary_filename(directory));
			/* Handle user interrupts */
			signal(SIGINT, (void (*) (int)) closefiles);
			signal(SIGQUIT, (void (*) (int)) closefiles);
			signal(SIGHUP,  (void (*) (int)) closefiles);
			signal(SIGTERM, (void (*) (int)) closefiles);
			tracefp = efopen(tracefile, "w+");
			if (irregular) x2fp = efopen(x2file, "w+");
			istmpdir=cwp_true;
			if (verbose)
			      warn("putting temporary files in %s", directory);
		}


		/* Loop over input data and read to temporary file */
		ntr = 0;
		if(irregular ) {
			float xmin=FLT_MAX,xmax=-FLT_MAX;

			fprintf(x2fp,"x2=");
			do {
				if(ntr) fprintf(x2fp,",");
				++ntr;
				gethval(&tr,index,&val);
				fprintfval(x2fp,type,val);
				xmin = MIN(xmin,vtof(type,val));
				xmax = MAX(xmax,vtof(type,val));
				efwrite(tr.data, FSIZE, nt, tracefp);
			} while (gettr(&tr));

			if(xmin==xmax) {
				warn("values in header %s all equal,",key);
				warn("using f2=%f d2=%f",f2,d2);
				irregular=cwp_false;
				have_ntr=cwp_false;
				efclose(x2fp);
			}

		} else {

			do {
				++ntr;
				efwrite(tr.data, FSIZE, nt, tracefp);
			} while (gettr(&tr));

		}

	}

	/* Set up xcontour command line */
	if (irregular ) {
		x2len = (off_t) eftell( x2fp );
		x2string = (char *) emalloc( ++x2len );
		rewind(x2fp);
		fread(x2string,sizeof(char),x2len,x2fp);
		plotcmd = (char *) emalloc(x2len+BUFSIZ);
/* suxcontour.c:281: warning: unsigned int format, pointer arg (arg 1) */
		sprintf(plotcmd, "%sxcontour n1=%d d1=%f f1=%f %s", bindir,
			   nt, d1, f1, x2string);
		free(x2string);
	} else {
		plotcmd = (char *) emalloc(BUFSIZ);
		sprintf(plotcmd,
			"%sxcontour n1=%d n2=%d d1=%f d2=%f f1=%f f2=%f", bindir,
			   nt, ntr, d1, d2, f1, f2);
	}


	for (--argc, ++argv; argc; --argc, ++argv) {
		if (strncmp(*argv, "d1=", 3) && /* skip those already set */
		    strncmp(*argv, "d2=", 3) &&
		    strncmp(*argv, "f1=", 3) &&
		    strncmp(*argv, "f2=", 3)) {

			strcat(plotcmd, " ");   /* put a space between args */
			strcat(plotcmd, "\"");  /* user quotes are stripped */
			strcat(plotcmd, *argv); /* add the arg */
			strcat(plotcmd, "\"");  /* user quotes are stripped */
		}
	}


	/* Open pipe to xcontour and send the traces */
	plotfp = epopen(plotcmd, "w");
	free(plotcmd);


	if (!have_ntr || irregular) { /* send out stored traces one by one */
		rewind(tracefp);
		{ register int itr;
			for (itr = 0; itr < ntr; ++itr) {
				efread (trbuf, FSIZE, nt, tracefp);
				efwrite(trbuf, FSIZE, nt, plotfp);
			}
		}
	} else { /* just pump out traces and let xcontour do the work */
		do {
			efwrite(tr.data, FSIZE, nt, plotfp);
		} while (gettr(&tr));
	}


	/* Clean up */
	epclose(plotfp);
	if (!have_ntr) {
		efclose(tracefp);
		if (istmpdir) eremove(tracefile);
	}
	if (irregular) {
		efclose(x2fp);
		if (istmpdir) eremove(x2file);
	}

	return EXIT_SUCCESS;
}

/* for graceful interrupt termination */
static void closefiles(void)
{
	efclose(tracefp);
	eremove(tracefile);
	efclose(x2fp);
	eremove(x2file);
	exit(EXIT_FAILURE);
}
@


1.9
log
@ changed bindir from %s to %x
@
text
@d1 4
a4 1
/* SUXCONTOUR: $Revision: 36.2 $ ; $Date: 2003/08/05 22:24:47 $		*/
@


1.8
log
@int to off_t
@
text
@d52 1
a52 1
/* 
d121 1
a121 1
	
d124 1
a124 1
	seismic = ISSEISMIC(tr.trid); 
d127 1
a127 1
	if (ntr) have_ntr = cwp_true; 
d229 1
a229 1
			istmpdir=cwp_true;		
d268 1
a268 1
	} 
d277 2
a278 1
		sprintf(plotcmd, "%xcontour n1=%d d1=%f f1=%f %s", bindir,
d294 1
a294 1
		    
d306 1
a306 1
	
@


1.7
log
@20 August 2003
@
text
@d1 1
a1 1
/* SUXCONTOUR: $Revision: 1.6 $ ; $Date: 1997/10/23 21:43:45 $		*/
d114 1
a114 1
	int x2len;		/* ... its length			*/
d272 1
a272 1
		x2len = (int) ftell( x2fp );
@


1.6
log
@cwp_true and other Stew Levin fixes
@
text
@d1 1
a1 1
/* SUXCONTOUR: $Revision: 1.5 $ ; $Date: 1996/09/17 15:36:59 $		*/
d105 3
d179 16
d277 1
a277 1
		sprintf(plotcmd, "xcontour n1=%d d1=%f f1=%f %s",
d283 1
a283 1
			"xcontour n1=%d n2=%d d1=%f d2=%f f1=%f f2=%f",
a285 1

@


1.5
log
@Cosmetic
@
text
@d1 1
a1 1
/* SUXCONTOUR: $Revision: 1.4 $ ; $Date: 1996/09/17 15:35:36 $		*/
d101 1
a101 1
	cwp_Bool have_ntr=false;/* is ntr known from header or user?	*/
d103 1
a103 1
	cwp_Bool istmpdir=false;/* true for user given path		*/
d109 1
a109 1
	cwp_Bool irregular=false;  /* if true, reading x2 from header   */
d124 1
a124 1
	if (ntr) have_ntr = true; 
d142 1
a142 1
	if (getparint("n2", &ntr) || getparint("ntr", &ntr)) have_ntr = true;
d166 1
a166 1
		irregular = true;
d210 1
a210 1
			istmpdir=true;		
d235 2
a236 2
				irregular=false;
				have_ntr=false;
@


1.4
log
@Removed superfluous comments on tmpfile().
@
text
@d1 1
a1 1
/* SUXCONTOUR: $Revision: 1.3 $ ; $Date: 1996/09/16 20:07:19 $		*/
d87 2
a88 1
int main(int argc, char **argv)
@


1.3
log
@tmpfile stuff
@
text
@d1 1
a1 1
/* SUXCONTOUR: $Revision: 1.2 $ ; $Date: 1996/09/10 15:29:12 $		*/
d48 1
a48 1
" See the xcontour selfdoc for the remaining parameters.			",
a67 10
 *
 *	When we do have to count the traces, we use the "tmpfile"
 *	routine because on many machines it is implemented
 *	as a memory area instead of a disk file.
 *
 *	If your system does make a disk file, consider altering
 *	the code to remove the file on interrupt.  This could be
 *	done either by trapping the interrupt with "signal"
 *	or by using the "tmpnam" routine followed by an immediate
 *	"remove" (aka "unlink" in old unix).
@


1.2
log
@silenced -Wall messages
@
text
@d1 1
a1 1
/* SUXCONTOUR: $Revision: 1.1 $ ; $Date: 1996/09/10 15:21:34 $		*/
d5 1
d10 1
a10 1
" SUXCONTOUR - X CONTOUR plot of Seismic UNIX datafile via vector plot call",
d30 5
d87 7
a100 1
	FILE *datafp=NULL;	/* fp for trace data file 		*/
d111 2
a114 1
	FILE *x2fp=NULL;	/* fp for positions file		*/
d179 6
d203 20
a222 2
		datafp = etmpfile();
		if(irregular) x2fp = etmpfile();
d238 1
a238 1
				efwrite(tr.data, FSIZE, nt, datafp);
d253 1
a253 1
				efwrite(tr.data, FSIZE, nt, datafp);
d299 1
a299 1
		rewind(datafp);
d302 1
a302 1
				efread (trbuf, FSIZE, nt, datafp);
d315 8
a322 2
	if (!have_ntr) efclose(datafp);
	if (irregular) efclose(x2fp);
d325 10
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/* SUXCONTOUR: $Revision: 1.24 $ ; $Date: 1995/12/14 22:44:13 $		*/
d88 1
a88 1
	FILE *datafp;		/* fp for trace data file 		*/
d101 1
a101 1
	FILE *x2fp;		/* fp for positions file		*/
d103 2
a104 2
	cwp_String type;	/* ... its type			 	*/
	int index;		/* ... its index			*/
@
