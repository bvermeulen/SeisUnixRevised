head	1.38;
access;
symbols;
locks; strict;
comment	@ * @;


1.38
date	2011.11.12.00.45.18;	author john;	state Exp;
branches;
next	1.37;

1.37
date	2007.09.20.21.12.54;	author john;	state Exp;
branches;
next	1.36;

1.36
date	2007.09.20.21.09.50;	author john;	state Exp;
branches;
next	1.35;

1.35
date	2003.08.20.18.26.36;	author john;	state Exp;
branches;
next	1.34;

1.34
date	98.08.24.20.01.28;	author john;	state Exp;
branches;
next	1.33;

1.33
date	97.10.23.21.43.45;	author john;	state Exp;
branches;
next	1.32;

1.32
date	96.09.16.20.09.32;	author jkc;	state Exp;
branches;
next	1.31;

1.31
date	96.09.10.15.29.12;	author john;	state Exp;
branches;
next	1.30;

1.30
date	96.08.11.21.04.26;	author jkc;	state Exp;
branches;
next	1.29;

1.29
date	96.08.11.20.07.55;	author jkc;	state Exp;
branches;
next	1.28;

1.28
date	96.08.02.22.35.48;	author jkc;	state Exp;
branches;
next	1.27;

1.27
date	96.07.08.19.02.40;	author jkc;	state Exp;
branches;
next	1.26;

1.26
date	96.07.03.19.54.05;	author jkc;	state Exp;
branches;
next	1.25;

1.25
date	96.07.03.17.51.32;	author jkc;	state Exp;
branches;
next	1.24;

1.24
date	95.12.14.22.44.13;	author jkc;	state Exp;
branches;
next	1.23;

1.23
date	95.12.08.16.19.38;	author john;	state Exp;
branches;
next	1.22;

1.22
date	95.10.03.19.35.22;	author jkc;	state Exp;
branches;
next	1.21;

1.21
date	95.10.03.15.26.45;	author jkc;	state Exp;
branches;
next	1.20;

1.20
date	95.02.28.13.10.57;	author jkc;	state Exp;
branches;
next	1.19;

1.19
date	95.02.21.14.56.18;	author jkc;	state Exp;
branches;
next	1.18;

1.18
date	95.01.19.12.14.34;	author john;	state Exp;
branches;
next	1.17;

1.17
date	95.01.19.11.37.54;	author john;	state Exp;
branches;
next	1.16;

1.16
date	94.12.05.09.55.01;	author john;	state Exp;
branches;
next	1.15;

1.15
date	94.11.28.15.46.21;	author john;	state Exp;
branches;
next	1.14;

1.14
date	94.03.30.14.01.42;	author john;	state Exp;
branches;
next	1.13;

1.13
date	93.09.14.13.23.58;	author jkc;	state Exp;
branches;
next	1.12;

1.12
date	93.09.11.08.06.13;	author john;	state Exp;
branches;
next	1.11;

1.11
date	92.10.26.15.17.37;	author john;	state Exp;
branches;
next	1.10;

1.10
date	91.09.06.08.30.39;	author jkcohen;	state Exp;
branches;
next	1.9;

1.9
date	91.03.05.15.19.02;	author jkcohen;	state Exp;
branches;
next	1.8;

1.8
date	91.03.03.13.49.37;	author jkc;	state Exp;
branches;
next	1.7;

1.7
date	91.02.22.15.13.09;	author jkcohen;	state Exp;
branches;
next	1.6;

1.6
date	91.02.14.10.27.50;	author jkcohen;	state Exp;
branches;
next	1.5;

1.5
date	90.11.05.19.58.52;	author jkc;	state Exp;
branches;
next	1.4;

1.4
date	90.11.03.14.40.40;	author jkc;	state Exp;
branches;
next	1.3;

1.3
date	90.11.02.09.35.02;	author jkc;	state Exp;
branches;
next	1.2;

1.2
date	90.09.13.10.24.15;	author jkc;	state Exp;
branches;
next	1.1;

1.1
date	90.09.13.09.50.34;	author jkc;	state Exp;
branches;
next	;


desc
@xwigb with SU wrapper
@


1.38
log
@copyright
@
text
@/* Copyright (c) Colorado School of Mines, 2011.*/
/* All rights reserved.                       */

/* SUXWIGB: $Revision: 1.37 $ ; $Date: 2007/09/20 21:12:54 $		*/

#include "su.h"
#include "segy.h"
#include <signal.h>

/*********************** self documentation *****************************/
char *sdoc[] = {
"									",
" SUXWIGB - X-windows Bit-mapped WIGgle plot of a segy data set		",
" This is a modified suxwigb that uses the depth or coordinate scaling	",
" when such values are used as keys.					",
"									",
" suxwigb <stdin [optional parameters] | ...				",
"									",
" Optional parameters:							",
" key=(keyword)		if set, the values of x2 are set from header field",
"			specified by keyword				",
" n2=tr.ntr or number of traces in the data set (ntr is an alias for n2)",
" d1=tr.d1 or tr.dt/10^6	sampling interval in the fast dimension ",
"   =.004 for seismic		(if not set)				",
"   =1.0 for nonseismic		(if not set)				",
" d2=tr.d2			sampling interval in the slow dimension ",
"   =1.0			(if not set)				",
" f1=tr.f1 or tr.delrt/10^3 or 0.0  first sample in the fast dimension	",
" f2=tr.f2 or tr.tracr or tr.tracl  first sample in the slow dimension	",
"   =1.0 for seismic		    (if not set)			",
"   =d2 for nonseismic		    (if not set)			",
"									",
" style=seismic		 normal (axis 1 horizontal, axis 2 vertical) or ",
"			 vsp (same as normal with axis 2 reversed)	",
"			 Note: vsp requires use of a keyword		",
" verbose=0              =1 to print some useful information		",
"									",
"									",
" tmpdir=	 	if non-empty, use the value as a directory path	",
"		 	prefix for storing temporary files; else if the	",
"	         	the CWP_TMPDIR environment variable is set use	",
"	         	its value for the path; else use tmpfile()	",
" 									",
" Note that for seismic time domain data, the \"fast dimension\" is	",
" time and the \"slow dimension\" is usually trace number or range.	",
" Also note that \"foreign\" data tapes may have something unexpected	",
" in the d2,f2 fields, use segyclean to clear these if you can afford	",
" the processing time or use d2= f2= to override the header values if	",
" not.									",
"									",
" If key=keyword is set, then the values of x2 are taken from the header",
" field represented by the keyword (for example key=offset, will show	",
" traces in true offset). This permit unequally spaced traces to be plotted.",
" Type	 sukeyword -o	to see the complete list of SU keywords.	",
"								       	",
" This program is really just a wrapper for the plotting program: xwigb	",
" See the xwigb selfdoc for the remaining parameters.			",
"									",
NULL};

/* Credits:
 *
 *	CWP: Dave Hale and Zhiming Li (xwigb, etc.)
 *	   Jack Cohen and John Stockwell (suxwigb, etc.)
 *	Delphi: Alexander Koek, added support for irregularly spaced traces
 *
 *	Modified by Brian Zook, Southwest Research Institute, to honor
 *	 scale factors, added vsp style
 *
 * Notes:
 *	When the number of traces isn't known, we need to count
 *	the traces for xwigb.  You can make this value "known"
 *	either by getparring n2 or by having the ntr field set
 *	in the trace header.  A getparred value takes precedence
 *	over the value in the trace header.
 *
 *	When we must compute ntr, we don't allocate a 2-d array,
 *	but just content ourselves with copying trace by trace from
 *	the data "file" to the pipe into the plotting program.
 *	Although we could use tr.data, we allocate a trace buffer
 *	for code clarity.
 */
/**************** end self doc *******************************************/

static void closefiles(void);

/* Globals (so can trap signal) defining temporary disk files	*/
char tracefile[BUFSIZ];	/* filename for trace storage file	*/
char x2file[BUFSIZ];	/* filename for positions file		*/
FILE *tracefp;		/* fp for trace storage file		*/
FILE *x2fp;		/* fp for positions file		*/

segy tr;

int
main(int argc, char **argv)
{
	char *plotcmd;		/* build xwigb command for popen	*/
	float *trbuf;		/* trace buffer				*/
	FILE *plotfp;		/* fp for plot data			*/
	int nt;			/* number of samples on trace		*/
	int ntr;		/* number of traces			*/
	int verbose;		/* verbose flag				*/
	float d1;		/* time/depth sample rate		*/
	float d2;		/* trace/dx sample rate			*/
	float f1;		/* tmin/zmin				*/
	float f2;		/* tracemin/xmin			*/
	cwp_Bool seismic;	/* is this seismic data?		*/
	cwp_Bool have_ntr=cwp_false;/* is ntr known from header or user?	*/
	char *tmpdir;		/* directory path for tmp files		*/
	cwp_Bool istmpdir=cwp_false;/* true for user given path		*/

	char *cwproot;		/* value of CWPROOT environment variable*/
/* suxwigb.c:114: warning: unused variable `bindir' */
/*	char *bindir;	*/	/* directory path for tmp files		*/

	/* Support for irregularly spaced data */
	cwp_String key;		/* header key word with x2 information	*/
	cwp_String type1=NULL;	/* ... its type				*/
	int index1=0;		/* ... its index			*/
	Value val;		/* value of key				*/
	Value scale;		/* Value of scaler			*/
	cwp_String type2=NULL;	/* ... its type				*/
	int index2=0;		/* ... its index			*/
	cwp_Bool isDepth=cwp_false;	/* Is this key a type of depth?		*/
	cwp_Bool isCoord=cwp_false;	/* Is this key a type of coordinate?	*/
	cwp_Bool irregular=cwp_false;  /* if true, reading x2 from header	*/
	cwp_String x2string;	/* string of x2 values			*/
	off_t x2len;		/* ... its length			*/
	cwp_String style;	/* style parameter			*/


	/* Initialize */
	initargs(argc, argv);
	requestdoc(1);

	/* Get info from first trace */
	if (!gettr(&tr)) err("can't get first trace");
	seismic = ISSEISMIC(tr.trid);
	nt = tr.ns;
	ntr = tr.ntr;
	if (ntr) have_ntr = cwp_true;

	if (!getparint("verbose", &verbose))	verbose=0;
	if (!getparfloat("d1", &d1)) {
		if	(tr.d1)	 d1 = tr.d1;
		else if (tr.dt)	 d1 = ((double) tr.dt)/1000000.0;
		else {
			if (seismic) {
				d1 = 0.004;
				warn("tr.dt not set, assuming dt=0.004");
			} else { /* non-seismic data */
				d1 = 1.0;
				warn("tr.d1 not set, assuming d1=1.0");
			}
		}
	}

	/* Get or set ntr */
	if (getparint("n2", &ntr) || getparint("ntr", &ntr)) have_ntr = cwp_true;
	if (!getparfloat("d2", &d2)) d2 = (tr.d2) ? tr.d2 : 1.0;

	if (!getparfloat("f1", &f1)) {
		if	(tr.f1)	    f1 = tr.f1;
		else if (tr.delrt)  f1 = (float) tr.delrt/1000.0;
		else		f1 = 0.0;
	}

	if (!getparfloat("f2", &f2)) {
		if	(tr.f2) f2 = tr.f2;
		else if (tr.tracr)  f2 = (float) tr.tracr;
		else if (tr.tracl)  f2 = (float) tr.tracl;
		else if (seismic)   f2 = 1.0;
		else		f2 = 0.0;
	}

	if (!getparstring("style", &style)) style = "seismic";

	if (getparstring("key", &key)) {
		type1 = hdtype(key);
		if ( (index1 = getindex(key)) == -1 )
			err("%s: keyword not in segy.h: '%s'", __FILE__, key);
		irregular = cwp_true;
		isDepth = IS_DEPTH(key);
		isCoord = IS_COORD(key);
		if (isDepth) {
		   index2 = getindex("scalel");
		   type2 = hdtype("scalel");
		} else if (isCoord) {
		   index2 = getindex("scalco");
		   type2 = hdtype("scalco");
		}
	}

	/* Look for user-supplied tmpdir */
	if (!getparstring("tmpdir",&tmpdir) &&
	    !(tmpdir = getenv("CWP_TMPDIR"))) tmpdir="";
	if (!STREQ(tmpdir, "") && access(tmpdir, WRITE_OK))
		err("you can't write in %s (or it doesn't exist)", tmpdir);

	/* Get value of CWPROOT environment variable */
	if (!(cwproot = getenv("CWPROOT"))) cwproot ="" ;
	if (STREQ(cwproot, "")) {
		warn("CWPROOT environment variable is not set! ");
		err("Set CWPROOT in shell environment as per instructions in CWP/SU Installation README files");
	}

	/* Allocate trace buffer */
	trbuf = ealloc1float(nt);


	if (!have_ntr || irregular) { /* count traces */

		if (verbose) {
			if (irregular) {
				warn("trace spacing from header field %s",key);
				warn("... getting positions");
			} else {
				warn("n2 not getparred and ntr header field"
				     " not set");
				warn("....  counting traces");
			}
		}

		/* Create temporary "file" to hold data */
		if (STREQ(tmpdir,"")) {
			tracefp = etmpfile();
			if (irregular) x2fp = etmpfile();
			if (verbose) warn("using tmpfile() call");
		} else { /* user-supplied tmpdir */
			char directory[BUFSIZ];
			strcpy(directory, tmpdir);
			strcpy(tracefile, temporary_filename(directory));
			strcpy(x2file, temporary_filename(directory));
			/* Handle user interrupts */
			signal(SIGINT, (void (*) (int)) closefiles);
			signal(SIGQUIT, (void (*) (int)) closefiles);
			signal(SIGHUP,  (void (*) (int)) closefiles);
			signal(SIGTERM, (void (*) (int)) closefiles);
			tracefp = efopen(tracefile, "w+");
			if (irregular) x2fp = efopen(x2file, "w+");
			istmpdir=cwp_true;
			if (verbose)
			      warn("putting temporary files in %s", directory);
		}

		/* Loop over input data and read to temporary file */
		ntr = 0;
		if(irregular ) {
		     float x,xmin=FLT_MAX,xmax=-FLT_MAX;

		     fprintf(x2fp,"x2=");
		     do {
			if(ntr) fprintf(x2fp,",");
			++ntr;
			gethval(&tr,index1,&val);
			if (isDepth || isCoord) {
			   gethval(&tr,index2,&scale);
			   x = (float) (vtod(type1,val) *
				 pow(10.0,vtod(type2,scale)));
			} else
			   x = vtof(type1,val);
			fprintf(x2fp,"%g",x);
			xmin = MIN(xmin,x);
			xmax = MAX(xmax,x);
			if (isDepth && STREQ(style,"vsp")) {
				int i;
				for (i = 0; i < nt; ++i) tr.data[i] *= -1.0;
			}
			efwrite(tr.data, FSIZE, nt, tracefp);
		     } while (gettr(&tr));

		     /* Flip vertical axis if style = vsp */
		     if (isDepth && STREQ(style,"vsp")) {
			fprintf(x2fp," x2beg=%g x2end=%g",xmax,xmin);
			style = "normal";
		     }

		     if(xmin==xmax) {
			warn("values in header %s all equal,",key);
			warn("using f2=%f d2=%f",f2,d2);
			irregular=cwp_false;
			have_ntr=cwp_false;
			efclose(x2fp);
			if (istmpdir) eremove(x2file);
		     }

		} else {

			do {
				++ntr;
				efwrite(tr.data, FSIZE, nt, tracefp);
			} while (gettr(&tr));
			/* Save naive user */
			if (STREQ(style,"vsp")) {
				style = "normal";
				warn("style=vsp requires key= to be set");
			}
		}

	}

	/* Set up xwigb command line */
	if (irregular ) {
		if (STREQ(style,"vsp")) {
			style = "normal";
		}
		x2len = (off_t) eftell( x2fp );
		x2string = (char *) emalloc( ++x2len );
		rewind(x2fp);
		fread(x2string,sizeof(char),x2len,x2fp);
		plotcmd = (char *) emalloc(x2len+BUFSIZ);
		sprintf(plotcmd, "%s/bin/xwigb n1=%d d1=%f f1=%f %s style=%s", cwproot,
			   nt, d1, f1, x2string, style);
		free(x2string);
	} else {
		if (STREQ(style,"vsp")) {
			style = "normal";
		}
		plotcmd = (char *) emalloc(BUFSIZ);
		sprintf(plotcmd,
			"xwigb n1=%d n2=%d d1=%f d2=%f f1=%f f2=%f style=%s",
			   nt, ntr, d1, d2, f1, f2, style);
	}



	for (--argc, ++argv; argc; --argc, ++argv) {
		if (strncmp(*argv, "d1=", 3) && /* skip those already set */
		    strncmp(*argv, "d2=", 3) &&
		    strncmp(*argv, "f1=", 3) &&
		    strncmp(*argv, "f2=", 3) &&
		    strncmp(*argv, "style=", 6)){

			strcat(plotcmd, " ");	/* put a space between args */
			strcat(plotcmd, "\"");	/* user quotes are stripped */
			strcat(plotcmd, *argv); /* add the arg */
			strcat(plotcmd, "\"");	/* user quotes are stripped */
		}
	}


	/* Open pipe to xwigb and send the traces */
	plotfp = epopen(plotcmd, "w");
	free(plotcmd);


	if (!have_ntr || irregular) { /* send out stored traces one by one */
		rewind(tracefp);
		{ register int itr;
			for (itr = 0; itr < ntr; ++itr) {
				efread (trbuf, FSIZE, nt, tracefp);
				efwrite(trbuf, FSIZE, nt, plotfp);
			}
		}
	} else { /* just pump out traces and let xwigb do the work */
		do {
			efwrite(tr.data, FSIZE, nt, plotfp);
		} while (gettr(&tr));
	}


	/* Clean up */
	epclose(plotfp);
	if (!have_ntr) {
		efclose(tracefp);
		if (istmpdir) eremove(tracefile);
	}
	if (irregular) {
		efclose(x2fp);
		if (istmpdir) eremove(x2file);
	}

	return EXIT_SUCCESS;
}


/* for graceful interrupt termination */
static void closefiles(void)
{
	efclose(tracefp);
	eremove(tracefile);
	efclose(x2fp);
	eremove(x2file);
	exit(EXIT_FAILURE);
}
@


1.37
log
@declaration of bindir commented out as not used.
@
text
@d1 4
a4 1
/* SUXWIGB: $Revision: 36.2 $ ; $Date: 2003/08/05 22:24:47 $		*/
@


1.36
log
@cast of (int) to (off_t)
@
text
@d109 1
a109 1
	
d111 2
a112 1
	char *bindir;		/* directory path for tmp files		*/
d133 1
a133 1
	
d136 1
a136 1
	seismic = ISSEISMIC(tr.trid); 
d139 1
a139 1
	if (ntr) have_ntr = cwp_true; 
d175 1
a175 1
	 	
d239 1
a239 1
			istmpdir=cwp_true;		
d298 1
a298 1
	} 
d331 1
a331 1
		    
d343 1
a343 1
	
@


1.35
log
@20 August 2003
@
text
@d1 1
a1 1
/* SUXWIGB: $Revision: 1.34 $ ; $Date: 1998/08/24 20:01:28 $		*/
d125 1
a125 1
	int x2len;		/* ... its length			*/
d304 1
a304 1
		x2len = (int) ftell( x2fp );
@


1.34
log
@fixed bug with vsp setting
@
text
@d1 1
a1 1
/* SUXWIGB: $Revision: 1.33 $ ; $Date: 1997/10/23 21:43:45 $		*/
d110 3
d197 7
d309 1
a309 1
		sprintf(plotcmd, "xwigb n1=%d d1=%f f1=%f %s style=%s",
@


1.33
log
@cwp_true and other Stew Levin fixes
@
text
@d1 1
a1 1
/* SUXWIGB: $Revision: 1.32 $ ; $Date: 1996/09/16 20:09:32 $		*/
d291 3
d303 3
@


1.32
log
@Updated tmpfile handling.
@
text
@d1 1
a1 1
/* SUXWIGB: $Revision: 1.31 $ ; $Date: 1996/09/10 15:29:12 $		*/
d106 1
a106 1
	cwp_Bool have_ntr=false;/* is ntr known from header or user?	*/
d108 1
a108 1
	cwp_Bool istmpdir=false;/* true for user given path		*/
d118 3
a120 3
	cwp_Bool isDepth=false;	/* Is this key a type of depth?		*/
	cwp_Bool isCoord=false;	/* Is this key a type of coordinate?	*/
	cwp_Bool irregular=false;  /* if true, reading x2 from header	*/
d135 1
a135 1
	if (ntr) have_ntr = true; 
d153 1
a153 1
	if (getparint("n2", &ntr) || getparint("ntr", &ntr)) have_ntr = true;
d176 1
a176 1
		irregular = true;
d228 1
a228 1
			istmpdir=true;		
d268 2
a269 2
			irregular=false;
			have_ntr=false;
@


1.31
log
@silenced -Wall messages
@
text
@d1 1
a1 1
/* SUXWIGB: $Revision: 1.30 $ ; $Date: 1996/08/11 21:04:26 $		*/
d85 1
a85 1
char datafile[BUFSIZ];	/* filename for trace storage file	*/
d87 1
a87 1
FILE *datafp;		/* fp for trace storage file		*/
d213 1
a213 1
			datafp = etmpfile();
d219 1
a219 1
			strcpy(datafile, temporary_filename(directory));
d223 2
d226 1
a226 1
			datafp = efopen(datafile, "w+");
d256 1
a256 1
			efwrite(tr.data, FSIZE, nt, datafp);
d278 1
a278 1
				efwrite(tr.data, FSIZE, nt, datafp);
d329 1
a329 1
		rewind(datafp);
d332 1
a332 1
				efread (trbuf, FSIZE, nt, datafp);
d346 2
a347 2
		efclose(datafp);
		if (istmpdir) eremove(datafile);
d361 2
a362 2
	efclose(datafp);
	eremove(datafile);
d365 1
@


1.30
log
@Document verbose option.
@
text
@d1 1
a1 1
/* SUXWIGB: $Revision: 1.29 $ ; $Date: 1996/08/11 20:07:55 $		*/
d10 1
a10 1
" SUXWIGB - X-windows Bit-mapped WIGgle plot of a segy data set	",
d92 2
a93 1
int main(int argc, char **argv)
d112 2
a113 2
	cwp_String type1;	/* ... its type				*/
	int index1;		/* ... its index			*/
d116 4
a119 4
	cwp_String type2;	/* ... its type				*/
	int index2;		/* ... its index			*/
	cwp_Bool isDepth;	/* Is this key a type of depth?		*/
	cwp_Bool isCoord;	/* Is this key a type of coordinate?	*/
@


1.29
log
@Removed unistd.h to par.h.
@
text
@d1 1
a1 1
/* SUXWIGB: $Revision: 1.28 $ ; $Date: 1996/08/02 22:35:48 $		*/
d33 2
@


1.28
log
@Inserted user-supplied tmpdir stuff.
@
text
@d1 1
a1 1
/* SUXWIGB: $Revision: 1.27 $ ; $Date: 1996/07/08 19:02:40 $		*/
a5 2
#include <unistd.h>

@


1.27
log
@Got the vsp warn statement INSIDE the if statement
@
text
@d1 1
a1 1
/* SUXWIGB: $Revision: 1.26 $ ; $Date: 1996/07/03 19:54:05 $		*/
d5 2
d36 5
a73 10
 *	When we do have to count the traces, we use the "tmpfile"
 *	routine because on many machines it is implemented
 *	as a memory area instead of a disk file.
 *
 *	If your system does make a disk file, consider altering
 *	the code to remove the file on interrupt.  This could be
 *	done either by trapping the interrupt with "signal"
 *	or by using the "tmpnam" routine followed by an immediate
 *	"remove" (aka "unlink" in old unix).
 *
d82 7
a95 1
	FILE *datafp;		/* fp for trace data file		*/
d106 3
a108 1

a109 1
	FILE *x2fp;		/* fp for positions file		*/
d123 1
a123 1
	
d187 5
d211 18
a228 3
		datafp = etmpfile();
		if(irregular) x2fp = etmpfile();

d268 1
d342 8
a349 2
	if (!have_ntr) efclose(datafp);
	if (irregular) efclose(x2fp);
d352 10
@


1.26
log
@Protect against use of vsp style w/o keyword being set.
@
text
@d1 1
a1 1
/* SUXWIGB: $Revision: 1.25 $ ; $Date: 1996/07/03 17:51:32 $		*/
d253 4
a256 2
			if (STREQ(style,"vsp")) style = "normal";
			warn("style=vsp requires key= to be set");
@


1.25
log
@From Brian Zook added support for scale factors and vsp-style
plotting.
@
text
@d1 1
a1 1
/* SUXWIGB: $Revision: 1.24 $ ; $Date: 1995/12/14 22:44:13 $		*/
d32 1
d252 3
a254 1

@


1.24
log
@Cosmetics on wrapped line.
@
text
@d1 1
a1 1
/* SUXWIGB: $Revision: 1.23 $ ; $Date: 1995/12/08 16:19:38 $		*/
d6 1
d10 3
a12 1
" SUXWIGB - X-windows Bit-mapped WIGgle plot of a segy data set		",
d16 1
a16 1
" Optional parameters:						 	",
d19 3
a21 3
" n2=tr.ntr or number of traces in the data set	(ntr is an alias for n2)",
" d1=tr.d1 or tr.dt/10^6	sampling interval in the fast dimension	",
"   =.004 for seismic 		(if not set)				",
d23 2
a24 2
" d2=tr.d2			sampling interval in the slow dimension	",
"   =1.0 			(if not set)				",
d30 3
d41 1
a41 1
" field represented by the keyword (for example key=offset, will show   ",
d43 3
a45 3
" Type   sukeyword -o   to see the complete list of SU keywords.	",
"								       ",
" This program is really just a wrapper for the plotting program: xwigb",
d54 4
a57 1
 *      Delphi: Alexander Koek, added support for irregularly spaced traces
d91 1
a91 1
	FILE *datafp;		/* fp for trace data file 		*/
d93 1
a93 1
	int nt;			/* number of samples on trace	  	*/
d98 1
a98 1
	float f1;		/* tmin/zmin			   	*/
d105 11
a115 5
	cwp_String key;		/* header key word with x2 information  */
	cwp_String type;	/* ... its type			 	*/
	int index;		/* ... its index			*/
	cwp_Bool irregular=false;  /* if true, reading x2 from header   */
	cwp_String x2string;    /* string of x2 values			*/
d117 2
a118 2
	Value val;		/* value of key				*/

d131 1
a131 1
	if (!getparint("verbose", &verbose))    verbose=0;
d133 2
a134 2
		if      (tr.d1)  d1 = tr.d1;
		else if (tr.dt)  d1 = ((double) tr.dt)/1000000.0;
d151 1
a151 1
		if      (tr.f1)     f1 = tr.f1;
d157 1
a157 1
		if	(tr.f2)	f2 = tr.f2;
d164 2
a165 1

d167 2
a168 3
		type = hdtype(key);
		index = getindex(key);
		if ( (index = getindex(key)) == -1 )
a169 1

d171 9
d190 1
a190 1
	       		if (irregular) {
d208 1
a208 1
			float xmin=FLT_MAX,xmax=-FLT_MAX;
d210 20
a229 10
			fprintf(x2fp,"x2=");
			do {
				if(ntr) fprintf(x2fp,",");
				++ntr;
				gethval(&tr,index,&val);
				fprintfval(x2fp,type,val);
				xmin = MIN(xmin,vtof(type,val));
				xmax = MAX(xmax,vtof(type,val));
				efwrite(tr.data, FSIZE, nt, datafp);
			} while (gettr(&tr));
d231 13
a243 7
			if(xmin==xmax) {
				warn("values in header %s all equal,",key);
				warn("using f2=%f d2=%f",f2,d2);
				irregular=false;
				have_ntr=false;
				efclose(x2fp);
			}
d263 2
a264 2
		sprintf(plotcmd, "xwigb n1=%d d1=%f f1=%f %s",
			   nt, d1, f1, x2string);
d269 2
a270 2
			"xwigb n1=%d n2=%d d1=%f d2=%f f1=%f f2=%f",
			   nt, ntr, d1, d2, f1, f2);
d279 2
a280 1
		    strncmp(*argv, "f2=", 3)) {
d282 2
a283 2
			strcat(plotcmd, " ");   /* put a space between args */
			strcat(plotcmd, "\"");  /* user quotes are stripped */
d285 1
a285 1
			strcat(plotcmd, "\"");  /* user quotes are stripped */
@


1.23
log
@added Alexander Koek's extension to permit x2 values to be
set from a user-specified header field.
@
text
@d1 1
a1 1
/* SUXWIGB: $Revision: 1.22 $ ; $Date: 1995/10/03 19:35:22 $		*/
d171 2
a172 2

				warn("n2 not getparred and ntr header field not set");
@


1.22
log
@Cosmetic.
@
text
@d1 1
a1 1
/* SUXWIGB: $Revision: 1.21 $ ; $Date: 1995/10/03 15:26:45 $		*/
d14 2
a15 1
"									",
a16 1
" 							        	",
a19 1
" 							        	",
a21 1
" 							        	",
a22 1
" 							        	",
d34 6
a41 1
" On NeXT:	suxwigb < infile [optional parameters]  | open		",
d48 1
d78 1
a78 1
main(int argc, char **argv)
d80 1
a80 1
	char plotcmd[BUFSIZ];   /* build xwigb command for popen	*/
d94 10
d131 2
d138 1
a138 1
		else                f1 = 0.0;
d149 11
a162 2
	/* Get or set ntr */
	if (getparint("n2", &ntr) || getparint("ntr", &ntr)) have_ntr = true;
d164 2
a165 1
	if (!have_ntr) { /* count traces */
d167 8
a174 2
			warn("n2 not getparred and ntr header field not set");
			warn("....  counting traces");
d179 2
d184 28
a211 4
		do {
			++ntr;
			efwrite(tr.data, FSIZE, nt, datafp);
		} while (gettr(&tr));
d213 1
d218 13
a230 2
	sprintf(plotcmd,
		"xwigb n1=%d n2=%d d1=%f d2=%f f1=%f f2=%f",
d232 3
d252 1
d254 2
a255 1
	if (!have_ntr) { /* send out stored traces one by one */
d273 1
@


1.21
log
@Honor f1 and d1.  Converted to standard style self-doc.
@
text
@d1 1
a1 1
/* SUXWIGB: $Revision: 1.20 $ ; $Date: 1995/02/28 13:10:57 $		*/
d15 1
a15 1
" n2=tr.ntr or number of traces in the data set				",
@


1.20
log
@Modified boolean variables.
@
text
@d1 1
a1 1
/* SUXWIGB: $Revision: 1.19 $ ; $Date: 95/02/21 14:56:18 $		*/
d15 14
a28 16
" n2 is the number of traces (ntr is an acceptable alias for n2)	",
"									",
" d1 is the sampling interval in the fast dimension.  If not getparred  ",
" then for seismic time domain data d1=tr.dt/10^6 if set, else 0.004.	",
" For other types of data d1=tr.d1 if set, else 1.0			",
"									",
" d2 is the sampling interval in the slow dimension.  If not getparred  ",
" d2=tr.d2 if set, else 1.0						",
"									",
" f1 is the first sample in the fast dimension.  If not getparred	",
" then for seismic time domain data f1=tr.delrt/10^3 if set, else 0.0.  ",
" For other types of data f1=tr.d1 if set else 0.0			",
"									",
" f2 is the first sample in the slow dimension.  If not getparred	",
" f2=tr.f2 if set, else tr.tracr if set, else tr.tracl if set,		",
" else 1.0 for seismic time domain data, else 0.0			",
d105 4
a108 4
		if (seismic) {
			if (tr.dt) {
				d1 = (float) tr.dt / 1000000.0;
			} else {
d111 1
a111 5
			}
		} else { /* non-seismic data */
			if (tr.d1) {
				d1 = tr.d1;
			} else {
d121 3
a123 5
		if (seismic) {
			f1 = (tr.delrt) ? (float) tr.delrt/1000.0 : 0.0;
		} else {
			f1 = (tr.f1) ? tr.f1 : 0.0;
		}
@


1.19
log
@Modified boolean test variables.
@
text
@d1 1
a1 1
/* SUXWIGB: $Revision: 1.18 $ ; $Date: 95/01/19 12:09:21 $		*/
d91 1
a91 1
	cwp_Bool know_ntr=false;/* is ntr known from header or user?	*/
d103 1
a103 1
	if (ntr) know_ntr = true; 
d146 1
a146 1
	if (getparint("n2", &ntr) || getparint("ntr", &ntr)) know_ntr = true;
d148 1
a148 1
	if (!know_ntr) { /* count traces */
d189 1
a189 1
	if (!know_ntr) { /* send out stored traces one by one */
d206 1
a206 1
	if (!know_ntr) efclose(datafp);
@


1.18
log
@added verbose
@
text
@d1 1
a1 1
/* SUXWIGB: $Revision: 1.17 $ ; $Date: 95/01/19 11:37:54 $		*/
d8 3
a10 3
" 									",
" SUXWIGB - X-windows Bitmappe WIGgle plot of a segy data set		",
" 									",
d12 7
a18 9
" 							        	",
" Optional parameters: 							",
" 							        	",
" n2 is the number of traces.  If not getparred or set in the ntr field ",
" of the trace header, then it is the total number of traces in the data",
" set found by explicitly counting traces.	  			",
" 							        	",
" d1 is the sampling interval in the fast dimension.  If not getparred	",
" then for seismic time domain data d1=tr.dt/10^6 if set, else 0.004. 	",
d20 2
a21 2
" 							        	",
" d2 is the sampling interval in the slow dimension.  If not getparred	",
d23 1
a23 1
" 							        	",
d25 3
a27 3
" then for seismic time domain data f1=tr.delrt/10^3 if set, else 0.0.	",
" For other types of data f1=tr.d1 if set else 0.0	 		",
" 							        	",
d30 2
a31 2
" else 1.0 for seismic time domain data, else 0.0 			",
" 							        	",
d36 1
a36 1
" the processing time or use d2= f2= to over-ride the header values if	",
d38 4
a41 4
" 							        	",
" See the xwigb selfdoc for the remaining parameters.		",
" 							        	",
" On NeXT:     suxwigb < infile [optional parameters]  | open      	",
d46 2
a47 3
 *	CWP: Dave Hale and Zhiming Li (xwigb)
 *	     Jack K. Cohen  (suxmovie)
 *	     John Stockwell (suxwigb)
d50 18
a67 11
 *	When n2 isn't getparred, we need to count the traces
 *	for xwigb.  In this case:
 *	we are using tmpfile because on many machines it is
 *	implemented as a memory area instead of a disk file.
 *	However, if your system really makes a disk file you
 *	should consider altering the code to remove the file
 *	on interrupt.  Two possibilities are trapping the
 *	interrupt with "signal" or using "tmpnam" followed
 *	by an immediate "remove" (aka unlink in old unix).
 *	Although we compute ntr, we don't allocate a 2-d array
 *	and content ourselves with copying trace by trace from
d79 3
a81 3
	char plotcmd[BUFSIZ];	/* build xwigb command for popen 	*/
	float *trbuf;		/* trace buffer			 	*/
	FILE *datafp;		/* fp for trace data file (if n2 < ntr)	*/
d83 1
a83 2
	int nt;			/* number of samples on trace		*/
	int n2;			/* number of traces			*/
d86 4
a89 4
	float d1;		/* time/depth sample rate 		*/
	float d2;		/* trace/dx sample rate 		*/
	float f1;		/* tmin/zmin				*/
	float f2;		/* tracemin/xmin	 		*/
d91 1
a91 2
	cwp_Bool got_n2 = true;	/* was n2 getparred?			*/
	cwp_Bool got_ntr = true;	/* was ntr set in header?	*/
a100 1
		 
d103 1
a103 1
	if (ntr==0) got_ntr = false; 
d105 1
a105 1
	if (!getparint("verbose", &verbose))	verbose=0;
d135 1
a135 1
		if      (tr.f2)     f2 = tr.f2;
d139 1
a139 1
		else 		    f2 = 0.0;
d145 2
a146 2
	/* Get or set n2 and n3 */
	if (!getparint("n2", &n2)) got_n2 = false;
d148 1
a148 1
	if (!got_n2 && !got_ntr) { /* count traces */
d150 2
a151 2
 			warn("n2 not getparred and ntr header field not set");
 			warn("....  counting traces");
a166 2
	if (!got_n2) n2 = ntr;

d170 1
a170 1
			   nt, n2, d1, d2, f1, f2);
d189 1
a189 1
	if (!got_n2 && !got_ntr) { /* send out stored traces one by one */
d206 1
a206 1
	if (!got_n2 && !got_ntr) efclose(datafp);
@


1.17
log
@removed extraneous getpar of f2 parameter
@
text
@d1 1
a1 1
/* SUXWIGB: $Revision: 1.16 $ ; $Date: 94/12/05 09:55:01 $		*/
d82 1
d104 1
d148 4
a151 2
 		warn("n2 not getparred and ntr header field not set");
 		warn("....  counting traces");
@


1.16
log
@updated to permit getparring of n2 or reading of ntr parameter from header
@
text
@d1 1
a1 1
/* SUXWIGB: $Revision: 1.14 $ ; $Date: 94/11/28 15:45:23 $		*/
a137 2

	if (!getparfloat("f2", &f2)) f2 = 1.0;
@


1.15
log
@changed to permit slow dimension to be input via getpar of n2 or via
new locally assigned header field "ntr".
@
text
@d1 1
a1 2
/* Copyright (c) Colorado School of Mines, 1994.*/
/* All rights reserved.                       */
a2 15


/*----------------------------------------------------------------------
 * Copyright (c) Colorado School of Mines, 1990.
 * All rights reserved.
 *
 * This code is part of SU.  SU stands for Seismic Unix, a processing line
 * developed at the Colorado School of Mines, partially based on Stanford
 * Exploration Project (SEP) software.  Inquiries should be addressed to:
 *
 *  Jack K. Cohen, Center for Wave Phenomena, Colorado School of Mines,
 *  Golden, CO 80401  (jkc@@dix.mines.colorado)
 *----------------------------------------------------------------------
 */

d9 1
a9 1
" SUXWIGB - X WIGgle-trace Bitmap plot of a segy data set	 	",
d11 1
a11 1
" suxwigb <stdin file [optional parameters]				",
d15 4
d41 1
a41 1
" See the xwigb selfdoc for the remaining parameters and X functions.	",
d43 1
a44 1
/**************** end self doc *******************************************/
d48 3
a50 1
 *	CWP: Dave (xwigb), Jack & John (su tee shirt)
d52 15
a66 1
 * Notes: See notes for suximage.
d68 1
a72 1

d75 1
a75 1
	char plotcmd[BUFSIZ];	/* build command for popen	 	*/
d77 1
a77 1
	FILE *datafp;		/* fp for trace data file		*/
d79 3
d86 3
a88 3
	int nt;			/* number of samples on trace		*/
	int ntr;		/* number of traces			*/
	cwp_Bool seismic;		/* is this seismic data?		*/
a94 1

d100 2
d139 1
d144 2
d147 3
a149 2
	/* Create temporary "file" to hold data */
	datafp = etmpfile();
d151 2
d154 6
a159 6
	/* Loop over input traces & put them into the data file */
	ntr = 0;
	do {
		++ntr;
		efwrite(tr.data, FSIZE, nt, datafp);
	} while (gettr(&tr));
d162 4
d167 3
a169 2
	sprintf(plotcmd, "xwigb n1=%d n2=%d d1=%f d2=%f f1=%f f2=%f",
			   nt, ntr, d1, d2, f1, f2);
d184 2
a185 1
	/* Open pipe; read data to buf; write buf to plot program */
d187 8
a194 5
	rewind(datafp);
	{ register int itr;
		for (itr = 0; itr < ntr; ++itr) {
			efread (trbuf, FSIZE, nt, datafp);
			efwrite(trbuf, FSIZE, nt, plotfp);
d196 4
d205 1
a205 2
	efclose(datafp);

@


1.14
log
@added ISSEISMIC macro
@
text
@d1 3
@


1.13
log
@Allow TDEAD etc. as seismic time traces.
@
text
@d88 2
a89 2
	seismic = (tr.trid == 0 || tr.trid == TREAL ||
		   tr.trid == TDEAD || tr.trid == TDUMMY);
@


1.12
log
@Bool -> cwp_Bool, String -> cwp_String
@
text
@d88 2
a89 1
	seismic =  (tr.trid == 0 || tr.trid == TREAL);
@


1.11
log
@new selfdoc installed
@
text
@d78 1
a78 1
	Bool seismic;		/* is this seismic data?		*/
@


1.10
log
@string -> String, etc.
@
text
@d20 33
a52 33
String sdoc =
" 									\n"
" SUXWIGB - X WIGgle-trace Bitmap plot of a segy data set	 	\n"
" 									\n"
" suxwigb <stdin file [optional parameters]				\n"
" 							        	\n"
" Optional parameters: 							\n"
" 							        	\n"
" d1 is the sampling interval in the fast dimension.  If not getparred	\n"
" then for seismic time domain data d1=tr.dt/10^6 if set, else 0.004. 	\n"
" For other types of data d1=tr.d1 if set, else 1.0			\n"
" 							        	\n"
" d2 is the sampling interval in the slow dimension.  If not getparred	\n"
" d2=tr.d2 if set, else 1.0						\n"
" 							        	\n"
" f1 is the first sample in the fast dimension.  If not getparred	\n"
" then for seismic time domain data f1=tr.delrt/10^3 if set, else 0.0.	\n"
" For other types of data f1=tr.d1 if set else 0.0	 		\n"
" 							        	\n"
" f2 is the first sample in the slow dimension.  If not getparred	\n"
" f2=tr.f2 if set, else tr.tracr if set, else tr.tracl if set,		\n"
" else 1.0 for seismic time domain data, else 0.0 			\n"
" 							        	\n"
" Note that for seismic time domain data, the \"fast dimension\" is	\n"
" time and the \"slow dimension\" is usually trace number or range.	\n"
" Also note that \"foreign\" data tapes may have something unexpected	\n"
" in the d2,f2 fields, use segyclean to clear these if you can afford	\n"
" the processing time or use d2= f2= to over-ride the header values if	\n"
" not.									\n"
" 							        	\n"
" See the xwigb selfdoc for the remaining parameters and X functions.	\n"
" 							        	\n"
;
d83 1
a83 1
	askdoc(1);
@


1.9
log
@Another change to d1 etc. defaults to partially guard against
just from a foreign tape
@
text
@d20 1
a20 1
string sdoc =
d78 1
a78 1
	bool seismic;		/* is this seismic data?		*/
@


1.8
log
@Tweaked f2 default to look at tr.tracr before tr.tracl
@
text
@a0 1
/* SUXWIGB: $Revision: 1.7 $ ; $Date: 91/02/22 15:13:09 $		*/
d2 1
d29 2
a30 2
" d1=tr.d1 if set, else d1=tr.dt/10^6 if set, else 0.004 for seismic	\n"
" time domain data, else 1.0						\n"
d36 2
a37 1
" f1=tr.d1 if set, else f1=tr.delrt/10^3 if set, else 0.0 		\n"
d45 4
d92 14
a105 8
		if      (tr.d1)  d1 = tr.d1;
		else if (tr.dt)  d1 = (float) tr.dt / 1000000.0;
		else if (seismic) {
			d1 = 0.004;
			warn("tr.dt not set, assuming dt=0.004");
		} else { /* not time domain data */
			d1 = 1.0;
			warn("tr.d1 not set, assuming d1=1.0");
d109 1
a109 4
	if (!getparfloat("d2", &d2)) {
		if (tr.d2)  d2 = tr.d2;
		else d2 = 1.0;
	}
d112 5
a116 3
		if      (tr.f1)     f1 = tr.f1;
		else if (tr.delrt)  f1 = (float) tr.delrt/1000.0;
		else                f1 = 0.0;
@


1.7
log
@Make d2, etc. the default if set.
@
text
@d1 1
a1 1
/* SUXWIGB: $Revision: 1.6 $ ; $Date: 91/02/14 10:27:50 $		*/
d39 2
a40 2
" f2=tr.f2 if set, else f2=tr.tracl if set, else 1.0 for seismic time	\n"
" domain data, else 0.0 						\n"
d111 1
@


1.6
log
@Look at d1,d2,f1,f2 header fields.
@
text
@d1 1
a1 1
/* SUXWIGB: $Revision: 1.5 $ ; $Date: 90/11/05 19:58:52 $		*/
d29 2
a30 2
" d1=tr.dt/10^6 if set, else 0.004 for seismic time domain data, it is	\n"
"   =tr.d1 if set, else 1.0 for all other types of data			\n"
d33 1
a33 1
" d1=tr.d2 if set, else 1.0						\n"
d36 1
a36 2
" f1=tr.delrt/10^3 if set, else 0.0 for seismic time data, it is	\n"
" f1=tr.d1 if set, else 0.0  for all other types of data.		\n"
d39 2
a40 2
" f2=tr.tracl if set, else 1.0 for seismic time data, it is		\n"
" f2=tr.d2 if set, else 0.0  for all other types of data.		\n"
d85 1
d87 5
a91 7
		if (seismic) { /* seismic time data */
			if (tr.dt) { /* is dt field set? */
				d1 = (float) tr.dt / 1000000.0;
			} else { /* dt not set, assume 4 ms */
				d1 = 0.004;
				warn("tr.dt not set, assuming dt=0.004");
			}
d93 2
a94 6
			if (tr.d1) { /* is d1 field set? */
				d1 = tr.d1;
			} else { /* d1 not set, assume 1.0 */
				d1 = 1.0;
				warn("tr.d1 not set, assuming d1=1.0");
			}
d98 4
a101 2
	if (!getparfloat("f1", &f1))
		f1 = (seismic) ? (float) tr.delrt/1000.0 : tr.f1;
d103 5
a107 2
	if (!getparfloat("d2", &d2))	d2 = tr.d2;
	if (!d2) d2 = 1.0;
d109 6
a114 2
	if (!getparfloat("f2", &f2))
		f2 = (seismic) ? ((tr.tracl) ? (float) tr.tracl : 1.0) : 0.0;
@


1.5
log
@Tweak
@
text
@d1 1
a1 1
/* SUXWIGB: $Revision: 1.4 $ ; $Date: 90/11/03 14:40:40 $		*/
d28 3
a30 4
" d1=tr.dt or 0.004      sampling interval in fast dim, often dt or dz	\n"
" d2=1.0                 ... in slow dim, often unit step in trace or dx\n"
" f1=0.0                 first sample in fast dim, often tmin or zmin	\n"
" f2=1.0                 ... in slow dim, often first tracl or xmin	\n"
d32 2
a33 1
" See the xwigb selfdoc for the remaining parameters.			\n"
d35 13
d74 1
d84 1
d87 14
a100 5
		if (tr.dt) {  /* is dt field set? */
			d1 = tr.dt / 1000000.0;
		} else {		/* dt not set, assume 4 ms */
			d1 = 0.004;
			warn("tr.dt not set, assuming dt=%g", d1);
a102 3
	if (!getparfloat("d2", &d2)) d2 = 1.0; /* default count by traces */
	if (!getparfloat("f1", &f1)) f1 = 0.0; /* default tmin */
	if (!getparfloat("f2", &f2)) f2 = tr.tracl ? tr.tracl : 1.0;
d104 2
d107 7
a127 1
	erewind(datafp);
d149 1
@


1.4
log
@Use etmpfile
@
text
@d1 1
a1 1
/* SUXWIGB: $Revision: 1.3 $ ; $Date: 90/11/02 09:35:02 $		*/
d81 1
a81 7
	if (!getparfloat("f2", &f2)) {
		if (tr.tracl) {
			f2 = tr.tracl;
		} else {
			f2 = 1.0;
		}
	}
@


1.3
log
@Changes to use tmpfile; cf rlog of suximage.
@
text
@d1 1
a1 1
/* SUXWIGB: $Revision: 1.2 $ ; $Date: 90/09/13 10:24:15 $		*/
d95 1
a95 1
	datafp = tmpfile();
d117 2
a118 2
			strcat(plotcmd, " ");   /* get a space in between args */
			strcat(plotcmd, "\"");  /* user quotes will be stripped */
d120 1
a120 1
			strcat(plotcmd, "\"");  /* user quotes will be stripped */
@


1.2
log
@Fix quote stripping bug reported by Craig.
@
text
@d1 1
a1 1
/* SUXWIGB: $Revision: 1.1 $ ; $Date: 90/09/13 09:50:34 $		*/
d20 16
a35 50
string sdoc = "\
									\n\
SUXWIGB - X WIGgle-trace Bitmap plot of a segy data set		 	\n\
									\n\
suxwigb <stdin file [optional parameters]				\n\
							        	\n\
Optional parameters: 							\n\
							        	\n\
d1=tr.dt or 0.004      sampling interval in fast dim, often dt or dz	\n\
d2=1.0                 ... in slow dim, often unit step in trace or dx	\n\
f1=0.0                 first sample in fast dim, often tmin or zmin	\n\
f2=1.0                 ... in slow dim, often first tracl or xmin	\n\
							        	\n\
x2=f2,f2+d2,...        array of sampled values in 2nd dimension		\n\
bias=0.0               data value corresponding to location along axis 2\n\
perc=100.0             percentile used to determine clip		\n\
clip=(perc percentile) data values < bias+clip and > bias-clip are clipped\n\
xcur=1.0               wiggle excursion in traces corresponding to clip	\n\
wt=1                   =0 for no wiggle-trace; =1 for wiggle-trace	\n\
va=1                   =0 for no variable-area; =1 for variable-area fill\n\
nbpi=72                number of bits per inch at which to rasterize	\n\
verbose=1              =1 for info printed on stderr (0 for no info)	\n\
xbox=50                x in pixels of upper left corner of window	\n\
ybox=50                y in pixels of upper left corner of window	\n\
wbox=550               width in pixels of window			\n\
hbox=700               height in pixels of window			\n\
x1beg=x1min            value at which axis 1 begins			\n\
x1end=x1max            value at which axis 1 ends			\n\
d1num=0.0              numbered tic interval on axis 1 (0.0 for automatic)\n\
f1num=x1min            first numbered tic on axis 1 (used if d1num not 0.0)\n\
n1tic=1                number of tics per numbered tic on axis 1	\n\
grid1=none             grid lines on axis 1 - none, dot, dash, or solid	\n\
label1=                label on axis 1					\n\
x2beg=x2min            value at which axis 2 begins			\n\
x2end=x2max            value at which axis 2 ends			\n\
d2num=0.0              numbered tic interval on axis 2 (0.0 for automatic)\n\
f2num=x2min            first numbered tic on axis 2 (used if d2num not 0.0)\n\
n2tic=1                number of tics per numbered tic on axis 2	\n\
grid2=none             grid lines on axis 2 - none, dot, dash, or solid	\n\
label2=                label on axis 2					\n\
labelfont=Erg14        font name for axes labels			\n\
title=                 title of plot					\n\
titlefont=Rom22        font name for title				\n\
labelcolor=blue        color for axes labels				\n\
titlecolor=red         color for title					\n\
gridcolor=blue         color for grid lines				\n\
style=seismic          normal (axis 1 horizontal, axis 2 vertical) or	\n\
                       seismic (axis 1 vertical, axis 2 horizontal)	\n\
							        	\n\
";
d42 1
a48 1

d51 4
a54 3
	char xdata[L_tmpnam];	/* tmp file for xwig data		*/
	char cmd[BUFSIZ];	/* build xwigb command for system call	*/
	FILE *xdatafp;		/* fp for xwigb input file		*/
d59 1
a59 1
	int ns;			/* number of samples on trace		*/
a60 1
	int itr;		/* counter over traces			*/
d70 2
a71 2
	ns = tr.ns;
	if (!fgetpar("d1", &d1)) {
d79 3
a81 3
	if (!fgetpar("d2", &d2)) d2 = 1.0; /* default count by traces */
	if (!fgetpar("f1", &f1)) f1 = 0.0; /* default tmin */
	if (!fgetpar("f2", &f2)) {
a88 3
	/* Prepare temporary file to hold xdata */
	tmpnam(xdata);
	xdatafp = efopen(xdata, "w+");
d90 2
d93 6
a98 1
	/* Loop over input traces & put them into the xdata file */
d102 1
a102 1
		efwrite(tr.data, FSIZE, ns, xdatafp);
d104 1
a104 1
	erewind(xdatafp);
d107 3
a109 3
	/* System call to xwigb */
	sprintf(cmd, "xwigb <%s n1=%d n2=%d d1=%f d2=%f f1=%f f2=%f",
			   xdata, ns, ntr, d1, d2, f1, f2);
d117 4
a120 4
			strcat(cmd, " ");   /* get a space in between args */
			strcat(cmd, "\"");  /* user quotes will be stripped */
			strcat(cmd, *argv); /* add the arg */
			strcat(cmd, "\"");  /* user quotes will be stripped */
d124 8
a131 1
	system(cmd);
d135 2
a136 2
	efclose(xdatafp);
	eremove(xdata);
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/* SUXWIGB: $Revision: 1.1 $ ; $Date: 90/06/04 14:11:42 $		*/
d142 1
a142 1
		if (strncmp(*argv, "d1=", 3) && /* these already set */
d147 4
a150 2
			/* get a space in between args */
			strcat(cmd, " "); strcat(cmd, *argv);
@
