head	1.3;
access;
symbols;
locks; strict;
comment	@ * @;


1.3
date	95.10.05.20.28.25;	author jkc;	state Exp;
branches;
next	1.2;

1.2
date	95.10.03.21.10.31;	author john;	state Exp;
branches;
next	1.1;

1.1
date	95.09.06.21.31.56;	author john;	state Exp;
branches;
next	;


desc
@SU PostScript plots using header values for x2
@


1.3
log
@Honor f1 and d1.
@
text
@/* SUPSWIGBHDR: $Revision: 1.2 $ ; $Date: 1995/10/03 21:10:31 $		*/

#include "su.h"
#include "segy.h"

/*********************** self documentation *****************************/
char *sdoc[] = {
"									",
" SUPSWIGBHDR - PostScript Bit-mapped WIGgle plot of a segy data set	",
"	        using values for x2 taken from the trace HeaDeRs	",
"									",
" supswigbhdr <stdin [optional parameters] | ...			",
"									",
" Optional parameters:						 	",
" key=(tracl or tracr)		mandatory if tr.tracl=tr.tracr=0	",
" n2=counted from data		number of traces			",
"									",
" d1=tr.d1 or tr.dt/10^6	sampling interval in the fast dimension	",
"   =.004 for seismic 		(if not set)				",
"   =1.0 for nonseismic		(if not set)				",
"									",
" f1=tr.f1 or tr.delrt/10^3 or 0.0  first sample in the fast dimension	",
"									",
" Note that for seismic time domain data, the \"1st dimension\" is	",
" time and the \"slow dimension\" is usually trace number or range.	",
" Also note that \"foreign\" data tapes may have something unexpected	",
" in the d2,f2 fields, use segyclean to clear these if you can afford	",
" the processing time or use d2= f2= to override the header values if	",
" not.									",
"									",
" See the pswigb selfdoc for the remaining parameters.			",
"									",
NULL};

/* Credits:
 *
 *	CWP: Dave Hale and Zhiming Li (pswigb, etc.)
 *	   Jack Cohen and John Stockwell (supswigbhdr, etc.)
 *
 * Notes:
 *	When the number of traces isn't known, we need to count
 *	the traces for pswigb.  You can make this value "known"
 *	either by getparring n2 or by having the ntr field set
 *	in the trace header.  A getparred value takes precedence
 *	over the value in the trace header.
 *
 *	When we do have to count the traces, we use the "tmpfile"
 *	routine because on many machines it is implemented
 *	as a memory area instead of a disk file.
 *
 *	If your system does make a disk file, consider altering
 *	the code to remove the file on interrupt.  This could be
 *	done either by trapping the interrupt with "signal"
 *	or by using the "tmpnam" routine followed by an immediate
 *	"remove" (aka "unlink" in old unix).
 *
 *	When we must compute ntr, we don't allocate a 2-d array,
 *	but just content ourselves with copying trace by trace from
 *	the data "file" to the pipe into the plotting program.
 *	Although we could use tr.data, we allocate a trace buffer
 *	for code clarity.
 */
/**************** end self doc *******************************************/


segy tr;

main(int argc, char **argv)
{
	char plotcmd[BUFSIZ];   /* build pswigb command for popen	*/
	float *trbuf;		/* trace buffer				*/
	FILE *datafp;		/* fp for trace data file 		*/
	FILE *x2fp;		/* fp for x2 values 	 		*/
	FILE *plotfp;		/* fp for plot data			*/
	int nt;			/* number of samples on trace	  	*/
	int ntr;		/* number of traces			*/
	int verbose;		/* verbose flag				*/
	float d1;		/* time/depth sample rate		*/
	float d2;		/* trace/dx sample rate			*/
	float f1;		/* tmin/zmin			   	*/
	float f2;		/* tracemin/xmin			*/
	cwp_Bool seismic;	/* is this seismic data?		*/
	cwp_String key;		/* key field to use			*/
	char tmpx2s[10000];	/* string for x2= 			*/
	char x2s[10000];	/* string for x2= 			*/
	int nx2s;		/* number of characters in x2s		*/

	/* Initialize */
	initargs(argc, argv);
	requestdoc(1);
	
	/* Get info from first trace */
	if (!gettr(&tr)) err("can't get first trace");
	seismic = ISSEISMIC(tr.trid); 
	nt = tr.ns;

	if (!getparstring("key",&key)) {
		if (tr.tracl)		key="tracl";	
		else if (tr.tracr)	key="tracr";
		else
		err("tracl and tracl not set in header, key= is mandatory!");
	}


	if (!getparint("verbose", &verbose))    verbose=0;

	if (!getparfloat("d1", &d1)) {
		if      (tr.d1)  d1 = tr.d1;
		else if (tr.dt)  d1 = ((double) tr.dt)/1000000.0;
		else {
			if (seismic) {
				d1 = 0.004;
				warn("tr.dt not set, assuming dt=0.004");
			} else { /* non-seismic data */
				d1 = 1.0;
				warn("tr.d1 not set, assuming d1=1.0");
			}
		}
	}

	if (!getparfloat("f1", &f1)) {
		if      (tr.f1)     f1 = tr.f1;
		else if (tr.delrt)  f1 = (float) tr.delrt/1000.0;
		else                f1 = 0.0;
	}

	/* Allocate trace buffer */
	trbuf = ealloc1float(nt);

	/* Create temporary "file" to hold data */
	datafp = etmpfile();
	x2fp = etmpfile();

	/* Loop over input data and read to temporary file */
	ntr = 0;
	do {
		Value val;
		float fval;

		gethdval(&tr, key, &val);
		fprintfval(x2fp,hdtype(key),val);
		fprintf(x2fp,","); /* put a comma after each val */
			/* causes a trailing ',' to be written */

		efwrite(tr.data, FSIZE, nt, datafp);
		++ntr;
		
	} while (gettr(&tr));

	
	/* Copy x2 string from tmpfile and remove trailing ',' */
	rewind(x2fp);
	while(efread(x2s,1,1,x2fp)) strcat(tmpx2s,x2s);

	nx2s=strlen(tmpx2s); 	/* get length of string */
	strncpy(x2s,tmpx2s,nx2s-1); /* copy all but the last ',' */

	/* Set up pswigb command line */
	sprintf(plotcmd,
		"pswigb n1=%d n2=%d x2=%s d1=%f d2=%f f1=%f f2=%f",
			   nt, ntr, x2s, d1, d2, f1, f2);

	for (--argc, ++argv; argc; --argc, ++argv) {
		if (strncmp(*argv, "d1=", 3) && /* skip those already set */
		    strncmp(*argv, "d2=", 3) &&
		    strncmp(*argv, "f1=", 3) &&
		    strncmp(*argv, "f2=", 3)) {
		    
			strcat(plotcmd, " ");   /* put a space between args */
			strcat(plotcmd, "\"");  /* user quotes are stripped */
			strcat(plotcmd, *argv); /* add the arg */
			strcat(plotcmd, "\"");  /* user quotes are stripped */
		}
	}


	/* Open pipe to pswigb and send the traces */
	plotfp = epopen(plotcmd, "w");
	
	/* send out stored traces one by one */
	rewind(datafp);
	{ register int itr;
		for (itr = 0; itr < ntr; ++itr) {
			efread (trbuf, FSIZE, nt, datafp);
			efwrite(trbuf, FSIZE, nt, plotfp);
		}
	}


	/* Clean up */
	epclose(plotfp);
	efclose(datafp);

	return EXIT_SUCCESS;
}
@


1.2
log
@*** empty log message ***
@
text
@d1 1
a1 1
/* SUPSWIGBHDR: $Revision: 1.1 $ ; $Date: 1995/09/06 21:32:27 $		*/
d18 3
a20 2
" d1=tr.dt/10^6 or 0.004 (seismic)	sampling interval in 1st dimension",
"   =1.0 (other)							",
d22 1
a22 2
" f1=tr.delrt/10^3 or 0.0 (seismic)	first value in 1st dimension	",	
" f1=tr.f1 or 0.0 (other)						",
d106 1
d108 4
a111 4
		if (seismic) {
			if (tr.dt) {
				d1 = (float) tr.dt / 1000000.0;
			} else {
d114 1
a114 5
			}
		} else { /* non-seismic data */
			if (tr.d1) {
				d1 = tr.d1;
			} else {
d122 3
a124 5
		if (seismic) {
			f1 = (tr.delrt) ? (float) tr.delrt/1000.0 : 0.0;
		} else {
			f1 = (tr.f1) ? tr.f1 : 0.0;
		}
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/* SUPSWIGPHDR: $Revision: 1.20 $ ; $Date: 95/02/28 13:10:57 $		*/
d9 2
a10 2
" SUPSWIGPHDR - PostScript Bit-mapped WIGgle plot of a segy data set	",
"	      using values for x2 taken from the header			",
d12 1
a12 1
" supswigphdr <stdin [optional parameters] | ...				",
d31 1
a31 1
" See the pswigp selfdoc for the remaining parameters.			",
d37 2
a38 2
 *	CWP: Dave Hale and Zhiming Li (pswigp, etc.)
 *	   Jack Cohen and John Stockwell (supswigphdr, etc.)
d42 1
a42 1
 *	the traces for pswigp.  You can make this value "known"
d70 1
a70 1
	char plotcmd[BUFSIZ];   /* build pswigp command for popen	*/
d84 2
a85 2
	char tmpx2s[BUFSIZ];	/* string for x2= 			*/
	char x2s[BUFSIZ];	/* string for x2= 			*/
a143 1
		int i;
d163 1
a163 1
	/* Set up pswigp command line */
d165 1
a165 1
		"pswigp n1=%d n2=%d x2=%s d1=%f d2=%f f1=%f f2=%f",
d182 1
a182 1
	/* Open pipe to pswigp and send the traces */
@
