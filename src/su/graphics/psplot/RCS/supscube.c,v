head	1.11;
access;
symbols;
locks; strict;
comment	@ * @;


1.11
date	2011.11.12.00.46.15;	author john;	state Exp;
branches;
next	1.10;

1.10
date	2003.08.19.16.47.16;	author john;	state Exp;
branches;
next	1.9;

1.9
date	98.08.25.19.54.26;	author john;	state Exp;
branches;
next	1.8;

1.8
date	96.09.17.15.41.37;	author jkc;	state Exp;
branches;
next	1.7;

1.7
date	96.09.10.15.20.43;	author john;	state Exp;
branches;
next	1.6;

1.6
date	95.10.03.19.16.41;	author jkc;	state Exp;
branches;
next	1.5;

1.5
date	95.02.28.13.00.02;	author jkc;	state Exp;
branches;
next	1.4;

1.4
date	95.01.19.12.09.09;	author john;	state Exp;
branches;
next	1.3;

1.3
date	94.11.28.15.45.11;	author john;	state Exp;
branches;
next	1.2;

1.2
date	94.09.16.12.56.19;	author john;	state Exp;
branches;
next	1.1;

1.1
date	94.09.16.11.53.48;	author john;	state Exp;
branches;
next	;


desc
@supscube--- make cube plots of sudata with pscube
@


1.11
log
@copyright
@
text
@/* Copyright (c) Colorado School of Mines, 2011.*/
/* All rights reserved.                       */

/* SUPSCUBE: $Revision: 1.10 $ ; $Date: 2003/08/19 16:47:16 $		*/

#include "su.h"
#include "segy.h"
#include <signal.h>

/*********************** self documentation *****************************/
char *sdoc[] = {
" 									",
" SUPSCUBE - PostScript CUBE plot of a segy data set			",
" 									",
" supscube <stdin [optional parameters] | ...				",
" 							        	",
" Optional parameters: 							",
" 							        	",
" n2 is the number of traces per frame.  If not getparred then it	",
" is the total number of traces in the data set.  			",
" 							        	",
" n3 is the number of frames.  If not getparred then it			",
" is the total number of frames in the data set measured by ntr/n2	",
" 							        	",
" d1=tr.d1 or tr.dt/10^6	sampling interval in the fast dimension	",
"   =.004 for seismic 		(if not set)				",
"   =1.0 for nonseismic		(if not set)				",
" 							        	",
" d2=tr.d2			sampling interval in the slow dimension	",
"   =1.0 			(if not set)				",
" 							        	",
" f1=tr.f1 or tr.delrt/10^3 or 0.0  first sample in the fast dimension	",
" 							        	",
" f2=tr.f2 or tr.tracr or tr.tracl  first sample in the slow dimension	",
"   =1.0 for seismic		    (if not set)			",
"   =d2 for nonseismic		    (if not set)			",
" 							        	",
" verbose=0              =1 to print some useful information		",
"									",
" tmpdir=	 	if non-empty, use the value as a directory path	",
"		 	prefix for storing temporary files; else if the	",
"	         	the CWP_TMPDIR environment variable is set use	",
"	         	its value for the path; else use tmpfile()	",
" 									",
" Note that for seismic time domain data, the \"fast dimension\" is	",
" time and the \"slow dimension\" is usually trace number or range.	",
" Also note that \"foreign\" data tapes may have something unexpected	",
" in the d2,f2 fields, use segyclean to clear these if you can afford	",
" the processing time or use d2= f2= to over-ride the header values if	",
" not.									",
" 							        	",
" See the pscube selfdoc for the remaining parameters.			",
" 							        	",
" On NeXT:     supscube < infile [optional parameters]  | open	       	",
NULL};

/* Credits:
 *
 *	CWP: Dave Hale and Zhiming Li (pscube)
 *	     Jack K. Cohen  (suxmovie)
 *	     John Stockwell (supscube)
 *
 * Notes:
 *	When n2 isn't getparred, we need to count the traces
 *	for pscube. Although we compute ntr, we don't allocate a 2-d array
 *	and content ourselves with copying trace by trace from
 *	the data "file" to the pipe into the plotting program.
 *	Although we could use tr.data, we allocate a trace buffer
 *	for code clarity.
 */
/**************** end self doc *******************************************/

static void closefiles(void);

/* Globals (so can trap signal) defining temporary disk files	*/
char tracefile[BUFSIZ];	/* filename for trace storage file	*/
FILE *tracefp;		/* fp for trace storage file		*/

segy tr;

int
main(int argc, char **argv)
{
	char plotcmd[BUFSIZ];	/* build pscube command for popen 	*/
	float *trbuf;		/* trace buffer			 	*/
	FILE *plotfp;		/* fp for plot data			*/
	int nt;			/* number of samples on trace		*/
	int n2;			/* number of traces per frame		*/
	int n3;			/* number of frames in data		*/
	int ntr;		/* number of traces			*/
	int verbose;		/* verbose flag				*/
	float d1;		/* time/depth sample rate 		*/
	float d2;		/* trace/dx sample rate 		*/
	float d3;		/* slowest dim sample rate 		*/
	float f1;		/* tmin/zmin				*/
	float f2;		/* tracemin/xmin	 		*/
	float f3=0.0;		/* first value in 3rd dimension		*/
	cwp_Bool seismic;	/* is this seismic data?		*/
	cwp_Bool have_n2 = cwp_false;/* was n2 getparred?			*/
	cwp_Bool have_n3 = cwp_false;/* was n3 getparred?			*/
	cwp_Bool have_ntr = cwp_false;/* was ntr set in header?		*/
	char *tmpdir;		/* directory path for tmp files		*/
	cwp_Bool istmpdir=cwp_false;/* true for user given path		*/

	char *cwproot;		/* value of CWPROOT environment variable*/
	char *bindir;		/* directory path for tmp files		*/

	/* Initialize */
	initargs(argc, argv);
	requestdoc(1);
	

	/* Get info from first trace */
	if (!gettr(&tr)) err("can't get first trace");
	seismic = ISSEISMIC(tr.trid); 
	nt = tr.ns;
	ntr = tr.ntr;
	if (ntr) have_ntr = cwp_true; 

	if (!getparint("verbose", &verbose))	verbose=0;
	if (!getparfloat("d1", &d1)) {
		if      (tr.d1)  d1 = tr.d1;
		else if (tr.dt)  d1 = ((double) tr.dt)/1000000.0;
		else {
			if (seismic) {
				d1 = 0.004;
				warn("tr.dt not set, assuming dt=0.004");
			} else { /* non-seismic data */
				d1 = 1.0;
				warn("tr.d1 not set, assuming d1=1.0");
			}
		}
	}

	if (!getparfloat("d2", &d2)) d2 = (tr.d2) ? tr.d2 : 1.0;
	if (!getparfloat("d3", &d3)) d3 = 1.0;

	if (!getparfloat("f1", &f1)) {
		if      (tr.f1)     f1 = tr.f1;
		else if (tr.delrt)  f1 = (float) tr.delrt/1000.0;
		else                f1 = 0.0;
	}

	if (!getparfloat("f2", &f2)) {
		if      (tr.f2)     f2 = tr.f2;
		else if (tr.tracr)  f2 = (float) tr.tracr;
		else if (tr.tracl)  f2 = (float) tr.tracl;
		else if (seismic)   f2 = 1.0;
		else 		    f2 = 0.0;
	}


	/* Look for user-supplied tmpdir */
	if (!getparstring("tmpdir",&tmpdir) &&
	    !(tmpdir = getenv("CWP_TMPDIR"))) tmpdir="";
	if (!STREQ(tmpdir, "") && access(tmpdir, WRITE_OK))
		err("you can't write in %s (or it doesn't exist)", tmpdir);

	/* See if CWPBIN environment variable is not set */
	if (!(bindir = getenv("CWPBIN"))) { /* construct bindir from CWPROOT */

		bindir = (char *) emalloc(BUFSIZ);

		/* Get value of CWPROOT environment variable */
		if (!(cwproot = getenv("CWPROOT"))) cwproot ="" ;
		if (STREQ(cwproot, "")) {
			warn("CWPROOT environment variable is not set! ");
			err("Set CWPROOT in shell environment as per instructions in CWP/SU Installation README files");
		}
		/* then bindir = $CWPROOT/bin */
		sprintf(bindir, "%s/bin", cwproot);
	}
	strcat(bindir,"/");   /* put / at the end of bindir */

	/* Allocate trace buffer */
	trbuf = ealloc1float(nt);

	/* Get or set n2 and n3 */
	if (getparint("n2", &n2)) have_n2 = cwp_true;
	if (getparint("n3", &n3)) have_n3 = cwp_true;
	if (have_n2 && have_n3) have_ntr = cwp_true;

	if (!have_ntr) { /* count traces */
		if (verbose) {
		    warn("ntr header field not set or n2 & n3 not getparred");
		    warn("... counting traces");
		}

		/* Create temporary "file" to hold data */
		/* Create temporary "file" to hold data */
		if (STREQ(tmpdir,"")) {
			tracefp = etmpfile();
			if (verbose) warn("using tmpfile() call");
		} else { /* user-supplied tmpdir */
			char directory[BUFSIZ];
			strcpy(directory, tmpdir);
			strcpy(tracefile, temporary_filename(directory));
			/* Handle user interrupts */
			signal(SIGINT, (void (*) (int)) closefiles);
			signal(SIGQUIT, (void (*) (int)) closefiles);
			signal(SIGHUP,  (void (*) (int)) closefiles);
			signal(SIGTERM, (void (*) (int)) closefiles);
			tracefp = efopen(tracefile, "w+");
			istmpdir=cwp_true;		
			if (verbose)
			      warn("putting temporary files in %s", directory);
		}


		/* Loop over input frames & put them into the data file */
		ntr = 0;
		do {
			++ntr;
			efwrite(tr.data, FSIZE, nt, tracefp);
		} while (gettr(&tr));

	} 

	/* Set dimensions of cube */
	if (!have_n2 && !have_n3) { n2 = ntr; n3=1; } 
	if (have_n2 && !have_n3) n3 = ntr/n2;
	if (!have_n2 && have_n3) n2 = ntr/n3;

	/* Set up pscube command line */
	sprintf(plotcmd,
		"%spscube n1=%d n2=%d n3=%d d1=%f d2=%f d3=%f f1=%f f2=%f f3=%f", bindir,
			   nt, n2, n3, d1, d2, d3, f1, f2, f3);

	for (--argc, ++argv; argc; --argc, ++argv) {
		if (strncmp(*argv, "d1=", 3) && /* skip those already set */
		    strncmp(*argv, "d2=", 3) &&
		    strncmp(*argv, "d3=", 3) &&
		    strncmp(*argv, "f1=", 3) &&
		    strncmp(*argv, "f2=", 3) &&
		    strncmp(*argv, "f3=", 3)) {
		    
			strcat(plotcmd, " ");   /* put a space between args */
			strcat(plotcmd, "\"");  /* user quotes are stripped */
			strcat(plotcmd, *argv); /* add the arg */
			strcat(plotcmd, "\"");  /* user quotes are stripped */
		}
	}


	/* Open pipe to pscube and send the traces */
	plotfp = epopen(plotcmd, "w");
	
	if (!have_ntr) {
			/* send out stored traces one by one */
		rewind(tracefp);
		{ register int itr;
			for (itr = 0; itr < ntr; ++itr) {
				efread (trbuf, FSIZE, nt, tracefp);
				efwrite(trbuf, FSIZE, nt, plotfp);
			}
		}
	} else { /* just pump out traces and let pscube do the work */
		do {
			efwrite(tr.data, FSIZE, nt, plotfp);
		} while (gettr(&tr));
	}


	/* Clean up */
	epclose(plotfp);
	if (!have_ntr) {
		efclose(tracefp);
		if (istmpdir) eremove(tracefile);
	}

	return EXIT_SUCCESS;
}

/* for graceful interrupt termination */
static void closefiles(void)
{
	efclose(tracefp);
	eremove(tracefile);
	exit(EXIT_FAILURE);
}
@


1.10
log
@fixed to find CWPROOT path to avoid collision with nonCWP code of the same name
@
text
@d1 4
a4 1
/* SUPSCUBE: $Revision: 1.9 $ ; $Date: 1998/08/25 19:54:26 $		*/
@


1.9
log
@*** empty log message ***
@
text
@d1 1
a1 1
/* SUPSCUBE: $Revision: 1.8 $ ; $Date: 1996/09/17 15:41:37 $		*/
d102 2
d156 16
d223 1
a223 1
		"pscube n1=%d n2=%d n3=%d d1=%f d2=%f d3=%f f1=%f f2=%f f3=%f",
@


1.8
log
@Added tmpdir stuff.
@
text
@d1 1
a1 1
/* SUPSCUBE: $Revision: 1.7 $ ; $Date: 1996/09/10 15:20:43 $		*/
d96 3
a98 3
	cwp_Bool have_n2 = false;/* was n2 getparred?			*/
	cwp_Bool have_n3 = false;/* was n3 getparred?			*/
	cwp_Bool have_ntr = false;/* was ntr set in header?		*/
d100 1
a100 1
	cwp_Bool istmpdir=false;/* true for user given path		*/
d113 1
a113 1
	if (ntr) have_ntr = true; 
d158 3
a160 3
	if (getparint("n2", &n2)) have_n2 = true;
	if (getparint("n3", &n3)) have_n3 = true;
	if (have_n2 && have_n3) have_ntr = true;
d183 1
a183 1
			istmpdir=true;		
@


1.7
log
@silenced -Wall complaints
@
text
@d1 1
a1 1
/* SUPSCUBE: $Revision: 1.6 $ ; $Date: 1995/10/03 19:16:41 $		*/
d5 1
d35 7
d62 1
a62 9
 *	for pscube.  In this case:
 *	we are using tmpfile because on many machines it is
 *	implemented as a memory area instead of a disk file.
 *	However, if your system really makes a disk file you
 *	should consider altering the code to remove the file
 *	on interrupt.  Two possibilities are trapping the
 *	interrupt with "signal" or using "tmpnam" followed
 *	by an immediate "remove" (aka unlink in old unix).
 *	Although we compute ntr, we don't allocate a 2-d array
d70 5
a82 1
	FILE *datafp=NULL;	/* fp for trace data file (if n2 < ntr)	*/
d99 2
d148 6
d169 19
a187 1
		datafp = etmpfile();
d193 1
a193 1
			efwrite(tr.data, FSIZE, nt, datafp);
d229 1
a229 1
		rewind(datafp);
d232 1
a232 1
				efread (trbuf, FSIZE, nt, datafp);
d245 4
a248 1
	if (!have_ntr) efclose(datafp);
d250 2
d253 6
a258 1
	return EXIT_SUCCESS;
@


1.6
log
@Honor f1 and d1.  Converted to standard style self-doc.
Zapped a second getparfloat of f2 paragraph that over-rode
the first one.
@
text
@d1 1
a1 1
/* SUPSCUBE: $Revision: 1.5 $ ; $Date: 1995/02/28 13:00:02 $		*/
d73 1
d78 1
a78 1
	FILE *datafp;		/* fp for trace data file (if n2 < ntr)	*/
d90 1
a90 1
	float f3;		/* first value in 3rd dimension		*/
d175 1
a175 1
		"pscube n1=%d n2=%d n3=%d d1=%f d2=%f d3=%f f1=%f f2=%f",
@


1.5
log
@Modified boolean variables and improved their names.
@
text
@d1 1
a1 1
/* SUPSCUBE: $Revision: 1.4 $ ; $Date: 95/01/19 12:09:09 $		*/
d21 12
a32 14
" d1 is the sampling interval in the fast dimension.  If not getparred	",
" then for seismic time domain data d1=tr.dt/10^6 if set, else 0.004. 	",
" For other types of data d1=tr.d1 if set, else 1.0			",
" 							        	",
" d2 is the sampling interval in the slow dimension.  If not getparred	",
" d2=tr.d2 if set, else 1.0						",
" 							        	",
" f1 is the first sample in the fast dimension.  If not getparred	",
" then for seismic time domain data f1=tr.delrt/10^3 if set, else 0.0.	",
" For other types of data f1=tr.d1 if set else 0.0	 		",
" 							        	",
" f2 is the first sample in the slow dimension.  If not getparred	",
" f2=tr.f2 if set, else tr.tracr if set, else tr.tracl if set,		",
" else 1.0 for seismic time domain data, else 0.0 			",
d110 4
a113 4
		if (seismic) {
			if (tr.dt) {
				d1 = (float) tr.dt / 1000000.0;
			} else {
d116 1
a116 5
			}
		} else { /* non-seismic data */
			if (tr.d1) {
				d1 = tr.d1;
			} else {
d127 3
a129 5
		if (seismic) {
			f1 = (tr.delrt) ? (float) tr.delrt/1000.0 : 0.0;
		} else {
			f1 = (tr.f1) ? tr.f1 : 0.0;
		}
a139 1
	if (!getparfloat("f2", &f2)) f2 = 1.0;
@


1.4
log
@added verbose
@
text
@d1 1
a1 1
/* SUPSCUBE: $Revision: 1.3 $ ; $Date: 94/11/28 15:45:11 $		*/
d93 3
a95 3
	cwp_Bool got_n2 = true;		/* was n2 getparred?		*/
	cwp_Bool got_ntr = true;	/* was ntr set in header?	*/
	cwp_Bool got_n3 = true;		/* was n3 getparred?		*/
a105 1
		 
d108 1
a108 1
	if (ntr==0) got_ntr = false;
d154 3
a156 2
	if (!getparint("n2", &n2)) got_n2 = false;
	if (!getparint("n3", &n3)) got_n3 = false;
d158 1
a158 3
	if (got_n2 && got_n3) got_ntr = true;

	if (!got_ntr) { /* count traces */
d160 2
a161 2
		    warn("ntr header field not set or n2 and n3 not getparred");
		    warn("    ... counting traces");
d177 3
a179 3
	if (!got_n2 && !got_n3) { n2 = ntr; n3=1; } 
	if (got_n2 && !got_n3) n3 = ntr/n2;
	if (!got_n2 && got_n3) n2 = ntr/n3;
d205 1
a205 1
	if (!got_ntr) {
d223 1
a223 1
	if (!got_ntr) efclose(datafp);
@


1.3
log
@changed to permit slow dimension to be input via getpar of n2 or via
new locally assigned header field "ntr".
@
text
@d1 1
a1 1
/* SUPSCUBE: $Revision: 1.2 $ ; $Date: 94/09/16 12:56:19 $		*/
d85 1
d111 1
d161 4
a164 2
		warn("ntr header field not set or n2 and n3 not getparred");
		warn("    ... counting traces");
@


1.2
log
@cosmetic changes
@
text
@d1 1
a1 1
/* SUPSCUBE: $Revision: 1.1 $ ; $Date: 94/09/16 11:53:48 $		*/
d92 3
a94 2
	cwp_Bool got_n2 = true;	/* was n2 getparred?			*/
	cwp_Bool got_n3 = true;	/* was n3 getparred?			*/
d107 2
d156 1
a156 1
	if (!got_n2 || !got_n3) { /* count traces */
d158 4
a171 4
		if (!got_n2 && !got_n3) { n2 = ntr; n3=1; } 
		if (got_n2 && !got_n3) n3 = ntr/n2;
		if (!got_n2 && got_n3) n2 = ntr/n3;

d174 4
d203 2
a204 1
	if (!got_n2 || !got_n3) { /* send out stored traces one by one */
d221 1
a221 1
	if (!got_n2 || !got_n3) efclose(datafp);
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/* SUPSCUBE: $Revision: 1.7 $ ; $Date: 94/03/30 13:58:26 $		*/
a2 13
/*----------------------------------------------------------------------
 * Copyright (c) Colorado School of Mines, 1990.
 * All rights reserved.
 *
 * This code is part of SU.  SU stands for Seismic Unix, a processing line
 * developed at the Colorado School of Mines, partially based on Stanford
 * Exploration Project (SEP) software.  Inquiries should be addressed to:
 *
 *  Jack K. Cohen, Center for Wave Phenomena, Colorado School of Mines,
 *  Golden, CO 80401  (jkc@@dix.mines.colorado)
 *----------------------------------------------------------------------
 */

a45 2
" Caveat: only the Preview Application can handle multi-page PS output 	",
" 	  on NeXT					        	",
a46 1
/**************** end self doc *******************************************/
d51 1
a51 1
 *	     Jack K. Cohen (suxcube)
d70 1
@
