head     1.1;
access   ;
symbols  ;
locks    jkc:1.1; strict;
comment  @ * @;


1.1
date     90.03.11.14.15.40;  author jkc;  state Exp;
branches ;
next     ;


desc
@complex operations library
@



1.1
log
@Initial revision
@
text
@/* complex - routines for complex arithmetic
 *
 * Cadd     - sum of complex numbers
 * Csub     - difference of complex numbers
 * Cmul     - product of complex numbers
 * Cdiv     - quotient of complex numbers
 * Complex  - form complex from real and imaginary part
 * Cabs     - modulus of complex number
 * Conjg    - conjugate of complex number
 * Csqrt    - complex square root of complex number
 * RCmul    - product of real and complex number
 * Re       - real part of complex number
 * Im       - imaginary part of complex number
 *
 * Returns:
 *	Cadd     - fcomplex
 *	Csub     - fcomplex
 *	Cmul     - fcomplex
 *	Cdiv     - fcomplex
 *	Complex  - fcomplex
 *	Cabs     - float
 *	Conjg    - fcomplex
 *	Csqrt    - fcomplex
 *	RCmul    - fcomplex
 *	Re       - float
 *	Im       - float
 *
 * Synopsis:
 *	fcomplex Cadd(a, b)
 *	fcomplex a - addend
 *	fcomplex b - addend
 *
 *	fcomplex Csub(a, b)
 *	fcomplex a - subtrahend
 *	fcomplex b - subtractor
 *
 *	fcomplex Cmul(a, b)
 *	fcomplex a - factor
 *	fcomplex b - factor
 *
 *	fcomplex Cdiv(a, b)
 *	fcomplex a - dividend
 *	fcomplex b - divisor
 *
 *	fcomplex Complex(re, im)
 *	float re - real part
 *	float im - imaginary part
 *
 *	fcomplex Cabs(z)
 *	fcomplex z - complex number
 *
 *	fcomplex Conjg(z)
 *	fcomplex z - complex number
 *
 *	fcomplex Csqrt(z)
 *	fcomplex z - complex number
 *
 *	fcomplex RCmul(x, a)
 *	float x - float factor
 *	float a - complex factor
 *
 *	float Re(z)
 *	fcomplex z;
 *
 *	float Im(z)
 *	fcomplex z;
 *
 * Credits: 
 *	Press, Flannery, Teukolsky, Vetterling, " Numerical Recipes in C"
 *	Cambridge University Press, 1988
 *	Appendix E: Complex Arithmetic
 *	CWP: Jack
 *
 * This program belongs to the Center for Wave Phenomena
 * Colorado School of Mines
 *
 * $Author: jkc $
 * $Source: /src/general/Cveclib/RCS/complex.c,v $
 * $Revision: 1.1 $ ; $Date: 89/08/11 00:17:20 $
*/


/* Embed Revision Control System identifier strings */
static char progid[] =
	"   $Source: /src/general/Cveclib/RCS/complex.c,v $";
static char revid[] =
	"   $Revision: 1.1 $ ; $Date: 89/08/11 00:17:20 $";


#include <math.h>
#include "../include/cwpdefs.h"		/* Has typedef for fcomplex */

fcomplex Cadd(a, b)
fcomplex a, b;
{
	fcomplex c;

	c.r = a.r + b.r;
	c.i = a.i + b.i;

	return(c);
}


fcomplex Csub(a, b)
fcomplex a, b;
{
	fcomplex c;

	c.r = a.r - b.r;
	c.i = a.i - b.i;

	return(c);
}


fcomplex Cmul(a, b)
fcomplex a, b;
{
	fcomplex c;

	c.r = a.r * b.r - a.i * b.i;
	c.i = a.r * b.i + a.i * b.r;

	return(c);
}


fcomplex Cdiv(a, b)
fcomplex a, b;
{
	fcomplex c;
	float ratio, denom;

	if (fabs(b.r) > fabs(b.i)) {   /* for numerical accuracy */
		ratio = b.i / b.r;
		denom = b.r + ratio * b.i;
		c.r = (a.r + ratio * a.i) / denom;
		c.i = (a.i - ratio * a.r) / denom;
	} else {
		ratio = b.r / b.i;
		denom = b.i + ratio * b.r;
		c.r = (ratio * a.r + a.i) / denom;
		c.i = (ratio * a.i - a.r) / denom;
	}

	return(c);
}


fcomplex Complex(re, im)
float re, im;
{
	fcomplex c;

	c.r = re;
	c.i = im;

	return(c);
}


float Cabs(z)
fcomplex z;
{
	float x, y, absval, ratio;

	x = fabs(z.r);
	y = fabs(z.i);

	if (!x) absval = y;
	else if (!y) absval = x;
	else if (x > y) {     /* for numerical accuracy */
		ratio = y / x;
		absval = x * sqrt(1.0 + ratio * ratio);
	} else {
		ratio = x / y;
		absval = y * sqrt(1.0 + ratio * ratio);
	}

	return(absval);
}


fcomplex Csqrt(z)
fcomplex z;
{
	fcomplex c;
	float x, y, w, ratio;

	if (!z.r && !z.i) {
		c.r = c.i = 0.0;
		return(c);
	} else {
		x = fabs(z.r);
		y = fabs(z.i);
		if (x >= y) {     /* for numerical accuracy */
			ratio = y / x;
			w = sqrt(x) *
			    sqrt(0.5 * (1.0 + sqrt(1.0 + ratio * ratio)));
		} else {
			ratio = x / y;
			w = sqrt(y) *
			    sqrt(0.5 * (ratio + sqrt(1.0 + ratio * ratio)));
		}

		if (z.r >= 0) {
			c.r = w;
			c.i = z.i / (2.0 * w);
		} else {
			c.i = (z.i >= 0.0) ? w : -w;
			c.r = z.i / (2.0 * c.i);
		}

		return(c);
	}
}


fcomplex RCmul(x, a)
float x;
fcomplex a;
{
	fcomplex c;

	c.r = x * a.r;
	c.i = x * a.i;

	return(c);
}


fcomplex Conjg(z)
fcomplex z;
{
	fcomplex c;

	c.r = z.r;
	c.i = -z.i;

	return(c);
}


float Re(z)
fcomplex z;
{
	return(z.r);
}


float Im(z)
fcomplex z;
{
	return(z.i);
}


#ifdef TEST
main()
{
	fcomplex a, b, c, d;
	float x, y, u, v;

	x = 1.0;
	y = 2.0;
	u = 4.0;
	v = 3.0;

	printf("Re a = %g, Im a = %g, Re b = %g, Im b = %g\n", x, y, u, v);

	a = Complex(x, y);
	b = Complex(u, v);

	printf("a = (%g, %g), b = (%g, %g)\n",
			Re(a), Im(a), Re(b), Im(b));

	c = Cadd(a, b);
	printf("sum: (%g, %g)\n", Re(c), Im(c));

	c = Csub(a, b);
	printf("diff: (%g, %g)\n", Re(c), Im(c));

	c = Cmul(a, b);
	printf("prod: (%g, %g)\n", Re(c), Im(c));

	c = Cdiv(a, b);
	printf("quotient a/b: (%g, %g)\n", Re(c), Im(c));
	c = Cdiv(b, a);
	printf("quotient b/a: (%g, %g)\n", Re(c), Im(c));

	printf("moduli: %g, %g\n", Cabs(a), Cabs(b));

	c = Conjg(a);
	printf("Conjg(a): (%g, %g)\n", c.r, c.i );

	c = Csqrt(a);
	printf("Csqrt(a): (%g, %g)\t\t", c.r, c.i);
	d = Cmul(c, c);
	printf("Csqrt(a)**2: (%g, %g)\n", d.r, d.i);

	c = Csqrt(b);
	printf("Csqrt(b): (%g, %g)\t\t", c.r, c.i);
	d = Cmul(c, c);
	printf("Csqrt(b)**2: (%g, %g)\n", d.r, d.i);

	c = RCmul(5.0, a);
	printf("RCmul(5.0, a): (%g, %g)\n", c.r, c.i);

	exit(0);
}
#endif
@
