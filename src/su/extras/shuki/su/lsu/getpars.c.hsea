/*
 * getpars.c
 *
 * History
 *    7/1986 Shuki Ronen:
 *       Complete rewrite of SEP's getpar().  Motivation: SEP's getpar too
 *       mangled.
 *    3/1987 Jack Cohen:
 *       index(). General cleanup. Comments.
 *    3/1987 Shuki Ronen:
 *       maxgetpar()
 *    7/1987 Shuki Ronen:
 *       Optional parfile name is argv[1].
 *    9/1987 Shuki Ronen:
 *       Major revision: breaking the single getpar(type,name,ptr) to many
 *       Xgetpar(name,ptr) X=[ifzulh].  Motivation: the old (SEP's)
 *       specification could not be ported to machines sensitive to
 *       inconsistent argument calls (of interest at the moment
 *       Cray/Unicos).
 *    2/1988 Shuki Ronen:
 *       Added bgetpar()
 *    9/1988 Shuki Ronen:
 *       Major revision: hashing via hsearch(3)
 */
#include <stdio.h>
#include <ctype.h>
#include <search.h>

#define MAXPFSZ 10000
#define MAX(x,y) (x)>(y)?(x):(y)

typedef enum {false,true} bool;

extern int xargc;
extern char **xargv;

static int nargs;           /* number of args that parse */
static bool first = true;   /* first entry flag */
static int nmaxgetpar=0;

static char SccsId[]="%W% %G%\n";

int igetpar(name, ptr)
char *name;                 /* External name of parameter */
int *ptr;                   /* Pointer to parameter value */
{
	int n;
	char *aval,*data,*find_data();
	int atoi();

	if (xargc == 1) return(0);
	if (first) getparinit(); /* Tabulate command line and parfile */

	data = find_data(name);
	if(data==NULL) return(0);

	/* Convert vector ascii (e.g. 1,2,3 */
	for (n=0,aval=data; *aval; n++) {
		*ptr++ = atoi(aval);
		while (*aval++ != ',') {
			if (!*aval) break;
		}
	}
	return(n);
}

int lgetpar(name, ptr)
char *name;
long *ptr;
{
	int n;
	char *aval,*data,*find_data();
	long atol();
	if (xargc == 1) return(0);
	if (first) getparinit();
	data = find_data(name);
	if(data==NULL) return(0);
	for (n=0,aval=data; *aval; n++) {
		*ptr++ = atol(aval);
		while (*aval++ != ',') {
			if (!*aval) break;
		}
	}
	return(n);
}

int ugetpar(name, ptr)
char *name;
unsigned short *ptr;
{
	int n;
	char *aval,*data,*find_data();
	int atoi();
	if (xargc == 1) return(0);
	if (first) getparinit();
	data = find_data(name);
	if(data==NULL) return(0);
	for (n=0,aval=data; *aval; n++) {
		*ptr++ = (unsigned short)atoi(aval);
		while (*aval++ != ',') {
			if (!*aval) break;
		}
	}
	return(n);
}

int hgetpar(name, ptr)
char *name;
short *ptr;
{
	int n;
	char *aval,*data,*find_data();
	int atoi();
	if (xargc == 1) return(0);
	if (first) getparinit();
	data = find_data(name);
	if(data==NULL) return(0);
	for (n=0,aval=data; *aval; n++) {
		*ptr++ = (short)atoi(aval);
		while (*aval++ != ',') {
			if (!*aval) break;
		}
	}
	return(n);
}

int fgetpar(name, ptr)
char *name;
float *ptr;
{
	int n;
	char *aval,*data,*find_data();
	double atof();
	if (xargc == 1) return(0);
	if (first) getparinit();
	data = find_data(name);
	if(data==NULL) return(0);
	for (n=0,aval=data; *aval; n++) {
		*ptr++ = (float)atof(aval);
		while (*aval++ != ',') {
			if (!*aval) break;
		}
	}
	return(n);
}

int zgetpar(name, ptr)
char *name;
double *ptr;
{
	int n;
	char *aval,*data,*find_data();
	double atof();
	if (xargc == 1) return(0);
	if (first) getparinit();
	data = find_data(name);
	if(data==NULL) return(0);
	for (n=0,aval=data; *aval; n++) {
		*ptr++ = atof(aval);
		while (*aval++ != ',') {
			if (!*aval) break;
		}
	}
	return(n);
}

int sgetpar(name, ptr)
char *name;
char **ptr;
{
	char *data,*find_data();
	if (xargc == 1) return(0);
	if (first) getparinit();
	data = find_data(name);
	if(data==NULL) return(0);
	*ptr = data;
	return(strlen(*ptr));
}

int bgetpar(name, ptr)
char *name;
bool *ptr;
{
	char *data,*find_data();

	data = find_data(name);
	if(data==NULL) return(0);

	if(*data=='y'||*data=='Y'||
		!strcmp(data,"on")||!strcmp(data,"ON")||
		*data=='1'||
		!strcmp(data,"true")||!strcmp(data,"TRUE"))
	{
		*ptr = true;
	} else if(*data=='n'||*data=='N'||
		!strcmp(data,"off")||!strcmp(data,"OFF")||
		*data=='0'||
		!strcmp(data,"false")||!strcmp(data,"FALSE"))
	{
		*ptr = false;
	}
	return(1);
}

char *find_data(name)
char *name;
{
	ENTRY item,*found_item,*hsearch();

	item.key = name;
	found_item = hsearch(item,FIND);
	if(found_item==NULL) return(NULL);
	return(found_item->data);
}

maxgetpar()
{
	if (xargc == 1) return(0);
	if (first) getparinit();
	return(nmaxgetpar);
}


int ccount(c, s)
char c, *s;
{
	int i, count;
	for (i = 0, count = 0; s[i] != 0; i++)
		if(s[i] == c) count++;
	return(count);
}

getparinit()
{
	int i;
	char *cptr;
	FILE *pffd;            /* file id of parameter file  */
	enum {no,yes,maybe} isparfile;
	int pflen,pfargc,nread,j;
	char *pfname,*pfbuff,**pfargv;

	if(first==false) return;

	first = false;

	/* Check if xargc was initiated */
	if(xargc<=0) err(__FILE__,__LINE__,
		"getpar: xargc=%d--probably not initiated in main",xargc);

	hcreate(xargc+MAXPFSZ/4);

	/* Command Line: */
	tabulate(xargc,xargv);

	/* Parameter File: */
	cptr = find_data("par");
	if(cptr==NULL) cptr = find_data("PAR");
	if(cptr!=NULL) {
		isparfile = yes;
		pfname = cptr;
	} else {
		isparfile = maybe;
		pfname = xargv[1];
	}
	
	 pffd = fopen(pfname, "r");
	 if (NULL == pffd) {
		if(isparfile==yes)
			err(__FILE__,__LINE__,"getparinit: can't fopen %s", pfname);
		return;
	}

	/* Get the length */
	if (-1 == fseek(pffd, 0L, 2))
		err(__FILE__,__LINE__,"getparinit: fseek to end of %s failed",pfname);

	pflen = ftell(pffd);
	if(pflen>MAXPFSZ) {
		if(isparfile==yes)
			err(__FILE__,__LINE__,
			"getparinit: parfile %s too big (size=%d, MAXPFSZ=%d)"
			,pfname,pflen,MAXPFSZ);
		return;
	}

	rewind(pffd);

	pfbuff = (char*) malloc((unsigned)(1+pflen+1));
	if(pfbuff==NULL) {
		if (isparfile=yes)
			err(__FILE__,__LINE__,
			"getparinit: can't malloc %d bytes for pfbuff",pflen);
			return;
	}

	/* Read the parfile */
	pfbuff[0] = 0;
	nread = fread(pfbuff+1,1,pflen,pffd);
	pfbuff[pflen+1] = 0;

	if (nread != pflen) {
		if (isparfile=yes) {
			err(__FILE__,__LINE__,
				"getparinit: fread only %d bytes out of %d from %s",
				nread,pflen,pfname);
		} else {
			warn(__FILE__,__LINE__,
				"getparinit: fread only %d bytes out of %d from %s",
				nread,pflen,pfname);
		}
		return;
	}

	if (EOF == fclose(pffd)) {
		err(__FILE__,__LINE__,
			"getparinit: fclose failed on %s", pfname);
	}

	/* Zap whites in parfile to help in parsing */
	pfargc = white2null(pfbuff,pflen);

	pfargv = (char**) malloc((unsigned)(pfargc*sizeof(char*)));
	if(pfargv==NULL) {
			err(__FILE__,__LINE__,
			"getparinit: can't malloc %d pointers for **pfargv",pfargc);
			return;
	}


	/* Parse the parfile.  Skip over multiple NULLs */
	for (j=1,i=0;j<pflen;j++) {
		if (pfbuff[j] && !pfbuff[j-1]) {
		       pfargv[i++] = pfbuff + j;
		}
	}
	tabulate(pfargc,pfargv);
}

tabulate(argc,argv)
int argc;
char **argv;
{
	int i,m;
	char *cptr;
	ENTRY item;

	for(i=argc-1;i>=0;i--) {
		cptr = (char *) index(argv[i], '=');
		if (cptr==NULL) continue;
		item.key =  argv[i];
		*cptr = (char)0;              /* Need a NULL terminator for item.key */
		if(hsearch(item,FIND)!=NULL) continue;
		item.data = cptr + 1;
		hsearch(item,ENTER);
		/* *cptr = '=';                  /* CANNOT Restore xargv !!! */
		m = ccount(',',item.data) + 1;
		nmaxgetpar = MAX(nmaxgetpar, m);
		nargs++;
	}
}

#define iswhite(c)	((c) == ' ' || (c) == '\t' || (c) == '\n')
/* Replace the whites by nulls.  If we see a non-white and the previous
 * char is a null, this signals the start of a string and we bump the count. */
int white2null(str, len)
char *str; int len;
{
	int i,count;
	bool inquote = false;
	for (i = 1, count = 0; i < len; i++) {
		if (str[i]=='"') inquote=(inquote==true)?false:true; /* Toggle inquote */
		if (!inquote) {
			if (iswhite(str[i])) { /* Is this a new word ? */
				str[i] = NULL;
			} else if (!str[i-1]) { /* multiple whites */
				count++;
			}
		}
	}
	for (i = 1, inquote=false; i < len; i++) {
		if (str[i]=='"') inquote=(inquote==true)?false:true;
		if (inquote) {
			if (str[i+1]!='"') {
				str[i] = str[i+1];
			} else {
				str[i] = NULL;
				str[i+1] = NULL;
				inquote = false;
			}
		}
	}
	str[len] = NULL;
	return(count);
}
