/*
 * iopkge
 */

#include <stdio.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <ctype.h>
#include <errno.h>

#include "../include/su.h"
#include "../include/hdr.h"
#include "../include/local.h"

#define STDIN 0
#define STDOUT 1
#define READONLY 0

extern int xargc;
extern char **xargv;
extern bool verbose;

#define MAXFILES 20
static struct {
	FILE *pfd;
	filetype type;
	int alen;		/* Ascii header length */
	int bpt;		/* Bytes per trace */
	int ns;			/* Time samples per trace *//* <- will go away */
	char *name;
} sufile[] = {
	/* pfd,	type,	alen,	bpt,	ns,	name	*/
	0,	CLOSED,	0,	0,	0,	"UNKNOWN",
	0,	CLOSED,	0,	0,	0,	"UNKNOWN",
	0,	CLOSED,	0,	0,	0,	"UNKNOWN",
	0,	CLOSED,	0,	0,	0,	"UNKNOWN",
	0,	CLOSED,	0,	0,	0,	"UNKNOWN",
	0,	CLOSED,	0,	0,	0,	"UNKNOWN",
	0,	CLOSED,	0,	0,	0,	"UNKNOWN",
	0,	CLOSED,	0,	0,	0,	"UNKNOWN",
	0,	CLOSED,	0,	0,	0,	"UNKNOWN",
	0,	CLOSED,	0,	0,	0,	"UNKNOWN",
	0,	CLOSED,	0,	0,	0,	"UNKNOWN",
	0,	CLOSED,	0,	0,	0,	"UNKNOWN",
	0,	CLOSED,	0,	0,	0,	"UNKNOWN",
	0,	CLOSED,	0,	0,	0,	"UNKNOWN",
	0,	CLOSED,	0,	0,	0,	"UNKNOWN",
	0,	CLOSED,	0,	0,	0,	"UNKNOWN",
	0,	CLOSED,	0,	0,	0,	"UNKNOWN",
	0,	CLOSED,	0,	0,	0,	"UNKNOWN",
	0,	CLOSED,	0,	0,	0,	"UNKNOWN",
	0,	CLOSED,	0,	0,	0,	"UNKNOWN"
};
static bool hisclosed=false;

filetype gettype(fd)
int fd;
{
	return(sufile[fd].type);
}

puttype(fd)
int fd;
{
	sufile[fd].type = statfil(fd);
}

/* typedef enum {BADFILETYPE = -1, CLOSED, TTY, DISK, DIRECTORY, TAPE, PIPE} filetype; */
char *strtype(ftype)
filetype ftype;
{
	switch(ftype) {

		case BADFILETYPE:	return("BADFILETYPE");

		case CLOSED:		return("CLOSED");

		case TTY:		return("TTY");

		case DISK:		return("DISK");

		case DIRECTORY:		return("DIRECTORY");

		case TAPE:		return("TAPE");

		case PIPE:		return("PIPE");
	}
	return("UNKNOWN FILE TYPE");
}

/*
 * input
 */
int input()
{
	static bool called=false;
	int infd;

	if(called==true) {
		err("input() can't be called more than once");
	} else {
		called = true;
	}

	if(!strcmp(xargv[1],"-")) selfdoc();

	/* STDIN ? */
	sufile[STDIN].type = statfil(STDIN);

	if( sufile[STDIN].type==DISK || sufile[STDIN].type==TAPE || sufile[STDIN].type==PIPE ) {
/* 		gname(STDIN,); */
/* 		malloc */
/* 		stcpy */
		sufile[STDIN].pfd = stdin;
		return(STDIN);
	}

	if(xargc==1) {
		warn("Unspecified or Illegal input ... aborting");
		selfdoc();
	}

	infd = open(xargv[1],READONLY);
	if(infd<0) err("can't open %s",xargv[1]);

	sufile[infd].type = statfil(infd);
	sufile[infd].name = xargv[1];

	if( !(sufile[infd].type==DISK ||
	      sufile[infd].type==TAPE ||
	      sufile[infd].type==PIPE ))
		err("Illegal input file type (filetype of %s is %s)",
			sufile[infd].name,strtype(sufile[infd].type));

	sufile[infd].pfd = fdopen(infd,"r");

	return(infd);
}

/*
 * suopen
 */
int suopen(fname)
char *fname;
{
	int infd;

	infd = open(fname,READONLY);
	if(infd<0) err("can't open %s",fname);

	sufile[infd].type = statfil(infd);
	sufile[infd].name = fname;

	if( !(sufile[infd].type==DISK ||
	      sufile[infd].type==TAPE ||
	      sufile[infd].type==PIPE ))
		err("Illegal input file type (filetype of %s is %s)",
			sufile[infd].name,strtype(sufile[infd].type));

	sufile[infd].pfd = fdopen(infd,"r");

	return(infd);
}

/*
 * sucreat
 */
int sucreat(fname)
char *fname;
{
	int outfd;

	outfd = creat(fname,0664);
	if(outfd<0) err("can't creat %s\n",fname);

	sufile[outfd].name = fname;

	sufile[outfd].type = statfil(outfd);

	if( !(sufile[outfd].type==DISK ||
	      sufile[outfd].type==TAPE ||
	      sufile[outfd].type==PIPE ))
		warn("Output file type is %s",strtype(sufile[outfd].type));

	sufile[outfd].pfd = fdopen(outfd,"w");

	return(outfd);
}

/*
 * output
 */
int output()
{
	static bool called=false;
	int outfd;
	char fname[128];

	if(called==true) {
		err("output can't be called more than once");
	} else {
		called = true;
	}

	if(sgetpar("out",fname)) {

		outfd = creat(fname,0664);
		if(outfd<0) err("can't creat %s\n",fname);
		sufile[outfd].name = fname;

	} else {

		outfd = STDOUT;
/* 		gname(outfd,); */
/* 		malloc */
/* 		stcpy */

	}

	sufile[outfd].type = statfil(outfd);

	if( !(sufile[outfd].type==DISK || sufile[outfd].type==TAPE || sufile[outfd].type==PIPE ))
		warn("Output file type is %s",strtype(sufile[outfd].type));

	sufile[outfd].pfd = fdopen(outfd,"w");

	return(outfd);
}

/* gettr - get a segy trace from stdin
 *
 * Returns:
 *	int: number of bytes read on current trace (0 after last trace)
 *
 * Synopsis:
 *	int gettr(fd,tp)	for standard float traces
 *	Sutrace *tp;
 *
 * Example:
 *	Sutrace tr;
 *	...
 *	while (gettr(0,&tr)) {
 *		tr.offset = abs(tr.offset);
 *		puttr(1,&tr);
 *	}
 *	...
 *
 */

int gettr(fd,tp)
int fd;
Sutrace *tp;		/* pointer to segy trace */
{
	int nread;

	suckfile(fd);

	nread = pread(fd, (char*)tp, sufile[fd].bpt);

	if(nread==0) return(0);

	if(nread!=sufile[fd].bpt) {
	  err("gettr: read error: read %d bytes out of %d",
	  nread,sufile[fd].bpt);
	}

	if (tp->ns != sufile[fd].ns) {
	    err("gettr: header ns field = %d %s %d",
		tp->ns, "differs from binary header =", sufile[fd].ns);
	}

	return(nread);
}

/* puttr - put a segy trace on stdout
 *
 * Returns:
 *	int: number of bytes written on current trace (exit on error)
 *
 * Synopsis:
 *	int puttr(fd,tp)	for standard float traces
 *	Sutrace *tp;
 *
 * Example:
 *	Sutrace tr;
 *	...
 *	while (gettr(0,&tr)) {
 *		tr.offset = abs(tr.offset);
 *		puttr(1,&tr);
 *	}
 *	...
 *
*/

int puttr(fd,tp)
int fd;
Sutrace *tp;		/* pointer to segy trace */
{
	int nwrite;

	suckfile(fd);

	if (tp->ns != sufile[fd].ns) {
	    err("puttr: header ns field = %d %s %d",
		tp->ns, "differs from binary header =", sufile[fd].ns);
	}

	nwrite = write(fd, (char*)tp, sufile[fd].bpt);

	if(nwrite!=sufile[fd].bpt) {
	  err("puttr: write error wrote %d bytes out of %d",
	  nwrite,sufile[fd].bpt);
	}

	return(nwrite);
}

/* gettra - get disk trace by trace number
 *
 * Returns number of bytes read
 *
*/


#include "../include/sysV.h"		/* <<< PATCH for the HP >>> */

int gettra(fd,tp,itr)
Sutrace *tp;
int fd,itr;
{
	long nseek,rseek;

	if(sufile[fd].type!=DISK) err("gettra: non disk sufile");

	/* Position file pointer at start of requested trace */
	nseek = sufile[fd].alen + sizeof(Subhed) + itr*sufile[fd].bpt;

	rseek = lseek(fd, nseek, L_SET);

	if (rseek != nseek) {
		err("gettra: lseek failed (rseek=%d != nseek=%d",rseek,lseek);
	}

	return(gettr(fd,tp));
}

int puttra(fd,tp,itr)
Sutrace *tp;
int fd,itr;
{
	long nseek,rseek;

	if(sufile[fd].type!=DISK) err("puttra: non disk sufile");

	/* Position file pointer at start of requested trace */
	nseek = sufile[fd].alen + sizeof(Subhed) + itr*sufile[fd].bpt;

	rseek = lseek(fd, nseek, L_SET);

	if (rseek != nseek) {
		err("puttra: lseek failed (rseek=%d != nseek=%d",rseek,lseek);
	}


	return(puttr(fd,tp));
}

/* pread, pfread - read from a pipe
 *
 * Returns:
 *	int: number of bytes read or -1 on error
 *
 * Synopsis:
 *	pread(fd, buf, n)
 *	int fd;		file descriptor
 *	char *buf;	pointer to buffer
 *	int n;		number of bytes requested
 *
 *	pfread(buf, itemsize, nitems, stream)
 *	char *buf;	pointer to buffer
 *	int itemsize;	sizeof(item pointed to)
 *	int nitems;	number of items requested
 *	FILE *stream;	input stream
 *
 * Credits:
 *	CWP: Shuki
 *
 */

int pread(fd, buf, n)
int fd, n;
char *buf;
{
	int nread, ntotal = 0;

/* 	fprintf(stderr, "pread: %d bytes to read\n", n); */
	while (n) {
		switch (nread = read(fd, buf, n)) {
		case -1:
			warn("pread: read failed");
		case 0:	/* no more traces (or premature pipe shutdown) */
/* 			fprintf(stderr, "pread: nread=%d\n", nread); */
			return(ntotal);
		default:
/* 			fprintf(stderr, "pread: nread=%d\n", nread); */
			ntotal += nread;
			n -= nread;
			buf += nread;
		break;
		}
/* 		fprintf(stderr,"    pread: just read %d, %d left\n",nread,n); */
	}
	return(ntotal);
}


pfread(buf, itemsize, nitems, stream)
char *buf;
int itemsize;
int nitems;
FILE *stream;
{
	int nread, ntotal = 0;

	while(nitems) {
		switch (nread = fread(buf, itemsize, nitems, stream)) {
		case -1:
			syswarn("pfread: read failed");
			return(-1);
		case 0:	/* finished */
			if (!feof(stream)) {	/* dubious test */
				err("pfread: zero bytes read, but not EOF");
			}
			return(ntotal);
		default:
			if (ferror(stream)) {
				err("pfread: I/O error from ferror");
			}
			ntotal += nread;
			nitems -= nread;
			buf += nread*itemsize;
		break;
		}
	}
	return(ntotal);
}

/* rew - rewind file */

rew(fd)
int fd;
{
	if(lseek(fd,0L,0) == -1)
		syserr("rew: rewind failed");
}

suckfile(fd)
int fd;
{
	if(fd>=MAXFILES) {
		err("Illegal file: fd=%d bigger than MAXFILES=%d",
						fd,MAXFILES);
	}

	if( !(sufile[fd].type==DISK ||
	      sufile[fd].type==TAPE ||
	      sufile[fd].type==PIPE )) {
		err("Illegal file: type=%s",strtype(sufile[fd].type));
	}

	if(sufile[fd].alen<1) {
		err("Illegal file: alen=%d less than 1 (null termination)",
					sufile[fd].alen);
	}

	if(sufile[fd].bpt<HDRBYTES) {
		err("Illegal file: bpt=%d less than HDRBYTES=%d",
					sufile[fd].bpt,HDRBYTES);
	}

	if(sufile[fd].ns<0||sufile[fd].ns>SY_NDAT) {
		err("Illegal file: ns=%d (SY_NDAT=%d)",
					sufile[fd].ns,SY_NDAT);
	}
}

/* statfil - determine type of file from file descriptor
 *
 * Returns:
 *	filetype
 *
 * Synopsis:
 *	filetype statfil(fd)
 *	int fd;	  file descriptor
 *
 * Credits:
 *	SEP: Einar, Stew
 *	CWP: Jack
 *
 * Example:
 *	filetype ftype;
 *	...
 *	ftype = statfil(STDOUT)
 *	if (ftype = TTY) {
 *		...
 *
 * Notes:
 *	/dev/null is handled as a special case and classified
 *	as a disk file.
 *
 *	The SEP isapipe and isatape subroutines have been junked and
 *	most of the checks have been TENTATIVELY simplified.
 *
 *	The check on tapes demands the RAW interface.  This is moot
 *	and easily changed.
 *
 *	A check for DIRECTORIES was added since it doesn't
 *	cost much, but the newer items such as FIFOS and SOCKETS
 *	have been ignored, though they could be treated as was the
 *	DIRECTORY type.  If other DEVICES become of interest,
 *	they can be treated as was /dev/null.  If such new types
 *	are added, the typedef "filetype" h must be extended.
 */


filetype statfil(fd)
int fd;

{
	struct stat sfd;	/* for passed fd	*/
	struct stat sdn;	/* for /dev/null	*/
	struct stat smt;	/* for tape devices	*/
	char tapestring[50];	/* mtdevice strings	*/

	if (-1 == fstat(fd, &sfd)) {
		syswarn("statfil: fstat failed");
		return(BADFILETYPE);
	}

	/* PIPE ? */
	if (isatty(fd))  return(TTY); /* isatty() is a UNIX subroutine */

	/* DISK ? */
	/* Standard stat test for regular file */
	if ((sfd.st_mode & S_IFMT) == S_IFREG) return(DISK);

	/* DIRECTORY ? */
	/* Standard stat test for directory */
	if ((sfd.st_mode & S_IFMT) == S_IFDIR) return(DIRECTORY);

	/* TAPE ? */
	/* Detect tape by comparing its major device number to
	   /dev/RMTDEVICE (as defined in local.h).  Complain and exit
	   if raw interface not used.
	*/
	strcpy(tapestring, RMTDEVICE);
	if (0 == stat(tapestring, &smt) &&
	     HIGHBYTE(sfd.st_rdev) == HIGHBYTE(smt.st_rdev)) {
			return(TAPE);
	}

	strcpy(tapestring, MTDEVICE);
	if (0 == stat(tapestring, &smt) &&
	     HIGHBYTE(sfd.st_rdev) == HIGHBYTE(smt.st_rdev)) {
			err("statfil: use rmt instead of mt");
	}

	/* PIPE ? */
	/* Only pipes have 0 links */
	if (!sfd.st_nlink) return(PIPE);

	/* DEVNULL ? */
	/* Detect file as /dev/null by its device number and
	   classify it as a disk.
        */
	if (0 == stat("/dev/null", &sdn) &&
		sfd.st_rdev == sdn.st_rdev) return(DISK);

	warn("statfil: couldn't determine file type");
	return(BADFILETYPE);
}

/*
 * apass
 */
int apass(infd,outfd,suout)
int infd,outfd;
bool suout;
{
	int n;
	char c;

	if(sufile[infd].alen)
		err("apass: nonzero alen=%d",sufile[infd].alen);
	if(outfd>=0) if(sufile[outfd].alen)
		err("apass: nonzero alen=%d",sufile[outfd].alen);

	for(n=0;;n++) {
		if(read(infd,&c,1)!=1) err("apass: read error");
		if(c==0) break;
		if(outfd!= -1) {
			if(suout) write(outfd,&c,1);
			if(outfd!=STDOUT)
				write(STDOUT,&c,1);
			if(verbose) fprintf(stderr,"%c",c);
		}
	}

	sufile[infd].alen = n + 1;	/* includes the null termination */
	sufile[outfd].alen = n;		/* null termination added later */

	return(n);
}

/*
 * bpass
 */
bpass(infd,outfd,bh)
int infd,outfd;
Subhed *bh;
{
	getbh(infd,bh);
	putbh(outfd,bh);
}

/*
 * getbh
 */
int getbh(fd,abh)
int fd;
Subhed *abh;
{
	int nread;

/* 	static bool called=false; */
/* 	if(called==true) err("getbh: called more them once"); */
/* 	called = true; */
	
	if(fd== -1) return(0);

	nread = pread(fd,abh,sizeof(*abh));

	sufile[fd].ns  = abh->ns;
	sufile[fd].bpt = HDRBYTES + abh->ns * abh->esize;

	suckfile(fd);

	return (nread);
}

/*
 * putbh
 */
putbh(fd,abh)
int fd;
Subhed *abh;
{
	int nwrite;
	static bool called=false;

	if(called==true) err("putbh: called more them once");
	called = true;
	
	if(fd== -1) return(0);

	sufile[fd].ns  = abh->ns;
	sufile[fd].bpt = HDRBYTES + abh->ns * abh->esize;

	suckfile(fd);

	nwrite = write(fd,abh,sizeof(*abh));

	if(nwrite!=sizeof(*abh))
		err("putbh: write error");

	return (nwrite);
}

/*
 * hislog
 */
hislog(ifd)
int ifd;
{
	int i;
	char st1[128],st2[128],buff[512];

	i = time(0);
	sprintf(st1,ctime(&i));
	strtr(st1,st2,'\n',' ');
	sprintf(buff,"\n\n# %s\tUser=%s\tUserID=%d\n",st2,getlogin(),getuid());

	sufile[ifd].alen += fprintf(sufile[ifd].pfd,buff);
	if(verbose) fprintf(stderr,buff);

	for(i=0;i<xargc;i++) {
		sufile[ifd].alen += fprintf(sufile[ifd].pfd,"%s ",xargv[i]);
		if(verbose) fprintf(stderr,"%s ",xargv[i]);
	}

	gname(0,st1) ; gname(1,st2);

	sufile[ifd].alen += fprintf(sufile[ifd].pfd,"< %s > %s \n",st1,st2);
	if(verbose) fprintf(stderr,"< %s > %s \n",st1,st2);
}

strtr(s1,s2,c1,c2)
char *s1,*s2;
int c1,c2;
{
	int i;
	for(i=0;s1[i]!=0;i++) {
		if(s1[i]==c1) s2[i] = c2;
		else s2[i] = s1[i];
	}
}

/*
 * hispr
 * Example hispr(fd,"v=%f\n",v);
 */
/*VARARGS0*/
#include <varargs.h>
void hispr(va_alist)
va_dcl
{
	int ifd;
	va_list args;
	char *format;
	char buff[512];

	if(hisclosed) err("hispr: can't write ... closed history");

	va_start(args);

	ifd = va_arg(args, int );

	format = va_arg(args, char *);

	vsprintf(buff, format, args);

	sufile[ifd].alen += fprintf(sufile[ifd].pfd, buff);

	if(verbose) fprintf(stderr, buff);

	va_end(args);
}

/*
 * hisclose
 */
hisclose(fd)
int fd;
{
	char z=0;

	/* CHECK THAT HISTORY IS NOT ALREADY CLOSED */
	if(hisclosed) err("hisclose: history already closed");

	hispr(fd,"__________________________________________________________\n");

	hisclosed = true;


	/* WRITE A ZERO */
	if(fwrite(&z,1,1,sufile[fd].pfd)!=1) err("hisclose: fwrite error");
	fflush(sufile[fd].pfd);

	/* ASCII HEADER LENGTH INCLUDES THE ZERO BYTE */
	sufile[fd].alen++;
}
