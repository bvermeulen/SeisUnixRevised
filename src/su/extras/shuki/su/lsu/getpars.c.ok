/*
 * getpars.c
 *
 * History
 *      1986 Shuki Ronen:
 *           Complete rewrite of SEP's getpar().
 *    3/1987 Jack Cohen:
 *           Cosmetics.
 *    3/1987 Shuki Ronen:
 *           maxgetpar()
 *    7/1987 Shuki Ronen:
 *           Optional parfile name is argv[1].
 *    9/1987 Shuki Ronen:
 *           A major rewrite: breaking the single getpar(type,name,ptr)
 *           to many Xgetpar(name,ptr) X=[ifzulh].
 *           Motivation: the old (SEP's) specification could not be ported
 *           to machines sensitive to inconsistent argument calls, such as
 *           Cray/Unicos
 *    2/1988 Shuki Ronen:
 *           Added bgetpar()
 *    9/1988 Shuki Ronen:
 *           Hashing via hsearch(3)
 */
#include <stdio.h>
#include <ctype.h>
#include <search.h>

#define MAXPFSZ 65536
#define MAX(x,y) (x)>(y)?(x):(y)

typedef enum {false,true} bool;

extern int xargc;
extern char **xargv;

static ENTRY *argtbl;       /* symbol table */
static int nargs;           /* number of args that parse */
static bool first = true;   /* first entry flag */

static char SccsId[]="%W% %G%\n";

int igetpar(name, ptr)
char *name;                 /* External name of parameter */
int *ptr;                   /* Pointer to parameter value */
{
	int i,n;
	int getparindex();
	char *aval;
	int atoi();

	if (xargc == 1) return(0);
	if (first) getparinit(); /* Tabulate command line and parfile */
	i = getparindex(name);   /* Get parameter index */
	if (i < 0) return(0);    /* Not there */
	/* Convert vector ascii (e.g. 1,2,3 to long */
	for (n=0,aval=argtbl[i].data; *aval; n++) {
		*ptr++ = atoi(aval);
		while (*aval++ != ',') {
			if (!*aval) break;
		}
	}
	return(n);
}

int lgetpar(name, ptr)
char *name;
long *ptr;
{
	int i,n;
	int getparindex();
	char *aval;
	long atol();

	if (xargc == 1) return(0);
	if (first) getparinit();
	i = getparindex(name);
	if (i < 0) return(0);
	for (n=0,aval=argtbl[i].data; *aval; n++) {
		*ptr++ = atol(aval);
		while (*aval++ != ',') {
			if (!*aval) break;
		}
	}
	return(n);
}

int ugetpar(name, ptr)
char *name;
unsigned short *ptr;
{
	int i,n;
	int getparindex();
	char *aval;
	long atol();

	if (xargc == 1) return(0);
	if (first) getparinit();
	i = getparindex(name);
	if (i < 0) return(0);
	for (n=0,aval=argtbl[i].data; *aval; n++) {
		*ptr++ = (unsigned short) atol(aval);
		while (*aval++ != ',') {
			if (!*aval) break;
		}
	}
	return(n);
}

int hgetpar(name, ptr)
char *name;
short *ptr;
{
	int i,n;
	int getparindex();
	char *aval;
	int atoi();

	if (xargc == 1) return(0);
	if (first) getparinit();
	i = getparindex(name);
	if (i < 0) return(0);
	for (n=0,aval=argtbl[i].data; *aval; n++) {
		*ptr++ = atoi(aval);
		while (*aval++ != ',') {
			if (!*aval) break;
		}
	}
	return(n);
}

int fgetpar(name, ptr)
char *name;
float *ptr;
{
	int i,n;
	int getparindex();
	char *aval;
	double atof();

	if (xargc == 1) return(0);
	if (first) getparinit();
	i = getparindex(name);
	if (i < 0) return(0);
	for (n=0,aval=argtbl[i].data; *aval; n++) {
		*ptr++ = atof(aval);
		while (*aval++ != ',') {
			if (!*aval) break;
		}
	}
	return(n);
}

int zgetpar(name, ptr)
char *name;
double *ptr;
{
	int i,n;
	int getparindex();
	char *aval;
	double atof();

	if (xargc == 1) return(0);
	if (first) getparinit();
	i = getparindex(name);
	if (i < 0) return(0);
	for (n=0,aval=argtbl[i].data; *aval; n++) {
		*ptr++ = atof(aval);
		while (*aval++ != ',') {
			if (!*aval) break;
		}
	}
	return(n);
}

int sgetpar(name, ptr)
char *name;
char *ptr;
{
	int i;
	int getparindex();

	if (xargc == 1) return(0);
	if (first) getparinit();
	i = getparindex(name);
	if (i < 0) return(0);
	strcpy(ptr,argtbl[i].data);
	return(strlen(ptr));
}

int bgetpar(name,ptr)
char *name;
bool *ptr;
{
	int i;
	char buff[128];

	i = sgetpar(name,buff);

	if(i)
	if(*buff=='y'||*buff=='Y'||!strcmp(buff,"on")||
		!strcmp(buff,"ON")||*buff=='1'||!strcmp(buff,"true")) {
		*ptr = true;
	} else if(*buff=='n'||*buff=='N'||!strcmp(buff,"off")||
		!strcmp(buff,"OFF")||*buff=='0') {
		*ptr = false;
	}
	return(i);
}

/*
 * Find the index of the argument.  We want later references to
 * a given name to replace earlier ones, hence backwards search.
 */
getparindex(name)
char *name;
{
	int i;
	for (i = nargs - 1; i >= 0 ; i--) {
		if (!strcmp(name, argtbl[i].key)) break;
	}
	return(i);
}

getparinit()
{
	int i,j,nread;
	static int targc;      /* total number of args   */
	static char **targv;   /* pointer to arg strings  */
	static char *pfname;   /* name of parameter file  */
	FILE *pffd;            /* file id of parameter file  */
	int pflen;             /* length of parameter file in bytes */ 
	static int pfargc;     /* arg count from parameter file */
	bool parfile;          /* parfile existence flag  */
	int argstrlen;
	char *argstr,*pargstr; /* storage for command line and parameter
	                          file args */
	char *getpfname();     /* return name of parameter file */
	int white2null();      /* deliminate arg strings from parameter file
	                          with (possibly multiple) NULLs and return a
	                          count of the strings */
	int tabulate();        /* install symbol table   */

	first = false;

	/* Check if xargc was initiated */
	if(xargc<=0) err(__FILE__,__LINE__,
		"getpar: xargc=%d--probably not initiated in main",xargc);

	/* Space needed for command line arguments */
	for (i=1, argstrlen=0; i<xargc; i++) {
		argstrlen += strlen(xargv[i]) + 1;
	}

	/* Get parfile name if there is one */
	if (pfname = getpfname()) {
		parfile = true;
	} else {
		parfile = false;
		/* But... allow argv[1] to be the par file */
			/* Can you open xargv[1] and isn't it too long? */
		if ( (NULL!=(pffd=fopen(xargv[1],"r"))) &&
		     (fseek(pffd,0,2)==0) && (ftell(pffd)<MAXPFSZ) ) {
			rewind(pffd);
			parfile = true;
			/* The parfile candidate should not contain
			   control or non ascii characters */
			while (EOF != (i = getc(pffd))) {
				if (iscntrl(i) || !isascii(i)) {
					parfile = false;	/* Flunked */
					break;
				}
			}
			fclose(pffd);
			if (parfile) pfname = xargv[1];
		}
	}

	if (parfile) {
	 	if (NULL == (pffd = fopen(pfname, "r"))) err(__FILE__,__LINE__,
			"getpar: can't fopen %s", pfname);
		/* Get the length */
		if (-1 == fseek(pffd, 0L, 2)) err(__FILE__,__LINE__,
			"getpar: fseek to end of %s failed",pfname);
		pflen = ftell(pffd);
		rewind(pffd);
		argstrlen += pflen;
	} else {
		pflen = 0;
	}

	/* Allocate space for command line and parameter file
		plus nulls at the ends to help with parsing. */
	if (NULL==(argstr=(char*)calloc((unsigned) 1+argstrlen+1,1)))
		err(__FILE__,__LINE__,"getpar: can't calloc space for %s",pfname);

	if(parfile) {
		/* Read the parfile */
		nread = fread(argstr + 1, 1, pflen, pffd);
		if (nread != pflen) err(__FILE__,__LINE__,
			"getpar: fread only %d bytes out of %d from %s",
			nread,pflen,pfname);
		if (EOF == fclose(pffd)) err(__FILE__,__LINE__,
			"getpar: fclose failed on %s", pfname);

		/* Zap whites in parfile to help in parsing */
		pfargc = white2null(argstr, pflen);

	} else {
		pfargc = 0;
	}

	/* Total arg count */
	targc = pfargc + xargc - 1;

	/* Allocate space for total arg pointers */
	targv = (char **) malloc((unsigned) (targc*sizeof(char*)));

	if(parfile) {
		/* Parse the parfile.  Skip over multiple NULLs */
		for (j = 1, i = 0; j < pflen; j++) {
			if (argstr[j] && !argstr[j-1]) {
			       targv[i++] = argstr + j;
			}
		}
	} else {
		i = 0;
	}

	/* Copy command line arguments */
	for (j = 1, pargstr = argstr + pflen + 2; j < xargc; j++) {
		strcpy(pargstr,xargv[j]);
		targv[i++] = pargstr;
		pargstr += strlen(xargv[j]) + 1;
	}

	/* Allocate space for the pointer table */
	argtbl = (ENTRY*) malloc((unsigned) (targc*sizeof(ENTRY)));

	/* Tabulate targv */
	tabulate(targc, targv);
}

#define PFNAME "par="
char *getpfname()
{
	int i, pfnamelen;

	pfnamelen = strlen(PFNAME);
	for (i = xargc-1 ; i > 0 ; i--) {
		if(!strncmp(PFNAME, xargv[i], pfnamelen)
		    && strlen(xargv[i]) != pfnamelen) {
			return(xargv[i] + pfnamelen);
		}	
	}
	return(NULL);
}

#define iswhite(c)	((c) == ' ' || (c) == '\t' || (c) == '\n')

/* Replace the whites by nulls.  If we see a non-white and the previous
 * char is a null, this signals the start of a string and we bump the count.
 */
int white2null(str, len)
char *str; int len;
{
	int i,count;
	bool inquote = false;
	for (i = 1, count = 0; i < len; i++) {
		if (str[i]=='"') inquote=(inquote==true)?false:true;
		if (!inquote) {
			if (iswhite(str[i])) { /* Is this a new word ? */
				str[i] = NULL;
			} else if (!str[i-1]) { /* multiple whites */
				count++;
			}
		}
	}
	for (i = 1, inquote=false; i < len; i++) {
		if (str[i]=='"') inquote=(inquote==true)?false:true;
		if (inquote) {
			if (str[i+1]!='"') {
				str[i] = str[i+1];
			} else {
				str[i] = NULL;
				str[i+1] = NULL;
				inquote = false;
			}
		}
	}
	str[len] = NULL;
	return(count);
}

int tabulate(argc, argv)
int argc;
char **argv;
{
	int i;
	char *eqptr;

	/* Tabulate arguments (if we need to optimize, try
	 * defining argvi = *(argv + i) in the i-loop and insert it
	 * in place of the argv[i]'s).
	 */
	for (i = 0, nargs = 0 ; i < argc; i++) {
		eqptr = (char *) index(argv[i], '=');
		if (eqptr) {
			argtbl[nargs].key = argv[i];
			argtbl[nargs].data = eqptr + 1;
			*eqptr = (char)0;

			/* Debugging dump */
/* 			fprintf(stderr, */
/* 			"argtbl[%d]: name=%s data=%s\n", */
/* 			nargs,argtbl[nargs].name,argtbl[nargs].data); */

			nargs++;
		}
	}
}


maxgetpar()
{
	static int m = 1;                 /* sometimes nargs = 0 */
	static bool localfirst = true;
	int i, mm;

	if (xargc == 1) return(0);
	if (first) getparinit();

	if (localfirst) {
		localfirst = false;
		for (i=0; i<nargs; i++) {
			mm = ccount(',',argtbl[i].data) + 1; /* 1,2,3 */
			m = MAX(m, mm);
		}
	}
	return(m);
}


int ccount(c, s)
char c, *s;
{
	int i, count;
	for (i = 0, count = 0; s[i] != 0; i++)
		if(s[i] == c) count++;
	return(count);
}
