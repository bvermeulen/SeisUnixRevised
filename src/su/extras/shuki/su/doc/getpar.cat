


     GGGGEEEETTTTPPPPAAAARRRR((((1111llll))))                     ((((LLLLSSSSUUUU))))                   GGGGEEEETTTTPPPPAAAARRRR((((1111llll))))




     NNNNAAAAMMMMEEEE
          igetpar(),  lgetpar(),  ugetpar(),   hgetpar(),   fgetpar(),
          zgetpar(),  sgetpar(), bgetpar() - get input parameters from
          command line and/or parfile.


     SSSSYYYYNNNNOOOOPPPPSSSSIIIISSSS
               int igetpar(name, ptr)
               char *name;
               int *ptr;

               int lgetpar(name, ptr)
               char *name;
               long *ptr;

               int ugetpar(name, ptr)
               char *name;
               unsigned short *ptr;

               int hgetpar(name, ptr)
               char *name;
               short *ptr;

               int fgetpar(name, ptr)
               char *name;
               float *ptr;

               int zgetpar(name, ptr)
               char *name;
               double *ptr;

               int sgetpar(name, ptr)
               char *name;
               char *ptr;

               int bgetpar(name,ptr)
               char *name;
               bool *ptr;

               int maxgetpar()


     DDDDEEEESSSSCCCCRRRRIIIIPPPPTTTTIIIIOOOONNNN
          _X_g_e_t_p_a_r( _n_a_m_e, _p_t_r ) are a set of routines to  handle  input
          parameters  in  a  manner which is similar (but not the same
          as) the old Fortran namelists.

          The argument _n_a_m_e is name the variable name on  the  command
          line.

          The argument _p_t_r is a pointer to a variable that can recieve



     Hewlett-Packard Company       - 1 -                  Mar 28, 1988






     GGGGEEEETTTTPPPPAAAARRRR((((1111llll))))                     ((((LLLLSSSSUUUU))))                   GGGGEEEETTTTPPPPAAAARRRR((((1111llll))))




          the value.

          The arguments are  normally  taken  from  the  command  line
          However  if in the command line the argument _p_a_r=_f_i_l_e_n_a_m_e is
          encountered, then _f_i_l_e_n_a_m_e is searched in addition.

          In the parameter files individual  parameter  specifications
          are separated from each other by any number of blanks, tabs,
          or newlines.

          If the variable is listed twice on  the  command  line,  the
          last variable is used.  The command line arguments overrides
          the parfile.  If the command line is
               a.out i=1 i=2
          _X_g_e_t_p_a_r  will see the i=2 argument.

          Vectors arguments may be input using commas.
          For example, with i=1,2,3 in the command line or the parfile,
          _X_g_e_t_p_a_r("_i",_i) will get _i[_0]=_1, _i[_1]=_2, _i[_2]=_3.
          (_s_g_e_t_p_a_r is excluded).
          Use this form of input if the program is expecting a vector or else
          you will probably overwrite some variable or cause a memory fault.

          _m_a_x_g_e_t_p_a_r() return the maximum possible return value of any
          _X_g_e_t_p_a_r (except _s_g_e_t_p_a_r().


     EEEEXXXXAAAAMMMMPPPPLLLLEEEE
          int xargc; char **xargv;
          main(ac,av)
          int ac; char **av;
          {
               float x = 1.2345;
               int ix = 7;
               int *v,nv;
               char title[25] = "no title";

               /* SET UP EXTERNAL VALUES */
               xargc= ac; xargv= av;

               /* GET ARGS (IF ANY) */

               sgetpar("title",title);

               if(fgetpar("x",&x))
                    printf("Getparred ");
               else
                    printf("Default ");
               printf("x=%f0,x);

               igetpar("ix",&ix);



     Hewlett-Packard Company       - 2 -                  Mar 28, 1988






     GGGGEEEETTTTPPPPAAAARRRR((((1111llll))))                     ((((LLLLSSSSUUUU))))                   GGGGEEEETTTTPPPPAAAARRRR((((1111llll))))




               v = (int*) malloc( maxgetpar()*sizeof(int) );
               nv = igetpar("v",v);

               ...
             }


     DDDDIIIIAAAAGGGGNNNNOOOOSSSSTTTTIIIICCCCSSSS
          NOT READY


     RRRREEEETTTTUUUURRRRNNNN
          The number  of  arguments  gotten.   _s_g_e_t_p_a_r()  returns  the
          string  length.   _m_a_x_g_e_t_p_a_r()  return  the  maximum possible
          return value of any _X_g_e_t_p_a_r (except _s_g_e_t_p_a_r().


     SSSSEEEEEEEE AAAALLLLSSSSOOOO
          getopt(3)


     AAAAUUUUTTTTHHHHUUUURRRR
          Shuki































     Hewlett-Packard Company       - 3 -                  Mar 28, 1988



