CURRENT SU ISSUES

Issue 1. (the only substantial one)

Background:
The original design of SU uses only <, > and | for flow control with
parameters occuring on the command line in arbitrary order.

The < facility is used to input seismic data files to the first program
in a pipeline.

The > facility is used output seismic data from the last program in a
pipeline.

The | facility is used to pass seismic data from one program to another.

Parameter passing is by namelist format: parname=parvalue, where
"parvalue" might be a vector (eg. 2,3,4,5.2,120.45).

Because in some cases a fair number of parameters might have to be
specified, a special parameter "par" is used to cite a FILE of namelist
parameter statements (eg. par=myparfile).  And codes which require a
substantial set of related parameters (eg. a velocity profile), may
specify other parameters which are filenames (eg. velf=velprofile.23).
In an attempt (futile, I know) to maintain consistency in parameter
naming, there is the file "dictionary" in this directory purports to
list the names now in use.

This parameter passing concept goes back to Claerbout and his students
of the Clayton era and I have found it convenient to use.  Our
implementation of the namelist parameter facility was written by
Shuki.  It is wearing well.

The summary of the 4 concepts just presented is that our seismic
processing language is UNIX augmented by the Claerbout parameter
passing facility.

Typical usage:

% suwind <gold.shot count=200 | susort | sustack >gold.stack

or equivalently:

% suwind count=200 <gold.shot | susort | sustack >gold.stack

The issue:
Just before Shuki left he designed a change (implemented by Seb)
that I have regarded with jaundiced eye.  This change allows the
specification of the input seismic data file by a means other
than < or |.  Specifically, the first argument is tested to see
if it is a file.  If it is, an attempt to open it is made.  If that
works then it is treated as seismic data.

Thus, the user has the convenience that the "<" can be omitted:

% suwind gold.shot count=200 | susort | sustack >gold.stack

does the same job as the two previous version.  However,

% suwind count=200 gold.shot | susort | sustack >gold.stack

fails.  Zonks would occur if the first argument was a file that was not
seismic data, although this is an unlikely happenstance (an "="in a
filename?).  However, the first zonk is quite likely for new users who
generalize from being allowed to omit the "<" in the first argument to
assuming that SU looks for seismic data in every argument.

Thus the new "feature" destroys the non-positional UNIX treatment of
arguments (a few Unix commands violate this; these exceptions cause a
lot of pain and confusion).

And symmetry demands equal treatment of output.  Perhaps the last
argument on the command line should be examined to see if it is a file
and if can be opened for writing and if so, the seismic data dumped
into it?  No!  Of course not!

A sidelight of the special input data convention is that the standard
beginning of SU programs must be changed for programs that do
not take seismic data as input (notably synthetic data generators).

A further sidelight is that the basic get_trace subroutine, which
used to have the syntax:
gettr(&trace)
has been given a second argument:
gettr(input_file_descriptor, &trace)
although aside from the "<" suppression only one partially written program
would need the extra parameter and for symmetry, the put_trace sub:
puttr(&trace)
has also been given a second argument:
puttr(input_file_descriptor, &trace)
that is currently not used by any program.  I do think we will need the
two argument form of both calls, but think the common case of one
argument should be supported too.  This occurs over and over again
in C, where the underlying function is

name1(xxx, file_indicator, yyy)

but for the common use where "file_indicator" is the obvious one
(ie. "stdin" for an input routine; "stdout" for an output routine), the

name2(xxx,yyy)

form is available and implemented as a macro involving "name1."


Issue 2.

When the user forgets to redirect a stream of data from the terminal,
he evokes the verbose self documentation message.  This may be great
for the novice, but it wears thin quickly.  I don't like getting my
screen filled every time my finger slips.  Since the user is able to
easily request the self-doc, isn't a one-line message, like:

stdin can't be a tty

sufficient?


Note: for getting self-doc, the rule is:
% suprogram -

is GUARANTEED to produce the self-doc.  For programs that MUST have
one or more arguments:
% suprogram

will also produce the self-doc.  At the moment, I think the second form
works on all programs, but obviously can't be guaranteed to work on all
possible future programs.
End of note.

Issue 4.

Programs are exiting the SU line and writing seismic data
in non-SU form (eg. for movie) will still use stdin/stdout for data.
These programs will have the parameter, outpar,  to designate a parfile
containing the name of the data and its dimensions.  The default parfile
is "/dev/tty."


Issue 5.

Use the defines in cwp.h, limits.h and portdefs.h when appropriate.
Soon we should split off specifically su things from cwp.h so the
latter can be used more generally (eg. in the graphics codes).

Issue 6.
We are using system and popen calls without pathnames.  This exposes us
to users with dumb names for personal programs, but the alternative is
yucky (lots of defines in portdefs).

==============
From brian Fri Nov 13 22:39:08 1987
To: jkc
Subject: First thoughts


I think along with the special keyword 'par' (which probably should
be PAR), it would be better to allow the data to come in either via
standard input or explicitly identified by a 'DATA=' parameter...

Certainly gettr should have an additional argument, but I don't
think it should be a regular file descriptor.  I would prefer
an explicit su trace file open, as

	sufd = suopen(name)

where name might be "-" for the standard input, otherwise a
pathname.  Then

	gettr(sufd, &tr)

Using this method, an invisible check for authentic su format
traces could be made on open...


