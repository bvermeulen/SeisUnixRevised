head     1.2;
branch   ;
access   jkc john cartley dhale;
symbols  ;
locks    ; strict;
comment  @ * @;


1.2
date     90.05.24.21.56.14;  author jkc;  state Exp;
branches ;
next     1.1;

1.1
date     90.04.18.20.33.42;  author jkc;  state Exp;
branches ;
next     ;


desc
@dmo ala' Hale
@


1.2
log
@New alloc strategy
@
text
@/* SUHALEDMO: $Revision: 1.1 $ ; $Date: 90/04/18 20:33:42 $	*/

/*----------------------------------------------------------------------
 * Copyright (c) Colorado School of Mines, 1990.
 * All rights reserved.
 *
 * This code is part of SU.  SU stands for Seismic Unix, a processing line
 * developed at the Colorado School of Mines, partially based on Stanford
 * Exploration Project (SEP) software.  Inquiries should be addressed to:
 *
 *  Jack K. Cohen, Center for Wave Phenomena, Colorado School of Mines,
 *  Golden, CO 80401  (isis!csm9a!jkcohen)
 *----------------------------------------------------------------------
 */

#include "su.h"
#include "segy.h"

/*********************** self documentation **********************/
string sdoc = "\
								\n\
SUHALEDMO -- dmo of common offset data ... and ...  inverse DMO	\n\
	   of zero offset data					\n\
								\n\
suhaledmo dx= [optional parameters] <stdin >stdout 		\n\
								\n\
Required parameters:						\n\
	dx= 		trace spacing on input data 		\n\
			(ALWAYS REQUIRED)			\n\
	offset= 	common offset of input data		\n\
			(REQUIRED IF dmosgn=-1)			\n\
								\n\
Optional parameters:						\n\
	dmosgn=1		DMO;  -1 = inverse DMO		\n\
	v=0			velocity (constant)		\n\
	offset= (header)	offset in common offset section	\n\
	dt= (header) 		time sample rate (seconds)	\n\
								\n\
NOTE: The velocity, v, is used to avoid evanescent energy	\n\
								\n\
Examples:							\n\
	suhaledmo dx=25 <data1 >data2				\n\
	suhaledmo dmosgn=-1 dx=25 offset=5350 <data1 >data2	\n\
";
/**************** end self doc ***********************************/

/* Credits:
 *	CWP: Chris
 *
 * Technical reference: Liner, C. L., 1988, cwp-073
 */


segy tr;

main(int argc, char **argv)
{
	float *data;		/* mega-vector to contain data set	*/
	float dt;		/* time sample rate			*/
	float dx;		/* trace spacing on input data  	*/
	float h;		/* offset/2 				*/
	float offset;		/* offset in common offset section	*/
	float v;		/* velocity 				*/
	float *wrk1;		/* work area vector (ntpad*nxpad)	*/
	float *wrk2;		/* work area vector (2*ntpad*nxpad)	*/
	float *wrk3;		/* work area vector (2*ntpad)		*/
	float *wrk5;		/* work area vector (nx)		*/
	float *wrk6;		/* work area vector (ntpad)		*/
	int dmosgn;		/* flag ... 1=dmo; -1=inv.dmo		*/
	int ix;			/* trace counter		 	*/
	int nalloc;		/* allocation parameter			*/
	int nt;			/* trace length on input/output		*/
	int ntbytes;		/* ... in bytes				*/
	int ntpad;		/* working trace length (pow of 2)	*/
	int ntpadbytes; 	/* ... in bytes				*/
	int nx;			/* traces in input data			*/
	int nxpad;		/* traces in output data (power of 2) 	*/


	/* Initialize */
	initargs(argc, argv);
	askdoc(1);


	/* Read first trace & check that indata is time-domain */ 
	if ( !gettr(&tr) ) err("can't get first trace\n");
	if (tr.trid != TREAL && tr.trid != 0) {  
		err("input is not (t,x)-domain data, trid=%d",tr.trid);
	}

	/*  get nt from header then pad to pow of 2, set dt  */	
	nt = tr.ns;
	ntbytes = nt * FSIZE;
	for ( ntpad = 1; ntpad < nt; ntpad *= 2); igetpar("ntpad",&ntpad);
	ntpadbytes = ntpad * FSIZE; 

	/*  get or set dt  */	
	if ( tr.dt == 0. ) {
		warn("header dt=%g",tr.dt);
		MUSTFGETPAR("dt",&dt);
		warn("given dt=%g",dt);
	} else {
		dt = tr.dt;		/* in microsecs */
		dt /= 1000000.; 
		fgetpar("dt",&dt);	/* in secs */
	}

	/*  dx must be given by user; v is optional */ 
	MUSTFGETPAR("dx",&dx);
	v = 0;			fgetpar("v",&v);
	if ( v < 0 ) err("v = %g : must be positive");

	/* offset from header for forward
	 *  dmo, and must be given by user for inverse dmo  */	
	dmosgn = 1;				igetpar("dmosgn",&dmosgn);
	if (dmosgn == 1) {
		offset = tr.offset;		fgetpar("offset",&offset);
	} else if ( dmosgn == -1 ) {
		MUSTFGETPAR("offset",&offset);
	} else {
		err("dmosgn = %d : bad value",dmosgn);
	}
	h = offset/2.;

	/* Alloc block of memory for data 	*/
	nalloc = MAX(NFALLOC, ntpad); 
	data = ealloc1float(nalloc);


	/* Loop over input traces & put them into data mega-vector */
	nx = 0;
	do {
		++nx;
		if (nx*ntpad > nalloc) { /* need more memory */	
			nalloc += NFALLOC;
			data = erealloc1float(data, nalloc);
		}
		bcopy(tr.data, data + (nx - 1)*ntpad, ntpadbytes); 
	} while (gettr(&tr));


	/* FFT to come later, so pad number of traces to power of 2 	
	   and allocate appropriate space  */
	if (!igetpar("nxpad", &nxpad)) {
		for (nxpad = 1; nxpad < nx; nxpad *= 2);
	}
	if ( nxpad*ntpad > nalloc ) { 
	    data = erealloc1float(data, ntpad*nxpad); 
	}

	/* Print some info to reassure the user  */
	warn("For HALEDMO:    dx    = %g      offset = %g", dx, offset);
	warn("nt    = %d      nx     = %d", nt, nx);
	warn("work area:    ntpad = %d      nxpad  = %d", ntpad, nxpad);

	/* Alloc memory for work areas 	*/
	wrk1 = ealloc1float(ntpad*nxpad);
	wrk2 = ealloc1float(2*ntpad*nxpad);
	wrk3 = ealloc1float(2*ntpad);
	wrk5 = ealloc1float(nxpad);
	wrk6 = ealloc1float(ntpad);

	/* Zero-out the padded traces  */
	if ( nxpad > nx ) 
		bzero( data + nx*ntpad, ( nxpad - nx )*ntpadbytes ); 

	/* Fortran subs for DMO and inverse DMO  */
	if ( dmosgn == 1 ) {
	haledmosub( data, &ntpad, &dt, &nxpad, &dx, &h, &v,
		    wrk1, wrk2, wrk3, wrk5, wrk6 );   
	} else {
	ihaledmosub( data, &ntpad, &dt, &nxpad, &dx, &h, &v,
		    wrk1, wrk2, wrk3, wrk5, wrk6 );   
	}

	/* set trace headers for output data */
	tr.trid = TREAL;
	tr.ntr = nx;
	tr.ns = nt;
	tr.dt = dt*1000000.;
	if (dmosgn == 1 ) {
		tr.offset = 0.;
	} else {
		tr.offset = offset ;
	}

	/* output the result by pulling traces off data mega-vector  */
	for (ix = 0; ix < nx; ix++) {
		bcopy( data + ix*ntpad, tr.data, ntbytes ); 
		tr.tracl = ix;
		puttr(&tr);
	}

	
	return EXIT_SUCCESS;
}
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/* SUHALEDMO: $Revision: 2.11 $ ; $Date: 89/09/20 19:36:04 $	*/
d79 1
d85 1
a85 1
	/* Read first trace & check than indata is time-domain */ 
d127 1
a127 1
	data = vec(nalloc);
d135 2
a136 2
			nalloc <<= 1; /* ask for double   */
			data = re_vec(data, nalloc);
d148 1
a148 1
	    data = re_vec(data, ntpad*nxpad); 
d157 5
a161 5
	wrk1 = vec(ntpad*nxpad);
	wrk2 = vec(2*ntpad*nxpad);
	wrk3 = vec(2*ntpad);
	wrk5 = vec(nxpad);
	wrk6 = vec(ntpad);
d187 2
a188 3
	/* output the result by pulling traces
	 * off data mega-vector  */
	for( ix = 0; ix < nx; ix++ ) {
@
