head     1.8;
access   ;
symbols  ;
locks    jkc:1.8; strict;
comment  @ * @;


1.8
date     89.01.02.00.37.51;  author jkc;  state Exp;
branches ;
next     1.7;

1.7
date     89.01.02.00.05.30;  author jkc;  state Exp;
branches ;
next     1.6;

1.6
date     89.01.01.23.32.33;  author jkc;  state Exp;
branches ;
next     1.5;

1.5
date     89.01.01.21.16.44;  author jkc;  state Exp;
branches ;
next     1.4;

1.4
date     89.01.01.20.35.21;  author jkc;  state Exp;
branches ;
next     1.3;

1.3
date     89.01.01.14.14.45;  author jkc;  state Exp;
branches ;
next     1.2;

1.2
date     89.01.01.14.12.57;  author jkc;  state Exp;
branches ;
next     1.1;

1.1
date     89.01.01.13.54.30;  author jkc;  state Exp;
branches ;
next     ;


desc
@Allocate 2-D arrays
@


1.8
log
@Cosmetic.
@
text
@#include "../include/cwp.h"

/* dim2 - allocate 2D array of arbitrary type
 *
 * Credits:
 *	Anderson and Anderson: Advanced C Tips and Techniques, Hayden, 1988
 *	CWP: Jack
 *
 * Synopsis:
 * char **dim2(row, col, size)
 * int row;	# number of elements in each row
 * int col;	# number of elements in each col
 * int size;	# sizeof(datatype)
 *
 *----------------------------------------------------------------------
 * Permission to use the SU programs is granted.  Courteous users will
 * retain this acknowlegment of origins at the Stanford Exploration
 * Project, Stanford University and the Center for Wave Phenomena, 
 * Colorado School of Mines.   Inquiries/bug reports should be sent to:
 * Jack K. Cohen, Center for Wave Phenomena, Colorado School of Mines,
 * Golden, CO 80014
 *----------------------------------------------------------------------
 *
 * $Author: jkc $
 * $Source: /src/su/Arrays/RCS/dim2.c,v $
 * $Revision: 1.7 $ ; $Date: 89/01/02 00:05:30 $
*/


/* Embed Revision Control System identifier strings */
static string progid =
	"   $Source: /src/su/Arrays/RCS/dim2.c,v $";
static string revid =
	"   $Revision: 1.7 $ ; $Date: 89/01/02 00:05:30 $";


static bool first = true;	/* to check if first entry	*/

/* Allocate 2D array */
char **dim2(row, col, size)
int row, col, size;
{
	register char **prow, *pdata;
	register int i;


	/* Echo version on request */
	if (ID && first) {
		(void) fprintf(stderr, "%s: %s\n", __FILE__, progid);
		(void) fprintf(stderr, "%s: %s\n", __FILE__, revid);
		first = false;
	}


	/* Allocate room for data and row pointers */
	if (NULL == (pdata = malloc((uint) row * col * size)))
		err("%s: No heap space for data", __FILE__);
	if (NULL == (prow = (char **) malloc((uint) row * sizeof(char *))))
		err("%s: No heap space for row pointers", __FILE__);


	/* Set row pointers */
	for (i = 0; i < row; ++i) {
		prow[i] = pdata;	/* store pointers to rows */
		pdata += col * size;	/* move to next row	  */
	}

	return prow;			/* pointer to 2D array    */
}


/* Free 2D storage */
void free2(pa)
char **pa;
{
	free((char *) *pa);		/* free the data	  */
	free((char *) pa);		/* free the row pointers  */
}


#ifdef TEST

main(argc, argv)
int argc; char *argv[];
{
	int **a;			/* 2D array of ints	  */
	double **b;			/* 2D array of doubles	  */
	int rows, cols;
	register int i, j;
	int inum = 1;
	double dnum = 1.1;

	/* Initialize SU */
	initargs(argc, argv);
	if (!igetpar("ID", &ID))	ID = 0;
	if (ID) {
		(void) fprintf(stderr, "%s\n", progid);
		(void) fprintf(stderr, "%s\n", revid);
	}


	/* Get row and col lengths */
	MUSTIGETPAR("rows", &rows);
	MUSTIGETPAR("cols", &cols);

	/* Create and fill 2D arrays */
	a = (int **) dim2(rows, cols, sizeof(int));
	for (i = 0; i < rows; ++i) {
		for (j = 0; j < cols; ++j) {
			a[i][j] = inum++;
		}
	}

	b = (double **) dim2(rows, cols, sizeof(double));
	for (i = 0; i < rows; ++i) {
		for (j = 0; j < cols; ++j) {
			b[i][j] = dnum++;
		}
	}

	/* Display arrays */
	for (i = 0; i < rows; ++i) {
		for (j = 0; j < cols; ++j) {
			printf("%5d%c", a[i][j], (j+1) % cols ? ' ' : '\n');
		}
	}

	putchar('\n');
	for (i = 0; i < rows; ++i) {
		for (j = 0; j < cols; ++j) {
			printf("%5g%c", b[i][j], (j+1) % cols ? ' ' : '\n');
		}
	}
	
	free2((char **) a);
	free2((char **) b);
	return SUCCEED;
}
	
	
#endif
@


1.7
log
@Cosmetic.
@
text
@d26 1
a26 1
 * $Revision: 1.6 $ ; $Date: 89/01/01 23:32:33 $
d34 1
a34 1
	"   $Revision: 1.6 $ ; $Date: 89/01/01 23:32:33 $";
a88 1
	int inum;
d90 2
d108 1
a108 1
	for (inum = 1, i = 0; i < rows; ++i) {
d115 1
a115 1
	for (inum = 1, i = 0; i < rows; ++i) {
d117 1
a117 1
			b[i][j] = (double) inum++;
d131 1
a131 1
			printf("%7.1lf%c", b[i][j], (j+1) % cols ? ' ' : '\n');
@


1.6
log
@Corrected row malloc to sizeof(char *) instead of sizeof(type).  That is,
I was over allocating before.
@
text
@d26 1
a26 1
 * $Revision: 1.5 $ ; $Date: 89/01/01 21:16:44 $
d34 1
a34 1
	"   $Revision: 1.5 $ ; $Date: 89/01/01 21:16:44 $";
d107 2
a108 2
	for (inum = 1, i = 0; i < rows; ++i)
		for (j = 0; j < cols; ++j)
d110 2
d114 2
a115 2
	for (inum = 1, i = 0; i < rows; ++i)
		for (j = 0; j < cols; ++j)
d117 2
d121 2
a122 2
	for (i = 0; i < rows; ++i)
		for (j = 0; j < cols; ++j)
d124 2
d128 2
a129 2
	for (i = 0; i < rows; ++i)
		for (j = 0; j < cols; ++j)
d131 2
@


1.5
log
@Using getpars instead of atoi.
@
text
@d26 1
a26 1
 * $Revision: 1.4 $ ; $Date: 89/01/01 20:35:21 $
d34 1
a34 1
	"   $Revision: 1.4 $ ; $Date: 89/01/01 20:35:21 $";
d58 1
a58 1
	if (NULL == (prow = (char **) malloc((uint) row * size)))
@


1.4
log
@Put in su format.
@
text
@d11 2
a12 2
 * int row;	# elements in each row
 * int col;	# elements in each col
d25 2
a26 2
 * $Source: /src/su/lib/RCS/conv_float.c,v $
 * $Revision: 1.5 $ ; $Date: 88/11/25 10:02:35 $
d32 1
a32 1
	"   $Source: /src/su/lib/RCS/conv_float.c,v $";
d34 1
a34 1
	"   $Revision: 1.5 $ ; $Date: 88/11/25 10:02:35 $";
d92 7
a98 1
	if (argc != 3) err("Usage: %s rows cols", argv[0]);
d100 4
a103 2
	rows = atoi(argv[1]);
	cols = atoi(argv[2]);
@


1.3
log
@Tweak test driver.
@
text
@d3 39
a41 3
/* Create 2D array of integers */
int **idim2(row, col)
int row, col;
d43 1
a43 1
	register int **prow, *pdata;
a45 4
	if (NULL == (pdata = (int *) malloc((uint) row * col * sizeof(int))))
		err("No heap space for data");
	if (NULL == (prow = (int **) malloc((uint) row * sizeof(int *))))
		err("No heap space for row pointers");
d47 6
d54 9
d65 1
a65 1
		pdata += col;		/* move to next row	  */
d73 2
a74 2
void ifree2(pa)
int **pa;
d76 2
a77 2
	free(*pa);			/* free the data	  */
	free(pa);			/* free the row pointers  */
d86 2
a87 1
	int **a;			/* 2D array name	  */
d89 1
a89 1
	int inum = 1;
d97 3
a99 3
	/* Create and fill 2D array */
	a = idim2(rows, cols);
	for (i = 0; i < rows; ++i)
d103 6
a108 1
	/* Display array */
d112 5
d118 2
a119 1
	ifree2(a);
@


1.2
log
@Use malloc instead of calloc and use cwp.h amenities.
@
text
@d44 2
a45 4
	if (argc != 3) {
		fprintf(stderr, "Usage: %s rows cols\n", argv[0]);
		exit(1);
	}
d61 1
a61 1
	return 0;
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
#include <stdio.h>
a8 1
	char *calloc();
d10 6
a15 10
	pdata = (int *) calloc(row * col, sizeof(int));
	if (pdata == (int *) NULL) {
		fprintf(stderr, "No heap space for data\n");
		exit(1);
	}
	prow = (int **) calloc(row, sizeof(int *));
	if (prow == (int **) NULL) {
		fprintf(stderr, "No heap space for row pointers\n");
		exit(1);
	}
a28 2
	void free();

@
