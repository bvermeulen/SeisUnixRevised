head     1.5;
access   ;
symbols  ;
locks    jkc:1.5; strict;
comment  @ * @;


1.5
date     89.01.04.22.32.34;  author jkc;  state Exp;
branches ;
next     1.4;

1.4
date     89.01.02.16.19.29;  author jkc;  state Exp;
branches ;
next     1.3;

1.3
date     89.01.02.09.30.02;  author jkc;  state Exp;
branches ;
next     1.2;

1.2
date     89.01.02.09.09.35;  author jkc;  state Exp;
branches ;
next     1.1;

1.1
date     89.01.02.08.29.28;  author jkc;  state Exp;
branches ;
next     ;


desc
@Macros for array allocations.
@


1.5
log
@Use a less common counter than i, to make lint happy.
@
text
@#include "../include/cwp.h"

/* dim.h - header file for run time arrays
 *
 * Credits:
 *	Anderson and Anderson: Advanced C Tips and Techniques, Hayden, 1988
 *	CWP: Jack
 *
 *----------------------------------------------------------------------
 * Permission to use the SU programs is granted.  Courteous users will
 * retain this acknowlegment of origins at the Stanford Exploration
 * Project, Stanford University and the Center for Wave Phenomena, 
 * Colorado School of Mines.   Inquiries/bug reports should be sent to:
 * Jack K. Cohen, Center for Wave Phenomena, Colorado School of Mines,
 * Golden, CO 80014
 *----------------------------------------------------------------------
 *
 * $Author: jkc $
 * $Source: /src/su/Arrays/RCS/dim.h,v $
 * $Revision: 1.4 $ ; $Date: 89/01/02 16:19:29 $
*/


/* Allocate 1D array */
#define DIM1(p, n, type)						\
{									\
	/* Allocate room for data */					\
	if (NULL == (p = (type *)					\
		malloc((uint) n * sizeof(type))))			\
		err("%s: No heap space for data", __FILE__);		\
}


/* Free 1D storage */
#define FREE1(p)							\
{									\
	free(p);			/* free the data	  */	\
}


/* Allocate 2D array */
#define DIM2(prow, row, col, type)					\
{									\
	register type *pdata;						\
	register int i_i;						\
									\
									\
	/* Allocate room for data and row pointers */			\
	if (NULL == (pdata = (type *)					\
		malloc((uint) row * col * sizeof(type))))		\
		err("%s: No heap space for data", __FILE__);		\
	if (NULL == (prow = (type **)					\
		malloc((uint) row * sizeof(type *))))			\
		err("%s: No heap space for row pointers", __FILE__);	\
									\
									\
	/* Set row pointers */						\
	for (i_i = 0; i_i < row; ++i_i) {				\
		prow[i_i] = pdata;	/* store pointers to rows */	\
		pdata += col;		/* move to next row	  */	\
	}								\
}


/* Free 2D storage */
#define	FREE2(prow)							\
{									\
	free((char *) *prow);		/* free the data	  */	\
	free((char *) prow);		/* free the row pointers  */	\
}


/* Allocate 3D array */
#define DIM3(pgrid, grid, row, col, type)				\
{									\
	register type **prow, *pdata;					\
	register int i_i;						\
									\
									\
	/* Allocate room for data, row and grid pointers */		\
	if (NULL == (pdata = (type *)					\
		malloc((uint) grid * row * col * sizeof(type))))	\
		err("%s: No heap space for data", __FILE__);		\
	if (NULL == (prow = (type **)					\
		malloc((uint) grid * row * sizeof(type *))))		\
		err("%s: No heap space for row pointers", __FILE__);	\
	if (NULL == (pgrid = (type ***)					\
		malloc((uint) grid * sizeof(type **))))			\
		err("%s: No heap space for grid pointers", __FILE__);	\
									\
									\
	/* Set row pointers */						\
	for (i_i = 0; i_i < grid * row; ++i_i) {			\
		prow[i_i] = pdata;	/* store pointers to rows  */	\
		pdata += col;		/* move to next row	   */	\
	}								\
									\
									\
	/* Set grid pointers */						\
	for (i_i = 0; i_i < grid; ++i_i) {				\
		pgrid[i_i] = prow;	/* store pointers to grids */	\
		prow += row;		/* move to next grid	   */	\
	}								\
}


/* Free 3D storage */
#define FREE3(pgrid)							\
{									\
	free((char *) **pgrid);		/* free the data	   */	\
	free((char *) *pgrid);		/* free the row pointers   */	\
	free((char *) pgrid);		/* free the grid pointers  */	\
}


/* Dynamic creation of 2D array in subroutines */
#define DIMENSION2(arga usera, row, col, type)				\
{									\
	register int i_i;						\
									\
									\
	/* Allocate room for row pointers */				\
	if (NULL == (usera = (type **)					\
		malloc((uint) row * sizeof(type *))))			\
		err("%s: No heap space for row pointers", __FILE__);	\
									\
									\
	/* Set row pointers */						\
	for (i_i = 0; i_i < row; ++i_i) {				\
		usera[i_i] = (type *) ((char *) arga +			\
				(sizeof(type) * i_i * col));		\
	}								\
}
@


1.4
log
@Added DIMENSION2 for use of 2D array notation in subroutines.
@
text
@d20 1
a20 1
 * $Revision: 1.3 $ ; $Date: 89/01/02 09:30:02 $
d45 1
a45 1
	register int i;							\
d58 2
a59 2
	for (i = 0; i < row; ++i) {					\
		prow[i] = pdata;	/* store pointers to rows */	\
d77 1
a77 1
	register int i;							\
d93 2
a94 2
	for (i = 0; i < grid * row; ++i) {				\
		prow[i] = pdata;	/* store pointers to rows  */	\
d100 2
a101 2
	for (i = 0; i < grid; ++i) {					\
		pgrid[i] = prow;	/* store pointers to grids */	\
d116 1
d119 1
a119 1
	register int i;							\
d122 1
d128 4
a131 3
	for (i = 0; i < row; ++i) {					\
		usera[i] = (type *) ((char *) arga +			\
				(sizeof(type) * i * col));		\
@


1.3
log
@Added 3D array macros for run time allocation.
@
text
@d20 1
a20 1
 * $Revision: 1.2 $ ; $Date: 89/01/02 09:09:35 $
d113 17
@


1.2
log
@Added 1D array macros.
@
text
@d20 1
a20 1
 * $Revision: 1.1 $ ; $Date: 89/01/02 08:29:28 $
d70 43
@


1.1
log
@Initial revision
@
text
@d19 2
a20 2
 * $Source: /src/su/Arrays/RCS/dim2.c,v $
 * $Revision: 1.8 $ ; $Date: 89/01/02 00:37:51 $
d22 17
@
