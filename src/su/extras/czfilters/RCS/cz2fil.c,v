head     1.12;
access   jkc shuki seb wenji;
symbols  ;
locks    ; strict;
comment  @ * @;


1.12
date     88.05.21.23.40.31;  author jkc;  state Exp;
branches ;
next     1.11;

1.11
date     88.05.21.11.53.14;  author jkc;  state Exp;
branches ;
next     1.10;

1.10
date     87.09.29.07.10.20;  author jkc;  state Exp;
branches ;
next     1.9;

1.9
date     87.09.26.08.46.01;  author jkc;  state Exp;
branches ;
next     1.8;

1.8
date     87.09.23.21.38.01;  author jkc;  state Exp;
branches ;
next     1.7;

1.7
date     87.09.23.15.41.31;  author shuki;  state Exp;
branches ;
next     1.6;

1.6
date     87.09.23.15.31.24;  author jkc;  state Exp;
branches ;
next     1.5;

1.5
date     87.09.04.12.06.54;  author jkc;  state Exp;
branches ;
next     1.4;

1.4
date     87.09.01.17.17.43;  author jkc;  state Exp;
branches ;
next     1.3;

1.3
date     87.09.01.17.10.54;  author jkc;  state Exp;
branches ;
next     1.2;

1.2
date     87.09.01.17.02.40;  author jkc;  state Exp;
branches ;
next     1.1;

1.1
date     87.09.01.16.42.37;  author jkc;  state Exp;
branches ;
next     ;


desc
@Filter to produce cz2 input data file.
@


1.12
log
@mallocs --> vectors (sans free).
@
text
@/* cz2fil - filter to produce data file for cz2
 *
 * Credits:
 *	CWP: Jack
 *
 * This program belongs to the Center for Wave Phenomena
 * Colorado School of Mines
 *
 * $Author: jkc $
 * $Source: /src/su/czfilters/RCS/cz2fil.c,v $
 * $Revision: 1.11 $ ; $Date: 88/05/21 11:53:14 $
*/

/*********************** self documentation **********************/
char *sdoc = "\
								\n\
CZ2FIL - filter to produce data file for cz2 on stdout		\n\
								\n\
cz2fil <segy_traces >data2_file v= dx=  [optional parameters]	\n\
								\n\
Required parameters:						\n\
	v			velocity picks			\n\
	dx			spatial sample rate		\n\
								\n\
Optional parameters:						\n\
	zv			depth picks for the v's		\n\
	bmin			minimum dip picks		\n\
	bmax			maximum dip picks		\n\
	zdip			depth picks for the dips	\n\
	final = INVTRACES	name of inverted trace file	\n\
	outdt = input dt	output sampling rate		\n\
	tmin=.05 * two_way	minimum output time		\n\
	tmax=.70 * two_way	maximum output time		\n\
	trmin = 1		first output trace number	\n\
	trmax = ntr		last output trace number	\n\
	spap = 0		spatial aliasing parameter	\n\
				0 <= spap <=1			\n\
				0 = allow no aliased data	\n\
								\n\
";
/*****************************************************************/

/* Embed Revision Control System identifier strings */
static char progid[] =
	"   $Source: /src/su/czfilters/RCS/cz2fil.c,v $";
static char revid[] =
	"   $Revision: 1.11 $ ; $Date: 88/05/21 11:53:14 $";


#include "../include/cwp.h"
#include "../include/segy.h"

segy tr;


main(argc,argv)
int argc ; char **argv;
{
	float dt;		/* temporal sample rate		*/
	int tpts;		/* number of points on trace	*/
	float tfin;		/* maximum time on trace	*/
	int ntr;		/* number of traces		*/
	float outdt;		/* output sampling rate		*/
	float tmin;		/* minimum output time		*/
	float tmax;		/* maximum output time		*/
	float dx;		/* spatial sample rate		*/
	int trmin;		/* first output trace number	*/
	int trmax;		/* last output trace number	*/
	float spap;		/* spatial aliasing parameter	*/
	float *v;		/* velocity picks		*/
	int nv;			/* number of v's		*/
	float *zv;		/* depth picks for the v's	*/
	int nzv;		/* number of zv's		*/
	float *bmin;		/* minimum dip picks		*/
	int nbmin;		/* number of bmin's		*/
	float *bmax;		/* maximum dip picks		*/
	int nbmax;		/* number of bmax's		*/
	float *zdip;		/* depth picks for the dips	*/
	int nzdip;		/* number of zdip's		*/
	char *final;		/* inverted headerless traces	*/
	int maxpar;		/* maximum length input vector	*/
	float *ptr;		/* generic allocation pointer	*/
	int i;			/* counter			*/


	initgetpar(argc, argv); askdoc(1);


	/* Get information from the first header */
	ntr = gettra(STDIN, &tr, 0);
	dt = tr.dt*0.000001;
	tpts = tr.ns;
	tfin = (tpts - 1)*dt;

	MUSTFGETPAR("dx", &dx);

	/* Default parameters;	User-defined overrides */
	final = "INVTRACES";	sgetpar("final", &final);
	outdt = dt;		fgetpar("outdt", &outdt);
	tmin = 0.05*tfin;	fgetpar("tmin" , &tmin);
	tmax = 0.70*tfin;	fgetpar("tmax" , &tmax);
	trmin = 1;		igetpar("trmin", &trmin);
	trmax = ntr;		igetpar("trmax", &trmax);
	spap = 0.0;		fgetpar("spap" , &spap);

	/* Allocate space for velocity model and dip model */
	maxpar = maxgetpar();

	ptr   = vector(maxpar);
	nv    = fgetpar("v", ptr);
	v     = vector(nv);
	v     = ptr;

	ptr   = vector(maxpar);
	nzv   = fgetpar("zv", ptr);
	zv    = vector(nzv);
	zv    = ptr;

	ptr   = vector(maxpar);
	nzdip = fgetpar("zdip", ptr);
	zdip  = vector(nzdip);
	zdip  = ptr;

	ptr   = vector(maxpar);
	nbmin = fgetpar("bmin", ptr);
	bmin  = vector(nbmin);
	bmin  = ptr;

	ptr   = vector(maxpar);
	nbmax = fgetpar("bmax", ptr);
	bmax  = vector(nbmax);
	bmax  = ptr;


	/* Consistency checks */
	if (nzv && nzv != nv) {
		err("number of zv's must equal number of v's");
	}
	if (nzdip != nbmin || nzdip != nbmax) {
		err("must have same number of max, min angles as zdips");
	}


	/* Write out the cz2 data file */
	printf("%s\n", final);
	printf("%g\n", dx);
	printf("%d %d\n", trmin, trmax);
	printf("%g %g\n", tmin, tmax);
	printf("%g\n", outdt);
	printf("%g\n", v[0]);
	printf("%d\n", nv - 1);
	for (i = 1; i < nv; i++) {
		printf("%g %g\n", zv[i], v[i]);
	}
	printf("%d\n", nzdip);
	for (i = 0; i < nzdip; i++) {
		printf("%g %g %g\n", zdip[i], bmin[i], bmax[i]);
	}
	printf("%g\n", spap);
}
@


1.11
log
@Thorough update.  Better user-oriented parameter names.
Modern self-doc.  Write file on stdout.
@
text
@d11 1
a11 1
 * $Revision: 1.10 $ ; $Date: 87/09/29 07:10:20 $
d47 1
a47 1
	"   $Revision: 1.10 $ ; $Date: 87/09/29 07:10:20 $";
a52 2
#define	CP	char *

d109 1
a109 1
	ptr   = (float *) malloc((uint) (maxpar * sizeof(float)));
d111 2
a112 1
	v     = (float *) realloc((CP) ptr, (uint) (nv * sizeof(float)));
d114 1
a114 1
	ptr   = (float *) malloc((uint) (maxpar * sizeof(float)));
d116 2
a117 1
	zv    = (float *) realloc((CP) ptr, (uint) (nzv * sizeof(float)));
d119 1
a119 1
	ptr   = (float *) malloc((uint) (maxpar * sizeof(float)));
d121 2
a122 1
	zdip  = (float *) realloc((CP) ptr, (uint) (nzdip * sizeof(float)));
d124 1
a124 1
	ptr   = (float *) malloc((uint) (maxpar * sizeof(float)));
d126 2
a127 1
	bmin  = (float *) realloc((CP) ptr, (uint) (nbmin * sizeof(float)));
d129 1
a129 1
	ptr   = (float *) malloc((uint) (maxpar * sizeof(float)));
d131 2
a132 1
	bmax  = (float *) realloc((CP) ptr, (uint) (nbmax * sizeof(float)));
@


1.10
log
@Fixed logic error that counted before getting second cd value.
@
text
@d10 2
a11 3
 * $Source: /src/segy/czfilters/RCS/cz2fil.c,v $
 * $Revision: 1.9 $ ; $Date: 87/09/26 08:46:01 $
 * $State: Exp $
d17 1
a17 3
CZ2FIL - cz2fil <stdin v= [zv= bmin= bmax= zdip= final=INVTRACES\n\
	     otdt = tr.dt ottmin=.05*two_way ottmax=.7*two_way	\n\
	     otnmin=1 otnmax=ntr dx=cdp2-cdp1 spap=0]		\n\
d19 1
a19 1
	Produces data file for cz2 on stderr.			\n\
d21 19
d45 1
a45 1
	"   $Source: /src/segy/czfilters/RCS/cz2fil.c,v $";
d47 1
a47 1
	"   $Revision: 1.9 $ ; $Date: 87/09/26 08:46:01 $";
d53 1
a53 1
Segy tr;
d55 1
d57 1
d65 3
a67 3
	float otdt;		/* output sampling rate		*/
	float ottmin;		/* minimum output time		*/
	float ottmax;		/* maximum output time		*/
d69 2
a70 4
	int otnmin;		/* first output trace number	*/
	int otnmax;		/* last output trace number	*/
	float cdp1;		/* cdp of first trace		*/
	float cdp2;		/* cdp of second trace		*/
d82 1
d84 1
a84 1
	float *ptr;		/* generic pointer for malloc	*/
a85 1
	char final[15];		/* inverted headerless traces	*/
a86 2
	xargc = argc; xargv = argv;
	if (isatty(STDIN) || !strcmp(argv[1] , "-")) selfdoc();
d88 3
d92 1
a92 2
	gettr(STDIN, &tr);
	cdp1 = tr.cdp;
a95 1
	ntr = tr.ntr;		igetpar("ntr",&ntr);
d97 1
a97 3
	/* Get CDP spacing from second header */
	gettr(STDIN, &tr);
	cdp2 = tr.cdp;
a98 8
	/* Get number of traces if not in recorded in header */
	if (!ntr) {
		ntr = 2;
		while (gettr(STDIN, &tr)) {
			ntr++;
		}
	}

d100 7
a106 8
	strcpy(final, "INVTRACES");	sgetpar("final" , final);
	otdt = dt;			fgetpar("otdt"  , &otdt);
	ottmin = 0.05*tfin;		fgetpar("ottmin", &ottmin);
	ottmax = 0.70*tfin;		fgetpar("ottmax", &ottmax);
	otnmin = 1;			igetpar("otnmin", &otnmin);
	otnmax = ntr;			igetpar("otnmax", &otnmax);
	dx = cdp2 - cdp1;		fgetpar("dx"    , &dx);
	spap = 0.0;			fgetpar("spap"  , &spap);
d111 1
a111 1
	ptr   = (float *) malloc((unsigned) (maxpar * sizeof(float)));
d113 1
a113 1
	v     = (float *) realloc(ptr, (unsigned) (nv * sizeof(float)));
d115 1
a115 1
	ptr   = (float *) malloc((unsigned) (maxpar * sizeof(float)));
d117 1
a117 1
	zv    = (float *) realloc(ptr, (unsigned) (nzv * sizeof(float)));
d119 5
a123 1
	ptr   = (float *) malloc((unsigned) (maxpar * sizeof(float)));
d125 1
a125 1
	bmin  = (float *) realloc(ptr, (unsigned) (nbmin * sizeof(float)));
d127 1
a127 1
	ptr   = (float *) malloc((unsigned) (maxpar * sizeof(float)));
d129 1
a129 1
	bmax  = (float *) realloc(ptr, (unsigned) (nbmax * sizeof(float)));
a130 3
	ptr   = (float *) malloc((unsigned) (maxpar * sizeof(float)));
	nzdip = fgetpar("zdip", ptr);
	zdip  = (float *) realloc(ptr, (unsigned) (nzdip * sizeof(float)));
d140 1
d142 7
a148 7
	fprintf(stderr, "%s\n", final);
	fprintf(stderr, "%g\n", dx);
	fprintf(stderr, "%d %d\n", otnmin, otnmax);
	fprintf(stderr, "%g %g\n", ottmin, ottmax);
	fprintf(stderr, "%g\n", otdt);
	fprintf(stderr, "%g\n", v[0]);
	fprintf(stderr, "%d\n", nv - 1);
d150 1
a150 1
		fprintf(stderr, "%g %g\n", zv[i], v[i]);
d152 1
a152 1
	fprintf(stderr, "%d\n", nzdip);
d154 1
a154 1
		fprintf(stderr, "%g %g %g\n", zdip[i], bmin[i], bmax[i]);
d156 1
a156 1
	fprintf(stderr, "%g\n", spap);
@


1.9
log
@Made default min time and max time more generous.
@
text
@d11 1
a11 1
 * $Revision: 1.8 $ ; $Date: 87/09/23 21:38:01 $
d31 1
a31 1
	"   $Revision: 1.8 $ ; $Date: 87/09/23 21:38:01 $";
d76 1
d80 1
a80 1
	ntr = tr.ntr;
d82 4
d88 1
a88 1
		ntr = 1;
a92 5

	/* Get CDP spacing from second header */
	cdp1 = tr.cdp;
	gettr(STDIN, &tr);
	cdp2 = tr.cdp;
@


1.8
log
@Cosmetics.
@
text
@d9 1
a9 1
 * $Author: shuki $
d11 1
a11 1
 * $Revision: 1.7 $ ; $Date: 87/09/23 15:41:31 $
d19 2
a20 2
		otdt = tr.dt ottmin=two_way/16 ottmax=two_way/4	\n\
		otnmin=1 otnmax=ntr dx=cdp2-cdp1 spap=0]	\n\
d31 1
a31 1
	"   $Revision: 1.7 $ ; $Date: 87/09/23 15:41:31 $";
d97 2
a98 2
	ottmin = tfin/16.0;		fgetpar("ottmin", &ottmin);
	ottmax = tfin/4.0;		fgetpar("ottmax", &ottmax);
@


1.7
log
@getpar(0,
gettr(0,
@
text
@d9 1
a9 1
 * $Author: jkc $
d11 1
a11 1
 * $Revision: 1.6 $ ; $Date: 87/09/23 15:31:24 $
d31 1
a31 1
	"   $Revision: 1.6 $ ; $Date: 87/09/23 15:31:24 $";
d75 1
a75 1
	gettr(0,&tr);
d84 1
a84 1
		while (gettr(0,&tr)) {
d91 1
a91 1
	gettr(0,&tr);
@


1.6
log
@New getpar.
@
text
@d11 1
a11 1
 * $Revision: 1.5 $ ; $Date: 87/09/04 12:06:54 $
d31 1
a31 1
	"   $Revision: 1.5 $ ; $Date: 87/09/04 12:06:54 $";
d75 1
a75 1
	gettr(&tr);
d84 1
a84 1
		while (gettr(&tr)) {
d91 1
a91 1
	gettr(&tr);
@


1.5
log
@Changed output time defaults.
@
text
@d11 1
a11 1
 * $Revision: 1.4 $ ; $Date: 87/09/01 17:17:43 $
d31 1
a31 1
	"   $Revision: 1.4 $ ; $Date: 87/09/01 17:17:43 $";
d95 8
a102 8
	strcpy(final, "INVTRACES");	getpar("final" , "s", final);
	otdt = dt;			getpar("otdt"  , "f", &otdt);
	ottmin = tfin/16.0;		getpar("ottmin", "f", &ottmin);
	ottmax = tfin/4.0;		getpar("ottmax", "f", &ottmax);
	otnmin = 1;			getpar("otnmin", "d", &otnmin);
	otnmax = ntr;			getpar("otnmax", "d", &otnmax);
	dx = cdp2 - cdp1;		getpar("dx"    , "f", &dx);
	spap = 0.0;			getpar("spap"  , "f", &spap);
d108 1
a108 1
	nv    = getpar("v", "f", ptr);
d112 1
a112 1
	nzv   = getpar("zv", "f", ptr);
d116 1
a116 1
	nbmin = getpar("bmin", "f", ptr);
d120 1
a120 1
	nbmax = getpar("bmax", "f", ptr);
d124 1
a124 1
	nzdip = getpar("zdip", "f", ptr);
@


1.4
log
@Oops, have to decrease nv by one for cz2in.
@
text
@d11 1
a11 1
 * $Revision: 1.3 $ ; $Date: 87/09/01 17:10:54 $
d19 1
a19 1
		otdt = tr.dt ottmin=0 ottmax=two_way/8		\n\
d31 1
a31 1
	"   $Revision: 1.3 $ ; $Date: 87/09/01 17:10:54 $";
d78 1
a78 1
	tfin = (tpts - 1)*dt/8.0;
d97 2
a98 2
	ottmin = 0.0;			getpar("ottmin", "f", &ottmin);
	ottmax = tfin;			getpar("ottmax", "f", &ottmax);
@


1.3
log
@Changed to %g format.
@
text
@d11 1
a11 1
 * $Revision: 1.2 $ ; $Date: 87/09/01 17:02:40 $
d31 1
a31 1
	"   $Revision: 1.2 $ ; $Date: 87/09/01 17:02:40 $";
d142 1
a142 1
	fprintf(stderr, "%d\n", nv);
@


1.2
log
@Now actually produced a correct data file.  Virgin edition had
several first draft errors: left first arg out of a bunch of reallocs,
typed some ints as floats, had a bad loop limit.
@
text
@d11 1
a11 1
 * $Revision: 1.1 $ ; $Date: 87/09/01 16:42:37 $
d31 1
a31 1
	"   $Revision: 1.1 $ ; $Date: 87/09/01 16:42:37 $";
d137 1
a137 1
	fprintf(stderr, "%f\n", dx);
d139 3
a141 3
	fprintf(stderr, "%f %f\n", ottmin, ottmax);
	fprintf(stderr, "%f\n", otdt);
	fprintf(stderr, "%f\n", v[0]);
d144 1
a144 1
		fprintf(stderr, "%f %f\n", zv[i], v[i]);
d148 1
a148 1
		fprintf(stderr, "%f %f %f\n", zdip[i], bmin[i], bmax[i]);
d150 1
a150 1
	fprintf(stderr, "%f\n", spap);
@


1.1
log
@Initial revision
@
text
@d10 2
a11 2
 * $Source: /src/segy/filters/RCS/cz1fil.c,v $
 * $Revision: 1.1 $ ; $Date: 87/08/27 12:09:51 $
d29 1
a29 1
	"   $Source: /src/segy/filters/RCS/cz1fil.c,v $";
d31 1
a31 1
	"   $Revision: 1.1 $ ; $Date: 87/08/27 12:09:51 $";
d44 1
a44 1
	float tpts;		/* number of points on trace	*/
d113 1
a113 1
	zv    = (float *) realloc((unsigned) (nzv * sizeof(float)));
d117 1
a117 1
	bmin  = (float *) realloc((unsigned) (nbmin * sizeof(float)));
d121 1
a121 1
	bmax  = (float *) realloc((unsigned) (nbmax * sizeof(float)));
d125 1
a125 1
	zdip  = (float *) realloc((unsigned) (nzdip * sizeof(float)));
d147 1
a147 1
	for (i = 0; i < nv; i++) {
@
