head     1.9;
access   jkc shuki seb wenji;
symbols  ;
locks    ; strict;
comment  @# @;


1.9
date     88.05.23.08.10.48;  author jkc;  state Exp;
branches ;
next     1.8;

1.8
date     88.05.21.23.38.12;  author jkc;  state Exp;
branches ;
next     1.7;

1.7
date     88.05.21.22.17.52;  author jkc;  state Exp;
branches ;
next     1.6;

1.6
date     88.05.21.18.11.32;  author jkc;  state Exp;
branches ;
next     1.5;

1.5
date     88.05.21.17.22.26;  author jkc;  state Exp;
branches ;
next     1.4;

1.4
date     88.05.21.17.14.55;  author jkc;  state Exp;
branches ;
next     1.3;

1.3
date     87.09.28.09.46.09;  author jkc;  state Exp;
branches ;
next     1.2;

1.2
date     87.09.26.21.20.09;  author jkc;  state Exp;
branches ;
next     1.1;

1.1
date     87.09.26.01.05.13;  author jkc;  state Exp;
branches ;
next     ;


desc
@Run shell for CZ suite under SU.
@


1.9
log
@Added sample plot statements.
@
text
@#! /bin/sh -v
# JOB.bench - run CZ starting and ending with SEG-Y data
# $Author: jkc $
# $Source: /src/su/czfilters/RCS/JOB.bench,v $
# $Revision: 1.8 $ ; $Date: 88/05/21 23:38:12 $

###  Set up data for CZ benchmark as per CZ release notes.
###  First create TRACES (bare seismic data for 2 flat reflectors) and
###  record stdout output in the file "SYNINFO".  Let stderr come to tty.
rm -f TRACES
czsyn <datasyn >SYNINFO


###  Use suaddhead to make SEG-Y data
###  There are 1001 points on a trace (4 sec @@ 4 mils or see SYNINFO)
suaddhead <TRACES ns=1001 ftn=1 |
sushw key=dt a=4000 >DATA


###  Now use cz1fil to make first data file, here called "data1in"
cz1fil <DATA >data1in par=parcz1


###  And use cz2fil to make second data file here called "data2in"
cz2fil <DATA >data2in par=parcz2


###  Run the CZ suite and record stdout output in "CZINFO".  Stderr to tty.
rm -f DATA1 CZINFO
cz1in <data1in >CZINFO
rm -f PTRACES
cz1 >>CZINFO
rm -f DATA2
cz2in <data2in >>CZINFO
rm -f INVTRACES TABLES SUMS
cz2 >>CZINFO


###  Now use cz3fil to make bare traces and suaddhead, sushw par files
###  Use sed to strip out Fortran's inserted blanks in the par files
###  and to separate the parfil into the required pieces for the 3 parfiles.
###  The name of the (temporary) bare trace file is hardwired as "BARE".
rm -f BARE parfil
cz3fil <data2in >>CZINFO
sed 's/=  */=/' parfil >par.tmp
sed -n '
	/ns/p
	/ftn/p
' par.tmp >paraddhead
sed -n '/dz/p' par.tmp >parshw1
sed -n '/zmin/p' par.tmp >parshw2
rm -f par.tmp parfil


###  Put headers back on to make SEG-Y traces in file called "IMAGE"
###  (or whatever you like, by altering the last line of this file).
suaddhead <BARE par=paraddhead |
sushw par=parshw1 |
sushw par=parshw2 >IMAGE

###  Typical print job (after examining header to get zmin and dz)
#suwind <IMAGE key=tracl j=5 |
#sutwig title="CZ inversion" label1=Depth tmin=12.5 dt=15.49
@


1.8
log
@Oops. cz3fil DOES echo some stuff to stdout--put it back on CZINFO
@
text
@d5 1
a5 1
# $Revision: 1.7 $ ; $Date: 88/05/21 22:17:52 $
d60 4
@


1.7
log
@Took out commented away portions.  Let cz3fil (Fortran) write to tty
instead of CZINFO.
@
text
@d5 1
a5 1
# $Revision: 1.6 $ ; $Date: 88/05/21 18:11:32 $
d44 1
a44 1
cz3fil <data2in
@


1.6
log
@Adjust names for new cz3fil.   Cosmetics.
@
text
@d5 1
a5 1
# $Revision: 1.5 $ ; $Date: 88/05/21 17:22:26 $
d7 1
a7 1
###  Set up data for CZ benchmark as per release notes
d10 2
a11 2
#rm -f TRACES
#czsyn <datasyn >SYNINFO
d15 3
a17 3
###  There are 1001 points on a trace (4 sec @@ 4 mils or see partsyn)
#suaddhead <TRACES ns=1001 ftn=1 |
#sushw key=dt a=4000 >DATA
d21 1
a21 1
#cz1fil <DATA >data1in par=parcz1
d25 1
a25 1
#cz2fil <DATA >data2in par=parcz2
d29 8
a36 8
#rm -f DATA1 CZINFO
#cz1in <data1in >CZINFO
#rm -f PTRACES
#cz1 >>CZINFO
#rm -f DATA2
#cz2in <data2in >>CZINFO
#rm -f INVTRACES TABLES SUMS
#cz2 >>CZINFO
d44 1
a44 1
cz3fil <data2in >>CZINFO
@


1.5
log
@Error messages to tty.  Cosmetics.
@
text
@d5 1
a5 1
# $Revision: 1.4 $ ; $Date: 88/05/21 17:14:55 $
a6 1
###
a11 1
###
d13 1
a17 1
###
d19 1
a21 1
###
d23 1
a25 1
###
d27 1
a36 1
###
d38 1
d42 3
a44 2
rm -f INVERTED parfil
cz3fil >>CZINFO
d52 1
a52 2
#rm -f par.tmp parfil
###
d54 4
a57 2
###  Put headers back on to make SEG-Y traces in file called IMAGE
suaddhead <INVERTED par=paraddhead |
a59 1
###
@


1.4
log
@Shell file to run the CZ suite under SU.
@
text
@d5 1
a5 1
# $Revision: 1.3 $ ; $Date: 87/09/28 09:46:09 $
d7 4
a10 2
##  Set up data for CZ benchmark as per release notes
##  First create TRACES (bare seismic data for 2 flat reflectors)
d12 2
a13 1
#czsyn <datasyn >partsyn
d29 1
a29 1
###  Run the CZ suite and record stdout & stderr output in the file "CZINFO"
d31 1
a31 1
#cz1in <data1in >CZINFO 2>&1
d33 1
a33 1
#cz1 >>CZINFO 2>&1
d35 1
a35 1
#cz2in <data2in >>CZINFO 2>&1
d37 1
a37 1
#cz2 >>CZINFO 2>&1
d42 1
a42 1
###  and to separate the parfil into pieces
@


1.3
log
@Cosmetic.
@
text
@d2 1
a2 1
# runcz - run CZ starting and ending with SEGY data
d4 2
a5 2
# $Source: /src/segy/czfilters/RCS/runcz,v $
# $Revision: 1.2 $ ; $Date: 87/09/26 21:20:09 $
d7 34
a40 15
sunmo par=parnmo <DATA >NMO
susort <NMO | sustack >TMPSTK
suinfo <TMPSTK >STACK
cz1fil <STACK 2>data1in
cz2fil par=parcz2 <STACK 2>data2in
sustrip ftn=1 <STACK >TRACES
rm -f DATA1
cz1in <data1in >CZINFO 2>&1
rm -f PTRACES
cz1 >>CZINFO 2>&1
rm -f DATA2
cz2in <data2in >CZINFO 2>&1
rm -f INVTRACES TABLES SUMS
cz2 >>CZINFO 2>&1
rm -f INVERTED parhed
d42 15
a56 3
sed 's/=  */=/' parhed >parhed.tmp
mv -f parhed.tmp parhed
suahed <INVERTED par=parhed | sushw key=tracl a=1 c=1 >IMAGE
@


1.2
log
@Added tracl key to IMAGE with sushw.
@
text
@d5 1
a5 1
# $Revision: 1.1 $ ; $Date: 87/09/26 01:05:13 $
d14 1
a14 1
cz1in <data1in >part1in 2>&1
d16 1
a16 1
cz1 >part1 2>&1
d18 1
a18 1
cz2in <data2in >part2in 2>&1
d20 1
a20 1
cz2 >part2 2>&1
d22 1
a22 1
cz3fil >CZINFO
@


1.1
log
@Initial revision
@
text
@d4 2
a5 2
# $Source$
# $Revision$ ; $Date$
d25 1
a25 1
suahed <INVERTED >IMAGE par=parhed
@
