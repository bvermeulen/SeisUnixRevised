head	1.15;
access;
symbols;
locks; strict;
comment	@ * @;


1.15
date	2011.11.11.23.57.38;	author john;	state Exp;
branches;
next	1.14;

1.14
date	96.09.06.20.44.42;	author john;	state Exp;
branches;
next	1.13;

1.13
date	94.09.06.09.49.15;	author jkc;	state Exp;
branches;
next	1.12;

1.12
date	94.08.03.10.51.13;	author jkc;	state Exp;
branches;
next	1.11;

1.11
date	94.04.15.17.10.18;	author john;	state Exp;
branches;
next	1.10;

1.10
date	94.03.14.14.19.47;	author john;	state Exp;
branches;
next	1.9;

1.9
date	93.08.13.10.26.51;	author john;	state Exp;
branches;
next	1.8;

1.8
date	92.02.18.12.33.31;	author jkc;	state Exp;
branches;
next	1.7;

1.7
date	91.09.05.08.47.52;	author jkcohen;	state Exp;
branches;
next	1.6;

1.6
date	90.12.26.17.12.20;	author jkc;	state Exp;
branches;
next	1.5;

1.5
date	90.10.25.09.54.22;	author jkc;	state Exp;
branches;
next	1.4;

1.4
date	90.09.03.10.01.38;	author jkc;	state Exp;
branches;
next	1.3;

1.3
date	90.04.25.22.21.12;	author jkc;	state Exp;
branches;
next	1.2;

1.2
date	90.04.24.09.21.12;	author jkc;	state Exp;
branches;
next	1.1;

1.1
date	90.04.15.16.05.02;	author jkc;	state Exp;
branches;
next	;


desc
@Manage variable of typedef value
@


1.15
log
@copyright
@
text
@/* Copyright (c) Colorado School of Mines, 2011.*/
/* All rights reserved.                       */

/* VALPKGE: $Revision: 1.14 $ ; $Date: 1996/09/06 20:44:42 $	*/


/*********************** self documentation **********************/
/************************************************************************* 
VALPKGE - routines to handle variables of type Value

vtoi		cast Value variable as an int
vtol		cast Value variable as a long
vtof		cast Value variable as a float
vtod		cast Value variable as a double
atoval		convert ascii to Value
valtoabs	take absolute value of a Value variable
valcmp		compare Value variables
printfval	printf a Value variable
fprintfval	fprintf a Value variable
scanfval	scanf a Value variable
printftype	printf for the type of a segy header word

************************************************************************** 
Function Prototypes:
int vtoi(register cwp_String type, Value val);
long vtol(register cwp_String type, Value val);
float vtof(register cwp_String type, Value val);
double vtod(register cwp_String type, Value val);
void atoval(cwp_String type, cwp_String keyval, Value *valp);
Value valtoabs(cwp_String type, Value val);
int valcmp(register cwp_String type, Value val1, Value val2);
void printfval(register cwp_String type, Value val);
void fprintfval(FILE *stream, register cwp_String type, Value val);
void scanfval(register cwp_String type, Value *valp);

************************************************************************** 
Notes:
A Value is defined by the following in .../su/include/su.h:

typedef union { * storage for arbitrary type *
	char s[8];
	short h;
	unsigned short u;
	long l;
	unsigned long v;
	int i;
	unsigned int p;
	float f;
	double d;
	unsigned int U:16;
	unsigned int P:32;
} Value;

The use of the valpkge routines, as well as the hdrpkge routines,
permits the user to change the definition of the types of the 
various fields of the segy data type, without breaking codes that
look at part or all of these fields.

************************************************************************** 
Authors: CWP: Jack K. Cohen, Shuki Ronen
**************************************************************************/
/**************** end self doc ********************************/

#include "su.h"
#include "segy.h"
#include "header.h"


int vtoi(register cwp_String type, Value val)
{
	switch(*type) {
		case 's': return (int) val.s[0];
		case 'h': return (int) val.h;
		case 'u': return (int) val.u;
		case 'l': return (int) val.l;
		case 'v': return (int) val.v;
		case 'i': return       val.i;
		case 'p': return (int) val.p;
		case 'f': return (int) val.f;
		case 'U': return (int) val.U;
		case 'P': return (int) val.P;
		default: err("vtoi: unknown type %s", type);
			 return 0;	/* for lint */
	}
}

long vtol(register cwp_String type, Value val)
{
	switch(*type) {
		case 's': return (long) val.s[0];
		case 'h': return (long) val.h;
		case 'u': return (long) val.u;
		case 'l': return        val.l;
		case 'v': return (long) val.v;
		case 'i': return (long) val.i;
		case 'p': return (long) val.p;
		case 'f': return (long) val.f;
		case 'd': return (long) val.d;
		case 'U': return (long) val.U;
		case 'P': return (long) val.P;
		default: err("vtol: unknown type %s", type);
			 return 0L;	/* for lint */
	}
}


float vtof(register cwp_String type, Value val)
{
	switch(*type) {
		case 's': return (float) val.s[0];
		case 'h': return (float) val.h;
		case 'u': return (float) val.u;
		case 'l': return (float) val.l;
		case 'v': return (float) val.v;
		case 'i': return (float) val.i;
		case 'p': return (float) val.p;
		case 'f': return         val.f;
		case 'd': return (float) val.d;
		case 'U': return (float) val.U;
		case 'P': return (float) val.P;
		default: err("vtof: unknown type %s", type);
			 return 0.0;	/* for lint */
	}
}

double vtod(register cwp_String type, Value val)
{
	switch(*type) {
		case 's': return (double) val.s[0];
		case 'h': return (double) val.h;
		case 'u': return (double) val.u;
		case 'l': return (double) val.l;
		case 'v': return (double) val.v;
		case 'i': return (double) val.i;
		case 'p': return (double) val.p;
		case 'f': return (double) val.f;
		case 'd': return          val.d;
		case 'U': return (double) val.U;
		case 'P': return (double) val.P;
		default: err("vtod: unknown type %s", type);
			 return 0.0;	/* for lint */
	}
}


int valcmp(register cwp_String type, Value val1, Value val2)
{
	switch(*type) {
		case 's': return strcmp(val1.s, val2.s);
		case 'h':
			if      ( val1.h < val2.h ) return -1;
			else if ( val1.h > val2.h ) return  1;
			else                        return  0;
		case 'u':
			if      ( val1.u < val2.u ) return -1;
			else if ( val1.u > val2.u ) return  1;
			else                        return  0;
		case 'l':
			if      ( val1.l < val2.l ) return -1;
			else if ( val1.l > val2.l ) return  1;
			else                        return  0;
		case 'v':
			if      ( val1.v < val2.v ) return -1;
			else if ( val1.v > val2.v ) return  1;
			else                        return  0;
		case 'i':
			if      ( val1.i < val2.i ) return -1;
			else if ( val1.i > val2.i ) return  1;
			else                        return  0;
		case 'p':
			if      ( val1.p < val2.p ) return -1;
			else if ( val1.p > val2.p ) return  1;
			else                        return  0;
		case 'f':
			if      ( val1.f < val2.f ) return -1;
			else if ( val1.f > val2.f ) return  1;
			else                        return  0;
		case 'd':
			if      ( val1.d < val2.d ) return -1;
			else if ( val1.d > val2.d ) return  1;
			else                        return  0;
		case 'U':
			if      ( val1.U < val2.U ) return -1;
			else if ( val1.U > val2.U ) return  1;
			else                        return  0;
		case 'P':
			if      ( val1.P < val2.P ) return -1;
			else if ( val1.P > val2.P ) return  1;
			else                        return  0;
		default: err("valcmp: unknown type %s", type);
			 return 0;	/* for lint */
	}
}


void printfval(register cwp_String type, Value val)
{
	switch(*type) {
	case 's':
		(void) printf("%s", val.s);
	break;
	case 'h':
		(void) printf("%d", val.h);
	break;
	case 'u':
		(void) printf("%d", val.u);
	break;
	case 'i':
		(void) printf("%d", val.i);
	break;
	case 'p':
		(void) printf("%d", val.p);
	break;
	case 'l':
		(void) printf("%ld", val.l);
	break;
	case 'v':
		(void) printf("%ld", val.v);
	break;
	case 'f':
		(void) printf("%f", val.f);
	break;
	case 'd':
		(void) printf("%f", val.d);
	break;
	case 'U':
		(void) printf("%d", val.U);
	break;
	case 'P':
		(void) printf("%d", val.P);
	break;
	default:
		err("printfval: unknown type %s", type);
	}

	return;
}


void fprintfval(FILE *stream, register cwp_String type, Value val)
{
	switch(*type) {
	case 's':
		(void) fprintf(stream, "%s", val.s);
	break;
	case 'h':
		(void) fprintf(stream, "%d", val.h);
	break;
	case 'u':
		(void) fprintf(stream, "%d", val.u);
	break;
	case 'i':
		(void) fprintf(stream, "%d", val.i);
	break;
	case 'p':
		(void) fprintf(stream, "%d", val.p);
	break;
	case 'l':
		(void) fprintf(stream, "%ld", val.l);
	break;
	case 'v':
		(void) fprintf(stream, "%ld", val.v);
	break;
	case 'f':
		(void) fprintf(stream, "%f", val.f);
	break;
	case 'd':
		(void) fprintf(stream, "%f", val.d);
	break;
	case 'U':
		(void) fprintf(stream, "%d", val.U);
	break;
	case 'P':
		(void) fprintf(stream, "%d", val.P);
	break;
	default:
		err("fprintfval: unknown type %s", type);
	}

	return;
}


void scanfval(register cwp_String type, Value *valp)
{
	switch(*type) {
	case 's':
		(void) scanf("%s", (char *) valp);
	break;
	case 'h':
	case 'u':
	case 'U':
		(void) scanf("%hd", (short *) valp);
	break;
	case 'i':
	case 'p':
	case 'P':
		(void) scanf("%d", (int *) valp);
	break;
	case 'l':
	case 'v':
		(void) scanf("%ld", (long int *)  valp);
	break;
	case 'f':
		(void) scanf("%f", (float *) valp);
	break;
	case 'd':
		(void) scanf("%lf", (double *) valp);
	break;
	default:
		err("scanfval: unknown type %s", type);
	}

	return;
}


void printftype(register cwp_String key)
{
	switch(*hdtype(key)) {
	case 's':
		(void) printf("char\n");
	break;
	case 'h':
		(void) printf("short\n");
	break;
	case 'u':
		(void) printf("ushort\n");
	break;
	case 'i':
		(void) printf("int\n");
	break;
	case 'p':
		(void) printf("unsigned int\n");
	break;
	case 'l':
		(void) printf("long\n");
	break;
	case 'v':
		(void) printf("ulong\n");
	break;
	case 'f':
		(void) printf("float\n");
	break;
	case 'd':
		(void) printf("double\n");
	break;
	case 'U':
		(void) printf("unsigned int:16\n");
	break;
	case 'P':
		(void) printf("unsigned int:32\n");
	break;
	default:
		err("printftype: unknown type %s", hdtype(key));
	break;
	}
	return;
}


/* Convert ascii to Value according to type of keyword -- omitted bit types */
void atoval(
cwp_String type,	/* type of header keyword		*/
cwp_String keyval,	/* value of header keyword as ascii 	*/
Value *valp	/* pointer to converted value		*/
)
{
	switch(*type) {
	case 's':
		(void) strcpy(valp->s, keyval);
	break;
	case 'h':
		valp->h = eatoh(keyval); 
	break;
	case 'u':
		valp->u = eatou(keyval); 
	break;
	case 'i':
		valp->i = eatoi(keyval); 
	break;
	case 'p':
		valp->p = eatop(keyval); 
	break;
	case 'l':
		valp->l = eatol(keyval); 
	break;
	case 'v':
		valp->v = eatov(keyval); 
	break;
	case 'f':
		valp->f = eatof(keyval); 
	break;
	case 'd':
		valp->d = eatod(keyval); 
	break;
	default:
		err("%s: %s: mysterious data type: %s",
					__FILE__, __LINE__, keyval);
	break;
	}

	return;
}

/* Value getpar -- omitted string, bit types for now */
void getparval(cwp_String name, cwp_String type, int n, Value *valp)
{
        register int k;
	short *h;
	unsigned short *u;
	long *l;
	unsigned long *v;
	int *i;
	unsigned int *p;
	float *f;
	double *d;
	
	switch(*type) {
        case 'h':
		h = (short*) ealloc1(n, sizeof(short));
		getparshort(name, h);  
		for (k = 0; k < n; ++k) valp[k].h = h[k];
	break;
        case 'u':
		u = (unsigned short*) ealloc1(n, sizeof(unsigned short));
		getparushort(name, u);  
		for (k = 0; k < n; ++k) valp[k].u = u[k];
	break;
        case 'i':
		i = (int*) ealloc1(n, sizeof(int));
		getparint(name, i);  
		for (k = 0; k < n; ++k) valp[k].i = i[k];
	break;  
        case 'p':
		p = (unsigned int*) ealloc1(n, sizeof(unsigned int));
		getparuint(name, p);  
		for (k = 0; k < n; ++k) valp[k].p = p[k];
	break;
        case 'l':
		l = (long*) ealloc1(n, sizeof(long));
		getparlong(name, l);  
		for (k = 0; k < n; ++k) valp[k].l = l[k];
	break;
        case 'v':
		v = (unsigned long*) ealloc1(n, sizeof(unsigned long));
		getparulong(name, v);  
		for (k = 0; k < n; ++k) valp[k].v = v[k];
	break;
        case 'f':
		f = (float*) ealloc1(n, sizeof(float));
		getparfloat(name, f);  
		for (k = 0; k < n; ++k) valp[k].f = f[k];
	break;  
        case 'd':
		d = (double*) ealloc1(n, sizeof(double));
		getpardouble(name, d);  
		for (k = 0; k < n; ++k) valp[k].d = d[k];
	break;  
        default:
                err("getparval: %d: mysterious type %s", __LINE__, type);
        }
}


/* Get absolute value for type value variable */
Value valtoabs(cwp_String type, Value val)
{
        switch(*type) {
        case 'u':       /* do nothing if unsigned */
        case 'v':
        case 'p':
	case 'U':
	case 'P':
        break;
        case 'h':
                val.h = ABS(val.h);
        break;
        case 'i':
                val.i = ABS(val.i);
        break;
        case 'l':
                val.l = ABS(val.l);
        break;
        case 'f':
                val.f = ABS(val.f);
        break;
        case 'd':
                val.d = ABS(val.d);
        break;
        default:
                err("valtoabs: %d: mysterious type %s", __LINE__, type);
        }

        return val;
}

@


1.14
log
@put in explicit casts to make -Wall stop complaining about
type mismatches in  subroutine "scanfval"
@
text
@d1 4
a4 1
/* VALPKGE: $Revision: 1.13 $ ; $Date: 1994/09/06 09:49:15 $	*/
@


1.13
log
@printheader subroutine moved to hdrpkge.c
Removed some old fashioned documentation superceded by function prototypes
Added unsigned int U:16 and unsigned int P:32 cases to the routines
@
text
@d1 1
a1 1
/* VALPKGE: $Revision: 1.11 $ ; $Date: 94/04/15 17:10:18 $	*/
d285 1
a285 1
		(void) scanf("%s", valp);
d290 1
a290 1
		(void) scanf("%hd", valp);
d295 1
a295 1
		(void) scanf("%d", valp);
d299 1
a299 1
		(void) scanf("%ld", valp);
d302 1
a302 1
		(void) scanf("%f", valp);
d305 1
a305 1
		(void) scanf("%lf", valp);
@


1.12
log
@Added patches for several missing i and p branches.
@
text
@a18 1
printheader	display non-null header field values
a31 1
void printheader(segy *tp);
a33 49
vtoi, vtol, vtof, vtod
Input:
type		data type via the code: s,h,u,l,v,i,p,f,d
val		a variable of type Value

Output: recast val to int, long, float, double

************************************************************************** 
atoval:
Input:
type		data type via the code: s,h,u,l,v,i,p,f,d
keyval		key from hdr.h
valp		pointer to a Value

************************************************************************** 
valcmp:
Input
type		data type via the code: s,h,u,l,v,i,p,f,d
val1		a variable of type Value
val2		a variable of type Value

Return:  
-1	if val1.type < val2.type
1	if val1.type > val2.type
0	if val1.type = val2.type

************************************************************************** 
printfval:
Input:
type		data type via the code: s,h,u,l,v,i,p,f,d
val		a variable of type Value

************************************************************************** 
fprintfval:
Input:
stream		FILE to fprintf to
type		data type via the code: s,h,u,l,v,i,p,f,d
val		a variable of type Value

************************************************************************** 
scanfval:
type		data type via the code: s,h,u,l,v,i,p,f,d
valp		a pointer to a variable of type Value

************************************************************************** 
printheader:
tp		pointer to a segy

************************************************************************** 
d47 2
d77 2
a78 1
		case 'd': return (int) val.d;
d96 2
d116 2
d135 2
d179 8
d205 6
a216 6
	case 'i':
		(void) printf("%d", val.i);
	break;
	case 'p':
		(void) printf("%d", val.p);
	break;
d223 6
d249 6
a260 6
	case 'i':
		(void) fprintf(stream, "%d", val.i);
	break;
	case 'p':
		(void) fprintf(stream, "%d", val.p);
	break;
d267 6
d289 1
d294 1
d345 6
d359 1
a359 29
/* Display non-null header field values */
void printheader(segy *tp)
{
	int i;			/* index over header fields		*/
	int j;			/* index over non-null header fields	*/
	Value val;		/* value in header field		*/
	cwp_String type;		/* ... its data type			*/
	cwp_String key;		/* ... the name of the header field	*/
	Value zeroval;		 /* zero value to compare with		*/

	zeroval.l = 0;
	j = 0;
	for (i = 0; i < SU_NKEYS; i++) {
		gethval(tp, i, &val);
		key = getkey(i);
		type = hdtype(key);
		if (valcmp(type, val, zeroval)) { /* not equal to zero */
			(void) printf(" %s=", key);
			printfval(type, val);
			if ((++j % 6) == 0) putchar('\n');
		}
	}
	putchar('\n');

	return;
}


/* Convert ascii to Value according to type of keyword */
d403 1
a403 1
/* Value getpar -- omitted string type for now */
d470 2
@


1.11
log
@cosmetic
@
text
@d1 1
a1 1
/* VALPKGE: $Revision: 1.10 $ ; $Date: 94/03/14 14:19:47 $	*/
d209 4
d248 3
d286 3
d313 4
d347 6
a358 3
	case 'i':
		(void) printf("int\n");
	break;
d418 6
d469 10
a488 10
        case 'i':
		i = (int*) ealloc1(n, sizeof(int));
		getparint(name, i);  
		for (k = 0; k < n; ++k) valp[k].i = i[k];
	break;  
        case 'p':
		p = (unsigned int*) ealloc1(n, sizeof(unsigned int));
		getparuint(name, p);  
		for (k = 0; k < n; ++k) valp[k].p = p[k];
	break;
d516 3
a520 3
        break;
        case 'i':
                val.i = ABS(val.i);
@


1.10
log
@added dummy selfdocs
@
text
@d1 1
a1 1
/* VALPKGE: $Revision: 1.9 $ ; $Date: 93/08/13 10:26:51 $	*/
d3 2
d108 1
@


1.9
log
@changed String to cwp_String, Bool to cwp_Bool
@
text
@d1 1
a1 1
/* VALPKGE: $Revision: 1.8 $ ; $Date: 92/02/18 12:33:31 $	*/
d3 2
a4 12
/*----------------------------------------------------------------------
 * Copyright (c) Colorado School of Mines, 1989.
 * All rights reserved.
 *
 * This code is part of SU.  SU stands for Seismic Unix, a processing line
 * developed at the Colorado School of Mines, partially based on Stanford
 * Exploration Project (SEP) software.  Inquiries should be addressed to:
 *
 *  Jack K. Cohen, Center for Wave Phenomena, Colorado School of Mines,
 *  Golden, CO 80401  (jkc@@dix.mines.colorado.edu)
 *----------------------------------------------------------------------
 */
d6 101
a109 22

/* valpkge - routines to handle variables of type Value
 *
 * vtoi       - cast Value variable as an int
 * vtol       - cast Value variable as a long
 * vtof       - cast Value variable as a float
 * vtod       - cast Value variable as a double
 * atoval     - convert ascii to Value
 * valtoabs   - take absolute value of a Value variable
 * valcmp     - compare Value variables
 * getparval  - getpar a Value variable
 * printfval  - printf a Value variable
 * fprintfval - fprintf a Value variable
 * scanfval   - scanf a Value variable
 * printftype - printf for the type of a segy header word
 * printheader- display non-null header field values
 *
 *
 * Credits:
 *
 *	CWP: Jack, Shuki
 */
@


1.8
log
@Moved some subs from suwind to valpkge.
@
text
@d1 1
a1 1
/* VALPKGE: $Revision: 1.7 $ ; $Date: 91/09/05 08:47:52 $	*/
d43 1
a43 1
int vtoi(register String type, Value val)
d60 1
a60 1
long vtol(register String type, Value val)
d78 1
a78 1
float vtof(register String type, Value val)
d95 1
a95 1
double vtod(register String type, Value val)
d113 1
a113 1
int valcmp(register String type, Value val1, Value val2)
d151 1
a151 1
void printfval(register String type, Value val)
d186 1
a186 1
void fprintfval(FILE *stream, register String type, Value val)
d221 1
a221 1
void scanfval(register String type, Value *valp)
d249 1
a249 1
void printftype(register String key)
d290 2
a291 2
	String type;		/* ... its data type			*/
	String key;		/* ... the name of the header field	*/
d314 2
a315 2
String type,	/* type of header keyword		*/
String keyval,	/* value of header keyword as ascii 	*/
d351 1
a351 1
void getparval(String name, String type, int n, Value *valp)
d411 1
a411 1
Value valtoabs(String type, Value val)
@


1.7
log
@string -> String and so forth.
@
text
@d1 1
a1 1
/* VALPKGE: $Revision: 1.6 $ ; $Date: 90/12/26 17:12:20 $	*/
d27 1
d29 1
a35 12
 * Returns:
 *	vtoi       : int
 *	vtol       : long
 *	vtof       : float
 *	vtod       : double
 *	atoval     : void
 *	valcmp     : int
 *	printfval  : void
 *	fprintfval : void
 *	scanfval   : void
 *	printftype : void
 *	printheader: void
a36 49
 * Examples:
 *	scanfval(hdtype(key), &val);
 *	printfval(hdtype(key), val); putchar('\n');
 *	fval = vtof(hdtype(key), val);
 *
 * Synopsis:
 *	int vtoi(type, val)
 *	String type;
 *	Value val;
 *
 *	long vtol(type, val)
 *	String type;
 *	Value val;
 *
 *	float vtof(type, val)
 *	String type;
 *	Value val;
 *
 *	double vtod(type, val)
 *	String type;
 *	Value val;
 *
 *	void atoval(type, keyval, valp)
 *	String type;
 *	String keyval;
 *	Value *valp;
 *
 *	int valcmp(val1, val2)
 *	Value val1, val2;
 *
 *	void printfval(type, val)
 *	String type;
 *	Value val;
 *
 *	void fprintfval(stream, type, val)
 *	FILE stream;
 *	String type;
 *	Value val;
 *
 *	void scanfval(type, valp)
 *	String type;
 *	Value *valp;
 *
 *	void printftype(key)
 *	String key;
 *
 *	void printheader(tp)
 *	segy *tp;
 *
d349 91
@


1.6
log
@Tweak
@
text
@d1 1
a1 1
/* VALPKGE: $Revision: 1.5 $ ; $Date: 90/10/25 09:54:22 $	*/
d20 1
a20 1
/* valpkge - routines to handle variables of type value
d22 9
a30 9
 * vtoi       - cast value variable as an int
 * vtol       - cast value variable as a long
 * vtof       - cast value variable as a float
 * vtod       - cast value variable as a double
 * atoval     - convert ascii to value
 * valcmp     - compare value variables
 * printfval  - printf a value variable
 * fprintfval - fprintf a value variable
 * scanfval   - scanf a value variable
d54 2
a55 2
 *	string type;
 *	value val;
d58 2
a59 2
 *	string type;
 *	value val;
d62 2
a63 2
 *	string type;
 *	value val;
d66 2
a67 2
 *	string type;
 *	value val;
d70 3
a72 3
 *	string type;
 *	string keyval;
 *	value *valp;
d75 1
a75 1
 *	value val1, val2;
d78 2
a79 2
 *	string type;
 *	value val;
d83 2
a84 2
 *	string type;
 *	value val;
d87 2
a88 2
 *	string type;
 *	value *valp;
d91 1
a91 1
 *	string key;
d102 1
a102 1
int vtoi(register string type, value val)
d119 1
a119 1
long vtol(register string type, value val)
d137 1
a137 1
float vtof(register string type, value val)
d154 1
a154 1
double vtod(register string type, value val)
d172 1
a172 1
int valcmp(register string type, value val1, value val2)
d210 1
a210 1
void printfval(register string type, value val)
d245 1
a245 1
void fprintfval(FILE *stream, register string type, value val)
d280 1
a280 1
void scanfval(register string type, value *valp)
d308 1
a308 1
void printftype(register string key)
d348 4
a351 4
	value val;		/* value in header field		*/
	string type;		/* ... its data type			*/
	string key;		/* ... the name of the header field	*/
	value zeroval;		 /* zero value to compare with		*/
d371 1
a371 1
/* Convert ascii to value according to type of keyword */
d373 3
a375 3
string type,	/* type of header keyword			*/
string keyval,	/* value of header keyword as ascii string	*/
value *valp	/* pointer to converted value			*/
@


1.5
log
@Valid ANSI C way of getting zeroval initialized.  Ugh.
@
text
@d1 1
a1 1
/* VALPKGE: $Revision: 1.4 $ ; $Date: 90/09/03 10:01:38 $	*/
d12 1
a12 1
 *  Golden, CO 80401  (isis!csm9a!jkcohen)
d97 1
a98 2
 *
 *
@


1.4
log
@Made zeroval a const
@
text
@d1 1
a1 1
/* VALPKGE: $Revision: 1.3 $ ; $Date: 90/04/25 22:21:12 $	*/
d352 1
a352 1
	const value zeroval = {0};	/* zero as a value		*/
d354 1
@


1.3
log
@Wow--nodded off and cast eatof to int.  Makes a lot of things zero!
@
text
@d1 1
a1 1
/* VALPKGE: $Revision: 1.2 $ ; $Date: 90/04/24 09:21:12 $	*/
d352 1
a352 1
	value zeroval = {0};	/* zero as a value 			*/
@


1.2
log
@z -> d as double indicator; atoue -> eatou and so on
@
text
@d1 1
a1 1
/* VALPKGE: $Revision: 1.1 $ ; $Date: 90/04/15 16:05:02 $	*/
d395 1
a395 1
		valp->f = (int) eatof(keyval); 
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/* VALPKGE: $Revision: 1.25 $ ; $Date: 89/05/25 16:11:19 $	*/
d25 1
a25 1
 * vtoz       - cast value variable as a double
d38 1
a38 1
 *	vtoz       : double
d65 1
a65 1
 *	double vtoz(type, val)
d114 1
a114 1
		case 'z': return (int) val.z;
d131 1
a131 1
		case 'z': return (long) val.z;
d149 1
a149 1
		case 'z': return (float) val.z;
d155 1
a155 1
double vtoz(register string type, value val)
d166 2
a167 2
		case 'z': return          val.z;
		default: err("vtoz: unknown type %s", type);
d201 3
a203 3
		case 'z':
			if      ( val1.z < val2.z ) return -1;
			else if ( val1.z > val2.z ) return  1;
d235 2
a236 2
	case 'z':
		(void) printf("%f", val.z);
d270 2
a271 2
	case 'z':
		(void) fprintf(stream, "%f", val.z);
d298 1
a298 1
	case 'z':
d333 1
a333 1
	case 'z':
d383 1
a383 1
		valp->h = atohe(keyval); 
d386 1
a386 1
		valp->u = atoue(keyval); 
d389 1
a389 1
		valp->l = atole(keyval); 
d392 1
a392 1
		valp->v = atove(keyval); 
d395 1
a395 1
		valp->f = atof(keyval); 
d397 2
a398 2
	case 'z':
		valp->z = atof(keyval); 
@
