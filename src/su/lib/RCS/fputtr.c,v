head	1.36;
access;
symbols;
locks; strict;
comment	@ * @;


1.36
date	2012.10.22.17.53.57;	author john;	state Exp;
branches;
next	1.35;

1.35
date	2011.11.11.23.57.38;	author john;	state Exp;
branches;
next	1.34;

1.34
date	2011.09.09.22.28.18;	author john;	state Exp;
branches;
next	1.33;

1.33
date	2006.03.29.22.58.03;	author john;	state Exp;
branches;
next	1.32;

1.32
date	2006.02.08.17.53.57;	author john;	state Exp;
branches;
next	1.31;

1.31
date	2005.02.07.21.16.03;	author john;	state Exp;
branches;
next	1.30;

1.30
date	2004.12.23.22.38.23;	author john;	state Exp;
branches;
next	1.29;

1.29
date	2003.08.19.16.52.47;	author john;	state Exp;
branches;
next	1.28;

1.28
date	2003.08.19.16.50.50;	author john;	state Exp;
branches;
next	1.27;

1.27
date	2003.03.06.19.55.13;	author john;	state Exp;
branches;
next	1.26;

1.26
date	2002.03.15.18.16.01;	author john;	state Exp;
branches;
next	1.25;

1.25
date	98.03.31.20.34.49;	author john;	state Exp;
branches;
next	1.24;

1.24
date	98.03.26.23.55.13;	author john;	state Exp;
branches;
next	1.23;

1.23
date	96.09.16.17.11.52;	author john;	state Exp;
branches;
next	1.22;

1.22
date	96.09.06.19.56.31;	author john;	state Exp;
branches;
next	1.21;

1.21
date	96.02.22.16.12.25;	author jkc;	state Exp;
branches;
next	1.20;

1.20
date	96.02.20.19.48.26;	author jkc;	state Exp;
branches;
next	1.19;

1.19
date	96.02.12.16.51.12;	author jkc;	state Exp;
branches;
next	1.18;

1.18
date	96.01.23.20.27.42;	author jkc;	state Exp;
branches;
next	1.17;

1.17
date	96.01.20.05.25.26;	author jkc;	state Exp;
branches;
next	1.16;

1.16
date	96.01.19.22.58.48;	author jkc;	state Exp;
branches;
next	1.15;

1.15
date	96.01.19.20.16.34;	author jkc;	state Exp;
branches;
next	1.14;

1.14
date	96.01.12.20.40.16;	author jkc;	state Exp;
branches;
next	1.13;

1.13
date	94.03.14.14.19.40;	author john;	state Exp;
branches;
next	1.12;

1.12
date	93.08.13.10.26.44;	author john;	state Exp;
branches;
next	1.11;

1.11
date	92.10.30.08.58.01;	author john;	state Exp;
branches;
next	1.10;

1.10
date	91.09.05.08.47.42;	author jkcohen;	state Exp;
branches;
next	1.9;

1.9
date	91.06.28.09.40.50;	author jkcohen;	state Exp;
branches;
next	1.8;

1.8
date	91.01.10.09.35.49;	author jkc;	state Exp;
branches;
next	1.7;

1.7
date	90.12.23.20.02.14;	author jkc;	state Exp;
branches;
next	1.6;

1.6
date	90.12.22.18.37.52;	author jkc;	state Exp;
branches;
next	1.5;

1.5
date	90.12.21.14.17.08;	author jkc;	state Exp;
branches;
next	1.4;

1.4
date	90.10.27.22.30.48;	author jkc;	state Exp;
branches;
next	1.3;

1.3
date	90.10.26.19.27.09;	author jkc;	state Exp;
branches;
next	1.2;

1.2
date	90.09.03.09.59.46;	author jkc;	state Exp;
branches;
next	1.1;

1.1
date	90.04.15.15.59.06;	author jkc;	state Exp;
branches;
next	;


desc
@Put a segy trace
@


1.36
log
@Ekkehart Tessmer's modification of getpar to a conditional because
the command line parameter 'lheader' is not initialized if it is not listed
on the command line.
@
text
@/* Copyright (c) Colorado School of Mines, 2011.*/
/* All rights reserved.                       */

/* FPUTTR: $Revision: 1.35 $; $Date: 2011/11/11 23:57:38 $	*/


/*********************** self documentation **********************/
/****************************************************************************
FPUTTR - Routines to put an SU trace to a file 

fputtr		put a segy trace to a file by file pointer
fvputtr		put a segy trace to a file by file pointer (variable ns)
puttr		macro using fputtr to put a trace to stdin
vputtr		macro using fputtr to put a trace to stdin (variable ns)
 
*****************************************************************************
Function Prototype:
void fputtr(FILE *fp, segy *tp);
void fvputtr(FILE *fp, segy *tp);

*****************************************************************************
Returns:

	void
 
*****************************************************************************
Notes:

The functions puttr(x) vputtr(x) are macros defined in segy.h
#define puttr(x)	fputtr(stdin, (x))
#define vputtr(x)	fvputtr(stdin, (x))

Usage example:
 	segy tr;
 	...
 	while (gettr(&tr)) {
 		tr.offset = abs(tr.offset);
 		puttr(&tr);
 	}
 	...

*****************************************************************************
Authors: SEP: Einar Kjartansson, Stew Levin CWP: Shuki Ronen, Jack Cohen
****************************************************************************/
/**************** end self doc ********************************/


#include "su.h"
#include "segy.h"
#include "header.h"

#ifndef TEST

extern int in_line_hdr;
extern int out_line_hdr;
extern char  su_text_hdr[3200];
extern bhed  su_binary_hdr;


#ifdef SUXDR

/*
 * Revised:  7/3/95  Stewart A. Levin  (Mobil)
 *	  Major rewrite:  Use xdr library for portable su file format.
 *	  Make multiple output streams work (at long last!).
 * Revised:  28 Mar, 2006  Stewart A. Levin (Landmark Graphics)
 *      XDR support for >2GB file size and big endian SHORTPACK
 *      output.
 */

#include "su_xdr.h"
#include "header.h"

static struct outsegyinfo {
	FILE *outfp;		      /* FILE * ptr for search		*/
	struct outsegyinfo *nextinfo; /* linked list pointer     	*/
	off_t itr;		      /* number of traces written	*/
	unsigned int nsfirst;	 /* nsamp from first trace		*/
	unsigned short bytesper;   /* bytes per datum		*/
	FileType ftype;		      /* file type of output *fp	*/
	XDR *segy_xdr;		      /* allocated XDR structure 	*/
	char *buf;		  /* buffer for trace I/O	*/
	unsigned int bufstart;  /* "offset" of start of buf	*/
} *outsegylist = (struct outsegyinfo *) NULL;

static FILE *lastfp = (FILE *) NULL;
static struct outsegyinfo *infoptr, **oldinfoptr;

static
void searchlist(FILE *fp)
{
	oldinfoptr = &outsegylist;
	for (infoptr = outsegylist; infoptr != ((struct outsegyinfo *) NULL);
	    infoptr = infoptr->nextinfo) {
		if (fp == infoptr->outfp) break;
		oldinfoptr = &infoptr->nextinfo;
	}
}

static
int datawrite(struct outsegyinfo *iptr, segy *tp, cwp_Bool fixed_length)
{
	int nwritten;
	unsigned int nstobewritten = fixed_length?iptr->nsfirst:tp->ns;
	unsigned int databytes = iptr->bytesper*nstobewritten;
	int itest = 1;
	char *ctest = (char *) (&itest);
	
	/* write trace data */
	switch(tp->trid) {
	case CHARPACK:
		nwritten = efwrite((char *) (&((tp->data)[0])),1,databytes,
				  iptr->outfp);
	case SHORTPACK:
		if(ctest[0]) swab((char *) (&((tp->data)[0])),
				 (char *) (&((tp->data)[0])),
				  databytes);
		nwritten = efwrite((char *) (&((tp->data)[0])),1,databytes,
				  iptr->outfp);

	break;
	default:
		if(FALSE == xdr_vector(iptr->segy_xdr,
					(char *) (&((tp->data)[0])),
					nstobewritten,sizeof(float),(xdrproc_t) xdr_float))
			nwritten = 0;
		else
			nwritten = databytes;
		if(nwritten > 0) nwritten =
		    efwrite(((char *) (iptr->buf))+HDRBYTES,1,databytes,iptr->outfp);
		if(nwritten != databytes) nwritten = 0;

	}

	return(nwritten);
}

void fputtr_internal(FILE *fp, segy *tp, cwp_Bool fixed_length)
{
	unsigned int databytes;	 /* bytes from nsfirst	   */
	int nwritten;		   /* bytes seen by fwrite calls   */
	
	/* search linked list for possible alternative */
	if(fp != lastfp)  searchlist(fp);
	
	if (infoptr == ((struct outsegyinfo *) NULL)) {
		/* initialize new segy output stream */
		
		/* allocate new segy output information table */
		*oldinfoptr = (struct outsegyinfo *)
			malloc(sizeof(struct outsegyinfo));
		infoptr = *oldinfoptr;
		infoptr->nextinfo = (struct outsegyinfo *) NULL;
		/* save FILE * ptr */
		infoptr->outfp = fp;
		infoptr->itr = 0;
		/* allocate XDR struct and associate FILE * ptr */
		infoptr->segy_xdr = (XDR *) malloc(sizeof(XDR));
		
		switch (infoptr->ftype = filestat(fileno(fp))) {
		case DIRECTORY:
			err("%s: segy output can't be a directory", __FILE__);
		case TTY:
			err("%s: segy output can't be tty", __FILE__);
		break;
		default:  /* the rest are ok */
		break;
		}
		/* xdrstdio_create(infoptr->segy_xdr,fp,XDR_ENCODE);*/
		infoptr->buf = ealloc1(sizeof(segy),sizeof(char));
		xdrmem_create(infoptr->segy_xdr, infoptr->buf, sizeof(segy), XDR_ENCODE);
		infoptr->bufstart = xdr_getpos(infoptr->segy_xdr);

		
		/* Sanity check the segy header */
		infoptr->nsfirst = tp->ns;
		if (infoptr->nsfirst > SU_NFLTS)
			err("%s: unable to handle %d > %d samples per trace",
			    __FILE__, infoptr->nsfirst, SU_NFLTS);

		switch(tp->trid) {
		case CHARPACK:
		   infoptr->bytesper = sizeof(char); break;
		case SHORTPACK:
		   infoptr->bytesper = 2*sizeof(char); break;
		default:
		   infoptr->bytesper = BYTES_PER_XDR_UNIT; break;
		}

	}

	xdr_setpos(infoptr->segy_xdr, infoptr->bufstart);
	if(FALSE == xdrhdrsub(infoptr->segy_xdr,tp))
		err("%s: unable to write header on trace #%ld",
		    __FILE__, (infoptr->itr)+1);
	nwritten = efwrite(infoptr->buf,1,HDRBYTES,infoptr->outfp);
	if(nwritten != HDRBYTES)
		err("%s: unable to write header on trace #%ld",
		    __FILE__, (infoptr->itr)+1);

	databytes = infoptr->bytesper * (fixed_length?infoptr->nsfirst:tp->ns);
	nwritten = datawrite(infoptr, tp, fixed_length);

	if (nwritten != databytes)
		err("%s: on trace #%ld, tried to write %d bytes, "
		    "wrote %d bytes",
		    __FILE__, (infoptr->itr)+1, databytes, nwritten);
	
	++infoptr->itr;
	lastfp = infoptr->outfp;
}
void fputtr(FILE *fp, segy *tp)
{
 fputtr_internal(fp,tp,cwp_true);
}

void fvputtr(FILE *fp, segy *tp)
{
 fputtr_internal(fp,tp,cwp_false);
}


#else
/**********************************************************************
code without XDR
**********************************************************************/

#include "su.h"
#include "segy.h"
#include "header.h"

static char hdr_str[88];
static int i=0;


static struct outsegyinfo {
	FILE *outfp;		      /* FILE * ptr for search		*/
	struct outsegyinfo *nextinfo; /* linked list pointer    	*/
	off_t itr;	      /* number of traces written	*/
	unsigned int nsfirst;	 /* nsamp from first trace		*/
	unsigned short bytesper;      /* bytes per datum	 	*/
	FileType ftype;		      /* file type of output *fp	*/
} *outsegylist = (struct outsegyinfo *) NULL;

static FILE *lastfp = (FILE *) NULL;
static struct outsegyinfo *infoptr, **oldinfoptr;

static
void searchlist(FILE *fp)
{
	oldinfoptr = &outsegylist;
	for(infoptr = outsegylist; infoptr != ((struct outsegyinfo *) NULL);
	    infoptr = infoptr->nextinfo) {
		if(fp == infoptr->outfp) break;
		oldinfoptr = &infoptr->nextinfo;
	}
}

static
void datawrite(segy *tp, struct outsegyinfo *iptr, cwp_Bool fixed_length)
{
	unsigned int nstobewritten = fixed_length?iptr->nsfirst:tp->ns;
	unsigned int databytes = iptr->bytesper * nstobewritten;
	int nwritten = (int) efwrite((char *) (&((tp->data)[0])), 1, databytes,
				iptr->outfp);

	if (nwritten != databytes)
		err("%s: on trace #%ld, tried to write %d bytes, "
		    "wrote %d bytes",
		    __FILE__, (infoptr->itr)+1, databytes, nwritten);

	return;
}


void fputtr_internal(FILE *fp, segy *tp, cwp_Bool fixed_length)
{
	/* search linked list for possible alternative */
	if(fp != lastfp)  searchlist(fp);

	if (infoptr == ((struct outsegyinfo *) NULL)) {
		/* initialize new segy output stream */

		/* allocate new segy output information table */
		*oldinfoptr = (struct outsegyinfo *)
			malloc(sizeof(struct outsegyinfo));
		infoptr = *oldinfoptr;
		infoptr->nextinfo = (struct outsegyinfo *) NULL;
		/* save FILE * ptr */
		infoptr->outfp = fp;
		infoptr->itr = 0;

		switch (infoptr->ftype = filestat(fileno(fp))) {
		case DIRECTORY:
			err("%s: segy output can't be a directory", __FILE__);
		case TTY:
			err("%s: segy output can't be tty", __FILE__);
		default:
			/* the rest are ok */
		break;
		}

		/* Sanity check the segy header */
		infoptr->nsfirst = tp->ns;
		if (infoptr->nsfirst > SU_NFLTS)
			err("%s: unable to handle %d > %d samples per trace",
			    __FILE__, infoptr->nsfirst, SU_NFLTS);
		switch(tp->trid) {
		case CHARPACK:
			infoptr->bytesper = sizeof(char); break;
		case SHORTPACK:
			infoptr->bytesper = 2*sizeof(char); break;
		default:
			infoptr->bytesper = sizeof(float); break;
		}

/*--------------------------------------------------------------------*\
   Write out a line header if it has been set as the default or has 
   requested on the caommandline.  Commandline takes precedence over
   the default in all cases.

   Reginald H. Beardsley			    rhb@@acm.org
\*--------------------------------------------------------------------*/
	      
		if (!getparint( "lheader" ,&out_line_hdr )) out_line_hdr=0;

		if( out_line_hdr ){

		   if( in_line_hdr ){
		     (void) efwrite(&(su_text_hdr[0]), 1 ,3200 
				    ,infoptr->outfp);

		   }else{
		     memset( su_text_hdr ,0 ,sizeof(su_text_hdr) );
		     sprintf( hdr_str ,"%-80s" 
			    ,"C 1 CLIENT CWP/SU default text header " );
		     strncat( su_text_hdr ,hdr_str ,80 );
		     for( i=1; i<40; i++ ){
			sprintf( hdr_str ,"%-80s" ,"C" );
			strncat( su_text_hdr ,hdr_str ,80 );
		     }
		     (void) efwrite(&(su_text_hdr[0]), 1 ,3200 
				    ,infoptr->outfp);


		   }

		   memset( &su_binary_hdr ,0 ,sizeof(su_binary_hdr) );
		   su_binary_hdr.format = 5;
		   su_binary_hdr.hns = tp->ns;
		   su_binary_hdr.hdt = tp->dt;
 
 
		  (void) efwrite(&su_binary_hdr,1,
			sizeof(su_binary_hdr), infoptr->outfp);
		}
		
	}

	if (tp->ns != infoptr->nsfirst && fixed_length)
		err("%s: on trace #%ld, number of samples in header (%d) "
		    "differs from number for first trace (%d)", 
		    __FILE__, (infoptr->itr)+1, tp->ns, infoptr->nsfirst);
	

	(void) efwrite(tp, 1,HDRBYTES, infoptr->outfp);
	datawrite(tp, infoptr, fixed_length);
	
	++infoptr->itr;
	lastfp = infoptr->outfp;
}

void fputtr(FILE *fp, segy *tp)
{
 fputtr_internal(fp,tp,cwp_true);
}

void fvputtr(FILE *fp, segy *tp)
{
 fputtr_internal(fp,tp,cwp_false);
}


#endif

#else

char *sdoc[] = {
"								",
" tputtr <stdin >stdout						",
"								",
" 	Test harness for puttr.c				",
"	Changes cdp to abs(cdp)					",
"	Contrast the following results:	 			",
"	suplane offset=-100 | sugethw offset 			",
"	suplane offset=-100 | tputtr | sugethw offset		",
"								",
NULL};

segy tr;

main(int argc, char **argv)
{
	initargs(argc, argv);
	requestdoc(1);

 	while (gettr(&tr)) {
 		tr.offset = abs(tr.offset);
 		puttr(&tr);
 	}

	return EXIT_SUCCESS;
}
#endif


@


1.35
log
@copyright
@
text
@d4 1
a4 1
/* FPUTTR: $Revision: 1.34 $; $Date: 2011/09/09 22:28:18 $	*/
d325 1
a325 1
		getparint( "lheader" ,&out_line_hdr );
@


1.34
log
@*** empty log message ***
@
text
@d1 4
a4 1
/* FPUTTR: $Revision: 1.33 $; $Date: 2006/03/29 22:58:03 $	*/
@


1.33
log
@stew levin's extwe
esxtensions to handle large file and packing
@
text
@d1 1
a1 1
/* FPUTTR: $Revision: 1.32 $; $Date: 2006/02/08 17:53:57 $	*/
d74 1
a74 1
	unsigned off_t itr;	      /* number of traces written	*/
d236 1
a236 1
	unsigned off_t itr;	      /* number of traces written	*/
d346 1
a346 1
		   su_binary_hdr.format = 1;
@


1.32
log
@changed fputtr to fvputtr in notes
@
text
@d1 1
a1 1
/* FPUTTR: $Revision: 1.31 $; $Date: 2005/02/07 21:16:03 $	*/
d61 5
a65 2
 *          Major rewrite:  Use xdr library for portable su file format.
 *          Make multiple output streams work (at long last!).
d67 1
d75 1
a75 1
	unsigned int nsfirst;         /* nsamp from first trace		*/
d79 2
d103 2
d109 2
d112 3
d117 1
d121 2
a122 2
				       (char *) (&((tp->data)[0])),
				       nstobewritten,sizeof(float),(xdrproc_t) xdr_float))
d126 4
d137 2
a138 2
        unsigned int databytes;         /* bytes from nsfirst           */
        int nwritten;                   /* bytes seen by fwrite calls   */
d166 5
a170 1
		xdrstdio_create(infoptr->segy_xdr,fp,XDR_ENCODE);
d189 6
a194 2
	databytes = infoptr->bytesper * (fixed_length?infoptr->nsfirst:tp->ns);
	if(FALSE == xdrhdrsub(infoptr->segy_xdr,tp)) 
a196 2
	
        nwritten = datawrite(infoptr, tp, fixed_length);
d198 7
a204 4
        if (nwritten != databytes)
                err("%s: on trace #%ld, tried to write %d bytes, "
                    "wrote %d bytes",
                    __FILE__, (infoptr->itr)+1, databytes, nwritten);
d237 1
a237 1
	unsigned int nsfirst;         /* nsamp from first trace		*/
d262 1
a262 1
			       iptr->outfp);
d319 1
a319 1
   Reginald H. Beardsley                            rhb@@acm.org
d321 2
a322 2
              
                getparint( "lheader" ,&out_line_hdr );
d324 1
a324 1
                if( out_line_hdr ){
d326 23
a348 23
                   if( in_line_hdr ){
                     (void) efwrite(&(su_text_hdr[0]), 1 ,3200 
                                    ,infoptr->outfp);

                   }else{
                     memset( su_text_hdr ,0 ,sizeof(su_text_hdr) );
                     sprintf( hdr_str ,"%-80s" 
                            ,"C 1 CLIENT CWP/SU default text header " );
                     strncat( su_text_hdr ,hdr_str ,80 );
                     for( i=1; i<40; i++ ){
                        sprintf( hdr_str ,"%-80s" ,"C" );
                        strncat( su_text_hdr ,hdr_str ,80 );
                     }
                     (void) efwrite(&(su_text_hdr[0]), 1 ,3200 
                                    ,infoptr->outfp);


                   }

                   memset( &su_binary_hdr ,0 ,sizeof(su_binary_hdr) );
                   su_binary_hdr.format = 1;
                   su_binary_hdr.hns = tp->ns;
                   su_binary_hdr.hdt = tp->dt;
d351 3
a353 3
                  (void) efwrite(&su_binary_hdr, 1
                              ,sizeof(su_binary_hdr), infoptr->outfp);
                }
@


1.31
log
@Reg Beardsley's fix for char htr_str[] being too small.
@
text
@d1 1
a1 1
/* FPUTTR: $Revision: 1.30 $; $Date: 2004/12/23 22:38:23 $	*/
d28 1
a28 1
#define vputtr(x)	fputtr(stdin, (x))
@


1.30
log
@off_t put in for large file support
@
text
@d1 1
a1 1
/* FPUTTR: $Revision: 36.7 $; $Date: 2003/08/04 16:26:21 $	*/
d202 1
a202 1
static char str[80];
d305 1
a305 1
                     sprintf( str ,"%-80s" 
d307 1
a307 1
                     strncat( su_text_hdr ,str ,80 );
d309 2
a310 2
                        sprintf( str ,"%-80s" ,"C" );
                        strncat( su_text_hdr ,str ,80 );
@


1.29
log
@large file support
@
text
@d70 1
a70 1
	unsigned long long itr;	      /* number of traces written	*/
d209 1
a209 1
	unsigned long long itr;	      /* number of traces written	*/
@


1.28
log
@updated for Unocal SU support
@
text
@d1 1
a1 1
/* FPUTTR: $Revision: 36.6 $; $Date: 2003/04/07 20:04:07 $	*/
d70 1
a70 1
	unsigned long itr;	      /* number of traces written	*/
d209 1
a209 1
	unsigned long itr;	      /* number of traces written	*/
d386 1
@


1.27
log
@added support for variable tracelengths
also for 64 bit
@
text
@d1 1
a1 1
/* FPUTTR: $Revision: 1.26 $; $Date: 2002/03/15 18:16:01 $	*/
d45 12
d164 1
d167 1
a167 1
	 databytes = infoptr->bytesper * (fixed_length?infoptr->nsfirst:tp->ns);
d202 4
d286 41
d356 1
a356 1
#ifdef TEST
d385 1
@


1.26
log
@changed eftell to eftello changed fseek efseeko
@
text
@d1 1
a1 1
/* FPUTTR: $Revision: 1.25 $; $Date: 1998/03/31 20:34:49 $	*/
d9 1
d11 1
d16 1
d26 1
a26 1
The function puttr(x) is a macro defined in su.h
d28 1
d80 1
a80 1
int datawrite(struct outsegyinfo *iptr, segy *tp)
d83 2
a84 1
	unsigned int databytes = iptr->bytesper*iptr->nsfirst;
d96 1
a96 1
				       iptr->nsfirst,sizeof(float),(xdrproc_t) xdr_float))
d105 1
a105 2

void fputtr(FILE *fp, segy *tp)
d107 2
a108 2
	unsigned int databytes;		/* bytes from nsfirst		*/
	int nwritten;			/* bytes seen by fwrite calls	*/
a152 2
	
	databytes = infoptr->bytesper * infoptr->nsfirst;
d154 1
a154 5
	if (tp->ns != infoptr->nsfirst)
		err( "%s: on trace #%ld, number of samples in header (%d)"
		    "differs from number for first trace (%d)", 
		    __FILE__, (infoptr->itr)+1, tp->ns, infoptr->nsfirst);
	
d159 6
a164 5
	nwritten = datawrite(infoptr, tp);
	if (nwritten != databytes)
		err("%s: on trace #%ld, tried to write %d bytes, "
		    "wrote %d bytes",
		    __FILE__, (infoptr->itr)+1, databytes, nwritten);
d169 9
d181 3
d213 1
a213 1
void datawrite(segy *tp, struct outsegyinfo *iptr)
d215 2
a216 1
	unsigned int databytes = iptr->bytesper * iptr->nsfirst;
d229 1
a229 1
void fputtr(FILE *fp, segy *tp)
d272 1
a272 1
	if (tp->ns != infoptr->nsfirst)
d276 1
d279 1
a279 1
	datawrite(tp, infoptr);
d284 11
@


1.25
log
@Stew Levin's changes
@
text
@d1 1
a1 1
/* FPUTTR: $Revision: 1.16 $; $Date: 1996/02/05 21:04:09 $	*/
d128 3
@


1.24
log
@version 24
@
text
@d1 1
a1 1
/* FPUTTR: $Revision: 1.23 $; $Date: 1996/09/16 17:11:52 $	*/
d36 1
a36 3
Authors: SEP & MOBIL: Stewart A. Levin
	 SEP: Einar Kjartansson
         CWP: Shuki Ronen, Jack Cohen
d40 131
d268 2
@


1.23
log
@added a break; after default:
@
text
@d1 1
a1 1
/* FPUTTR: $Revision: 1.22 $; $Date: 1996/09/06 19:56:31 $	*/
d73 1
a73 1
	int nwritten = efwrite((char *) (&((tp->data)[0])), 1, databytes,
@


1.22
log
@added default: line to make -Wall happy (hope this is right).
@
text
@d1 1
a1 1
/* FPUTTR: $Revision: 1.21 $; $Date: 1996/02/22 16:12:25 $	*/
d109 1
@


1.21
log
@Switched args of datawrite to agree with order in fwrite.
@
text
@d1 1
a1 1
/* FPUTTR: $Revision: 1.20 $; $Date: 1996/02/20 19:48:26 $	*/
d107 2
@


1.20
log
@Corrected err statement for exceeding SU_NFLTS.
@
text
@d1 1
a1 1
/* FPUTTR: $Revision: 1.19 $; $Date: 1996/02/12 16:51:12 $	*/
d70 1
a70 1
void datawrite(struct outsegyinfo *iptr, segy *tp)
d131 1
a131 1
	datawrite(infoptr, tp);
@


1.19
log
@Cosmetic.
@
text
@d1 1
a1 1
/* FPUTTR: $Revision: 1.18 $; $Date: 1996/01/23 20:27:42 $	*/
d113 1
a113 1
			    __FILE__, (infoptr->nsfirst)+1, SU_NFLTS);
@


1.18
log
@short -> 2*char for compatibility with supack2
@
text
@d1 1
a1 4
/* Copyright (c) Colorado School of Mines, 1994.*/
/* All rights reserved.                       */

/* FPUTTR: $Revision: 1.17 $; $Date: 1996/01/20 05:25:26 $	*/
@


1.17
log
@changed type of datawrit to void and moved check of write into
this subroutine (analogous to dataread in fgettr).
@
text
@d4 1
a4 1
/* FPUTTR: $Revision: 1.16 $; $Date: 1996/01/19 22:58:48 $	*/
d75 1
a75 1
	unsigned int databytes = iptr->bytesper*iptr->nsfirst;
d121 1
a121 1
			infoptr->bytesper = sizeof(short); break;
d123 1
a123 1
			infoptr->bytesper =  sizeof(float); break;
@


1.16
log
@Moved some assignments in datawrite to initializations.
Better error msgs including correct trace number echos.
@
text
@d4 1
a4 1
/* FPUTTR: $Revision: 1.15 $; $Date: 1996/01/19 20:16:34 $	*/
d73 1
a73 1
int datawrite(struct outsegyinfo *iptr, segy *tp)
d76 9
a84 4
	int nwritten;
	
	nwritten = efwrite((char *)(&((tp->data)[0])),1,databytes,iptr->outfp);
	return(nwritten);
a89 3
	unsigned int databytes;	/* bytes from nsfirst		*/
	int nwritten;		/* bytes seen by fwrite calls	*/

a127 1

d134 2
a135 7
	databytes = infoptr->bytesper*infoptr->nsfirst;
	nwritten = datawrite(infoptr, tp);
	if (nwritten != databytes)
		err("%s: on trace #%ld, tried to write %d bytes, "
		    "wrote %d bytes",
		    __FILE__, (infoptr->itr)+1, databytes, nwritten);

@


1.15
log
@Extracted setting of bytesper from datawrite.
@
text
@d4 1
a4 1
/* FPUTTR: $Revision: 1.14 $; $Date: 1996/01/12 20:40:16 $	*/
d78 1
a78 1
	nwritten = fwrite((char *) (&((tp->data)[0])),1,databytes,iptr->outfp);
d114 1
a114 1
			    __FILE__, infoptr->nsfirst, SU_NFLTS);
d130 1
a130 1
		    __FILE__, infoptr->itr, tp->ns, infoptr->nsfirst);
d136 3
a138 2
		err("%s: unable to write data on trace #%ld",
		    __FILE__, infoptr->itr);
@


1.14
log
@/*
 * Revised:  7/3/95  Stewart A. Levin  (Mobil)
 *     Make multiple output streams work (at long last!).
 *
 *     Remark: Stew also had xdr support which I've removed
 *     for version 28--Jack.
 */
@
text
@d4 1
a4 1
/* FPUTTR: $Revision: 1.14 $; $Date: 95/07/04 00:00:00 $	*/
d50 7
a56 6
	FILE *outfp;		/* FILE * ptr for search	*/
	struct outsegyinfo *nextinfo; /* linked list pointer    */
	unsigned long itr;	/* number of traces written	*/
	unsigned int nsfirst;   /* nsamp from first trace	*/
	FileType ftype;		/* file type of output *fp	*/
	} *outsegylist = (struct outsegyinfo *) NULL;
d64 2
a65 2
    oldinfoptr = &outsegylist;
    for(infoptr = outsegylist; infoptr != ((struct outsegyinfo *) NULL);
d69 1
a69 1
	    }
d75 5
a79 16
 unsigned short bytesper;
 unsigned int databytes;
 int nwritten;

 /* write trace data */
 switch(tp->trid) {
 case CHARPACK:
    bytesper = sizeof(char); break;
 case SHORTPACK:
    bytesper = sizeof(short); break;
 default:
    bytesper = sizeof(float); break;
 }
 nwritten = fwrite((char *) (&((tp->data)[0])),1,bytesper*iptr->nsfirst,
		   iptr->outfp);
 return(nwritten);
a84 1
	unsigned short bytesper; /* bytes per datum (packed?)	*/
d88 2
a89 2
	if(fp != lastfp)  /* search linked list for possible alternative */
			    searchlist(fp);
d92 1
a92 1
	/* initialize new segy output stream */
d108 1
a108 1
			}
d114 10
a123 10
				    __FILE__, infoptr->nsfirst, SU_NFLTS);
	}

	switch(tp->trid) {
	case CHARPACK:
	   bytesper = sizeof(char); break;
	case SHORTPACK:
	   bytesper = sizeof(short); break;
	default:
	   bytesper =  sizeof(float); break;
a125 1
	databytes = bytesper*infoptr->nsfirst;
d128 3
a130 3
		err(
"%s: on trace #%ld, number of samples in header (%d) differs from number for first trace (%d)", 
		     __FILE__, infoptr->itr, tp->ns, infoptr->nsfirst);
d133 1
d137 1
a137 1
		     __FILE__, infoptr->itr);
@


1.13
log
@added dummy selfdocs
@
text
@d1 5
a5 1
/* FPUTTR: $Revision: 1.12 $; $Date: 93/08/13 10:26:44 $	*/
d8 2
a9 5
/************************************************************************
FPUTTR - Functions to put an SU trace on a file by descriptor

fputtr		put a segy trace on a file by descriptor
puttr		put a segy trace on stdout
d11 5
a15 2
*************************************************************************
Function prototype:
d18 1
a18 1
*************************************************************************
d20 1
d22 2
a23 2

*************************************************************************
a24 2
The macro "puttr" is defined in .../include/su.h as:
#define puttr(x)	fputtr(stdout, (x))
d26 2
d30 13
a42 10
	segy tr;
	...
	while (gettr(&tr)) {
		tr.offset = abs(tr.offset);
		puttr(&tr);
	}

*************************************************************************
Authors: SEP: Einar Kjartansson CWP: Jack K. Cohen, Shuki Ronen
************************************************************************/
d49 7
d57 2
d60 2
a61 1
void fputtr(FILE *fp, segy *tp)
d63 7
a69 2
	static int nsegy;		/* number of bytes output	*/
	static cwp_Bool first = true;	/* to check if first entry	*/
d71 20
a91 3
	if (first) {	/* First entry */
		unsigned short bytesper;/* bytes per datum (packed?)	*/
		FileType ftype = filestat(fileno(fp));
d93 20
a112 1
		first = false;
d114 1
a114 1
		switch (ftype) {
d116 1
a116 1
			err("%s: stdout can't be a directory", __FILE__);
d118 9
a126 8
			err("%s: stdout can't be tty", __FILE__);
		default: /* OK */
		break;
		}

		if      (tp->trid == CHARPACK)	bytesper = sizeof(char);
		else if (tp->trid == SHORTPACK) bytesper = sizeof(short);
		else				bytesper = sizeof(float);
d128 7
a134 1
		nsegy = HDRBYTES + bytesper * tp->ns;
d137 1
a137 3
	(void) efwrite(tp, 1, nsegy, fp);
	return;
}
d139 10
d150 3
a155 1
/*********************** self documentation **********************/
d159 1
a159 1
" 								",
d161 5
a165 5
" 	Changes cdp to abs(cdp)					",
" 	Contrast the following results:	 			",
" 	suwind <DATA count=10 | sugethw cdp 			",
" 	suwind <DATA count=10 | tputtr | sugethw cdp 		",
" 								",
a166 1
/*****************************************************************/
@


1.12
log
@changed String to cwp_String, Bool to cwp_Bool
@
text
@d1 1
a1 1
/* FPUTTR: $Revision: 1.11 $; $Date: 92/10/30 08:58:01 $	*/
d3 3
a5 12
/*----------------------------------------------------------------------
 * Copyright (c) Colorado School of Mines, 1989.
 * All rights reserved.
 *
 * This code is part of SU.  SU stands for Seismic Unix, a processing line
 * developed at the Colorado School of Mines, partially based on Stanford
 * Exploration Project (SEP) software.  Inquiries should be addressed to:
 *
 *  Jack K. Cohen, Center for Wave Phenomena, Colorado School of Mines,
 *  Golden, CO 80401  (jkc@@dix.mines.colorado.edu)
 *----------------------------------------------------------------------
 */
d7 30
a40 24
/* fputtr - put a segy trace on a file by descriptor
 * puttr  - put a segy trace on stdout
 *
 * Returns:
 *	void
 *
 * Synopsis:
 *	void fputtr(FILE *fp, segy *tp)
 *
 *	puttr(tp) is a macro for fputtr(stdout, tp)
 *
 * Example:
 *	segy tr;
 *	...
 *	while (gettr(&tr)) {
 *		tr.offset = abs(tr.offset);
 *		puttr(&tr);
 *	}
 *
 * Credits:
 *	SEP: Einar
 *	CWP: Jack, Shuki
 *
 */
@


1.11
log
@new selfdoc installed in test program
@
text
@d1 1
a1 1
/* FPUTTR: $Revision: 1.10 $; $Date: 91/09/05 08:47:42 $	*/
d49 1
a49 1
	static Bool first = true;	/* to check if first entry	*/
@


1.10
log
@string -> String and so forth.
@
text
@d1 1
a1 1
/* FPUTTR: $Revision: 1.9 $; $Date: 91/06/28 09:40:50 $	*/
d83 11
a93 11
char *sdoc = "\
								\n\
tputtr <stdin >stdout						\n\
								\n\
	Test harness for puttr.c				\n\
	Changes cdp to abs(cdp)					\n\
	Contrast the following results:	 			\n\
	suwind <DATA count=10 | sugethw cdp 			\n\
	suwind <DATA count=10 | tputtr | sugethw cdp 		\n\
								\n\
";
d101 1
a101 1
	askdoc(1);
@


1.9
log
@Using __FILE__ macro
@
text
@d1 1
a1 1
/* FPUTTR: $Revision: 1.8 $; $Date: 91/01/10 09:35:49 $	*/
d49 1
a49 1
	static bool first = true;	/* to check if first entry	*/
d54 1
a54 1
		filetype ftype = filestat(fileno(fp));
@


1.8
log
@make default to behave like DISK instead of BADFILETYPE.
This should insulate against vendors who make pipe into FIFO.
@
text
@d1 1
a1 1
/* FPUTTR: $Revision: 1.7 $; $Date: 90/12/23 20:02:14 $	*/
d60 1
a60 1
			err("fputtr: stdout can't be a directory");
d62 1
a62 1
			err("fputtr: stdout can't be tty");
@


1.7
log
@Made some variables local to "first" block
@
text
@d1 1
a1 1
/* FPUTTR: $Revision: 1.6 $; $Date: 90/12/22 18:37:52 $	*/
a58 4
		case TAPE:	/* These three are correct filetypes */
		case DISK:
		case PIPE:
		break;
d63 2
a64 3
		default:
			err("fputtr: stdout is undefined filetype: %s",
						printstat(ftype));
@


1.6
log
@fp version
@
text
@d1 1
a1 1
/* FPUTTR: $Revision: 1.5 $; $Date: 90/12/21 14:17:08 $	*/
d12 1
a12 1
 *  Golden, CO 80401  (isis!csm9a!jkcohen)
a49 3
	static filetype ftype;		/* filetype of fd		*/
	static unsigned short bytesper;	/* bytes per datum (packed?)	*/
	int nwrite;			/* number of bytes written	*/
d53 3
a57 1
		ftype = filestat(fileno(fp));
@


1.5
log
@Tweaks
@
text
@d1 1
a1 1
/* FPUTTR: $Revision: 1.4 $; $Date: 90/10/27 22:30:48 $	*/
d27 1
a27 2
 *	void fputtr(fd, tp)
 *	segy *tp;
d29 1
a29 1
 *	puttr(tp) is a macro for fputtr(stdin, tp)
d46 1
a46 1
void fputtr(int fd, segy *tp)
d58 1
a58 1
		ftype = filestat(fd);
d65 1
a65 1
			err("%s: stdout can't be a directory", fputtr);
d67 1
a67 1
			err("%s: stdout can't be tty", fputtr);
d69 2
a70 2
			err("%s: stdout is undefined filetype: %s",
						fputtr, printstat(ftype));
d80 1
a80 1
	(void) ewrite(fd, (char *) tp, nsegy);
@


1.4
log
@move nsegy calc inside first trace routine
remove unused otr variable
@
text
@d1 1
a1 1
/* FPUTTR: $Revision: 1.3 $; $Date: 90/10/26 19:27:09 $	*/
d52 1
a52 1
	static ushort bytesper;		/* bytes per datum (packed?)	*/
d74 1
a74 1
		if (tp->trid == CHARPACK)	bytesper = sizeof(char);
@


1.3
log
@Changed to look at tr.trid to check for packing
instead of having cloned fgettr, fputtr
@
text
@d1 1
a1 1
/* FPUTTR: $Revision: 1.2 $; $Date: 90/09/03 09:59:46 $	*/
d49 5
a53 6
	int nsegy;			/* number of bytes output		*/
	int nwrite;			/* number of bytes written		*/
	static ulong otr = 0;		/* running trace number			*/
	static bool first = true;	/* to check if first entry		*/
	static filetype ftype;		/* filetype of fd			*/
	static ushort bytesper;		/* bytes per float (might be packed)	*/
a72 1
	}
d74 3
a76 1
	otr++;
d78 2
a79 3
	if (tp->trid == CHARPACK)  bytesper = sizeof(char);
	else if (tp->trid == SHORTPACK) bytesper = sizeof(short);
	else bytesper = sizeof(float);
d81 1
a81 2
	nsegy = HDRBYTES + bytesper * tp->ns;
	(void) ewrite(fd, tp, nsegy);
@


1.2
log
@Drop unnecessary cast in ANSI C call
@
text
@d1 1
a1 1
/* FPUTTR: $Revision: 1.1 $; $Date: 90/04/15 15:59:06 $	*/
d20 2
a21 2
/* fputtr, fputtr1, fputtr2 - put a segy trace on a file by descriptor
 * puttr, puttr1, puttr2 - put a segy trace on stdout
d27 1
a27 1
 *	void fputtr(fd, tp)	for standard float traces
d30 1
a30 2
 *	void fputtr1(fd, tp)	for 1 byte traces as in suunpack1
 *	segy *tp;
a31 9
 *	void fputtr2(fd, tp)	for 2 byte traces as in suunpack2
 *	segy *tp;
 *
 *	puttr, puttr1 and puttr2 are implemented as macros in su.h:
 *
 *	puttr(tp)  is equivalent to fputtr(stdin, tp)
 *	puttr1(tp) is equivalent to fputtr1(stdin, tp)
 *	puttr2(tp) is equivalent to fputtr2(stdin, tp)
 *
a39 7
 * Notes:
 *	There are three versions to make from this one source code, so
 *	as to avoid having to maintain nearly identical codes.  The
 *	"1" variant is for segy traces with char data, the "2" variant
 *	is for short data.  Use the compile options -DPUTTR, -DPUTTR1,
 *	and -DPUTTR2 respectively, for the three versions.
 *
a43 1
 *
a46 15
#ifdef PUTTR1
#define NAME		"fputtr1"
#define BYTESPER	sizeof(char)	/* bytes per output datum */
void fputtr1(int fd, segy *tp)
#endif

#ifdef PUTTR2
#define NAME		"fputtr2"
#define BYTESPER	sizeof(short)	/* bytes per output datum */
void fputtr2(int fd, segy *tp)
#endif

#ifdef PUTTR
#define NAME		"fputtr"
#define BYTESPER	sizeof(float)	/* bytes per output datum */
a47 2
#endif

d49 6
a54 5
	int nsegy;			/* number of bytes output	*/
	int nwrite;			/* number of bytes written	*/
	static ulong otr = 0;		/* running trace number		*/
	static bool first = true;	/* to check if first entry	*/
	static filetype ftype;		/* filetype of fd		*/
d67 1
a67 1
			err("%s: stdout can't be a directory", NAME);
d69 1
a69 1
			err("%s: stdout can't be tty", NAME);
d72 1
a72 1
						NAME, printstat(ftype));
d77 6
a82 1
	nsegy = HDRBYTES + BYTESPER * tp->ns;
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/* FPUTTR: $Revision: 1.65 $; $Date: 89/05/25 16:10:13 $	*/
d112 1
a112 1
	(void) ewrite(fd, (char *) tp, nsegy);
@
