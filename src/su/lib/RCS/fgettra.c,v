head     1.11;
branch   ;
access   jkc dhale john;
symbols  ;
locks    ; strict;
comment  @ * @;


1.11
date     94.03.14.14.19.38;  author john;  state Exp;
branches ;
next     1.10;

1.10
date     93.08.13.10.26.38;  author john;  state Exp;
branches ;
next     1.9;

1.9
date     92.12.02.17.00.01;  author john;  state Exp;
branches ;
next     1.8;

1.8
date     91.09.05.08.47.40;  author jkcohen;  state Exp;
branches ;
next     1.7;

1.7
date     91.06.27.15.06.19;  author jkcohen;  state Exp;
branches ;
next     1.6;

1.6
date     90.12.23.17.03.09;  author jkc;  state Exp;
branches ;
next     1.5;

1.5
date     90.12.22.18.57.51;  author jkc;  state Exp;
branches ;
next     1.4;

1.4
date     90.12.22.18.37.53;  author jkc;  state Exp;
branches ;
next     1.3;

1.3
date     90.10.26.19.27.50;  author jkc;  state Exp;
branches ;
next     1.2;

1.2
date     90.09.03.10.00.23;  author jkc;  state Exp;
branches ;
next     1.1;

1.1
date     90.04.15.16.01.18;  author jkc;  state Exp;
branches ;
next     ;


desc
@Random access to segy disk file
@


1.11
log
@added dummy selfdocs
@
text
@/* FGETTRA: $Revision: 1.10 $; $Date: 93/08/13 10:26:38 $	*/

/*********************** self documentation **********************/
/**************************************************************************
FGETTRA - get trace from disk file by trace number
 
fgettra		get disk trace from file by trace number
gettra		macro to get trace from stdin by trace number

***************************************************************************
Function Prototype:
int fgettra(FILE *fp, segy *tp, int itr);

***************************************************************************
Returns:
	integer number of traces in the disk file

***************************************************************************
Notes:
	#include "segy.h"
	fgettra(FILE *fp, segy *traceptr, int itr)

The macro "gettra" is defined in .../include/su.h as:
#define gettra(x, y)    fgettra(stdin, (x), (y))

***************************************************************************
Authors: SEP: Einar Kjartansson CWP: Jack K. Cohen
**************************************************************************/
/**************** end self doc ********************************/

#include "su.h"
#include "segy.h"
#include "header.h"


int fgettra(FILE *fp, segy *tp, int itr)
{
	static int nsfirst;		/* samples on first trace	*/
	static int nsegy;		/* size of trace in bytes	*/
	static int ntr;			/* number of traces in file	*/
	static cwp_Bool first=true;	/* flag for first entry		*/
	int nread;			/* bytes read			*/

	if (first) {	/* first entry; get number of traces */
		unsigned short bytesper;/* bytes per float (packed?)	*/
		long length;		/* length of file in bytes	*/
		FileType ftype = filestat(fileno(fp));

		first = false;

		switch(ftype) {
		case TTY:
			warn("stdin not redirected");
		break;
		case DISK:	/* correct */
		break;
		default:
			err("%s: input must be disk file", __FILE__);
		break;
		}

		if (HDRBYTES != (nread = efread(tp, 1, HDRBYTES, fp))) {
			if (!nread) return 0;  /* no traces; trap in mains */
			else err("%s: read only %d bytes of header",
							__FILE__, nread);
		}

		nsfirst = tp->ns;
		if (nsfirst > SU_NFLTS) {
			err("%s: trace too long: nsfirst=%d>SU_NFLTS=%d",
				__FILE__, nsfirst, SU_NFLTS);
		}

		if      (tp->trid == CHARPACK)  bytesper = sizeof(char);
		else if (tp->trid == SHORTPACK) bytesper = sizeof(short);
		else                            bytesper = sizeof(float);

		nsegy = HDRBYTES + nsfirst * bytesper;
		efseek(fp, 0, SEEK_END);
		length = eftell(fp);
		ntr = length / nsegy;

	} /* end first entry */


	/* Check on requested trace number */
	if (itr >= ntr)  err("%s, trying to read off end of file", __FILE__);


	/* Position file pointer at start of requested trace */
	efseek(fp, itr*nsegy, SEEK_SET);

	nread = efread(tp, 1, nsegy, fp);
	if (nread != nsegy)
		err("%s: read only %d of %d bytes in trace",
						__FILE__, nread, nsegy);

	if (tp->ns != nsfirst)
	    warn("%s: header ns field = %d differs from first trace = %d",
						__FILE__, tp->ns, nsfirst);

	return ntr;
}
@


1.10
log
@changed String to cwp_String, Bool to cwp_Bool
@
text
@d1 1
a1 1
/* FGETTRA: $Revision: 1.9 $; $Date: 92/12/02 17:00:01 $	*/
d3 6
a8 12
/*----------------------------------------------------------------------
 * Copyright (c) Colorado School of Mines, 1989.
 * All rights reserved.
 *
 * This code is part of SU.  SU stands for Seismic Unix, a processing line
 * developed at the Colorado School of Mines, partially based on Stanford
 * Exploration Project (SEP) software.  Inquiries should be addressed to:
 *
 *  Jack K. Cohen, Center for Wave Phenomena, Colorado School of Mines,
 *  Golden, CO 80401  (jkc@@dix.mines.colorado.edu)
 *----------------------------------------------------------------------
 */
d10 21
a34 16
/* fgettra - get disk trace by trace number
 *
 * Returns:
 *	integer number of traces in the disk file
 *
 * Synopsis:
 *	#include "segy.h"
 *	fgettra(FILE *fp, segy *traceptr, int itr)
 *
 *	gettra(tp, itr) is a macro for fgettra(stdin, tp, itr)
 *
 * Credits:
 *	SEP: Einar
 *	CWP: Jack
 *
 */
a35 1

d41 1
a41 1
	static cwp_Bool first=true;		/* flag for first entry		*/
@


1.9
log
@removed call to selfdoc()
@
text
@d1 1
a1 1
/* FGETTRA: $Revision: 1.8 $; $Date: 91/09/05 08:47:40 $	*/
d43 1
a43 1
	static Bool first=true;		/* flag for first entry		*/
@


1.8
log
@string -> String and so forth.
@
text
@d1 1
a1 1
/* FGETTRA: $Revision: 1.7 $; $Date: 91/06/27 15:06:19 $	*/
a55 1
			selfdoc();
@


1.7
log
@Return 0 when no traces instead of aborting with error message.
@
text
@d1 1
a1 1
/* FGETTRA: $Revision: 1.6 $; $Date: 90/12/23 17:03:09 $	*/
d43 1
a43 1
	static bool first=true;		/* flag for first entry		*/
d49 1
a49 1
		filetype ftype = filestat(fileno(fp));
@


1.6
log
@Made some variables local to the "first" block.
@
text
@d1 1
a1 1
/* FGETTRA: $Revision: 1.5 $; $Date: 90/12/22 18:57:51 $	*/
d66 2
a67 1
			err("%s: read only %d bytes of header",
@


1.5
log
@Oops.  efseek is not quite the equiv of elseek (need ftell)
@
text
@d1 1
a1 1
/* FGETTRA: $Revision: 1.4 $; $Date: 90/12/22 18:37:53 $	*/
d12 1
a12 1
 *  Golden, CO 80401  (isis!csm9a!jkcohen)
a42 1
	static filetype ftype;		/* filetype (defined in su.h)	*/
a43 1
	static unsigned short bytesper;	/* bytes per float (packed?)	*/
a44 2
	long length;			/* length of file in bytes	*/
	long nseek;			/* offset of trace in bytes	*/
d47 4
a52 1
		ftype = filestat(fileno(fp));
d93 1
a93 2
	nseek = itr * nsegy;
	efseek(fp, nseek, SEEK_SET);
@


1.4
log
@fp version
@
text
@d1 1
a1 1
/* FGETTRA: $Revision: 1.3 $; $Date: 90/10/26 19:27:50 $	*/
d82 2
a83 1
		length = efseek(fp, 0, SEEK_END);
@


1.3
log
@Check on tr.trid to detect packing in computing nsegy
@
text
@d1 1
a1 1
/* GETTRA: $Revision: 1.2 $; $Date: 90/09/03 10:00:23 $	*/
d20 1
a20 1
/* gettra - get disk trace by trace number
d27 1
a27 3
 *	gettra(fd, traceptr , itr)
 *	segy *traceptr;
 *	int itr, fd;
d29 2
a34 1
 *
d38 1
a38 1
int gettra(int fd, segy *tp, int itr)
d40 9
a48 9
	static int nsfirst;	/* samples on first trace		*/
	static int nsegy;	/* total size of trace in bytes		*/
	static int ntr;		/* number of traces in file		*/
	static filetype ftype;	/* filetype (defined in su.h)		*/
	static bool first=true;	/* flag for first entry			*/
	static ushort bytesper;	/* bytes per float (might be packed)	*/
	int nread;		/* bytes read				*/
	long length;		/* length of file in bytes		*/
	long nseek;		/* offset of trace in bytes		*/
d53 1
a53 1
		ftype = filestat(fd);
d66 1
a66 1
		if (HDRBYTES != (nread = eread(fd, tp, HDRBYTES))) {
d77 1
a77 1
		if (tp->trid == CHARPACK)  bytesper = sizeof(char);
d79 1
a79 1
		else bytesper = sizeof(float);
d82 1
a82 1
		length = elseek(fd, 0, SEEK_END);
a83 1
	}
d85 1
a86 3
	if (itr >= ntr) {
		err("%s, trying to read off end of file", __FILE__);
	}
d88 4
d94 1
a94 1
	elseek(fd, nseek, SEEK_SET);
d96 2
a97 2
	nread = eread(fd, tp, nsegy);
	if (nread != nsegy) {
a99 1
	}
d101 1
a101 1
	if (tp->ns != nsfirst) {
a103 1
	}
@


1.2
log
@Drop unnecessary cast in ANSI C system calls.
@
text
@d1 1
a1 1
/* GETTRA: $Revision: 1.1 $; $Date: 90/04/15 16:01:18 $	*/
d41 9
a49 8
	static int nsfirst;	/* samples on first trace	*/
	static int nsegy;	/* total size of trace in bytes	*/
	static int ntr;		/* number of traces in file	*/
	static filetype ftype;	/* filetype (defined in su.h)	*/
	static bool first=true;	/* flag for first entry		*/
	int nread;		/* bytes read			*/
	long length;		/* length of file in bytes	*/
	long nseek;		/* offset of trace in bytes	*/
d78 5
a82 1
		nsegy = HDRBYTES + nsfirst * FSIZE;
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/* GETTRA: $Revision: 1.21 $; $Date: 89/05/25 16:10:35 $	*/
d66 1
a66 1
		if (HDRBYTES != (nread = eread(fd, (char *)tp, HDRBYTES))) {
d91 1
a91 1
	nread = eread(fd, (char *)tp, nsegy);
@
