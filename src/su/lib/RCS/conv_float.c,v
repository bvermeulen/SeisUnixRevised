head     1.3;
branch   ;
access   jkc dhale john;
symbols  ;
locks    ; strict;
comment  @ * @;


1.3
date     92.06.15.13.03.40;  author jkc;  state Exp;
branches ;
next     1.2;

1.2
date     90.08.08.16.42.48;  author jkc;  state Exp;
branches ;
next     1.1;

1.1
date     90.04.15.15.54.46;  author jkc;  state Exp;
branches ;
next     ;


desc
@IEEE <--> IBM float converter
@


1.3
log
@Major revision by Brian--now TWO routines with ansi c style
declarations.
@
text
@/* CONV_FLOAT: $Revision: 1.2 $ ; $Date: 90/08/08 16:42:48 $	*/

/*----------------------------------------------------------------------
 * Copyright (c) Colorado School of Mines, 1989.
 * All rights reserved.
 *
 * This code is part of SU.  SU stands for Seismic Unix, a processing line
 * developed at the Colorado School of Mines, partially based on Stanford
 * Exploration Project (SEP) software.  Inquiries should be addressed to:
 *
 *  Jack K. Cohen, Center for Wave Phenomena, Colorado School of Mines,
 *  Golden, CO 80401  (jkc@@keller.mines.colorado.edu)
 *----------------------------------------------------------------------
 */

#include "su.h"

/* conv_float - convert between 32 bit IBM and IEEE floating numbers
 *
 * Credits:
 *	CWP: Brian
 *
 * Parameters:
 *    from	- input vector
 *    to	- output vector, can be same as input vector
 *    len	- number of floats in vectors
 *    type	- conversion type
 *
 * Notes:
 *	Up to 3 bits lost on IEEE -> IBM
 *
 *	IBM -> IEEE may overflow or underflow, taken care of by 
 *	substituting large number or zero
 *
 *	Only integer shifting and masking are used.
 *
 *	These routines assume a big-endian machine.  If yours is little
 *	endian you will need to reverse the bytes in ibm_to_float
 *	with something like
 *
 *	fconv = from[i];
 *	fconv = (fconv<<24) | ((fconv>>24)&0xff) |
 *		((fconv&0xff00)<<8) | ((fconv&0xff0000)>>8);
 *
 *	and the operation in float_to_ibm.
 *
 */


/* Assumes sizeof(int) == 4 */
void ibm_to_float(int from[], int to[], int n)
{
    register int fconv, fmant, i, t;

    for (i=0;i<n;++i) {
	fconv = from[i];
	if (fconv) {
            fmant = 0x00ffffff & fconv;
            t = (int) ((0x7f000000 & fconv) >> 22) - 130;
            while (!(fmant & 0x00800000)) { --t; fmant <<= 1; }
            if (t > 254) fconv = (0x80000000 & fconv) | 0x7f7fffff;
            else if (t <= 0) fconv = 0;
            else fconv = (0x80000000 & fconv) |(t << 23)|(0x007fffff & fmant);
        }
	to[i] = fconv;
    }
    return;
}

void float_to_ibm(int from[], int to[], int n)
{
    register int fconv, fmant, i, t;

    for (i=0;i<n;++i) {
	fconv = from[i];
	if (fconv) {
            fmant = (0x007fffff & fconv) | 0x00800000;
            t = (int) ((0x7f800000 & fconv) >> 23) - 126;
            while (t & 0x3) { ++t; fmant >>= 1; }
            fconv = (0x80000000 & fconv) | (((t>>2) + 64) << 24) | fmant;
        }
	to[i] = fconv;
    }
    return;
}

#if defined(TEST)
main()
{
    float f;
    int i;

    f = 1.0; i = 0;
    float_to_ibm(&f,&i,1);
    printf("f = %f -> 0x%x\n",f,i);

    i = 0x41100000; f = 0.0;
    ibm_to_float(&i,&f,1);
    printf("i = 0x%x -> f = %f\n",i,f);
    exit(0);
}
#endif


@


1.2
log
@Fix sent by Brian.
@
text
@d1 1
a1 1
/* CONV_FLOAT: $Revision: 1.1 $ ; $Date: 90/04/15 15:54:46 $	*/
d12 1
a12 1
 *  Golden, CO 80401  (isis!csm9a!jkcohen)
d35 1
a35 2
 *	Byte swapping branches have been inserted to ease rewriting
 *	this machine dependent subroutine for other machines (eg. VAX).
d37 3
d41 6
a48 2
#define	IBMtoIEEE	1
#define IEEEtoIBM	2
d50 2
a51 2

void conv_float(char *from, char *to,int len, int type)
d53 1
d55 14
a68 4
	unsigned fconv, fsign, fexpn;
	register unsigned fmant;
	register int t;
	register char *bp = (char *) &fconv;
d70 3
d74 12
a85 1
	if (len <= 0) return;
d87 5
a91 3
	switch(type) {
	case IEEEtoIBM:
		while (len--) {
d93 3
a95 6
			/* Load. Swap bytes if necessary for Vax */
			bp[0] = from[0];
			bp[1] = from[1];
			bp[2] = from[2];
			bp[3] = from[3];
			from += 4;
d97 6
a102 4
			fsign = (unsigned) 0x80000000 & fconv;
			fexpn = (unsigned) 0x7f800000 & fconv;
			fmant = ((unsigned) 0x007fffff & fconv) |
			 	(unsigned) 0x00800000;
a103 2
			if (!fexpn) fconv = 0;
			else {
a104 63
				t = (int) (fexpn >> 23) - 128;
				while (t & 0x7) {
					++t;
					fmant >>= 1;
				}
			
				fexpn = (unsigned) ((t>>2) + 64) << 24;
				fconv = fsign | fexpn | fmant;
			}

			*to++ = bp[0];
			*to++ = bp[1];
			*to++ = bp[2];
			*to++ = bp[3];
		}
		break;
	
	case IBMtoIEEE:
		while (len--) {

			/* Load. Swap bytes if necessary */
			bp[0] = from[0];
			bp[1] = from[1];
			bp[2] = from[2];
			bp[3] = from[3];
			from += 4;

			fsign = (unsigned) 0x80000000 & fconv;
			fexpn = (unsigned) 0x7f000000 & fconv;
			fmant = (unsigned) 0x00ffffff & fconv;

			if (!fmant) fconv = 0;
			else {
				t = (int) (fexpn >> 22) - 256;

				while (!(fmant & 0x00800000)) {
					--t;
					fmant <<= 1;
				}

				/* Check for valid IEEE exponent */

				if (t > 127) fconv = fsign | 0x7ff80000;
				else if (t < -128) fconv = 0;
				else {
					fexpn = ((unsigned) (t+128)) << 23;
					fconv = fsign | fexpn |
						(0x007fffff & fmant);
				}
			}

			*to++ = bp[0];
			*to++ = bp[1];
			*to++ = bp[2];
			*to++ = bp[3];
		}
		break;
	
	default:
		break;
	}
	return;
}
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/* CONV_FLOAT: $Revision: 1.9 $ ; $Date: 89/05/25 16:10:01 $	*/
d76 1
a76 1
				while (t & 0x3) {
@
