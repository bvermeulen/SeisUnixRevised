head	1.12;
access;
symbols;
locks; strict;
comment	@ * @;


1.12
date	2011.11.11.23.57.38;	author john;	state Exp;
branches;
next	1.11;

1.11
date	96.09.09.17.13.34;	author john;	state Exp;
branches;
next	1.10;

1.10
date	94.09.06.09.50.13;	author jkc;	state Exp;
branches;
next	1.9;

1.9
date	94.08.02.15.09.43;	author jkc;	state Exp;
branches;
next	1.8;

1.8
date	94.07.13.12.15.13;	author john;	state Exp;
branches;
next	1.7;

1.7
date	94.03.14.14.19.43;	author john;	state Exp;
branches;
next	1.6;

1.6
date	93.08.13.10.26.46;	author john;	state Exp;
branches;
next	1.5;

1.5
date	91.10.08.15.03.20;	author jkcohen;	state Exp;
branches;
next	1.4;

1.4
date	91.09.05.08.47.46;	author jkcohen;	state Exp;
branches;
next	1.3;

1.3
date	90.12.26.21.15.31;	author jkc;	state Exp;
branches;
next	1.2;

1.2
date	90.04.24.09.22.01;	author jkc;	state Exp;
branches;
next	1.1;

1.1
date	90.04.15.16.04.06;	author jkc;	state Exp;
branches;
next	;


desc
@Access segy hdr structure
@


1.12
log
@copyright
@
text
@/* Copyright (c) Colorado School of Mines, 2011.*/
/* All rights reserved.                       */

/* HDRPKGE: $Revision: 1.11 $ ; $Date: 1996/09/09 17:13:34 $	*/

/*********************** self documentation **********************/
/************************************************************************** 
HDRPKGE - routines to access the SEGY header via the hdr structure.
 
gethval		get a trace header word by index
puthval		put a trace header word by index
getbhval	get a binary header word by index
putbhval	put a binary header word by index
gethdval	get a trace header word by name
puthdval	put a trace header word by name


hdtype		get the data type of a trace header word by name
getkey		get the name of a trace header word from its index

getindex	get the index of a trace header word from the name

swaphval	swap the trace header words by index
swapbhval	swap the binary header words by index
gettapehval	get a tape trace header word by index
puttapehval	put a tape trace header word by index
gettapebhval	get a tape binary header word by index
puttapebhval	put a tape binary header word by index
printheader	display non-null header field values

*************************************************************************** 
Function Prototypes:
void gethval(const segy *tr, int index, Value *valp);
void puthval(segy *tr, int index, Value *valp);
void putbhval(bhed *bh, int index, Value *valp);
void getbhval(const bhed *bh, int index, Value *valp);
void gethdval(const segy *tr, char *key, Value *valp);
void puthdval(segy *tr, char *key, Value *valp);
char *hdtype(const char *key);
char *getkey(const int index);
int getindex(const char *key);
void swaphval(segy *tr, int index);
void swapbhval(bhed *bh, int index);
void gettapehval(tapesegy *tapetr, int index, Value *valp);
void puttapehval(tapesegy *tapetr, int index, Value *valp);
void gettapebhval(tapebhed *tapetr, int index, Value *valp);
void puttapebhval(tapebhed *tapetr, int index, Value *valp);
void printheader(const segy *tp);

*************************************************************************** 
Notes:
This package includes only those routines that directly access
the "hdr" or "bhdr" structures.  It does not include routines
such as printfval, printftype, printfhead that use the routines
in this package to indirectly access these structures.

Note that while gethdval and puthdval are more convenient to use
than gethval and puthval, they incur an inefficiency in the
common case of iterating code over a set of traces with a fixed
key or keys.  In such cases, it is advisable to set the index
or indices outside the loop using getindex.

swaphval:
Byte-swapping is needed for converting SU data from big-endian to little-
endian formats, and vice versa. The swap_.... subroutines are based
on subroutines provided by Jens Hartmann of the Institut fur Geophysik
in Hamburg. These are found in .../cwp/lib/swapbyte.c.
**************************************************************************
Authors: SEP: Einar Kjartansson	CWP: Jack Cohen, Shuki Ronen
swaphval: CWP: John Stockwell
*************************************************************************/
/**************** end self doc ********************************/

#include "su.h"
#include "segy.h"
#include "header.h"
#include "hdr.h"
#include "bhdr.h"
#include "tapesegy.h"
#include "tapehdr.h"
#include "tapebhdr.h"

void gethval(const segy *tr, int index, Value *valp)
{
	char *tp = (char*) tr;

	switch(*(hdr[index].type)) {
	case 's': (void) strcpy(valp->s, tp + hdr[index].offs);  break;
	case 'h': valp->h = *((short*)  (tp + hdr[index].offs)); break;
	case 'u': valp->u = *((unsigned short*) (tp + hdr[index].offs)); break;
	case 'i': valp->i = *((int*)   (tp + hdr[index].offs)); break;
	case 'p': valp->p = *((unsigned int*)   (tp + hdr[index].offs)); break;
	case 'l': valp->l = *((long*)   (tp + hdr[index].offs)); break;
	case 'v': valp->v = *((unsigned long*)  (tp + hdr[index].offs)); break;
	case 'f': valp->f = *((float*)  (tp + hdr[index].offs)); break;
	case 'd': valp->d = *((double*) (tp + hdr[index].offs)); break;
	default: err("%s: %s: mysterious data type", __FILE__,__LINE__); break;
	}

	return;
}


void puthval(segy *tr, int index, Value *valp)
{
	char *tp = (char*) tr;

	switch(*(hdr[index].type)) {
	case 's': (void) strcpy(tp + hdr[index].offs, valp->s);  break;
	case 'h': *((short*)  (tp + hdr[index].offs)) = valp->h; break;
	case 'u': *((unsigned short*) (tp + hdr[index].offs)) = valp->u; break;
	case 'i': *((int*)   (tp + hdr[index].offs)) = valp->i; break;
	case 'p': *((unsigned int*)   (tp + hdr[index].offs)) = valp->p; break;
	case 'l': *((long*)   (tp + hdr[index].offs)) = valp->l; break;
	case 'v': *((unsigned long*)  (tp + hdr[index].offs)) = valp->v; break;
	case 'f': *((float*)  (tp + hdr[index].offs)) = valp->f; break;
	case 'd': *((double*) (tp + hdr[index].offs)) = valp->d; break;
	default: err("%s: %s: mysterious data type", __FILE__,__LINE__); break;
	}

	return;
}


void getbhval(const bhed *bh, int index, Value *valp)
{
	char *bhp = (char*) bh;

	switch(*(bhdr[index].type)) {
	case 'h': valp->h = *((short*) (bhp + bhdr[index].offs)); break;
	case 'i': valp->i = *((int*)   (bhp + bhdr[index].offs)); break;
	default: err("%s: %s: mysterious data type", __FILE__, __LINE__);
	break;
	}

	return;
}


void putbhval(bhed *bh, int index, Value *valp)
{
	char *bhp = (char*) bh;

	switch(*(bhdr[index].type)) {
	case 'h': *((short*) (bhp + bhdr[index].offs)) = valp->h; break;
	case 'i': *((int*)   (bhp + bhdr[index].offs)) = valp->i; break;
	default: err("%s: %s: mysterious data type", __FILE__, __LINE__);
	break;
	}

	return;
}


void gethdval(const segy *tr, char *key, Value *valp)
{
	int index = getindex(key);
	char *tp = (char*) tr;

	if ( -1 == (index))
		err("%s: key word not in segy.h: '%s'", __FILE__, key);

	switch(*(hdr[index].type)) {
	case 's': (void) strcpy(valp->s, tp + hdr[index].offs);  break;
	case 'h': valp->h = *((short*)  (tp + hdr[index].offs)); break;
	case 'u': valp->u = *((unsigned short*) (tp + hdr[index].offs)); break;
	case 'i': valp->i = *((int*)   (tp + hdr[index].offs)); break;
	case 'p': valp->p = *((unsigned int*)   (tp + hdr[index].offs)); break;
	case 'l': valp->l = *((long*)   (tp + hdr[index].offs)); break;
	case 'v': valp->v = *((unsigned long*)  (tp + hdr[index].offs)); break;
	case 'f': valp->f = *((float*)  (tp + hdr[index].offs)); break;
	case 'd': valp->d = *((double*) (tp + hdr[index].offs)); break;
	default: err("%s: %s: mysterious data type", __FILE__,__LINE__); break;
	}

	return;
}


void puthdval(segy *tr, char *key, Value *valp)
{
	int index = getindex(key);
	char *tp = (char*) tr;

	if ( -1 == (index))
		err("%s: key word not in segy.h: '%s'", __FILE__, key);

	switch(*(hdr[index].type)) {
	case 's': (void) strcpy(tp + hdr[index].offs, valp->s);  break;
	case 'h': *((short*)  (tp + hdr[index].offs)) = valp->h; break;
	case 'u': *((unsigned short*) (tp + hdr[index].offs)) = valp->u; break;
	case 'i': *((int*)   (tp + hdr[index].offs)) = valp->i; break;
	case 'p': *((unsigned int*)   (tp + hdr[index].offs)) = valp->p; break;
	case 'l': *((long*)   (tp + hdr[index].offs)) = valp->l; break;
	case 'v': *((unsigned long*)  (tp + hdr[index].offs)) = valp->v; break;
	case 'f': *((float*)  (tp + hdr[index].offs)) = valp->f; break;
	case 'd': *((double*) (tp + hdr[index].offs)) = valp->d; break;
	default: err("%s: %s: mysterious data type", __FILE__,__LINE__); break;
	}

	return;
}


char *hdtype(const char *key)
{
	int index = getindex(key);

	if (-1 == (index))
		err("%s: key word not in segy.h: '%s'", __FILE__, key);

	return hdr[index].type;
}


char *getkey(const int index)
{
	return (index < SU_NKEYS && index >= 0) ? hdr[index].key : NULL;
}


int getindex(const char *key)	/* get index for this key */
{
	register int i;

	for (i = 0; i < SU_NKEYS; i++)
		if (STREQ(hdr[i].key, key))
			return i;	/* key found */

	/* not found */
	return -1;
}


void swaphval(segy *tr, int index)
{
	register char *tp= (char *) tr;

        switch(*(hdr[index].type)) {
        case 'h': swap_short_2((short*)(tp + hdr[index].offs));
	break;
        case 'u': swap_u_short_2((unsigned short*)(tp + hdr[index].offs));
	break;
        case 'i': swap_int_4((int*)(tp + hdr[index].offs));
	break;
        case 'p': swap_u_int_4((unsigned int*)(tp + hdr[index].offs));
	break;
        case 'l': swap_long_4((long*)(tp + hdr[index].offs));
	break;
        case 'v': swap_u_long_4((unsigned long*)(tp + hdr[index].offs));
	break;
        case 'f': swap_float_4((float*)(tp + hdr[index].offs));
	break;
        case 'd': swap_double_8((double*)(tp + hdr[index].offs));
	break;
        default: err("%s: %s: unsupported data type", __FILE__, __LINE__);
	break;
        }

        return;
}


void swapbhval(bhed *bh, int index)
{
	register char *bhp= (char *) bh;

        switch(*(bhdr[index].type)) {
        case 'h': swap_short_2((short*)(bhp + bhdr[index].offs)); break;
        case 'i': swap_int_4((int*)(bhp + bhdr[index].offs)); break;
        default: err("%s: %s: unsupported data type", __FILE__, __LINE__);
	break;
        }

        return;
}


void gettapehval(const tapesegy *tr, int index, Value *valp)
{
	char *tp = (char*) tr;

	switch(*(tapehdr[index].type)) {
	case 'U': valp->h = (short) *((short*) (tp + tapehdr[index].offs));
	break;
	case 'P': valp->i = (int) *((int*) (tp + tapehdr[index].offs));
	break;
	default: err("%s: %s: mysterious data type", __FILE__, __LINE__);
	break;
	}

	return;
}


void puttapehval(tapesegy *tr, int index, Value *valp)
{
	char *tp = (char*) tr;

	switch(*(tapehdr[index].type)) {
	case 'U': *((short*) (tp + tapehdr[index].offs)) = valp->h; break;
	case 'P': *((int*)   (tp + tapehdr[index].offs)) = valp->i; break;
	default: err("%s: %s: mysterious data type", __FILE__, __LINE__);
	break;
	}

	return;
}


void gettapebhval(const tapebhed *tr, int index, Value *valp)
{
	char *tp = (char*) tr;

	switch(*(tapebhdr[index].type)) {
	case 'U': valp->h = (short) *((short*) (tp + tapebhdr[index].offs));
	break;
	case 'P': valp->i = (int) *((int*) (tp + tapebhdr[index].offs));
	break;
	default: err("%s: %s: mysterious data type", __FILE__, __LINE__);
	break;
	}

	return;
}


void puttapebhval(tapebhed *bh, int index, Value *valp)
{
	char *bhp = (char*) bh;

	switch(*(tapebhdr[index].type)) {
	case 'U': *((short*) (bhp + tapebhdr[index].offs)) = valp->h; break;
	case 'P': *((int*)   (bhp + tapebhdr[index].offs)) = valp->i; break;
	default: err("%s: %s: mysterious data type", __FILE__, __LINE__);
	break;
	}

	return;
}



/* Display non-null header field values */
void printheader(const segy *tp)
{
	int i;			/* index over header fields		*/
	int j;			/* index over non-null header fields	*/
	Value val;		/* value in header field		*/
	cwp_String type;	/* ... its data type			*/
	cwp_String key;		/* ... the name of the header field	*/
	Value zeroval;		 /* zero value to compare with		*/

	zeroval.l = 0;
	j = 0;
	for (i = 0; i < SU_NKEYS; i++) {
		gethval(tp, i, &val);
		key = getkey(i);
		type = hdtype(key);
		if (valcmp(type, val, zeroval)) { /* not equal to zero */
			(void) printf(" %s=", key);
			printfval(type, val);
			if ((++j % 6) == 0) putchar('\n');
		}
	}
	putchar('\n');

	return;
}
@


1.11
log
@added include files to reflect new tapehdr.h and tapebhdr.h include
files.
@
text
@d1 4
a4 1
/* HDRPKGE: $Revision: 1.10 $ ; $Date: 1994/09/06 09:50:13 $	*/
@


1.10
log
@printheader subroutine moved here from hdrpkge.c
Removed some old fashioned documentation superceded by function prototypes
Added swapbhval, gettapehval, puttapehval, gettapebhval, puttapebhval,
  putbhval, getbhval.
Note: should probably add full bhed support, that is the analogs of:
gethdval	get a trace header word by name
puthdval	put a trace header word by name
hdtype		get the data type of a trace header word by name
getkey		get the name of a trace header word from its index
getindex	get the index of a trace header word from the name
Now includes the new bhdr.h and tapesegy.h files.
@
text
@d1 1
a1 1
/* HDRPKGE: $Revision: 1.5 $ ; $Date: 94/09/01 14:57:15 $	*/
a72 1
#include "tapesegy.h"
d76 3
@


1.9
log
@Went the whole nine yards and added 'p' support (unsigned int).
@
text
@d1 1
a1 2
/* Copyright (c) Colorado School of Mines, 1994.*/
/* All rights reserved.                       */
a2 2
/* HDRPKGE: $Revision: 1.8 $ ; $Date: 94/07/13 12:15:13 $	*/

d7 6
a12 8
gethval		get a header word by index
puthval		put a header word by index
gethdval	get a header word by name
puthdval	put a header word by name
hdtype		get the data type of a header word by name
getkey		get the name of a header from its index
getindex	get the index from the name
swaphval	swap the header words by index
d14 14
d30 1
a30 1
void gethval(segy *tr, int index, Value *valp);
d32 3
a34 1
void gethdval(segy *tr, char *key, Value *valp);
d36 3
a38 3
char *hdtype(char *key);
char *getkey(int index);
int getindex(char *key);
d40 6
a47 48
gethval, puthval:
Input:
tr		pointer to segy
index		index of key name in SEGY header

Output:
valp		union of simple data types

*************************************************************************** 
gethdval, puthval:
Input:
tr		pointer to segy
key		key name in SEGY header

Output:
valp		union of simple data types

*************************************************************************** 
hdtype:
Input:
key		key name in SEGY header

Returns: data type: h,v,f,u,i,l,d

*************************************************************************** 
getkey:
Input		
index		index of key name in SEGY header

Returns:	 key name in SEGY header

*************************************************************************** 
getindex:
Input:
key		key name in SEGY header

Returns:	 index of key name in SEGY header

*************************************************************************** 
swaphval:
Input:
tr		pointer to a segy 
int index	index value

Output:
tr		pointer to a segy with header fields byte-swapped

*************************************************************************
d50 3
a52 3
the "hdr" structure.  In particular, it does not include routines
such as printfval, printftype, printfhead which use the routines
in this package to indirectly access the hdr structure.
d73 1
d76 1
d78 1
a78 2

void gethval(segy *tr, int index, Value *valp)
d92 1
a92 1
	default: err("%s: %s: mysterious data type", __FILE__, __LINE__); break;
d113 14
d135 1
a135 1
void gethdval(segy *tr, char *key, Value *valp)
d137 15
d168 1
a168 2
	default: err("%s: %s: mysterious data type", __FILE__, __LINE__);
	break;
d193 1
a193 2
	default: err("%s: %s: mysterious data type", __FILE__, __LINE__);
	break;
d200 1
a200 1
char *hdtype(char *key)
d211 1
a211 1
char *getkey(int index)
d217 1
a217 1
int getindex(char *key)	/* get index for this key */
d229 1
a230 18
/************************************************************************
swaphval -- swap the bytes in an SU header value by index
*************************************************************************
Input:
tr		pointer to a segy 
index		index value

Output:
tr		pointer to a segy with header fields byte-swapped
*************************************************************************
Notes:
Byte-swapping is needed for converting SU data from big-endian to little-
endian formats, and vice versa. The swap_.... subroutines are based
on subroutines provided by Jens Hartmann of the Institut fur Geophysik
in Hamburg. These are found in .../cwp/lib/swapbyte.c.
*************************************************************************
Author: CWP: John Stockwell, based on su/lib/hdrpkge.c ideas
*************************************************************************/
d232 1
a232 1
	char *tp= (char *) tr;
a233 1
	/* swap the bytes in trace header by type */
d236 1
a236 1
			break;
d238 1
a238 1
			break;
d240 1
a240 1
			break;
d242 1
a242 1
			break;
d244 1
a244 1
			break;
d246 1
a246 1
			break;
d248 1
a248 1
			break;
d250 1
a250 1
			break;
d252 1
a252 1
			break;
d256 108
@


1.8
log
@added case 'i': to take care of type: int
@
text
@d4 1
a4 1
/* HDRPKGE: $Revision: 1.7 $ ; $Date: 94/03/14 14:19:43 $	*/
d81 3
a83 4
the "hdr" (formerly "kdat") structure.  In particular, it does
not include routines such as printfval, printftype, printfhead
that use the routines in this package to indirectly access the
hdr structure.
a90 13
Some history:
In the original SEP package, it was necessary to call lookey
(the old name for getindex) before using other elements of the
package since lookey had the job of initializing the table of
offsets (even though lookey, itself, did not use the table).

The SEP documentation and code often implied that lookey
and gkey used the offset in bytes in the segy header, actually
they dealt with the index.

The shared "hdr" structure was formerly called "kdat" and the
associated array was called "kd".

a95 4

case 'i':
Lines to handle type 'int' were put in by John Stockwell on  13 July 1994
in response to Jack Cohen's change of the long -> int in segy.h
d117 1
d138 1
d164 1
d190 1
d261 2
@


1.7
log
@added dummy selfdocs
@
text
@d1 2
a2 1
/* HDRPKGE: $Revision: 1.6 $ ; $Date: 93/08/13 10:26:46 $	*/
d4 2
d53 1
a53 1
Returns: data type: h,v,f,u,l,d
d111 3
d134 1
d154 1
d179 1
d204 1
d273 2
@


1.6
log
@changed String to cwp_String, Bool to cwp_Bool
@
text
@d1 1
a1 1
/* HDRPKGE: $Revision: 1.5 $ ; $Date: 91/10/08 15:03:20 $	*/
d3 12
a14 12
/*----------------------------------------------------------------------
 * Copyright (c) Colorado School of Mines, 1989.
 * All rights reserved.
 *
 * This code is part of SU.  SU stands for Seismic Unix, a processing line
 * developed at the Colorado School of Mines, partially based on Stanford
 * Exploration Project (SEP) software.  Inquiries should be addressed to:
 *
 *  Jack K. Cohen, Center for Wave Phenomena, Colorado School of Mines,
 *  Golden, CO 80401  (jkc@@dix.mines.colorado)
 *----------------------------------------------------------------------
 */
d16 98
a118 80
/* hdrpkge - routines to access the SEGY header via the hdr structure.
 *
 * gethval - get a header word by index
 * puthval - put a header word by index
 * gethdval - get a header word by name
 * puthdval - put a header word by name
 * hdtype   - get the data type of a header word by name
 * getkey   - get the name of a header from its index
 * getindex - get the index from the name
 *
 * Returns:
 *	gethval : void
 *	puthval : void
 *	gethdval: void
 *	puthdval: void
 *	hdtype  : pointer to a string designating the data type
 *	getkey  : pointer to a string with the name of the keyword (or NULL)
 *	getindex: integer index
 *
 * Synopsis:
 *	void gethval(trace_ptr, index, val_ptr)
 *	char *trace_ptr;	pointer to segy
 *	int index;		index of key name in SEGY header
 *	Value *val_ptr;		union of simple data types
 *
 *	void puthval(trace_ptr, index, val_ptr)
 *	char *trace_ptr;	pointer to segy
 *	int index;		index of key name in SEGY header
 *	Value *val_ptr;		union of simple data types
 *
 *	void gethdval(trace_ptr, key, val_ptr)
 *	char *trace_ptr;	pointer to segy
 *	char *key;		key name in SEGY header
 *	Value *val_ptr;		union of simple data types
 *
 *	void puthdval(trace_ptr, key, val_ptr)
 *	char *trace_ptr;	pointer to segy
 *	char *key;		key name in SEGY header
 *	Value *val_ptr;		union of simple data types
 *
 *	char *hdtype(key)
 *	char *key;		key name in SEGY header
 *
 *	char *getkey(index)
 *	int index;		zero-based index of keyword
 *
 *	int getindex(key)
 *	char *key;		key name in SEGY header
 *
 * Credits:
 *	SEP: Einar
 *	CWP: Jack, Shuki
 *
 * Notes:
 *	This package includes only those routines that directly access
 *	the "hdr" (formerly "kdat") structure.  In particular, it does
 *	not include routines such as printfval, printftype, printfhead
 *	that use the routines in this package to indirectly access the
 *	hdr structure.
 *
 *      Note that while gethdval and puthdval are more convenient to use
 *	than gethval and puthval, they incur an inefficiency in the
 *	common case of iterating code over a set of traces with a fixed
 *      key or keys.  In such cases, it is advisable to set the index
 *      or indices outside the loop using getindex.
 *
 *	Some history:
 *	In the original SEP package, it was necessary to call lookey
 *	(the old name for getindex) before using other elements of the
 *	package since lookey had the job of initializing the table of
 *	offsets (even though lookey, itself, did not use the table).
 *
 *	The SEP documentation and code often implied that lookey
 *	and gkey used the offset in bytes in the segy header, actually
 *	they dealt with the index.
 *
 *	The shared "hdr" structure was formerly called "kdat" and the
 *	associated array was called "kd".
 *
 */
a119 1

d234 43
@


1.5
log
@ushort -> unsigned short, etc.
@
text
@d1 1
a1 1
/* HDRPKGE: $Revision: 1.4 $ ; $Date: 91/09/05 08:47:46 $	*/
@


1.4
log
@string -> String and so forth.
@
text
@d1 1
a1 1
/* HDRPKGE: $Revision: 1.3 $ ; $Date: 90/12/26 21:15:31 $	*/
d110 1
a110 1
	case 'u': valp->u = *((ushort*) (tp + hdr[index].offs)); break;
d112 1
a112 1
	case 'v': valp->v = *((ulong*)  (tp + hdr[index].offs)); break;
d129 1
a129 1
	case 'u': *((ushort*) (tp + hdr[index].offs)) = valp->u; break;
d131 1
a131 1
	case 'v': *((ulong*)  (tp + hdr[index].offs)) = valp->v; break;
d153 1
a153 1
	case 'u': valp->u = *((ushort*) (tp + hdr[index].offs)); break;
d155 1
a155 1
	case 'v': valp->v = *((ulong*)  (tp + hdr[index].offs)); break;
d177 1
a177 1
	case 'u': *((ushort*) (tp + hdr[index].offs)) = valp->u; break;
d179 1
a179 1
	case 'v': *((ulong*)  (tp + hdr[index].offs)) = valp->v; break;
@


1.3
log
@Tweaks
@
text
@d1 1
a1 1
/* HDRPKGE: $Revision: 1.2 $ ; $Date: 90/04/24 09:22:01 $	*/
d44 1
a44 1
 *	value *val_ptr;		union of simple data types
d49 1
a49 1
 *	value *val_ptr;		union of simple data types
d54 1
a54 1
 *	value *val_ptr;		union of simple data types
d59 1
a59 1
 *	value *val_ptr;		union of simple data types
d103 1
a103 1
void gethval(segy *tr, int index, value *valp)
d122 1
a122 1
void puthval(segy *tr, int index, value *valp)
d142 1
a142 1
void gethdval(segy *tr, char *key, value *valp)
d166 1
a166 1
void puthdval(segy *tr, char *key, value *valp)
@


1.2
log
@z -> d as double indicator
@
text
@d1 1
a1 1
/* HDRPKGE: $Revision: 1.1 $ ; $Date: 90/04/15 16:04:06 $	*/
d12 1
a12 1
 *  Golden, CO 80401  (isis!csm9a!jkcohen)
a99 1
 *
d105 1
a105 1
	char *tp;
a106 2
	tp = (char*) tr;

d108 8
a115 24
	case 's':
		(void) strcpy(valp->s, tp + hdr[index].offs);
	break;
	case 'h':
		valp->h = *((short*)(tp + hdr[index].offs));
	break;
	case 'u':
		valp->u = *((ushort*)(tp + hdr[index].offs));
	break;
	case 'l':
		valp->l = *((long*)(tp + hdr[index].offs));
	break;
	case 'v':
		valp->v = *((ulong*)(tp + hdr[index].offs));
	break;
	case 'f':
		valp->f = *((float*)(tp + hdr[index].offs));
	break;
	case 'd':
		valp->d = *((double*)(tp + hdr[index].offs));
	break;
	default:
		err("%s: %s: mysterious data type", __FILE__, __LINE__);
	break;
d124 1
a124 1
	char *tp;
a125 3

	tp = (char*) tr;

d127 8
a134 2
	case 's':
		(void) strcpy(tp + hdr[index].offs, valp->s);
a135 21
	case 'h':
		*((short*) (tp + hdr[index].offs)) = valp->h;
	break;
	case 'u':
		*((ushort*) (tp + hdr[index].offs)) = valp->u;
	break;
	case 'l':
		*((long*)  (tp + hdr[index].offs)) = valp->l;
	break;
	case 'v':
		*((ulong*) (tp + hdr[index].offs)) = valp->v;
	break;
	case 'f':
		*((float*) (tp + hdr[index].offs)) = valp->f;
	break;
	case 'd':
		*((double*)(tp + hdr[index].offs)) = valp->d;
	break;
	default:
		err("%s: %s: mysterious data type", __FILE__, __LINE__);
	break;
d144 2
a145 2
	int index;
	char *tp;
d147 1
a147 3
	tp = (char*) tr;

	if ( -1 == (index = getindex(key)))
d151 8
a158 2
	case 's':
		(void) strcpy(valp->s, tp + hdr[index].offs);
a159 21
	case 'h':
		valp->h = *((short*)(tp + hdr[index].offs));
	break;
	case 'u':
		valp->u = *((ushort*)(tp + hdr[index].offs));
	break;
	case 'l':
		valp->l = *((long*)(tp + hdr[index].offs));
	break;
	case 'v':
		valp->v = *((ulong*)(tp + hdr[index].offs));
	break;
	case 'f':
		valp->f = *((float*)(tp + hdr[index].offs));
	break;
	case 'd':
		valp->d = *((double*)(tp + hdr[index].offs));
	break;
	default:
		err("%s: %s: mysterious data type", __FILE__, __LINE__);
	break;
d168 2
a169 2
	int index;
	char *tp;
d171 1
a171 3
	tp = (char*) tr;

	if ( -1 == (index = getindex(key)))
d175 8
a182 2
	case 's':
		(void) strcpy(tp + hdr[index].offs, valp->s);
a183 21
	case 'h':
		*((short*) (tp + hdr[index].offs)) = valp->h;
	break;
	case 'u':
		*((ushort*) (tp + hdr[index].offs)) = valp->u;
	break;
	case 'l':
		*((long*)  (tp + hdr[index].offs)) = valp->l;
	break;
	case 'v':
		*((ulong*) (tp + hdr[index].offs)) = valp->v;
	break;
	case 'f':
		*((float*) (tp + hdr[index].offs)) = valp->f;
	break;
	case 'd':
		*((double*)(tp + hdr[index].offs)) = valp->d;
	break;
	default:
		err("%s: %s: mysterious data type", __FILE__, __LINE__);
	break;
d192 1
a192 1
	int index;
d194 1
a194 2

	if ( -1 == (index = getindex(key))) {
a195 1
	}
d203 1
a203 5
	if (index < SU_NKEYS && index >= 0) {
		return hdr[index].key;
	} else {
		return NULL;
	}
d209 1
a209 1
	int i;
d212 2
a213 2
		if (!strcmp(hdr[i].key, key))
			return i;		/* key found */
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/* HDRPKGE: $Revision: 1.29 $ ; $Date: 89/05/25 16:10:41 $	*/
d129 2
a130 2
	case 'z':
		valp->z = *((double*)(tp + hdr[index].offs));
d167 2
a168 2
	case 'z':
		*((double*)(tp + hdr[index].offs)) = valp->z;
d208 2
a209 2
	case 'z':
		valp->z = *((double*)(tp + hdr[index].offs));
d249 2
a250 2
	case 'z':
		*((double*)(tp + hdr[index].offs)) = valp->z;
@
