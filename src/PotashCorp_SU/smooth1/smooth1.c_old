/* sutrcount.c */
/* B.Nemeth */



#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include "su.h"
#include "segy.h"

/*********************** self documentation *****************************/
char *sdoc[] = {"                                                     ",
" SMOOTH1 - smooth a 1D array                                         ",
"                                                                     ",
"   smooth1 < infile > outfile n1=                                    ",
"                                                                     ",
"   Required parameter                                                ",
"                                                                     ",
"   n1= number of x y values                                          ",
"                                                                     ",
"   Optional parameters                                               ",
"                                                                     ",
"   m=1		Smoothing method 1 Gaussian                           ",
"                                2 damped least squars                ",
"                                3 Savitzky-Golay least squares       ",
"                                4 running rectangular window         ",
"                                5 running triangle window            ",
"  f=5		Filter length in points                               ",
"  stinc=1	Increment of the x values; see doc below.             ",
"                                                                     ",
"                                                                     ",
"  The input file must have to format of x y ascii values             ",
"  If the array is segmented, i.e x is not continous than each        ",
"  segment is smoothed separatly                                      ",
"  The array is considered continous if x(i+1)=x(i)+stinc             ",
NULL};

void sm_st(float *indx,float *val,int n,int sm,int inc,int m);

int main( int argc, char *argv[] )
{
	int n1;		/* number of x y values */
	int stinc;	/* x increment  */
	int f;		/* filter length */
	int m;		/* filter method flag */
	float *x;	/* array of x index values */
	float *y; 	/* array of y values */

        /* Initialize */
        initargs(argc, argv);
        requestdoc(1);

    
	MUSTGETPARINT("n1",&n1);
	if( !getparint("stinc",&stinc)) stinc=1;
	if( !getparint("f",&f)) f=5;
	if( !getparint("m",&m)) m=1;
	
	/* allocate arrays */
	x = ealloc1float(n1);
	y = ealloc1float(n1);
	
	/* Read data into the arrays */
	{ int i;
		for(i=0;i<n1;i++) {
			fscanf(stdin," %f %f\n",&x[i],&y[i]);
		}
	}
	/* smooth */
	sm_st(x,y,n1,f,stinc,m);
	
	/* Write out */
	{ int i;
		for(i=0;i<n1;i++) {
			fprintf(stdout," %10.3f %10.3f\n",x[i],y[i]);
		}
	}
	
	free1float(x);
	free1float(y);
   	return EXIT_SUCCESS;
}

void sm_st(float *indx,float *val,int n,int sm,int inc,int m)
/* Smooth a segmented array */

{
	float *p;
	float *t;
	float *ts;
	int *ind;
	int s1;		/* segment start */
	int s2=0;		/* segment end */
	int si=0;		/* increment */
	int sq=0;		/* segment number */
	int ns;		/* datapoints in segment */
	float *filter;
	float *data;
	
	p=ealloc1float(n);
	t=ealloc1float(n);
	ts=ealloc1float(n);
	ind=ealloc1int(n);
	
	{ register int i;
		for(i=0;i<n;i++){
			p[i]=indx[i];
			t[i]=val[i];
			ind[i]=i;
		}
	}
	
	qkisort(n,p,ind);	
	
	s1=0;
	while(s2<n-1) {
		ns=1;
		si=1;
		s2=s1+si;
		while(p[ind[s1]]+(float)si*inc==p[ind[s2]]) {
			si++;
			s2=s1+si;
			ns++;
			if(ns==n) break;
		}
		{ register int i,j;
			for(i=s1,j=0;i<s2;i++,j++)
				ts[j]=t[ind[i]];
			/* smoothing */
			switch (m) {
			/* Gaussian */
			case 1 :
				gaussian1d_smoothing (ns,sm,ts);
			break;
			/* damped least squares */
			case 2 :
				dlsq_smoothing(ns,1,0,1,0,ns,sm,20,0,(float**)ts);
			break;
			/* Sawitzky-Golay */ 
			case 3 :
				filter=ealloc1float(2*sm+1);
				data=ealloc1float(ns);
				memcpy((void*) data,(const void *) ts,ns*FSIZE);
				SG_smoothing_filter(2*sm+1,sm,sm,0,4,filter);
				conv (2*sm+1,-sm,filter,ns,0,data,ns,0,ts);
				free1float(filter);
				free1float(data);
			break;
			/* Running average */
			case 4 :
				filter=ealloc1float(2*sm+1);
				data=ealloc1float(ns);
				memcpy((void*) data,(const void *) ts,ns*FSIZE);
				rwa_smoothing_filter (1,sm,sm,filter);
				conv (2*sm+1,-sm,filter,ns,0,data,ns,0,ts);
				free1float(data);
				free1float(filter);
			break;
			/* Running average triangular window*/
			case 5 :
				filter=ealloc1float(2*sm+1);
				data=ealloc1float(ns);
				memcpy((void*) data,(const void *) ts,ns*FSIZE);
				rwa_smoothing_filter (2,sm,sm,filter);
				conv (2*sm+1,-sm,filter,ns,0,data,ns,0,ts);
				free1float(data);
				free1float(filter);
			break;
			default :
				warn(" Non existing filter mode %d\n",m);
			break;
			}
				 	
			for(i=s1,j=0;i<s2;i++,j++)
				t[ind[i]]=ts[j];
		}
		fprintf(stderr," Segment # %d",sq);
		fprintf(stderr," %10.3f %10.3f %d\n",p[ind[s1]],p[ind[s2-1]],ns);
		sq++;
		s1=s2;
	}
	
	{ register int i;
		for(i=0;i<n;i++)
			val[i]=t[i];
	}

	free1float(p);
	free1float(t);
	free1float(ts);
	free1int(ind);
}
