#!/bin/sh
# DIRECTORIES
data2="/mnt/sdata/Ssx"

# Velan related files
velan=$data2"/velan"

# INPUT GATHERS AND SEMBLANCES
SCDPdir=$velan"/scdp_gathers"
sembdir=$velan"/semb"
pickdir_in=$velan"/picks"
#SCDPdir=$velan"/scdp_gathers_rs"
#sembdir=$velan"/semb_rs"
#pickdir_in=$velan"/picks_rs"
#SCDPdir=$velan"/scdp_gathers_rf"
#sembdir=$velan"/semb_rf"
#pickdir_in=$velan"/picks_rf"
#SCDPdir=$velan"/scdp_gathers_rs"
#sembdir=$velan"/semb_rs"
#pickdir_in=$velan"/picks_rs"

# FUN STARTS HERE
if [ -z $1 ]
        then echo "Usage: pick_semb #cdp number"
	exit 1
fi

cdps=$1

# contours
nc=35
perc=
old_perc=perc
# Mute for nmo
smute=2.0
# maximum offset
maxoff=1000
minoff=0.0
# maximum time
tmax=1.8

# WINDOW DEFINITIONS
style='normal'
#SEMBLANCE WINDOW
#window size
wbox=1255
hbox=420
#window positions
xs=5
ys=0
#Ticks and stuff
d1num=0.0
n1tic=2
grid1=dot
f1num=0.0
d2num=1000
n2tic=4
grid2=dot
f2num=$vels
gridcolor=black
windowtitle="Semblance $ln"
labelfont=5x7
titlefont=6x10
sl=0
cmap='hsv6'
# Ramp times for semblance window
rtmin=0.1
rtmax=

#Gain for windows
gpow=1.0

# DATA WINDOW
#data window size
wgbox=1255
hgbox=250
#Window positions
xd=5
yd=450
#Curves
dcurvecolor=yellow
# Grids
dgrid1=dot
dgridcolor=red
dn1tic=1
dd1num=0.1

# NMO CORRECTED DATA WINDOW
#window size
wgbox=1255
hgbox=250
#window position
xnd=5
ynd=720
# Grids
ndgrid1=dash
ndgridcolor=yellow
ndn1tic=1
ndd1num=0.1

# Common to al windows
# Window background colour
wbc=grey90


# cdp
cdp=$cdps
function post_semb
{
# $1 name of semblance file
# $2 cdp
# $3 name of pick file 
# $4 velocity curve rms
# $5 velocity curve int
# $6 curve colour for rms
# $7 curve colour for int
	cat $1 |
#	sunormalize t0=0.2        |
#	sufilter f=.3,.7,35,40 amps=1,1,0.5,0.0|
	suramp tmin=$rtmin tmax=$rtmax |
	suwind tmax=$tmax |
#	sugain gpow=0.7 |
	sugain gpow=1.0   |
	suximage f2=$vels d2=$veli legend=1 \
	units="semblance" bclip=$fc \
	labelsize=$labelsize        \
	label2="Velocity (m/sec)" \
	labelfont=$labelfont      \
	titlefont=$titlefont \
	title="Velocity Scan for CMP $2" \
	windowtitle=$windowtitle \
	xbox=$xs ybox=$ys wbox=$wbox hbox=$hbox \
	d1num=$d1num x1beg=$x1beg f1num=$f1num \
	n1tic=$n1tic grid1=$grid1 \
	d2num=$d2num x2beg=$x2beg f2num=$f2num \
	n2tic=$n2tic grid2=$grid2 \
	gridcolor=$gridcolor \
	mpicks=$3 cmap=rgb1 perc=$perc legend=$sl \
	curve=$4,$5 curvecolor=$6,$7 \
	npair=`wc -l < $4 | sed ' s/ //g'`,`wc -l< $5 | sed ' s/ //g'` \
	wbc=$wbc verbose=0 style=$style \
	cmap=$cmap			
	tzap ximage > /dev/null 2>&1
}

function post_cdpg
# $1 name of cdp file
# $2 cdp
# $3 name of pick file 
{
	
	if [ $3 != "mdummy" ]
		then
		# Moveout curves
		p2c.py < $3
		
		cat $1 |
		suwind key=offset min=$minoff max=$maxoff tmax=$tmax |
		sugain gpow=$gpow |
		suximage	key=offset \
		label2='offset' \
		title=$2		\
		labelfont=$labelfont      \
		titlefont=$titlefont \
		curve=`cat moveoutc.txt`	\
		npair=`cat npairsc.txt` \
		curvecolor=$dcurvecolor		\
		windowtitle=$2		\
		xbox=$xd ybox=$yd wbox=$wgbox hbox=$hgbox perc=99 \
		wbc=$wbc verbose=0 \
		style=$style > /dev/null 2>&1 &
	else 
		cat $1 |
		suwind key=offset min=$minoff max=$maxoff tmax=$tmax |
		sugain gpow=$gpow |
		suximage	key=offset \
		label2='offset' label1='time' \
		labelfont=$labelfont      \
		titlefont=$titlefont \
		title=$2		\
		curvecolor=$dcurvecolor		\
		windowtitle=$2 \
		xbox=$xd ybox=$yd wbox=$wgbox hbox=$hgbox perc=99 \
		wbc=$wbc verbose=0 \
		style=$style > /dev/null 2>&1 &
	fi
}

function post_cdpg_nmo
# post the nmo corrected cdpg
# $1 name of cdp file
# $2 cdp
# $3 name parameter file with tnmo vnmo pairs 
{
	if [ $3 = "mdummy" ]
		then
		return
	else 
		cat $1 |
		suwind key=trid reject=2,3 |
		suwind key=offset min=$minoff max=$maxoff tmax=$tmax |
		sunmo `cat $3` smute=$smute |
		sugain gpow=$gpow |
		suximage	key=offset \
		label2='offset' \
		labelfont=$labelfont      \
		titlefont=$titlefont \
		title=$2'NMO corrected'		\
		windowtitle=$2'NMO corrected' \
		grid1=$ndgrid1 gridcolor=$ndgridcolor \
		n1tic=$ndn1tic d1num=$ndd1num         \
		curvecolor=$dcurvecolor		\
		xbox=$xnd ybox=$ynd wbox=$wgbox hbox=$hgbox perc=99 \
		wbc=$wbc verbose=0 style=$style > /dev/null 2>&1  &
#		curve=`cat tlines.txt`	\
#		npair=`cat npairst.txt` \
	fi
}

# Remove the semblance files with zero length
#echo "Removing empty semblance files"
#for file in `find $sembdir -size 0`
#do 	rm $file
#done
echo "Done"

     echo $sembdir"/"$cdp".semb.su"
     echo $SCDPdir"/"$cdp".hsu"
     if [ -f $sembdir"/"$cdp".semb.su" ]
     then
# PICKING LOOP STARTS HERE, IT IS REPEATED UNTIL $OK=TRUE
	ok=false
        while [ $ok = false ]
        do

# PUT UP THE IMAGE AND WAIT FOR PICKS. ALSO PUT UP THE OLD PICKS IF EXIST
		
		rm mpicks* > /dev/null 2>&1
		rm mvc* > /dev/null 2>&1
		
		if [ -s $pickdir_in"/par."$cdp ]
		then 
			cp $pickdir_in"/par."$cdp "par_orig."$cdp
			par2a.py < $pickdir_in"/par."$cdp > mpicks_old.$cdp
			suintvel t=1 curve=1 `cat $pickdir_in"/par."$cdp |
						 sed -e 's/tnmo/t0/' -e 's/vnmo/vs/'` \
				 outpar='mpicks_int.'$cdp
		fi
		
		echo "GAIN %" $perc
		old_perc=$perc
		if [ -f moveoutc.txt ]
			then rm moveoutc.txt
			     rm npairsc.txt
		fi

		if [ -f tlines.txt ]
			then rm tlines.txt
			     rm npairst.txt
		fi

		if [ -f mpicks_old.$cdp ]
			then  	
			        post_cdpg $SCDPdir"/"$cdp".hsu" $cdp mpicks_old.$cdp > /dev/null 2>&1
				post_cdpg_nmo $SCDPdir"/"$cdp".hsu" $cdp $pickdir_in"/par."$cdp > /dev/null 2>&1
				post_semb $sembdir"/"$cdp".semb.su" $cdp \
					mpicks.$cdp mpicks_old.$cdp mpicks_int.$cdp "black" "black" > /dev/null 2>&1
			else 	
				post_cdpg $SCDPdir"/"$cdp".hsu" $cdp mdummy > /dev/null 2>&1
				post_semb $sembdir"/"$cdp".semb.su" $cdp \
				mpicks.$cdp mdummy mdummy "black" "yellow" > /dev/null 2>&1
		fi
# Was anything picked ?		
		if [ -s mpicks.$cdp ]
			then 
# SORT AND COUNT THE PICKS		
			sort <mpicks.$cdp  -n |
			mkparfile string1=tnmo string2=vnmo >$pickdir_in"/par."$cdp

# PUT UP THE IMAGE AND THE PICKED CURVE
			# Compute interval velocities 
			suintvel t=1 curve=1 `cat $pickdir_in"/par."$cdp |
						 sed -e 's/tnmo/t0/' -e 's/vnmo/vs/'` \
				 outpar='mpicks_int.'$cdp
				 
			post_cdpg $SCDPdir"/"$cdp".hsu" $cdp mpicks.$cdp > /dev/null 2>&1 
			post_cdpg_nmo $SCDPdir"/"$cdp".hsu" $cdp $pickdir_in"/par."$cdp > /dev/null 2>&1
			post_semb $sembdir"/"$cdp".semb.su" $cdp \
			mdummy mpicks.$cdp mpicks_int.$cdp "black" "yellow" > /dev/null 2>&1
# SAVE THE OLD PICKS
			mv mpicks.$cdp mpicks_old.$cdp
		fi
		
		echo "Plot percent=" $perc
		echo  "Picks OK? (y/n) [n perc] "  | tr -d "\012" >/dev/tty
		read response perc
		case $response in
		y*) ok=true ;;
		*)  ok=false ;;
		esac
		if [ -z $perc ]
			then perc=$old_perc
		fi
        done </dev/tty
     fi
### CLEAN UP
rm mpicks* > /dev/null 2>&1
rm mvc* > /dev/null 2>&1
rm t[1-9]* > /dev/null 2>&1

#supswigb < inl50.cvs nbpi=600 wbox=30 hbox=20 perc=98 > ! cvs.ps
#cat $HOME/highps cvs.ps $HOME/highoff | lpr -Php750
