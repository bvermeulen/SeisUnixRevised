/* suknmo.c */
/* B.Nemeth */



#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include "su.h"
#include "segy.h"

#define I               cmplx(0.0, 1.0)
#define PIBY2           0.5 * PI
#define TWOPI           2.0 * PI
#define LOOKFAC         2       /* Look ahead factor for npfao    */
#define PFA_MAX         720720  /* Largest allowed nfft           */
float sqrarg;
#define SQR(a) ((sqrarg=(a)) == 0.0 ? 0.0 : sqrarg*sqrarg)

/*********************** self documentation *****************************/
char *sdoc[] = {
"						 		       	",
"SUKNMO3D - Perform a Kirchoff nmo and stacking 		       	",
"                                                                       ",
" f=                    filename of the velocity file                   ",
" nstval=		number of velocity functions in the file f	",
" nvnmo=		number of velocity values within one velocity 	",
"			function in the file f		 		",
" fac=1.0		factor to multiply the velocity values with	",
" apr=80		aperture above the data is muted out		",
" key=cdp		header keyword that marks the stackable gathers	",
" normpow=1.0		each sample is divided by the normpow'th number	",
"			of non-zero values stacked 			",
"			(normpow=0 selects no division)                 ",
" sph=0                 1 Do a spherical divergence correction (1/r)    ",
NULL};
   
/* Segy data constans */
segy intrace,outtrace;				/* SEGY trace */

void knmo(float *ind, float *outd,int nt, float *vrms, 
          float t0,float offset,float dt,int imt,int sph);
static void xindex_p (int nx, float **ax, float x, int *index);
void get_vel(float **v,float *stvel,int *stval_ind,float **stval_sort, 
	     int nval,int nt,cwp_String type,Value  val, float *vrms);

int main( int argc, char *argv[] )
{
	cwp_String key;	/* header key word from segy.h		*/
	cwp_String type;/* ... its type				*/
	int indx;	/* ... its index			*/
	int nt;		/* number of data points on trace	*/
	int nsegy;	/* number of bytes in the segy		*/
	Value val;	/* value of key in current gather	*/
	Value valnew;	/* value of key in trace being treated	*/
	int sph;	/* flag for spherical div. correction   */
	int fold;	/* number of traces stacked		*/
	int *nnz;	/* number of non-zero values stacked	*/
	float normpow;	/* divide by nnz[i]^normpow		*/
	int newtracl;	/* tracl for stacked traces		*/
	int verbose;	/* verbose flag				*/
	float *knmodata;/* Kirchoff nmo corrected trace         */ 
	float *vrms;	/* array of rms velocities */
	float t0;	/* time of first sample */
	float tn;	/* time of sample */
	float apr;	/* migration aperture */
	float *ap;	/* array of apperture values */
	int itm;	/* sample of apperture mute */
	 	
	/* phase shift filter stuff */
        float power;            /* power of i omega applied to data     */
        float amp;              /* amplitude associated with the power  */
        float arg;              /* argument of power                    */
        float phasefac;         /* phase factor                         */
        float phase;            /* phase shift = phasefac*PI            */
        complex exparg;         /* cexp(I arg)                          */
        register float *rt;     /* real trace                           */
        register complex *ct;   /* complex transformed trace            */
        complex *filt;          /* complex power                        */
        float dt;               /* sample spacing (secs) on input trace */
        float omega;            /* circular frequency                   */
        float domega;           /* circular frequency spacing (from dt) */
        float sign;             /* sign in front of i*omega default -1  */
        int nfft;               /* number of points in nfft             */
        int nf;                 /* number of frequencies (incl Nyq)     */
        float onfft;            /* 1 / nfft                             */
        size_t nzeros;          /* number of padded zeroes in bytes     */
        size_t ntsize;          /* nt in bytes                          */


	/* velocity file and related things */
        cwp_String f="";        /* file containig cdps & velocity functions */
        FILE *fp;               /* file pointer */
	float fac=1.0;
	int nstval;		/* number of values of stacking flags */
	float *stval;		/* float array of the stacking flags */
	int *stval_ind;		/* sorted index of stvals */
	float **stval_sort;	/* sorted pointer array pointing to the 
				  values of stval */
	float *vnmo;		/* temporary arryay of v values */
	float *tnmo;		/* temporary arryay of t values */
	float **vv;		/* 2d array of interpolated v values */
	float v;		/* velocity value */	
	int nvnmo;		/* number of velocities picks per trace*/
	
	
	/* Initialize */
	initargs(argc, argv);
	requestdoc(1);


	/* Set parameters */
	/* Velocity file and related things */
        MUSTGETPARSTRING("f",&f);
        MUSTGETPARINT("nstval",&nstval);
        MUSTGETPARINT("nvnmo",&nvnmo);
	if (!getparfloat("fac",&fac)) fac = 1.0;
	
	/* stacking related things */
	if (!getparint   ("verbose", &verbose))	 verbose = 0;
	if (!getparfloat ("apr", &apr))	         apr = 80;
	if (!getparfloat ("normpow", &normpow))	 normpow = 1.0;
	if (!getparstring("key", &key))		 key = "cdp";
	if (!getparint("sph", &sph))		 sph = 0;

	type = hdtype(key);
	indx = getindex(key);

	/* Set up for first trace (must compare new key field each time) */
	nsegy = gettr(&intrace);
	nt = intrace.ns;
        ntsize = nt * FSIZE;
	dt = intrace.dt/1000000.0;
	t0 = intrace.delrt;
	
	memcpy( (void *) &outtrace, (const void *) &intrace, nsegy);
	nnz = ealloc1int(nt);
	{ register int i;
	  for (i = 0; i < nt; i++){
		if (intrace.data[i] != 0.0)  nnz[i]=1;
		else nnz[i] = 0;
	  }
        }
	fold = 1;

	knmodata = ealloc1float(nt);
	vrms = ealloc1float(nt);
        stval = ealloc1float(nstval);
	stval_ind = ealloc1int(nstval);
	stval_sort = ealloc1(nstval, sizeof(float *));
        vnmo = ealloc1float(nvnmo);
        tnmo = ealloc1float(nvnmo);
        vv = ealloc2float(nt,nstval);
	ap = ealloc1float(nt);

        /* Read stacking field values */
        if((fp=fopen(f,"r"))==NULL)
                        err("cannot open file=%s\n",f); 
        if(fread(stval,sizeof(float),nstval,fp)!=nstval)
                        err("error reading file=%s\n",f);
        
	/* Sort the stacking field values with index sort */
	{ register int ist;
		for(ist=0;ist<nstval;ist++) stval_ind[ist]=ist;
	}

	qkisort(nstval,stval,stval_ind);
	
	/* stval_sort is a pointer array pointing to the 
	   values of stval in a way that it was sorted
	   by quicksort */
	   
	{ register int ist;
		for(ist=0;ist<nstval;ist++)
			stval_sort[ist] = &stval[stval_ind[ist]];
	}
	
        /* Read tnmo vnmo pairs */         
        { register int ist;
		for(ist=0;ist<nstval; ++ist ) {
                	if(fread(tnmo,sizeof(float),nvnmo,fp)!=nvnmo)
                  	      err("error reading file=%s\n",f);
                	if(fread(vnmo,sizeof(float),nvnmo,fp)!=nvnmo)
                     	   err("error reading file=%s\n",f);
        	
                	{ register int it;
				for(it=0; it<nvnmo;it++) vnmo[it] *=fac;
                
                
                		for (it=0,tn=t0; it<nt; ++it,tn+=dt) {
                        		intlin(nvnmo,tnmo,vnmo,vnmo[0],vnmo[nvnmo-1],1,&tn,&v);
                        		vv[ist][it] = v;
				}
               		 }
        	}
	}
        fclose(fp);


	/* set up the phase filter */
	power = 1.0;sign =-1.0;phasefac = 0.5;
	phase = phasefac * PI;
         
	/* Set up for fft */
        nfft = npfaro(nt, LOOKFAC * nt);
        if (nfft >= SU_NFLTS || nfft >= PFA_MAX)
                err("Padded nt=%d -- too big", nfft);

        nf = nfft/2 + 1;
        onfft = 1.0 / nfft;
        nzeros = (nfft - nt) * FSIZE;
        domega = TWOPI * onfft / dt;
        
	/* Allocate fft arrays */
        rt   = ealloc1float(nfft);
        ct   = ealloc1complex(nf);
        filt = ealloc1complex(nf);
        
	/* Set up args for complex power evaluation */
        arg = sign * PIBY2 * power + phase;
        exparg = cexp(crmul(I, arg));
        {       
		register int i;
                for (i = 0 ; i < nf; ++i) {

                        omega = i * domega;
		
		        /* kludge to handle omega=0 case for power < 0 */
                        if (power < 0 && i == 0) omega = FLT_MAX;

                        /* calculate filter */
                        amp = pow(omega, power) * onfft;
			filt[i] = crmul(exparg, amp);
                }
        }


	/* Loop over traces */
	newtracl = 1;
	gethval(&intrace, indx, &val);
	get_vel(vv,stval,stval_ind,stval_sort,nstval,nt,type,val,vrms);
	while (nsegy) {		     /* While previous trace non-empty */
		nsegy = gettr(&intrace);
		gethval(&intrace, indx, &valnew);
		if (valcmp(type, val, valnew) || !nsegy) {	
			/* Either val and valnew differ, indicating a  */
			/* new gather or nsegy is zero, indicating the */
		        /* end of the traces.                          */
			if (verbose) {
				fprintf(stderr, "val=");
				fprintfval(stderr, type, val);
				fprintf(stderr, "\tfold=%d\n", fold);
			}

			/* Add header info and output stack */
			outtrace.nhs = fold;
			outtrace.tracl = newtracl++;
			outtrace.offset = 0;
			if (normpow && fold != 1) {
			        register int i;
				for (i = 0; i < nt; ++i) {
				    float nnzi = nnz[i];
				    if (nnzi)
					outtrace.data[i] /= pow(nnzi, normpow);
				}
			}
			
			/*Do the phase filtering before the trace is released*/
                	/* Load trace into rt (zero-padded) */
               		 memcpy( (void *) rt, (const void *) outtrace.data, ntsize);
               		 memset((void *) (rt + nt), (int) '\0', nzeros);

	               	/* FFT */
                	pfarc(1, nfft, rt, ct);

			/* Apply filter */
                	{ register int i;
                		for (i = 0; i < nf; ++i)  ct[i] = cmul(ct[i], filt[i]);
                	}

                	/* Invert */
                	pfacr(-1, nfft, ct, rt);
             		memcpy( (void *) outtrace.data, (const void *) rt, ntsize);
			
			/* dump the trace to stdout */
			puttr(&outtrace);

			/* Set up for next gather */
			memcpy( (void *) &outtrace,
					(const void *) &intrace, nsegy);
			{ register int i;
	  		  for (i = 0; i < nt; i++){
				if (intrace.data[i] != 0.0)  nnz[i]=1;
				else nnz[i] = 0;
			  }
			}
			fold = 1;
			val = valnew;
			/* get the appropriate velocity function 
			   from vv into vrms */
			get_vel(vv,stval,stval_ind,stval_sort,nstval,nt,type,val,vrms);
			
			/* the offset belonging to ths apperture and velocity f.*/
			{ register int it;
				for(it=0;it<nt;it++) 
				ap[it] = it*dt*vrms[it]*tan(apr)/2.0;
			}
	
		} else { /* still in same gather */
			/* Before stacking do the KNMO on the trace */
			/* Get the time of apperture limit */
			xindex(nt,ap,(float)intrace.offset,&itm);
		        knmo(intrace.data,knmodata,nt,vrms,t0,(float)intrace.offset,dt,0,sph);
			/* stacking happens here */
			{	register int i;
				for (i = 0; i < nt; ++i) {
					float dat = knmodata[i];
					if (!(dat == 0.0))  ++nnz[i];
					outtrace.data[i] += dat;
				}
			}
			++fold;
		}
	}
	
	free1float(knmodata);
	free1float(ap);

   return EXIT_SUCCESS;
}

void knmo(float *ind, float *outd,int nt, float *vrms, 
          float t0,float offset,float dt,int imt,int sph)
{
/* This routine applies the moveout corection, obliquity factor and 
	spherical divergence factor to the gather. The phase shift filter has to be
	applied to the stacked trace */
/* imt index of first live sample in input trace */
	register int i;
	float tx;
	float txa;	/* amplitude of interpolated tx */
	float of2;
	float r;
	float z;
	float t;
	float tmax;
	float tm;
	int ifsp;
		
	
	tm=imt*dt;
	if (offset==0.0) {
		for(i=0;i<nt;i++) {
			t=t0+i*dt;
			if(sph) { z=vrms[i]/2.0*t;
				  outd[i] = ind[i]*(vrms[i]*z);
			} else 
			outd[i] = ind[i];
		}
	} else {	
		memset( (void *) outd, (int) '\0',nt*FSIZE);
/*		of2=4.0*SQR(offset); */
		of2=SQR(offset);
		tmax=t0+(nt-1)*dt;
		ifsp=MAX(1,imt);
		for(i=ifsp;i<nt;i++) {
			t=t0+i*dt;
			
			/* knmo moveout */
			tx = sqrt(SQR(t) + of2/SQR(vrms[i]));
			if(tx<tmax && tx>tm) { 
				ints8r(nt-ifsp,dt,t0+ifsp*dt,&ind[ifsp],0,0,1,&tx,&txa);
				
				/* obliquity factor */
				txa *=tx/t;
				
				if(sph) { /* 3D spherical divergence */
					z=vrms[i]/2.0*(t);
					r=sqrt(SQR(offset)+SQR(z));
					txa *=vrms[i]*r;
				}
					
				outd[i]=txa;
			}
		}
	}
	/* tapering and zeroing above the apperture */
	{ register int si,ei,it;
		si=MAX(imt,0);
		ei=MIN(imt+30,nt);
 		memset( (void *) &outd[0], (int) '\0',si*FSIZE);
		for(it=si;it<ei;it++) outd[it]
			*=(float)sin((double)((it-si)*1.57/30.0));
	}
	return;
}
	
void get_vel(float **v,float *stvel,int *stval_ind,float **stval_sort, 
	     int nval,int nt,cwp_String type,Value  val, float *vrms)
{
	float fvalue;
	int index;
	
	fvalue = vtof(type,val);
/*	fprintfval(stderr, type, val);
	fprintf(stderr,"\n");
*/	
	/* find the value fvalue among the elements of nstval */
	/* I it is not there give an error */
	if(fvalue < *stval_sort[0]) 
			err(" 1 Value # %f not in velocity file\n",fvalue);
	if(fvalue > *stval_sort[nval-1]) 
			err(" 2 Value # %f not in velocity file\n",fvalue);

	/* Value should be within the bounds */
	xindex_p(nval,stval_sort,fvalue,&index);
	if(fvalue != *stval_sort[index])  
			err(" 3 Value # %f not in velocity file\n",fvalue);
	
	/* Reference back index to the true ordering of v arrays */
	/* and copy v values from v matrix to vrms vector */
	memcpy( (void *) vrms, (const void *) v[stval_ind[index]],nt*FSIZE);
}

static void
xindex_p (int nx, float **ax, float x, int *index)
/*****************************************************************************
determine index of x with respect to an array of x values
******************************************************************************
Input:
nx		number of x values in array ax
ax		array[nx] of monotonically increasing or decreasing x values
x		the value for which index is to be determined
index		index determined previously (used to begin search)

Output:
index		for monotonically increasing ax values, the largest index
		for which ax[index]<=x, except index=0 if ax[0]>x;
		for monotonically decreasing ax values, the largest index
		for which ax[index]>=x, except index=0 if ax[0]<x
******************************************************************************
Notes:
This function is designed to be particularly efficient when called
repeatedly for slightly changing x values; in such cases, the index 
returned from one call should be used in the next.
******************************************************************************
Author:  Dave Hale, Colorado School of Mines, 12/25/89
         Balazs Nemeth, Modified to work with pointer arrays pointing to 
	 floats 11/26/99 
*****************************************************************************/
{
	int lower,upper,middle,step;

	/* initialize lower and upper indices and step */
	lower = *index;
	if (lower<0) lower = 0;
	if (lower>=nx) lower = nx-1;
	upper = lower+1;
	step = 1;

	/* if x values increasing */
	if (*ax[nx-1]>*ax[0]) {

		/* find indices such that ax[lower] <= x < ax[upper] */
		while (lower>0 && *ax[lower]>x) {
			upper = lower;
			lower -= step;
			step += step;
		}
		if (lower<0) lower = 0;
		while (upper<nx && *ax[upper]<=x) {
			lower = upper;
			upper += step;
			step += step;
		}
		if (upper>nx) upper = nx;

		/* find index via bisection */
		while ((middle=(lower+upper)>>1)!=lower) {
			if (x>=*ax[middle])
				lower = middle;
			else
				upper = middle;
		}

	/* else, if not increasing */
	} else {

		/* find indices such that ax[lower] >= x > ax[upper] */
		while (lower>0 && *ax[lower]<x) {
			upper = lower;
			lower -= step;
			step += step;
		}
		if (lower<0) lower = 0;
		while (upper<nx && *ax[upper]>=x) {
			lower = upper;
			upper += step;
			step += step;
		}
		if (upper>nx) upper = nx;

		/* find index via bisection */
		while ((middle=(lower+upper)>>1)!=lower) {
			if (x<=*ax[middle])
				lower = middle;
			else
				upper = middle;
		}
	}

	/* return lower index */
	*index = lower;
}
		
